{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-03-04\r\n*/\r\n\r\n// Sources flattened with hardhat v2.12.0 https://hardhat.org\r\n\r\n// File contracts/access/Governable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Governable {\r\n    address public gov;\r\n\r\n    constructor() public {\r\n        gov = msg.sender;\r\n    }\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == gov, \"Governable: forbidden\");\r\n        _;\r\n    }\r\n\r\n    function setGov(address _gov) external onlyGov {\r\n        gov = _gov;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/token/IERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/token/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/staking/interfaces/IVester.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IVester {\r\n    function rewardTracker() external view returns (address);\r\n\r\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\r\n\r\n    function claimable(address _account) external view returns (uint256);\r\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\r\n    function claimedAmounts(address _account) external view returns (uint256);\r\n    function pairAmounts(address _account) external view returns (uint256);\r\n    function getVestedAmount(address _account) external view returns (uint256);\r\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\r\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\r\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\r\n    function bonusRewards(address _account) external view returns (uint256);\r\n\r\n    function transferStakeValues(address _sender, address _receiver) external;\r\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\r\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\r\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\r\n    function setBonusRewards(address _account, uint256 _amount) external;\r\n\r\n    function getMaxVestableAmount(address _account) external view returns (uint256);\r\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/staking/interfaces/IRewardTracker.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IRewardTracker {\r\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\r\n    function stakedAmounts(address _account) external view returns (uint256);\r\n    function updateRewards() external;\r\n    function stake(address _depositToken, uint256 _amount) external;\r\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\r\n    function unstake(address _depositToken, uint256 _amount) external;\r\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\r\n    function tokensPerInterval() external view returns (uint256);\r\n    function claim(address _receiver) external returns (uint256);\r\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\r\n    function claimable(address _account) external view returns (uint256);\r\n    function averageStakedAmounts(address _account) external view returns (uint256);\r\n    function cumulativeRewards(address _account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/tokens/interfaces/IMintable.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IMintable {\r\n    function isMinter(address _account) external returns (bool);\r\n    function setMinter(address _minter, bool _isActive) external;\r\n    function mint(address _account, uint256 _amount) external;\r\n    function burn(address _account, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/staking/Vester.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\ncontract Vester is IVester, IERC20, ReentrancyGuard, Governable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public vestingDuration;\r\n\r\n    address public esToken;\r\n    address public pairToken;\r\n    address public claimableToken;\r\n\r\n    address public override rewardTracker;\r\n\r\n    uint256 public override totalSupply;\r\n    uint256 public pairSupply;\r\n\r\n    bool public hasMaxVestableAmount;\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => uint256) public override pairAmounts;\r\n    mapping (address => uint256) public override cumulativeClaimAmounts;\r\n    mapping (address => uint256) public override claimedAmounts;\r\n    mapping (address => uint256) public lastVestingTimes;\r\n\r\n    mapping (address => uint256) public override transferredAverageStakedAmounts;\r\n    mapping (address => uint256) public override transferredCumulativeRewards;\r\n    mapping (address => uint256) public override cumulativeRewardDeductions;\r\n    mapping (address => uint256) public override bonusRewards;\r\n\r\n    mapping (address => bool) public isHandler;\r\n\r\n    event Claim(address receiver, uint256 amount);\r\n    event Deposit(address account, uint256 amount);\r\n    event Withdraw(address account, uint256 claimedAmount, uint256 balance);\r\n    event PairTransfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor (\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _vestingDuration,\r\n        address _esToken,\r\n        address _pairToken,\r\n        address _claimableToken,\r\n        address _rewardTracker\r\n    ) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        vestingDuration = _vestingDuration;\r\n\r\n        esToken = _esToken;\r\n        pairToken = _pairToken;\r\n        claimableToken = _claimableToken;\r\n\r\n        rewardTracker = _rewardTracker;\r\n\r\n        if (rewardTracker != address(0)) {\r\n            hasMaxVestableAmount = true;\r\n        }\r\n    }\r\n\r\n    function setHandler(address _handler, bool _isActive) external onlyGov {\r\n        isHandler[_handler] = _isActive;\r\n    }\r\n\r\n    function setHasMaxVestableAmount(bool _hasMaxVestableAmount) external onlyGov {\r\n        hasMaxVestableAmount = _hasMaxVestableAmount;\r\n    }\r\n\r\n    function deposit(uint256 _amount) external nonReentrant {\r\n        _deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function depositForAccount(address _account, uint256 _amount) external nonReentrant {\r\n        _validateHandler();\r\n        _deposit(_account, _amount);\r\n    }\r\n\r\n    function claim() external nonReentrant returns (uint256) {\r\n        return _claim(msg.sender, msg.sender);\r\n    }\r\n\r\n    function claimForAccount(address _account, address _receiver) external override nonReentrant returns (uint256) {\r\n        _validateHandler();\r\n        return _claim(_account, _receiver);\r\n    }\r\n\r\n    // to help users who accidentally send their tokens to this contract\r\n    function withdrawToken(address _token, address _account, uint256 _amount) external onlyGov {\r\n        IERC20(_token).safeTransfer(_account, _amount);\r\n    }\r\n\r\n    function withdraw() external nonReentrant {\r\n        address account = msg.sender;\r\n        address _receiver = account;\r\n        _claim(account, _receiver);\r\n\r\n        uint256 claimedAmount = cumulativeClaimAmounts[account];\r\n        uint256 balance = balances[account];\r\n        uint256 totalVested = balance.add(claimedAmount);\r\n        require(totalVested > 0, \"Vester: vested amount is zero\");\r\n\r\n        if (hasPairToken()) {\r\n            uint256 pairAmount = pairAmounts[account];\r\n            _burnPair(account, pairAmount);\r\n            IERC20(pairToken).safeTransfer(_receiver, pairAmount);\r\n        }\r\n\r\n        IERC20(esToken).safeTransfer(_receiver, balance);\r\n        _burn(account, balance);\r\n\r\n        delete cumulativeClaimAmounts[account];\r\n        delete claimedAmounts[account];\r\n        delete lastVestingTimes[account];\r\n\r\n        emit Withdraw(account, claimedAmount, balance);\r\n    }\r\n\r\n    function transferStakeValues(address _sender, address _receiver) external override nonReentrant {\r\n        _validateHandler();\r\n\r\n        transferredAverageStakedAmounts[_receiver] = getCombinedAverageStakedAmount(_sender);\r\n        transferredAverageStakedAmounts[_sender] = 0;\r\n\r\n        uint256 transferredCumulativeReward = transferredCumulativeRewards[_sender];\r\n        uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_sender);\r\n\r\n        transferredCumulativeRewards[_receiver] = transferredCumulativeReward.add(cumulativeReward);\r\n        cumulativeRewardDeductions[_sender] = cumulativeReward;\r\n        transferredCumulativeRewards[_sender] = 0;\r\n\r\n        bonusRewards[_receiver] = bonusRewards[_sender];\r\n        bonusRewards[_sender] = 0;\r\n    }\r\n\r\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external override nonReentrant {\r\n        _validateHandler();\r\n        transferredAverageStakedAmounts[_account] = _amount;\r\n    }\r\n\r\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external override nonReentrant {\r\n        _validateHandler();\r\n        transferredCumulativeRewards[_account] = _amount;\r\n    }\r\n\r\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external override nonReentrant {\r\n        _validateHandler();\r\n        cumulativeRewardDeductions[_account] = _amount;\r\n    }\r\n\r\n    function setBonusRewards(address _account, uint256 _amount) external override nonReentrant {\r\n        _validateHandler();\r\n        bonusRewards[_account] = _amount;\r\n    }\r\n\r\n    function claimable(address _account) public override view returns (uint256) {\r\n        uint256 amount = cumulativeClaimAmounts[_account].sub(claimedAmounts[_account]);\r\n        uint256 nextClaimable = _getNextClaimableAmount(_account);\r\n        return amount.add(nextClaimable);\r\n    }\r\n\r\n    function getMaxVestableAmount(address _account) public override view returns (uint256) {\r\n        if (!hasRewardTracker()) { return 0; }\r\n\r\n        uint256 transferredCumulativeReward = transferredCumulativeRewards[_account];\r\n        uint256 bonusReward = bonusRewards[_account];\r\n        uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_account);\r\n        uint256 maxVestableAmount = cumulativeReward.add(transferredCumulativeReward).add(bonusReward);\r\n\r\n        uint256 cumulativeRewardDeduction = cumulativeRewardDeductions[_account];\r\n\r\n        if (maxVestableAmount < cumulativeRewardDeduction) {\r\n            return 0;\r\n        }\r\n\r\n        return maxVestableAmount.sub(cumulativeRewardDeduction);\r\n    }\r\n\r\n    function getCombinedAverageStakedAmount(address _account) public override view returns (uint256) {\r\n        uint256 cumulativeReward = IRewardTracker(rewardTracker).cumulativeRewards(_account);\r\n        uint256 transferredCumulativeReward = transferredCumulativeRewards[_account];\r\n        uint256 totalCumulativeReward = cumulativeReward.add(transferredCumulativeReward);\r\n        if (totalCumulativeReward == 0) { return 0; }\r\n\r\n        uint256 averageStakedAmount = IRewardTracker(rewardTracker).averageStakedAmounts(_account);\r\n        uint256 transferredAverageStakedAmount = transferredAverageStakedAmounts[_account];\r\n\r\n        return averageStakedAmount\r\n            .mul(cumulativeReward)\r\n            .div(totalCumulativeReward)\r\n            .add(\r\n                transferredAverageStakedAmount.mul(transferredCumulativeReward).div(totalCumulativeReward)\r\n            );\r\n    }\r\n\r\n    function getPairAmount(address _account, uint256 _esAmount) public view returns (uint256) {\r\n        if (!hasRewardTracker()) { return 0; }\r\n\r\n        uint256 combinedAverageStakedAmount = getCombinedAverageStakedAmount(_account);\r\n        if (combinedAverageStakedAmount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 maxVestableAmount = getMaxVestableAmount(_account);\r\n        if (maxVestableAmount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _esAmount.mul(combinedAverageStakedAmount).div(maxVestableAmount);\r\n    }\r\n\r\n    function hasRewardTracker() public view returns (bool) {\r\n        return rewardTracker != address(0);\r\n    }\r\n\r\n    function hasPairToken() public view returns (bool) {\r\n        return pairToken != address(0);\r\n    }\r\n\r\n    function getTotalVested(address _account) public view returns (uint256) {\r\n        return balances[_account].add(cumulativeClaimAmounts[_account]);\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return balances[_account];\r\n    }\r\n\r\n    // empty implementation, tokens are non-transferrable\r\n    function transfer(address /* recipient */, uint256 /* amount */) public override returns (bool) {\r\n        revert(\"Vester: non-transferrable\");\r\n    }\r\n\r\n    // empty implementation, tokens are non-transferrable\r\n    function allowance(address /* owner */, address /* spender */) public view virtual override returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    // empty implementation, tokens are non-transferrable\r\n    function approve(address /* spender */, uint256 /* amount */) public virtual override returns (bool) {\r\n        revert(\"Vester: non-transferrable\");\r\n    }\r\n\r\n    // empty implementation, tokens are non-transferrable\r\n    function transferFrom(address /* sender */, address /* recipient */, uint256 /* amount */) public virtual override returns (bool) {\r\n        revert(\"Vester: non-transferrable\");\r\n    }\r\n\r\n    function getVestedAmount(address _account) public override view returns (uint256) {\r\n        uint256 balance = balances[_account];\r\n        uint256 cumulativeClaimAmount = cumulativeClaimAmounts[_account];\r\n        return balance.add(cumulativeClaimAmount);\r\n    }\r\n\r\n    function _mint(address _account, uint256 _amount) private {\r\n        require(_account != address(0), \"Vester: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_account] = balances[_account].add(_amount);\r\n\r\n        emit Transfer(address(0), _account, _amount);\r\n    }\r\n\r\n    function _mintPair(address _account, uint256 _amount) private {\r\n        require(_account != address(0), \"Vester: mint to the zero address\");\r\n\r\n        pairSupply = pairSupply.add(_amount);\r\n        pairAmounts[_account] = pairAmounts[_account].add(_amount);\r\n\r\n        emit PairTransfer(address(0), _account, _amount);\r\n    }\r\n\r\n    function _burn(address _account, uint256 _amount) private {\r\n        require(_account != address(0), \"Vester: burn from the zero address\");\r\n\r\n        balances[_account] = balances[_account].sub(_amount, \"Vester: burn amount exceeds balance\");\r\n        totalSupply = totalSupply.sub(_amount);\r\n\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n\r\n    function _burnPair(address _account, uint256 _amount) private {\r\n        require(_account != address(0), \"Vester: burn from the zero address\");\r\n\r\n        pairAmounts[_account] = pairAmounts[_account].sub(_amount, \"Vester: burn amount exceeds balance\");\r\n        pairSupply = pairSupply.sub(_amount);\r\n\r\n        emit PairTransfer(_account, address(0), _amount);\r\n    }\r\n\r\n    function _deposit(address _account, uint256 _amount) private {\r\n        require(_amount > 0, \"Vester: invalid _amount\");\r\n\r\n        _updateVesting(_account);\r\n\r\n        IERC20(esToken).safeTransferFrom(_account, address(this), _amount);\r\n\r\n        _mint(_account, _amount);\r\n\r\n        if (hasPairToken()) {\r\n            uint256 pairAmount = pairAmounts[_account];\r\n            uint256 nextPairAmount = getPairAmount(_account, balances[_account]);\r\n            if (nextPairAmount > pairAmount) {\r\n                uint256 pairAmountDiff = nextPairAmount.sub(pairAmount);\r\n                IERC20(pairToken).safeTransferFrom(_account, address(this), pairAmountDiff);\r\n                _mintPair(_account, pairAmountDiff);\r\n            }\r\n        }\r\n\r\n        if (hasMaxVestableAmount) {\r\n            uint256 maxAmount = getMaxVestableAmount(_account);\r\n            require(getTotalVested(_account) <= maxAmount, \"Vester: max vestable amount exceeded\");\r\n        }\r\n\r\n        emit Deposit(_account, _amount);\r\n    }\r\n\r\n    function _updateVesting(address _account) private {\r\n        uint256 amount = _getNextClaimableAmount(_account);\r\n        lastVestingTimes[_account] = block.timestamp;\r\n\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        // transfer claimableAmount from balances to cumulativeClaimAmounts\r\n        _burn(_account, amount);\r\n        cumulativeClaimAmounts[_account] = cumulativeClaimAmounts[_account].add(amount);\r\n\r\n        IMintable(esToken).burn(address(this), amount);\r\n    }\r\n\r\n    function _getNextClaimableAmount(address _account) private view returns (uint256) {\r\n        uint256 timeDiff = block.timestamp.sub(lastVestingTimes[_account]);\r\n\r\n        uint256 balance = balances[_account];\r\n        if (balance == 0) { return 0; }\r\n\r\n        uint256 vestedAmount = getVestedAmount(_account);\r\n        uint256 claimableAmount = vestedAmount.mul(timeDiff).div(vestingDuration);\r\n\r\n        if (claimableAmount < balance) {\r\n            return claimableAmount;\r\n        }\r\n\r\n        return balance;\r\n    }\r\n\r\n    function _claim(address _account, address _receiver) private returns (uint256) {\r\n        _updateVesting(_account);\r\n        uint256 amount = claimable(_account);\r\n        claimedAmounts[_account] = claimedAmounts[_account].add(amount);\r\n        IERC20(claimableToken).safeTransfer(_receiver, amount);\r\n        emit Claim(_account, amount);\r\n        return amount;\r\n    }\r\n\r\n    function _validateHandler() private view {\r\n        require(isHandler[msg.sender], \"Vester: forbidden\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_esToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_claimableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PairTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeClaimAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cumulativeRewardDeductions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositForAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCombinedAverageStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMaxVestableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_esAmount\",\"type\":\"uint256\"}],\"name\":\"getPairAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMaxVestableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPairToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRewardTracker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastVestingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBonusRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setCumulativeRewardDeductions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasMaxVestableAmount\",\"type\":\"bool\"}],\"name\":\"setHasMaxVestableAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferredAverageStakedAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferredCumulativeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"transferStakeValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferredAverageStakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferredCumulativeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Vester", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000611430a234f8582958fcb1a55e2a3e4e2f6cb00a000000000000000000000000017eb348a3f3d50fd40233ddbe0cdbbb2232cfbb00000000000000000000000080d2fe89b6c6c24edfb553daf35599649ac5528300000000000000000000000098fea604b3f78e84bbae294a609a85e089891cae000000000000000000000000000000000000000000000000000000000000000b566573746564204c4946330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005764c494633000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ba1cca4807765935c1573e26a50ccfda0ca8aecc523faf67a8bcec48479c16b"}