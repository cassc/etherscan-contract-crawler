{"SourceCode": "// SPDX-License-Identifier: MIT\r\n//for auditability all custom code added ontop pancakeswap code is contained between /*************/ CODE /*************/\r\n\r\npragma solidity =0.5.16;\r\n\r\ninterface ICrossFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    /*************/\r\n    function isPairDelisted(address _address) external view returns (bool);\r\n\r\n    function isDAOAdmin(address _address) external view returns (bool);\r\n\r\n    function killswitch() external;\r\n\r\n    function changePairListingStatus(address _address, bool _value) external;\r\n\r\n    function changeDexFeeStatus(\r\n        address _address,\r\n        address _pairAddress,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function dexFee(address _address, address _pairAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function isTradingHalted() external view returns (bool);\r\n\r\n    function canSwap(address _address) external view returns (bool);\r\n\r\n    /*************/\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setControlCenter(address) external;\r\n}\r\n\r\ninterface ICrossPair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /*************/\r\n    function CRSSPricecheckStatus(bool _isActive0, bool _isActive1) external;\r\n\r\n    /*************/\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(\r\n        address,\r\n        address,\r\n        address,\r\n        address\r\n    ) external;\r\n}\r\n\r\ninterface ICrossERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\ncontract CrossERC20 is ICrossERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Cross LPs\";\r\n    string public constant symbol = \"Cross-LP\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor() public {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint256(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\r\n                value\r\n            );\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"Cross: EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonces[owner]++,\r\n                        deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == owner,\r\n            \"Cross: INVALID_SIGNATURE\"\r\n        );\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n// a library for performing various math operations\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface ICrossCallee {\r\n    function CrossCall(\r\n        address sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/*************/\r\ninterface IControlCenter {\r\n    function _getCLPoolValue(\r\n        address token0,\r\n        address token1,\r\n        uint256 balance0,\r\n        uint256 balance1\r\n    ) external view returns (uint256 poolValue0, uint256 deviation0);\r\n\r\n    function _getStateVariables()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function _updateSession() external;\r\n}\r\n\r\n/*************/\r\ncontract CrossPair is ICrossPair, CrossERC20 {\r\n    using SafeMath for uint256;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant SELECTOR =\r\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n\r\n    address public factory;\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\r\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n    /*************/\r\n    mapping(address => bool) public s_whitelisted;\r\n    uint256 public currentSessionRatio;\r\n    uint256 public currentSessionLPValue;\r\n\r\n    //Session global variables + CC\r\n    address public controlCenter;\r\n    address public adminSetter;\r\n    bool private crossPriceCheckActive;\r\n    bool private chainlinkPriceCheckActive;\r\n    /*************/\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"Cross: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(SELECTOR, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"Cross: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    /****** */\r\n    event AddressFeeExclusionUpdated(address target, bool value);\r\n\r\n    modifier onlyControlCenter() {\r\n        require(msg.sender == controlCenter, \"CrossPair: Restricted access\");\r\n        _;\r\n    }\r\n\r\n    /****** */\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        address _token0,\r\n        address _token1,\r\n        address _adminSetter,\r\n        address _controlCenter\r\n    ) external {\r\n        require(msg.sender == factory, \"Cross: Restricted access\"); // sufficient check\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        /**** */\r\n        adminSetter = _adminSetter;\r\n        controlCenter = _controlCenter;\r\n        /**** */\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint256 balance0,\r\n        uint256 balance1,\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) private {\r\n        require(\r\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\r\n            \"Cross: OVERFLOW\"\r\n        );\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast +=\r\n                uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\r\n                timeElapsed;\r\n            price1CumulativeLast +=\r\n                uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\r\n                timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to 8/25 of the growth in sqrt(k)\r\n    function _mintFee(uint112 _reserve0, uint112 _reserve1)\r\n        private\r\n        returns (bool feeOn)\r\n    {\r\n        address feeTo = ICrossFactory(factory).feeTo();\r\n        feeOn = feeTo != address(0);\r\n        uint256 _kLast = kLast; // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = totalSupply\r\n                        .mul(rootK.sub(rootKLast))\r\n                        .mul(8);\r\n                    uint256 denominator = rootK.mul(17).add(rootKLast.mul(8));\r\n                    uint256 liquidity = numerator / denominator;\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    /* function _mintFee1(uint112 _reserve0, uint112 _reserve1)\r\n        private\r\n        returns (bool feeOn)\r\n    {\r\n        address feeTo = IUniswapV2Factory(factory).feeTo();\r\n        feeOn = feeTo != address(0);\r\n        uint256 _kLast = kLast; // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\r\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\r\n                    uint256 liquidity = numerator / denominator;\r\n                    if (liquidity > 0) _mint(feeTo, liquidity);\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }*/\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external lock returns (uint256 liquidity) {\r\n        require(\r\n            ICrossFactory(factory).isPairDelisted(address(this)) != true,\r\n            \"Cross:Pair delisted\"\r\n        );\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\r\n        uint256 amount0 = balance0.sub(_reserve0);\r\n        uint256 amount1 = balance1.sub(_reserve1);\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(\r\n                amount0.mul(_totalSupply) / _reserve0,\r\n                amount1.mul(_totalSupply) / _reserve1\r\n            );\r\n        }\r\n        require(liquidity > 0, \"Cross: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n        _mint(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to)\r\n        external\r\n        lock\r\n        returns (uint256 amount0, uint256 amount1)\r\n    {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\r\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\r\n        uint256 liquidity = balanceOf[address(this)];\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(\r\n            amount0 > 0 && amount1 > 0,\r\n            \"Cross: INSUFFICIENT_LIQUIDITY_BURNED\"\r\n        );\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = IERC20(_token0).balanceOf(address(this));\r\n        balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external lock {\r\n        /*************/\r\n\r\n        require(\r\n            ICrossFactory(factory).canSwap(address(this)),\r\n            \"Pair unlisted or trading is halted\"\r\n        );\r\n        /*************/\r\n        require(\r\n            amount0Out > 0 || amount1Out > 0,\r\n            \"Cross: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        require(\r\n            amount0Out < _reserve0 && amount1Out < _reserve1,\r\n            \"Cross: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n\r\n        uint256 balance0;\r\n        uint256 balance1;\r\n        {\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, \"Cross: INVALID_TO\");\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n            if (data.length > 0)\r\n                ICrossCallee(to).CrossCall(\r\n                    msg.sender,\r\n                    amount0Out,\r\n                    amount1Out,\r\n                    data\r\n                );\r\n            balance0 = IERC20(_token0).balanceOf(address(this));\r\n            balance1 = IERC20(_token1).balanceOf(address(this));\r\n        }\r\n\r\n        /*************  */\r\n        //had to change sequence and calc amountIns manually to avoid 'stack too deep' error\r\n        emit Swap(\r\n            msg.sender,\r\n            balance0 > _reserve0 - amount0Out\r\n                ? balance0 - (_reserve0 - amount0Out)\r\n                : 0,\r\n            balance1 > _reserve1 - amount1Out\r\n                ? balance1 - (_reserve1 - amount1Out)\r\n                : 0,\r\n            amount0Out,\r\n            amount1Out,\r\n            to\r\n        );\r\n        /*************/\r\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\r\n            ? balance0 - (_reserve0 - amount0Out)\r\n            : 0;\r\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\r\n            ? balance1 - (_reserve1 - amount1Out)\r\n            : 0;\r\n\r\n        require(\r\n            amount0In > 0 || amount1In > 0,\r\n            \"Pancake: INSUFFICIENT_INPUT_AMOUNT\"\r\n        );\r\n        /*************/\r\n        uint256 userFee = ICrossFactory(factory).dexFee(\r\n            tx.origin,\r\n            address(this)\r\n        );\r\n        if (userFee == 10000) {\r\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            {\r\n                require(\r\n                    balance0.mul(balance1) >=\r\n                        uint256(_reserve0).mul(uint256(_reserve1)),\r\n                    \"Pancake: K\"\r\n                );\r\n            }\r\n        } else {\r\n            {\r\n                uint256 adjustedFee = userFee == 0 ? 25 : userFee;\r\n                // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n                uint256 balance0Adjusted = (\r\n                    balance0.mul(10000).sub(amount0In.mul(adjustedFee))\r\n                );\r\n                uint256 balance1Adjusted = (\r\n                    balance1.mul(10000).sub(amount1In.mul(adjustedFee))\r\n                );\r\n                require(\r\n                    balance0Adjusted.mul(balance1Adjusted) >=\r\n                        uint256(_reserve0).mul(_reserve1).mul(10000**2),\r\n                    \"Pancake: K\"\r\n                );\r\n            }\r\n            {\r\n                //this will update once per session length in a random swap that occurs in any of the pairs within the protocol\r\n                IControlCenter(controlCenter)._updateSession();\r\n                //creates another scope to avoid stack too deep errors\r\n\r\n                //from here we fetch global modifiable variables required by the two different price checks\r\n                //the variables need to be stored and updated in a separate contract in order not to exceed contract's max state variable limit and\r\n                //standardize price checks and session througout the DEX\r\n\r\n                (\r\n                    uint256 maxSessionPriceChange,\r\n                    uint256 maxSessionLPValueChange,\r\n                    uint256 currentSessionTimestamp\r\n                ) = IControlCenter(controlCenter)._getStateVariables();\r\n                //for testing\r\n                // require(maxSessionPriceChange != 0 && maxSessionLPValueChange != 0);\r\n\r\n                if (crossPriceCheckActive == true) {\r\n                    uint256 currentTokenRatio = ((balance0 - amount0In) *\r\n                        10**18) / (balance1 - amount1In);\r\n                    if (currentSessionRatio == 0) {\r\n                        currentSessionRatio = currentTokenRatio;\r\n                    } else {\r\n                        //this is where the last session token pool ratio is recorded based on its corresponding session timestamp\r\n\r\n                        //measures current ratio against saved ratio of current session, fails if current ratio deviates from the original more than allowed\r\n                        uint256 maxSessionChange = (\r\n                            currentSessionRatio.mul(maxSessionPriceChange)\r\n                        ) / 10000;\r\n                        //compare current pool token ratio to saved ratio of current session\r\n                        require(\r\n                            currentSessionRatio - maxSessionChange <=\r\n                                currentTokenRatio &&\r\n                                currentTokenRatio <=\r\n                                currentSessionRatio + maxSessionChange,\r\n                            \"Cross:Token ratio out of range\"\r\n                        );\r\n                        if (currentSessionTimestamp == block.timestamp) {\r\n                            currentSessionRatio = currentTokenRatio;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (chainlinkPriceCheckActive == true) {\r\n                    (\r\n                        uint256 poolValue,\r\n                        uint256 chainlinkPriceDeviation\r\n                    ) = IControlCenter(controlCenter)._getCLPoolValue(\r\n                            token0,\r\n                            token1,\r\n                            balance0 - amount0In,\r\n                            balance1 - amount1In\r\n                        );\r\n                    //continues only if one of the tokens has a registered and functioning CL proxy\r\n                    if (poolValue > 0 && currentSessionLPValue > 0) {\r\n                        //updates session LP value if new session has begun\r\n                        if (currentSessionTimestamp == block.timestamp) {\r\n                            currentSessionLPValue = poolValue;\r\n                        }\r\n                        //accounts for recorded CL price deviations\r\n                        uint256 maxPoolValueRange = (poolValue *\r\n                            chainlinkPriceDeviation) / 10000;\r\n\r\n                        uint256 maxPoolValueChange = maxPoolValueRange +\r\n                            (currentSessionLPValue * maxSessionLPValueChange) /\r\n                            10000;\r\n                        require(\r\n                            currentSessionLPValue - maxPoolValueChange <=\r\n                                poolValue &&\r\n                                poolValue <=\r\n                                currentSessionLPValue + maxPoolValueChange,\r\n                            \"Cross:CLToken ratio out of range\"\r\n                        );\r\n                    } else if (currentSessionLPValue == 0) {\r\n                        currentSessionLPValue = poolValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        /*************/\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n    }\r\n\r\n    /*************/\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    /* function safeSwap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external lock {\r\n        /*************/\r\n    /*uint256 partnerFee = ICrossFactory(factory).dexFee(\r\n            tx.origin,\r\n            address(this)\r\n        );*/\r\n    /* require(\r\n            ICrossFactory(factory).dexFee(tx.origin, address(this)) > 0 ||\r\n                ICrossFactory(factory).isDAOAdmin(tx.origin) == true,\r\n            \"CRSS:Restricted access\"\r\n        );\r\n        /*************/\r\n    /*\r\n        require(\r\n            amount0Out > 0 || amount1Out > 0,\r\n            \"Pancake: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        require(\r\n            amount0Out < _reserve0 && amount1Out < _reserve1,\r\n            \"Pancake: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n\r\n        uint256 balance0;\r\n        uint256 balance1;\r\n        {\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, \"Pancake: INVALID_TO\");\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n            if (data.length > 0)\r\n                ICrossCallee(to).CrossCall(\r\n                    msg.sender,\r\n                    amount0Out,\r\n                    amount1Out,\r\n                    data\r\n                );\r\n            balance0 = IERC20(_token0).balanceOf(address(this));\r\n            balance1 = IERC20(_token1).balanceOf(address(this));\r\n        }\r\n\r\n        uint256 amount0In = balance0 > _reserve0 - amount0Out\r\n            ? balance0 - (_reserve0 - amount0Out)\r\n            : 0;\r\n        uint256 amount1In = balance1 > _reserve1 - amount1Out\r\n            ? balance1 - (_reserve1 - amount1Out)\r\n            : 0;\r\n        require(\r\n            amount0In > 0 || amount1In > 0,\r\n            \"Pancake: INSUFFICIENT_INPUT_AMOUNT\"\r\n        );\r\n        /****** */\r\n    /*\r\n\r\n        uint256 userFee = ICrossFactory(factory).dexFee(\r\n            tx.origin,\r\n            address(this)\r\n        );\r\n        uint256 adjustedFee = userFee == 0 ? 25 : userFee;\r\n        {\r\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            uint256 balance0Adjusted = (\r\n                balance0.mul(10000).sub(amount0In.mul(adjustedFee))\r\n            );\r\n            uint256 balance1Adjusted = (\r\n                balance1.mul(10000).sub(amount1In.mul(adjustedFee))\r\n            );\r\n            require(\r\n                balance0Adjusted.mul(balance1Adjusted) >=\r\n                    uint256(_reserve0).mul(_reserve1).mul(10000**2),\r\n                \"Pancake: K\"\r\n            );\r\n        } /*************/\r\n\r\n    /*     _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\r\n    }*/\r\n\r\n    /*************/\r\n    //restricted for owner only, ideally governed by a DAO voting mechanism\r\n    function CRSSPricecheckStatus(bool isActive0, bool isActive1)\r\n        external\r\n        onlyControlCenter\r\n    {\r\n        crossPriceCheckActive = isActive0;\r\n        chainlinkPriceCheckActive = isActive1;\r\n    }\r\n\r\n    function changeControlCenter(address newAddress) external {\r\n        require(\r\n            msg.sender == controlCenter || msg.sender == adminSetter,\r\n            \"CrossPair: Restricted access\"\r\n        );\r\n        controlCenter = newAddress;\r\n    }\r\n\r\n    /*************/\r\n    // force balances to match reserves\r\n    function skim(address to) external lock {\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        _safeTransfer(\r\n            _token0,\r\n            to,\r\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\r\n        );\r\n        _safeTransfer(\r\n            _token1,\r\n            to,\r\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\r\n        );\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(\r\n            IERC20(token0).balanceOf(address(this)),\r\n            IERC20(token1).balanceOf(address(this)),\r\n            reserve0,\r\n            reserve1\r\n        );\r\n    }\r\n}\r\n\r\ncontract CrossFactory is ICrossFactory {\r\n    bytes32 public constant INIT_CODE_PAIR_HASH =\r\n        keccak256(abi.encodePacked(type(CrossPair).creationCode));\r\n\r\n    /*************/\r\n    mapping(address => bool) public DAOAdmin;\r\n    mapping(address => bool) private delistedPair;\r\n    mapping(address => mapping(address => uint256)) public partnerDexFee;\r\n    bool private tradingHalted;\r\n    address public controlCenter;\r\n    /*************/\r\n    address public feeTo;\r\n    address public feeToSetter;\r\n\r\n    mapping(address => mapping(address => address)) public getPair;\r\n    address[] public allPairs;\r\n\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n    /*************/\r\n    event TradingHalted(uint256 timestamp);\r\n    event TradingResumed(uint256 timestamp);\r\n\r\n    constructor(address _controlCenter, address _feeToSetter) public {\r\n        controlCenter = _controlCenter;\r\n        feeToSetter = _feeToSetter;\r\n    }\r\n\r\n    /*************/\r\n\r\n    /*************/\r\n    modifier OnlyControlCenter() {\r\n        require(msg.sender == controlCenter, \"Cross Factory:Restricted access\");\r\n        _;\r\n    }\r\n\r\n    function isPairDelisted(address _address) external view returns (bool) {\r\n        return delistedPair[_address];\r\n    }\r\n\r\n    function canSwap(address _address) external view returns (bool) {\r\n        return !delistedPair[_address] && !tradingHalted;\r\n    }\r\n\r\n    function isDAOAdmin(address _address) external view returns (bool) {\r\n        return DAOAdmin[_address];\r\n    }\r\n\r\n    function changePairListingStatus(address _address, bool _value)\r\n        external\r\n        OnlyControlCenter\r\n    {\r\n        delistedPair[_address] = _value;\r\n    }\r\n\r\n    function changeBotExclusionStatus(address _address, bool _value)\r\n        external\r\n        OnlyControlCenter\r\n    {\r\n        DAOAdmin[_address] = _value;\r\n    }\r\n\r\n    function changeDexFeeStatus(\r\n        address _address,\r\n        address _pairAddress,\r\n        uint256 _amount\r\n    ) external OnlyControlCenter {\r\n        partnerDexFee[_pairAddress][_address] = _amount;\r\n    }\r\n\r\n    // default zero value means tax is 0.25%, 9990 is 99.90% tax, 37 is 99.63% etc., 10000 means address is exempt from DEX swap fees\r\n    function dexFee(address _address, address _pairAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return partnerDexFee[_pairAddress][_address];\r\n    }\r\n\r\n    /*************/\r\n    function allPairsLength() external view returns (uint256) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        OnlyControlCenter\r\n        returns (address pair)\r\n    {\r\n        require(tokenA != tokenB, \"CrossFactory: IDENTICAL_ADDRESSES\");\r\n        (address token0, address token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"CrossFactory: ZERO_ADDRESS\");\r\n        require(getPair[token0][token1] == address(0), \"Cross: PAIR_EXISTS\"); // single check is sufficient\r\n        bytes memory bytecode = type(CrossPair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        /*************/\r\n        require(delistedPair[pair] != true, \"CrossFactory: UNLISTED_TOKEN\");\r\n        /*************/\r\n        ICrossPair(pair).initialize(token0, token1, feeToSetter, controlCenter);\r\n        getPair[token0][token1] = pair;\r\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, allPairs.length);\r\n    }\r\n\r\n    function setFeeTo(address _feeTo) external OnlyControlCenter {\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    /*************/\r\n\r\n    function setControlCenter(address _controlCenter) external {\r\n        require(\r\n            msg.sender == feeToSetter || msg.sender == controlCenter,\r\n            \"CrossFactory: Restricted access\"\r\n        );\r\n        controlCenter = _controlCenter;\r\n    }\r\n\r\n    function changeFeeToSetter(address _address)public{\r\n        require(msg.sender == feeToSetter,\"CrossFactory: Restricted access\");\r\n        feeToSetter = _address;\r\n    }\r\n\r\n    function killswitch() public OnlyControlCenter {\r\n        bool isHalted = tradingHalted;\r\n        if (isHalted == false) {\r\n            isHalted = true;\r\n            emit TradingHalted(block.timestamp);\r\n        } else {\r\n            isHalted = false;\r\n            emit TradingResumed(block.timestamp);\r\n        }\r\n    }\r\n\r\n    function isTradingHalted() public view returns (bool) {\r\n        return tradingHalted;\r\n    }\r\n    /*************/\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AddressFeeExclusionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive0\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive1\",\"type\":\"bool\"}],\"name\":\"CRSSPricecheckStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeControlCenter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controlCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSessionLPValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSessionRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminSetter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controlCenter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CrossPair", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://64f50d7e870274b17beb8a6162eec661145c7e36da54bc4a74c57ac93ba66c1e"}