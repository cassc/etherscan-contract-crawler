{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ContextUpgradeable is Initializable{\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\ncontract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\nlibrary SafeMathUpgradeable  {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract BUYSWIPE is Initializable, ContextUpgradeable, OwnableUpgradeable {\r\n    using SafeMathUpgradeable  for uint256;\r\n\r\n    struct Plan {\r\n        uint256 _amount;\r\n        uint256 _validity;\r\n        uint256 _minIvestment;\r\n        uint256 _maxIvestment;\r\n        bool _isDiscount;\r\n        uint256 _DisPercent;\r\n        bool _isEnable;\r\n    }\r\n\r\n    struct Periods {\r\n        uint256 _duration;\r\n        bool _isAutoCompound;\r\n        bool _isActive;\r\n    }\r\n\r\n    struct UserBot {\r\n        uint256 _planID;\r\n        uint256 _periodsID;\r\n        uint256 _expiredOn;\r\n        uint256 _investedAmount;\r\n        uint256 _profit;\r\n        uint256 _buyTime;\r\n        bool _enable;\r\n        bool _isExpriy;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => UserBot)) public _userBot;\r\n    mapping(address => bool) public _tokens;\r\n    mapping(address => address) public parentOf;\r\n    Plan[] public _plans;\r\n    Periods[] public _periods;\r\n    uint256 affilateFee;\r\n\r\n   function initialize() public initializer  {\r\n        __Ownable_init();\r\n        affilateFee = 10 * 10**18;\r\n    }\r\n\r\n    function purchaseBot(\r\n        uint256 _planID,\r\n        uint256 _periodID,\r\n        address _token,\r\n        address _referrer\r\n    ) public {\r\n        // STABLE TOKENS\r\n        require(_tokens[_token], \"Token is not supported !\");\r\n\r\n        if (_plans[_planID]._isDiscount) {\r\n            uint256 DiscountFee = _plans[_planID]._amount.sub(\r\n                _plans[_planID]._amount.mul(_plans[_planID]._DisPercent).div(\r\n                    10**20\r\n                )\r\n            );\r\n            IERC20(_token).transferFrom(msg.sender, address(this), DiscountFee);\r\n        } else {\r\n            IERC20(_token).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _plans[_planID]._amount\r\n            );\r\n        }\r\n\r\n        UserBot storage user = _userBot[msg.sender][_planID];\r\n        user._planID = _planID;\r\n        user._periodsID = _periodID;\r\n        user._buyTime = block.timestamp;\r\n        user._enable = false;\r\n        user._isExpriy = false;\r\n        _userBot[msg.sender][_planID] = user;\r\n        parentOf[msg.sender] = _referrer;\r\n\r\n        // affilate Transfer\r\n        if (_plans[_planID]._amount.mul(affilateFee).div(10**20) > 0)\r\n            IERC20(_token).transfer(\r\n                _referrer,\r\n                _plans[_planID]._amount.mul(affilateFee).div(10**20)\r\n            );\r\n    }\r\n\r\n    function addPlan(\r\n        uint256 _planAmount,\r\n        uint256 _validity,\r\n        uint256 _min,\r\n        uint256 _max,\r\n        bool _isDiscount,\r\n        uint256 _DisPercent,\r\n        bool _isEnable\r\n    ) external onlyOwner {\r\n        _plans.push(\r\n            Plan(\r\n                _planAmount,\r\n                _validity,\r\n                _min,\r\n                _max,\r\n                _isDiscount,\r\n                _DisPercent,\r\n                _isEnable\r\n            )\r\n        );\r\n    }\r\n\r\n    function getLastPlanIndex() external view returns (uint256) {\r\n        return _plans.length;\r\n    }\r\n\r\n    function setPlan(\r\n        uint256 _planID,\r\n        uint256 _planAmount,\r\n        uint256 _validity,\r\n        uint256 _min,\r\n        uint256 _max,\r\n        bool _isDiscount,\r\n        uint256 _DisPercent,\r\n        bool _isEnable\r\n    ) external onlyOwner {\r\n        Plan storage plan = _plans[_planID];\r\n        plan._amount = _planAmount;\r\n        plan._minIvestment = _min;\r\n        plan._maxIvestment = _max;\r\n        plan._validity = _validity;\r\n        plan._isDiscount = _isDiscount;\r\n        plan._DisPercent = _DisPercent;\r\n        plan._isEnable = _isEnable;\r\n        _plans[_planID] = plan;\r\n    }\r\n\r\n    function addPeriod(\r\n        uint256 _duration,\r\n        bool autoCompound,\r\n        bool isActive\r\n    ) external onlyOwner {\r\n        _periods.push(Periods(_duration, autoCompound, isActive));\r\n    }\r\n\r\n    function setPeriod(\r\n        uint256 _pid,\r\n        uint256 _duration,\r\n        bool autoCompound,\r\n        bool isActive\r\n    ) external onlyOwner {\r\n        Periods storage period = _periods[_pid];\r\n        period._duration = _duration;\r\n        period._isAutoCompound = autoCompound;\r\n        period._isActive = isActive;\r\n    }\r\n\r\n    function getLastPeriodIndex() external view returns (uint256) {\r\n        return _periods.length;\r\n    }\r\n\r\n    function getTotalPeriod() external view returns (Periods[] memory) {\r\n        return _periods;\r\n    }\r\n\r\n    function getPeriod(uint256 _pid) external view returns (Periods memory) {\r\n        return _periods[_pid];\r\n    }\r\n\r\n    function addToken(address _token, bool _allowed) external onlyOwner {\r\n        _tokens[_token] = _allowed;\r\n    }\r\n\r\n    function setAffilateFee(uint256 _fee) external onlyOwner {\r\n        affilateFee = _fee;\r\n    }\r\n\r\n    function getAffilateFee() external view returns (uint256) {\r\n        return affilateFee;\r\n    }\r\n\r\n    function botsubscribe(uint256 _planID) public {\r\n        UserBot storage user = _userBot[msg.sender][_planID];\r\n        user._enable = true;\r\n        user._expiredOn = block.timestamp.add(_plans[_planID]._validity);\r\n    }\r\n\r\n    function getuserPlan(address user, uint256 _planID)\r\n        external\r\n        view\r\n        returns (UserBot memory)\r\n    {\r\n        return _userBot[user][_planID];\r\n    }\r\n\r\n    function getPlan(uint256 _planID) external view returns (Plan memory) {\r\n        return _plans[_planID];\r\n    }\r\n\r\n    function getTotalPlan() external view returns (Plan[] memory) {\r\n        return _plans;\r\n    }\r\n\r\n    function withDrawToken(address _token, uint256 _amount) external onlyOwner {\r\n        require(_tokens[_token], \"Token is not supported !\");\r\n        if(IERC20(_token).balanceOf(address(this)) >= _amount){\r\n            IERC20(_token).transfer(owner(), _amount);\r\n        }\r\n        \r\n    }\r\n    function withDrawBNB(uint256 _amount) external onlyOwner {\r\n         require(address(this).balance >= _amount , \"No Funds Left\"); payable (owner()).transfer(_amount); \r\n    }\r\n    function withDrawFor(address _token, address _user, uint256 _amount) external onlyOwner{\r\n        require(_tokens[_token], \"Token is not supported !\");\r\n        if(IERC20(_token).balanceOf(address(this)) >= _amount){\r\n            IERC20(_token).transfer(_user, _amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAutoCompound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minIvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIvestment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDiscount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_DisPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userBot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodsID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiredOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isExpriy\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoCompound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"addPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDiscount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_DisPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnable\",\"type\":\"bool\"}],\"name\":\"addPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"}],\"name\":\"botsubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAffilateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastPeriodIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastPlanIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAutoCompound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"internalType\":\"struct BUYSWIPE.Periods\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"}],\"name\":\"getPlan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minIvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIvestment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDiscount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_DisPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnable\",\"type\":\"bool\"}],\"internalType\":\"struct BUYSWIPE.Plan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAutoCompound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"internalType\":\"struct BUYSWIPE.Periods[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPlan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minIvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIvestment\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDiscount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_DisPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnable\",\"type\":\"bool\"}],\"internalType\":\"struct BUYSWIPE.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"}],\"name\":\"getuserPlan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodsID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiredOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isExpriy\",\"type\":\"bool\"}],\"internalType\":\"struct BUYSWIPE.UserBot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parentOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_periodID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"purchaseBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setAffilateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoCompound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_planID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isDiscount\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_DisPercent\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isEnable\",\"type\":\"bool\"}],\"name\":\"setPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BUYSWIPE", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d4edc78186a0a293cc46f73cce52ef433c82c076782ff62a4401af6957e1195e"}