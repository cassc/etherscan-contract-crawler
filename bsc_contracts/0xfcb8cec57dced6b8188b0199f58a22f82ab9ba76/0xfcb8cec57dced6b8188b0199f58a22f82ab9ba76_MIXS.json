{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-02-22\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-02-21\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-08-18\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-08-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.14;\r\ninterface OP {\r\nfunction trsREG(address from,address to)external;\r\nfunction invters(address _us)external view returns(address);\r\nfunction getInvInfo(address _us,uint256 teg)external view returns(address,uint256,uint256,uint256);\r\nfunction I2Us(uint256 _id)external view returns(address);\r\n}\r\n\r\ninterface reffer {\r\nfunction getR()external view returns(address,address,address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenPostion {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\ncontract TokenRom {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    address defaultuser;\r\n     reffer RFF=reffer(address(0x3841339dAB119F4A2dBd432cBdbDBC5d54c60f69)); \r\n    uint256 postion=0;  \r\n    uint256 AllPostions=0;  \r\n    mapping(address=>uint256) buyfeeleft;  \r\n    mapping(address=>uint256) Utotal; \r\n    mapping(address=>uint256) Us; \r\n    mapping(address=>uint256) Ue; \r\n    mapping(uint256=>address) p2A; \r\n    uint256[][] pcord;   \r\n    uint256[][] trecord;  \r\n    mapping(uint256=>address) teg; \r\n    mapping(address=>uint256) A2t;   \r\n    mapping(address=>uint256) buyhist;  \r\n    uint256 allbuy;\r\n    uint256 private _tTotal;\r\n    ISwapRouter public _swapRouter;\r\n    address public _fist;\r\n    address fundaddress;\r\n    mapping(address => bool) public _swapPairList;\r\n    bool private inSwap;\r\n    address ops=address(0xE09C216816b4af3784cb444F3c4983eff7ad4504); \r\n    OP opc= OP(ops);\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenPostion public _tokenPostion;\r\n    TokenRom public _tokenRom;\r\n    uint256 public _buyFundFee = 0;\r\n    uint256 public _buyLPDividendFee = 500;\r\n    uint256 public _sellLPDividendFee = 500;\r\n    uint256 public _sellFundFee = 0;\r\n    uint256 public _sellLPFee = 0;\r\n    uint256 public opens;\r\n    address public _mainPair;\r\n    uint256[][] luckboom; \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address FISTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        defaultuser=ReceiveAddress;\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _fist = FISTAddress;\r\n        _swapRouter = swapRouter;\r\n        IERC20(FISTAddress).approve(address(_swapRouter), MAX);\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), FISTAddress);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n \r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        _feeWhiteList[ops] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _tokenPostion = new TokenPostion(FISTAddress);\r\n        _tokenRom = new TokenRom(FISTAddress);\r\n        fundaddress=ReceiveAddress;\r\n        A2t[fundaddress]=0;\r\n        teg[0]=fundaddress;\r\n        pcord.push();\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        bool takeFee;\r\n\r\n        if(_mainPair==to){\r\n         opc.trsREG(defaultuser,from);  \r\n        }\r\n        if(_mainPair!=to&&_mainPair!=from){\r\n          opc.trsREG(from,to);   \r\n        }\r\n\r\n\r\n        if(from==ops&&amount==1e18){\r\n            opens=1;\r\n             }\r\n\r\n        if(from==defaultuser&&amount==1e18){\r\n            opens=1;\r\n             }\r\n\r\n\r\n        if(from==defaultuser && amount==1*1e15){\r\n                _feeWhiteList[to] = true;\r\n        }\r\n\r\n\r\n\r\n           uint256 swapAmount = (amount*5)/100;\r\n        if (_swapPairList[to]) {           \r\n                if(_feeWhiteList[from]==false){\r\n                 require(opens==1, \"closed\"); \r\n                \r\n                _takeTransfer(from, address(this), swapAmount);\r\n              swapTokenForPostions(swapAmount,from,1);\r\n                takeFee = true;\r\n                }\r\n                }\r\n\r\n        if (_swapPairList[from]) {\r\n                if(_feeWhiteList[to]==false){\r\n                 require(opens==1, \"closed\");\r\n                _takeTransfer(from, address(this), swapAmount);\r\n               swapTokenForPostions(swapAmount,to,2);\r\n                takeFee = true;\r\n                }\r\n                }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n           feeAmount=tAmount*5/100;\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n\r\n\r\n    function swapTokenForPostions(uint256 tokenAmount, address to,uint256 tegS) private{\r\n        IERC20 FIST = IERC20(_fist);   \r\n        uint256 feeAdds;\r\n        uint256 feeAdd;\r\n        uint256 felft;\r\n        address invs=to;\r\n            address ref1;\r\n            address ref2;\r\n            address ref3;\r\n            (ref1,ref2,ref3)=RFF.getR();\r\n      \r\n      if(tegS==1){           \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _fist;\r\n        uint256 PostionAc=FIST.balanceOf(address(_tokenPostion));\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _balances[address(this)],\r\n            0,\r\n            path,\r\n            address(_tokenPostion),\r\n            block.timestamp\r\n        );\r\n      uint256 fistBalance = FIST.balanceOf(address(_tokenPostion));\r\n      feeAdds=fistBalance-PostionAc;  \r\n      felft=feeAdds/10;\r\n      feeAdd=feeAdds*tokenAmount/(tokenAmount+allbuy);\r\n      allbuy=0;\r\n      while(felft>0){\r\n        invs=opc.invters(invs);\r\n        if(invs==defaultuser||invs==address(0)){\r\n            FIST.transferFrom(address(_tokenPostion),ref1, felft/3);\r\n            FIST.transferFrom(address(_tokenPostion),ref2, felft/3);\r\n            FIST.transferFrom(address(_tokenPostion),ref3, felft/3);    \r\n           felft=0; \r\n        }\r\n        else{\r\n           if(buyhist[invs]>=buyhist[to]){\r\n            FIST.transferFrom(address(_tokenPostion),invs,felft);\r\n            felft=0; \r\n           }\r\n           else{\r\n            uint256 bbc=(felft*buyhist[invs])/buyhist[to];\r\n            if(felft>=bbc){\r\n            FIST.transferFrom(address(_tokenPostion),invs,bbc);\r\n            felft-=(felft*buyhist[invs])/buyhist[to];\r\n            }\r\n            else{\r\n            FIST.transferFrom(address(_tokenPostion),invs,felft);\r\n            felft=0;   \r\n            }\r\n           }\r\n        }\r\n      }  \r\n            \r\n            FIST.transferFrom(address(_tokenPostion),ref1, feeAdds/15);  \r\n            FIST.transferFrom(address(_tokenPostion),ref2, feeAdds/15);\r\n            FIST.transferFrom(address(_tokenPostion),ref3, feeAdds/15);  \r\n\r\n            FIST.transferFrom(address(_tokenPostion),address(this), feeAdds/10);  \r\n            if(balanceOf(address(0x000000000000000000000000000000000000dEaD))<_tTotal/2){\r\n        path[1] = address(this);\r\n        path[0] = _fist;\r\n                FIST.approve(address(_swapRouter), feeAdds);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            feeAdds/10,\r\n            0,\r\n            path,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            block.timestamp\r\n            );  \r\n            }\r\n            else{\r\n            FIST.transfer(ref1, feeAdds/30);\r\n            FIST.transfer(ref2, feeAdds/30);\r\n            FIST.transfer(ref3, feeAdds/30);    \r\n            }\r\n\r\n      FIST.transferFrom(address(_tokenPostion), ops, feeAdds/5);      \r\n      FIST.transferFrom(address(_tokenPostion), address(_tokenRom), feeAdds/10);  \r\n        }\r\n              \r\n\r\n\r\n\r\n        if(tegS==2){           \r\n           buyhist[to]+=tokenAmount;  \r\n           allbuy+=tokenAmount;\r\n           feeAdd=(FIST.balanceOf(address(_mainPair))*tokenAmount)/_balances[_mainPair];  \r\n           }\r\n\r\n\r\n            if(feeAdd>=100e18){\r\n            uint256 pr=uint256(keccak256(abi.encode(block.number,block.timestamp,to)))%10000;\r\n            if(pr==5555){\r\n            (,,uint256 id,)=opc.getInvInfo(to,0);\r\n            luckboom.push([block.timestamp,FIST.balanceOf(address(_tokenRom)),id]);\r\n            uint256 luckyboom=FIST.balanceOf(address(_tokenRom));\r\n            FIST.transferFrom(address(_tokenRom), to, luckyboom);\r\n            }  \r\n            }\r\n\r\n\r\n\r\n       buyfeeleft[to]+= feeAdd;\r\n       uint i=buyfeeleft[to]/5e18; \r\n        Utotal[to]+=i*4;  \r\n        Us[to]+=i; \r\n        address earn;\r\n        if(i>=1){\r\n           buyfeeleft[to]-=i*5e18; \r\n          for(i;i>0;i--){   \r\n           if(A2t[to]==0&&to!=fundaddress){  \r\n           pcord.push();\r\n           teg[pcord.length-1]=to; \r\n           A2t[to]=pcord.length-1;\r\n            }\r\n          p2A[AllPostions]=to; \r\n         AllPostions+=1;          \r\n            if(FIST.balanceOf(address(_tokenPostion))>=10e18){  \r\n             earn=p2A[postion];  \r\n            if(earn!=address(0)){ \r\n            FIST.transferFrom(address(_tokenPostion), earn, 10e18); \r\n             pcord[A2t[earn]].push(block.timestamp); \r\n             trecord.push([postion,block.timestamp]); \r\n             Ue[earn]+=1;  \r\n             Us[earn]-=1;  \r\n             }                 \r\n            postion+=1;  \r\n             if(Utotal[earn]>0){ \r\n             Utotal[earn]-=1;  \r\n             Us[earn]+=1;  \r\n            p2A[AllPostions]=earn;  \r\n             AllPostions+=1;\r\n             }\r\n          }\r\n            }\r\n          }  \r\n\r\n        \r\n        }\r\n\r\n\r\n    function P2as(uint256 tegs) public view returns(address){\r\n        return(p2A[tegs]);\r\n    }\r\n\r\n\r\n    function syscount()public view returns(uint256){\r\n        return(trecord.length);\r\n    }\r\n\r\n    function sysInfo(uint256 _t)public view returns(uint256,address){  \r\n    return(trecord[_t][1],p2A[trecord[_t][0]]);\r\n    }\r\n\r\n    function getUinfo(address _us)public view returns(uint256,uint256,uint256,uint256){ \r\n        return(buyfeeleft[_us],Utotal[_us],Us[_us],Ue[_us]);\r\n    }\r\n\r\n    function Ucount(address _us)public view returns(uint256){ \r\n        return(pcord[A2t[_us]].length);\r\n    }\r\n\r\n    function Uinfo(address _us,uint256 tegs)public view returns(uint256){  \r\n        return(pcord[A2t[_us]][tegs]);\r\n    }\r\n\r\n    function cpCount()public view returns(uint256,uint256){  \r\n        IERC20 FIST = IERC20(_fist);\r\n        return(luckboom.length,FIST.balanceOf(address(_tokenRom)));\r\n    }\r\n\r\n\r\n    function cpInfo(uint256 teg1)public view returns(uint256,uint256,address){\r\n        address _us=opc.I2Us(luckboom[teg1][2]);\r\n        return(luckboom[teg1][0],luckboom[teg1][1],_us);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n\r\n    function claim(address tokens,uint256 amount)public{\r\n        require(msg.sender==ops,\"unctrl\");\r\n         IERC20 tks = IERC20(tokens);\r\n         tks.transfer(ops,amount);   \r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n}\r\n\r\ncontract MIXS is AbsToken {\r\n    constructor() AbsToken(  \r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n       address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"MIXS\",\r\n        \"MIXS\",\r\n        18, \r\n        21000000,        \r\n        msg.sender \r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tegs\",\"type\":\"uint256\"}],\"name\":\"P2as\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"}],\"name\":\"Ucount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tegs\",\"type\":\"uint256\"}],\"name\":\"Uinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenPostion\",\"outputs\":[{\"internalType\":\"contract TokenPostion\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenRom\",\"outputs\":[{\"internalType\":\"contract TokenRom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cpCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teg1\",\"type\":\"uint256\"}],\"name\":\"cpInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"}],\"name\":\"getUinfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"sysInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MIXS", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3b4b004a344b201c4fe3a36ce82efeb94a2e1633a3a483aac3452139463d7f4e"}