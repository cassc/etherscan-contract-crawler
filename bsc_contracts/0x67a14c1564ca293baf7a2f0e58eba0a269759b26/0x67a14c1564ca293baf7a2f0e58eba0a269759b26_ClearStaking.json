{"SourceCode": "// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Clearstaking\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract ClearStaking is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint16;\r\n\r\n    /**\r\n     *\r\n     * @dev User reflects the info of each user\r\n     *\r\n     *\r\n     * @param {total_invested} how many tokens the user staked\r\n     * @param {total_withdrawn} how many tokens withdrawn so far\r\n     * @param {lastPayout} time at which last claim was done\r\n     * @param {depositTime} Time of last deposit\r\n     * @param {totalClaimed} Total claimed by the user\r\n     *\r\n     */\r\n    struct User {\r\n        uint256 total_invested;\r\n        uint256 total_withdrawn;\r\n        uint256 lastPayout;\r\n        uint256 depositTime;\r\n        uint256 totalClaimed;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev PoolInfo reflects the info of each pools\r\n     *\r\n     * To improve precision, we provide APY with an additional zero. So if APY is 12%, we provide\r\n     * 120 as input.lockPeriodInDays would be the number of days which the claim is locked. So if we want to\r\n     * lock claim for 1 month, lockPeriodInDays would be 30.\r\n     *\r\n     * @param {apy} Percentage of yield produced by the pool\r\n     * @param {lockPeriodInDays} Amount of time claim will be locked\r\n     * @param {totalDeposit} Total deposit in the pool\r\n     * @param {startDate} starting time of pool\r\n     * @param {endDate} ending time of pool in unix timestamp\r\n     * @param {minContrib} Minimum amount to be staked\r\n     *\r\n     */\r\n\r\n    struct Pool {\r\n        uint16 apy;\r\n        uint16 lockPeriodInDays;\r\n        uint256 totalDeposit;\r\n        uint256 startDate;\r\n        uint256 endDate;\r\n        uint256 minContrib;\r\n    }\r\n\r\n    IERC20 public token; //Token address\r\n    address public reserveWallet; //reward wallet\r\n\r\n    uint256 public penalityPercent = 20;\r\n    uint256 public maxDepositAmount = 50000000 * 10**18;\r\n    mapping(uint256 => mapping(address => User)) public users;\r\n    \r\n    mapping(address => uint256) maxDeposit;\r\n\r\n    Pool[] public poolInfo;\r\n\r\n    event Stake(address indexed addr, uint256 amount);\r\n    event Claim(address indexed addr, uint256 amount);\r\n\r\n    constructor(address _token, address _reserveWallet) {\r\n        token = IERC20(_token);\r\n        reserveWallet = _reserveWallet;\r\n        \r\n         \r\n    }\r\n\r\n   receive() external payable {\r\n        revert(\"BNB deposit not supported\");\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev get length of the pools\r\n     *\r\n     * @return {uint256} length of the pools\r\n     *\r\n     */ \r\n    function poolLength() public view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    \r\n\r\n   function setReserveWallet(address _reserveWallet) external onlyOwner {\r\n       require (_reserveWallet != address(0), \"reward wallet can't be a zero address\");\r\n   reserveWallet = _reserveWallet;\r\n    }\r\n\r\n    function setPenalityPercent (uint256 newpenality) external onlyOwner {\r\n        require (newpenality <= 25, \"max penality can be 25 percent\");\r\n        penalityPercent = newpenality;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev get info of all pools\r\n     *\r\n     * @return {PoolInfo[]} Pool info struct\r\n     *\r\n     */\r\n    function getPools() internal view returns (Pool[] memory) {\r\n        return poolInfo;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev add new period to the pool, only available for owner\r\n     *\r\n     */\r\n    function add(\r\n        uint16 _apy,\r\n        uint16 _lockPeriodInDays,\r\n        uint256 _endDate,\r\n        uint256 _minContrib\r\n    ) external onlyOwner {\r\n        poolInfo.push(\r\n            Pool({\r\n                apy: _apy,\r\n                lockPeriodInDays: _lockPeriodInDays,\r\n                totalDeposit: 0,\r\n                startDate: block.timestamp,\r\n                endDate: _endDate,\r\n                minContrib: _minContrib\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev update the given pool's Info\r\n     *\r\n     */\r\n    function set(\r\n        uint256 _pid,\r\n        uint16 _apy,\r\n        uint16 _lockPeriodInDays,\r\n        uint256 _endDate,\r\n        uint256 _minContrib\r\n    ) external onlyOwner {\r\n        require(_pid < poolLength(), \"Invalid pool Id\");\r\n\r\n        poolInfo[_pid].apy = _apy;\r\n        poolInfo[_pid].lockPeriodInDays = _lockPeriodInDays;\r\n        poolInfo[_pid].endDate = _endDate;\r\n        poolInfo[_pid].minContrib = _minContrib;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev depsoit tokens to staking for  allocation\r\n     *\r\n     * @param {_pid} Id of the pool\r\n     * @param {_amount} Amount to be staked\r\n     *\r\n     * @return {bool} Status of stake\r\n     *\r\n     */\r\n    function stake(uint8 _pid, uint256 _amount) external returns (bool) {\r\n        Pool memory pool = poolInfo[_pid];\r\n\r\n        require(_amount >= pool.minContrib, \"Invalid amount!\");\r\n        require (maxDeposit[msg.sender] + _amount <= maxDepositAmount);\r\n\r\n        require(\r\n            token.allowance(msg.sender, address(this)) >= _amount,\r\n            \"Staking : Set Token allowance first!\"\r\n        );\r\n\r\n     \r\n        bool success = token.transferFrom(msg.sender, address(this), _amount);\r\n        require(success, \"Staking : Transfer failed\");\r\n\r\n        _stake(_pid, msg.sender, _amount);\r\n         maxDeposit[msg.sender] += _amount;\r\n\r\n        return success;\r\n    }\r\n\r\n    function _stake(\r\n        uint8 _pid,\r\n        address _sender,\r\n        uint256 _amount\r\n    ) internal {\r\n        User storage user = users[_pid][_sender];\r\n        Pool storage pool = poolInfo[_pid];\r\n\r\n        uint256 stopDepo = pool.endDate;\r\n\r\n        require(\r\n            block.timestamp <= stopDepo,\r\n            \"Staking is disabled for this pool\"\r\n        );\r\n\r\n\r\n         _claim(_pid, msg.sender);\r\n\r\n        user.total_invested = user.total_invested.add(_amount);\r\n        pool.totalDeposit = pool.totalDeposit.add(_amount);\r\n\r\n        user.lastPayout = block.timestamp;\r\n        user.depositTime =  block.timestamp;\r\n\r\n        emit Stake(_sender, _amount);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev claim accumulated  reward for a single pool\r\n     *\r\n     * @param {_pid} pool identifier\r\n     *\r\n     * @return {bool} status of claim\r\n     */\r\n\r\n    function claim(uint8 _pid) public returns (bool) {\r\n        _claim(_pid, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev claim accumulated  reward from all pools\r\n     *\r\n     * Beware of gas fee!\r\n     *\r\n     */\r\n    function claimAll() public returns (bool) {\r\n        uint256 length = poolInfo.length;\r\n\r\n        for (uint8 pid = 0; pid < length; ++pid) {\r\n            _claim(pid, msg.sender);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     *\r\n     * @dev withdraw tokens from Staking\r\n     *\r\n     * @param {_pid} id of the pool\r\n     * @param {_amount} amount to be unstaked\r\n     *\r\n     * @return {bool} Status of stake\r\n     *\r\n     */\r\n    function unStake(uint8 _pid, uint256 _amount) external returns (bool) {\r\n        User storage user = users[_pid][msg.sender];\r\n        Pool storage pool = poolInfo[_pid];\r\n\r\n        require(user.total_invested >= _amount, \"You don't have enough funds\");\r\n\r\n       if (block.timestamp.sub(user.depositTime) < pool.lockPeriodInDays.mul(1 days)) {\r\n\r\n        uint256 penality = _amount.mul(penalityPercent).div(100);\r\n\r\n        _claim(_pid, msg.sender);\r\n\r\n        pool.totalDeposit = pool.totalDeposit.sub(_amount);\r\n        user.total_invested = user.total_invested.sub(_amount);\r\n\r\n        token.transfer( msg.sender, _amount - penality);\r\n        maxDeposit[msg.sender] -= _amount;\r\n\r\n       }\r\n\r\n       else \r\n\r\n       {\r\n            _claim(_pid, msg.sender);\r\n\r\n        pool.totalDeposit = pool.totalDeposit.sub(_amount);\r\n        user.total_invested = user.total_invested.sub(_amount);\r\n\r\n        token.transfer( msg.sender, _amount);\r\n        maxDeposit[msg.sender] -= _amount;\r\n       }\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    function _claim(uint8 _pid, address _addr) internal {\r\n        User storage user = users[_pid][_addr];\r\n\r\n        uint256 amount = _payout(_pid, _addr);\r\n\r\n        if (amount > 0) {\r\n            user.total_withdrawn = user.total_withdrawn.add(amount);\r\n\r\n            safeTransferFrom(reserveWallet, _addr, amount);\r\n\r\n            user.lastPayout = block.timestamp;\r\n\r\n            user.totalClaimed = user.totalClaimed.add(amount);\r\n        }\r\n\r\n        emit Claim(_addr, amount);\r\n    }\r\n\r\n    function _payout(uint8 _pid, address _addr)\r\n        public\r\n        view\r\n        returns (uint256 value)\r\n    {\r\n        User storage user = users[_pid][_addr];\r\n        Pool storage pool = poolInfo[_pid];\r\n\r\n        uint256 from = user.lastPayout > user.depositTime\r\n            ? user.lastPayout\r\n            : user.depositTime;\r\n        uint256 to = block.timestamp > pool.endDate\r\n            ? pool.endDate\r\n            : block.timestamp;\r\n\r\n        if (from < to) {\r\n            value = value.add(\r\n                user.total_invested.mul(to.sub(from)).mul(pool.apy).div(\r\n                    365 days * 1000\r\n                )\r\n            );\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @dev safe  transfer function, require to have enough  to transfer\r\n     *\r\n     */\r\n    function safeTransferFrom(address reservWallet, address _to, uint256 _amount) internal {\r\n        uint256 Bal = token.balanceOf(reserveWallet);\r\n        reservWallet = reserveWallet;\r\n        if (_amount > Bal) {\r\n            token.transferFrom(reserveWallet, _to, Bal);\r\n        } else {\r\n            token.transferFrom(reserveWallet, _to, _amount);\r\n        }\r\n    }\r\n\r\nfunction setMaxDepositLimit(uint256 amount) external onlyOwner {\r\n   require (amount > 10000, \"limit should be higher than 10000 tokens\");\r\n   maxDepositAmount = amount * 10**18;\r\n }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"_payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_apy\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContrib\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"apy\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lockPeriodInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContrib\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_apy\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_lockPeriodInDays\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContrib\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newpenality\",\"type\":\"uint256\"}],\"name\":\"setPenalityPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"name\":\"setReserveWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ClearStaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000009faf80c7df27d0fb8a717324963cb871f6814f7000000000000000000000000a7fa271999e4c0453ec0990226089aabe8e7e3b4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3114ba00eaa2af419c10e49352326c831897230e21049137b8503acd69d31e55"}