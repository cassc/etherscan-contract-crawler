{"SourceCode": "// SPDX-License-Identifier: GPL-2.0\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IBITCOINF {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IWBITCOINF is IBITCOINF {\r\n    function mint(address recipient, uint256 amount) external;\r\n    function burn(uint256 amount) external;\r\n    function burnFrom(address sender, uint256 amount) external; \r\n}\r\n\r\ncontract BITCOINFBridge {\r\n    IWBITCOINF private immutable _wToken;\r\n    address private _bridgeOperator;\r\n    address private _owner;\r\n    uint256 private _bridgeInitState;\r\n    uint256 private _executionFee;    \r\n    uint256 private _minReserve;\r\n    uint256 private _reservePercent;\r\n    uint256 private _maxMint;\r\n    \r\n    event BridgeStopped(uint256 timestamp);\r\n    event BridgeStarted(uint256 timestamp);\r\n    event OperatorChanged(address oldOperator, address newOperator);\r\n    event OwnershipTransferred(address owner, address newOwner);\r\n    event TokenBridged(address indexed requester, uint256 amount, bytes32 lockedHash);\r\n    event TokenReturned(address indexed requester, uint256 returnAmount, uint256 reserveAmount, uint256 feeAmount);\r\n    event GasFeeWithdrawn(address beneficiary, uint256 amount);\r\n\r\n    modifier onlyBridgeOperator {\r\n      require(msg.sender == _bridgeOperator, \"BITCOINFBridge: only for bridge operator\");\r\n      _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n      require(msg.sender == _owner, \"BITCOINFBridge: only for bridge owner\");\r\n      _;\r\n    }\r\n\r\n    modifier bridgeInitialized {\r\n      require(_bridgeInitState == 1, \"BITCOINFBridge: bridge is not ready\");\r\n      _;\r\n    }\r\n\r\n    constructor (address _sideToken) {\r\n        _wToken = IWBITCOINF (_sideToken);\r\n        _bridgeInitState = 1;\r\n        _owner = msg.sender;\r\n        _bridgeOperator = msg.sender;\r\n        _executionFee = 4000000000000000;// in wei, = 0.004 BNB, ~1usd        \r\n    }\r\n\r\n    function getOwner() external view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"BITCOINFBridge: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function stopBridge() external onlyOwner {\r\n        _bridgeInitState = 0;\r\n        emit BridgeStopped(block.timestamp);\r\n    }\r\n\r\n    function _emergencyStopBridge() internal {\r\n        _bridgeInitState = 0;\r\n        emit BridgeStopped(block.timestamp);\r\n    } \r\n\r\n    function startBridge() external onlyOwner {\r\n        _bridgeInitState = 1;\r\n        emit BridgeStarted(block.timestamp);\r\n    }\r\n\r\n    function setOperator(address _newOperator) external onlyOwner {\r\n        emit OperatorChanged(_bridgeOperator, _newOperator);\r\n        _bridgeOperator = _newOperator;\r\n    }\r\n\r\n    function getOperator() external view returns (address) {\r\n        return _bridgeOperator;\r\n    }\r\n\r\n    function setExecutionFee(uint256 fee) external onlyOwner {\r\n        require(fee >= 0, \"BITCOINFBridge: fee >= 0\");\r\n        _executionFee = fee;\r\n    }\r\n\r\n    function setMaxMint(uint256 max) onlyOwner external {\r\n        _maxMint = max;\r\n    }\r\n\r\n    function getMaxMint() external view returns (uint256) {\r\n        return _maxMint;\r\n    }\r\n    \r\n    function setMinReserve(uint256 minAmount) external onlyOwner {\r\n        require(_minReserve >= 0, \"BITCOINFBridge: minAmount >= 0\");\r\n        _minReserve = minAmount;\r\n    }\r\n\r\n    function setReservePercent(uint256 percent) external onlyOwner {\r\n        require(percent >= 0 && percent <= 5000, \"BITCOINFBridge: percent in 0% - 50%\");\r\n        _reservePercent = percent;\r\n    }\r\n\r\n    function getFeeSchema() external view returns (uint256 minReserve, uint256 reservePercent, uint256 executionFee) {\r\n        return (_minReserve, _reservePercent, _executionFee);\r\n    }\r\n\r\n    function calculateReserve(uint256 amount) external view returns(uint256) {\r\n        return _calculateReserve(amount);\r\n    }\r\n\r\n    function _calculateReserve(uint256 amount) internal view returns(uint256) {\r\n        uint256 res = (amount * _reservePercent) / 10000;\r\n        return res > _minReserve ? res : _minReserve;\r\n    }\r\n\r\n    /*\r\n    *   contract deducts reserve fee and mint only remaining amount\r\n    */\r\n    function bridgeToken(address _requester, uint256 _amount, bytes32 _lockedHash) bridgeInitialized onlyBridgeOperator external {\r\n        if(_maxMint > 0 && _amount > _maxMint) {\r\n            _emergencyStopBridge();\r\n            _amount = 0;\r\n        }\r\n        require(_amount > 0, \"BITCOINFBridge: zero amount minting\");\r\n        _wToken.mint(_requester,_amount);\r\n        emit TokenBridged(_requester, _amount, _lockedHash);\r\n    }\r\n    \r\n    /*\r\n    *   user burns (need approval) full amount, reserve fee will be deducted when returning on main chain\r\n    */\r\n    function returnToken(uint256 _returnAmount) bridgeInitialized payable external {\r\n        uint256 res = _calculateReserve(_returnAmount);\r\n        require(_returnAmount > res, \"BITCOINFBridge: Return amount too low\");\r\n        if(_executionFee > 0) {\r\n            require(msg.value == _executionFee, \"BITCOINFBridge: Execution fee is not correct\");\r\n        }\r\n        require(_wToken.balanceOf(msg.sender) >= _returnAmount, \"BITCOINFBridge: Not enough balance to cover reserve fee\");\r\n        _wToken.burnFrom(msg.sender, _returnAmount);\r\n        emit TokenReturned(msg.sender, _returnAmount, res, msg.value);\r\n    }\r\n\r\n    /*\r\n    *   withdraw amount (in wei) native token from smart contract\r\n    */\r\n    function withdrawGasFee(address payable beneficiary, uint256 amount) onlyOwner external {\r\n        require(amount <= address(this).balance, \"BITCOINFBridge: not enough balance to withdraw\");\r\n        beneficiary.transfer(amount);\r\n        emit GasFeeWithdrawn(beneficiary, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BridgeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BridgeStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"lockedHash\",\"type\":\"bytes32\"}],\"name\":\"TokenBridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"TokenReturned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_lockedHash\",\"type\":\"bytes32\"}],\"name\":\"bridgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeSchema\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_returnAmount\",\"type\":\"uint256\"}],\"name\":\"returnToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setReservePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGasFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BITCOINFBridge", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ac92398021177db6cc3f2300afc62f9b5303253", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2156d020e0c443740e44949decc9aa7e615270df962c589b88a265610a0215e2"}