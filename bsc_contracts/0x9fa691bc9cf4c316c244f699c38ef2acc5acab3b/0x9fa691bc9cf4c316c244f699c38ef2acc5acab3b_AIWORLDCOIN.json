{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// WWW.AIWORLDCOIN.NET\r\npragma solidity ^0.8.4;\r\n\r\n//AIWORLD777 TWITTER\r\n// hittp://t.me/AIWORLDCOIN777 TELEGRAM\r\nabstract contract Context {\r\n\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n\r\n        return payable(msg.sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n\r\n        this; \r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b != 0, errorMessage);\r\n\r\n        return a % b;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    address private asdasd;\r\n\r\n    uint256 private _lockTime;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    constructor () {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }   \r\n\r\n    \r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n    \r\n\r\n   \r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    \r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\r\n    event Swap(\r\n\r\n        address indexed sender,\r\n\r\n        uint amount0In,\r\n\r\n        uint amount1In,\r\n\r\n        uint amount0Out,\r\n\r\n        uint amount1Out,\r\n\r\n        address indexed to\r\n\r\n    );\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n\r\n\r\n    function initialize(address, address) external;\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n\r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n\r\n        uint amountOut,\r\n\r\n        uint amountInMax,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\r\n        external\r\n\r\n        payable\r\n\r\n        returns (uint[] memory amounts);\r\n\r\n\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\r\n        address token,\r\n\r\n        uint liquidity,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline,\r\n\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n}\r\n\r\n\r\n\r\ncontract AIWORLDCOIN is Context, IERC20, Ownable {\r\n\r\n    \r\n\r\n    using SafeMath for uint256;\r\n\r\n   \r\n\r\n    string private _name = \"AIWORLD COIN\";\r\n\r\n    string private _symbol = \"$AIWC\";\r\n\r\n    uint8 private _decimals = 18;\r\n\r\n\r\n\r\n    address payable private marketingWalletAddress = payable(0x345f94cDc1b6EF11216f71f1798F0d527c98DE36);\r\n\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    \r\n\r\n    mapping (address => uint256) _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    \r\n\r\n    mapping (address => bool) private isExcludedFromFee;\r\n\r\n    mapping (address => bool) private isWalletLimitExempt;\r\n\r\n    mapping (address => bool) private isTxLimitExempt;\r\n\r\n    mapping (address => bool) private isMarketPair;\r\n\r\n\r\n\r\n// total buy tax = 5%\r\n\r\n    uint256 private _buyLiquidityFee = 3;\r\n\r\n    uint256 private _buyMarketingFee = 2;\r\n\r\n\r\n\r\n// total sell tax = 5%\r\n\r\n    uint256 private _sellLiquidityFee = 3;\r\n\r\n    uint256 private _sellMarketingFee = 2;\r\n\r\n\r\n\r\n    uint256 private _liquidityShare = 5;\r\n\r\n    uint256 private _marketingShare = 5;\r\n\r\n\r\n\r\n    uint256 public buytax = _buyLiquidityFee + _buyMarketingFee;\r\n\r\n    uint256 public selltax = _sellLiquidityFee + _sellMarketingFee;\r\n\r\n    uint256 private _totalDistributionShares = _liquidityShare + _marketingShare;\r\n\r\n\r\n\r\n    uint256 private _totalSupply =  10000000000 * 10**_decimals;\r\n\r\n    uint256 public _maxTxAmount =   10000000000 * 10**_decimals;     \r\n\r\n    uint256 public _walletMax =     10000000000 * 10**_decimals;      \r\n\r\n    uint256 private minimumTokensBeforeSwap = 100 * 10**_decimals; \r\n\r\n\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    address public uniswapPair;\r\n\r\n    \r\n\r\n    bool inSwapAndLiquify;\r\n\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    bool public swapAndLiquifyByLimitOnly = false;\r\n\r\n    bool public checkWalletLimit = true;\r\n\r\n\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n    event SwapAndLiquify(\r\n\r\n        uint256 tokensSwapped,\r\n\r\n        uint256 ethReceived,\r\n\r\n        uint256 tokensIntoLiqudity\r\n\r\n    );\r\n\r\n    \r\n\r\n    event SwapETHForTokens(\r\n\r\n        uint256 amountIn,\r\n\r\n        address[] path\r\n\r\n    );\r\n\r\n    \r\n\r\n    event SwapTokensForETH(\r\n\r\n        uint256 amountIn,\r\n\r\n        address[] path\r\n\r\n    );\r\n\r\n    \r\n\r\n    modifier lockTheSwap {\r\n\r\n        inSwapAndLiquify = true;\r\n\r\n        _;\r\n\r\n        inSwapAndLiquify = false;\r\n\r\n    }\r\n\r\n    \r\n\r\n    constructor () {\r\n\r\n        \r\n\r\n     IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n\r\n\r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n\r\n\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n\r\n        isExcludedFromFee[address(this)] = true;\r\n\r\n        isExcludedFromFee[marketingWalletAddress] = true;\r\n\r\n        \r\n\r\n        buytax = _buyLiquidityFee.add(_buyMarketingFee);\r\n\r\n        selltax = _sellLiquidityFee.add(_sellMarketingFee);\r\n\r\n        _totalDistributionShares = _liquidityShare.add(_marketingShare);\r\n\r\n\r\n\r\n        isWalletLimitExempt[owner()] = true;\r\n\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n\r\n        isWalletLimitExempt[address(this)] = true;\r\n\r\n        isWalletLimitExempt[marketingWalletAddress] = true;\r\n\r\n        \r\n\r\n        isTxLimitExempt[owner()] = true;\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        isTxLimitExempt[marketingWalletAddress] = true;\r\n\r\n\r\n\r\n        isMarketPair[address(uniswapPair)] = true;\r\n\r\n\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\n\r\n        return minimumTokensBeforeSwap;\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMarketPairStatus(address account, bool newValue) public onlyOwner {\r\n\r\n        isMarketPair[account] = newValue;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n\r\n        isTxLimitExempt[holder] = exempt;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setIsExcludedFromFee(address account, bool newValue) public onlyOwner {\r\n\r\n        isExcludedFromFee[account] = newValue;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setBuyTaxes(uint256 newLiquidityTax, uint256 newMarketingTax) external onlyOwner() {\r\n\r\n        _buyLiquidityFee = newLiquidityTax;\r\n\r\n        _buyMarketingFee = newMarketingTax;\r\n\r\n\r\n\r\n        buytax = _buyLiquidityFee.add(_buyMarketingFee);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSelTaxes(uint256 newLiquidityTax, uint256 newMarketingTax) external onlyOwner() {\r\n\r\n        _sellLiquidityFee = newLiquidityTax;\r\n\r\n        _sellMarketingFee = newMarketingTax;\r\n\r\n\r\n\r\n        selltax = _sellLiquidityFee.add(_sellMarketingFee);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setDistributionSettings(uint256 newLiquidityShare, uint256 newMarketingShare) internal onlyOwner() {\r\n\r\n        _liquidityShare = newLiquidityShare;\r\n\r\n        _marketingShare = newMarketingShare;\r\n\r\n\r\n\r\n        _totalDistributionShares = _liquidityShare.add(_marketingShare);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n\r\n        _maxTxAmount = maxTxAmount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function enableDisableWalletLimit(bool newValue) external onlyOwner {\r\n\r\n       checkWalletLimit = newValue;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setIsWalletLimitExempt(address holder, bool exempt) external onlyOwner {\r\n\r\n        isWalletLimitExempt[holder] = exempt;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setWalletLimit(uint256 newLimit) external onlyOwner {\r\n\r\n        _walletMax  = newLimit;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner() {\r\n\r\n        minimumTokensBeforeSwap = newLimit;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setMarketingWalletAddress(address newAddress) external onlyOwner() {\r\n\r\n        marketingWalletAddress = payable(newAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n\r\n        swapAndLiquifyEnabled = _enabled;\r\n\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setSwapAndLiquifyByLimitOnly(bool newValue) public onlyOwner {\r\n\r\n        swapAndLiquifyByLimitOnly = newValue;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n\r\n        return _totalSupply.sub(balanceOf(deadAddress));\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n\r\n        recipient.transfer(amount);\r\n\r\n    }\r\n\r\n\r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n\r\n    receive() external payable {}\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n\r\n\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\r\n\r\n        if(inSwapAndLiquify)\r\n\r\n        { \r\n\r\n            return _basicTransfer(sender, recipient, amount); \r\n\r\n        }\r\n\r\n        else\r\n\r\n        {\r\n\r\n            if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient]) {\r\n\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n            }            \r\n\r\n\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n\r\n            \r\n\r\n            if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender] && swapAndLiquifyEnabled) \r\n\r\n            {\r\n\r\n                if(swapAndLiquifyByLimitOnly)\r\n\r\n                    contractTokenBalance = minimumTokensBeforeSwap;\r\n\r\n                swapAndLiquify(contractTokenBalance);    \r\n\r\n            }\r\n\r\n\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n\r\n\r\n            uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) ? \r\n\r\n                                         amount : takeFee(sender, recipient, amount);\r\n\r\n\r\n\r\n            if(checkWalletLimit && !isWalletLimitExempt[recipient])\r\n\r\n                require(balanceOf(recipient).add(finalAmount) <= _walletMax);\r\n\r\n\r\n\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n\r\n        \r\n\r\n        uint256 tokensForLP = tAmount.mul(_liquidityShare).div(_totalDistributionShares).div(2);\r\n\r\n        uint256 tokensForSwap = tAmount.sub(tokensForLP);\r\n\r\n\r\n\r\n        swapTokensForEth(tokensForSwap);\r\n\r\n        uint256 amountReceived = address(this).balance;\r\n\r\n\r\n\r\n        uint256 totalBNBFee = _totalDistributionShares.sub(_liquidityShare.div(2));\r\n\r\n        \r\n\r\n        uint256 amountBNBLiquidity = amountReceived.mul(_liquidityShare).div(totalBNBFee).div(2);\r\n\r\n        uint256 amountBNBMarketing = amountReceived.sub(amountBNBLiquidity);\r\n\r\n\r\n\r\n        if(amountBNBMarketing > 0)\r\n\r\n            transferToAddressETH(marketingWalletAddress, amountBNBMarketing);\r\n\r\n\r\n\r\n        if(amountBNBLiquidity > 0 && tokensForLP > 0)\r\n\r\n            addLiquidity(tokensForLP, amountBNBLiquidity);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        // make the swap\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            tokenAmount,\r\n\r\n            0, // accept any amount of ETH\r\n\r\n            path,\r\n\r\n            address(this), // The contract\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n        \r\n\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n\r\n    }\r\n\r\n\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        // approve token transfer to cover all possible scenarios\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n\r\n        // add the liquidity\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\r\n            address(this),\r\n\r\n            tokenAmount,\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            owner(),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        \r\n\r\n        uint256 feeAmount = 0;\r\n\r\n        \r\n\r\n        if(isMarketPair[sender]) {\r\n\r\n            feeAmount = amount.mul(buytax).div(100);\r\n\r\n        }\r\n\r\n        else if(isMarketPair[recipient]) {\r\n\r\n            feeAmount = amount.mul(selltax).div(100);\r\n\r\n        }\r\n\r\n        \r\n\r\n        if(feeAmount > 0) {\r\n\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n\r\n            emit Transfer(sender, address(this), feeAmount);\r\n\r\n        }\r\n\r\n\r\n\r\n        return amount.sub(feeAmount);\r\n\r\n    }\r\n\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buytax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"enableDisableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selltax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"}],\"name\":\"setBuyTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingTax\",\"type\":\"uint256\"}],\"name\":\"setSelTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyByLimitOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AIWORLDCOIN", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6b7439d56c36dadb3171dcab9f0cdbdeda596412a10fbaf6b757b552e635dec3"}