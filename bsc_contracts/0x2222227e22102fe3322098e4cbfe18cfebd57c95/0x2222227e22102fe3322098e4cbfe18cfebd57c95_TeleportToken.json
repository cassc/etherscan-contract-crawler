{"SourceCode": "pragma solidity ^0.6.12;\r\n/*\r\n * SPDX-License-Identifier: MIT\r\n */\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract Verify {\r\n\r\n  function recoverSigner(bytes32 message, bytes memory sig)\r\n       public\r\n       pure\r\n       returns (address)\r\n    {\r\n       uint8 v;\r\n       bytes32 r;\r\n       bytes32 s;\r\n\r\n       (v, r, s) = splitSignature(sig);\r\n\r\n       if (v != 27 && v != 28) {\r\n           return (address(0));\r\n       } else {\r\n           // solium-disable-next-line arg-overflow\r\n           return ecrecover(message, v, r, s);\r\n       }\r\n  }\r\n\r\n  function splitSignature(bytes memory sig)\r\n       public\r\n       pure\r\n       returns (uint8, bytes32, bytes32)\r\n   {\r\n       require(sig.length == 65);\r\n\r\n       bytes32 r;\r\n       bytes32 s;\r\n       uint8 v;\r\n\r\n       assembly {\r\n           // first 32 bytes, after the length prefix\r\n           r := mload(add(sig, 32))\r\n           // second 32 bytes\r\n           s := mload(add(sig, 64))\r\n           // final byte (first byte of the next 32 bytes)\r\n           v := byte(0, mload(add(sig, 96)))\r\n       }\r\n\r\n       if (v < 27)\r\n           v += 27;\r\n\r\n       return (v, r, s);\r\n   }\r\n}\r\n\r\n\r\nlibrary Endian {\r\n    /* https://ethereum.stackexchange.com/questions/83626/how-to-reverse-byte-order-in-uint256-or-bytes32 */\r\n    function reverse64(uint64 input) internal pure returns (uint64 v) {\r\n        v = input;\r\n\r\n        // swap bytes\r\n        v = ((v & 0xFF00FF00FF00FF00) >> 8) |\r\n            ((v & 0x00FF00FF00FF00FF) << 8);\r\n\r\n        // swap 2-byte long pairs\r\n        v = ((v & 0xFFFF0000FFFF0000) >> 16) |\r\n            ((v & 0x0000FFFF0000FFFF) << 16);\r\n\r\n        // swap 4-byte long pairs\r\n        v = (v >> 32) | (v << 32);\r\n    }\r\n    function reverse32(uint32 input) internal pure returns (uint32 v) {\r\n        v = input;\r\n\r\n        // swap bytes\r\n        v = ((v & 0xFF00FF00) >> 8) |\r\n            ((v & 0x00FF00FF) << 8);\r\n\r\n        // swap 2-byte long pairs\r\n        v = (v >> 16) | (v << 16);\r\n    }\r\n    function reverse16(uint16 input) internal pure returns (uint16 v) {\r\n        v = input;\r\n\r\n        // swap bytes\r\n        v = (v >> 8) | (v << 8);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\nabstract contract ERC20Interface {\r\n    function totalSupply() virtual public view returns (uint);\r\n    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) virtual public returns (bool success);\r\n    function approve(address spender, uint tokens) virtual public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\nabstract contract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) virtual public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract Oracled is Owned {\r\n    mapping(address => bool) public oracles;\r\n\r\n    modifier onlyOracle {\r\n        require(oracles[msg.sender] == true, \"Account is not a registered oracle\");\r\n\r\n        _;\r\n    }\r\n\r\n    function regOracle(address _newOracle) public onlyOwner {\r\n        require(!oracles[_newOracle], \"Oracle is already registered\");\r\n\r\n        oracles[_newOracle] = true;\r\n    }\r\n\r\n    function unregOracle(address _remOracle) public onlyOwner {\r\n        require(oracles[_remOracle] == true, \"Oracle is not registered\");\r\n\r\n        delete oracles[_remOracle];\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply, added teleport method\r\n// ----------------------------------------------------------------------------\r\ncontract TeleportToken is ERC20Interface, Owned, Oracled, Verify {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint8 public threshold;\r\n    uint8 public thisChainId;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    mapping(uint64 => mapping(address => bool)) signed;\r\n    mapping(uint64 => bool) public claimed;\r\n\r\n    event Teleport(address indexed from, string to, uint tokens, uint chainId);\r\n    event Claimed(uint64 id, address to, uint tokens);\r\n\r\n    struct TeleportData {\r\n        uint64 id;\r\n        uint32 ts;\r\n        uint64 fromAddr;\r\n        uint64 quantity;\r\n        uint64 symbolRaw;\r\n        uint8 chainId;\r\n        address toAddress;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"TLM\";\r\n        name = \"Alien Worlds Trilium\";\r\n        decimals = 4;\r\n        _totalSupply = 10000000000 * 10**uint(decimals);\r\n        balances[address(0)] = _totalSupply;\r\n        threshold = 3;\r\n        thisChainId = 1;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() override public view returns (uint) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) override public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) override public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) override public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) override public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) override public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Moves tokens to the inaccessible account and then sends event for the oracles\r\n    // to monitor and issue on other chain\r\n    // to : EOS address\r\n    // tokens : number of tokens in satoshis\r\n    // chainId : The chain id that they will be sent to\r\n    // ------------------------------------------------------------------------\r\n\r\n    function teleport(string memory to, uint tokens, uint chainid) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[address(0)] = balances[address(0)].add(tokens);\r\n        \r\n        emit Transfer(msg.sender, address(0), tokens);\r\n        emit Teleport(msg.sender, to, tokens, chainid);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Claim tokens sent using signatures supplied to the other chain\r\n    // ------------------------------------------------------------------------\r\n\r\n\r\n    function verifySigData(bytes memory sigData) private returns (TeleportData memory) {\r\n        TeleportData memory td;\r\n\r\n        uint64 id;\r\n        uint32 ts;\r\n        uint64 fromAddr;\r\n        uint64 quantity;\r\n        uint64 symbolRaw;\r\n        uint8 chainId;\r\n        address toAddress;\r\n\r\n        assembly {\r\n            id := mload(add(add(sigData, 0x8), 0))\r\n            ts := mload(add(add(sigData, 0x4), 8))\r\n            fromAddr := mload(add(add(sigData, 0x8), 12))\r\n            quantity := mload(add(add(sigData, 0x8), 20))\r\n            symbolRaw := mload(add(add(sigData, 0x8), 28))\r\n            chainId := mload(add(add(sigData, 0x1), 36))\r\n            toAddress := mload(add(add(sigData, 0x14), 37))\r\n        }\r\n\r\n        td.id = Endian.reverse64(id);\r\n        td.ts = Endian.reverse32(ts);\r\n        td.fromAddr = Endian.reverse64(fromAddr);\r\n        td.quantity = Endian.reverse64(quantity);\r\n        td.symbolRaw = Endian.reverse64(symbolRaw);\r\n        td.chainId = chainId;\r\n        td.toAddress = toAddress;\r\n\r\n        require(thisChainId == td.chainId, \"Invalid Chain ID\");\r\n        require(block.timestamp < SafeMath.add(td.ts, (60 * 60 * 24 * 30)), \"Teleport has expired\");\r\n\r\n        require(!claimed[td.id], \"Already Claimed\");\r\n\r\n        claimed[td.id] = true;\r\n\r\n        return td;\r\n    }\r\n\r\n    function claim(bytes memory sigData, bytes[] calldata signatures) public returns (address toAddress) {\r\n        TeleportData memory td = verifySigData(sigData);\r\n\r\n        // verify signatures\r\n        require(sigData.length == 69, \"Signature data is the wrong size\");\r\n        require(signatures.length <= 10, \"Maximum of 10 signatures can be provided\");\r\n\r\n        bytes32 message = keccak256(sigData);\r\n\r\n        uint8 numberSigs = 0;\r\n\r\n        for (uint8 i = 0; i < signatures.length; i++){\r\n            address potential = Verify.recoverSigner(message, signatures[i]);\r\n\r\n            // Check that they are an oracle and they haven't signed twice\r\n            if (oracles[potential] && !signed[td.id][potential]){\r\n                signed[td.id][potential] = true;\r\n                numberSigs++;\r\n\r\n                if (numberSigs >= 10){\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        require(numberSigs >= threshold, \"Not enough valid signatures provided\");\r\n\r\n        balances[address(0)] = balances[address(0)].sub(td.quantity);\r\n        balances[td.toAddress] = balances[td.toAddress].add(td.quantity);\r\n\r\n        emit Claimed(td.id, td.toAddress, td.quantity);\r\n        emit Transfer(address(0), td.toAddress, td.quantity);\r\n\r\n        return td.toAddress;\r\n    }\r\n\r\n    function updateThreshold(uint8 newThreshold) public onlyOwner returns (bool success) {\r\n        if (newThreshold > 0){\r\n            require(newThreshold <= 10, \"Threshold has maximum of 10\");\r\n\r\n            threshold = newThreshold;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function updateChainId(uint8 newChainId) public onlyOwner returns (bool success) {\r\n        if (newChainId > 0){\r\n            require(newChainId <= 100, \"ChainID is too big\");\r\n            thisChainId = newChainId;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    receive () external payable {\r\n        revert();\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"Teleport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sigData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"recoverSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"regOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"splitSignature\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainid\",\"type\":\"uint256\"}],\"name\":\"teleport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisChainId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_remOracle\",\"type\":\"address\"}],\"name\":\"unregOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newChainId\",\"type\":\"uint8\"}],\"name\":\"updateChainId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newThreshold\",\"type\":\"uint8\"}],\"name\":\"updateThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TeleportToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3e46ba0416a8265760f2b860114036753f79c71d978889dec54d3b7193b27354"}