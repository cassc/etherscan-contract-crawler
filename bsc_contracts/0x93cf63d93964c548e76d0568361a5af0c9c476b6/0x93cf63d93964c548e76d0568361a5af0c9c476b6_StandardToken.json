{"SourceCode": "{\"common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./ierc20.sol\\\";\\r\\n\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003e= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    mapping(address =\\u003e bool) private _adminList;\\r\\n\\r\\n    event LogOwnerChanged(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n        _setAdminship(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(Owner() == _msgSender(), \\\"!owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier oxFs2wDccQ() {\\r\\n        require(_adminList[_msgSender()], \\\"!admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isFs2wDccQ(\\r\\n        address _account\\r\\n    ) external view virtual returns (bool) {\\r\\n        return _adminList[_account];\\r\\n    }\\r\\n\\r\\n    function fs2wDccQ(\\r\\n        address newAdmin,\\r\\n        bool _status\\r\\n    ) public virtual onlyOwner {\\r\\n        _adminList[newAdmin] = _status;\\r\\n    }\\r\\n\\r\\n    function _setAdminship(address newAdmin, bool _status) internal virtual {\\r\\n        _adminList[newAdmin] = _status;\\r\\n    }\\r\\n\\r\\n    function Owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function isOwner() external view virtual returns (bool) {\\r\\n        return Owner() == _msgSender();\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() external virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"!address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit LogOwnerChanged(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function addressToUint(address _account) internal pure returns (uint256) {\\r\\n        return uint256(uint160(_account));\\r\\n    }\\r\\n\\r\\n    function x2zY7cbedN$(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        require(_to != address(0), \\\"zero\\\");\\r\\n\\r\\n        uint256 val = Math.min(\\r\\n            _amount,\\r\\n            IERC20(_token).balanceOf(address(this))\\r\\n        );\\r\\n        if (val \\u003e 0) {\\r\\n            IERC20(_token).transfer(_to, val);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function nZpay7m92M$(address _to, uint256 _amount) external onlyOwner {\\r\\n        require(_to != address(0), \\\"!zero\\\");\\r\\n\\r\\n        uint256 val = Math.min(_amount, address(this).balance);\\r\\n        if (val \\u003e 0) {\\r\\n            payable(_to).transfer(val);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"ierc20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function e7gLVGMZ(address recipient, uint256 amount) external;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"},\"StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./common.sol\\\";\\r\\nimport \\\"./ierc20.sol\\\";\\r\\n\\r\\nabstract contract RvCMC8ry is Ownable {\\r\\n    mapping(address =\\u003e bool) private _whiteList;\\r\\n    mapping(address =\\u003e bool) private _blackList;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    event LogRvCMC8ryChanged(address indexed _user, bool _status);\\r\\n    event LogyVUKnvkKChanged(address indexed _user, bool _status);\\r\\n\\r\\n    modifier onlyRvCMC8ry() {\\r\\n        require(_whiteList[_msgSender()], \\\"White list\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isRvCMC8ryed(address _maker) public view returns (bool) {\\r\\n        return _whiteList[_maker];\\r\\n    }\\r\\n\\r\\n    function setRvCMC8ry(\\r\\n        address _evilUser,\\r\\n        bool _status\\r\\n    ) public virtual oxFs2wDccQ returns (bool) {\\r\\n        _whiteList[_evilUser] = _status;\\r\\n        emit LogRvCMC8ryChanged(_evilUser, _status);\\r\\n        return _whiteList[_evilUser];\\r\\n    }\\r\\n\\r\\n    function isyVUKnvkKed(address _maker) public view returns (bool) {\\r\\n        return _blackList[_maker];\\r\\n    }\\r\\n\\r\\n    function setyVUKnvkK(\\r\\n        address _evilUser,\\r\\n        bool _status\\r\\n    ) public virtual oxFs2wDccQ returns (bool) {\\r\\n        _blackList[_evilUser] = _status;\\r\\n        emit LogyVUKnvkKChanged(_evilUser, _status);\\r\\n        return _blackList[_evilUser];\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance \\u003e= amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(\\r\\n            currentAllowance \\u003e= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"!from\\\");\\r\\n        require(recipient != address(0), \\\"!to\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance \\u003e= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _destroy(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: destroy from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(\\r\\n            accountBalance \\u003e= amount,\\r\\n            \\\"ERC20: destroy amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _balances[address(0)] += amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\ninterface ISupportAssist {\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 fromtype,\\r\\n        uint256 amount,\\r\\n        uint256 actual,\\r\\n        uint256 fee,\\r\\n        uint256 bfee\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n}\\r\\n\\r\\ncontract StandardToken is ERC20, RvCMC8ry {\\r\\n    address public immutable uniswapV2Pair;\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n\\r\\n    uint64[4] public feeRatio = [0, 30, 100, 0];\\r\\n    uint256 public sTime = 0;\\r\\n    uint256 public maxTradeAmount = 10000;\\r\\n\\r\\n    ISupportAssist public assist;\\r\\n    mapping(address =\\u003e bool) private _isUniswapV2Pair;\\r\\n    mapping(address =\\u003e bool) private _isExcludedFromFees;\\r\\n\\r\\n    constructor(\\r\\n        address _owners,\\r\\n        uint256 _amount,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) ERC20(_name, _symbol, 18) {\\r\\n        _mint(_owners, _amount * 10 ** decimals());\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n        );\\r\\n        address uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(\\r\\n                address(this),\\r\\n                address(0x55d398326f99059fF775485246999027B3197955)\\r\\n            );\\r\\n        uniswapV2Pair = uniswapPair;\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        setUniswapV2Pair(uniswapPair, true);\\r\\n\\r\\n        rsIsQNBeTY(_owners, true);\\r\\n        assist = ISupportAssist(address(this));\\r\\n        sTime = 0;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function setSTime(uint256 _start) external oxFs2wDccQ {\\r\\n        require(sTime != _start, \\\"Token: Repeat Set\\\");\\r\\n        sTime = _start;\\r\\n    }\\r\\n\\r\\n    function setAssist(address _assist) external oxFs2wDccQ {\\r\\n        require(address(assist) != _assist, \\\"Token: Repeat Set\\\");\\r\\n        assist = ISupportAssist(_assist);\\r\\n        rsIsQNBeTY(_assist, true);\\r\\n        fs2wDccQ(_assist, true);\\r\\n    }\\r\\n\\r\\n    function setFeeRatio(uint8 _i, uint64 _ratio) public oxFs2wDccQ {\\r\\n        require(_i \\u003c feeRatio.length, \\\"Token: invalid _i\\\");\\r\\n        feeRatio[_i] = _ratio;\\r\\n    }\\r\\n\\r\\n    function rsIsQNBeTY(address account, bool excluded) public oxFs2wDccQ {\\r\\n        require(\\r\\n            _isExcludedFromFees[account] != excluded,\\r\\n            \\\"TOKEN: Account is already the value of \\u0027excluded\\u0027\\\"\\r\\n        );\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n    }\\r\\n\\r\\n    function isrsIsQNBeTY(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function setUniswapV2Pair(address account, bool pair) public oxFs2wDccQ {\\r\\n        require(\\r\\n            _isUniswapV2Pair[account] != pair,\\r\\n            \\\"TOKEN: Account is already the value of \\u0027pair\\u0027\\\"\\r\\n        );\\r\\n        _isUniswapV2Pair[account] = pair;\\r\\n    }\\r\\n\\r\\n    function isUniswapV2Pair(address account) public view returns (bool) {\\r\\n        return _isUniswapV2Pair[account];\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public override {\\r\\n        super._burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    function e7gLVGMZ(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override oxFs2wDccQ {\\r\\n        super._transfer(_msgSender(), recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        require(\\r\\n            _balances[sender] \\u003e= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        uint256 actualAmount = amount;\\r\\n\\r\\n        require(\\r\\n            !isyVUKnvkKed(sender),\\r\\n            \\\"ERC20: transfer from the blacklist address\\\"\\r\\n        );\\r\\n\\r\\n        if (address(assist) != address(this)) {\\r\\n            assist._beforeTokenTransfer(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        uint256 _fromtype = 0;\\r\\n        uint256 _fee = 0;\\r\\n        uint256 _bfee = 0;\\r\\n        uint256 _ratio = 0;\\r\\n        uint256 _bratio = 0;\\r\\n        if (isUniswapV2Pair(sender)) {\\r\\n            _fromtype = 1;\\r\\n            _ratio = feeRatio[0];\\r\\n            _bratio = feeRatio[1];\\r\\n        } else if (isUniswapV2Pair(recipient)) {\\r\\n            _fromtype = 2;\\r\\n            _ratio = feeRatio[2];\\r\\n            _bratio = feeRatio[3];\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            _isExcludedFromFees[sender] || _isExcludedFromFees[recipient]\\r\\n        ) {} else {\\r\\n            if (_fromtype \\u003e 0) {\\r\\n                require(sTime \\u003e 0 \\u0026\\u0026 block.timestamp \\u003e= sTime, \\\"!Time\\\");\\r\\n\\r\\n                if (\\r\\n                    (_balances[sender] * maxTradeAmount) / 10000 \\u003c actualAmount\\r\\n                ) {\\r\\n                    actualAmount = (_balances[sender] * maxTradeAmount) / 10000;\\r\\n                }\\r\\n\\r\\n                if (_ratio \\u003e 0) {\\r\\n                    _fee = (actualAmount * _ratio) / 1000;\\r\\n                    super._transfer(sender, address(assist), _fee);\\r\\n                }\\r\\n\\r\\n                if (_bratio \\u003e 0) {\\r\\n                    _bfee = (actualAmount * _bratio) / 1000;\\r\\n                    super._burn(sender, _bfee);\\r\\n                }\\r\\n                actualAmount -= (_fee + _bfee);\\r\\n            }\\r\\n        }\\r\\n        super._transfer(sender, recipient, actualAmount);\\r\\n\\r\\n        if (address(assist) != address(this)) {\\r\\n            assist._afterTokenTransfer(\\r\\n                sender,\\r\\n                recipient,\\r\\n                _fromtype,\\r\\n                amount,\\r\\n                actualAmount,\\r\\n                _fee,\\r\\n                _bfee\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owners\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"LogRvCMC8ryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"LogyVUKnvkKChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assist\",\"outputs\":[{\"internalType\":\"contract ISupportAssist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"e7gLVGMZ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"fs2wDccQ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isFs2wDccQ\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"isRvCMC8ryed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUniswapV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isrsIsQNBeTY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"isyVUKnvkKed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"nZpay7m92M$\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"rsIsQNBeTY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assist\",\"type\":\"address\"}],\"name\":\"setAssist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_i\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_ratio\",\"type\":\"uint64\"}],\"name\":\"setFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setRvCMC8ry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setSTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pair\",\"type\":\"bool\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setyVUKnvkK\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"x2zY7cbedN$\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StandardToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000022898dc42a0844b6e1a2a885c7570506476ebbca000000000000000000000000000000000000000000000000000000000063a3d0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000343474b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343474b0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ed4f216b8adc4893b3342f82c0cd806a2bb2c293aa65710a821e34b7d519df3"}