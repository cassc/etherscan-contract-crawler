{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2024-01-08\r\n */\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IPanackeRouter {\r\n    function getAmountsOut(\r\n        uint amount,\r\n        address[] memory path\r\n    ) external view returns (uint[] memory);\r\n}\r\n\r\ncontract GrokStaking is Ownable {\r\n    address public immutable grok;\r\n    address public immutable router;\r\n    address public immutable WETH;\r\n    address public immutable USDT;\r\n\r\n    //staker\r\n    mapping(address => uint) public stakeAmounts;\r\n    mapping(address => uint) public stakeAPR;\r\n    mapping(address => uint) public stakeDuration;\r\n    mapping(address => uint) public stakeStart;\r\n\r\n    uint public totalStaked;\r\n    uint public minStakeUSD; //minimum amount of usd that staker must have before staking\r\n\r\n    mapping(uint => uint) public APRs;\r\n    mapping(uint => uint) public MinAPRs;\r\n    mapping(uint => uint) public MaxAPRs;\r\n    uint public constant DENOMINATOR = 100_000;\r\n    uint public constant DELTA = 10_000; //10% increase/decrease when someone joins/lefts in a duration\r\n    uint public constant SIX_MONTH = 6 * 30 days;\r\n    uint public constant TWELVE_MONTH = 12 * 30 days;\r\n    uint public constant EIGHIN_MONTH = 18 * 30 days;\r\n\r\n    string public constant name = \"Grok Staking\";\r\n    string public constant symbol = \"\";\r\n\r\n    event Stake(\r\n        address indexed staker,\r\n        uint indexed amount,\r\n        uint time,\r\n        uint indexed duration\r\n    );\r\n    event Unstake(\r\n        address indexed staker,\r\n        uint indexed amount,\r\n        uint indexed time\r\n    );\r\n\r\n    constructor(\r\n        address grok_,\r\n        address router_,\r\n        uint _minStake,\r\n        address _weth,\r\n        address _usdt\r\n    ) Ownable(msg.sender) {\r\n        grok = grok_;\r\n        router = router_;\r\n        minStakeUSD = _minStake;\r\n        APRs[SIX_MONTH] = 60_000; //60%\r\n        APRs[TWELVE_MONTH] = 120_000; //120%\r\n        APRs[EIGHIN_MONTH] = 180_000; //180%\r\n        MinAPRs[SIX_MONTH] = 6_000; //60%\r\n        MinAPRs[TWELVE_MONTH] = 12_000; //120%\r\n        MinAPRs[EIGHIN_MONTH] = 18_000; //180%\r\n        MaxAPRs[SIX_MONTH] = 60_000; //60%\r\n        MaxAPRs[TWELVE_MONTH] = 120_000; //120%\r\n        MaxAPRs[EIGHIN_MONTH] = 180_000; //180%\r\n        WETH = _weth;\r\n        USDT = _usdt;\r\n    }\r\n\r\n    function balanceOf(address _staker) public view returns (uint) {\r\n        return stakeAmounts[_staker];\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return totalStaked;\r\n    }\r\n\r\n    //minimum amount of GROK in usd to have to be able to stake GROK\r\n    function updateMinimumGrokToHave(uint _minStake) public onlyOwner {\r\n        minStakeUSD = _minStake;\r\n    }\r\n\r\n    function stake_6Month(uint _amount) public returns (bool) {\r\n        _stake(_amount, SIX_MONTH);\r\n        return true;\r\n    }\r\n\r\n    function stake_12Month(uint _amount) public returns (bool) {\r\n        _stake(_amount, TWELVE_MONTH);\r\n        return true;\r\n    }\r\n\r\n    function stake_18Month(uint _amount) public returns (bool) {\r\n        _stake(_amount, EIGHIN_MONTH);\r\n        return true;\r\n    }\r\n\r\n    function _stake(uint _amount, uint _duration) internal returns (bool) {\r\n        //grok in staker balance minum the amount that he/she is going to stake\r\n        //example: if alice has 2000 grok and is going to stake 100 grok, then stakerBalance would be 100\r\n        //the usd value of stakerBalance must be more than or equal to minStakeUSD which is 100$ initialy\r\n        {\r\n            uint stakerBalance = IERC20(grok).balanceOf(msg.sender) - _amount;\r\n            uint usdValue = grokToUSD(stakerBalance);\r\n            require(\r\n                usdValue >= minStakeUSD,\r\n                \"your remaining grok tokens must worth than minStakeUSD\"\r\n            );\r\n        }\r\n        uint APR = APRs[_duration];\r\n        //take fees into account\r\n        uint b0 = IERC20(grok).balanceOf(address(this));\r\n        IERC20(grok).transferFrom(msg.sender, address(this), _amount);\r\n        _amount = IERC20(grok).balanceOf(address(this)) - b0;\r\n\r\n        //if first time staking, this check is very important\r\n        if (stakeAmounts[msg.sender] == 0) {\r\n            stakeAPR[msg.sender] = APR;\r\n            if (APR >= DELTA) {\r\n                if (APR - DELTA <= MinAPRs[_duration]) {\r\n                    APR = MinAPRs[_duration];\r\n                } else {\r\n                    APR -= DELTA;\r\n                }\r\n            }\r\n            APRs[_duration] = APR;\r\n            stakeDuration[msg.sender] = _duration;\r\n            stakeStart[msg.sender] = block.timestamp;\r\n        }\r\n\r\n        stakeAmounts[msg.sender] += _amount;\r\n\r\n        totalStaked += _amount;\r\n\r\n        emit Stake(msg.sender, _amount, block.timestamp, _duration);\r\n        return true;\r\n    }\r\n\r\n    //staker is able to unstake anytime, but will not receive rewards untill end of stake period\r\n    function unstake(uint _amount) public returns (bool) {\r\n        uint beforeStake = stakeAmounts[msg.sender];\r\n        //0- decrease staker balance\r\n        stakeAmounts[msg.sender] -= _amount;\r\n\r\n        //1- if staker is going to unstake whole amount\r\n        if (\r\n            stakeAmounts[msg.sender] == 0 &&\r\n            beforeStake > 0 &&\r\n            stakeStart[msg.sender] > 0\r\n        ) {\r\n            //2- and the stake duration is ended\r\n            if (\r\n                stakeStart[msg.sender] + stakeDuration[msg.sender] <=\r\n                block.timestamp\r\n            ) {\r\n                uint rewards = (beforeStake * stakeAPR[msg.sender]) /\r\n                    DENOMINATOR;\r\n                IERC20(grok).transfer(msg.sender, rewards);\r\n            }\r\n            //3- reset the staker start time and duration\r\n            stakeStart[msg.sender] = 0;\r\n            stakeAPR[msg.sender] = 0;\r\n            uint duration = stakeDuration[msg.sender];\r\n            stakeDuration[msg.sender] = 0;\r\n            //4- increase the APR of duration\r\n            if (APRs[duration] >= MaxAPRs[duration]) {\r\n                APRs[duration] = MaxAPRs[duration];\r\n            } else if (APRs[duration] == MinAPRs[duration]) {\r\n                APRs[duration] += DELTA - (MinAPRs[duration] % DELTA);\r\n            } else {\r\n                APRs[duration] += DELTA;\r\n            }\r\n        }\r\n        //5- transfer tokens to staker\r\n        IERC20(grok).transfer(msg.sender, _amount);\r\n        totalStaked -= _amount;\r\n        emit Unstake(msg.sender, _amount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    //calculate rewards of a staker\r\n    function calculateReward(\r\n        address staker\r\n    ) public view returns (uint rewardAmount) {\r\n        if (stakeAmounts[staker] == 0) return 0;\r\n        uint stakeAmount = stakeAmounts[staker];\r\n        uint timeElapsed = block.timestamp - stakeStart[staker];\r\n        rewardAmount =\r\n            ((stakeAmount * stakeAPR[staker]) * timeElapsed) /\r\n            (stakeDuration[staker] * DENOMINATOR);\r\n    }\r\n\r\n    function grokToUSD(uint amount) public view returns (uint usdtAmount) {\r\n        if (amount == 0) return 0;\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(grok);\r\n        path[1] = WETH;\r\n        path[2] = USDT;\r\n        usdtAmount = IPanackeRouter(router).getAmountsOut(amount, path)[2];\r\n    }\r\n\r\n    //emergency withdraw all tokensk\r\n    function emergencyWithdraw(address receiver) public onlyOwner {\r\n        IERC20(grok).transfer(receiver, IERC20(grok).balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"grok_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"APRs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIGHIN_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MaxAPRs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MinAPRs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIX_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWELVE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grok\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grokToUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake_12Month\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake_18Month\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake_6Month\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"updateMinimumGrokToHave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GrokStaking", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a7ffb399d44eb830f01751052c75d14f0b47e77900000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f42f5b529654ea0849b69411f75a6483970762ad8710d43624444d48ae62ded4"}