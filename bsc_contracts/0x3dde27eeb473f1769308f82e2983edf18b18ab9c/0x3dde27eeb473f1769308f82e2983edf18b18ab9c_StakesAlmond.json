{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/AlmondFlattened.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\n/**\\n * @title Owner\\n * @dev Set & change owner\\n */\\ncontract Owner {\\n\\n    address private owner;\\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    \\n    // modifier to check if caller is owner\\n    modifier isOwner() {\\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use 'require' to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor(address _owner) {\\n        owner = _owner;\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) external isOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Return owner address \\n     * @return address of owner\\n     */\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n}\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\nabstract contract ERC20 {\\n    function decimals() external virtual view returns (uint8 decimals_);\\n    function transferFrom(address _from, address _to, uint256 _value) external virtual returns (bool success);\\n    function transfer(address _to, uint256 _value) external virtual returns (bool success);\\n    function allowance(address _owner, address _spender) external virtual view returns (uint256 remaining);\\n    function balanceOf(address _owner) external virtual view returns (uint256 balance);\\n}\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n/**\\n * \\n * Stakes Almond v.3\\n *\\n * Stakes is an interest gain contract for ERC-20 tokens\\n * \\n * asset is the ERC20 token to deposit\\n * asset2 is the ERC20 token to get interest\\n * interest_rate: percentage rate of token1\\n * interest_rate2: percentage rate of token2\\n * maturity is the time in seconds after which is safe to end the stake\\n * penalization for ending a stake before maturity time\\n * lower_amount is the minimum amount for creating a stake\\n * \\n */\\ncontract StakesAlmond is Owner, ReentrancyGuard {\\n\\n    using SafeERC20 for ERC20;\\n\\n    // token to deposit\\n    ERC20 public asset;\\n\\n    // token to pay interest\\n    ERC20 public asset2;\\n\\n    // stakes history\\n    struct Record {\\n        uint256 from;\\n        uint256 amount;\\n        uint256 gain;\\n        uint256 gain2;\\n        uint256 penalization;\\n        uint256 to;\\n        bool ended;\\n    }\\n\\n    // contract parameters\\n    uint16 public interest_rate;\\n    uint16 public interest_rate2;\\n    uint256 public maturity;\\n    uint8 public penalization;\\n    uint256 public lower_amount;\\n\\n    // conversion ratio for token1 and token2\\n    // 1:10 ratio will be: \\n    // ratio1 = 1 \\n    // ratio2 = 10\\n    uint256 public ratio1;\\n    uint256 public ratio2;\\n\\n    mapping(address => Record[]) public ledger;\\n\\n    event StakeStart(address indexed user, uint256 value, uint256 index);\\n    event StakeEnd(address indexed user, uint256 value, uint256 penalty, uint256 interest, uint256 index);\\n    \\n    event ChangeRatio1(uint256 newRatio);\\n    event ChangeRatio2(uint256 newRatio);\\n\\n    constructor(\\n        ERC20 _erc20, ERC20 _erc20_2, address _owner, uint16 _rate, uint16 _rate2, uint256 _maturity, \\n        uint8 _penalization, uint256 _lower, uint256 _ratio1, uint256 _ratio2) Owner(_owner) {\\n        require(_penalization<=100, \\\"Penalty has to be an integer between 0 and 100\\\");\\n        asset = _erc20;\\n        asset2 = _erc20_2;\\n        ratio1 = _ratio1;\\n        ratio2 = _ratio2;\\n        interest_rate = _rate;\\n        interest_rate2 = _rate2;\\n        maturity = _maturity;\\n        penalization = _penalization;\\n        lower_amount = _lower;\\n    }\\n    \\n    function start(uint256 _value) external nonReentrant {\\n        require(_value >= lower_amount, \\\"Invalid value\\\");\\n        asset.safeTransferFrom(msg.sender, address(this), _value);\\n        ledger[msg.sender].push(Record(block.timestamp, _value, 0, 0, 0, 0, false));\\n        emit StakeStart(msg.sender, _value, ledger[msg.sender].length-1);\\n    }\\n\\n    function end(uint256 i) external nonReentrant {\\n\\n        require(i < ledger[msg.sender].length, \\\"Invalid index\\\");\\n        require(!ledger[msg.sender][i].ended, \\\"Invalid stake\\\");\\n        \\n        // penalization\\n        if(block.timestamp - ledger[msg.sender][i].from < maturity) {\\n\\n            uint256 _penalization = ledger[msg.sender][i].amount * penalization / 100;\\n            ledger[msg.sender][i].penalization = _penalization;\\n            ledger[msg.sender][i].to = block.timestamp;\\n            ledger[msg.sender][i].ended = true;\\n            emit StakeEnd(msg.sender, ledger[msg.sender][i].amount, _penalization, 0, i);\\n\\n            asset.safeTransfer(msg.sender, ledger[msg.sender][i].amount - _penalization);\\n            asset.safeTransfer(getOwner(), _penalization);\\n\\n        // interest gained\\n        } else {\\n            \\n            // interest is calculated in asset2\\n            uint256 _interest = get_gains(msg.sender, i);\\n\\n            // check that the owner can pay interest before trying to pay, token 1\\n            if (asset.allowance(getOwner(), address(this)) < _interest || asset.balanceOf(getOwner()) < _interest) {\\n                _interest = 0;\\n            }\\n\\n            // interest is calculated in asset2\\n            uint256 _interest2 = get_gains2(msg.sender, i);\\n\\n            // check that the owner can pay interest before trying to pay, token 1\\n            if (asset2.allowance(getOwner(), address(this)) < _interest2 || asset2.balanceOf(getOwner()) < _interest2) {\\n                _interest2 = 0;\\n            }\\n\\n            // the original asset is returned to the investor\\n            ledger[msg.sender][i].gain = _interest;\\n            ledger[msg.sender][i].gain2 = _interest2;\\n            ledger[msg.sender][i].to = block.timestamp;\\n            ledger[msg.sender][i].ended = true;\\n            emit StakeEnd(msg.sender, ledger[msg.sender][i].amount, 0, _interest, i);\\n\\n            asset.safeTransfer(msg.sender, ledger[msg.sender][i].amount);\\n\\n            if (_interest > 0) {\\n                asset.safeTransferFrom(getOwner(), msg.sender, _interest);\\n            }\\n\\n            if (_interest2 > 0) {\\n                asset2.safeTransferFrom(getOwner(), msg.sender, _interest2);\\n            }\\n\\n        }\\n    }\\n\\n    function set(ERC20 _erc20, ERC20 _erc20_2, uint256 _lower, uint256 _maturity, uint16 _rate, uint16 _rate2, uint8 _penalization, uint256 _ratio1, uint256 _ratio2) external isOwner {\\n        require(_penalization<=100, \\\"Invalid value\\\");\\n        asset = _erc20;\\n        asset2 = _erc20_2;\\n        ratio1 = _ratio1;\\n        ratio2 = _ratio2;\\n        lower_amount = _lower;\\n        maturity = _maturity;\\n        interest_rate = _rate;\\n        interest_rate2 = _rate2;\\n        penalization = _penalization;\\n\\n        emit ChangeRatio1(ratio1);\\n        emit ChangeRatio2(ratio2);\\n\\n    }\\n\\n    // calculate interest of the token 1 to the current date time\\n    function get_gains(address _address, uint256 _rec_number) public view returns (uint256) {\\n        uint256 _record_seconds = block.timestamp - ledger[_address][_rec_number].from;\\n        uint256 _year_seconds = 365*24*60*60;\\n        return _record_seconds * \\n            ledger[_address][_rec_number].amount * interest_rate / 100\\n        / _year_seconds;\\n    }\\n\\n    // calculate interest to the current date time\\n    function get_gains2(address _address, uint256 _rec_number) public view returns (uint256) {\\n        uint256 _record_seconds = block.timestamp - ledger[_address][_rec_number].from;\\n        uint256 _year_seconds = 365*24*60*60;\\n        \\n        /**\\n         *\\n         * Oririginal code:\\n         * \\n         *   // now we calculate the value of the transforming the staked asset (asset) into the asset2\\n         *   // first we calculate the ratio\\n         *   uint256 value_in_asset2 = ledger[_address][_rec_number].amount * ratio2 / ratio1;\\n         *   // now we transform into decimals of the asset2\\n         *   value_in_asset2 = value_in_asset2 * 10**asset2.decimals() / 10**asset.decimals();\\n         *   uint256 interest = _record_seconds * value_in_asset2 * interest_rate2 / 100 / _year_seconds;\\n         *   // now lets calculate the interest rate based on the converted value in asset 2\\n         *\\n         * Simplified into:\\n         * \\n         */\\n\\n        return (_record_seconds * ledger[_address][_rec_number].amount * ratio2 * 10**asset2.decimals() * interest_rate2) / \\n               (ratio1 * 10**asset.decimals() * 100 * _year_seconds);\\n\\n    }\\n\\n    function ledger_length(address _address) external view \\n        returns (uint256) {\\n        return ledger[_address].length;\\n    }\\n\\n}\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_erc20_2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_rate2\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_penalization\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_lower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"ChangeRatio1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"ChangeRatio2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"StakeStart\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset2\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rec_number\",\"type\":\"uint256\"}],\"name\":\"get_gains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rec_number\",\"type\":\"uint256\"}],\"name\":\"get_gains2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interest_rate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interest_rate2\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gain2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ledger_length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lower_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penalization\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_erc20_2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_rate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_rate2\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_penalization\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_ratio1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio2\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakesAlmond", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e4379a25a0db888e19ec2c14416fe68a62aca5cc000000000000000000000000e4379a25a0db888e19ec2c14416fe68a62aca5cc000000000000000000000000e4379a25a0db888e19ec2c14416fe68a62aca5cc0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000007", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}