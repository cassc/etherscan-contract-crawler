{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../libraries/math/SafeMath.sol\\\";\\r\\nimport \\\"../libraries/token/IERC20.sol\\\";\\r\\nimport \\\"../libraries/token/SafeERC20.sol\\\";\\r\\nimport \\\"../libraries/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\r\\nimport \\\"./interfaces/IVault.sol\\\";\\r\\nimport \\\"./interfaces/IRouter.sol\\\";\\r\\n\\r\\ncontract Router is IRouter {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address payable;\\r\\n\\r\\n    address public gov;\\r\\n\\r\\n    // wrapped BNB / ETH\\r\\n    address public immutable weth;\\r\\n    address public immutable usdj;\\r\\n    address public immutable vault;\\r\\n\\r\\n    mapping(address => bool) public plugins;\\r\\n    mapping(address => mapping(address => bool)) public approvedPlugins;\\r\\n\\r\\n    event Swap(\\r\\n        address account,\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    event SetGov(address gov);\\r\\n    event EditPlugin(address plugin, bool active);\\r\\n    event AllowPlugin(address user, address plugin, bool permit);\\r\\n\\r\\n    modifier onlyGov() {\\r\\n        require(msg.sender == gov, \\\"Router: forbidden\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _vault,\\r\\n        address _usdj,\\r\\n        address _weth\\r\\n    ) public {\\r\\n        vault = _vault;\\r\\n        usdj = _usdj;\\r\\n        weth = _weth;\\r\\n\\r\\n        gov = msg.sender;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        require(msg.sender == weth, \\\"Router: invalid sender\\\");\\r\\n    }\\r\\n\\r\\n    function setGov(address _gov) external onlyGov {\\r\\n        require(_gov != address(0));\\r\\n        gov = _gov;\\r\\n        emit SetGov(_gov);\\r\\n    }\\r\\n\\r\\n    function addPlugin(address _plugin) external override onlyGov {\\r\\n        plugins[_plugin] = true;\\r\\n        emit EditPlugin(_plugin, true);\\r\\n    }\\r\\n\\r\\n    function removePlugin(address _plugin) external onlyGov {\\r\\n        plugins[_plugin] = false;\\r\\n        emit EditPlugin(_plugin, false);\\r\\n    }\\r\\n\\r\\n    function approvePlugin(address _plugin) external {\\r\\n        approvedPlugins[msg.sender][_plugin] = true;\\r\\n        emit AllowPlugin(msg.sender, _plugin, true);\\r\\n    }\\r\\n\\r\\n    function denyPlugin(address _plugin) external {\\r\\n        approvedPlugins[msg.sender][_plugin] = false;\\r\\n        emit AllowPlugin(msg.sender, _plugin, false);\\r\\n    }\\r\\n\\r\\n    function pluginTransfer(\\r\\n        address _token,\\r\\n        address _account,\\r\\n        address _receiver,\\r\\n        uint256 _amount\\r\\n    ) external override {\\r\\n        _validatePlugin(_account);\\r\\n        IERC20(_token).safeTransferFrom(_account, _receiver, _amount);\\r\\n    }\\r\\n\\r\\n    function pluginIncreasePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong\\r\\n    ) external override {\\r\\n        _validatePlugin(_account);\\r\\n        IVault(vault).increasePosition(\\r\\n            _account,\\r\\n            _collateralToken,\\r\\n            _indexToken,\\r\\n            _sizeDelta,\\r\\n            _isLong\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function pluginDecreasePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address _receiver\\r\\n    ) external override returns (uint256) {\\r\\n        _validatePlugin(_account);\\r\\n        return\\r\\n            IVault(vault).decreasePosition(\\r\\n                _account,\\r\\n                _collateralToken,\\r\\n                _indexToken,\\r\\n                _collateralDelta,\\r\\n                _sizeDelta,\\r\\n                _isLong,\\r\\n                _receiver\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function directPoolDeposit(address _token, uint256 _amount) external {\\r\\n        IERC20(_token).safeTransferFrom(_sender(), vault, _amount);\\r\\n        IVault(vault).directPoolDeposit(_token);\\r\\n    }\\r\\n\\r\\n    function swap(\\r\\n        address[] memory _path,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _minOut,\\r\\n        address _receiver\\r\\n    ) public override {\\r\\n        IERC20(_path[0]).safeTransferFrom(_sender(), vault, _amountIn);\\r\\n        uint256 amountOut = _swap(_path, _minOut, _receiver);\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            _path[0],\\r\\n            _path[_path.length - 1],\\r\\n            _amountIn,\\r\\n            amountOut\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapETHToTokens(\\r\\n        address[] memory _path,\\r\\n        uint256 _minOut,\\r\\n        address _receiver\\r\\n    ) external payable {\\r\\n        require(_path[0] == weth, \\\"Router: invalid _path\\\");\\r\\n        _transferETHToVault();\\r\\n        uint256 amountOut = _swap(_path, _minOut, _receiver);\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            _path[0],\\r\\n            _path[_path.length - 1],\\r\\n            msg.value,\\r\\n            amountOut\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapTokensToETH(\\r\\n        address[] memory _path,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _minOut,\\r\\n        address payable _receiver\\r\\n    ) external {\\r\\n        require(_path[_path.length - 1] == weth, \\\"Router: invalid _path\\\");\\r\\n        IERC20(_path[0]).safeTransferFrom(_sender(), vault, _amountIn);\\r\\n        uint256 amountOut = _swap(_path, _minOut, address(this));\\r\\n        _transferOutETH(amountOut, _receiver);\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            _path[0],\\r\\n            _path[_path.length - 1],\\r\\n            _amountIn,\\r\\n            amountOut\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function increasePosition(\\r\\n        address[] memory _path,\\r\\n        address _indexToken,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _minOut,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        uint256 _price\\r\\n    ) external {\\r\\n        if (_amountIn > 0) {\\r\\n            IERC20(_path[0]).safeTransferFrom(_sender(), vault, _amountIn);\\r\\n        }\\r\\n        if (_path.length > 1 && _amountIn > 0) {\\r\\n            uint256 amountOut = _swap(_path, _minOut, address(this));\\r\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, amountOut);\\r\\n        }\\r\\n        _increasePosition(\\r\\n            _path[_path.length - 1],\\r\\n            _indexToken,\\r\\n            _sizeDelta,\\r\\n            _isLong,\\r\\n            _price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function increasePositionETH(\\r\\n        address[] memory _path,\\r\\n        address _indexToken,\\r\\n        uint256 _minOut,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        uint256 _price\\r\\n    ) external payable {\\r\\n        require(_path[0] == weth, \\\"Router: invalid _path\\\");\\r\\n        if (msg.value > 0) {\\r\\n            _transferETHToVault();\\r\\n        }\\r\\n        if (_path.length > 1 && msg.value > 0) {\\r\\n            uint256 amountOut = _swap(_path, _minOut, address(this));\\r\\n            IERC20(_path[_path.length - 1]).safeTransfer(vault, amountOut);\\r\\n        }\\r\\n        _increasePosition(\\r\\n            _path[_path.length - 1],\\r\\n            _indexToken,\\r\\n            _sizeDelta,\\r\\n            _isLong,\\r\\n            _price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function decreasePosition(\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address _receiver,\\r\\n        uint256 _price\\r\\n    ) external {\\r\\n        _decreasePosition(\\r\\n            _collateralToken,\\r\\n            _indexToken,\\r\\n            _collateralDelta,\\r\\n            _sizeDelta,\\r\\n            _isLong,\\r\\n            _receiver,\\r\\n            _price\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function decreasePositionETH(\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address payable _receiver,\\r\\n        uint256 _price\\r\\n    ) external {\\r\\n        uint256 amountOut = _decreasePosition(\\r\\n            _collateralToken,\\r\\n            _indexToken,\\r\\n            _collateralDelta,\\r\\n            _sizeDelta,\\r\\n            _isLong,\\r\\n            address(this),\\r\\n            _price\\r\\n        );\\r\\n        _transferOutETH(amountOut, _receiver);\\r\\n    }\\r\\n\\r\\n    function decreasePositionAndSwap(\\r\\n        address[] memory _path,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address _receiver,\\r\\n        uint256 _price,\\r\\n        uint256 _minOut\\r\\n    ) external {\\r\\n        uint256 amount = _decreasePosition(\\r\\n            _path[0],\\r\\n            _indexToken,\\r\\n            _collateralDelta,\\r\\n            _sizeDelta,\\r\\n            _isLong,\\r\\n            address(this),\\r\\n            _price\\r\\n        );\\r\\n        IERC20(_path[0]).safeTransfer(vault, amount);\\r\\n        _swap(_path, _minOut, _receiver);\\r\\n    }\\r\\n\\r\\n    function decreasePositionAndSwapETH(\\r\\n        address[] memory _path,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address payable _receiver,\\r\\n        uint256 _price,\\r\\n        uint256 _minOut\\r\\n    ) external {\\r\\n        require(_path[_path.length - 1] == weth, \\\"Router: invalid _path\\\");\\r\\n        uint256 amount = _decreasePosition(\\r\\n            _path[0],\\r\\n            _indexToken,\\r\\n            _collateralDelta,\\r\\n            _sizeDelta,\\r\\n            _isLong,\\r\\n            address(this),\\r\\n            _price\\r\\n        );\\r\\n        IERC20(_path[0]).safeTransfer(vault, amount);\\r\\n        uint256 amountOut = _swap(_path, _minOut, address(this));\\r\\n        _transferOutETH(amountOut, _receiver);\\r\\n    }\\r\\n\\r\\n    function _increasePosition(\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        uint256 _price\\r\\n    ) private {\\r\\n        if (_isLong) {\\r\\n            require(\\r\\n                IVault(vault).getMaxPrice(_indexToken) <= _price,\\r\\n                \\\"Router: mark price higher than limit\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                IVault(vault).getMinPrice(_indexToken) >= _price,\\r\\n                \\\"Router: mark price lower than limit\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        IVault(vault).increasePosition(\\r\\n            _sender(),\\r\\n            _collateralToken,\\r\\n            _indexToken,\\r\\n            _sizeDelta,\\r\\n            _isLong\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _decreasePosition(\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address _receiver,\\r\\n        uint256 _price\\r\\n    ) private returns (uint256) {\\r\\n        if (_isLong) {\\r\\n            require(\\r\\n                IVault(vault).getMinPrice(_indexToken) >= _price,\\r\\n                \\\"Router: mark price lower than limit\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                IVault(vault).getMaxPrice(_indexToken) <= _price,\\r\\n                \\\"Router: mark price higher than limit\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        return\\r\\n            IVault(vault).decreasePosition(\\r\\n                _sender(),\\r\\n                _collateralToken,\\r\\n                _indexToken,\\r\\n                _collateralDelta,\\r\\n                _sizeDelta,\\r\\n                _isLong,\\r\\n                _receiver\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _transferETHToVault() private {\\r\\n        IWETH(weth).deposit{value: msg.value}();\\r\\n        IERC20(weth).safeTransfer(vault, msg.value);\\r\\n    }\\r\\n\\r\\n    function _transferOutETH(uint256 _amountOut, address payable _receiver)\\r\\n        private\\r\\n    {\\r\\n        IWETH(weth).withdraw(_amountOut);\\r\\n        _receiver.sendValue(_amountOut);\\r\\n    }\\r\\n\\r\\n    function _swap(\\r\\n        address[] memory _path,\\r\\n        uint256 _minOut,\\r\\n        address _receiver\\r\\n    ) private returns (uint256) {\\r\\n        if (_path.length == 2) {\\r\\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\\r\\n        }\\r\\n        if (_path.length == 3) {\\r\\n            uint256 midOut = _vaultSwap(_path[0], _path[1], 0, address(this));\\r\\n            IERC20(_path[1]).safeTransfer(vault, midOut);\\r\\n            return _vaultSwap(_path[1], _path[2], _minOut, _receiver);\\r\\n        }\\r\\n\\r\\n        revert(\\\"Router: invalid _path.length\\\");\\r\\n    }\\r\\n\\r\\n    function _vaultSwap(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _minOut,\\r\\n        address _receiver\\r\\n    ) private returns (uint256) {\\r\\n        uint256 amountOut;\\r\\n\\r\\n        if (_tokenOut == usdj) {\\r\\n            // buyUSDJ\\r\\n            amountOut = IVault(vault).buyUSDJ(_tokenIn, _receiver);\\r\\n        } else if (_tokenIn == usdj) {\\r\\n            // sellUSDJ\\r\\n            amountOut = IVault(vault).sellUSDJ(_tokenOut, _receiver);\\r\\n        } else {\\r\\n            // swap\\r\\n            amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\\r\\n        }\\r\\n\\r\\n        require(amountOut >= _minOut, \\\"Router: insufficient amountOut\\\");\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function _sender() private view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _validatePlugin(address _account) private view {\\r\\n        require(plugins[msg.sender], \\\"Router: invalid plugin\\\");\\r\\n        require(\\r\\n            approvedPlugins[_account][msg.sender],\\r\\n            \\\"Router: plugin not approved\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/token/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IVaultUtils.sol\\\";\\r\\n\\r\\ninterface IVault {\\r\\n    function isInitialized() external view returns (bool);\\r\\n\\r\\n    function isSwapEnabled() external view returns (bool);\\r\\n\\r\\n    function isLeverageEnabled() external view returns (bool);\\r\\n\\r\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\r\\n\\r\\n    function setError(uint256 _errorCode, string calldata _error) external;\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function usdj() external view returns (address);\\r\\n\\r\\n    function gov() external view returns (address);\\r\\n\\r\\n    function whitelistedTokenCount() external view returns (uint256);\\r\\n\\r\\n    function maxLeverage() external view returns (uint256);\\r\\n\\r\\n    function minProfitTime() external view returns (uint256);\\r\\n\\r\\n    function hasDynamicFees() external view returns (bool);\\r\\n\\r\\n    function fundingInterval() external view returns (uint256);\\r\\n\\r\\n    function totalTokenWeights() external view returns (uint256);\\r\\n\\r\\n    function getTargetUsdjAmount(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function inManagerMode() external view returns (bool);\\r\\n\\r\\n    function inPrivateLiquidationMode() external view returns (bool);\\r\\n\\r\\n    function maxGasPrice() external view returns (uint256);\\r\\n\\r\\n    function approvedRouters(address _account, address _router)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function isLiquidator(address _account) external view returns (bool);\\r\\n\\r\\n    function isManager(address _account) external view returns (bool);\\r\\n\\r\\n    function minProfitBasisPoints(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function tokenBalances(address _token) external view returns (uint256);\\r\\n\\r\\n    function lastFundingTimes(address _token) external view returns (uint256);\\r\\n\\r\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\r\\n\\r\\n    function setInManagerMode(bool _inManagerMode) external;\\r\\n\\r\\n    function setManager(address _manager, bool _isManager) external;\\r\\n\\r\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\r\\n\\r\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\r\\n\\r\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\r\\n\\r\\n    function setUsdjAmount(address _token, uint256 _amount) external;\\r\\n\\r\\n    function setBufferAmount(address _token, uint256 _amount) external;\\r\\n\\r\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\r\\n\\r\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode)\\r\\n        external;\\r\\n\\r\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\r\\n\\r\\n    function setFundingRate(\\r\\n        uint256 _fundingInterval,\\r\\n        uint256 _fundingRateFactor,\\r\\n        uint256 _stableFundingRateFactor\\r\\n    ) external;\\r\\n\\r\\n    function setFees(\\r\\n        uint256 _taxBasisPoints,\\r\\n        uint256 _stableTaxBasisPoints,\\r\\n        uint256 _mintBurnFeeBasisPoints,\\r\\n        uint256 _swapFeeBasisPoints,\\r\\n        uint256 _stableSwapFeeBasisPoints,\\r\\n        uint256 _marginFeeBasisPoints,\\r\\n        uint256 _liquidationFeeUsd,\\r\\n        uint256 _minProfitTime,\\r\\n        bool _hasDynamicFees\\r\\n    ) external;\\r\\n\\r\\n    function setTokenConfig(\\r\\n        address _token,\\r\\n        uint256 _tokenDecimals,\\r\\n        uint256 _redemptionBps,\\r\\n        uint256 _minProfitBps,\\r\\n        uint256 _maxUsdjAmount,\\r\\n        bool _isStable,\\r\\n        bool _isShortable\\r\\n    ) external;\\r\\n\\r\\n    function setPriceFeed(address _priceFeed) external;\\r\\n\\r\\n    function withdrawFees(address _token, address _receiver)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function directPoolDeposit(address _token) external;\\r\\n\\r\\n    function buyUSDJ(address _token, address _receiver)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function sellUSDJ(address _token, address _receiver)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function swap(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        address _receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function increasePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong\\r\\n    ) external;\\r\\n\\r\\n    function decreasePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address _receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function validateLiquidation(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        bool _isLong,\\r\\n        bool _raise\\r\\n    ) external view returns (uint256, uint256);\\r\\n\\r\\n    function liquidatePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        bool _isLong,\\r\\n        address _feeReceiver\\r\\n    ) external;\\r\\n\\r\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function priceFeed() external view returns (address);\\r\\n\\r\\n    function fundingRateFactor() external view returns (uint256);\\r\\n\\r\\n    function stableFundingRateFactor() external view returns (uint256);\\r\\n\\r\\n    function cumulativeFundingRates(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getNextFundingRate(address _token) external view returns (uint256);\\r\\n\\r\\n    function getFeeBasisPoints(\\r\\n        address _token,\\r\\n        uint256 _usdjDelta,\\r\\n        uint256 _feeBasisPoints,\\r\\n        uint256 _taxBasisPoints,\\r\\n        bool _increment\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function liquidationFeeUsd() external view returns (uint256);\\r\\n\\r\\n    function taxBasisPoints() external view returns (uint256);\\r\\n\\r\\n    function stableTaxBasisPoints() external view returns (uint256);\\r\\n\\r\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\r\\n\\r\\n    function swapFeeBasisPoints() external view returns (uint256);\\r\\n\\r\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\r\\n\\r\\n    function marginFeeBasisPoints() external view returns (uint256);\\r\\n\\r\\n    function allWhitelistedTokensLength() external view returns (uint256);\\r\\n\\r\\n    function allWhitelistedTokens(uint256) external view returns (address);\\r\\n\\r\\n    function whitelistedTokens(address _token) external view returns (bool);\\r\\n\\r\\n    function stableTokens(address _token) external view returns (bool);\\r\\n\\r\\n    function shortableTokens(address _token) external view returns (bool);\\r\\n\\r\\n    function feeReserves(address _token) external view returns (uint256);\\r\\n\\r\\n    function globalShortSizes(address _token) external view returns (uint256);\\r\\n\\r\\n    function globalShortAveragePrices(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function maxGlobalShortSizes(address _token)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function tokenDecimals(address _token) external view returns (uint256);\\r\\n\\r\\n    function tokenWeights(address _token) external view returns (uint256);\\r\\n\\r\\n    function guaranteedUsd(address _token) external view returns (uint256);\\r\\n\\r\\n    function poolAmounts(address _token) external view returns (uint256);\\r\\n\\r\\n    function bufferAmounts(address _token) external view returns (uint256);\\r\\n\\r\\n    function reservedAmounts(address _token) external view returns (uint256);\\r\\n\\r\\n    function usdjAmounts(address _token) external view returns (uint256);\\r\\n\\r\\n    function maxUsdjAmounts(address _token) external view returns (uint256);\\r\\n\\r\\n    function getRedemptionAmount(address _token, uint256 _usdjAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getMaxPrice(address _token) external view returns (uint256);\\r\\n\\r\\n    function getMinPrice(address _token) external view returns (uint256);\\r\\n\\r\\n    function getDelta(\\r\\n        address _indexToken,\\r\\n        uint256 _size,\\r\\n        uint256 _averagePrice,\\r\\n        bool _isLong,\\r\\n        uint256 _lastIncreasedTime\\r\\n    ) external view returns (bool, uint256);\\r\\n\\r\\n    function getPosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        bool _isLong\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/token/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../math/SafeMath.sol\\\";\\r\\nimport \\\"../utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IRouter {\\r\\n    function addPlugin(address _plugin) external;\\r\\n\\r\\n    function pluginTransfer(\\r\\n        address _token,\\r\\n        address _account,\\r\\n        address _receiver,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function pluginIncreasePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong\\r\\n    ) external;\\r\\n\\r\\n    function pluginDecreasePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address _receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function swap(\\r\\n        address[] memory _path,\\r\\n        uint256 _amountIn,\\r\\n        uint256 _minOut,\\r\\n        address _receiver\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVaultUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\ninterface IVaultUtils {\\r\\n    function updateCumulativeFundingRate(\\r\\n        address _collateralToken,\\r\\n        address _indexToken\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function validateIncreasePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong\\r\\n    ) external view;\\r\\n\\r\\n    function validateDecreasePosition(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        uint256 _collateralDelta,\\r\\n        uint256 _sizeDelta,\\r\\n        bool _isLong,\\r\\n        address _receiver\\r\\n    ) external view;\\r\\n\\r\\n    function validateLiquidation(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        bool _isLong,\\r\\n        bool _raise\\r\\n    ) external view returns (uint256, uint256);\\r\\n\\r\\n    function getEntryFundingRate(\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        bool _isLong\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getPositionFee(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        bool _isLong,\\r\\n        uint256 _sizeDelta\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getFundingFee(\\r\\n        address _account,\\r\\n        address _collateralToken,\\r\\n        address _indexToken,\\r\\n        bool _isLong,\\r\\n        uint256 _size,\\r\\n        uint256 _entryFundingRate\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getBuyUsdjFeeBasisPoints(address _token, uint256 _usdjAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getSellUsdjFeeBasisPoints(address _token, uint256 _usdjAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getSwapFeeBasisPoints(\\r\\n        address _tokenIn,\\r\\n        address _tokenOut,\\r\\n        uint256 _usdjAmount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getFeeBasisPoints(\\r\\n        address _token,\\r\\n        uint256 _usdjDelta,\\r\\n        uint256 _feeBasisPoints,\\r\\n        uint256 _taxBasisPoints,\\r\\n        bool _increment\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdj\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permit\",\"type\":\"bool\"}],\"name\":\"AllowPlugin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"EditPlugin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"}],\"name\":\"SetGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"}],\"name\":\"approvePlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedPlugins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"decreasePositionAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"}],\"name\":\"decreasePositionAndSwapETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"decreasePositionETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"}],\"name\":\"denyPlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"directPoolDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"increasePositionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"pluginDecreasePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"}],\"name\":\"pluginIncreasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pluginTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"plugins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swapETHToTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"swapTokensToETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdj\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Router", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000024ed2bf2c1e76c621164d93b73debd10cdc4bbd000000000000000000000000062e055d33d4d14849ff57458838bb9c99c457fb6000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}