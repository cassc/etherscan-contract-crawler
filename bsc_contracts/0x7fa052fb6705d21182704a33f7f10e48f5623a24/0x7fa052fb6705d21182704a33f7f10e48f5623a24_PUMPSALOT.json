{"SourceCode": "/*\r\nPUMPS (ALOT) TOKEN\r\n\r\nFINALLY A BREAKTHROUGH IN CRYPTO PUMPNOMICS!\r\n\r\n50,000 Q STARTING SUPPLY: Fair Launched, No Team Share!\r\n\r\nPUMPNOMICS: WOW FACTOR\r\nOn every SELL over 3 Trillion ALOT on FEGex 0.33% of from the liquidity pool is burnt.\r\nOn every SELL over 5 Trillion ALOT on Pancake 0.25% from the liquidity pool is burnt.\r\nBuy over 50 Trillion ALOT and you get 0.5% of every sell until the next buy of over 50 Trillion!\r\n\r\nTOKENOMICS: 11.5% \r\n3% of every transfer is distributed to every holder.\r\n4% of every transfer is used to boost liquidity.\r\n4% of every transfer is used for marketing.\r\n0.5% of every sell is awarded to the last buyer of over 50T.\r\n\r\nTrade on FEGex: https://fegex.com\r\nTrade on PCS: https://pancakeswap.finance\r\nFEGcharts: https://charts.fegex.com\r\nDEXT: https://dextools.com\r\n\r\nWebsite: https://pumpsalot.com\r\nTG Chat: @pumpsalotchat\r\nTwitter: https://twitter.com/pumpnomic\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.11;\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n \r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    //function _msgSender() internal view virtual returns (address payable) {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Rmath {\r\n\r\n    function btoi(uint256 a)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        return a / 1e18;\r\n    }\r\n\r\n    function bfloor(uint256 a)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        return btoi(a) * 1e18;\r\n    }\r\n\r\n    function badd(uint256 a, uint256 b)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsub(uint256 a, uint256 b)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        (uint256 c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    function bsubSign(uint256 a, uint256 b)\r\n        internal pure\r\n        returns (uint, bool)\r\n    {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n\r\n    function bmul(uint256 a, uint256 b)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c1 = c0 + (1e18 / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c2 = c1 / 1e18;\r\n        return c2;\r\n    }\r\n\r\n    function bdiv(uint256 a, uint256 b)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint256 c0 = a * 1e18;\r\n        require(a == 0 || c0 / a == 1e18, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint256 c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint256 c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    function bpowi(uint256 a, uint256 n)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        uint256 z = n % 2 != 0 ? a : 1e18;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            a = bmul(a, a);\r\n\r\n            if (n % 2 != 0) {\r\n                z = bmul(z, a);\r\n            }\r\n        }\r\n        return z;\r\n    }\r\n\r\n    function bpow(uint256 base, uint256 exp)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        require(base >= 1 wei, \"ERR_BPOW_BASE_TOO_LOW\");\r\n        require(base <= (2 * 1e18) - 1 wei, \"ERR_BPOW_BASE_TOO_HIGH\");\r\n\r\n        uint256 whole  = bfloor(exp);\r\n        uint256 remain = bsub(exp, whole);\r\n\r\n        uint256 wholePow = bpowi(base, btoi(whole));\r\n\r\n        if (remain == 0) {\r\n            return wholePow;\r\n        }\r\n\r\n        uint256 partialResult = bpowApprox(base, remain, 1e18 / 1e10);\r\n        return bmul(wholePow, partialResult);\r\n    }\r\n\r\n    function bpowApprox(uint256 base, uint256 exp, uint256 precision)\r\n        internal pure\r\n        returns (uint256)\r\n    {\r\n        uint256 a     = exp;\r\n        (uint256 x, bool xneg)  = bsubSign(base, 1e18);\r\n        uint256 term = 1e18;\r\n        uint256 sum   = term;\r\n        bool negative = false;\r\n\r\n\r\n        for (uint256 i = 1; term >= precision; i++) {\r\n            uint256 bigK = i * 1e18;\r\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, 1e18));\r\n            term = bmul(term, bmul(c, x));\r\n            term = bdiv(term, bigK);\r\n            if (term == 0) break;\r\n\r\n            if (xneg) negative = !negative;\r\n            if (cneg) negative = !negative;\r\n            if (negative) {\r\n                sum = bsub(sum, term);\r\n            } else {\r\n                sum = badd(sum, term);\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n}\r\n\r\ninterface FEGex {\r\nfunction depositInternal(address asset, uint256 amt) external;\r\nfunction withdrawInternal(address asset, uint256 amt) external;\r\nfunction swapToSwap(address path, address asset, address to, uint256 amt) external;\r\nfunction payMain(address payee, uint256 amount) external;\r\nfunction payToken(address payee, uint256 amount) external;\r\nfunction BUY(uint256 dot, address to, uint256 minAmountOut) external payable returns(uint256 tokenAmountOut);\r\nfunction BUYSmart(uint256 tokenAmountIn, uint256 minAmountOut) external returns(uint256 tokenAmountOut);\r\nfunction SELL(uint256 dot, address to, uint256 tokenAmountIn, uint256 minAmountOut) external returns(uint256 tokenAmountOut);\r\nfunction SELLSmart(uint256 tokenAmountIn, uint256 minAmountOut) external returns(uint256 tokenAmountOut);\r\nfunction addBothLiquidity(uint256 poolAmountOut, uint[] calldata maxAmountsIn) external;   \r\nfunction sync() external;\r\nfunction openit() external;\r\n}\r\n\r\ninterface AutoDeployer {\r\nfunction createPair(address token, uint256 liqmain, uint256 liqtoken, address owner) external returns(address pair);\r\nfunction getPairContract(address tokenA, address tokenB) external view returns(address);\r\n}\r\n\r\ninterface wrap {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 amt) external;\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface otherSwap {\r\n    function sync() external;\r\n}\r\n\r\ninterface otherFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract market is Context {\r\n    address private _Market;\r\n    address private _previousMarket;\r\n\r\n    event MarketshipTransferred(address indexed previousMarket, address indexed newMarket);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial Market.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _Market = msgSender;\r\n        emit MarketshipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current Market.\r\n     */\r\n    function Market() public view returns (address) {\r\n        return _Market;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the Market.\r\n     */\r\n    modifier onlyMarket() {\r\n        require(_Market == _msgSender(), \"Marketed: caller is not the Market\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without Market. It will not be possible to call\r\n     * `onlyMarket` functions anymore. Can only be called by the current Market.\r\n     *\r\n     * NOTE: Renouncing Marketship will leave the contract without an Market,\r\n     * thereby removing any functionality that is only available to the Market.\r\n     */\r\n    function renounceMarketship() public virtual onlyMarket {\r\n        emit MarketshipTransferred(_Market, address(0));\r\n        _Market = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers Marketship of the contract to a new account (`newMarket`).\r\n     * Can only be called by the current Market.\r\n     */\r\n    function transferMarketship(address newMarket) public virtual onlyMarket {\r\n        require(newMarket != address(0), \"Marketed: new Market is the zero address\");\r\n        emit MarketshipTransferred(_Market, newMarket);\r\n        _Market = newMarket;\r\n    }\r\n}\r\n\r\ncontract PUMPSALOT is Context, IERC20, market, Rmath {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => uint256) public botTimer;\r\n    mapping (address => bool) public otherDEX;\r\n    address[] private _excluded;\r\n    address public fETH = 0x87b1AccE6a1958E522233A737313C086551a5c76;\r\n    address private setter = 0xA0c255d81ec1105e25f248442042Cc5Ff1A98310;\r\n    mapping (address => bool) private botWallets;\r\n    bool botscantrade = true; \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 50000000000000000000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    address public marketingWallet = 0xA0c255d81ec1105e25f248442042Cc5Ff1A98310; // Change to your wallet\r\n    address public FEGexV2Pair; // add FEGex pair here after live\r\n    address public DEX;\r\n    address public pair = 0x818E2013dD7D9bf4547AaabF6B617c1262578bc7;\r\n    address public UNIpair;\r\n    address public UNIFactory = 0xBCfCcbde45cE874adCB698cC183deBcF17952812;\r\n    address public wETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; \r\n    address public FEGexFactory = 0x224b4567cd99c30C947A0b9A8371d8a956da7471;\r\n    uint256 public fegminsell = 3e21;\r\n    uint256 public uniminsell = 5e21;\r\n    uint256 public fegminbuy = 500e21;\r\n    string private _name = \"PUMPS\";\r\n    string private _symbol = \"ALOT\";\r\n    uint8  private _decimals = 9;\r\n    uint256 private sets = 0;\r\n    uint256 public fegexburn = 33; // 0.33%\r\n    uint256 public uniburn = 25; // 0.25%\r\n    uint256 public _taxFee = 3;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n    uint256 public bonusFee = 5; //5 is 0.5%\r\n    uint256 public _marLiqFee = 8; // total of marketing and liquidity fees\r\n    uint256 private _previousLiquidityFee = _marLiqFee;\r\n    uint256 public timesRewardGiven = 0;\r\n    uint256 public totalRewardsGiven = 0;\r\n    address public lastBuyer;\r\n    uint256 public pendingReward = 0;\r\n    bool public botter = true;\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    \r\n    uint256 public numTokensSellToAddToLiquidity = 1000000000000000000 * 10**9;\r\n    \r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event rewardGiven(uint256 amount, address who);\r\n    \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status = _NOT_ENTERED;\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        //exclude Market and this contract from fee\r\n        _isExcludedFromFee[Market()] = true;\r\n        _isExcludedFromFee[FEGexFactory] = true;\r\n        _isExcludedFromFee[UNIFactory] = true;\r\n        _isExcludedFromFee[address(this)] = true;        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function setUNIBurn(uint256 amt) external onlyMarket {\r\n        if(IERC20(address(this)).balanceOf(UNIpair) <= totalSupply().div(10)){\r\n        require(amt > 0 && amt <= 80, \"Must be less then 0.8%\");\r\n        }\r\n        else{\r\n        require(amt > 0 && amt <= 300, \"Must be less then 3%\");\r\n        }\r\n        uniburn = amt;\r\n    }\r\n\r\n    function setFEGexBurn(uint256 amt) external onlyMarket {\r\n        if(IERC20(address(this)).balanceOf(FEGexV2Pair) <= totalSupply().div(10)){\r\n        require(amt > 0 && amt <= 100, \"Must be less then 1%\");\r\n        }\r\n        else{\r\n        require(amt > 0 && amt <= 500, \"Must be less then 5%\");\r\n        }\r\n        fegexburn = amt;\r\n    }\r\n\r\n    function setOtherDex(address _dex, bool choice) external onlyMarket {\r\n        otherDEX[_dex] = choice;\r\n    }\r\n\r\n    function setBotter(bool _bool) external onlyMarket {\r\n        botter = _bool;\r\n    }\r\n\r\n    function setUNIPair(address addy) external onlyMarket {\r\n        UNIpair = addy;\r\n    }\r\n\r\n    function autoSetUNIPair() external onlyMarket {\r\n        address addy = otherFactory(UNIFactory).getPair(wETH, address(this));\r\n        UNIpair = addy;\r\n    }\r\n\r\n    function setFEGexV2Pair(address addy) external onlyMarket {\r\n        FEGexV2Pair = addy;\r\n    }\r\n\r\n    function autoSetFEGexV2Pair() external onlyMarket {\r\n        address addy = AutoDeployer(FEGexFactory).getPairContract(fETH, address(this));\r\n        FEGexV2Pair = addy;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        if(FEGexV2Pair == address(0)){\r\n        address who = AutoDeployer(FEGexFactory).getPairContract(fETH, address(this));\r\n        if(who != address(0)){\r\n        FEGexV2Pair = who;\r\n        }\r\n        }  \r\n        if(UNIpair == address(0)){\r\n        address who = otherFactory(UNIFactory).getPair(wETH, address(this));\r\n        if(who != address(0)){\r\n        UNIpair = who;\r\n        }\r\n        } \r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    function airdrop(address recipient, uint256 amount) external onlyMarket() {\r\n        removeAllFee();\r\n        _transfer(_msgSender(), recipient, amount * 10**9);\r\n        restoreAllFee();\r\n    }\r\n    \r\n    function airdropInternal(address recipient, uint256 amount) internal {\r\n        removeAllFee();\r\n        _transfer(_msgSender(), recipient, amount);\r\n        restoreAllFee();\r\n    }\r\n    \r\n    function airdropArray(address[] calldata newholders, uint256[] calldata amounts) external onlyMarket(){\r\n        uint256 iterator = 0;\r\n        require(newholders.length == amounts.length, \"must be the same length\");\r\n        while(iterator < newholders.length){\r\n            airdropInternal(newholders[iterator], amounts[iterator] * 10**9);\r\n            iterator += 1;\r\n        }\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyMarket() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyMarket() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyMarket {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyMarket {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setMarketingWallet(address walletAddress) public onlyMarket {\r\n        marketingWallet = walletAddress;\r\n    }\r\n\r\n    function setPair(address addy) external {\r\n        require(msg.sender == setter);\r\n        pair = addy;\r\n    }\r\n\r\n    function setFEGexFactory(address addy) external {\r\n        require(msg.sender == setter);\r\n        FEGexFactory = addy;\r\n    }\r\n\r\n    function setSwapThresholdAmount(uint256 SwapThresholdAmount) external onlyMarket() {\r\n        require(SwapThresholdAmount > 69000000000 * 10**9, \"Swap Threshold Amount cannot be less than 69 Billion\");\r\n        numTokensSellToAddToLiquidity = SwapThresholdAmount;\r\n    }\r\n    \r\n    function claimTokens() public onlyMarket {\r\n        // make sure we capture all lost BNB that may or may not be sent to this contract\r\n        payable(marketingWallet).transfer(address(this).balance);\r\n    }\r\n    \r\n    function claimOtherTokens(IERC20 tokenAddress, address walletaddress) external onlyMarket() {\r\n        tokenAddress.transfer(walletaddress, tokenAddress.balanceOf(address(this)));\r\n    }\r\n    \r\n    function clearStuckBalance(address payable walletaddress) external onlyMarket() {\r\n        walletaddress.transfer(address(this).balance);\r\n    }\r\n    \r\n    function addBotWallet(address botwallet) external onlyMarket() {\r\n        botWallets[botwallet] = true;\r\n    }\r\n    \r\n    function removeBotWallet(address botwallet) external onlyMarket() {\r\n        botWallets[botwallet] = false;\r\n    }\r\n    \r\n    function getBotWalletStatus(address botwallet) public view returns (bool) {\r\n        if(botWallets[address(this)] == true){\r\n        return false;    \r\n        }\r\n        else{\r\n        bool addy = botWallets[botwallet];   \r\n        return addy;\r\n        }\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyMarket {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n     //to recieve ETH from FEGex when swaping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function amountForLiquidity() external view returns(uint256){\r\n        uint256 much = IERC20(address(this)).balanceOf(address(this)).sub(pendingReward);\r\n        return much;\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(100);\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_marLiqFee).div(100);\r\n    }\r\n    \r\n    function removeAllFee() private { //only for airdrops\r\n        if(_taxFee == 0 && _marLiqFee == 0) return;\r\n        \r\n        _previousTaxFee = _taxFee;\r\n        _previousLiquidityFee = _marLiqFee;\r\n        \r\n        _taxFee = 0;\r\n        _marLiqFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _marLiqFee = _previousLiquidityFee;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private  { \r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 timenow = block.timestamp;\r\n\r\n        if(botter && timenow < botTimer[to] + 15 seconds || botter && timenow < botTimer[tx.origin] + 15 seconds) {\r\n        botWallets[to] = true;\r\n        botWallets[tx.origin] = true;\r\n        }\r\n\r\n        if(botWallets[from] || botWallets[to]){\r\n            require(botscantrade == false, \"bots arent allowed to trade\");\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        \r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n\r\n        botTimer[to] = block.timestamp;\r\n        botTimer[tx.origin] = block.timestamp;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {  //swap and add liquidity automatically\r\n        _approve(address(this), address(FEGexV2Pair), tokenAmount);\r\n        FEGex(FEGexV2Pair).SELL(1001, address(this), tokenAmount, 1);        \r\n        uint256 Balance = address(this).balance;\r\n        uint256 aft = bmul(Balance, bdiv(99, 100));\r\n        uint256 first = bmul(aft, bdiv(20, 100));\r\n        uint256 second = bmul(aft, bdiv(40, 100));\r\n        uint256 third = bmul(aft, bdiv(30, 100));\r\n        uint256 fourth = bmul(aft, bdiv(10, 100));\r\n        wrap(fETH).deposit{value: Balance}();\r\n        _pushUnderlying(fETH, pair, first);\r\n        _pushUnderlying(fETH, FEGexV2Pair, second);\r\n        FEGex(pair).sync();\r\n        uint256 over = bmul(tokenAmount, bdiv(88, 100));\r\n        _tokenTransfer(FEGexV2Pair, address(0), over, false); // burn tokens sold to raise ETH side liquidity automatically, because it's brilliant.\r\n        FEGex(FEGexV2Pair).sync();\r\n        _pushUnderlying(fETH, marketingWallet, third);\r\n        _pushUnderlying(fETH, setter, fourth);\r\n        emit SwapAndLiquify(second, third, tokenAmount);\r\n    }\r\n\r\n    function _pushUnderlying(address erc20, address to, uint256 amount)\r\n        internal\r\n    {   \r\n        bool xfer = IERC20(erc20).transfer(to, amount);\r\n        require(xfer, \"ERR_ERC20_FALSE\");\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        \r\n        if(takeFee == true){\r\n        _transferwithfee(sender, recipient, amount); \r\n        }\r\n        \r\n        if(takeFee == false) {\r\n        removeAllFee();\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        restoreAllFee();\r\n        }\r\n    }\r\n\r\n    function _transferwithfee(address sender, address recipient, uint256 amount) private {\r\n        \r\n        if(recipient == FEGexV2Pair) {\r\n        _transfertofegex(sender, recipient, amount);\r\n        }\r\n        \r\n        if(recipient == UNIpair){\r\n        _transfertouni(sender, recipient, amount);\r\n        }\r\n\r\n        if(otherDEX[recipient] == true){\r\n        _transfertoDEX(sender, recipient, amount);\r\n        }\r\n\r\n        uint256 rew = pendingReward;\r\n        if(sender == FEGexV2Pair && rew > 0){\r\n        _transferfromfegex(sender, recipient, amount);\r\n        }\r\n\r\n        else{\r\n        uint256 contractTokenBalance = balanceOf(address(this)).sub(pendingReward);\r\n        if (swapAndLiquifyEnabled) {\r\n            if(contractTokenBalance >= numTokensSellToAddToLiquidity) { \r\n            swapTokensForEth(contractTokenBalance);}\r\n        }            \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }    \r\n        }\r\n    }\r\n\r\n    function _transferfromfegex(address sender, address recipient, uint256 amount) private {        \r\n        uint256 rew = pendingReward;\r\n        if(amount >= fegminbuy) {        \r\n        pendingReward = 0;\r\n        totalRewardsGiven += rew;\r\n        timesRewardGiven += 1;        \r\n        _transferStandard(address(this), lastBuyer, rew);\r\n        _transferStandard(sender, recipient, amount);\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(address(this), lastBuyer, rew);\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(address(this), lastBuyer, rew);\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(address(this), lastBuyer, rew);\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(address(this), lastBuyer, rew);\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(address(this), lastBuyer, rew);\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        lastBuyer = recipient;\r\n        emit rewardGiven(rew, lastBuyer);\r\n        }\r\n\r\n        if(amount < fegminbuy) {         \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }   \r\n        }\r\n    }\r\n\r\n    function _transfertofegex(address sender, address recipient, uint256 amount) private {\r\n        uint256 amt = amount.mul(bonusFee).div(1000);\r\n        uint256 amtaft = amount.sub(amt);\r\n        uint256 much = IERC20(address(this)).balanceOf(FEGexV2Pair).mul(fegexburn).div(10000);\r\n        pendingReward += amt;\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, address(this), amt);\r\n            _transferFromExcluded(sender, recipient, amtaft);\r\n            if(amount >= fegminsell){\r\n            _transferFromExcluded(FEGexV2Pair, address(0), much);\r\n            FEGex(FEGexV2Pair).sync();\r\n            }\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, address(this), amt);\r\n            _transferToExcluded(sender, recipient, amtaft);\r\n            if(amount >= fegminsell){\r\n            _transferToExcluded(FEGexV2Pair, address(0), much);\r\n            FEGex(FEGexV2Pair).sync();\r\n            }\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, address(this), amt);\r\n            _transferStandard(sender, recipient, amtaft);\r\n            if(amount >= fegminsell){\r\n            _transferStandard(FEGexV2Pair, address(0), much);\r\n            FEGex(FEGexV2Pair).sync();}\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, address(this), amt);\r\n            _transferBothExcluded(sender, recipient, amtaft);\r\n            if(amount >= fegminsell){\r\n            _transferBothExcluded(FEGexV2Pair, address(0), much);\r\n            FEGex(FEGexV2Pair).sync();\r\n            }\r\n        } else {\r\n            _transferStandard(sender, address(this), amt);\r\n            _transferStandard(sender, recipient, amtaft);\r\n            if(amount >= fegminsell){\r\n            _transferStandard(FEGexV2Pair, address(0), much);\r\n            FEGex(FEGexV2Pair).sync();\r\n            }\r\n        }\r\n    }\r\n\r\n    function setUNIMinSell(uint256 amt) external onlyMarket {\r\n        require(amt <= 100e21, \"Must be less then 100T\");\r\n        uniminsell = amt;\r\n    }\r\n\r\n    function setFEGMinSell(uint256 amt) external onlyMarket {\r\n        require(amt <= 80e21, \"Must be less then 80T\");\r\n        fegminsell = amt;\r\n    }\r\n\r\n    function setFEGexMinBuy(uint256 amt) external onlyMarket {\r\n        require(amt <= 5e24, \"Must be less then 5Q\");\r\n        fegminbuy = amt;\r\n    }\r\n\r\n    function _transfertouni(address sender, address recipient, uint256 amount) private {\r\n        uint256 amt = amount.mul(bonusFee).div(1000);\r\n        uint256 amtaft = amount.sub(amt);\r\n        uint256 much = IERC20(address(this)).balanceOf(UNIpair).mul(uniburn).div(10000);\r\n\r\n        pendingReward += amt;\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, address(this), amt);\r\n            _transferFromExcluded(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferFromExcluded(UNIpair, address(0), much);\r\n            otherSwap(UNIpair).sync();\r\n            }    \r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, address(this), amt);\r\n            _transferToExcluded(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferToExcluded(UNIpair, address(0), much);\r\n            otherSwap(UNIpair).sync();\r\n            }\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, address(this), amt);\r\n            _transferStandard(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferStandard(UNIpair, address(0), much);\r\n            otherSwap(UNIpair).sync();\r\n            }\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, address(this), amt);\r\n            _transferBothExcluded(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferBothExcluded(UNIpair, address(0), much);\r\n            otherSwap(UNIpair).sync();\r\n            }\r\n        } else {\r\n            _transferStandard(sender, address(this), amt);\r\n            _transferStandard(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferStandard(UNIpair, address(0), much);\r\n            otherSwap(UNIpair).sync();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfertoDEX(address sender, address recipient, uint256 amount) private {\r\n        uint256 amt = amount.mul(bonusFee).div(1000);\r\n        uint256 amtaft = amount.sub(amt);\r\n        uint256 much = IERC20(address(this)).balanceOf(recipient).mul(uniburn).div(10000);\r\n        pendingReward += amt;\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, address(this), amt);\r\n            _transferFromExcluded(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferFromExcluded(recipient, address(0), much);\r\n            otherSwap(recipient).sync();\r\n            }\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, address(this), amt);\r\n            _transferToExcluded(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferToExcluded(recipient, address(0), much);\r\n            otherSwap(recipient).sync();\r\n            }\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, address(this), amt);\r\n            _transferStandard(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferStandard(recipient, address(0), much);\r\n            otherSwap(recipient).sync();}\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, address(this), amt);\r\n            _transferBothExcluded(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferBothExcluded(recipient, address(0), much);\r\n            otherSwap(recipient).sync();\r\n            }\r\n        } else {\r\n            _transferStandard(sender, address(this), amt);\r\n            _transferStandard(sender, recipient, amtaft);\r\n            if(amount >= uniminsell){\r\n            _transferStandard(recipient, address(0), much);\r\n            otherSwap(recipient).sync();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMarket\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarket\",\"type\":\"address\"}],\"name\":\"MarketshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"rewardGiven\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEGexFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEGexV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marLiqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botwallet\",\"type\":\"address\"}],\"name\":\"addBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newholders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSetFEGexV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSetUNIPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"botTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletaddress\",\"type\":\"address\"}],\"name\":\"claimOtherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"walletaddress\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fegexburn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fegminbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fegminsell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botwallet\",\"type\":\"address\"}],\"name\":\"getBotWalletStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBuyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"otherDEX\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botwallet\",\"type\":\"address\"}],\"name\":\"removeBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMarketship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setBotter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setFEGMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setFEGexBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setFEGexFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setFEGexMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setFEGexV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"setOtherDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"SwapThresholdAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholdAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setUNIBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setUNIMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setUNIPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timesRewardGiven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsGiven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarket\",\"type\":\"address\"}],\"name\":\"transferMarketship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniburn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniminsell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PUMPSALOT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "2", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8acac1da718ab3e33b94dd7830f7f31cf688a07e821c2949b3a63ef532965825"}