{"SourceCode": "/**\r\n\r\n\r\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@              @@@@@@@@@@@%       ..      @@@@@@@@@@@@              *@@@@@\r\n    @@@@                    @@%             ........      @@@                    &@@\r\n    @@                                      ..............                         @\r\n    @                                       ...................                    @\r\n    @                                       ........................               @\r\n    @                                       ...........................            @\r\n    @                                       ............................           @\r\n    @@                                      ..............................         @\r\n    @@@@                                    ...............................      @@@\r\n    @@@@@@                                  ................................   @@@@@\r\n    @@@@@                                   .................................   @@@@\r\n    @@@@                                    ..................................   @@@\r\n    @@@                      @@@@           ...........#@@@@...................   @@\r\n    @@                     @@@@@@@@     ....     ....@@@@@@@@@...................  @\r\n    @                    @@@@@@@@@@@ .......        @@@@@@@@@@@%.................  @\r\n    @                   @@@@@@@@@@@@........        @@@@@@@@@@@@@................. @\r\n    @                  @@@@@@@@@@@@.........          @@@@@@@@@@@@...............  @\r\n    @@                @@@@@@@@@@@...........           *@@@@@@@@@@@..............  @\r\n    @@.               @@@@@@@@@  ...........            .(@@@@@@@@@.............  @@\r\n    @@@               @@@@@@@    ...........            ....@@@@@@@............  (@@\r\n    @@@@               @@@       ...........            ......@@@@............   @@@\r\n    @@@@@                        ...........           ......................   @@@@\r\n    @@@@@@                        ....@@@@@@@@@@@@     .....................   @@@@@\r\n    @@@@@@@                         ../@@@@@@@@@@@   ......................   @@@@@@\r\n    @@@@@@@@                           ../@@@@(   ........................   @@@@@@@\r\n    @@@@@@@@@                             ..   ..........................   @@@@@@@@\r\n    @@@@@@@@@@                              ............................   @@@@@@@@@\r\n    @@@@@@@@@@@@                           @@......................     *@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@@                       ..................     @@@@@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@@@@@@@@                 ............      @@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@           .....      *@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\n\r\n   #PANDA\r\n\r\n   #LIQ+#RFI+#SHIB+#DOGE = #PANDA\r\n\r\n   #PANDA features:\r\n   2% fee auto distribute to all holders\r\n   8% fee auto add to the liquidity pool\r\n\r\n\r\n */\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an BNB balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = now + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(now > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract PANDA is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000 * 10**6 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name = \"thepandatoken\";\r\n    string private _symbol = \"PANDA\";\r\n    uint8 private _decimals = 9;\r\n\r\n    uint256 public _taxFee = 2;\r\n    uint256 private _previousTaxFee = _taxFee;\r\n\r\n    uint256 public _liquidityFee = 8;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\nIPancakeRouter02 public immutable pancakeRouter;\r\naddress public immutable pancakePair;\r\n\r\nbool inSwapAndLiquify;\r\nbool public swapAndLiquifyEnabled = true;\r\n\r\nuint256 public _maxTxAmount = 5000000 * 10**6 * 10**9;\r\nuint256 private numTokensSellToAddToLiquidity = 500000 * 10**6 * 10**9;\r\n\r\nevent MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\nevent SwapAndLiquifyEnabledUpdated(bool enabled);\r\nevent SwapAndLiquify(\r\nuint256 tokensSwapped,\r\nuint256 ethReceived,\r\nuint256 tokensIntoLiqudity\r\n);\r\n\r\nmodifier lockTheSwap {\r\ninSwapAndLiquify = true;\r\n_;\r\ninSwapAndLiquify = false;\r\n}\r\n\r\nconstructor () public {\r\n_rOwned[_msgSender()] = _rTotal;\r\n\r\nIPancakeRouter02 _pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n// Create a pancake pair for this new token\r\npancakePair = IPancakeFactory(_pancakeRouter.factory())\r\n.createPair(address(this), _pancakeRouter.WETH());\r\n\r\n// set the rest of the contract variables\r\npancakeRouter = _pancakeRouter;\r\n\r\n//exclude owner and this contract from fee\r\n_isExcludedFromFee[owner()] = true;\r\n_isExcludedFromFee[address(this)] = true;\r\n\r\nemit Transfer(address(0), _msgSender(), _tTotal);\r\n}\r\n\r\nfunction name() public view returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\nfunction symbol() public view returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\nfunction decimals() public view returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\nfunction totalSupply() public view override returns (uint256) {\r\nreturn _tTotal;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nif (_isExcluded[account]) return _tOwned[account];\r\nreturn tokenFromReflection(_rOwned[account]);\r\n}\r\n\r\nfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n_transfer(_msgSender(), recipient, amount);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address owner, address spender) public view override returns (uint256) {\r\nreturn _allowances[owner][spender];\r\n}\r\n\r\nfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n_approve(_msgSender(), spender, amount);\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n_transfer(sender, recipient, amount);\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\nreturn true;\r\n}\r\n\r\nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\nreturn true;\r\n}\r\n\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\nreturn true;\r\n}\r\n\r\nfunction isExcludedFromReward(address account) public view returns (bool) {\r\nreturn _isExcluded[account];\r\n}\r\n\r\nfunction totalFees() public view returns (uint256) {\r\nreturn _tFeeTotal;\r\n}\r\n\r\nfunction deliver(uint256 tAmount) public {\r\naddress sender = _msgSender();\r\nrequire(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n(uint256 rAmount,,,,,) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rTotal = _rTotal.sub(rAmount);\r\n_tFeeTotal = _tFeeTotal.add(tAmount);\r\n}\r\n\r\nfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\nrequire(tAmount <= _tTotal, \"Amount must be less than supply\");\r\nif (!deductTransferFee) {\r\n(uint256 rAmount,,,,,) = _getValues(tAmount);\r\nreturn rAmount;\r\n} else {\r\n(,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\nreturn rTransferAmount;\r\n}\r\n}\r\n\r\nfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\nrequire(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\nuint256 currentRate =  _getRate();\r\nreturn rAmount.div(currentRate);\r\n}\r\n\r\nfunction excludeFromReward(address account) public onlyOwner() {\r\n// require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Pancake router.');\r\nrequire(!_isExcluded[account], \"Account is already excluded\");\r\nif(_rOwned[account] > 0) {\r\n_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n}\r\n_isExcluded[account] = true;\r\n_excluded.push(account);\r\n}\r\n\r\nfunction includeInReward(address account) external onlyOwner() {\r\nrequire(_isExcluded[account], \"Account is already excluded\");\r\nfor (uint256 i = 0; i < _excluded.length; i++) {\r\nif (_excluded[i] == account) {\r\n_excluded[i] = _excluded[_excluded.length - 1];\r\n_tOwned[account] = 0;\r\n_isExcluded[account] = false;\r\n_excluded.pop();\r\nbreak;\r\n}\r\n}\r\n}\r\nfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction excludeFromFee(address account) public onlyOwner {\r\n_isExcludedFromFee[account] = true;\r\n}\r\n\r\nfunction includeInFee(address account) public onlyOwner {\r\n_isExcludedFromFee[account] = false;\r\n}\r\n\r\nfunction setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n_taxFee = taxFee;\r\n}\r\n\r\nfunction setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n_liquidityFee = liquidityFee;\r\n}\r\n\r\nfunction setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n_maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n10**2\r\n);\r\n}\r\n\r\nfunction setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\nswapAndLiquifyEnabled = _enabled;\r\nemit SwapAndLiquifyEnabledUpdated(_enabled);\r\n}\r\n\r\n//to recieve BNB from pancakeRouter when swaping\r\nreceive() external payable {}\r\n\r\nfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n_rTotal = _rTotal.sub(rFee);\r\n_tFeeTotal = _tFeeTotal.add(tFee);\r\n}\r\n\r\nfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n(uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\nreturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n}\r\n\r\nfunction _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\nuint256 tFee = calculateTaxFee(tAmount);\r\nuint256 tLiquidity = calculateLiquidityFee(tAmount);\r\nuint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\nreturn (tTransferAmount, tFee, tLiquidity);\r\n}\r\n\r\nfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\nuint256 rAmount = tAmount.mul(currentRate);\r\nuint256 rFee = tFee.mul(currentRate);\r\nuint256 rLiquidity = tLiquidity.mul(currentRate);\r\nuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\nreturn (rAmount, rTransferAmount, rFee);\r\n}\r\n\r\nfunction _getRate() private view returns(uint256) {\r\n(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\nreturn rSupply.div(tSupply);\r\n}\r\n\r\nfunction _getCurrentSupply() private view returns(uint256, uint256) {\r\nuint256 rSupply = _rTotal;\r\nuint256 tSupply = _tTotal;\r\nfor (uint256 i = 0; i < _excluded.length; i++) {\r\nif (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\nrSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\ntSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n}\r\nif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\nreturn (rSupply, tSupply);\r\n}\r\n\r\nfunction _takeLiquidity(uint256 tLiquidity) private {\r\nuint256 currentRate =  _getRate();\r\nuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n_rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\nif(_isExcluded[address(this)])\r\n_tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n}\r\n\r\nfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\nreturn _amount.mul(_taxFee).div(\r\n10**2\r\n);\r\n}\r\n\r\nfunction calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\nreturn _amount.mul(_liquidityFee).div(\r\n10**2\r\n);\r\n}\r\n\r\nfunction removeAllFee() private {\r\nif(_taxFee == 0 && _liquidityFee == 0) return;\r\n\r\n_previousTaxFee = _taxFee;\r\n_previousLiquidityFee = _liquidityFee;\r\n\r\n_taxFee = 0;\r\n_liquidityFee = 0;\r\n}\r\n\r\nfunction restoreAllFee() private {\r\n_taxFee = _previousTaxFee;\r\n_liquidityFee = _previousLiquidityFee;\r\n}\r\n\r\nfunction isExcludedFromFee(address account) public view returns(bool) {\r\nreturn _isExcludedFromFee[account];\r\n}\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) private {\r\nrequire(owner != address(0), \"BEP20: approve from the zero address\");\r\nrequire(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n_allowances[owner][spender] = amount;\r\nemit Approval(owner, spender, amount);\r\n}\r\n\r\nfunction _transfer(\r\naddress from,\r\naddress to,\r\nuint256 amount\r\n) private {\r\nrequire(from != address(0), \"BEP20: transfer from the zero address\");\r\nrequire(to != address(0), \"BEP20: transfer to the zero address\");\r\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\r\nif(from != owner() && to != owner())\r\nrequire(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n// is the token balance of this contract address over the min number of\r\n// tokens that we need to initiate a swap + liquidity lock?\r\n// also, don't get caught in a circular liquidity event.\r\n// also, don't swap & liquify if sender is pancake pair.\r\nuint256 contractTokenBalance = balanceOf(address(this));\r\n\r\nif(contractTokenBalance >= _maxTxAmount)\r\n{\r\ncontractTokenBalance = _maxTxAmount;\r\n}\r\n\r\nbool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\nif (\r\noverMinTokenBalance &&\r\n!inSwapAndLiquify &&\r\nfrom != pancakePair &&\r\nswapAndLiquifyEnabled\r\n) {\r\ncontractTokenBalance = numTokensSellToAddToLiquidity;\r\n//add liquidity\r\nswapAndLiquify(contractTokenBalance);\r\n}\r\n\r\n//indicates if fee should be deducted from transfer\r\nbool takeFee = true;\r\n\r\n//if any account belongs to _isExcludedFromFee account then remove the fee\r\nif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\ntakeFee = false;\r\n}\r\n\r\n//transfer amount, it will take tax, burn, liquidity fee\r\n_tokenTransfer(from,to,amount,takeFee);\r\n}\r\n\r\nfunction swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n// split the contract balance into halves\r\nuint256 half = contractTokenBalance.div(2);\r\nuint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n// capture the contract's current BNB balance.\r\n// this is so that we can capture exactly the amount of BNB that the\r\n// swap creates, and not make the liquidity event include any BNB that\r\n// has been manually sent to the contract\r\nuint256 initialBalance = address(this).balance;\r\n\r\n// swap tokens for BNB\r\nswapTokensForEth(half); // <- this breaks the BNB -> HATE swap when swap+liquify is triggered\r\n\r\n// how much BNB did we just swap into?\r\nuint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n// add liquidity to pancake\r\naddLiquidity(otherHalf, newBalance);\r\n\r\nemit SwapAndLiquify(half, newBalance, otherHalf);\r\n}\r\n\r\nfunction swapTokensForEth(uint256 tokenAmount) private {\r\n// generate the pancake pair path of token -> weth\r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = pancakeRouter.WETH();\r\n\r\n_approve(address(this), address(pancakeRouter), tokenAmount);\r\n\r\n// make the swap\r\npancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\ntokenAmount,\r\n0, // accept any amount of BNB\r\npath,\r\naddress(this),\r\nblock.timestamp\r\n);\r\n}\r\n\r\nfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n// approve token transfer to cover all possible scenarios\r\n_approve(address(this), address(pancakeRouter), tokenAmount);\r\n\r\n// add the liquidity\r\npancakeRouter.addLiquidityETH{value: ethAmount}(\r\naddress(this),\r\ntokenAmount,\r\n0, // slippage is unavoidable\r\n0, // slippage is unavoidable\r\nowner(),\r\nblock.timestamp\r\n);\r\n}\r\n\r\n//this method is responsible for taking all fee, if takeFee is true\r\nfunction _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\nif(!takeFee)\r\nremoveAllFee();\r\n\r\nif (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n_transferFromExcluded(sender, recipient, amount);\r\n} else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n_transferToExcluded(sender, recipient, amount);\r\n} else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n_transferStandard(sender, recipient, amount);\r\n} else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n_transferBothExcluded(sender, recipient, amount);\r\n} else {\r\n_transferStandard(sender, recipient, amount);\r\n}\r\n\r\nif(!takeFee)\r\nrestoreAllFee();\r\n}\r\n\r\nfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n\r\nfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n_takeLiquidity(tLiquidity);\r\n_reflectFee(rFee, tFee);\r\nemit Transfer(sender, recipient, tTransferAmount);\r\n}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PANDA", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1c16648cd384cd8e0be63f935d84cea459d51793f0ee57228764cab6b207dd9e"}