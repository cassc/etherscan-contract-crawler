{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/DDSCADOGS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// DYNAMIC DECENTRALIZED SUPPLY CONTROL ALGORITHM\\ncontract DDSCADOGS is Ownable {\\n\\n    bool public isInitialized;\\n\\n    IERC20 public token;\\n\\n    uint256 public tokenPerBlock;\\n    uint256 public maxEmissionRate;\\n    uint256 public emissionStartBlock;\\n    uint256 public emissionEndBlock = type(uint256).max;\\n    address public masterchef;\\n\\n    // Dynamic emissions\\n    uint256 public topPriceInCents    = 800;  // 8$\\n    uint256 public bottomPriceInCents = 100;  // 1$\\n\\n    enum EmissionRate {SLOW, MEDIUM, FAST, FASTEST}\\n    EmissionRate public ActiveEmissionIndex = EmissionRate.MEDIUM;\\n\\n    event UpdateDDSCAPriceRange(uint256 topPrice, uint256 bottomPrice);\\n    event updatedDDSCAMaxEmissionRate(uint256 maxEmissionRate);\\n    event SetFarmStartBlock(uint256 startBlock);\\n    event SetFarmEndBlock(uint256 endBlock);\\n\\n    constructor(IERC20 _tokenAddress, uint256 _tokenPerBlock, uint256 _maxTokenPerBlock, uint256 _startBlock) {\\n        token = _tokenAddress;\\n        tokenPerBlock = _tokenPerBlock;\\n        maxEmissionRate = _maxTokenPerBlock;\\n        emissionStartBlock = _startBlock;\\n        isInitialized = true;\\n    }\\n\\n    // Called externally by bot\\n    function checkIfUpdateIsNeeded(uint256 priceInCents) public view returns(bool, EmissionRate) {\\n\\n        EmissionRate _emissionRate;\\n\\n        if (!isInitialized){\\n            return(false, _emissionRate);\\n        }\\n\\n        bool isOverATH = priceInCents > topPriceInCents;\\n        // if price is over ATH, set to fastest\\n        if (isOverATH){\\n            _emissionRate = EmissionRate.FASTEST;\\n        } else {\\n            _emissionRate = getEmissionStage(priceInCents);\\n        }\\n\\n        // No changes, no need to update\\n        if (_emissionRate == ActiveEmissionIndex){\\n            return(false, _emissionRate);\\n        }\\n\\n        // Means its a downward movement, and it changed a stage\\n        if (_emissionRate < ActiveEmissionIndex){\\n            return(true, _emissionRate);\\n        }\\n\\n        // Check if its a upward movement\\n        if (_emissionRate > ActiveEmissionIndex){\\n\\n            uint256 athExtra = 0;\\n            if (isOverATH){\\n                athExtra = 1;\\n            }\\n\\n            // Check if it moved up by two stages\\n            if ((uint256(_emissionRate) + athExtra) - uint256(ActiveEmissionIndex) >= 2){\\n                // price has moved 2 ranges from current, so update\\n                _emissionRate = EmissionRate(uint256(_emissionRate) + athExtra - 1 );\\n                return(true, _emissionRate);\\n            }\\n        }\\n        return(false, _emissionRate);\\n\\n    }\\n\\n    function updateEmissions(EmissionRate _newEmission) public {\\n        require(msg.sender ==  masterchef); \\n        ActiveEmissionIndex = _newEmission;\\n        tokenPerBlock = (maxEmissionRate / 4) * (uint256(_newEmission) + 1);\\n    }\\n\\n    function getEmissionStage(uint256 currentPriceCents) public view returns (EmissionRate){\\n\\n        if (currentPriceCents > topPriceInCents){\\n            return EmissionRate.FASTEST;\\n        }\\n\\n        // Prevent function from underflowing when subtracting currentPriceCents - bottomPriceInCents\\n        if (currentPriceCents < bottomPriceInCents){\\n            currentPriceCents = bottomPriceInCents;\\n        }\\n        uint256 percentageChange = ((currentPriceCents - bottomPriceInCents ) * 1000) / (topPriceInCents - bottomPriceInCents);\\n        percentageChange = 1000 - percentageChange;\\n\\n        if (percentageChange <= 250){\\n            return EmissionRate.FASTEST;\\n        }\\n        if (percentageChange <= 500 && percentageChange > 250){\\n            return EmissionRate.FAST;\\n        }\\n        if (percentageChange <= 750 && percentageChange > 500){\\n            return EmissionRate.MEDIUM;\\n        }\\n\\n        return EmissionRate.SLOW;\\n    }\\n\\n    function updateDDSCAPriceRange(uint256 _topPrice, uint256 _bottomPrice) external onlyOwner {\\n        require(_topPrice > _bottomPrice, \\\"top < bottom price\\\");\\n        topPriceInCents = _topPrice;\\n        bottomPriceInCents = _bottomPrice;\\n        emit UpdateDDSCAPriceRange(topPriceInCents, bottomPriceInCents);\\n    }\\n\\n    function updateDDSCAMaxEmissionRate(uint256 _maxEmissionRate) external onlyOwner {\\n        require(_maxEmissionRate > 0, \\\"_maxEmissionRate !> 0\\\");\\n        require(_maxEmissionRate <= 10 ether, \\\"_maxEmissionRate !\\\");\\n        maxEmissionRate = _maxEmissionRate;\\n        emit updatedDDSCAMaxEmissionRate(_maxEmissionRate);\\n    }\\n\\n    function _setFarmStartBlock(uint256 _newStartBlock) external {\\n        require(msg.sender ==  masterchef); \\n        require(_newStartBlock > block.number, \\\"must be in the future\\\");\\n        require(block.number < emissionStartBlock, \\\"farm has already started\\\");\\n        emissionStartBlock = _newStartBlock;\\n        emit SetFarmStartBlock(_newStartBlock);\\n    }\\n\\n    function setFarmEndBlock(uint256 _newEndBlock) external onlyOwner {\\n        require(_newEndBlock > block.number, \\\"must be in the future\\\");\\n        emissionEndBlock = _newEndBlock;\\n        emit SetFarmEndBlock(_newEndBlock);\\n    }\\n    \\n    function updateMcAddress(address _mcAddress) external onlyOwner {\\n        masterchef = _mcAddress;\\n    }\\n}\"\r\n    },\r\n    \"contracts/DDSCAPIGS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// DYNAMIC DECENTRALIZED SUPPLY CONTROL ALGORITHM\\ncontract DDSCAPIGS is Ownable {\\n\\n    bool public isInitialized;\\n\\n    IERC20 public token;\\n\\n    uint256 public tokenPerBlock;\\n    uint256 public maxEmissionRate;\\n    uint256 public emissionStartBlock;\\n    uint256 public emissionEndBlock = type(uint256).max;\\n    address public masterchef;\\n\\n    // Dynamic emissions\\n    uint256 public topPriceInCents    = 800;  // 8$\\n    uint256 public bottomPriceInCents = 100;  // 1$\\n\\n    enum EmissionRate {SLOW, MEDIUM, FAST, FASTEST}\\n    EmissionRate public ActiveEmissionIndex = EmissionRate.MEDIUM;\\n\\n    event UpdateDDSCAPriceRange(uint256 topPrice, uint256 bottomPrice);\\n    event updatedDDSCAMaxEmissionRate(uint256 maxEmissionRate);\\n    event SetFarmStartBlock(uint256 startBlock);\\n    event SetFarmEndBlock(uint256 endBlock);\\n\\n    constructor(IERC20 _tokenAddress, uint256 _tokenPerBlock, uint256 _maxTokenPerBlock, uint256 _startBlock) {\\n        token = _tokenAddress;\\n        tokenPerBlock = _tokenPerBlock;\\n        maxEmissionRate = _maxTokenPerBlock;\\n        emissionStartBlock = _startBlock;\\n        isInitialized = true;\\n    }\\n\\n    // Called externally by bot\\n    function checkIfUpdateIsNeeded(uint256 priceInCents) public view returns(bool, EmissionRate) {\\n\\n        EmissionRate _emissionRate;\\n\\n        if (!isInitialized){\\n            return(false, _emissionRate);\\n        }\\n\\n        bool isOverATH = priceInCents > topPriceInCents;\\n        // if price is over ATH, set to fastest\\n        if (isOverATH){\\n            _emissionRate = EmissionRate.FASTEST;\\n        } else {\\n            _emissionRate = getEmissionStage(priceInCents);\\n        }\\n\\n        // No changes, no need to update\\n        if (_emissionRate == ActiveEmissionIndex){\\n            return(false, _emissionRate);\\n        }\\n\\n        // Means its a downward movement, and it changed a stage\\n        if (_emissionRate < ActiveEmissionIndex){\\n            return(true, _emissionRate);\\n        }\\n\\n        // Check if its a upward movement\\n        if (_emissionRate > ActiveEmissionIndex){\\n\\n            uint256 athExtra = 0;\\n            if (isOverATH){\\n                athExtra = 1;\\n            }\\n\\n            // Check if it moved up by two stages\\n            if ((uint256(_emissionRate) + athExtra) - uint256(ActiveEmissionIndex) >= 2){\\n                // price has moved 2 ranges from current, so update\\n                _emissionRate = EmissionRate(uint256(_emissionRate) + athExtra - 1 );\\n                return(true, _emissionRate);\\n            }\\n        }\\n        return(false, _emissionRate);\\n\\n    }\\n\\n    function updateEmissions(EmissionRate _newEmission) public {\\n        require(msg.sender ==  masterchef); \\n        ActiveEmissionIndex = _newEmission;\\n        tokenPerBlock = (maxEmissionRate / 4) * (uint256(_newEmission) + 1);\\n    }\\n\\n    function getEmissionStage(uint256 currentPriceCents) public view returns (EmissionRate){\\n\\n        if (currentPriceCents > topPriceInCents){\\n            return EmissionRate.FASTEST;\\n        }\\n\\n        // Prevent function from underflowing when subtracting currentPriceCents - bottomPriceInCents\\n        if (currentPriceCents < bottomPriceInCents){\\n            currentPriceCents = bottomPriceInCents;\\n        }\\n        uint256 percentageChange = ((currentPriceCents - bottomPriceInCents ) * 1000) / (topPriceInCents - bottomPriceInCents);\\n        percentageChange = 1000 - percentageChange;\\n\\n        if (percentageChange <= 250){\\n            return EmissionRate.FASTEST;\\n        }\\n        if (percentageChange <= 500 && percentageChange > 250){\\n            return EmissionRate.FAST;\\n        }\\n        if (percentageChange <= 750 && percentageChange > 500){\\n            return EmissionRate.MEDIUM;\\n        }\\n\\n        return EmissionRate.SLOW;\\n    }\\n\\n    function updateDDSCAPriceRange(uint256 _topPrice, uint256 _bottomPrice) external onlyOwner {\\n        require(_topPrice > _bottomPrice, \\\"top < bottom price\\\");\\n        topPriceInCents = _topPrice;\\n        bottomPriceInCents = _bottomPrice;\\n        emit UpdateDDSCAPriceRange(topPriceInCents, bottomPriceInCents);\\n    }\\n\\n    function updateDDSCAMaxEmissionRate(uint256 _maxEmissionRate) external onlyOwner {\\n        require(_maxEmissionRate > 0, \\\"_maxEmissionRate !> 0\\\");\\n        require(_maxEmissionRate <= 10 ether, \\\"_maxEmissionRate !\\\");\\n        maxEmissionRate = _maxEmissionRate;\\n        emit updatedDDSCAMaxEmissionRate(_maxEmissionRate);\\n    }\\n\\n    function _setFarmStartBlock(uint256 _newStartBlock) external {\\n        require(msg.sender ==  masterchef); \\n        require(_newStartBlock > block.number, \\\"must be in the future\\\");\\n        require(block.number < emissionStartBlock, \\\"farm has already started\\\");\\n        emissionStartBlock = _newStartBlock;\\n        emit SetFarmStartBlock(_newStartBlock);\\n    }\\n\\n    function setFarmEndBlock(uint256 _newEndBlock) external onlyOwner {\\n        require(_newEndBlock > block.number, \\\"must be in the future\\\");\\n        emissionEndBlock = _newEndBlock;\\n        emit SetFarmEndBlock(_newEndBlock);\\n    }\\n    \\n    function updateMcAddress(address _mcAddress) external onlyOwner {\\n        masterchef = _mcAddress;\\n    }\\n}\"\r\n    },\r\n    \"contracts/DevFeeManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract DevFeeManager is Ownable {\\r\\n    \\r\\n    struct TokenInfo {\\r\\n        IERC20 lpToken;\\r\\n        uint256 oldBalance;\\r\\n        uint256 runningTotal;\\r\\n    }\\r\\n    \\r\\n    TokenInfo[] public tokenInfo;\\r\\n    address[] public users;\\r\\n    address[] public usersTemp;\\r\\n    uint256 stageBlock;\\r\\n    mapping(address => uint256) allocation; //number between 0 and 10000 (0.00% and 100.00%)\\r\\n    mapping(address => uint256) allocationTemp; //number between 0 and 10000 (0.00% and 100.00%)\\r\\n    mapping(address => bool) addedTokens;\\r\\n    mapping(uint256 => mapping(address => uint256)) tokensClaimed;\\r\\n\\r\\n    address multiSigOne;\\r\\n    address multiSigTwo;\\r\\n    mapping(address => bool) signed;\\r\\n\\r\\n    constructor(address[] memory _address, uint256[] memory _allocations, address _multiSigOne, address _multiSigTwo){\\r\\n        require(verifyAllocations(_address,_allocations));\\r\\n        for(uint i = 0; i <_allocations.length; i++){\\r\\n            allocation[_address[i]] = _allocations[i];\\r\\n            users.push(_address[i]);\\r\\n        }\\r\\n        multiSigOne = _multiSigOne;\\r\\n        multiSigTwo = _multiSigTwo;\\r\\n    }\\r\\n\\r\\n    function verifyAllocations(address[] memory _address, uint256[] memory _allocations) public pure returns(bool) {\\r\\n        if (_address.length != _allocations.length) {\\r\\n            return false;\\r\\n        }\\r\\n        uint256 sum = 0;\\r\\n        for(uint i = 0; i <_allocations.length; i++){\\r\\n            sum += _allocations[i];\\r\\n        }\\r\\n        return sum == 10000;\\r\\n    }\\r\\n\\r\\n    function Sign() public {\\r\\n        require (msg.sender == multiSigOne || msg.sender == multiSigTwo);\\r\\n        require (!signed[msg.sender]);\\r\\n        require(block.number - stageBlock > 50);\\r\\n        signed[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function Unsign() public {\\r\\n        require (msg.sender == multiSigOne || msg.sender == multiSigTwo);\\r\\n        require (signed[msg.sender]);\\r\\n        signed[msg.sender] = false;\\r\\n    }\\r\\n\\r\\n    function updateEarned() public {\\r\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\r\\n            uint256 tokenBalance = tokenInfo[i].lpToken.balanceOf(address(this));\\r\\n            uint256 tokenEarned = tokenBalance - tokenInfo[i].oldBalance;\\r\\n            tokenInfo[i].oldBalance = tokenBalance;\\r\\n            tokenInfo[i].runningTotal += tokenEarned;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimForUser(address user) private {\\r\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\r\\n            uint256 allocatedTokens = (allocation[user]*tokenInfo[i].runningTotal)/10000 - tokensClaimed[i][user];\\r\\n            tokenInfo[i].lpToken.transfer(user, allocatedTokens);\\r\\n            tokensClaimed[i][user] += allocatedTokens;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function widthdraw() public {\\r\\n        updateEarned();\\r\\n        claimForUser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function widthdrawAll() public {\\r\\n        updateEarned();\\r\\n        for (uint256 j = 0; j < users.length; j++) {\\r\\n            claimForUser(users[j]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stageUserAllocationChanges(address[] memory _address, uint256[] memory _allocations) public onlyOwner {\\r\\n        require(verifyAllocations(_address,_allocations));\\r\\n        usersTemp =  _address;\\r\\n        for(uint i = 0; i <_allocations.length; i++){\\r\\n            allocationTemp[_address[i]] = _allocations[i];\\r\\n        }\\r\\n        signed[multiSigOne] = false;\\r\\n        signed[multiSigTwo] = false;\\r\\n        stageBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function setUserAllocationChanges() public{\\r\\n        require (signed[multiSigOne] && signed[multiSigTwo]);\\r\\n        users = usersTemp;\\r\\n        for(uint i = 0; i < usersTemp.length; i++){\\r\\n            allocation[users[i]] = allocationTemp[users[i]];\\r\\n        }\\r\\n        signed[multiSigOne] = false;\\r\\n        signed[multiSigTwo] = false;\\r\\n    }\\r\\n\\r\\n    function addTokens(address[] memory _address) public onlyOwner {\\r\\n        for(uint i = 0; i <_address.length; i++){\\r\\n            require(!addedTokens[_address[i]],\\\"cant add dupe Token\\\");\\r\\n            tokenInfo.push(TokenInfo({lpToken:IERC20(_address[i]), runningTotal: IERC20(_address[i]).balanceOf(address(this)), oldBalance: 0}));\\r\\n            addedTokens[_address[i]] = true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/DevFeeSellerManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ninterface IToolbox {\\r\\n\\r\\n    function getTokenBUSDValue(uint256 tokenBalance, address token, bool isLPToken) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\\r\\ninterface DevFeeM {\\r\\n\\r\\n  function tokenInfo ( uint256 ) external view returns ( address lpToken, uint256 oldBalance, uint256 runningTotal );\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\ncontract DevFeeSellerManager is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IUniswapV2Factory public constant PancakeFactory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\r\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    IToolbox public Toolbox = IToolbox(0x78F316775ace6CBF33F14b52903900fb9Be02fb4);\\r\\n\\r\\n    uint256 public busdSwapThreshold = 10 ether;\\r\\n\\r\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\r\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    address public dontSellAddress;\\r\\n    DevFeeM public devFeeM = DevFeeM(0xFe44479A11Cf491DA91BE1f3d7b2727Dd2df7424);\\r\\n\\r\\n    mapping (address => bool) public viaWBNBTokens;\\r\\n    mapping (address => bool) public dontSellTokens;\\r\\n    mapping (address => bool) public isLpToken;\\r\\n\\r\\n    constructor(){\\r\\n\\r\\n        _approveTokenIfNeeded(busdCurrencyAddress, address(PancakeRouter));\\r\\n        _setRouteViaBNBToken(0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD, true); // LINK\\r\\n        _setRouteViaBNBToken(0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f, true); // BELT\\r\\n        _setRouteViaBNBToken(0x2170Ed0880ac9A755fd29B2688956BD959F933F8, true); // ETH\\r\\n        _setRouteViaBNBToken(0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402, true); // DOT\\r\\n        isLpToken[0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16] = true;\\r\\n        isLpToken[0x7EFaEf62fDdCCa950418312c6C91Aef321375A00] = true;\\r\\n        isLpToken[0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1] = true;\\r\\n        isLpToken[0x2E28b9B74D6d99D4697e913b82B41ef1CAC51c6C] = true;\\r\\n        isLpToken[0x66FDB2eCCfB58cF098eaa419e5EfDe841368e489] = true;\\r\\n        isLpToken[0xD171B26E4484402de70e3Ea256bE5A2630d7e88D] = true;\\r\\n        isLpToken[0x74E4716E431f45807DCF19f284c7aA99F18a4fbc] = true;\\r\\n        isLpToken[0x61EB789d75A95CAa3fF50ed7E47b96c132fEc082] = true;\\r\\n        isLpToken[0xEa26B78255Df2bBC31C1eBf60010D78670185bD0] = true;\\r\\n        isLpToken[0xF45cd219aEF8618A92BAa7aD848364a158a24F33] = true;\\r\\n        isLpToken[0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE] = true;\\r\\n        isLpToken[0x804678fa97d91B974ec2af3c843270886528a9E6] = true;\\r\\n        isLpToken[0xA39Af17CE4a8eb807E076805Da1e2B8EA7D0755b] = true;\\r\\n        isLpToken[0x0eD7e52944161450477ee417DE9Cd3a859b14fD0] = true;\\r\\n        isLpToken[0xDd5bAd8f8b360d76d12FdA230F8BAF42fe0022CF] = true;\\r\\n        isLpToken[0x824eb9faDFb377394430d2744fa7C42916DE3eCe] = true;\\r\\n        dontSellTokens[0xa0feB3c81A36E885B6608DF7f0ff69dB97491b58] = true;\\r\\n    }\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n    function swapAll(uint256 len) external {\\r\\n        dontSellAddress =  msg.sender;\\r\\n        for(uint256 i = 0; i < len ; i++){\\r\\n            (address lpToken, uint256 oldBalance, uint256 runningTotal) = devFeeM.tokenInfo(i);\\r\\n            IERC20(lpToken).transferFrom(msg.sender, address(this), IERC20(lpToken).balanceOf(msg.sender));\\r\\n            swapDepositFeeForBUSD(lpToken,isLpToken[lpToken]);\\r\\n        }\\r\\n        _distributeDepositFeeBusd(msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n    function swapDepositFeeForBUSD(address token, bool isLPToken) internal {\\r\\n        uint256 totalTokenBalance;\\r\\n        if(dontSellTokens[token]){\\r\\n            totalTokenBalance = IERC20(token).balanceOf(address(this));\\r\\n            IERC20(token).transfer(dontSellAddress, totalTokenBalance);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        totalTokenBalance = IERC20(token).balanceOf(address(this));\\r\\n\\r\\n        if (totalTokenBalance == 0 || token == busdCurrencyAddress){\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 busdValue = Toolbox.getTokenBUSDValue(totalTokenBalance, token, isLPToken);\\r\\n\\r\\n        // only swap if a certain busd value\\r\\n        if (busdValue < busdSwapThreshold)\\r\\n            return;\\r\\n\\r\\n        swapDepositFeeForTokensInternal(token, isLPToken);\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev un-enchant the lp token into its original components.\\r\\n     */\\r\\n    function unpairLPToken(address token, uint256 amount) internal returns(address token0, address token1, uint256 amountA, uint256 amountB){\\r\\n        _approveTokenIfNeeded(token, address(PancakeRouter));\\r\\n\\r\\n        IUniswapV2Pair lpToken = IUniswapV2Pair(token);\\r\\n        address token0 = lpToken.token0();\\r\\n        address token1 = lpToken.token1();\\r\\n\\r\\n        // make the swap\\r\\n        (uint256 amount0, uint256 amount1) = PancakeRouter.removeLiquidity(\\r\\n            address(token0),\\r\\n            address(token1),\\r\\n            amount,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        return (token0, token1, amount0, amount1);\\r\\n\\r\\n    }\\r\\n\\r\\n    function swapDepositFeeForTokensInternal(address token, bool isLPToken) internal{\\r\\n\\r\\n        uint256 totalTokenBalance = IERC20(token).balanceOf(address(this));\\r\\n\\r\\n        if (isLPToken) {\\r\\n            address token0;\\r\\n            address token1;\\r\\n            uint256 amount0;\\r\\n            uint256 amount1;\\r\\n\\r\\n            (token0, token1, amount0, amount1) = unpairLPToken(token, totalTokenBalance);\\r\\n            // now I have 2 tokens...\\r\\n            convertTokenToBUSD(token0, amount0);\\r\\n            convertTokenToBUSD(token1, amount1);\\r\\n        } else {\\r\\n            convertTokenToBUSD(token, totalTokenBalance);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function convertTokenToBUSD(address token, uint256 amount) internal {\\r\\n\\r\\n        if (token == busdCurrencyAddress){\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _approveTokenIfNeeded(token, address(PancakeRouter));\\r\\n\\r\\n        address[] memory path;\\r\\n        if (shouldRouteViaBNB(token)){\\r\\n            path = new address[](3);\\r\\n            path[0] = token;\\r\\n            path[1] = wbnbCurrencyAddress;\\r\\n            path[2] = busdCurrencyAddress;\\r\\n        } else {\\r\\n            path = new address[](2);\\r\\n            path[0] = token;\\r\\n            path[1] = busdCurrencyAddress;\\r\\n        }\\r\\n        uint256[] memory amountOut = PancakeRouter.getAmountsOut(amount, path);\\r\\n        // make the swap\\r\\n        uint256 slipAmount =  amountOut[amountOut.length - 1] - (amountOut[amountOut.length - 1]/20);\\r\\n        PancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            slipAmount, // accept any amount of tokens\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function _distributeDepositFeeBusd(address _distrib) internal {\\r\\n\\r\\n        uint256 totalBusdBalance = IERC20(busdCurrencyAddress).balanceOf(address(this));\\r\\n\\r\\n        IERC20(busdCurrencyAddress).transfer(_distrib, totalBusdBalance);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _createRoute(address _from, address _to) internal pure returns(address[] memory){\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _from;\\r\\n        path[1] = _to;\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    function _createRoute3(address _from, address _mid, address _to) internal pure returns(address[] memory){\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = _from;\\r\\n        path[1] = _mid;\\r\\n        path[2] = _to;\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    function _approveTokenIfNeeded(address token, address _contract) private {\\r\\n        if (IERC20(token).allowance(address(this), address(_contract)) == 0) {\\r\\n            IERC20(token).safeApprove(address(_contract), type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setRouteViaBNBToken(address _token, bool _viaWbnb) external onlyOwner {\\r\\n        _setRouteViaBNBToken(_token, _viaWbnb);\\r\\n    }\\r\\n\\r\\n    function _setRouteViaBNBToken(address _token, bool _viaWbnb) private {\\r\\n        viaWBNBTokens[_token] = _viaWbnb;\\r\\n    }\\r\\n\\r\\n    function setdontSellTokens(address _token, bool _bool) external onlyOwner {\\r\\n        dontSellTokens[_token] = _bool;\\r\\n    }\\r\\n    \\r\\n    function shouldRouteViaBNB(address _token) public view returns (bool){\\r\\n        return viaWBNBTokens[_token];\\r\\n    }\\r\\n\\r\\n    function updatedontSellAddress(address _address) external onlyOwner {\\r\\n        dontSellAddress = _address;\\r\\n    }\\r\\n\\r\\n    function setisLPTokens(address _token, bool _bool) external onlyOwner {\\r\\n        isLpToken[_token] = _bool;\\r\\n    }\\r\\n\\r\\n    function updateToolbox(IToolbox _toolbox) external onlyOwner {\\r\\n        Toolbox = _toolbox;\\r\\n    }\\r\\n\\r\\n\\r\\n    function inCaseTokensGetStuck(address _token, uint256 _amount, address _to) external onlyOwner {\\r\\n        IERC20(_token).safeTransfer(_to, _amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/DogCrediting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract DogCrediting is Ownable, ReentrancyGuard {\\n\\n    uint256 public payoutRate = 2;\\n    uint256 public APY = 35;\\n    uint256 public rewardRatio;\\n\\n    IERC20 public RewardToken = IERC20(0xa0feB3c81A36E885B6608DF7f0ff69dB97491b58); //todo set to dog\\n    IERC20 public StakedToken = IERC20(0xa0feB3c81A36E885B6608DF7f0ff69dB97491b58); //set to busd/lp token\\n\\n    uint256 public TESTING_STAKED_COUNT = 0;\\n    uint256 public TESTING_REWARD_COUNT = 0;\\n    uint256 public TESTING_DOGS_PAYED_ON_CREDIT = 0;\\n    bool public isCreditingActive = false;\\n\\n    uint256 public rewardStartTime;\\n\\n    // Info of each user.\\n    struct UserCreditingInfo {\\n        uint256 amount;\\n    }\\n\\n    struct UserStakedInfo {\\n        uint256 claimed;\\n        uint256 staked;\\n        uint256 deposit_time;\\n        uint256 last_claim_time;\\n        uint256 last_reward_claim_time;\\n        uint256 reward_time_counter;\\n    }\\n\\n    mapping(address => UserCreditingInfo) public userCreditInfo;\\n    mapping(address => UserStakedInfo) public userStakeInfo;\\n\\n    constructor(uint256 _rewardRatio, uint256 _rewardStartTime){\\n        rewardRatio = _rewardRatio;\\n        require(_rewardStartTime > block.timestamp, 'must be in future');\\n        rewardStartTime = _rewardStartTime;\\n    }\\n\\n    function creditLPToStaking(uint256 _percentageVested) external nonReentrant {\\n        require(isCreditingActive, 'not active yet');\\n        require(_percentageVested <= 100, 'invalid percentage');\\n\\n        UserCreditingInfo storage user = userCreditInfo[msg.sender];\\n        require(user.amount > 0, 'nothing to credit');\\n\\n        uint256 amountToVest = user.amount * _percentageVested / 100;\\n        userStakeInfo[msg.sender].staked = amountToVest;\\n\\n        if(block.timestamp <= rewardStartTime){\\n            userStakeInfo[msg.sender].deposit_time = rewardStartTime;\\n            userStakeInfo[msg.sender].last_claim_time = rewardStartTime;\\n            userStakeInfo[msg.sender].last_reward_claim_time = rewardStartTime;\\n        }else{\\n            userStakeInfo[msg.sender].deposit_time = block.timestamp;\\n            userStakeInfo[msg.sender].last_claim_time = block.timestamp;\\n            userStakeInfo[msg.sender].last_reward_claim_time = block.timestamp;\\n        }\\n\\n        if (user.amount - amountToVest > 0){\\n            payoutRewards(user.amount - amountToVest);\\n        }\\n\\n        user.amount = 0;\\n    }\\n\\n    function creditLpToStakingUser(address _user, uint256 _staked, uint256 rewardTime) external onlyOwner nonReentrant {\\n        require(isCreditingActive, 'not active yet');\\n        userStakeInfo[_user].staked = _staked;\\n\\n        if(block.timestamp <= rewardStartTime){\\n            userStakeInfo[_user].deposit_time = rewardStartTime;\\n            userStakeInfo[_user].last_claim_time = rewardStartTime;\\n            userStakeInfo[_user].last_reward_claim_time = rewardStartTime;\\n        }else{\\n            userStakeInfo[_user].deposit_time = rewardTime;\\n            userStakeInfo[_user].last_claim_time = rewardTime;\\n            userStakeInfo[_user].last_reward_claim_time = rewardTime;\\n        }\\n\\n    }\\n\\n    function payoutRewards(uint256 _amountStakeToken) internal {\\n        RewardToken.transfer(msg.sender, ((_amountStakeToken * rewardRatio * 2) / 1e4));\\n    }\\n\\n    function claim() external nonReentrant {\\n        require(isCreditingActive, 'not active yet');\\n        require(block.timestamp > rewardStartTime, 'rewards not active yet');\\n\\n        UserStakedInfo storage user = userStakeInfo[msg.sender];\\n        require(user.staked > 0, 'nothing staked');\\n\\n        uint256 payout = availableToClaim(msg.sender);\\n        user.claimed += payout;\\n        user.last_claim_time = block.timestamp;\\n        TESTING_STAKED_COUNT += payout;\\n        StakedToken.transfer(msg.sender, payout);\\n    }\\n\\n    function claimDogs() external nonReentrant {\\n        require(block.timestamp > rewardStartTime, 'rewards not active yet');\\n        \\n        UserStakedInfo storage user = userStakeInfo[msg.sender];\\n        require(user.staked > 0, 'nothing staked');\\n\\n        uint256 rewardPayout = pendingRewards(msg.sender);\\n\\n        uint256 timePassed = block.timestamp - userStakeInfo[msg.sender].last_reward_claim_time;\\n\\n        user.reward_time_counter += timePassed;\\n        if (user.reward_time_counter > 50 days){\\n            user.reward_time_counter = 50 days;\\n        }\\n\\n        user.last_reward_claim_time = block.timestamp;\\n        RewardToken.transfer(msg.sender, rewardPayout);\\n    }\\n\\n    function pendingRewards(address _user) public view returns(uint256){\\n        if (block.timestamp < rewardStartTime){\\n            return 0;\\n        }\\n\\n        uint256 stakedRewards = (userStakeInfo[_user].staked - userStakeInfo[_user].claimed) * rewardRatio;\\n        uint256 rewardsPerYear = stakedRewards * APY / 100;\\n        uint256 rewardsPerSecond = rewardsPerYear / 365 days;\\n        uint256 timePassed = block.timestamp - userStakeInfo[_user].last_reward_claim_time;\\n\\n        if (timePassed + userStakeInfo[_user].reward_time_counter > 50 days){\\n            timePassed = 50 days - userStakeInfo[_user].reward_time_counter;\\n        }\\n\\n        uint256 earnedTotal = (rewardsPerSecond * timePassed) / 1e4;\\n\\n\\n        return earnedTotal;\\n    }\\n\\n    function dogsInLp(address _user) public view returns(uint256){\\n        return userStakeInfo[_user].staked * rewardRatio;\\n    }\\n\\n    function setUserCreditInfo(address[] memory _users, uint256[] memory _usersCreditingData) external onlyOwner {\\n        require(_users.length == _usersCreditingData.length);\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            userCreditInfo[_users[i]].amount = _usersCreditingData[i];\\n        }\\n    }\\n\\n    function availableToClaim(address _addr) public view returns(uint256 payout) {\\n        if (block.timestamp < rewardStartTime){\\n            return 0;\\n        }\\n\\n        uint256 share = userStakeInfo[_addr].staked * (payoutRate * 1e18) / (100e18) / (24 hours); //divide the profit by payout rate and seconds in the day\\n        payout = share * (block.timestamp - userStakeInfo[_addr].last_claim_time);\\n\\n        if (userStakeInfo[_addr].claimed + payout > userStakeInfo[_addr].staked) {\\n            payout = userStakeInfo[_addr].staked - userStakeInfo[_addr].claimed;\\n        }\\n\\n        return payout;\\n\\n    }\\n\\n\\n    // Admin Functions\\n    function toggleCreditingActive(bool _isActive) external onlyOwner {\\n        isCreditingActive = _isActive;\\n    }\\n\\n    function updatePayoutRate(uint256 _payoutRate) external onlyOwner {\\n        payoutRate = _payoutRate;\\n    }\\n\\n    function updateRewardStartTime(uint256 _rewardStartTime) external onlyOwner {\\n        rewardStartTime = _rewardStartTime;\\n    }\\n\\n    function updateApy(uint256 _APY) external onlyOwner {\\n        APY = _APY;\\n    }\\n\\n    function updateRewardRatio(uint256 _rewardRatio) external onlyOwner {\\n        rewardRatio = _rewardRatio;\\n    }\\n\\n    function updateRewardToken(IERC20 _rewardToken) external onlyOwner {\\n        RewardToken = _rewardToken;\\n    }\\n\\n    function updateStakedToken(IERC20 _stakedToken) external onlyOwner {\\n        StakedToken = _stakedToken;\\n    }\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount, address _to) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/DogPoundAutoPool.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./interfaces/IDogsExchangeHelper.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n\\ncontract DogPoundAutoPool is Ownable {\\n\\n    uint256 public lastPigsBalance = 0;\\n\\n    uint256 public lpRoundMasktemp = 0;\\n    uint256 public lpRoundMask = 0;\\n\\n    uint256 public totalDogsStaked = 0;\\n    uint256 public totalLPCollected = 0;\\n    uint256 public totalLpStaked = 0;\\n    uint256 public timeSinceLastCall = 0; \\n    uint256 public updateInterval = 24 hours; \\n    bool public initializeUnpaused = true;\\n    bool public managerNotLocked = true;\\n    bool public MClocked = false;\\n\\n    uint256 public DOGS_BNB_MC_PID = 1;\\n    uint256 public BnbLiquidateThreshold = 1e18;\\n    uint256 public totalLPstakedTemp = 0;\\n    IERC20 public PigsToken = IERC20(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    IERC20 public DogsToken = IERC20(0x198271b868daE875bFea6e6E4045cDdA5d6B9829);\\n    IERC20 public Dogs_BNB_LpToken = IERC20(0x2139C481d4f31dD03F924B6e87191E15A33Bf8B4);\\n\\n    address public DogPoundManger = 0x6dA8227Bc7B576781ffCac69437e17b8D4F4aE41;\\n    IDogsExchangeHelper public DogsExchangeHelper = IDogsExchangeHelper(0xB59686fe494D1Dd6d3529Ed9df384cD208F182e8);\\n    IMasterchefPigs public MasterchefPigs = IMasterchefPigs(0x8536178222fC6Ec5fac49BbfeBd74CA3051c638f);\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address[] public dogsBnbPath = [wbnbCurrencyAddress, address(DogsToken)];\\n\\n\\n    struct HistoryInfo {\\n        uint256 pps;\\n        uint256 rms;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 lpMask;\\n        uint256 pigsClaimedTotal;\\n        uint256 lastRmsClaimed;\\n        uint256 lpDebt;\\n        uint256 totalLPCollected;\\n        uint256 totalPigsCollected;\\n    }\\n    \\n\\n    HistoryInfo[] public historyInfo;\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => bool) private initAllowed; \\n    receive() external payable {}\\n\\n    // Modifiers\\n    modifier onlyDogPoundManager() {\\n        require(DogPoundManger == msg.sender, \\\"manager only\\\");\\n        _;\\n    }\\n\\n    constructor(){\\n        timeSinceLastCall = block.timestamp;\\n        initAllowed[msg.sender] = true;\\n        initAllowed[0x47B9501674a0B01c7F3EdF91593bDfe379D73c28] = true;\\n    }\\n\\n    function initializeVariables(DogPoundAutoPool _pool, uint256 histlen) onlyOwner public {\\n        require(initializeUnpaused);\\n        DogPoundAutoPool pool = DogPoundAutoPool(_pool);\\n        lpRoundMask = pool.lpRoundMask();\\n        lpRoundMasktemp =  pool.lpRoundMasktemp();\\n        totalDogsStaked =  pool.totalDogsStaked();\\n        timeSinceLastCall = pool.timeSinceLastCall() + 2 hours;\\n        for(uint i = 0; i < histlen; i++){\\n            if(i >= historyInfo.length){\\n                historyInfo.push(HistoryInfo({rms: 0, pps: 0}));\\n            }\\n            if(i > 8){\\n                (historyInfo[i].pps, historyInfo[i].rms) = pool.historyInfo(i+7);\\n            }else{\\n                (historyInfo[i].pps, historyInfo[i].rms) = pool.historyInfo(i);\\n            }\\n\\n        }\\n    }\\n\\n    function initializeU(DogPoundAutoPool _pool, address [] memory _users) public {\\n        require(initAllowed[msg.sender]);\\n        require(initializeUnpaused);\\n        DogPoundAutoPool pool = DogPoundAutoPool(_pool);\\n        for(uint i = 0; i < _users.length; i++){\\n            (uint256 amount, uint256 lpMask, uint256 pigsClaimedTotal,  uint256 lastRmsClaimed, uint256 lpDebt, uint256 totalLPCollectedu, uint256 totalPigsCollected ) =  pool.userInfo(_users[i]);\\n            userInfo[_users[i]].amount =  amount;\\n            userInfo[_users[i]].lpMask =  lpMask;\\n            userInfo[_users[i]].pigsClaimedTotal =  pigsClaimedTotal;\\n            userInfo[_users[i]].lastRmsClaimed =  lastRmsClaimed;\\n            userInfo[_users[i]].lpDebt =  lpDebt;\\n            userInfo[_users[i]].totalLPCollected =  totalLPCollectedu;\\n            userInfo[_users[i]].totalPigsCollected =totalPigsCollected;\\n        }\\n    }\\n\\n    function initializeMd(address [] memory _users, UserInfo [] memory _info) onlyOwner public {\\n        require(initializeUnpaused);\\n        for(uint i = 0; i <= _users.length; i++){\\n            userInfo[_users[i]] = _info[i];\\n        }\\n    }\\n\\n    function initCompounders(address [] memory _users) onlyOwner public {\\n        require(initializeUnpaused);\\n        for(uint i = 0; i <= _users.length; i++){\\n            userInfo[_users[i]].lastRmsClaimed = userInfo[_users[i]].lpMask;\\n        }    \\n    }\\n\\n    function deposit(address _user, uint256 _amount) external onlyDogPoundManager {\\n        UserInfo storage user = userInfo[_user];\\n        if(historyInfo.length != 0 && user.amount != 0){\\n            claimPigsInternal(_user);\\n        }\\n        totalDogsStaked += _amount;\\n        if(user.amount != 0){\\n            user.lpDebt += pendingLpRewardsInternal(_user); \\n        }\\n        updateUserMask(_user);\\n        compound();\\n        user.amount += _amount;\\n    }\\n\\n    function withdraw(address _user, uint256 _amount) external onlyDogPoundManager {\\n        compound();\\n        claimLpTokensAndPigsInternal(_user);\\n        UserInfo storage user = userInfo[_user];\\n        updateUserMask(_user);\\n        DogsToken.transfer(address(DogPoundManger), _amount);\\n        user.amount -= _amount;\\n        totalDogsStaked -= _amount;\\n    }\\n\\n    function updateUserMask(address _user) internal {\\n        userInfo[_user].lpMask = lpRoundMask;\\n        userInfo[_user].lastRmsClaimed = historyInfo[historyInfo.length - 1].rms;\\n    }\\n\\n    function getPigsEarned() internal returns (uint256){\\n        uint256 pigsBalance = PigsToken.balanceOf(address(this));\\n        uint256 pigsEarned = pigsBalance - lastPigsBalance;\\n        lastPigsBalance = pigsBalance;\\n        return pigsEarned;\\n    }\\n    \\n    function pendingLpRewardsInternal(address _userAddress) public view returns (uint256 pendingLp){\\n       UserInfo storage user = userInfo[_userAddress];\\n        pendingLp = (user.amount * (lpRoundMask - user.lpMask))/10e18;\\n        return pendingLp;\\n    }\\n\\n    function pendingLpRewards(address _userAddress) public view returns (uint256 pendingLp){\\n        UserInfo storage user = userInfo[_userAddress];\\n        pendingLp = (user.amount * (lpRoundMask - user.lpMask))/10e18;\\n        return pendingLp  + user.lpDebt;\\n    }\\n\\n    function claimLpTokensAndPigsInternal(address _user) internal {\\n        if(historyInfo.length > 0){\\n            claimPigsInternal(_user);\\n        }\\n        UserInfo storage user = userInfo[_user];\\n        uint256 lpPending = pendingLpRewards(_user);\\n\\n        if (lpPending > 0){\\n            MasterchefPigs.withdraw(DOGS_BNB_MC_PID, lpPending);\\n            handlePigsIncrease();\\n            Dogs_BNB_LpToken.transfer(_user, lpPending);\\n            user.totalLPCollected += lpPending;\\n            totalLPCollected += lpPending;\\n            user.lpDebt = 0;\\n            user.lpMask = lpRoundMask;\\n            totalLpStaked -= lpPending;\\n        }\\n\\n    }\\n\\n    function claimLpTokensAndPigs() public {\\n        if(historyInfo.length > 0){\\n            claimPigs();\\n        }\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 lpPending = pendingLpRewards(msg.sender);\\n\\n        if (lpPending > 0){\\n            MasterchefPigs.withdraw(DOGS_BNB_MC_PID, lpPending);\\n            user.totalLPCollected += lpPending;\\n            totalLPCollected += lpPending;\\n            handlePigsIncrease();\\n            Dogs_BNB_LpToken.transfer(msg.sender, lpPending);\\n            user.lpDebt = 0;\\n            user.lpMask = lpRoundMask;\\n            totalLpStaked -= lpPending;\\n        }\\n\\n    }\\n\\n    function claimPigsHelper(uint256 startIndex) public {\\n        require(historyInfo.length > 0, \\\"No History\\\");\\n        require(startIndex <= historyInfo.length - 1);\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 pigsPending;\\n        uint256 newPigsClaimedTotal;\\n        for(uint256 i = startIndex + 1; i > 0; i--){\\n            if(user.lastRmsClaimed > historyInfo[i - 1].rms){\\n                break;\\n            }\\n            if(user.lpMask > historyInfo[i - 1].rms ){\\n                break;\\n            }\\n            uint256 tempAmount =  (((user.amount * (historyInfo[i - 1].rms - user.lpMask))/ 10e18 + user.lpDebt) * historyInfo[i - 1].pps)/10e12;\\n            pigsPending += tempAmount;\\n            if(i - 1 == startIndex){\\n                newPigsClaimedTotal = tempAmount;\\n            }\\n        }\\n        user.lastRmsClaimed = historyInfo[startIndex].rms;\\n        uint256 pigsTransfered = 0;\\n        if(user.pigsClaimedTotal < pigsPending){\\n            pigsTransfered = pigsPending - user.pigsClaimedTotal;\\n            user.totalPigsCollected += pigsTransfered;\\n            lastPigsBalance -= pigsTransfered;\\n            PigsToken.transfer(msg.sender, pigsTransfered);\\n        }\\n        user.pigsClaimedTotal = newPigsClaimedTotal;\\n    }\\n    \\n    function claimPigsInternal(address _user) internal {\\n        require(historyInfo.length > 0, \\\"No History\\\");\\n        uint256 startIndex = historyInfo.length - 1;\\n        UserInfo storage user = userInfo[_user];\\n        uint256 pigsPending;\\n        uint256 newPigsClaimedTotal;\\n        for(uint256 i = startIndex + 1; i > 0; i--){\\n            if(user.lastRmsClaimed > historyInfo[i - 1].rms){\\n                break;\\n            }\\n            if(user.lpMask > historyInfo[i - 1].rms ){\\n                break;\\n            }\\n            uint256 tempAmount =  (((user.amount * (historyInfo[i - 1].rms - user.lpMask))/ 10e18 + user.lpDebt) * historyInfo[i - 1].pps)/10e12;\\n            pigsPending += tempAmount;\\n            if(i - 1 == startIndex){\\n                newPigsClaimedTotal = tempAmount;\\n            }\\n        }\\n        user.lastRmsClaimed = historyInfo[startIndex].rms;\\n        uint256 pigsTransfered = 0;\\n        if(user.pigsClaimedTotal < pigsPending){\\n            pigsTransfered = pigsPending - user.pigsClaimedTotal;\\n            user.totalPigsCollected += pigsTransfered;\\n            lastPigsBalance -= pigsTransfered;\\n            PigsToken.transfer(_user, pigsTransfered);\\n        }\\n        user.pigsClaimedTotal = newPigsClaimedTotal;\\n\\n    }\\n    \\n    function pendingPigsRewardsHelper(address _user, uint256 startIndex) view public returns(uint256) {\\n        require(historyInfo.length > 0, \\\"No History\\\");\\n        require(startIndex <= historyInfo.length - 1);\\n        UserInfo storage user = userInfo[_user];\\n        uint256 pigsPending;\\n        for(uint256 i = startIndex + 1; i > 0; i--){\\n            if(user.lastRmsClaimed > historyInfo[i - 1].rms){\\n                break;\\n            }\\n            if(user.lpMask > historyInfo[i - 1].rms ){\\n                break;\\n            }\\n            uint256 tempAmount =  (((user.amount * (historyInfo[i - 1].rms - user.lpMask))/ 10e18 + user.lpDebt) * historyInfo[i - 1].pps)/10e12;\\n            pigsPending += tempAmount;\\n        }\\n        if(pigsPending <= user.pigsClaimedTotal){\\n            return 0;\\n        }\\n        return(pigsPending - user.pigsClaimedTotal);\\n    }\\n\\n    function pendingPigsRewards(address _user) view public returns(uint256) {\\n        if(historyInfo.length == 0){\\n            return 0;\\n        }\\n        return pendingPigsRewardsHelper(_user, historyInfo.length - 1);\\n    }\\n\\n\\n    function claimPigs() public {\\n        require(historyInfo.length > 0, \\\"No History\\\");\\n        claimPigsHelper(historyInfo.length - 1);        \\n    }\\n\\n    function pendingRewards(address _userAddress) public view returns (uint256 _pendingPigs, uint256 _pendingLp){\\n        require(historyInfo.length > 0, \\\"No History\\\");\\n        uint256 pendingLp = pendingLpRewardsInternal(_userAddress);\\n        uint256 pendingPigs = pendingPigsRewardsHelper(_userAddress, historyInfo.length - 1);\\n        return (pendingPigs, pendingLp + userInfo[_userAddress].lpDebt);\\n    }\\n\\n    function compound() public {\\n        \\n        uint256 BnbBalance = address(this).balance;\\n        if (BnbBalance < BnbLiquidateThreshold){\\n            return;\\n        }\\n\\n        uint256 BnbBalanceHalf = BnbBalance / 2;\\n        uint256 BnbBalanceRemaining = BnbBalance - BnbBalanceHalf;\\n\\n        // Buy Dogs with half of the BNB\\n        uint256 amountDogsBought = DogsExchangeHelper.buyDogsBNB{value: BnbBalanceHalf}(0, _getBestBNBDogsSwapPath(BnbBalanceHalf));\\n\\n\\n        allowanceCheckAndSet(DogsToken, address(DogsExchangeHelper), amountDogsBought);\\n        (\\n        uint256 amountLiquidity,\\n        uint256 unusedTokenA,\\n        uint256 unusedTokenB\\n        ) = DogsExchangeHelper.addDogsBNBLiquidity{value: BnbBalanceRemaining}(amountDogsBought);\\n        lpRoundMasktemp = lpRoundMasktemp + amountLiquidity;\\n        if(block.timestamp - timeSinceLastCall >= updateInterval){\\n            lpRoundMask += (lpRoundMasktemp * 10e18)/totalDogsStaked;\\n            timeSinceLastCall = block.timestamp;\\n            lpRoundMasktemp = 0;\\n        }\\n        _stakeIntoMCPigs(amountLiquidity);\\n    }\\n\\n\\n    function _getBestBNBDogsSwapPath(uint256 _amountBNB) internal view returns (address[] memory){\\n\\n        address[] memory pathBNB_BUSD_Dogs = _createRoute3(wbnbCurrencyAddress, busdCurrencyAddress , address(DogsToken));\\n\\n        uint256[] memory amountOutBNB = PancakeRouter.getAmountsOut(_amountBNB, dogsBnbPath);\\n        uint256[] memory amountOutBNBviaBUSD = PancakeRouter.getAmountsOut(_amountBNB, pathBNB_BUSD_Dogs);\\n\\n        if (amountOutBNB[amountOutBNB.length -1] > amountOutBNBviaBUSD[amountOutBNBviaBUSD.length - 1]){ \\n            return dogsBnbPath;\\n        }\\n        return pathBNB_BUSD_Dogs;\\n\\n    }\\n\\n    function _createRoute3(address _from, address _mid, address _to) internal pure returns(address[] memory){\\n        address[] memory path = new address[](3);\\n        path[0] = _from;\\n        path[1] = _mid;\\n        path[2] = _to;\\n        return path;\\n    }\\n\\n    function handlePigsIncrease() internal {\\n        uint256 pigsEarned = getPigsEarned();\\n        if(historyInfo.length > 0 && historyInfo[historyInfo.length - 1].rms == lpRoundMask){\\n            historyInfo[historyInfo.length - 1].pps += (pigsEarned * 10e12)/totalLPstakedTemp;\\n        }else{\\n            historyInfo.push(HistoryInfo({rms: lpRoundMask, pps: (pigsEarned * 10e12)/totalLpStaked}));\\n            totalLPstakedTemp = totalLpStaked;\\n        }\\n    }\\n\\n    function increasePigsBuffer(uint256 quant) public onlyOwner{\\n        PigsToken.transferFrom(msg.sender, address(this), quant);\\n        lastPigsBalance += quant;\\n    }\\n\\n    function _stakeIntoMCPigs(uint256 _amountLP) internal {\\n        allowanceCheckAndSet(IERC20(Dogs_BNB_LpToken), address(MasterchefPigs), _amountLP);\\n        MasterchefPigs.deposit(DOGS_BNB_MC_PID, _amountLP);\\n        totalLpStaked += _amountLP;\\n        handlePigsIncrease();\\n    }\\n\\n    function allowanceCheckAndSet(IERC20 _token, address _spender, uint256 _amount) internal {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        if (allowance < _amount) {\\n            require(_token.approve(_spender, _amount), \\\"allowance err\\\");\\n        }\\n    }\\n\\n    function initMCStake() public onlyOwner{\\n        require(initializeUnpaused);\\n        lastPigsBalance = PigsToken.balanceOf(address(this));\\n        uint256 balance = IERC20(Dogs_BNB_LpToken).balanceOf(address(this));\\n        allowanceCheckAndSet(IERC20(Dogs_BNB_LpToken), address(MasterchefPigs), balance);\\n        totalLPstakedTemp = ( balance - lpRoundMasktemp ) * 998 / 1000;\\n        allowanceCheckAndSet(IERC20(Dogs_BNB_LpToken), address(MasterchefPigs), balance);\\n        MasterchefPigs.deposit(DOGS_BNB_MC_PID, balance);\\n        totalLpStaked += (balance * 998) / 1000;\\n        handlePigsIncrease();    \\n    }\\n    \\n    function initStakeMult(uint256 temp1, uint256 temp2) public onlyOwner{\\n        require(initializeUnpaused);\\n        totalLPstakedTemp = temp1;\\n        totalLpStaked = temp2;\\n    }\\n\\n    function addInitAllowed(address _ad, bool _bool) public onlyOwner{\\n        initAllowed[_ad] = _bool;\\n    }\\n\\n    function updateBnbLiqThreshhold(uint256 newThrehshold) public onlyOwner {\\n        BnbLiquidateThreshold = newThrehshold;\\n    }\\n\\n    function updateDogsBnBPID(uint256 newPid) public onlyOwner {\\n        DOGS_BNB_MC_PID = newPid;\\n    }\\n\\n    function pauseInitialize() external onlyOwner {\\n        initializeUnpaused = false;\\n    }\\n\\n    function updateDogsAndLPAddress(address _addressDogs, address _addressLpBNB) public onlyOwner {\\n        Dogs_BNB_LpToken = IERC20(_addressLpBNB);\\n        updateDogsAddress(_addressDogs);\\n    }\\n\\n   function updateDogsAddress(address _address) public onlyOwner {\\n        DogsToken = IERC20(_address);\\n        dogsBnbPath = [wbnbCurrencyAddress,address(DogsToken)];\\n    }\\n\\n    function updatePigsAddress(address _address) public onlyOwner {\\n        PigsToken = IERC20(_address);\\n    }\\n    \\n    function allowCompound(uint256 _time) public onlyOwner{\\n        require(_time <= timeSinceLastCall, \\\"time in future\\\");\\n        timeSinceLastCall = _time;\\n    }\\n\\n    function updateDogsExchanceHelperAddress(address _address) public onlyOwner {\\n        DogsExchangeHelper = IDogsExchangeHelper(_address);\\n    }\\n\\n    function updateMasterchefPigsAddress(address _address) public onlyOwner {\\n        require(!MClocked);\\n        MasterchefPigs = IMasterchefPigs(_address);\\n    }\\n\\n    function changeUpdateInterval(uint256 _time) public onlyOwner{\\n        updateInterval = _time;\\n    }\\n\\n    function MClockedAddress() external onlyOwner{\\n        MClocked = true;\\n    }\\n\\n    function lockDogPoundManager() external onlyOwner{\\n        managerNotLocked = false;\\n    }\\n\\n    function setDogPoundManager(address _address) public onlyOwner {\\n        require(managerNotLocked);\\n        DogPoundManger = _address;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/DogPoundLinearPool.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\n\\ninterface Pool {\\n    \\n    struct UserInfo {\\n        uint256 totalStaked;\\n        uint256 bnbRewardDebt;\\n        uint256 totalBNBCollected;\\n    } \\n\\n    function userInfo(address key) view external returns (UserInfo memory);\\n\\n    function accDepositBNBRewardPerShare (  ) external view returns ( uint256 );\\n    \\n    function bnbRewardBalance (  ) external view returns ( uint256 );\\n\\n    function totalDeposited (  ) external view returns ( uint256 );\\n\\n    function totalBNBCollected (  ) external view returns ( uint256 );\\n\\n}\\n\\ncontract DogPoundLinearPool is Ownable, ReentrancyGuard {\\n    uint256 public accDepositBNBRewardPerShare = 0;\\n    uint256 public totalDeposited = 0;\\n    uint256 public bnbRewardBalance = 0;\\n    uint256 public totalBNBCollected = 0;\\n    bool public vaultPay = false;\\n    bool public initializeUnpaused = true;\\n    bool public managerNotLocked = true;\\n    IERC20 public DogsToken;\\n    IRewardsVault public rewardsVault;\\n\\n    address public DogPoundManger;\\n\\n    struct UserInfo {\\n        uint256 totalStaked;\\n        uint256 bnbRewardDebt;\\n        uint256 totalBNBCollected;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    receive() external payable {}\\n\\n    // Modifiers\\n    modifier onlyDogPoundManager() {\\n        require(DogPoundManger == msg.sender, \\\"manager only\\\");\\n        _;\\n    }\\n\\n    constructor(address _DogPoundManger, address _rewardsVaultAddress) {\\n        rewardsVault = IRewardsVault(_rewardsVaultAddress);\\n        DogPoundManger = _DogPoundManger;\\n    }\\n\\n    function initializeVars(DogPoundLinearPool _pool) onlyOwner public {\\n        require(initializeUnpaused);\\n        DogPoundLinearPool pool = DogPoundLinearPool(_pool);\\n        accDepositBNBRewardPerShare = pool.accDepositBNBRewardPerShare();\\n        totalDeposited =  pool.totalDeposited();\\n        bnbRewardBalance = pool.bnbRewardBalance();\\n        totalBNBCollected = pool.totalBNBCollected();\\n    }\\n\\n    function initialize(DogPoundLinearPool _pool, address [] memory _users) onlyOwner public {\\n        require(initializeUnpaused);\\n        DogPoundLinearPool pool = DogPoundLinearPool(_pool);\\n        for(uint i = 0; i < _users.length; i++){\\n            (uint256 totalStaked, uint256 bnbRewardDebt, uint256 _totalBNBCollected ) =  pool.userInfo(_users[i]);\\n            userInfo[_users[i]].totalStaked =  totalStaked;\\n            userInfo[_users[i]].bnbRewardDebt =  bnbRewardDebt;\\n            userInfo[_users[i]].totalBNBCollected =  _totalBNBCollected;\\n        }\\n    }\\n\\n\\n    function initializeM(DogPoundLinearPool _pool, address [] memory _users, UserInfo [] memory _info) onlyOwner public {\\n        require(initializeUnpaused);\\n        DogPoundLinearPool pool = DogPoundLinearPool(_pool);\\n        accDepositBNBRewardPerShare = pool.accDepositBNBRewardPerShare();\\n        for(uint i = 0; i <= _users.length; i++){\\n            userInfo[_users[i]] = _info[i];\\n        }\\n    }\\n\\n\\n    function deposit(address _user, uint256 _amount)\\n        external\\n        onlyDogPoundManager\\n        nonReentrant\\n    {\\n        if (vaultPay) {\\n            rewardsVault.payoutDivs();\\n        }\\n        UserInfo storage user = userInfo[_user];\\n        updatePool();\\n        uint256 bnbPending = payPendingBNBReward(_user);\\n        totalDeposited += _amount;\\n        user.totalBNBCollected += bnbPending;\\n        user.totalStaked += _amount;\\n        user.bnbRewardDebt = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24);\\n        if (bnbPending > 0) {\\n            payable(_user).transfer(bnbPending);\\n        }\\n    }\\n\\n    function withdraw(address _user, uint256 _amount)\\n        external\\n        onlyDogPoundManager\\n        nonReentrant\\n    {\\n        if (vaultPay) {\\n            rewardsVault.payoutDivs();\\n        }\\n        UserInfo storage user = userInfo[_user];\\n        updatePool();\\n        uint256 bnbPending = payPendingBNBReward(_user);\\n        DogsToken.transfer(address(DogPoundManger), _amount); // must handle receiving in DogPoundManger\\n        user.totalBNBCollected += bnbPending;\\n        user.totalStaked -= _amount;\\n        totalDeposited -= _amount;\\n        user.bnbRewardDebt = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24);\\n        if (bnbPending > 0) {\\n            payable(_user).transfer(bnbPending);\\n        }\\n    }\\n\\n    function updatePool() public {\\n        if (totalDeposited > 0) {\\n            uint256 bnbReceived = checkBNBRewardsReceived();\\n            if (bnbReceived > 0) {\\n                accDepositBNBRewardPerShare =\\n                    accDepositBNBRewardPerShare +\\n                    ((bnbReceived * 1e24) / totalDeposited);\\n                totalBNBCollected += bnbReceived;\\n            }\\n        }\\n    }\\n\\n    // Pay pending BNB from the DOGS staking reward scheme.\\n    function payPendingBNBReward(address _user) internal returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n\\n        uint256 bnbPending = ((user.totalStaked * accDepositBNBRewardPerShare) / 1e24) - user.bnbRewardDebt;\\n        \\n        if (bnbRewardBalance < bnbPending) {\\n            bnbPending = bnbRewardBalance;\\n            bnbRewardBalance = 0;\\n        } else if (bnbPending > 0) {\\n            bnbRewardBalance = bnbRewardBalance - bnbPending;\\n        }\\n        return bnbPending;\\n    }\\n\\n    function pendingBNBReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 bnbPending = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24) - user.bnbRewardDebt;\\n        return bnbPending;\\n    }\\n\\n    function claim() public nonReentrant {\\n        if (vaultPay) {\\n            rewardsVault.payoutDivs();\\n        }\\n        updatePool();\\n        uint256 bnbPending = payPendingBNBReward(msg.sender);\\n        UserInfo storage user = userInfo[msg.sender];\\n        user.totalBNBCollected += bnbPending;\\n        user.bnbRewardDebt = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24);\\n        if (bnbPending > 0) {\\n            payable(msg.sender).transfer(bnbPending);\\n        }\\n    }\\n\\n    function checkBNBRewardsReceived() internal returns (uint256) {\\n        uint256 totalBNBBalance = address(this).balance;\\n        if (totalBNBBalance == 0) {\\n            return 0;\\n        }\\n\\n        uint256 bnbReceived = totalBNBBalance - bnbRewardBalance;\\n        bnbRewardBalance = totalBNBBalance;\\n\\n        return bnbReceived;\\n    }\\n\\n    function setVaultPay(bool _bool) external onlyOwner {\\n        vaultPay = _bool;\\n    }\\n\\n    function switchRewardVault(address _newvault) external onlyOwner {\\n        rewardsVault = IRewardsVault(_newvault);\\n    }\\n\\n    function pauseInitialize() external onlyOwner {\\n        initializeUnpaused = false;\\n    }\\n\\n    function setDogsToken(address _address) public onlyOwner {\\n        DogsToken = IERC20(_address);\\n    }\\n    \\n    function lockDogPoundManager() external onlyOwner{\\n        managerNotLocked = false;\\n    }\\n\\n    function setDogPoundManager(address _address) public onlyOwner {\\n        require(managerNotLocked);\\n        DogPoundManger = _address;\\n    }\\n}\"\r\n    },\r\n    \"contracts/DogPoundManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\nimport \\\"./interfaces/IPancakePair.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\nimport \\\"./interfaces/IPancakeFactory.sol\\\";\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\nimport \\\"./interfaces/IDogPoundActions.sol\\\";\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\n\\n\\ninterface IDogPoundPool {\\n    function deposit(address _user, uint256 _amount) external;\\n    function withdraw(address _user, uint256 _amount) external;\\n    function getStake(address _user, uint256 _stakeID) external view returns(uint256 stakedAmount);\\n}\\n\\ncontract DogPoundManager is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IStakeManager public StakeManager = IStakeManager(0x25A959dDaEcEb50c1B724C603A57fe7b32eCbEeA);\\n    IDogPoundPool public DogPoundLinearPool = IDogPoundPool(0x935B36a774f2c04b8fA92acf3528d7DF681C0297);\\n    IDogPoundPool public DogPoundAutoPool = IDogPoundPool(0xf911D1d7118278f86eedfD94bC7Cd141D299E28D);\\n    IDogPoundActions public DogPoundActions;\\n    IRewardsVault public rewardsVault = IRewardsVault(0x4c004C4fB925Be396F902DE262F2817dEeBC22Ec);\\n\\n    bool public isPaused;\\n    uint256 public walletReductionPerMonth = 200;\\n    uint256 public burnPercent = 30;\\n    uint256 public minHoldThreshold = 10e18;\\n\\n    uint256 public loyaltyScoreMaxReduction = 3000;\\n    uint256 public dogsDefaultTax = 9000;\\n    uint256 public minDogVarTax = 300;\\n    uint256 public withdrawlRestrictionTime = 24 hours;\\n    DogPoundManager public oldDp = DogPoundManager(0x6dA8227Bc7B576781ffCac69437e17b8D4F4aE41);\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    uint256 public linearPoolSize = oldDp.linearPoolSize();\\n    uint256 public autoPoolSize = oldDp.autoPoolSize();\\n\\n    struct UserInfo {\\n        uint256 walletStartTime;\\n        uint256 overThresholdTimeCounter;\\n        uint256 lastDepositTime;\\n        uint256 totalStaked;\\n    }\\n\\n    struct StakeInfo {\\n        uint256 amount;\\n        uint256 startTime;\\n        bool isAutoPool;\\n    } \\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    modifier notPaused() {\\n        require(!isPaused, \\\"notPaused: DogPound paused !\\\");\\n        _;\\n    }\\n\\n    constructor(){\\n        _approveTokenIfNeeded(0x198271b868daE875bFea6e6E4045cDdA5d6B9829);\\n    }\\n    \\n\\n    function deposit(uint256 _amount, bool _isAutoCompound) external notPaused {\\n        require(_amount > 0, 'deposit !> 0');\\n        initUser(msg.sender);\\n        StakeManager.saveStake(msg.sender, _amount, _isAutoCompound);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        if (StakeManager.totalStaked(msg.sender) >= minHoldThreshold && userInfo[msg.sender].walletStartTime == 0){\\n                userInfo[msg.sender].walletStartTime = block.timestamp;\\n        }\\n        if (_isAutoCompound){\\n            DogsToken.transfer(address(DogPoundAutoPool), _amount);\\n            DogPoundAutoPool.deposit(msg.sender, _amount);\\n            autoPoolSize += _amount;\\n        } else {\\n            DogsToken.transfer(address(DogPoundLinearPool), _amount);\\n            DogPoundLinearPool.deposit(msg.sender, _amount);\\n            linearPoolSize += _amount;\\n        }\\n        userInfo[msg.sender].totalStaked += _amount;\\n        userInfo[msg.sender].lastDepositTime = block.timestamp;\\n\\n    }\\n\\n    function withdrawToWallet(uint256 _amount, uint256 _stakeID) external notPaused {\\n        initUser(msg.sender);\\n        require(block.timestamp - userInfo[msg.sender].lastDepositTime > withdrawlRestrictionTime,\\\"withdrawl locked\\\");\\n        _withdraw(_amount, _stakeID);\\n        if (StakeManager.totalStaked(msg.sender) < minHoldThreshold && userInfo[msg.sender].walletStartTime > 0){\\n            userInfo[msg.sender].overThresholdTimeCounter += block.timestamp - userInfo[msg.sender].walletStartTime;\\n            userInfo[msg.sender].walletStartTime = 0;\\n        }\\n        DogsToken.updateTransferTaxRate(0);\\n        DogsToken.transfer(msg.sender, _amount);\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n    }\\n\\n    function swapFromWithdrawnStake(uint256 _amount, uint256 _stakeID, address[] memory path) public {\\n        initUser(msg.sender);\\n        StakeManager.utilizeWithdrawnStake(msg.sender, _amount, _stakeID);\\n        uint256 taxReduction = totalTaxReductionWithdrawnStake(msg.sender, _stakeID);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        doSwap(address(this), _amount, taxReduction, path);\\n        IERC20 transfertoken = IERC20(path[path.length - 1]);\\n        uint256 balance = transfertoken.balanceOf(address(this));\\n        uint256 balance2 = DogsToken.balanceOf(address(this));\\n        DogsToken.updateTransferTaxRate(0);\\n        DogsToken.transfer(msg.sender, balance2);\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n        transfertoken.transfer(msg.sender, balance);\\n    }\\n\\n    function transferFromWithdrawnStake(uint256 _amount, address _to, uint256 _stakeID) public {\\n        initUser(msg.sender);\\n        StakeManager.utilizeWithdrawnStake(msg.sender, _amount, _stakeID);\\n        uint256 taxReduction = totalTaxReductionWithdrawnStake(msg.sender, _stakeID);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        doTransfer(_to , _amount, taxReduction);\\n    }\\n    //loyalty methods can stay unchanged\\n    function swapDogsWithLoyalty(uint256 _amount, address[] memory path) public {\\n        initUser(msg.sender);\\n        uint256 taxReduction = totalTaxReductionLoyaltyOnly(msg.sender);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        doSwap(address(this), _amount, taxReduction, path);\\n        IERC20 transfertoken = IERC20(path[path.length - 1]);\\n        uint256 balance = transfertoken.balanceOf(address(this));\\n        uint256 balance2 = DogsToken.balanceOf(address(this));\\n        DogsToken.updateTransferTaxRate(0);\\n        DogsToken.transfer(msg.sender, balance2);\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n        transfertoken.transfer(msg.sender, balance);\\n    }\\n    //loyalty methods can stay unchanged\\n    function transferDogsWithLoyalty(uint256 _amount, address _to) public {\\n        initUser(msg.sender);\\n        uint256 taxReduction = totalTaxReductionLoyaltyOnly(msg.sender);\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\n        doTransfer(_to ,_amount, taxReduction);\\n    }\\n\\n    function _approveTokenIfNeeded(address token) private {\\n        if (IERC20(token).allowance(address(this), address(PancakeRouter)) == 0) {\\n            IERC20(token).safeApprove(address(PancakeRouter), type(uint256).max);\\n        }\\n    }\\n\\n    // Internal functions\\n    function _withdraw(uint256 _amount, uint256 _stakeID) internal {\\n        bool isAutoPool = StakeManager.isStakeAutoPool(msg.sender, _stakeID);\\n        StakeManager.withdrawFromStake(msg.sender ,_amount, _stakeID); //require amount makes sense for stake\\n        if (isAutoPool){\\n            DogPoundAutoPool.withdraw(msg.sender, _amount);\\n            autoPoolSize -= _amount;\\n        } else {\\n            DogPoundLinearPool.withdraw(msg.sender, _amount);\\n            linearPoolSize -= _amount;\\n        }\\n        userInfo[msg.sender].totalStaked -= _amount;\\n    }\\n\\n    // View functions\\n    function walletTaxReduction(address _user) public view returns (uint256){\\n        UserInfo storage user = userInfo[_user];\\n        (uint256 e1, uint256 e2,uint256 _deptime, uint256 e3 )= readOldStruct(_user);\\n        if(user.lastDepositTime == 0 && _deptime != 0){\\n            uint256 currentReduction = 0;\\n            if (StakeManager.totalStaked(_user) < minHoldThreshold){\\n                currentReduction = (e2 / 30 days) * walletReductionPerMonth;\\n                if(currentReduction > loyaltyScoreMaxReduction){\\n                    return loyaltyScoreMaxReduction;\\n                }\\n                return currentReduction;\\n            }\\n            currentReduction = (((block.timestamp - e1) + e2) / 30 days) * walletReductionPerMonth;\\n            if(currentReduction > loyaltyScoreMaxReduction){\\n                return loyaltyScoreMaxReduction;\\n            }\\n            return currentReduction;  \\n\\n        }\\n        uint256 currentReduction = 0;\\n        if (StakeManager.totalStaked(_user) < minHoldThreshold){\\n            currentReduction = (user.overThresholdTimeCounter / 30 days) * walletReductionPerMonth;\\n            if(currentReduction > loyaltyScoreMaxReduction){\\n                return loyaltyScoreMaxReduction;\\n            }\\n            return currentReduction;\\n        }\\n        currentReduction = (((block.timestamp - user.walletStartTime) + user.overThresholdTimeCounter) / 30 days) * walletReductionPerMonth;\\n        if(currentReduction > loyaltyScoreMaxReduction){\\n            return loyaltyScoreMaxReduction;\\n        }\\n        return currentReduction;    \\n    }\\n\\n    function totalTaxReductionLoyaltyOnly(address _user)public view returns (uint256){\\n        uint256 walletReduction = walletTaxReduction(_user);\\n        if(walletReduction > (dogsDefaultTax - minDogVarTax)){\\n            walletReduction = (dogsDefaultTax - minDogVarTax);\\n        }else{\\n            walletReduction = dogsDefaultTax - walletReduction - minDogVarTax;\\n        }\\n        return walletReduction;\\n    }\\n    \\n\\n    function totalTaxReductionWithdrawnStake(address _user, uint256 _stakeID) public view returns (uint256){\\n        uint256 stakeReduction = StakeManager.getWithdrawnStakeTaxReduction(_user, _stakeID);\\n        uint256 walletReduction = walletTaxReduction(_user);\\n        uint256 _totalTaxReduction = stakeReduction + walletReduction;\\n        if(_totalTaxReduction >= (dogsDefaultTax - (2 * minDogVarTax))){\\n            _totalTaxReduction = 300;\\n        }else{\\n            _totalTaxReduction = dogsDefaultTax - _totalTaxReduction - minDogVarTax;\\n        }\\n        return _totalTaxReduction;\\n    }\\n\\n    function readOldStruct2(address _user) public view returns (uint256, uint256, uint256, uint256){\\n        if(userInfo[_user].lastDepositTime == 0){\\n                return oldDp.userInfo(_user);\\n            }\\n        return (userInfo[_user].walletStartTime,userInfo[_user].overThresholdTimeCounter,userInfo[_user].lastDepositTime,userInfo[_user].totalStaked );\\n    }\\n\\n    function setminHoldThreshold(uint256 _minHoldThreshold) external onlyOwner{\\n        minHoldThreshold = _minHoldThreshold;\\n    }\\n\\n    function setPoolSizes(uint256 s1, uint256 s2) external onlyOwner {\\n        linearPoolSize = s1;\\n        autoPoolSize = s2;\\n    }\\n\\n    function setAutoPool(address _autoPool) external onlyOwner {\\n        DogPoundAutoPool = IDogPoundPool(_autoPool);\\n    }\\n\\n    function setLinearPool(address _linearPool) external onlyOwner {\\n        DogPoundLinearPool = IDogPoundPool(_linearPool);\\n    }\\n\\n    function setStakeManager(IStakeManager _stakeManager) external onlyOwner {\\n        StakeManager = _stakeManager;\\n    }\\n\\n    function changeWalletReductionRate(uint256 walletReduction) external onlyOwner{\\n        require(walletReduction < 1000);\\n        walletReductionPerMonth = walletReduction;\\n    }\\n\\n    function changeWalletCapReduction(uint256 walletReductionCap) external onlyOwner{\\n        require(walletReductionCap < 6000);\\n        loyaltyScoreMaxReduction = walletReductionCap;\\n    }\\n\\n    function getAutoPoolSize() external view returns (uint256){\\n        if(linearPoolSize == 0 ){\\n            return 0;\\n        }\\n        return (autoPoolSize*10000/(linearPoolSize+autoPoolSize));\\n    }\\n\\n    function totalStaked(address _user) external view returns (uint256){\\n        return userInfo[_user].totalStaked;\\n    }\\n\\n    function changeBurnPercent(uint256 newBurn) external onlyOwner{\\n        require(burnPercent < 200);\\n        burnPercent = newBurn;\\n    }\\n\\n    function initUser(address _user) internal {\\n        if(userInfo[_user].lastDepositTime == 0){\\n            (uint256 e, uint256 e2,uint256 _deptime, uint256 e3 )= readOldStruct(_user);\\n            if(_deptime != 0){\\n                userInfo[_user].walletStartTime = e; \\n                userInfo[_user].overThresholdTimeCounter = e2;\\n                userInfo[_user].lastDepositTime = _deptime;\\n                userInfo[_user].totalStaked = e3;\\n            }\\n        }\\n    }\\n\\n    function readOldStruct(address _user) public view returns (uint256, uint256, uint256, uint256){\\n        return oldDp.userInfo(_user);\\n    }\\n\\n    function doSwap(address _to, uint256 _amount, uint256 _taxReduction, address[] memory path) internal  {\\n        uint256 burnAmount = (_amount * burnPercent)/1000;\\n        uint256 leftAmount =  _amount - burnAmount;\\n        uint256 tempTaxval = 1e14/(1e3 - burnPercent);\\n        uint256 taxreductionNew = (_taxReduction * tempTaxval) / 1e11;\\n\\n        DogsToken.updateTransferTaxRate(taxreductionNew);\\n        // make the swap\\n        PancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            leftAmount,\\n            0, // accept any amount of tokens\\n            path,\\n            _to,\\n            block.timestamp\\n        );\\n\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n\\n        DogsToken.burn(burnAmount);\\n\\n    }\\n\\n    function doTransfer(address _to, uint256 _amount, uint256 _taxReduction) internal {\\n        uint256 burnAmount = (_amount * burnPercent)/1000;\\n        uint256 leftAmount =  _amount - burnAmount;\\n        uint256 tempTaxval = 1e14/(1e3 - burnPercent);\\n        uint256 taxreductionNew = (_taxReduction * tempTaxval) / 1e11;\\n\\n        DogsToken.updateTransferTaxRate(taxreductionNew);\\n\\n        DogsToken.transfer(_to, leftAmount);\\n\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\n\\n        DogsToken.burn(burnAmount);\\n\\n    }\\n\\n    function setDogsTokenAndDefaultTax(address _address, uint256 _defaultTax) external onlyOwner {\\n        DogsToken = IDogsToken(_address);\\n        dogsDefaultTax = _defaultTax;\\n    }\\n\\n    function setRewardsVault(address _rewardsVaultAddress) public onlyOwner{\\n        rewardsVault = IRewardsVault(_rewardsVaultAddress);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/DogPoundManagerV3.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\r\\nimport \\\"./interfaces/IPancakePair.sol\\\";\\r\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\r\\nimport \\\"./interfaces/IPancakeFactory.sol\\\";\\r\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\r\\nimport \\\"./interfaces/IDogPoundActions.sol\\\";\\r\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\r\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\r\\nimport \\\".//DogsNftManager.sol\\\";\\r\\nimport \\\"./DogPoundManager.sol\\\";\\r\\nimport \\\"./StakeManager.sol\\\";\\r\\nimport \\\"./StakeManagerV2.sol\\\";\\r\\nimport \\\"./NftPigMcStakingBusd.sol\\\";\\r\\n\\r\\ninterface IDPMOLD {\\r\\n    function linearPoolSize() external view returns (uint256);\\r\\n\\r\\n    function autoPoolSize() external view returns (uint256);\\r\\n\\r\\n    function userInfo(\\r\\n        address\\r\\n    ) external view returns (uint256, uint256, uint256, uint256);\\r\\n}\\r\\n\\r\\ncontract DogPoundManagerV3 is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    DogsNftManager public nftManager;\\r\\n    StakeManager public stakeManagerV1 =\\r\\n        StakeManager(0x25A959dDaEcEb50c1B724C603A57fe7b32eCbEeA);\\r\\n    StakeManagerV2 public stakeManager;\\r\\n    IDogPoundPool public DogPoundLinearPool =\\r\\n        IDogPoundPool(0x935B36a774f2c04b8fA92acf3528d7DF681C0297);\\r\\n    IDogPoundPool public DogPoundAutoPool =\\r\\n        IDogPoundPool(0xf911D1d7118278f86eedfD94bC7Cd141D299E28D);\\r\\n    IDogPoundActions public DogPoundActions;\\r\\n    IRewardsVault public rewardsVault =\\r\\n        IRewardsVault(0x4c004C4fB925Be396F902DE262F2817dEeBC22Ec);\\r\\n\\r\\n    uint256 public walletReductionPerMonth = 200;\\r\\n    uint256 public burnPercent = 30;\\r\\n    uint256 public minHoldThreshold = 10e18;\\r\\n    uint256 public dustAmount = 100000;\\r\\n    uint256 public loyaltyScoreMaxReduction = 1000;\\r\\n    uint256 public dogsDefaultTax = 9000;\\r\\n    uint256 public minDogVarTax = 300;\\r\\n    uint256 public withdrawlRestrictionTime = 24 hours;\\r\\n    DogPoundManager public oldDp =\\r\\n        DogPoundManager(0x1Bc00F2076A97A68511109883B0671721ff51955);\\r\\n    IDPMOLD public oldOldDp =\\r\\n        IDPMOLD(0x6dA8227Bc7B576781ffCac69437e17b8D4F4aE41);\\r\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\r\\n    NftPigMcStakingBusd public nftStakeBusd;\\r\\n    NftPigMcStakingBusd public nftStakeBnb;\\r\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\r\\n    IUniswapV2Router02 public constant PancakeRouter =\\r\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    uint256 public linearPoolSize;\\r\\n    uint256 public autoPoolSize;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 walletStartTime;\\r\\n        uint256 overThresholdTimeCounter;\\r\\n        uint256 lastDepositTime;\\r\\n        uint256 totalStaked;\\r\\n    }\\r\\n\\r\\n    struct StakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    constructor(\\r\\n        address _nftManager,\\r\\n        address _nftStakeBusd,\\r\\n        address _nftStakeBnb\\r\\n    ) {\\r\\n        nftStakeBusd = NftPigMcStakingBusd(payable(_nftStakeBusd));\\r\\n        nftStakeBnb = NftPigMcStakingBusd(payable(_nftStakeBnb));\\r\\n        nftManager = DogsNftManager(_nftManager);\\r\\n\\r\\n        autoPoolSize = oldDp.autoPoolSize();\\r\\n        linearPoolSize = oldDp.linearPoolSize();\\r\\n        _approveTokenIfNeeded(\\r\\n            0x198271b868daE875bFea6e6E4045cDdA5d6B9829,\\r\\n            address(PancakeRouter)\\r\\n        );\\r\\n        _approveTokenIfNeeded(\\r\\n            0x198271b868daE875bFea6e6E4045cDdA5d6B9829,\\r\\n            address(_nftManager)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _amount, bool _isAutoCompound) external {\\r\\n        require(_amount > 0, \\\"deposit !> 0\\\");\\r\\n        initUser(msg.sender);\\r\\n        stakeManager.saveStake(msg.sender, _amount, _isAutoCompound);\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        if (\\r\\n            userInfo[msg.sender].totalStaked + _amount >= minHoldThreshold &&\\r\\n            userInfo[msg.sender].walletStartTime == 0\\r\\n        ) {\\r\\n            userInfo[msg.sender].walletStartTime = block.timestamp;\\r\\n        }\\r\\n        if (_isAutoCompound) {\\r\\n            DogsToken.transfer(address(DogPoundAutoPool), _amount);\\r\\n            DogPoundAutoPool.deposit(msg.sender, _amount);\\r\\n            autoPoolSize += _amount;\\r\\n        } else {\\r\\n            DogsToken.transfer(address(DogPoundLinearPool), _amount);\\r\\n            DogPoundLinearPool.deposit(msg.sender, _amount);\\r\\n            linearPoolSize += _amount;\\r\\n        }\\r\\n        userInfo[msg.sender].totalStaked += _amount;\\r\\n        userInfo[msg.sender].lastDepositTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function depositOldUserInit(\\r\\n        uint256 _amount,\\r\\n        bool _isAutoCompound,\\r\\n        uint256 _lastActiveStake\\r\\n    ) external {\\r\\n        require(_amount > 0, \\\"deposit !> 0\\\");\\r\\n        initUser(msg.sender);\\r\\n        stakeManager.saveStakeOldUserInit(\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            _isAutoCompound,\\r\\n            _lastActiveStake\\r\\n        );\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        if (\\r\\n            userInfo[msg.sender].totalStaked >= minHoldThreshold &&\\r\\n            userInfo[msg.sender].walletStartTime == 0\\r\\n        ) {\\r\\n            userInfo[msg.sender].walletStartTime = block.timestamp;\\r\\n        }\\r\\n        if (_isAutoCompound) {\\r\\n            DogsToken.transfer(address(DogPoundAutoPool), _amount);\\r\\n            DogPoundAutoPool.deposit(msg.sender, _amount);\\r\\n            autoPoolSize += _amount;\\r\\n        } else {\\r\\n            DogsToken.transfer(address(DogPoundLinearPool), _amount);\\r\\n            DogPoundLinearPool.deposit(msg.sender, _amount);\\r\\n            linearPoolSize += _amount;\\r\\n        }\\r\\n        userInfo[msg.sender].totalStaked += _amount;\\r\\n        userInfo[msg.sender].lastDepositTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function withdrawToWallet(uint256 _amount, uint256 _stakeID) external {\\r\\n        initUser(msg.sender);\\r\\n        require(\\r\\n            block.timestamp - userInfo[msg.sender].lastDepositTime >\\r\\n                withdrawlRestrictionTime,\\r\\n            \\\"withdrawl locked\\\"\\r\\n        );\\r\\n        _withdraw(_amount, _stakeID);\\r\\n        if (\\r\\n            userInfo[msg.sender].totalStaked < minHoldThreshold &&\\r\\n            userInfo[msg.sender].walletStartTime > 0\\r\\n        ) {\\r\\n            userInfo[msg.sender].overThresholdTimeCounter +=\\r\\n                block.timestamp -\\r\\n                userInfo[msg.sender].walletStartTime;\\r\\n            userInfo[msg.sender].walletStartTime = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapFromWithdrawnStake(\\r\\n        uint256 _amount,\\r\\n        uint256 _tokenID,\\r\\n        address[] memory path\\r\\n    ) public {\\r\\n        initUser(msg.sender);\\r\\n        uint256 taxReduction = totalTaxReductionWithdrawnStake(\\r\\n            msg.sender,\\r\\n            _tokenID\\r\\n        );\\r\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\r\\n        nftManager.useNFTbalance(_tokenID, _amount, address(this));\\r\\n        doSwap(address(this), _amount, taxReduction, path);\\r\\n        IERC20 transfertoken = IERC20(path[path.length - 1]);\\r\\n        uint256 balance = transfertoken.balanceOf(address(this));\\r\\n        uint256 balance2 = DogsToken.balanceOf(address(this));\\r\\n        nftManager.returnNFTbalance(_tokenID, balance2, address(this));\\r\\n        nftManager.utilizeNFTbalance(_tokenID, _amount - balance2);\\r\\n        transfertoken.transfer(msg.sender, balance);\\r\\n        if (\\r\\n            nftManager.nftPotentialBalance(_tokenID) +\\r\\n                nftStakeBnb.lpAmount(_tokenID) +\\r\\n                nftStakeBusd.lpAmount(_tokenID) >\\r\\n            dustAmount\\r\\n        ) {\\r\\n            nftManager.transferFrom(address(this), msg.sender, _tokenID);\\r\\n        } else {\\r\\n            nftManager.transferFrom(\\r\\n                address(this),\\r\\n                0x000000000000000000000000000000000000dEaD,\\r\\n                _tokenID\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferFromWithdrawnStake(\\r\\n        uint256 _amount,\\r\\n        address _to,\\r\\n        uint256 _tokenID\\r\\n    ) public {\\r\\n        initUser(msg.sender);\\r\\n        uint256 taxReduction = totalTaxReductionWithdrawnStake(\\r\\n            msg.sender,\\r\\n            _tokenID\\r\\n        );\\r\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\r\\n        nftManager.useNFTbalance(_tokenID, _amount, address(this));\\r\\n        nftManager.utilizeNFTbalance(_tokenID, _amount);\\r\\n        doTransfer(_to, _amount, taxReduction);\\r\\n        if (\\r\\n            nftManager.nftPotentialBalance(_tokenID) +\\r\\n                nftStakeBnb.lpAmount(_tokenID) +\\r\\n                nftStakeBusd.lpAmount(_tokenID) >\\r\\n            dustAmount\\r\\n        ) {\\r\\n            nftManager.transferFrom(address(this), msg.sender, _tokenID);\\r\\n        } else {\\r\\n            nftManager.transferFrom(\\r\\n                address(this),\\r\\n                0x000000000000000000000000000000000000dEaD,\\r\\n                _tokenID\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function returnNftBalanceThroughManager(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount\\r\\n    ) public {\\r\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        nftManager.returnNFTbalance(_tokenID, _amount, address(this));\\r\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\r\\n    }\\r\\n\\r\\n    function _approveTokenIfNeeded(address token, address _address) private {\\r\\n        if (IERC20(token).allowance(address(this), address(_address)) == 0) {\\r\\n            IERC20(token).safeApprove(address(_address), type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Internal functions\\r\\n    function _withdraw(uint256 _amount, uint256 _stakeID) internal {\\r\\n        bool isAutoPool = stakeManager.isStakeAutoPool(msg.sender, _stakeID);\\r\\n        if (isAutoPool) {\\r\\n            DogPoundAutoPool.withdraw(msg.sender, _amount);\\r\\n            autoPoolSize -= _amount;\\r\\n        } else {\\r\\n            DogPoundLinearPool.withdraw(msg.sender, _amount);\\r\\n            linearPoolSize -= _amount;\\r\\n        }\\r\\n        stakeManager.withdrawFromStake(\\r\\n            msg.sender,\\r\\n            _amount,\\r\\n            _stakeID,\\r\\n            address(this)\\r\\n        );\\r\\n        userInfo[msg.sender].totalStaked -= _amount;\\r\\n    }\\r\\n\\r\\n    // View functions\\r\\n    function walletTaxReduction(address _user) public view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        uint256 walletStartTime = user.walletStartTime;\\r\\n        uint256 overThresholdTimeCounter = user.overThresholdTimeCounter;\\r\\n        uint256 totalStaked = user.totalStaked;\\r\\n        if (user.lastDepositTime == 0) {\\r\\n            (walletStartTime, overThresholdTimeCounter, , ) = oldDp\\r\\n                .readOldStruct2(_user);\\r\\n            totalStaked = stakeManagerV1.totalStaked(_user);\\r\\n        }\\r\\n        uint256 currentReduction = 0;\\r\\n        if (totalStaked < minHoldThreshold) {\\r\\n            currentReduction =\\r\\n                (overThresholdTimeCounter / 30 days) *\\r\\n                walletReductionPerMonth;\\r\\n            if (currentReduction > loyaltyScoreMaxReduction) {\\r\\n                return loyaltyScoreMaxReduction;\\r\\n            }\\r\\n            return currentReduction;\\r\\n        }\\r\\n        currentReduction =\\r\\n            (((block.timestamp - walletStartTime) + overThresholdTimeCounter) /\\r\\n                30 days) *\\r\\n            walletReductionPerMonth;\\r\\n        if (currentReduction > loyaltyScoreMaxReduction) {\\r\\n            return loyaltyScoreMaxReduction;\\r\\n        }\\r\\n        return currentReduction;\\r\\n    }\\r\\n\\r\\n    function totalTaxReductionWithdrawnStake(\\r\\n        address _user,\\r\\n        uint256 _tokenID\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 stakeReduction = stakeManager.getWithdrawnStakeTaxReduction(\\r\\n            _tokenID\\r\\n        );\\r\\n        uint256 walletReduction = walletTaxReduction(_user);\\r\\n        uint256 _totalTaxReduction = stakeReduction + walletReduction;\\r\\n        if (_totalTaxReduction >= (dogsDefaultTax - (2 * minDogVarTax))) {\\r\\n            _totalTaxReduction = 300;\\r\\n        } else {\\r\\n            _totalTaxReduction =\\r\\n                dogsDefaultTax -\\r\\n                _totalTaxReduction -\\r\\n                minDogVarTax;\\r\\n        }\\r\\n        return _totalTaxReduction;\\r\\n    }\\r\\n\\r\\n    function transitionOldWithdrawnStake(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) external {\\r\\n        uint256 _amount = stakeManager\\r\\n            .withdrawnStakeMove(_user, _stakeID)\\r\\n            .amount;\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        stakeManager.transitionOldWithdrawnStake(\\r\\n            _user,\\r\\n            _stakeID,\\r\\n            address(this)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function readOldStruct2(\\r\\n        address _user\\r\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\r\\n        if (userInfo[_user].lastDepositTime == 0) {\\r\\n            return oldDp.readOldStruct2(_user);\\r\\n        }\\r\\n        return (\\r\\n            userInfo[_user].walletStartTime,\\r\\n            userInfo[_user].overThresholdTimeCounter,\\r\\n            userInfo[_user].lastDepositTime,\\r\\n            userInfo[_user].totalStaked\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setminHoldThreshold(uint256 _minHoldThreshold) external onlyOwner {\\r\\n        minHoldThreshold = _minHoldThreshold;\\r\\n    }\\r\\n\\r\\n    function setPoolSizes(uint256 s1, uint256 s2) external onlyOwner {\\r\\n        linearPoolSize = s1;\\r\\n        autoPoolSize = s2;\\r\\n    }\\r\\n\\r\\n    function setAutoPool(address _autoPool) external onlyOwner {\\r\\n        DogPoundAutoPool = IDogPoundPool(_autoPool);\\r\\n    }\\r\\n\\r\\n    function setLinearPool(address _linearPool) external onlyOwner {\\r\\n        DogPoundLinearPool = IDogPoundPool(_linearPool);\\r\\n    }\\r\\n\\r\\n    function setNftManager(address _nftManager) external onlyOwner {\\r\\n        nftManager = DogsNftManager(_nftManager);\\r\\n        _approveTokenIfNeeded(\\r\\n            0x198271b868daE875bFea6e6E4045cDdA5d6B9829,\\r\\n            address(nftManager)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setStakeManager(address _stakeManager) external onlyOwner {\\r\\n        stakeManager = StakeManagerV2(_stakeManager);\\r\\n    }\\r\\n\\r\\n    function changeWalletReductionRate(\\r\\n        uint256 walletReduction\\r\\n    ) external onlyOwner {\\r\\n        require(walletReduction < 1000);\\r\\n        walletReductionPerMonth = walletReduction;\\r\\n    }\\r\\n\\r\\n    function changeWalletCapReduction(\\r\\n        uint256 walletReductionCap\\r\\n    ) external onlyOwner {\\r\\n        require(walletReductionCap < 6000);\\r\\n        loyaltyScoreMaxReduction = walletReductionCap;\\r\\n    }\\r\\n\\r\\n    function getAutoPoolSize() external view returns (uint256) {\\r\\n        if (linearPoolSize == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return ((autoPoolSize * 10000) / (linearPoolSize + autoPoolSize));\\r\\n    }\\r\\n\\r\\n    function totalStaked(address _user) external view returns (uint256) {\\r\\n        return userInfo[_user].totalStaked;\\r\\n    }\\r\\n\\r\\n    function changeBurnPercent(uint256 newBurn) external onlyOwner {\\r\\n        require(burnPercent < 200);\\r\\n        burnPercent = newBurn;\\r\\n    }\\r\\n\\r\\n    function initUser(address _user) internal {\\r\\n        if (userInfo[_user].lastDepositTime == 0) {\\r\\n            (uint256 e, uint256 e2, uint256 _deptime, uint256 e3) = oldDp\\r\\n                .readOldStruct2(_user);\\r\\n            if (_deptime != 0) {\\r\\n                userInfo[_user].walletStartTime = e;\\r\\n                userInfo[_user].overThresholdTimeCounter = e2;\\r\\n                userInfo[_user].lastDepositTime = _deptime;\\r\\n                userInfo[_user].totalStaked = stakeManagerV1.totalStaked(_user);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readOldStruct(\\r\\n        address _user\\r\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\r\\n        return oldDp.userInfo(_user);\\r\\n    }\\r\\n\\r\\n    function readOldOldStruct(\\r\\n        address _user\\r\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\r\\n        return oldOldDp.userInfo(_user);\\r\\n    }\\r\\n\\r\\n    function doSwap(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _taxReduction,\\r\\n        address[] memory path\\r\\n    ) internal {\\r\\n        uint256 burnAmount = (_amount * burnPercent) / 1000;\\r\\n        uint256 leftAmount = _amount - burnAmount;\\r\\n        uint256 tempTaxval = 1e14 / (1e3 - burnPercent);\\r\\n        uint256 taxreductionNew = (_taxReduction * tempTaxval) / 1e11;\\r\\n\\r\\n        DogsToken.updateTransferTaxRate(taxreductionNew);\\r\\n        // make the swap\\r\\n        PancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            leftAmount,\\r\\n            0, // accept any amount of tokens\\r\\n            path,\\r\\n            _to,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\r\\n\\r\\n        DogsToken.burn(burnAmount);\\r\\n    }\\r\\n\\r\\n    function doTransfer(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _taxReduction\\r\\n    ) internal {\\r\\n        uint256 burnAmount = (_amount * burnPercent) / 1000;\\r\\n        uint256 leftAmount = _amount - burnAmount;\\r\\n        uint256 tempTaxval = 1e14 / (1e3 - burnPercent);\\r\\n        uint256 taxreductionNew = (_taxReduction * tempTaxval) / 1e11;\\r\\n\\r\\n        DogsToken.updateTransferTaxRate(taxreductionNew);\\r\\n\\r\\n        DogsToken.transfer(_to, leftAmount);\\r\\n\\r\\n        DogsToken.updateTransferTaxRate(dogsDefaultTax);\\r\\n\\r\\n        DogsToken.burn(burnAmount);\\r\\n    }\\r\\n\\r\\n    function setDogsTokenAndDefaultTax(\\r\\n        address _address,\\r\\n        uint256 _defaultTax\\r\\n    ) external onlyOwner {\\r\\n        DogsToken = IDogsToken(_address);\\r\\n        dogsDefaultTax = _defaultTax;\\r\\n    }\\r\\n\\r\\n    function setRewardsVault(address _rewardsVaultAddress) public onlyOwner {\\r\\n        rewardsVault = IRewardsVault(_rewardsVaultAddress);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DogsClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n\\ncontract DogClaim is Ownable, ReentrancyGuard {\\n\\n    bool public isCreditingActive = false;\\n    mapping(address => uint256) public userClaimInfo;\\n    IERC20 public DogsToken;\\n\\n    constructor(IERC20 _dogsToken){\\n        DogsToken = _dogsToken;\\n    }\\n\\n    function claimDogs() external nonReentrant {\\n        require(isCreditingActive, 'not active yet');\\n\\n        uint256 amountClaimable = userClaimInfo[msg.sender];\\n        require(amountClaimable > 0, 'nothing to claim');\\n\\n        DogsToken.transfer(msg.sender, amountClaimable);\\n\\n        userClaimInfo[msg.sender] = 0;\\n    }\\n\\n    function setUserClaimInfo(address[] memory _users, uint256[] memory _usersClaimData) external onlyOwner {\\n        require(_users.length == _usersClaimData.length);\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            userClaimInfo[_users[i]] = _usersClaimData[i];\\n        }\\n    }\\n\\n    // Admin Functions\\n    function toggleCreditingActive(bool _isActive) external onlyOwner {\\n        isCreditingActive = _isActive;\\n    }\\n\\n    function recoverDogs(address _token, uint256 _amount, address _to) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/DogsNftManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\r\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\r\\n\\r\\ncontract DogsNftManager is Ownable, ERC721, ERC721Enumerable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Strings for uint256;\\r\\n    mapping(address => bool) public allowedAddress;\\r\\n    mapping(uint256 => uint256) public nftHoldingBalance;\\r\\n    mapping(uint256 => uint256) public nftPotentialBalance;\\r\\n    mapping(uint256 => uint256) public nftLastTime;\\r\\n    string public baseURI;\\r\\n    string public baseExtension = \\\".json\\\";\\r\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\r\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\r\\n    uint256 currentTokenID = 0;\\r\\n    uint256 limitTime = 300;\\r\\n    modifier onlyAllowedAddress() {\\r\\n        require(allowedAddress[msg.sender], \\\"allowed only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() ERC721(\\\"testnft\\\", \\\"TEST\\\") {}\\r\\n\\r\\n    function mintForWithdrawnStake(\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        address _from\\r\\n    ) external onlyAllowedAddress returns (uint256) {\\r\\n        uint256 tokenID = currentTokenID;\\r\\n        DogsToken.transferFrom(_from, address(this), _amount);\\r\\n        _safeMint(_to, tokenID);\\r\\n        nftHoldingBalance[tokenID] = _amount;\\r\\n        nftPotentialBalance[tokenID] = _amount;\\r\\n        currentTokenID += 1;\\r\\n        return tokenID;\\r\\n    }\\r\\n\\r\\n    function useNFTbalance(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount,\\r\\n        address _to\\r\\n    ) external onlyAllowedAddress {\\r\\n        require(\\r\\n            _amount <= nftHoldingBalance[_tokenID],\\r\\n            \\\"not enough tokens inside nft\\\"\\r\\n        );\\r\\n        require(ownerOf(_tokenID) == msg.sender, \\\"caller doesnt own nft\\\");\\r\\n        nftHoldingBalance[_tokenID] -= _amount;\\r\\n        DogsToken.transfer(_to, _amount);\\r\\n        nftLastTime[_tokenID] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function utilizeNFTbalance(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount\\r\\n    ) external onlyAllowedAddress {\\r\\n        require(\\r\\n            nftPotentialBalance[_tokenID] >= _amount &&\\r\\n                (nftPotentialBalance[_tokenID] - _amount) >=\\r\\n                nftHoldingBalance[_tokenID],\\r\\n            \\\"attempt to over utilize\\\"\\r\\n        );\\r\\n        require(ownerOf(_tokenID) == msg.sender, \\\"caller doesnt own nft\\\");\\r\\n        nftPotentialBalance[_tokenID] -= _amount;\\r\\n        nftLastTime[_tokenID] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function returnNFTbalance(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount,\\r\\n        address _from\\r\\n    ) external onlyAllowedAddress {\\r\\n        require(\\r\\n            (nftHoldingBalance[_tokenID] + _amount) <=\\r\\n                nftPotentialBalance[_tokenID],\\r\\n            \\\"attempt to over deposit\\\"\\r\\n        );\\r\\n        nftHoldingBalance[_tokenID] += _amount;\\r\\n        DogsToken.transferFrom(_from, address(this), _amount);\\r\\n        nftLastTime[_tokenID] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function returnNFTbalancePublic(\\r\\n        uint256 _tokenID,\\r\\n        uint256 _amount\\r\\n    ) external {\\r\\n        require(\\r\\n            (nftHoldingBalance[_tokenID] + _amount) <=\\r\\n                nftPotentialBalance[_tokenID],\\r\\n            \\\"attempt to over deposit\\\"\\r\\n        );\\r\\n        require(\\r\\n            ownerOf(_tokenID) == msg.sender,\\r\\n            \\\"you must own the nft you want to fill\\\"\\r\\n        );\\r\\n        nftHoldingBalance[_tokenID] += _amount;\\r\\n        DogsToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        nftLastTime[_tokenID] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function setAllowedAddress(address _address, bool _state) public onlyOwner {\\r\\n        allowedAddress[_address] = _state;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override {\\r\\n        require(\\r\\n            (block.timestamp - nftLastTime[tokenId]) >= limitTime ||\\r\\n                allowedAddress[from] ||\\r\\n                allowedAddress[to],\\r\\n            \\\"transfer cooldown\\\"\\r\\n        );\\r\\n        super._transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function setCooldown(uint256 _cooldown) external onlyOwner {\\r\\n        limitTime = _cooldown;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal override(ERC721, ERC721Enumerable) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual override returns (string memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        string memory currentBaseURI = _baseURI();\\r\\n        return\\r\\n            bytes(currentBaseURI).length > 0\\r\\n                ? string(\\r\\n                    abi.encodePacked(\\r\\n                        currentBaseURI,\\r\\n                        tokenId.toString(),\\r\\n                        baseExtension\\r\\n                    )\\r\\n                )\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseExtension(\\r\\n        string memory _newBaseExtension\\r\\n    ) public onlyOwner {\\r\\n        baseExtension = _newBaseExtension;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DogsTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFeeManagerDogs.sol\\\";\\nimport \\\"./interfaces/IDogPound.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract DogsTokenV2 is ERC20(\\\"Animal Farm Dogs\\\", \\\"AFD\\\"), Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public TxBaseTax = 9000; // 90%\\n    uint256 public TxBurnRate = 333; // 3.33%\\n    uint256 public TxVaultRewardRate = 9666; // 96.66%\\n\\n    uint256 public constant MAXIMUM_TX_BASE_TAX = 9001; // Max transfer tax rate: 90.01%.\\n    uint256 public constant ZERO_TAX_INT = 10001; // Special 0 tax int\\n\\n    address public constant BUSD_ADDRESS = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    IERC20 public constant busdRewardCurrency = IERC20(BUSD_ADDRESS);\\n\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    address public constant PANCAKESWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    IUniswapV2Router02 public pancakeswapRouter = IUniswapV2Router02(PANCAKESWAP_ROUTER_ADDRESS);\\n\\n    address public dogsBusdSwapPair;\\n    address public dogsWbnbSwapPair;\\n\\n    bool public swapAndLiquifyEnabled = false; // Automatic swap and liquify enabled\\n    bool private _inSwapAndLiquify;  // In swap and liquify\\n\\n    IFeeManagerDogs public FeeManagerDogs;\\n\\n    mapping(address => bool) public txTaxOperators;\\n\\n    mapping(address => bool) public liquifyExemptFrom;\\n    mapping(address => bool) public liquifyExemptTo;\\n\\n    mapping(address => uint256) public customTaxRateFrom;\\n    mapping(address => uint256) public customTaxRateTo;\\n\\n    // Events\\n    event Burn(address indexed sender, uint256 amount);\\n    event SetSwapAndLiquifyEnabled(bool swapAndLiquifyEnabled);\\n    event TransferTaxChanged(uint256 txBaseTax);\\n    event TransferTaxDistributionChanged(uint256 baseBurnRate, uint256 vaultRewardRate);\\n    event UpdateCustomTaxRateFrom(address _account, uint256 _taxRate);\\n    event UpdateCustomTaxRateTo(address _account, uint256 _taxRate);\\n    event SetOperator(address operator);\\n    event SetFeeManagerDogs(address feeManagerDogs);\\n    event SetTxTaxOperator(address taxOperator, bool isOperator);\\n\\n    // The operator can use admin functions\\n    address public _operator;\\n\\n    // AB measures\\n    mapping(address => bool) private blacklistFrom;\\n    mapping(address => bool) private blacklistTo;\\n    mapping (address => bool) private _isExcludedFromLimiter;\\n    bool private blacklistFeatureAllowed = true;\\n\\n    bool private transfersPaused = true;\\n    bool private transfersPausedFeatureAllowed = true;\\n\\n    bool private sellingEnabled = false;\\n    bool private sellingToggleAllowed = true;\\n\\n    bool private buySellLimiterEnabled = true;\\n    bool private buySellLimiterAllowed = true;\\n    uint256 private buySellLimitThreshold = 500e18;\\n\\n    // AB events\\n    event LimiterUserUpdated(address account, bool isLimited);\\n    event BlacklistUpdated(address account, bool blacklisted);\\n    event TransferStatusUpdate(bool isPaused);\\n    event TransferPauseFeatureBurn();\\n    event SellingToggleFeatureBurn();\\n    event BuySellLimiterUpdate(bool isEnabled, uint256 amount);\\n    event SellingEnabledToggle(bool enabled);\\n    event LimiterFeatureBurn();\\n    event BlacklistingFeatureBurn();\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"!operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyTxTaxOperator() {\\n        require(txTaxOperators[msg.sender], \\\"!txTaxOperator\\\");\\n        _;\\n    }\\n\\n    modifier lockTheSwap {\\n        _inSwapAndLiquify = true;\\n        _;\\n        _inSwapAndLiquify = false;\\n    }\\n\\n    modifier transferTaxFree {\\n        uint256 _TxBaseTaxPrevious = TxBaseTax;\\n        TxBaseTax = 0;\\n        _;\\n        TxBaseTax = _TxBaseTaxPrevious;\\n\\n    }\\n\\n    /**\\n     * @notice Constructs the Dogs Token contract.\\n     */\\n    constructor(address _addLiquidityHelper) {\\n\\n        _operator = msg.sender;\\n        txTaxOperators[msg.sender] = true;\\n\\n        // Create BUSD and WBNB pairs\\n        dogsBusdSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).createPair(address(this), BUSD_ADDRESS);\\n        dogsWbnbSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).createPair(address(this), pancakeswapRouter.WETH());\\n\\n        // Exclude from AB limiter\\n        _isExcludedFromLimiter[msg.sender] = true;\\n        _isExcludedFromLimiter[_addLiquidityHelper] = true; // needs to be false for initial launch\\n\\n        // Apply custom Taxes\\n        // Buying / Remove Liq directly on PCS incurs 6% tax.\\n        customTaxRateFrom[dogsBusdSwapPair] = 600;\\n        customTaxRateFrom[dogsWbnbSwapPair] = 600;\\n\\n        // Adding liquidity via helper is tax free\\n        customTaxRateFrom[_addLiquidityHelper] = ZERO_TAX_INT;\\n        customTaxRateTo[_addLiquidityHelper] = ZERO_TAX_INT;\\n\\n        // Operator is untaxed\\n        customTaxRateFrom[msg.sender] = ZERO_TAX_INT;\\n\\n        // Sending to Burn address is tax free\\n        customTaxRateTo[BURN_ADDRESS] = ZERO_TAX_INT;\\n\\n        // Exclude add liquidityHelper from triggering liquification\\n        liquifyExemptFrom[_addLiquidityHelper] = true;\\n        liquifyExemptTo[_addLiquidityHelper] = true;\\n\\n        liquifyExemptFrom[dogsBusdSwapPair] = true;\\n        liquifyExemptTo[dogsBusdSwapPair] = true;\\n\\n        liquifyExemptFrom[dogsWbnbSwapPair] = true;\\n        liquifyExemptTo[dogsWbnbSwapPair] = true;\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @dev overrides transfer function to meet tokenomics of Dogs Token\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n\\n        require(!isBlacklistedFrom(sender), \\\"ERROR: Address Blacklisted!\\\");\\n        require(!isBlacklistedTo(recipient), \\\"ERROR: Address Blacklisted!\\\");\\n\\n        bool isExcluded = _isExcludedFromLimiter[sender] || _isExcludedFromLimiter[recipient];\\n\\n        if (transfersPaused) {\\n            require(isExcluded, \\\"ERROR: Transfer Paused!\\\");\\n        }\\n\\n        if (recipient == address(dogsBusdSwapPair) && !isExcluded) {\\n            require(sellingEnabled, \\\"ERROR: Selling disabled!\\\");\\n        }\\n        if (recipient == address(dogsWbnbSwapPair) && !isExcluded) {\\n            require(sellingEnabled, \\\"ERROR: Selling disabled!\\\");\\n        }\\n\\n        //if any account belongs to _isExcludedFromLimiter account then don't do buy/sell limiting, used for initial liquidty adding\\n        if (buySellLimiterEnabled && !isExcluded) {\\n            if (recipient == address(dogsBusdSwapPair) || sender == address(dogsBusdSwapPair)) {\\n                require(amount <= buySellLimitThreshold, \\\"ERROR: buy / sell exceeded!\\\");\\n            }\\n            if (recipient == address(dogsWbnbSwapPair) || sender == address(dogsWbnbSwapPair)) {\\n                require(amount <= buySellLimitThreshold, \\\"ERROR: buy / sell exceeded!\\\");\\n            }\\n        }\\n        // End of AB measures\\n\\n        if (swapAndLiquifyEnabled == true && _inSwapAndLiquify == false){\\n            if (!liquifyExemptFrom[sender] || !liquifyExemptTo[recipient]){\\n                swapAndLiquefy();\\n            }\\n        }\\n\\n        uint256 taxToApply = TxBaseTax;\\n        if (customTaxRateFrom[sender] > 0 ){\\n            taxToApply = customTaxRateFrom[sender];\\n        }\\n        if (customTaxRateTo[recipient] > 0 ){\\n            taxToApply = customTaxRateTo[recipient];\\n        }\\n\\n        if (taxToApply == ZERO_TAX_INT || taxToApply == 0) {\\n            super._transfer(sender, recipient, amount);\\n        } else {\\n            uint256 baseTax = amount * taxToApply / 10000;\\n            uint256 baseBurn = baseTax * TxBurnRate / 10000;\\n            uint256 vaultReward = baseTax * TxVaultRewardRate / 10000;\\n            uint256 sendAmount = amount - baseBurn - vaultReward;\\n\\n            _burnTokens(sender, baseBurn);\\n            super._transfer(sender, address(FeeManagerDogs), vaultReward);\\n            super._transfer(sender, recipient, sendAmount);\\n\\n        }\\n    }\\n\\n    function swapAndLiquefy() private lockTheSwap transferTaxFree {\\n        FeeManagerDogs.liquefyDogs();\\n    }\\n\\n    /**\\n     * @notice Destroys `amount` tokens from the sender, reducing the total supply.\\n\\t */\\n    function burn(uint256 _amount) external {\\n        _burnTokens(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the sender, reducing the total supply.\\n\\t */\\n    function _burnTokens(address sender, uint256 _amount) private {\\n        _burn(sender, _amount);\\n        emit Burn(sender, _amount);\\n    }\\n\\n    /**\\n     * @dev Update the transfer base tax rate.\\n     * Can only be called by the current operator.\\n     */\\n    function updateTransferTaxRate(uint256 _txBaseTax) external onlyTxTaxOperator {\\n        require(_txBaseTax <= MAXIMUM_TX_BASE_TAX, \\\"invalid tax\\\");\\n        TxBaseTax = _txBaseTax;\\n        emit TransferTaxChanged(TxBaseTax);\\n    }\\n\\n    function updateCustomTaxRateFrom(address _account, uint256 _taxRate) external onlyTxTaxOperator {\\n        require(_taxRate <= MAXIMUM_TX_BASE_TAX || _taxRate == ZERO_TAX_INT, \\\"invalid tax\\\");\\n        customTaxRateFrom[_account] = _taxRate;\\n        emit UpdateCustomTaxRateFrom(_account, _taxRate);\\n    }\\n\\n    function updateCustomTaxRateTo(address _account, uint256 _taxRate) external onlyTxTaxOperator {\\n        require(_taxRate <= MAXIMUM_TX_BASE_TAX || _taxRate == ZERO_TAX_INT, \\\"invalid tax\\\");\\n        customTaxRateTo[_account] = _taxRate;\\n        emit UpdateCustomTaxRateTo(_account, _taxRate);\\n    }\\n\\n    /**\\n     * @dev Update the transfer tax distribution ratio's.\\n     * Can only be called by the current operator.\\n     */\\n    function updateTaxDistribution(uint256 _txBurnRate, uint256 _txVaultRewardRate) external onlyOperator {\\n        require(_txBurnRate + _txVaultRewardRate <= 10000, \\\"!valid\\\");\\n        TxBurnRate = _txBurnRate;\\n        TxVaultRewardRate = _txVaultRewardRate;\\n        emit TransferTaxDistributionChanged(TxBurnRate, TxVaultRewardRate);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current operator.\\n     */\\n    function operator() external view returns (address) {\\n        return _operator;\\n    }\\n\\n    /**\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\n     * Can only be called by the current operator.\\n     */\\n    function transferOperator(address newOperator) external onlyOperator {\\n        require(newOperator != address(0), \\\"!!0\\\");\\n        _operator = newOperator;\\n\\n        emit SetOperator(_operator);\\n    }\\n\\n    /**\\n     * @dev Update list of Transaction Tax Operators\\n     * Can only be called by the current operator.\\n     */\\n    function updateTxTaxOperator(address _txTaxOperator, bool _isTxTaxOperator) external onlyOperator {\\n        require(_txTaxOperator != address(0), \\\"!!0\\\");\\n        txTaxOperators[_txTaxOperator] = _isTxTaxOperator;\\n\\n        emit SetTxTaxOperator(_txTaxOperator, _isTxTaxOperator);\\n    }\\n\\n\\n    /**\\n     * @dev Update Fee Manager Dogs, sets tax to 0, exclude from triggering liquification\\n     * Can only be called by the current operator.\\n     */\\n    function updateFeeManagerDogs(address _feeManagerDogs) public onlyOperator {\\n        FeeManagerDogs = IFeeManagerDogs(_feeManagerDogs);\\n        customTaxRateFrom[_feeManagerDogs] = ZERO_TAX_INT;\\n        liquifyExemptFrom[_feeManagerDogs] = true;\\n        emit SetFeeManagerDogs(_feeManagerDogs);\\n    }\\n\\n    /**\\n     * @dev Update the swapAndLiquifyEnabled.\\n     * Can only be called by the current operator.\\n     */\\n    function updateSwapAndLiquifyEnabled(bool _enabled) external onlyOperator {\\n        swapAndLiquifyEnabled = _enabled;\\n\\n        emit SetSwapAndLiquifyEnabled(swapAndLiquifyEnabled);\\n    }\\n\\n\\n    // AB measures\\n    function toggleExcludedFromLimiterUser(address account, bool isExcluded) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        _isExcludedFromLimiter[account] = isExcluded;\\n        emit LimiterUserUpdated(account, isExcluded);\\n    }\\n\\n    function toggleBuySellLimiter(bool isEnabled, uint256 amount) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        buySellLimiterEnabled = isEnabled;\\n        buySellLimitThreshold = amount;\\n        emit BuySellLimiterUpdate(isEnabled, amount);\\n    }\\n\\n    function burnLimiterFeature() external onlyOperator {\\n        buySellLimiterAllowed = false;\\n        emit LimiterFeatureBurn();\\n    }\\n\\n    function isBlacklistedFrom(address account) public view returns (bool) {\\n        return blacklistFrom[account];\\n    }\\n\\n    function isBlacklistedTo(address account) public view returns (bool) {\\n        return blacklistTo[account];\\n    }\\n\\n    function toggleBlacklistUserFrom(address[] memory accounts, bool blacklisted) external onlyOperator {\\n        require(blacklistFeatureAllowed, \\\"ERROR: Function burned!\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            blacklistFrom[accounts[i]] = blacklisted;\\n            emit BlacklistUpdated(accounts[i], blacklisted);\\n        }\\n    }\\n\\n    function toggleBlacklistUserTo(address[] memory accounts, bool blacklisted) external onlyOperator {\\n        require(blacklistFeatureAllowed, \\\"ERROR: Function burned!\\\");\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            blacklistTo[accounts[i]] = blacklisted;\\n            emit BlacklistUpdated(accounts[i], blacklisted);\\n        }\\n    }\\n\\n    function burnBlacklistingFeature() external onlyOperator {\\n        blacklistFeatureAllowed = false;\\n        emit BlacklistingFeatureBurn();\\n    }\\n\\n    function toggleSellingEnabled(bool enabled) external onlyOperator {\\n        require(sellingToggleAllowed, 'feature destroyed');\\n        sellingEnabled = enabled;\\n        emit SellingEnabledToggle(enabled);\\n    }\\n\\n    function burnToggleSellFeature() external onlyOperator {\\n        sellingToggleAllowed = false;\\n        emit SellingToggleFeatureBurn();\\n    }\\n\\n    function toggleTransfersPaused(bool isPaused) external onlyOperator {\\n        require(transfersPausedFeatureAllowed, 'feature destroyed');\\n        transfersPaused = isPaused;\\n        emit TransferStatusUpdate(isPaused);\\n    }\\n\\n    function burnTogglePauseFeature() external onlyOperator {\\n        transfersPausedFeatureAllowed = false;\\n        emit TransferPauseFeatureBurn();\\n    }\\n\\n}\\n\\n\"\r\n    },\r\n    \"contracts/dummyToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract DummyToken is ERC20(\\\"DummyToken\\\", \\\"DummyToken\\\") {\\n\\n    constructor() {\\n        _mint(msg.sender, 1000e18);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/EmptyChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract EmptyChef {\\n    // Maximises yields in pancakeswap\\n    uint256 public wantLockedTotal = 0;\\n\\n    // Receives new deposits from user\\n    function deposit(uint256 _wantAmt) external returns (uint256) {\\n        return _wantAmt;\\n    }\\n\\n    function withdraw(uint256 _wantAmt) external returns (uint256) {\\n        return _wantAmt;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/FeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IToolbox.sol\\\";\\nimport \\\"./interfaces/IDogsExchangeHelper.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract FeeManager is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Factory public constant PancakeFactory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    IToolbox public Toolbox;\\n\\n    uint256 public busdSwapThreshold = 50 ether;\\n\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address public pigPenAddress = 0x1f8a98bE5C102D145aC672ded99C5bE0330d7e4F;\\n    address public vaultAddress = 0x68Bdc7b480d5b4df3bB086Cc3f33b0AEf52F7d55;\\n    address public dogsLpReceiver = 0x000000000000000000000000000000000000dEaD;\\n    address public dogsV2Address;\\n    address public masterchefDogs;\\n    IDogsExchangeHelper public DogsExchangeHelper;\\n\\n    uint256 public distributionPigPen = 2300; //23%\\n    uint256 public distributionVault  = 5000; //50%\\n    uint256 public distributionDogsLP = 2700; //27%\\n\\n    address[] pathBusdDogs;\\n\\n    mapping (address => bool) public viaWBNBTokens;\\n\\n    constructor(address _dogsV2Token, IToolbox _toolbox, address _masterchefDogs, IDogsExchangeHelper _dogsExchangeHelper){\\n        dogsV2Address = _dogsV2Token;\\n        Toolbox = _toolbox;\\n        masterchefDogs = _masterchefDogs;\\n\\n        DogsExchangeHelper = _dogsExchangeHelper;\\n\\n        pathBusdDogs = _createRoute(busdCurrencyAddress, _dogsV2Token);\\n\\n        _approveTokenIfNeeded(busdCurrencyAddress, address(PancakeRouter));\\n        _approveTokenIfNeeded(_dogsV2Token, address(PancakeRouter));\\n\\n        _approveTokenIfNeeded(busdCurrencyAddress, address(_dogsExchangeHelper));\\n        _approveTokenIfNeeded(_dogsV2Token, address(_dogsExchangeHelper));\\n\\n        _setRouteViaBNBToken(0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD, true); // LINK\\n        _setRouteViaBNBToken(0xE0e514c71282b6f4e823703a39374Cf58dc3eA4f, true); // BELT\\n        _setRouteViaBNBToken(0x2170Ed0880ac9A755fd29B2688956BD959F933F8, true); // ETH\\n        _setRouteViaBNBToken(0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402, true); // DOT\\n\\n    }\\n\\n    // MODIFIERS\\n    modifier onlyMasterchefDogs() {\\n        require(masterchefDogs == msg.sender, \\\"masterchefDogs only\\\");\\n        _;\\n    }\\n\\n    // Events\\n    event DepositFeeConvertedToBUSD(address indexed inputToken, uint256 inputAmount, uint256 busdInstant, uint256 busdVault);\\n    event UpdateVault(address indexed vaultAddress);\\n    event UpdatePigPen(address indexed pigpenAddress);\\n    event UpdateLpReceiver(address indexed lpReceiverAddress);\\n    event UpdateDogsToken(address indexed dogsTokenAddress);\\n    event UpdateToolbox(address indexed toolBoxAddress);\\n    event SetRouteTokenViaBNB(address tokenAddress, bool shouldRoute);\\n\\n    // EXTERNAL FUNCTIONS\\n    function swapDepositFeeForBUSD(address token, bool isLPToken) external onlyMasterchefDogs {\\n\\n\\n        uint256 totalTokenBalance = IERC20(token).balanceOf(address(this));\\n\\n        if (totalTokenBalance == 0 || token == busdCurrencyAddress){\\n            return;\\n        }\\n\\n        uint256 busdValue = Toolbox.getTokenBUSDValue(totalTokenBalance, token, isLPToken);\\n\\n        // only swap if a certain busd value\\n        if (busdValue < busdSwapThreshold)\\n            return;\\n\\n        swapDepositFeeForTokensInternal(token, isLPToken);\\n\\n        _distributeDepositFeeBusd();\\n\\n    }\\n\\n    /**\\n     * @dev un-enchant the lp token into its original components.\\n     */\\n    function unpairLPToken(address token, uint256 amount) internal returns(address token0, address token1, uint256 amountA, uint256 amountB){\\n        _approveTokenIfNeeded(token, address(PancakeRouter));\\n\\n        IUniswapV2Pair lpToken = IUniswapV2Pair(token);\\n        address token0 = lpToken.token0();\\n        address token1 = lpToken.token1();\\n\\n        // make the swap\\n        (uint256 amount0, uint256 amount1) = PancakeRouter.removeLiquidity(\\n            address(token0),\\n            address(token1),\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        return (token0, token1, amount0, amount1);\\n\\n    }\\n\\n    function swapDepositFeeForTokensInternal(address token, bool isLPToken) internal{\\n\\n        uint256 totalTokenBalance = IERC20(token).balanceOf(address(this));\\n\\n        if (isLPToken) {\\n            address token0;\\n            address token1;\\n            uint256 amount0;\\n            uint256 amount1;\\n\\n            (token0, token1, amount0, amount1) = unpairLPToken(token, totalTokenBalance);\\n            // now I have 2 tokens...\\n            convertTokenToBUSD(token0, amount0);\\n            convertTokenToBUSD(token1, amount1);\\n        } else {\\n            convertTokenToBUSD(token, totalTokenBalance);\\n        }\\n\\n    }\\n\\n    function convertTokenToBUSD(address token, uint256 amount) internal {\\n\\n        if (token == busdCurrencyAddress){\\n            return;\\n        }\\n\\n        _approveTokenIfNeeded(token, address(PancakeRouter));\\n\\n        address[] memory path;\\n        if (shouldRouteViaBNB(token)){\\n            path = new address[](3);\\n            path[0] = token;\\n            path[1] = wbnbCurrencyAddress;\\n            path[2] = busdCurrencyAddress;\\n        } else {\\n            path = new address[](2);\\n            path[0] = token;\\n            path[1] = busdCurrencyAddress;\\n        }\\n\\n        // make the swap\\n        PancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            amount,\\n            0, // accept any amount of tokens\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n    }\\n\\n    function _distributeDepositFeeBusd() internal {\\n\\n        uint256 totalBusdBalance = IERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n        uint256 amountPigPen        = totalBusdBalance * distributionPigPen / 10000;\\n        uint256 amountBusdVault     = totalBusdBalance * distributionVault / 10000;\\n        uint256 amountDogsLiquidity = totalBusdBalance - amountPigPen - amountBusdVault;\\n\\n        IERC20(busdCurrencyAddress).transfer(pigPenAddress, amountPigPen);\\n        IERC20(busdCurrencyAddress).transfer(vaultAddress, amountBusdVault);\\n        _buybackDogsAddLiquidity(amountDogsLiquidity);\\n    }\\n\\n    function _buybackDogsAddLiquidity(uint256 _amountBUSD) internal {\\n        // approved busd / dogs in constructor\\n\\n        address[] memory path;\\n        path = _getBestBUSDDogsSwapPath(_amountBUSD / 2);\\n\\n        DogsExchangeHelper.buyDogs(_amountBUSD / 2, 0, path);\\n\\n\\n        // add Dogs/Busd liquidity\\n        uint256 dogsTokenBalance = IERC20(dogsV2Address).balanceOf(address(this));\\n        uint256 busdTokenBalance = IERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(PancakeFactory.getPair(dogsV2Address, busdCurrencyAddress));\\n\\n        DogsExchangeHelper.addDogsLiquidity(busdCurrencyAddress, busdTokenBalance, dogsTokenBalance);\\n        uint256 dogsBusdLpReceived = IERC20(address(pair)).balanceOf(address(this));\\n        IERC20(address(pair)).transfer(dogsLpReceiver, dogsBusdLpReceived);\\n\\n    }\\n\\n    function _getBestBUSDDogsSwapPath(uint256 _amountBUSD) internal view returns (address[] memory){\\n\\n        address[] memory pathBUSD_BNB_Dogs = _createRoute3(busdCurrencyAddress, wbnbCurrencyAddress , dogsV2Address);\\n\\n        uint256[] memory amountOutBUSD = PancakeRouter.getAmountsOut(_amountBUSD, pathBusdDogs);\\n        uint256[] memory amountOutBUSDviaBNB = PancakeRouter.getAmountsOut(_amountBUSD, pathBUSD_BNB_Dogs);\\n\\n        if (amountOutBUSD[0] > amountOutBUSDviaBNB[0]){ \\n            return pathBusdDogs;\\n        }\\n        return pathBUSD_BNB_Dogs;\\n\\n    }\\n\\n    function _createRoute(address _from, address _to) internal pure returns(address[] memory){\\n        address[] memory path = new address[](2);\\n        path[0] = _from;\\n        path[1] = _to;\\n        return path;\\n    }\\n\\n    function _createRoute3(address _from, address _mid, address _to) internal pure returns(address[] memory){\\n        address[] memory path = new address[](3);\\n        path[0] = _from;\\n        path[1] = _mid;\\n        path[2] = _to;\\n        return path;\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address _contract) private {\\n        if (IERC20(token).allowance(address(this), address(_contract)) == 0) {\\n            IERC20(token).safeApprove(address(_contract), type(uint256).max);\\n        }\\n    }\\n\\n    function setRouteViaBNBToken(address _token, bool _viaWbnb) external onlyOwner {\\n        _setRouteViaBNBToken(_token, _viaWbnb);\\n    }\\n\\n    function _setRouteViaBNBToken(address _token, bool _viaWbnb) private {\\n        viaWBNBTokens[_token] = _viaWbnb;\\n        emit SetRouteTokenViaBNB(_token, _viaWbnb);\\n    }\\n\\n    function shouldRouteViaBNB(address _token) public view returns (bool){\\n        return viaWBNBTokens[_token];\\n    }\\n\\n    // ADMIN FUNCTIONS\\n    function updateVaultAddress(address _vault) external onlyOwner {\\n        vaultAddress = _vault;\\n        emit UpdateVault(_vault);\\n    }\\n\\n    function updatePigPenAddress(address _pigPen) external onlyOwner {\\n        pigPenAddress = _pigPen;\\n        emit UpdatePigPen(_pigPen);\\n    }\\n\\n    function updateDogsLpReceiver(address _lpReceiver) external onlyOwner {\\n        dogsLpReceiver = _lpReceiver;\\n        emit UpdateLpReceiver(_lpReceiver);\\n    }\\n\\n    function updateDogsTokenAddress(address _dogsToken) external onlyOwner {\\n        dogsV2Address = _dogsToken;\\n        _approveTokenIfNeeded(_dogsToken, address(PancakeRouter));\\n        _approveTokenIfNeeded(_dogsToken, address(DogsExchangeHelper));\\n        pathBusdDogs = _createRoute(busdCurrencyAddress, _dogsToken);\\n        emit UpdateDogsToken(_dogsToken);\\n    }\\n\\n    function updateToolbox(IToolbox _toolbox) external onlyOwner {\\n        Toolbox = _toolbox;\\n\\n        emit UpdateToolbox(address(_toolbox));\\n    }\\n\\n    function updateDistribution(uint256 _distributionPigPen , uint256 _distributionVault , uint256 _distributionDogsLP) external onlyOwner {\\n        require(_distributionPigPen <= 10000 && _distributionVault <= 10000 && _distributionDogsLP <= 10000);\\n        distributionPigPen = _distributionPigPen;\\n        distributionVault = _distributionVault;\\n        distributionDogsLP = _distributionDogsLP;\\n    }\\n\\n    function updateAddDogsLiquidityHelper(IDogsExchangeHelper _dogsExchangeHelper) external onlyOwner {\\n        DogsExchangeHelper = _dogsExchangeHelper;\\n        _approveTokenIfNeeded(dogsV2Address, address(_dogsExchangeHelper));\\n        _approveTokenIfNeeded(busdCurrencyAddress, address(_dogsExchangeHelper));\\n    }\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount, address _to) external onlyOwner {\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/FeeMangerDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\ninterface WethLike {\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n}\\n\\ncontract FeeManagerDogs is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public dogsSwapThreshold = 50 ether;\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant bnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address public dogsV2Address;\\n\\n    address public vaultBUSDaddress = 0x68Bdc7b480d5b4df3bB086Cc3f33b0AEf52F7d55;\\n    address public vaultBNBaddress;\\n    \\n    uint256 feeDistribution = 33;\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n\\n    address[] pathDogsBusd;\\n    address[] pathDogsBNB;\\n\\n    receive() external payable {}\\n\\n    constructor(address _dogsV2Address, address _vaultBNBaddress){\\n        dogsV2Address = _dogsV2Address;\\n        vaultBNBaddress = _vaultBNBaddress;\\n        _approveTokenIfNeeded(_dogsV2Address);\\n\\n        pathDogsBusd = _createRoute(dogsV2Address, busdCurrencyAddress);\\n        pathDogsBNB = _createRoute(dogsV2Address, bnbCurrencyAddress);\\n    }\\n\\n    // Modifiers\\n    modifier onlyDogsToken() {\\n        require(dogsV2Address == msg.sender, \\\"dogsToken only\\\");\\n        _;\\n    }\\n\\n    // Events\\n    event DepositFeeConvertedToBUSD(address indexed inputToken, uint256 inputAmount, uint256 busdInstant, uint256 busdVault);\\n    event UpdateVault(address indexed vaultAddress);\\n    event UpdatePigPen(address indexed pigpenAddress);\\n    event UpdateDogsToken(address indexed dogsTokenAddress);\\n    event UpdateLiquidationThreshold(uint256 indexed threshold);\\n\\n    // EXTERNAL FUNCTIONS\\n    function liquefyDogs() external onlyDogsToken {\\n\\n        uint256 totalTokenBalance = IERC20(dogsV2Address).balanceOf(address(this));\\n\\n        if (totalTokenBalance < dogsSwapThreshold){\\n            return;\\n        }\\n        \\n        uint256 busdVaultAllocation = (((totalTokenBalance * 1e4) * feeDistribution)/100) / 1e4; // 33% of dogs go to BUSD Vault\\n        uint256 bnbVaultAllocation  = totalTokenBalance - busdVaultAllocation; // 67% of dogs go to  BNB Vault\\n\\n        convertTokenToBUSD(busdVaultAllocation);\\n        convertTokenToBNB(bnbVaultAllocation);\\n\\n        _distributeDepositFeeBusd();\\n        _distributeDepositFeeBNB();\\n\\n    }\\n\\n    function _distributeDepositFeeBusd() internal {\\n        uint256 totalBusdBalance = IERC20(busdCurrencyAddress).balanceOf(address(this));\\n        IERC20(busdCurrencyAddress).transfer(vaultBUSDaddress, totalBusdBalance);\\n\\n    }\\n\\n    function _distributeDepositFeeBNB() internal {\\n        uint256 totalwBnbBalance = IERC20(bnbCurrencyAddress).balanceOf(address(this));\\n        WethLike(bnbCurrencyAddress).withdraw(totalwBnbBalance);\\n        uint256 totalBNBBalance = address(this).balance;\\n        payable (vaultBNBaddress).transfer(totalBNBBalance);\\n\\n    }\\n\\n   \\n    function _getBestDogsBUSDSwapPath(uint256 _amountDogs) internal returns (address[] memory){\\n\\n        address[] memory pathDogs_BNB_BUSD = _createRoute3(dogsV2Address, bnbCurrencyAddress, busdCurrencyAddress);\\n\\n        uint256[] memory amountOutBUSD = PancakeRouter.getAmountsOut(_amountDogs, pathDogsBusd);\\n        uint256[] memory amountOutBUSDviaBNB = PancakeRouter.getAmountsOut(_amountDogs, pathDogs_BNB_BUSD);\\n\\n        if (amountOutBUSD[0] > amountOutBUSDviaBNB[0]){ \\n            return pathDogsBusd;\\n        }\\n        return pathDogs_BNB_BUSD;\\n\\n    }\\n\\n    function _getBestDogsBNBSwapPath(uint256 _amountDogs) internal returns (address[] memory){\\n\\n        address[] memory pathDogs_BUSD_BNB = _createRoute3(dogsV2Address, busdCurrencyAddress, bnbCurrencyAddress);\\n\\n        uint256[] memory amountOutBNB = PancakeRouter.getAmountsOut(_amountDogs, pathDogsBNB);\\n        uint256[] memory amountOutBNBviaBUSD = PancakeRouter.getAmountsOut(_amountDogs, pathDogs_BUSD_BNB);\\n\\n        if (amountOutBNB[0] > amountOutBNBviaBUSD[0]){ \\n            return pathDogsBNB;\\n        }\\n        return pathDogs_BUSD_BNB;\\n\\n    }\\n\\n    function convertTokenToBUSD(uint256 amount) internal {\\n\\n        address[] memory bestPath = _getBestDogsBUSDSwapPath(amount);\\n\\n        // make the swap\\n        PancakeRouter.swapExactTokensForTokens(\\n            amount,\\n            0, // accept any amount  of tokens\\n            bestPath,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function convertTokenToBNB(uint256 amount) internal {\\n\\n        address[] memory bestPath = _getBestDogsBNBSwapPath(amount);\\n\\n        // make the swap\\n        PancakeRouter.swapExactTokensForTokens(\\n            amount,\\n            0, // accept any amount of tokens\\n            bestPath,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n\\n    function _approveTokenIfNeeded(address token) private {\\n        if (IERC20(token).allowance(address(this), address(PancakeRouter)) == 0) {\\n            IERC20(token).safeApprove(address(PancakeRouter), type(uint256).max);\\n        }\\n    }\\n\\n    function _createRoute(address _from, address _to) internal returns(address[] memory){\\n        address[] memory path = new address[](2);\\n        path[0] = _from;\\n        path[1] = _to;\\n        return path;\\n    }\\n\\n    function _createRoute3(address _from, address _mid, address _to) internal returns(address[] memory){\\n        address[] memory path = new address[](3);\\n        path[0] = _from;\\n        path[1] = _mid;\\n        path[2] = _to;\\n        return path;\\n    }\\n\\n    // ADMIN FUNCTIONS\\n    function updateVaultAddress(address _vaultBUSDaddress, address _vaultBNBaddress) external onlyOwner {\\n        vaultBUSDaddress = _vaultBUSDaddress;\\n        vaultBNBaddress = _vaultBNBaddress;\\n\\n        //        emit UpdateVault(_newVault);\\n    }\\n\\n    function updateDogsTokenAddress(address _dogsToken) external onlyOwner {\\n        dogsV2Address = _dogsToken;\\n        _approveTokenIfNeeded(_dogsToken);\\n        pathDogsBusd = _createRoute(_dogsToken, busdCurrencyAddress);\\n        pathDogsBNB = _createRoute(_dogsToken, bnbCurrencyAddress);\\n\\n        emit UpdateDogsToken(_dogsToken);\\n    }\\n\\n    function updateFeeDistrib(uint256 distrib) external onlyOwner {\\n        feeDistribution = distrib;\\n    }\\n\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount, address _to) external onlyOwner {\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function updateLiquidationThreshold(uint256 _threshold) external onlyOwner {\\n        dogsSwapThreshold = _threshold;\\n\\n        emit UpdateLiquidationThreshold(_threshold);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/FounderStakerV2.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPigPen.sol\\\";\\n\\ncontract FounderStakerV2 is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20  public pigsV2Token = IERC20(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    IPigPen public PigPen = IPigPen(0x1f8a98bE5C102D145aC672ded99C5bE0330d7e4F);\\n    bool public shouldAutoCompound = true;\\n    uint256 public depositThreshold = 1e18;\\n\\n    event FounderDeposit(address indexed user, uint256 amount);\\n    event FounderHarvest();\\n    event FounderWithdraw(address indexed user);\\n    event FounderEmergencyWithdraw(address indexed user);\\n\\n    constructor(){\\n        pigsV2Token.approve(address(PigPen), type(uint256).max);\\n    }\\n\\n    function depositFounderPigs() external  {\\n        uint256 balance = pigsV2Token.balanceOf(address(this));\\n        if (balance > depositThreshold){\\n        PigPen.claimRewards(shouldAutoCompound);\\n        PigPen.deposit(balance);\\n            emit FounderDeposit(address(this), balance);    \\n        }\\n    }\\n\\n    function claimRewards(bool _shouldCompound) external onlyOwner {\\n        PigPen.claimRewards(_shouldCompound);\\n        emit FounderHarvest();\\n    }\\n\\n    function withdrawTokens(address _token, uint256 _amount, address _to) external onlyOwner {\\n        require(_token != address(pigsV2Token), \\\"cant withdraw pigs\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function burnTokens(uint256 _amount) external onlyOwner {\\n        IERC20(pigsV2Token).safeTransfer(0x000000000000000000000000000000000000dEaD, _amount);\\n    }\\n\\n    // ADMIN FUNCTIONS\\n    function setPigPenAddress(IPigPen _pigpen) external onlyOwner {\\n        require(address(_pigpen) != address(0), 'zero address');\\n        PigPen = _pigpen;\\n        pigsV2Token.approve(address(_pigpen), type(uint256).max);\\n    }\\n\\n    function setPigsToken(IERC20 _pigsToken) external onlyOwner {\\n        require(address(_pigsToken) != address(0), 'zero address');\\n        pigsV2Token = _pigsToken;\\n        pigsV2Token.approve(address(PigPen), type(uint256).max);\\n    }\\n\\n    function updateDepositThreshold(uint256 _depositThreshold) external onlyOwner {\\n        depositThreshold = _depositThreshold;\\n    }\\n\\n    function updateShouldCompound(bool _shouldAutoCompound) external onlyOwner {\\n        shouldAutoCompound = _shouldAutoCompound;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICakePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICakePool {\\n    function poolLength() external view returns (uint256);\\n\\n    function userInfo() external view returns (uint256);\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n    external\\n    view\\n    returns (uint256);\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (uint256);\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _amount, uint256 _lockDuration) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdrawByAmount(uint256 _amount) external;\\n\\n    function withdrawAll() external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDDSCA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDDSCA {\\r\\n  enum EmissionRate {SLOW, MEDIUM, FAST, FASTEST}\\r\\n  function ActiveEmissionIndex (  ) external view returns ( uint8 );\\r\\n  function bottomPriceInCents (  ) external view returns ( uint256 );\\r\\n  function checkIfUpdateIsNeeded ( uint256 priceInCents ) external view returns ( bool, EmissionRate );\\r\\n  function emissionEndBlock (  ) external view returns ( uint256 );\\r\\n  function emissionStartBlock (  ) external view returns ( uint256 );\\r\\n  function getEmissionStage ( uint256 currentPriceCents ) external view returns ( uint8 );\\r\\n  function isInitialized (  ) external view returns ( bool );\\r\\n  function masterchef (  ) external view returns ( address );\\r\\n  function maxEmissionRate (  ) external view returns ( uint256 );\\r\\n  function owner (  ) external view returns ( address );\\r\\n  function renounceOwnership (  ) external;\\r\\n  function setFarmEndBlock ( uint256 _newEndBlock ) external;\\r\\n  function _setFarmStartBlock(uint256 _newStartBlock) external;\\r\\n  function token (  ) external view returns ( address );\\r\\n  function tokenPerBlock (  ) external view returns ( uint256 );\\r\\n  function topPriceInCents (  ) external view returns ( uint256 );\\r\\n  function transferOwnership ( address newOwner ) external;\\r\\n  function updateDDSCAMaxEmissionRate ( uint256 _maxEmissionRate ) external;\\r\\n  function updateDDSCAPriceRange ( uint256 _topPrice, uint256 _bottomPrice ) external;\\r\\n  function updateEmissions ( EmissionRate _newEmission ) external;\\r\\n  function updateMcAddress ( address _mcAddress ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDogPound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILoyalityPool {\\n    function totalTaxReduction(address _user, uint256 _stakeID) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDogPoundActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDogPoundActions{\\n    function doSwap(address _from, uint256 _amount, uint256 _taxReduction, address[] memory path) external;\\n    function doTransfer(address _from, address _to, uint256 _amount, uint256 _taxReduction) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDogPoundManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDogPoundManager{\\n    function getAutoPoolSize() external view returns (uint256);\\n   \\n}\"\r\n    },\r\n    \"contracts/interfaces/IDogsExchangeHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDogsExchangeHelper {\\n    function addDogsBNBLiquidity(uint256 nativeAmount) external payable returns (uint256 lpAmount, uint256 unusedEth, uint256 unusedToken);\\n    function addDogsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 dogsAmount) external returns (uint256 lpAmount, uint256 unusedEth, uint256 unusedToken);\\n    function buyDogsBNB(uint256 _minAmountOut, address[] memory _path) external payable returns(uint256 amountDogsBought);\\n    function buyDogs(uint256 _tokenAmount, uint256 _minAmountOut, address[] memory _path) external returns(uint256 amountDogsBought);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDogsToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IDogsToken is IERC20{\\n    function updateTransferTaxRate(uint256 _txBaseTax) external;\\n    function updateTransferTaxRateToDefault() external;\\n    function burn(uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDogsTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDogsTokenV2 {\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeeManager {\\n\\n    function swapDepositFeeForBUSD(address token, bool isLPToken) external;\\n    function convertDepositFeesToBUSD(address token, bool isLPToken, bool isLiquidation) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFeeManagerDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IFeeManagerDogs {\\n\\n    function liquefyDogs() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFounderStakerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFounderStakerV2{\\r\\n    function depositFounderPigs() external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMasterchefDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMasterchefDogs {\\n\\n    function depositMigrator(address _userAddress, uint256 _pid, uint256 _amount, address _referrer) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMasterchefPigs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMasterchefPigs {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function pendingPigs(uint256 _pid, address _user) external view returns (uint256);\\n    function depositMigrator(address _userAddress, uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IMasterChefV3.sol\": {\r\n      \"content\": \"// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!\\npragma abicoder v2;\\n\\ninterface IMasterChefV3 {\\n    event AddPool(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        address indexed v3Pool,\\n        address indexed lmPool\\n    );\\n    event Deposit(\\n        address indexed from,\\n        uint256 indexed pid,\\n        uint256 indexed tokenId,\\n        uint256 liquidity,\\n        int24 tickLower,\\n        int24 tickUpper\\n    );\\n    event Harvest(\\n        address indexed sender,\\n        address to,\\n        uint256 indexed pid,\\n        uint256 indexed tokenId,\\n        uint256 reward\\n    );\\n    event NewLMPoolDeployerAddress(address deployer);\\n    event NewOperatorAddress(address operator);\\n    event NewPeriodDuration(uint256 periodDuration);\\n    event NewReceiver(address receiver);\\n    event NewUpkeepPeriod(\\n        uint256 indexed periodNumber,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 cakePerSecond,\\n        uint256 cakeAmount\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event SetEmergency(bool emergency);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdateFarmBoostContract(address indexed farmBoostContract);\\n    event UpdateLiquidity(\\n        address indexed from,\\n        uint256 indexed pid,\\n        uint256 indexed tokenId,\\n        int128 liquidity,\\n        int24 tickLower,\\n        int24 tickUpper\\n    );\\n    event UpdateUpkeepPeriod(\\n        uint256 indexed periodNumber,\\n        uint256 oldEndTime,\\n        uint256 newEndTime,\\n        uint256 remainingCake\\n    );\\n    event Withdraw(\\n        address indexed from,\\n        address to,\\n        uint256 indexed pid,\\n        uint256 indexed tokenId\\n    );\\n\\n    function BOOST_PRECISION() external view returns (uint256);\\n\\n    function CAKE() external view returns (address);\\n\\n    function FARM_BOOSTER() external view returns (address);\\n\\n    function LMPoolDeployer() external view returns (address);\\n\\n    function MAX_BOOST_PRECISION() external view returns (uint256);\\n\\n    function MAX_DURATION() external view returns (uint256);\\n\\n    function MIN_DURATION() external view returns (uint256);\\n\\n    function PERIOD_DURATION() external view returns (uint256);\\n\\n    function PRECISION() external view returns (uint256);\\n\\n    function WETH() external view returns (address);\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _v3Pool,\\n        bool _withUpdate\\n    ) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function burn(uint256 _tokenId) external;\\n\\n    function cakeAmountBelongToMC() external view returns (uint256);\\n\\n    function collect(\\n        INonfungiblePositionManagerStruct.CollectParams memory params\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function collectTo(\\n        INonfungiblePositionManagerStruct.CollectParams memory params,\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function decreaseLiquidity(\\n        INonfungiblePositionManagerStruct.DecreaseLiquidityParams memory params\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function emergency() external view returns (bool);\\n\\n    function getLatestPeriodInfo(\\n        address _v3Pool\\n    ) external view returns (uint256 cakePerSecond, uint256 endTime);\\n\\n    function getLatestPeriodInfoByPid(\\n        uint256 _pid\\n    ) external view returns (uint256 cakePerSecond, uint256 endTime);\\n\\n    function harvest(\\n        uint256 _tokenId,\\n        address _to\\n    ) external returns (uint256 reward);\\n\\n    function increaseLiquidity(\\n        INonfungiblePositionManagerStruct.IncreaseLiquidityParams memory params\\n    )\\n        external\\n        payable\\n        returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n    function latestPeriodCakePerSecond() external view returns (uint256);\\n\\n    function latestPeriodEndTime() external view returns (uint256);\\n\\n    function latestPeriodNumber() external view returns (uint256);\\n\\n    function latestPeriodStartTime() external view returns (uint256);\\n\\n    function multicall(\\n        bytes[] memory data\\n    ) external payable returns (bytes[] memory results);\\n\\n    function nonfungiblePositionManager() external view returns (address);\\n\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes memory\\n    ) external returns (bytes4);\\n\\n    function operatorAddress() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingCake(\\n        uint256 _tokenId\\n    ) external view returns (uint256 reward);\\n\\n    function poolInfo(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 allocPoint,\\n            address v3Pool,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            uint256 totalLiquidity,\\n            uint256 totalBoostLiquidity\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function receiver() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n\\n    function setEmergency(bool _emergency) external;\\n\\n    function setLMPoolDeployer(address _LMPoolDeployer) external;\\n\\n    function setOperator(address _operatorAddress) external;\\n\\n    function setPeriodDuration(uint256 _periodDuration) external;\\n\\n    function setReceiver(address _receiver) external;\\n\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external;\\n\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external;\\n\\n    function updateBoostMultiplier(\\n        uint256 _tokenId,\\n        uint256 _newMultiplier\\n    ) external;\\n\\n    function updateFarmBoostContract(address _newFarmBoostContract) external;\\n\\n    function updateLiquidity(uint256 _tokenId) external;\\n\\n    function updatePools(uint256[] memory pids) external;\\n\\n    function upkeep(\\n        uint256 _amount,\\n        uint256 _duration,\\n        bool _withUpdate\\n    ) external;\\n\\n    function userPositionInfos(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint128 boostLiquidity,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint256 rewardGrowthInside,\\n            uint256 reward,\\n            address user,\\n            uint256 pid,\\n            uint256 boostMultiplier\\n        );\\n\\n    function v3PoolAddressPid(address) external view returns (uint256);\\n\\n    function withdraw(\\n        uint256 _tokenId,\\n        address _to\\n    ) external returns (uint256 reward);\\n\\n    receive() external payable;\\n}\\n\\ninterface INonfungiblePositionManagerStruct {\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"contract IERC20\\\",\\\"name\\\":\\\"_CAKE\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"contract INonfungiblePositionManager\\\",\\\"name\\\":\\\"_nonfungiblePositionManager\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_WETH\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pid\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"DuplicatedPool\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InconsistentAmount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InsufficientAmount\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidNFT\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidPeriodDuration\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"InvalidPid\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NoBalance\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NoLMPool\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NoLiquidity\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NotEmpty\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NotOwner\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NotOwnerOrOperator\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"NotPancakeNFT\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"WrongReceiver\\\",\\\"type\\\":\\\"error\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"ZeroAddress\\\",\\\"type\\\":\\\"error\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pid\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"allocPoint\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"contract IPancakeV3Pool\\\",\\\"name\\\":\\\"v3Pool\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"contract ILMPool\\\",\\\"name\\\":\\\"lmPool\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"AddPool\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pid\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickLower\\\",\\\"type\\\":\\\"int24\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickUpper\\\",\\\"type\\\":\\\"int24\\\"}],\\\"name\\\":\\\"Deposit\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pid\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reward\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Harvest\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"deployer\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"NewLMPoolDeployerAddress\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"NewOperatorAddress\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"periodDuration\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"NewPeriodDuration\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"NewReceiver\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"periodNumber\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"startTime\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"endTime\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"cakePerSecond\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"cakeAmount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"NewUpkeepPeriod\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"previousOwner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"OwnershipTransferred\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"emergency\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"SetEmergency\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pid\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"allocPoint\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetPool\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"farmBoostContract\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"UpdateFarmBoostContract\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pid\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"int128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"int128\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickLower\\\",\\\"type\\\":\\\"int24\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickUpper\\\",\\\"type\\\":\\\"int24\\\"}],\\\"name\\\":\\\"UpdateLiquidity\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"periodNumber\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"oldEndTime\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"newEndTime\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"remainingCake\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"UpdateUpkeepPeriod\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pid\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Withdraw\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"BOOST_PRECISION\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"CAKE\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract IERC20\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"FARM_BOOSTER\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract IFarmBooster\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"LMPoolDeployer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract ILMPoolDeployer\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"MAX_BOOST_PRECISION\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"MAX_DURATION\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"MIN_DURATION\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"PERIOD_DURATION\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"PRECISION\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"WETH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_allocPoint\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"contract IPancakeV3Pool\\\",\\\"name\\\":\\\"_v3Pool\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"_withUpdate\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"add\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"burn\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"cakeAmountBelongToMC\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"amount0Max\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"amount1Max\\\",\\\"type\\\":\\\"uint128\\\"}],\\\"internalType\\\":\\\"struct INonfungiblePositionManagerStruct.CollectParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"collect\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"amount0Max\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"amount1Max\\\",\\\"type\\\":\\\"uint128\\\"}],\\\"internalType\\\":\\\"struct INonfungiblePositionManagerStruct.CollectParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"collectTo\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct INonfungiblePositionManagerStruct.DecreaseLiquidityParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"decreaseLiquidity\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"emergency\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_v3Pool\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"getLatestPeriodInfo\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"cakePerSecond\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"endTime\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_pid\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getLatestPeriodInfoByPid\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"cakePerSecond\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"endTime\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_to\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"harvest\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reward\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Desired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Desired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct INonfungiblePositionManagerStruct.IncreaseLiquidityParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"increaseLiquidity\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"latestPeriodCakePerSecond\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"latestPeriodEndTime\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"latestPeriodNumber\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"latestPeriodStartTime\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes[]\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes[]\\\"}],\\\"name\\\":\\\"multicall\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes[]\\\",\\\"name\\\":\\\"results\\\",\\\"type\\\":\\\"bytes[]\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"nonfungiblePositionManager\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"contract INonfungiblePositionManager\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"onERC721Received\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes4\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes4\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"operatorAddress\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"owner\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"pendingCake\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reward\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"poolInfo\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"allocPoint\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"contract IPancakeV3Pool\\\",\\\"name\\\":\\\"v3Pool\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token0\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token1\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint24\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint24\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"totalLiquidity\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"totalBoostLiquidity\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"poolLength\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"receiver\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"renounceOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_pid\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_allocPoint\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"_withUpdate\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"_emergency\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setEmergency\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"contract ILMPoolDeployer\\\",\\\"name\\\":\\\"_LMPoolDeployer\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setLMPoolDeployer\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_operatorAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setOperator\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_periodDuration\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setPeriodDuration\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_receiver\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setReceiver\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountMinimum\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"sweepToken\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"tokenOfOwnerByIndex\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalAllocPoint\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newOwner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"transferOwnership\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountMinimum\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"unwrapWETH9\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_newMultiplier\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"updateBoostMultiplier\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_newFarmBoostContract\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"updateFarmBoostContract\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"updateLiquidity\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"pids\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"name\\\":\\\"updatePools\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_duration\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"_withUpdate\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"upkeep\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"userPositionInfos\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"boostLiquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickLower\\\",\\\"type\\\":\\\"int24\\\"},{\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickUpper\\\",\\\"type\\\":\\\"int24\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"rewardGrowthInside\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reward\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"user\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pid\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"boostMultiplier\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"v3PoolAddressPid\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_to\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reward\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"receive\\\"}]\\n*/\\n\"\r\n    },\r\n    \"contracts/interfaces/INonfungiblePositionManager.sol\": {\r\n      \"content\": \"// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface INonfungiblePositionManager {\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n    event Collect(\\n        uint256 indexed tokenId,\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event DecreaseLiquidity(\\n        uint256 indexed tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event IncreaseLiquidity(\\n        uint256 indexed tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n    function WETH9() external view returns (address);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function baseURI() external pure returns (string memory);\\n\\n    function burn(uint256 tokenId) external payable;\\n\\n    function collect(CollectParams memory params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function createAndInitializePoolIfNecessary(\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        uint160 sqrtPriceX96\\n    ) external payable returns (address pool);\\n\\n    function decreaseLiquidity(DecreaseLiquidityParams memory params)\\n        external\\n        payable\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function deployer() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function increaseLiquidity(IncreaseLiquidityParams memory params)\\n        external\\n        payable\\n        returns (\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    function mint(MintParams memory params)\\n        external\\n        payable\\n        returns (\\n            uint256 tokenId,\\n            uint128 liquidity,\\n            uint256 amount0,\\n            uint256 amount1\\n        );\\n\\n    function multicall(bytes[] memory data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n\\n    function name() external view returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function pancakeV3MintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes memory data\\n    ) external;\\n\\n    function permit(\\n        address spender,\\n        uint256 tokenId,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function refundETH() external payable;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) external;\\n\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    function unwrapWETH9(uint256 amountMinimum, address recipient)\\n        external\\n        payable;\\n\\n    receive() external payable;\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_deployer\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_factory\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_WETH9\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_tokenDescriptor_\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Approval\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"ApprovalForAll\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Collect\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"DecreaseLiquidity\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"IncreaseLiquidity\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Transfer\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DOMAIN_SEPARATOR\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"PERMIT_TYPEHASH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"WETH9\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"approve\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"baseURI\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"pure\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"burn\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"amount0Max\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"amount1Max\\\",\\\"type\\\":\\\"uint128\\\"}],\\\"internalType\\\":\\\"struct INonfungiblePositionManager.CollectParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"collect\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token0\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token1\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint24\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint24\\\"},{\\\"internalType\\\":\\\"uint160\\\",\\\"name\\\":\\\"sqrtPriceX96\\\",\\\"type\\\":\\\"uint160\\\"}],\\\"name\\\":\\\"createAndInitializePoolIfNecessary\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"pool\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct INonfungiblePositionManager.DecreaseLiquidityParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"decreaseLiquidity\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"deployer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"factory\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getApproved\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Desired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Desired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct INonfungiblePositionManager.IncreaseLiquidityParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"increaseLiquidity\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"isApprovedForAll\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token0\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token1\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint24\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint24\\\"},{\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickLower\\\",\\\"type\\\":\\\"int24\\\"},{\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickUpper\\\",\\\"type\\\":\\\"int24\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Desired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Desired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Min\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct INonfungiblePositionManager.MintParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"mint\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes[]\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes[]\\\"}],\\\"name\\\":\\\"multicall\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes[]\\\",\\\"name\\\":\\\"results\\\",\\\"type\\\":\\\"bytes[]\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"name\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"ownerOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount0Owed\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount1Owed\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"pancakeV3MintCallback\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"permit\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"positions\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint96\\\",\\\"name\\\":\\\"nonce\\\",\\\"type\\\":\\\"uint96\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token0\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token1\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint24\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint24\\\"},{\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickLower\\\",\\\"type\\\":\\\"int24\\\"},{\\\"internalType\\\":\\\"int24\\\",\\\"name\\\":\\\"tickUpper\\\",\\\"type\\\":\\\"int24\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"feeGrowthInside0LastX128\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"feeGrowthInside1LastX128\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"tokensOwed0\\\",\\\"type\\\":\\\"uint128\\\"},{\\\"internalType\\\":\\\"uint128\\\",\\\"name\\\":\\\"tokensOwed1\\\",\\\"type\\\":\\\"uint128\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"refundETH\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"safeTransferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"_data\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"safeTransferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"selfPermit\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"nonce\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"expiry\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"selfPermitAllowed\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"nonce\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"expiry\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"selfPermitAllowedIfNecessary\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"selfPermitIfNecessary\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"operator\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approved\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setApprovalForAll\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes4\\\",\\\"name\\\":\\\"interfaceId\\\",\\\"type\\\":\\\"bytes4\\\"}],\\\"name\\\":\\\"supportsInterface\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountMinimum\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"sweepToken\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"symbol\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"tokenByIndex\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"tokenOfOwnerByIndex\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"tokenURI\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"string\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"totalSupply\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"tokenId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"transferFrom\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountMinimum\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"recipient\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"unwrapWETH9\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"receive\\\"}]\\n*/\"\r\n    },\r\n    \"contracts/interfaces/IPancakeFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface IPancakeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPancakeRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IPancakeRouterV2 {\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function factory() external view returns (address);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] memory path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] memory path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    receive() external payable;\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_factory\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_WETH\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"WETH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenA\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenB\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountADesired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountBDesired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountAMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountBMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"addLiquidity\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountA\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountB\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountTokenDesired\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountTokenMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETHMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"addLiquidityETH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountToken\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETH\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"factory\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reserveIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reserveOut\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getAmountIn\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"pure\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reserveIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reserveOut\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"getAmountOut\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"pure\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"getAmountsIn\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"}],\\\"name\\\":\\\"getAmountsOut\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountA\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reserveA\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"reserveB\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"quote\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountB\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"pure\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenA\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenB\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountAMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountBMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"removeLiquidity\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountA\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountB\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountTokenMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETHMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"removeLiquidityETH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountToken\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETH\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountTokenMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETHMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"removeLiquidityETHSupportingFeeOnTransferTokens\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETH\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountTokenMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETHMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approveMax\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"removeLiquidityETHWithPermit\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountToken\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETH\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"token\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountTokenMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETHMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approveMax\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountETH\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenA\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenB\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"liquidity\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountAMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountBMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"approveMax\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"removeLiquidityWithPermit\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountA\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountB\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapETHForExactTokens\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOutMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapExactETHForTokens\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOutMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapExactETHForTokensSupportingFeeOnTransferTokens\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOutMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapExactTokensForETH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOutMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapExactTokensForETHSupportingFeeOnTransferTokens\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOutMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapExactTokensForTokens\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOutMin\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapExactTokensForTokensSupportingFeeOnTransferTokens\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountInMax\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapTokensForExactETH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountInMax\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"swapTokensForExactTokens\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256[]\\\",\\\"name\\\":\\\"amounts\\\",\\\"type\\\":\\\"uint256[]\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"receive\\\"}]\\n*/\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeswapFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeswapFarm {\\n    function poolLength() external view returns (uint256);\\n\\n    function userInfo() external view returns (uint256);\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n    external\\n    view\\n    returns (uint256);\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingCake(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (uint256);\\n\\n    // Deposit LP tokens to MasterChef for CAKE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    // Stake CAKE tokens to MasterChef\\n    function enterStaking(uint256 _amount) external;\\n\\n    // Withdraw CAKE tokens from STAKING.\\n    function leaveStaking(uint256 _amount) external;\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPancakeV3Optimizer.sol\": {\r\n      \"content\": \"interface IPancakeV3Optimizer {\\n    function totalSupply() external view returns (uint256);\\n\\n    function shareCount(address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPancakeV3OptimizerDistribution.sol\": {\r\n      \"content\": \"interface IPancakeV3OptimizerDistribution {\\n    function claimDogsRewards(address _user) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPigPen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPigPen {\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 busdRewardDebt;\\n        uint256 pigsRewardDebt;\\n        uint256 startLockTimestamp;\\n    }\\n\\n    function deposit(uint256 _amount) external;\\n    function claimRewards(bool _shouldCompound) external;\\n    function withdraw() external;\\n    function emergencyWithdraw() external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPigsToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPigsToken {\\n\\n    function mint(address _to, uint256 _amount) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IQuoterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!\\npragma experimental ABIEncoderV2;\\n\\ninterface IQuoterV2 {\\n    struct QuoteExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint24 fee;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n\\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160 sqrtPriceX96After,\\n            uint32 initializedTicksCrossed,\\n            uint256 gasEstimate\\n        );\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_deployer\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_factory\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"_WETH9\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"WETH9\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"deployer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"factory\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"int256\\\",\\\"name\\\":\\\"amount0Delta\\\",\\\"type\\\":\\\"int256\\\"},{\\\"internalType\\\":\\\"int256\\\",\\\"name\\\":\\\"amount1Delta\\\",\\\"type\\\":\\\"int256\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"pancakeV3SwapCallback\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"bytes\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"quoteExactInput\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint160[]\\\",\\\"name\\\":\\\"sqrtPriceX96AfterList\\\",\\\"type\\\":\\\"uint160[]\\\"},{\\\"internalType\\\":\\\"uint32[]\\\",\\\"name\\\":\\\"initializedTicksCrossedList\\\",\\\"type\\\":\\\"uint32[]\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasEstimate\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenIn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenOut\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint24\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint24\\\"},{\\\"internalType\\\":\\\"uint160\\\",\\\"name\\\":\\\"sqrtPriceLimitX96\\\",\\\"type\\\":\\\"uint160\\\"}],\\\"internalType\\\":\\\"struct IQuoterV2.QuoteExactInputSingleParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"quoteExactInputSingle\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint160\\\",\\\"name\\\":\\\"sqrtPriceX96After\\\",\\\"type\\\":\\\"uint160\\\"},{\\\"internalType\\\":\\\"uint32\\\",\\\"name\\\":\\\"initializedTicksCrossed\\\",\\\"type\\\":\\\"uint32\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasEstimate\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"path\\\",\\\"type\\\":\\\"bytes\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountOut\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"quoteExactOutput\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint160[]\\\",\\\"name\\\":\\\"sqrtPriceX96AfterList\\\",\\\"type\\\":\\\"uint160[]\\\"},{\\\"internalType\\\":\\\"uint32[]\\\",\\\"name\\\":\\\"initializedTicksCrossedList\\\",\\\"type\\\":\\\"uint32[]\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasEstimate\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenIn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"tokenOut\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint24\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint24\\\"},{\\\"internalType\\\":\\\"uint160\\\",\\\"name\\\":\\\"sqrtPriceLimitX96\\\",\\\"type\\\":\\\"uint160\\\"}],\\\"internalType\\\":\\\"struct IQuoterV2.QuoteExactOutputSingleParams\\\",\\\"name\\\":\\\"params\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"name\\\":\\\"quoteExactOutputSingle\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amountIn\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint160\\\",\\\"name\\\":\\\"sqrtPriceX96After\\\",\\\"type\\\":\\\"uint160\\\"},{\\\"internalType\\\":\\\"uint32\\\",\\\"name\\\":\\\"initializedTicksCrossed\\\",\\\"type\\\":\\\"uint32\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasEstimate\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\\n*/\"\r\n    },\r\n    \"contracts/interfaces/IReferralSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReferralSystem {\\n    /**\\n     * @dev Record referral.\\n     */\\n    function recordReferral(address user, address referrer) external;\\n\\n    /**\\n     * @dev Record referral commission.\\n     */\\n    function recordReferralCommission(address referrer, uint256 commission) external;\\n\\n    /**\\n     * @dev Get the referrer address that referred the user.\\n     */\\n    function getReferrer(address user) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRewardsVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsVault {\\n\\n    function payoutDivs()\\n    external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakeManager {\\n    \\n    struct UserInfo {\\n\\n        uint256 totalStakedDefault; //linear\\n        uint256 totalStakedAutoCompound;\\n\\n        uint256 walletStartTime;\\n        uint256 overThresholdTimeCounter;\\n\\n        uint256 activeStakesCount;\\n        uint256 withdrawStakesCount;\\n\\n        mapping(uint256 => StakeInfo) activeStakes;\\n        mapping(uint256 => WithdrawnStakeInfo) withdrawnStakes;\\n\\n    }\\n\\n    struct WithdrawnStakeInfo {\\n        uint256 amount;\\n        uint256 taxReduction;\\n    }\\n\\n\\n    struct StakeInfo {\\n        uint256 amount;\\n        uint256 startTime;\\n        bool isAutoPool;\\n    } // todo find a way to refactor\\n\\n    function saveStake(address _user, uint256 _amount, bool isAutoCompound) external;\\n    function withdrawFromStake(address _user,uint256 _amount, uint256 _stakeID) external;\\n    function getUserStake(address _user, uint256 _stakeID) external view returns (StakeInfo memory);\\n    function getActiveStakeTaxReduction(address _user, uint256 _stakeID) external view returns (uint256);\\n    function getWithdrawnStakeTaxReduction(address _user, uint256 _stakeID) external view returns (uint256);\\n    function isStakeAutoPool(address _user, uint256 _stakeID) external view returns (bool);\\n    function totalStaked(address _user) external view returns (uint256);\\n    function utilizeWithdrawnStake(address _user, uint256 _amount, uint256 _stakeID) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStrategy {\\n    // Total want tokens managed by strategy\\n    function wantLockedTotal() external view returns (uint256);\\n\\n    // Main want token compounding function\\n    function earn() external;\\n\\n    // Transfer want tokens MasterChefV2 -> strategy\\n    function deposit(uint256 _wantAmt)\\n    external\\n    returns (uint256);\\n\\n    // Transfer want tokens strategy -> MasterChefV2\\n    function withdraw(uint256 _wantAmt)\\n    external\\n    returns (uint256);\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITestingDummyMC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITestingDummyMC {\\n\\n    function updateMassUsers(address[] memory _users, uint256[] memory _amounts) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IToolbox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IToolbox {\\n\\n    function getTokenBUSDValue(uint256 tokenBalance, address token, bool isLPToken) external view returns (uint256);\\n\\n}\"\r\n    },\r\n    \"contracts/libs/AddLiquidityDogsHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// AddLiquidityHelper, allows anyone to add\\ncontract AddLiquidityDogsHelper is ReentrancyGuard, Ownable {\\n    using SafeERC20 for ERC20;\\n    using SafeERC20 for IERC20;\\n\\n    address public dogsTokenAddress;\\n\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    receive() external payable {}\\n\\n    event SetDogsAddresses(address dogsTokenAddress);\\n\\n    function addDogsBNBLiquidity(uint256 nativeAmount) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // Approval done when Dogs token is set...\\n\\n        // add the liquidity\\n        PancakeRouter.addLiquidityETH{value: msg.value}(\\n            dogsTokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (address(this).balance > 0) {\\n            payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        }\\n\\n        if (ERC20(dogsTokenAddress).balanceOf(address(this)) > 0)\\n            ERC20(dogsTokenAddress).transfer(msg.sender, ERC20(dogsTokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function addDogsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 dogsAmount) external nonReentrant {\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), dogsAmount);\\n\\n        // approve baseToken, Dogs token handled when set\\n        _approveTokenIfNeeded(baseTokenAddress);\\n\\n        // add the liquidity\\n        PancakeRouter.addLiquidity(\\n            baseTokenAddress,\\n            dogsTokenAddress,\\n            baseAmount,\\n            dogsAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint256 baseTokenBalance = ERC20(baseTokenAddress).balanceOf(address(this));\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        if (baseTokenBalance > 0)\\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, baseTokenBalance);\\n\\n        if (dogsTokenBalance > 0)\\n            ERC20(dogsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n    }\\n\\n    function buyDogsBNB(uint256 _minAmountOut, address[] memory _path) external nonReentrant payable {\\n        require(_path[0] == PancakeRouter.WETH(), 'invalid path');\\n        require(_path[_path.length-1] == dogsTokenAddress, 'invalid path');\\n        require(msg.value > 0, 'zero amount');\\n\\n        PancakeRouter.swapExactETHForTokens{value: msg.value}(\\n            _minAmountOut,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountDogsBought = IERC20(dogsTokenAddress).balanceOf(address(this));\\n        IERC20(dogsTokenAddress).transfer(msg.sender, amountDogsBought);\\n\\n    }\\n\\n    // expect path to be busd/dogs & bnb/dogs\\n    function buyDogs(uint256 _tokenAmount, uint256 _minAmountOut, address[] memory _path) external nonReentrant {\\n        require(_path[_path.length - 1] == dogsTokenAddress);\\n        require(_tokenAmount > 0, 'zero amount');\\n\\n        ERC20(_path[0]).safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n\\n        _approveTokenIfNeeded(_path[0]);\\n\\n        PancakeRouter.swapExactTokensForTokens(\\n            _tokenAmount,\\n            _minAmountOut,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountDogsBought = IERC20(dogsTokenAddress).balanceOf(address(this));\\n        IERC20(dogsTokenAddress).transfer(msg.sender, amountDogsBought);\\n\\n    }\\n\\n    /**\\n     * @dev set the Dogs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setDogsAddress(address _dogsTokenAddress) external onlyOwner {\\n        require(_dogsTokenAddress != address(0), \\\"_dogsTokenAddress is the zero address\\\");\\n        require(dogsTokenAddress == address(0), \\\"dogsTokenAddress already set!\\\");\\n\\n        dogsTokenAddress = _dogsTokenAddress;\\n\\n        _approveTokenIfNeeded(_dogsTokenAddress);\\n\\n        emit SetDogsAddresses(dogsTokenAddress);\\n    }\\n\\n      function _approveTokenIfNeeded(address token) private {\\n        if (IERC20(token).allowance(address(this), address(PancakeRouter)) == 0) {\\n            IERC20(token).safeApprove(address(PancakeRouter), type(uint256).max);\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libs/AddLiquidityHelperV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// AddLiquidityHelper, allows anyone to add or remove Dogs liquidity tax free\\n// Also allows the Dogs Token to do buy backs tax free via an external contract.\\ncontract AddLiquidityHelperV2 is ReentrancyGuard, Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    address public dogsTokenAddress = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    address public pigsTokenAddress;\\n\\n    IUniswapV2Router02 public constant pancakeswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address public dogsBusdPair;\\n\\n    mapping (address => bool) public LiquidityAllowanceMap;\\n\\n    receive() external payable {}\\n\\n    event SetDogsAddresses(address dogsTokenAddress, address dogsBusdPair);\\n    event SetPigsAddresses(address pigsTokenAddress);\\n    event SetRouteTokenViaBNB(address tokenAddress, bool shouldRoute);\\n\\n\\n    /**\\n     * @notice Constructs the AddLiquidityHelper contract.\\n     */\\n    constructor() {\\n        LiquidityAllowanceMap[busdCurrencyAddress] = true;\\n        LiquidityAllowanceMap[wbnbCurrencyAddress] = true;\\n        dogsBusdPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(dogsTokenAddress, busdCurrencyAddress);\\n\\n    }\\n\\n\\n    function changeLiquidityAllowanceMap(address _liquidityTokenAdress, bool _allowance) external onlyOwner{\\n        LiquidityAllowanceMap[_liquidityTokenAdress] = _allowance;\\n    }\\n\\n    function addDogsETHLiquidity(uint256 nativeAmount) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(dogsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidityETH{value: msg.value}(\\n            dogsTokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n                msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (address(this).balance > 0) {\\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\\n            payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        }\\n\\n        if (ERC20(dogsTokenAddress).balanceOf(address(this)) > 0)\\n            ERC20(dogsTokenAddress).transfer(msg.sender, ERC20(dogsTokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function addDogsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 nativeAmount) external nonReentrant {\\n        require(LiquidityAllowanceMap[baseTokenAddress]);\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(baseTokenAddress).approve(address(pancakeswapRouter), baseAmount);\\n        ERC20(dogsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidity(\\n            baseTokenAddress,\\n            dogsTokenAddress,\\n            baseAmount,\\n            nativeAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint256 baseTokenBalance = ERC20(baseTokenAddress).balanceOf(address(this));\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        if (baseTokenBalance > 0)\\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, baseTokenBalance);\\n\\n        if (dogsTokenBalance > 0)\\n            ERC20(dogsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n    }\\n\\n    function removeDogsLiquidity(address baseTokenAddress, uint256 liquidity) external nonReentrant {\\n        require(LiquidityAllowanceMap[baseTokenAddress]);\\n        address lpTokenAddress = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(baseTokenAddress, dogsTokenAddress);\\n        require(lpTokenAddress != address(0), \\\"pair hasn't been created yet, so can't remove liquidity!\\\");\\n\\n        ERC20(lpTokenAddress).safeTransferFrom(msg.sender, address(this), liquidity);\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(lpTokenAddress).approve(address(pancakeswapRouter), liquidity);\\n\\n        // add the liquidity\\n        pancakeswapRouter.removeLiquidity(\\n            baseTokenAddress,\\n            dogsTokenAddress,\\n            liquidity,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    function addPigsETHLiquidity(uint256 nativeAmount) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(pigsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(pigsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidityETH{value: msg.value}(\\n            pigsTokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (address(this).balance > 0) {\\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\\n            payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        }\\n\\n        if (ERC20(pigsTokenAddress).balanceOf(address(this)) > 0)\\n            ERC20(pigsTokenAddress).transfer(msg.sender, ERC20(pigsTokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function addPigsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 nativeAmount) external nonReentrant {\\n        require(LiquidityAllowanceMap[baseTokenAddress]);\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(pigsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(baseTokenAddress).approve(address(pancakeswapRouter), baseAmount);\\n        ERC20(pigsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidity(\\n            baseTokenAddress,\\n                pigsTokenAddress,\\n            baseAmount,\\n            nativeAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint256 baseTokenBalance = ERC20(baseTokenAddress).balanceOf(address(this));\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        if (baseTokenBalance > 0)\\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, baseTokenBalance);\\n\\n        if (dogsTokenBalance > 0)\\n            ERC20(pigsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n    }\\n\\n    function transferSlipBalance(address payable _transferAddress) external onlyOwner{\\n        _transferAddress.call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    /**\\n     * @dev set the Dogs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setDogsAddress(address _dogsTokenAddress) external onlyOwner {\\n        require(_dogsTokenAddress != address(0), \\\"_dogsTokenAddress is the zero address\\\");\\n        require(dogsTokenAddress == address(0), \\\"dogsTokenAddress already set!\\\");\\n\\n        dogsTokenAddress = _dogsTokenAddress;\\n\\n        dogsBusdPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(dogsTokenAddress, busdCurrencyAddress);\\n\\n        require(address(dogsBusdPair) != address(0), \\\"busd/dogs pair !exist\\\");\\n\\n        emit SetDogsAddresses(dogsTokenAddress, dogsBusdPair);\\n    }\\n\\n    /**\\n     * @dev set the Pigs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setPigsAddress(address _pigsTokenAddress) external onlyOwner {\\n        require(_pigsTokenAddress != address(0), \\\"_pigsTokenAddress is the zero address\\\");\\n        require(pigsTokenAddress == address(0), \\\"pigsTokenAddress already set!\\\");\\n\\n        pigsTokenAddress = _pigsTokenAddress;\\n\\n        emit SetPigsAddresses(pigsTokenAddress);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/libs/DogsExchangeHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n  import \\\"hardhat/console.sol\\\"; //todo remove\\n\\ncontract DogsExchangeHelper is ReentrancyGuard, Ownable {\\n    using SafeERC20 for ERC20;\\n    using SafeERC20 for IERC20;\\n\\n    address public dogsTokenAddress;\\n\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    receive() external payable {}\\n\\n    event SetDogsAddresses(address dogsTokenAddress);\\n\\n    constructor(address _address) {\\n        dogsTokenAddress = _address;\\n        _approveTokenIfNeeded(dogsTokenAddress);\\n    }\\n\\n    function addDogsBNBLiquidity(uint256 nativeAmount) external payable nonReentrant returns (\\n        uint256 lpAmount,\\n        uint256 unusedEth,\\n        uint256 unusedToken\\n    ){\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // Approval done when Dogs token is set...\\n\\n        address lpTokenAddress = IUniswapV2Factory(PancakeRouter.factory()).getPair(PancakeRouter.WETH(), dogsTokenAddress);\\n\\n\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::PancakeRouter.WETH()\\\", PancakeRouter.WETH());\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::lpTokenAddress\\\", lpTokenAddress);\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::nativeAmount\\\", nativeAmount);\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::msg.value\\\", msg.value);\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::msg.sender\\\", msg.sender);\\n\\n        // add the liquidity\\n        (uint256 usedToken, uint256 usedEth, uint256 lpValue) = PancakeRouter.addLiquidityETH{value: msg.value}(\\n            dogsTokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        lpAmount = lpValue;\\n        unusedToken = nativeAmount - usedToken;\\n        unusedEth = msg.value - usedEth;\\n\\n        uint256 lp_balance = IERC20(lpTokenAddress).balanceOf(address(this));\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::lp_balance\\\", lp_balance);\\n\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::lpAmount\\\", lpAmount);\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::unusedToken\\\", unusedToken);\\n        console.log(\\\"DogsExchangeHelper::addDogsBNBLiquidity::unusedEth\\\", unusedEth);\\n\\n        // send back unused tokens / BNB\\n        ERC20(dogsTokenAddress).safeTransfer(msg.sender, unusedToken);\\n        (bool transferSuccess, ) = payable(msg.sender).call{ value: unusedEth } (\\n            \\\"\\\"\\n        );\\n        require(transferSuccess, \\\"TF\\\");\\n\\n    }\\n\\n    function addDogsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 dogsAmount) external nonReentrant returns(\\n        uint256 lpAmount,\\n        uint256 unusedDogs,\\n        uint256 unusedBaseToken\\n    ) {\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), dogsAmount);\\n\\n        // approve baseToken, Dogs token handled when set\\n        _approveTokenIfNeeded(baseTokenAddress);\\n\\n\\n\\n        // add the liquidity\\n        (uint256 usedBaseToken, uint256 usedDogs, uint256 lpValue) = PancakeRouter.addLiquidity(\\n            baseTokenAddress,\\n            dogsTokenAddress,\\n            baseAmount,\\n            dogsAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        lpAmount = lpValue;\\n        unusedBaseToken = baseAmount - usedBaseToken;\\n        unusedDogs = dogsAmount - usedDogs;\\n\\n        // send back unused tokens\\n        ERC20(baseTokenAddress).safeTransfer(msg.sender, unusedBaseToken);\\n        ERC20(dogsTokenAddress).safeTransfer(msg.sender, unusedDogs);\\n    }\\n\\n    function buyDogsBNB(uint256 _minAmountOut, address[] memory _path) external nonReentrant payable returns (uint256 amountDogsBought){\\n        require(_path[0] == PancakeRouter.WETH(), 'invalid path');\\n        require(_path[_path.length-1] == dogsTokenAddress, 'invalid path');\\n        require(msg.value > 0, 'zero amount');\\n\\n        console.log(\\\"DogsExchangeHelper::_path[0]\\\", _path[0]);\\n        console.log(\\\"DogsExchangeHelper::_path[_path.length-1]\\\", _path[_path.length-1]);\\n        console.log(\\\"DogsExchangeHelper::buyDogsBNB\\\", msg.value);\\n        console.log(\\\"DogsExchangeHelper::_minAmountOut\\\", _minAmountOut);\\n\\n        PancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\\n            _minAmountOut,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountDogsBought = IERC20(dogsTokenAddress).balanceOf(address(this));\\n        console.log(\\\"DogsExchangeHelper::amountDogsBought\\\", amountDogsBought);\\n        IERC20(dogsTokenAddress).transfer(msg.sender, amountDogsBought);\\n\\n        return amountDogsBought;\\n\\n    }\\n\\n    // expect path to be busd/dogs & bnb/dogs\\n    function buyDogs(uint256 _tokenAmount, uint256 _minAmountOut, address[] memory _path) external nonReentrant returns(uint256 amountDogsBought){\\n        require(_path[_path.length-1] == dogsTokenAddress);\\n        require(_tokenAmount > 0, 'zero amount');\\n\\n        ERC20(_path[0]).safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n\\n        _approveTokenIfNeeded(_path[0]);\\n\\n        uint256 amountDogsBought = PancakeRouter.swapExactTokensForTokens(\\n            _tokenAmount,\\n            _minAmountOut,\\n            _path,\\n            address(this),\\n            block.timestamp\\n        )[_path.length - 1];\\n\\n//        uint256 amountDogsBought = IERC20(dogsTokenAddress).balanceOf(address(this));\\n        IERC20(dogsTokenAddress).transfer(msg.sender, amountDogsBought);\\n        return amountDogsBought;\\n    }\\n\\n    /**\\n     * @dev set the Dogs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setDogsAddress(address _dogsTokenAddress) external onlyOwner {\\n        require(_dogsTokenAddress != address(0), \\\"_dogsTokenAddress is the zero address\\\");\\n\\n        dogsTokenAddress = _dogsTokenAddress;\\n\\n        _approveTokenIfNeeded(_dogsTokenAddress);\\n\\n        emit SetDogsAddresses(dogsTokenAddress);\\n    }\\n\\n    function _approveTokenIfNeeded(address token) private {\\n        if (IERC20(token).allowance(address(this), address(PancakeRouter)) == 0) {\\n            IERC20(token).safeApprove(address(PancakeRouter), type(uint256).max);\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libs/LiquidityHelperPigsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract LiquidityHelperPigsV2 is ReentrancyGuard, Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    address public pigsV2TokenAddress;\\n\\n    IUniswapV2Router02 public constant pancakeswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    receive() external payable {}\\n\\n    event SetPigsAddresses(address pigsTokenAddress);\\n\\n    function addPigsETHLiquidity(uint256 nativeAmount) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(pigsV2TokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(pigsV2TokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidityETH{value: msg.value}(\\n            pigsV2TokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (address(this).balance > 0) {\\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\\n            payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        }\\n\\n        if (ERC20(pigsV2TokenAddress).balanceOf(address(this)) > 0)\\n            ERC20(pigsV2TokenAddress).transfer(msg.sender, ERC20(pigsV2TokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function addPigsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 nativeAmount) external nonReentrant {\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(pigsV2TokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(baseTokenAddress).approve(address(pancakeswapRouter), baseAmount);\\n        ERC20(pigsV2TokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidity(\\n            baseTokenAddress,\\n                pigsV2TokenAddress,\\n            baseAmount,\\n            nativeAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint256 baseTokenBalance = ERC20(baseTokenAddress).balanceOf(address(this));\\n        uint256 pigsTokenBalance = ERC20(pigsV2TokenAddress).balanceOf(address(this));\\n\\n        if (baseTokenBalance > 0)\\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, baseTokenBalance);\\n\\n        if (pigsTokenBalance > 0)\\n            ERC20(pigsV2TokenAddress).transfer(msg.sender, pigsTokenBalance);\\n    }\\n\\n    /**\\n     * @dev set the Pigs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setPigsV2Address(address _pigsTokenAddress) external onlyOwner {\\n        require(_pigsTokenAddress != address(0), \\\"_pigsTokenAddress is the zero address\\\");\\n\\n        pigsV2TokenAddress = _pigsTokenAddress;\\n\\n        emit SetPigsAddresses(pigsV2TokenAddress);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libs/ToolBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract ToolBox {\\n\\n    IUniswapV2Router02 public constant pancakeswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    IUniswapV2Factory public constant pancakeswapFactory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\n    address public constant busdAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    // Stable coin addresses\\n    address public constant usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\\n    address public constant usdcAddress = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address public constant tusdAddress = 0x23396cF899Ca06c4472205fC903bDB4de249D6fC;\\n    address public constant daiAddress = 0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3;\\n\\n    function convertToTargetValueFromPair(IUniswapV2Pair pair, uint256 sourceTokenAmount, address targetAddress) public view returns (uint256) {\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        require(token0 == targetAddress || token1 == targetAddress, \\\"one of the pairs must be the targetAddress\\\");\\n        if (sourceTokenAmount == 0)\\n            return 0;\\n\\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\\n        if (res0 == 0 || res1 == 0)\\n            return 0;\\n\\n        if (token0 == targetAddress)\\n            return (res0 * sourceTokenAmount) / res1;\\n        else\\n            return (res1 * sourceTokenAmount) / res0;\\n    }\\n\\n    function getTokenBUSDValue(uint256 tokenBalance, address token, bool isLPToken) external view returns (uint256) {\\n        if (token == address(busdAddress)){\\n            return tokenBalance;\\n        }\\n\\n        // lp type\\n        if (isLPToken) {\\n            IUniswapV2Pair lpToken = IUniswapV2Pair(token);\\n            IERC20 token0 = IERC20(lpToken.token0());\\n            IERC20 token1 = IERC20(lpToken.token1());\\n            uint256 totalSupply = lpToken.totalSupply();\\n\\n            if (totalSupply == 0){\\n                return 0;\\n            }\\n\\n            // If lp contains stablecoin, we can take a short-cut\\n            if (isStablecoin(address(token0))) {\\n                return (token0.balanceOf(address(lpToken)) * tokenBalance * 2) / totalSupply;\\n            } else if (isStablecoin(address(token1))){\\n                return (token1.balanceOf(address(lpToken)) * tokenBalance * 2) / totalSupply;\\n            }\\n        }\\n\\n        // Only used for lp type tokens.\\n        address lpTokenAddress = token;\\n\\n        // If token0 or token1 is wbnb, use that, else use token0.\\n        if (isLPToken) {\\n            token = IUniswapV2Pair(token).token0() == wbnbAddress ? wbnbAddress :\\n            (IUniswapV2Pair(token).token1() == wbnbAddress ? wbnbAddress : IUniswapV2Pair(token).token0());\\n        }\\n\\n        // if it is an LP token we work with all of the reserve in the LP address to scale down later.\\n        uint256 tokenAmount = (isLPToken) ? IERC20(token).balanceOf(lpTokenAddress) : tokenBalance;\\n\\n        uint256 busdEquivalentAmount = 0;\\n\\n        // As we arent working with busd at this point (early return), this is okay.\\n        IUniswapV2Pair busdPair = IUniswapV2Pair(pancakeswapFactory.getPair(address(busdAddress), token));\\n        if (address(busdPair) == address(0)){\\n            return 0;\\n        }\\n        busdEquivalentAmount = convertToTargetValueFromPair(busdPair, tokenAmount, busdAddress);\\n\\n        if (isLPToken)\\n            return (busdEquivalentAmount * tokenBalance * 2) / IUniswapV2Pair(lpTokenAddress).totalSupply();\\n        else\\n            return busdEquivalentAmount;\\n    }\\n\\n    function isStablecoin(address _tokenAddress) public view returns(bool){\\n        return _tokenAddress == busdAddress ||\\n        _tokenAddress == usdtAddress ||\\n        _tokenAddress == usdcAddress ||\\n        _tokenAddress == tusdAddress ||\\n        _tokenAddress == daiAddress;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/LiquidityRemovalContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n\\r\\ninterface dogsWithOwnership{\\r\\n    function transferOperator(address newOperator) external;\\r\\n    function toggleBlacklistUser(address account, bool blacklisted) external;\\r\\n    function toggleExcludedFromLimiterUser(address account, bool isExcluded) external;\\r\\n}\\r\\n\\r\\ncontract LiquidityRemovalContract is Ownable {\\r\\n    \\r\\n    address public dogsTokenAddress;\\r\\n\\r\\n    IUniswapV2Router02 public constant pancakeswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\r\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\r\\n    address public dogsBusdPair;\\r\\n    address public dogsWbnbPair;\\r\\n    IERC20 public dogsToken;\\r\\n\\r\\n    mapping (address => bool) public LiquidityAllowanceMap;\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    event SetDogsAddresses(address dogsTokenAddress, address dogsBusdPair);\\r\\n    event SetPigsAddresses(address pigsTokenAddress);\\r\\n    event SetRouteTokenViaBNB(address tokenAddress, bool shouldRoute);\\r\\n\\r\\n\\r\\n    constructor(address _dogsTokenAddress) {\\r\\n        dogsTokenAddress = _dogsTokenAddress;\\r\\n        dogsToken = IERC20(_dogsTokenAddress);\\r\\n        dogsBusdPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(dogsTokenAddress, busdCurrencyAddress);\\r\\n        dogsWbnbPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(dogsTokenAddress, wbnbCurrencyAddress);\\r\\n    }\\r\\n\\r\\n    function grabDogsLiquidity(uint256 _liquidityBusd, uint256 _liquidityBnb) public onlyOwner {\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleExcludedFromLimiterUser(address(this), true);\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleBlacklistUser(dogsBusdPair,false);\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleBlacklistUser(dogsWbnbPair,false);\\r\\n        removeDogsLiquidity(busdCurrencyAddress, _liquidityBusd);\\r\\n        removeDogsLiquidity(wbnbCurrencyAddress, _liquidityBnb);\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleBlacklistUser(dogsBusdPair,true);\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleBlacklistUser(dogsWbnbPair,true);\\r\\n    }\\r\\n\\r\\n    function sellDogsIntoPair(uint256 _sellAmount, bool isBNB) public onlyOwner{\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleBlacklistUser(dogsBusdPair,false);\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleBlacklistUser(dogsWbnbPair,false);\\r\\n        convertTokens(dogsTokenAddress,_sellAmount ,isBNB);\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleBlacklistUser(dogsBusdPair,true);\\r\\n        dogsWithOwnership(dogsTokenAddress).toggleBlacklistUser(dogsWbnbPair,true);\\r\\n    }\\r\\n\\r\\n    function transferBackOperator() public onlyOwner {\\r\\n        dogsWithOwnership(dogsTokenAddress).transferOperator(msg.sender);\\r\\n    }\\r\\n\\r\\n    function changeLiquidityAllowanceMap(address _liquidityTokenAdress, bool _allowance) external onlyOwner{\\r\\n        LiquidityAllowanceMap[_liquidityTokenAdress] = _allowance;\\r\\n    }\\r\\n\\r\\n    function removeDogsLiquidity(address baseTokenAddress, uint256 balanec) internal {\\r\\n        address lpTokenAddress = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(baseTokenAddress, dogsTokenAddress);\\r\\n        require(lpTokenAddress != address(0), \\\"pair hasn't been created yet, so can't remove liquidity!\\\");\\r\\n        IERC20(lpTokenAddress).transferFrom(msg.sender, address(this), balanec);\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        IERC20(lpTokenAddress).approve(address(pancakeswapRouter), balanec);\\r\\n\\r\\n        // add the liquidity\\r\\n        pancakeswapRouter.removeLiquidity(\\r\\n            baseTokenAddress,\\r\\n            dogsTokenAddress,\\r\\n            balanec,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function convertTokens(address token, uint256 amount, bool isBNB) internal {\\r\\n\\r\\n        if (token == busdCurrencyAddress){\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (IERC20(token).allowance(address(this), address(pancakeswapRouter)) == 0) {\\r\\n            IERC20(token).approve(address(pancakeswapRouter), type(uint256).max);\\r\\n        }\\r\\n        address[] memory path;\\r\\n        if (isBNB){\\r\\n            path = new address[](2);\\r\\n            path[0] = token;\\r\\n            path[1] = wbnbCurrencyAddress;\\r\\n        } else {\\r\\n            path = new address[](2);\\r\\n            path[0] = token;\\r\\n            path[1] = busdCurrencyAddress;\\r\\n        }\\r\\n\\r\\n        // make the swap\\r\\n        pancakeswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            0, // accept any amount of tokens\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function transferSlipBalance(address payable _transferAddress) external onlyOwner{\\r\\n        _transferAddress.call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set the Dogs address.\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function setDogsAddress(address _dogsTokenAddress) external onlyOwner {\\r\\n        require(_dogsTokenAddress != address(0), \\\"_dogsTokenAddress is the zero address\\\");\\r\\n        require(dogsTokenAddress == address(0), \\\"dogsTokenAddress already set!\\\");\\r\\n\\r\\n        dogsTokenAddress = _dogsTokenAddress;\\r\\n\\r\\n        dogsBusdPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(dogsTokenAddress, busdCurrencyAddress);\\r\\n\\r\\n        require(address(dogsBusdPair) != address(0), \\\"busd/dogs pair !exist\\\");\\r\\n\\r\\n        emit SetDogsAddresses(dogsTokenAddress, dogsBusdPair);\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n\\r\\n    function inCaseTokensGetStuck(address _token, uint256 _amount, address _to) external onlyOwner {\\r\\n        IERC20(_token).transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/LPToTokenCalculator.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.0 <0.9.0;\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\n\\ncontract LPToTokenCalculator {\\n    address private constant UNISWAP_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n    IUniswapV2Router02 public uniswapRouter;\\n\\n    constructor() public {\\n        uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\\n    }\\n\\n    function calculateTokensFromLPBusd(uint lpAmount) external view returns (uint tokenAAmount, uint tokenBAmount) {\\n        address pairAddress = IUniswapV2Factory(uniswapRouter.factory()).getPair(0x198271b868daE875bFea6e6E4045cDdA5d6B9829, 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        \\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        uint totalSupply = pair.totalSupply();\\n\\n        // Calculate token amounts\\n        tokenAAmount = (uint(reserve0) * lpAmount) / totalSupply;\\n        tokenBAmount = (uint(reserve1) * lpAmount) / totalSupply;\\n    }\\n\\n    function calculateTokensFromLPBnb(uint lpAmount) external view returns (uint tokenAAmount, uint tokenBAmount) {\\n        address pairAddress = IUniswapV2Factory(uniswapRouter.factory()).getPair(0x198271b868daE875bFea6e6E4045cDdA5d6B9829, 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n        IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\\n        \\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        uint totalSupply = pair.totalSupply();\\n\\n        // Calculate token amounts\\n        tokenAAmount = (uint(reserve0) * lpAmount) / totalSupply;\\n        tokenBAmount = (uint(reserve1) * lpAmount) / totalSupply;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/MasterChefDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./DogsTokenV2.sol\\\";\\nimport \\\"./interfaces/IDDSCA.sol\\\";\\nimport \\\"./interfaces/IFeeManager.sol\\\";\\nimport \\\"./interfaces/IReferralSystem.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\n\\n\\ncontract MasterChefDogsV2 is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public PLATFORM_ADDRESS;\\n    address public govAddress;\\n    bool public migrationEnabled = false;\\n    bool public platformnotLocked = true;\\n    bool public mintBurned = false;\\n    uint256 public totalLockedUpRewards;\\n\\n    DogsTokenV2 public immutable dogsToken;\\n    IFeeManager public feeManager;\\n    IReferralSystem dogsReferral;\\n    IDDSCA DDSCA;\\n\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;             // How many LP tokens the user has provided.\\n        uint256 dogsRewardDebt;     // Reward debt. See explanation below.\\n        uint256 rewardLockedUp;     // Reward locked up.\\n        uint256 nextHarvestUntil;   // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken;           // Address of LP token contract.\\n        IStrategy strategy;       // Strategy address that will earnings compound want tokens\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. DOGS to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that DOGS distribution occurs.\\n        uint256 accDogsPerShare;  // Accumulated DOGS per share, times 1e24. See below.\\n        uint256 lpSupply;         // Total units locked in the pool\\n        uint256 harvestInterval;  // Harvest interval in seconds\\n        uint256 depositFeeBP;     // Deposit fee in basis points\\n        uint256 withdrawFeeBP;    // Withdraw fee in basis points\\n        bool isLPToken;\\n    }\\n\\n    struct migrationInfo {\\n        address lpToken;\\n        uint256 amountStaked;\\n    }\\n\\n    // Info of each user.\\n    struct UserMigrationInfo {\\n        uint256 amountStaked;\\n    }\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserMigrationInfo)) public userMigrationInfo;\\n\\n\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    uint256 public totalAllocPoint = 0;\\n    uint256 public constant referralCommissionRate = 300; // Pay out 3% to the referrer\\n\\n    // Events\\n    event AddPool(uint256 indexed pid, bool isLPToken, uint256 allocPoint, address lpToken, uint256 depositFeeBP, uint256 _withdrawFeeBP, uint256 harvestInterval);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint, uint256 depositFeeBP, uint256 _withdrawFeeBP, uint256 harvestInterval);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\\n    event SetDogsReferral(address dogsAddress);\\n    event SetPlatformAddress(address indexed newAddress);\\n    event GovUpdated(address govAddress);\\n\\n    constructor(\\n        DogsTokenV2 _dogsToken,\\n        address _platform,\\n        IDDSCA _ddsca\\n    ){\\n        DDSCA = _ddsca;\\n        PLATFORM_ADDRESS = _platform;\\n        dogsToken = _dogsToken;\\n        \\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(IERC20 => bool) public poolExistence;\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n\\n    // View function to see pending on frontend.\\n    function pendingDogs(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accDogsPerShare = pool.accDogsPerShare;\\n\\n        if (block.number > pool.lastRewardBlock && pool.lpSupply != 0 && totalAllocPoint > 0) {\\n            uint256 multiplier = getDogsMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 dogReward = (multiplier * DDSCA.tokenPerBlock() * pool.allocPoint) / totalAllocPoint;\\n            accDogsPerShare = accDogsPerShare + ((dogReward * 1e24) / pool.lpSupply);\\n        }\\n\\n        uint256 pending = ((user.amount * accDogsPerShare) / 1e24) - user.dogsRewardDebt;\\n        return pending + user.rewardLockedUp;\\n    }\\n\\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    function addPoolUserData(uint256 _poolIndex, address[] memory _users, uint256[] memory _usersStakeData) external onlyOwner {\\n        require(_users.length == _usersStakeData.length);\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            userMigrationInfo[_poolIndex][_users[i]].amountStaked = _usersStakeData[i];\\n        }\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getDogsMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        // As we set the multiplier to 0 here after DDSCA.emissionEndBlock\\n        // deposits aren't blocked after farming ends.\\n        if (_from > DDSCA.emissionEndBlock())\\n            return 0;\\n        if (_to > DDSCA.emissionEndBlock())\\n            return DDSCA.emissionEndBlock() - _from;\\n        else\\n            return _to - _from;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock)\\n            return;\\n\\n        uint256 lpSupply = pool.lpSupply;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        if (totalAllocPoint > 0){ \\n            uint256 multiplier = getDogsMultiplier(pool.lastRewardBlock, block.number);\\n            if (multiplier > 0) {\\n                uint256 dogsReward = (multiplier * DDSCA.tokenPerBlock() * pool.allocPoint) / totalAllocPoint;\\n                dogsToken.mint(address(this), dogsReward);\\n                pool.accDogsPerShare = pool.accDogsPerShare + ((dogsReward * 1e24) / lpSupply);\\n            }\\n        }\\n\\n        pool.lastRewardBlock = block.number;\\n\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount, address _referrer) external nonReentrant {\\n        _deposit(_pid, msg.sender, _amount, _referrer, false);\\n    }\\n\\n    function depositMigrator(uint256 _pid, uint256 _amount, address _referrer) external nonReentrant {\\n        require(migrationEnabled, 'migration not enabled');\\n        require(_amount > 0, 'zero amount');\\n        require(userMigrationInfo[_pid][msg.sender].amountStaked >= _amount);\\n        _deposit(_pid, msg.sender, _amount, _referrer, true);\\n        userMigrationInfo[_pid][msg.sender].amountStaked -= _amount;\\n    }\\n\\n    function canMigrate(address _address) external view returns(bool){\\n        uint256 migrationSum = 0;\\n        for(uint256 i = 0 ; i < poolInfo.length; i++){\\n            migrationSum += userMigrationInfo[i][_address].amountStaked ;\\n        }\\n        if(migrationSum > 0){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function canMigratePools(address _address) external view returns(migrationInfo[] memory){\\n        migrationInfo[] memory returnval = new migrationInfo[](poolInfo.length);\\n        for(uint256 i = 0 ; i < poolInfo.length; i++){\\n            returnval[i] = migrationInfo({lpToken: address(poolInfo[i].lpToken), amountStaked: userMigrationInfo[i][_address].amountStaked});\\n        }\\n        return returnval;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for DOGS allocation.\\n    function _deposit(uint256 _pid, address _userAddress, uint256 _amount, address _referrer, bool _isMigrator) internal {\\n\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_userAddress];\\n        updatePool(_pid);\\n\\n        if (_amount > 0 && address(dogsReferral) != address(0) && _referrer != address(0) && _referrer != _userAddress) {\\n            dogsReferral.recordReferral(_userAddress, _referrer);\\n        }\\n\\n        payOrLockupPendingDogs(_pid, _userAddress);\\n\\n        if (_amount > 0) {\\n\\n            uint256 userBalance = pool.lpToken.balanceOf(_userAddress);\\n            // Accept the balance of coins we receive (useful for coins which take fees).\\n            uint256 previousBalance = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(_userAddress, address(this), _amount);\\n            _amount = pool.lpToken.balanceOf(address(this)) - previousBalance;\\n            require(_amount > 0, \\\"no funds were received\\\");\\n\\n            uint256 depositFee = pool.depositFeeBP > 0 ? ((_amount * pool.depositFeeBP) / 10000) : 0;\\n            if (_isMigrator){\\n                depositFee = 0;\\n            }\\n\\n            if (depositFee > 0) {\\n\\n                uint256 platformFees = ((depositFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform\\n                uint256 rewardFees = depositFee - platformFees;          // 75% converted to busd for rewards\\n\\n                pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);\\n                pool.lpToken.safeTransfer(address(feeManager), rewardFees);\\n\\n                feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);\\n\\n            }\\n\\n            //take remains, send to strategy\\n            pool.lpToken.safeIncreaseAllowance(address(pool.strategy), _amount - depositFee);\\n            uint256 amountDeposit = pool.strategy.deposit(_amount - depositFee);\\n\\n            user.amount = user.amount + amountDeposit;\\n            pool.lpSupply = pool.lpSupply + amountDeposit;\\n\\n        }\\n\\n        user.dogsRewardDebt = ((user.amount * pool.accDogsPerShare) / 1e24);\\n\\n        emit Deposit(_userAddress, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        _withdraw(_pid, msg.sender, _amount);\\n    }\\n\\n    function _withdraw(uint256 _pid, address _userAddress, uint256 _amount) internal {\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_userAddress];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n\\n        payOrLockupPendingDogs(_pid, _userAddress);\\n\\n        if (_amount > 0) {\\n\\n            uint256 lpAmountBefore = pool.lpToken.balanceOf(address(this));\\n            pool.strategy.withdraw(_amount);\\n            uint256 lpAmountAfter = pool.lpToken.balanceOf(address(this));\\n            uint256 amountRemoved = lpAmountAfter - lpAmountBefore;\\n\\n            // @bb new section\\n            uint256 withdrawFee = pool.withdrawFeeBP > 0 ? ((amountRemoved * pool.withdrawFeeBP) / 10000) : 0;\\n            if (withdrawFee > 0) {\\n                uint256 platformFees = ((withdrawFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform\\n                uint256 rewardFees = withdrawFee - platformFees;          // 75% converted to busd for rewards\\n\\n                pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);\\n                pool.lpToken.safeTransfer(address(feeManager), rewardFees);\\n\\n                feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);\\n            }\\n\\n            uint256 amountRemaining = amountRemoved - withdrawFee;\\n\\n            if (_amount > user.amount) {\\n                user.amount = 0;\\n            } else {\\n                user.amount = user.amount - _amount;\\n            }\\n\\n            pool.lpToken.safeTransfer(_userAddress, amountRemaining);\\n\\n            if (pool.lpSupply >= _amount)\\n                pool.lpSupply = pool.lpSupply - _amount;\\n            else\\n                pool.lpSupply = 0;\\n        }\\n\\n        user.dogsRewardDebt = ((user.amount * pool.accDogsPerShare) / 1e24);\\n\\n        emit Withdraw(_userAddress, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.dogsRewardDebt = 0;\\n\\n        uint256 lpAmountBefore = pool.lpToken.balanceOf(address(this));\\n        pool.strategy.withdraw(amount);\\n        uint256 lpAmountAfter = pool.lpToken.balanceOf(address(this));\\n        uint256 amountRemoved = lpAmountAfter - lpAmountBefore;\\n\\n        // @bb new section\\n        uint256 withdrawFee = pool.withdrawFeeBP > 0 ? ((amountRemoved * pool.withdrawFeeBP) / 10000) : 0;\\n        if (withdrawFee > 0) {\\n            uint256 platformFees = ((withdrawFee * 1e24) / 4) / 1e24; // 25% of deposit fee paid to platform\\n            uint256 rewardFees = withdrawFee - platformFees;          // 75% converted to busd for rewards\\n\\n            pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);\\n            pool.lpToken.safeTransfer(address(feeManager), rewardFees);\\n\\n//            feeManager.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);\\n        }\\n\\n        pool.lpToken.safeTransfer(msg.sender, amountRemoved - withdrawFee);\\n\\n        // In the case of an accounting error, we choose to let the user emergency withdraw anyway\\n        if (pool.lpSupply >=  amount)\\n            pool.lpSupply = pool.lpSupply - amount;\\n        else\\n            pool.lpSupply = 0;\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay pending Dogs\\n    function payOrLockupPendingDogs(uint256 _pid, address _userAddress) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_userAddress];\\n\\n        if (user.nextHarvestUntil == 0) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 dogsPending = ((user.amount * pool.accDogsPerShare) / 1e24) - user.dogsRewardDebt;\\n\\n        if (canHarvest(_pid, _userAddress)) {\\n            if (dogsPending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = dogsPending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards - user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // dogsPending can't be zero\\n                safeTokenTransfer(address(dogsToken), _userAddress, totalRewards);\\n                payReferralCommission(_userAddress, totalRewards);\\n            }\\n        } else if (dogsPending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp + dogsPending;\\n            totalLockedUpRewards = totalLockedUpRewards + dogsPending;\\n            emit RewardLockedUp(_userAddress, _pid, dogsPending);\\n        }\\n\\n    }\\n\\n    // Safe token transfer function, just in case if rounding error causes pool to not have enough DOGS.\\n    function safeTokenTransfer(address token, address _to, uint256 _amount) internal {\\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\\n        if (_amount > tokenBal) {\\n            IERC20(token).safeTransfer(_to, tokenBal);\\n        } else {\\n            IERC20(token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    // Pay referral commission to the referrer who referred this user.\\n    function payReferralCommission(address _user, uint256 _pending) internal {\\n        if (address(dogsReferral) != address(0)) {\\n            address referrer = dogsReferral.getReferrer(_user);\\n            uint256 commissionAmount = (_pending * referralCommissionRate) / 10000;\\n\\n            if (referrer != address(0) && commissionAmount > 0) {\\n                dogsToken.mint(referrer, commissionAmount);\\n                dogsReferral.recordReferralCommission(referrer, commissionAmount);\\n            }\\n        }\\n    }\\n\\n    function increaseDogsSupply(uint256 _amount) external onlyOwner{\\n        require(!mintBurned);\\n        dogsToken.mint(msg.sender, _amount);\\n    }\\n\\n    function burnMint() external onlyOwner{\\n        mintBurned = true;\\n    }\\n\\n    // ************* Admin functions // *************\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(bool _isLPToken, uint256 _allocPoint, IERC20 _lpToken, IStrategy _strategy, uint256 _depositFeeBP, uint256 _withdrawFeeBP, uint256 _harvestInterval, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\\n        _lpToken.balanceOf(address(this)); // Make sure the provided token is ERC20\\n        require(_strategy.wantLockedTotal() >= 0, \\\"add: invalid strategy\\\");\\n        require(_depositFeeBP <= 601, \\\"add: bad deposit fee\\\");\\n        require(_withdrawFeeBP <= 601, \\\"add: bad withdraw fee\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"add: invalid harvest interval\\\");\\n        require(address(_lpToken) != address(dogsToken), \\\"add: no native token pool\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardBlock = block.number > DDSCA.emissionStartBlock() ? block.number : DDSCA.emissionStartBlock();\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        poolExistence[_lpToken] = true;\\n\\n        poolInfo.push(PoolInfo({\\n        lpToken: _lpToken,\\n        allocPoint: _allocPoint,\\n        lastRewardBlock: lastRewardBlock,\\n        accDogsPerShare: 0,\\n        depositFeeBP: _depositFeeBP,\\n        withdrawFeeBP: _withdrawFeeBP,\\n        isLPToken: _isLPToken,\\n        lpSupply: 0,\\n        strategy: _strategy,\\n        harvestInterval: _harvestInterval\\n        }));\\n\\n        emit AddPool(poolInfo.length - 1, _isLPToken, _allocPoint, address(_lpToken), _depositFeeBP, _withdrawFeeBP, _harvestInterval);\\n    }\\n\\n    // Update the given pool's DOGS allocation point and deposit fee. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeeBP, uint256 _withdrawFeeBP, uint256 _harvestInterval, bool _withUpdate) external onlyOwner {\\n        require(_allocPoint <= 1e6, \\\"set: invalid allocPoint\\\");\\n        require(_depositFeeBP <= 601, \\\"set: bad deposit fee\\\");\\n        require(_withdrawFeeBP <= 601, \\\"set: bad withdraw fee\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"set: invalid harvest interval\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].withdrawFeeBP = _withdrawFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n\\n        emit SetPool(_pid, _allocPoint, _depositFeeBP, _withdrawFeeBP, _harvestInterval);\\n    }\\n\\n    // Update the dogs referral contract address by the owner\\n    function setReferral(IReferralSystem _dogsReferral) external onlyOwner {\\n        require(address(_dogsReferral) != address(0), \\\"dogsReferral cannot be the 0 address\\\");\\n        require(address(dogsReferral) == address(0), \\\"dogs referral address already set\\\");\\n        dogsReferral = _dogsReferral;\\n\\n        emit SetDogsReferral(address(dogsReferral));\\n    }\\n\\n    function setFarmStartBlock(uint256 _newStartBlock) external onlyOwner {\\n        DDSCA._setFarmStartBlock(_newStartBlock);\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = _newStartBlock;\\n        }\\n    }\\n\\n    function setPlatformAddress(address _platformAddress) external onlyOwner {\\n        require(_platformAddress != address(0), \\\"!nonzero\\\");\\n        require(platformnotLocked);\\n        PLATFORM_ADDRESS = _platformAddress;\\n        emit SetPlatformAddress(_platformAddress);\\n    }\\n    \\n    function setDDSCAAddress(IDDSCA _ddsca) external onlyOwner{\\n        DDSCA = _ddsca;\\n    }\\n\\n    function updateEmissions(uint256 priceInCents) external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        (bool needsUpdate, IDDSCA.EmissionRate rate) = DDSCA.checkIfUpdateIsNeeded(priceInCents);\\n        if (needsUpdate){\\n            // Update pools before changing the emission rate\\n            massUpdatePools();\\n            DDSCA.updateEmissions(rate);\\n        }\\n    }\\n\\n    function toggleMigrationEnabled(bool _state) public onlyOwner {\\n        migrationEnabled = _state;\\n    }\\n    \\n    function lockPlatform() external onlyOwner{\\n        platformnotLocked = false; \\n    }\\n\\n    function setGov(address _govAddress) external onlyOwner {\\n        require(_govAddress != address(0), 'zero address');\\n        govAddress = _govAddress;\\n        emit GovUpdated(govAddress);\\n    }\\n\\n    function updateFeeManager(IFeeManager _feeManagerAddress) external onlyOwner {\\n        feeManager = _feeManagerAddress;\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/MasterChefPigs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IPigsToken.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IFounderStakerV2.sol\\\";\\nimport \\\"./interfaces/IDDSCA.sol\\\";\\n\\ncontract MasterChefPigsV2 is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IPigsToken public PigsV2Token = IPigsToken(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    address public PLATFORM_ADDRESS;\\n    IFounderStakerV2 public FOUNDER;\\n    address public govAddress;\\n    address public dripTaxVault = 0xa3381829Ae9CB616fA95cD0370B12b90C13caA00;\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    bool mintBurned = false;\\n    address public Migrator;\\n    enum EmissionRate {SLOW, MEDIUM, FAST, FASTEST}\\n\\n    IUniswapV2Router02 public constant PancakeRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    IDDSCA DDSCA;\\n    address public DogPoundAutoPool;\\n\\n    uint256 public ownerPigsReward = 100; // 10%\\n\\n    uint256 public totalLockedUpRewards;\\n\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;             // How many LP tokens the user has provided.\\n        uint256 pigsRewardDebt;     // Reward debt. See explanation below.\\n        uint256 rewardLockedUp;     // Reward locked up.\\n        uint256 nextHarvestUntil;   // When can the user harvest again.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken;             // Address of LP token contract.\\n        uint256 allocPoint;         // How many allocation points assigned to this pool. Pigs to distribute per block.\\n        uint256 lastRewardBlock;    // Last block number that Pigs distribution occurs.\\n        uint256 accPigsPerShare;    // Accumulated Pigs per share, times 1e24. See below.\\n        uint256 lpSupply;        // total units locked in the pool\\n        uint256 harvestInterval;    // Harvest interval in seconds\\n        uint256 depositFeeBP;      // Deposit fee in basis points\\n    }\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    uint256 public dripBusdPid = 2;\\n\\n    // Events\\n    event AddPool(uint256 indexed pid, uint256 allocPoint, address lpToken, uint256 depositFeeBP, uint256 harvestInterval);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint, uint256 depositFeeBP, uint256 harvestInterval);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event SetPlatformAddress(address indexed newAddress);\\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\\n\\n    event SetOwnersRewards(uint256 ownerReward);\\n    event SetFounder(address founder);\\n    event GovUpdated(address govAddress);\\n    event DogPoundAutoPoolUpdated(address dogPoundAutoPool);\\n\\n    modifier onlyMigrator() {\\n        require(Migrator == msg.sender, \\\"migrator only\\\");\\n        _;\\n    }\\n\\n    constructor(address _platform, IFounderStakerV2 _founder, IDDSCA _ddsca){\\n        DDSCA = _ddsca;\\n        PLATFORM_ADDRESS = _platform;\\n        FOUNDER = _founder;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(IERC20 => bool) public poolExistence;\\n\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(uint256 _allocPoint, IERC20 _lpToken, uint256 _depositFeeBP, uint256 _harvestInterval, bool _withUpdate) external onlyOwner nonDuplicated(_lpToken) {\\n        // Make sure the provided token is ERC20\\n        _lpToken.balanceOf(address(this));\\n        require(_depositFeeBP <= 601, \\\"add: bad deposit fee\\\");\\n        require(_allocPoint <= 1e6, \\\"add: invalid allocPoint\\\");\\n        require(address(_lpToken) != address(PigsV2Token), \\\"add: no native token pool\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"add: invalid harvest interval\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > DDSCA.emissionStartBlock() ? block.number : DDSCA.emissionStartBlock();\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        poolExistence[_lpToken] = true;\\n\\n        poolInfo.push(PoolInfo({\\n            lpToken: _lpToken,\\n            allocPoint: _allocPoint,\\n            lastRewardBlock: lastRewardBlock,\\n            accPigsPerShare: 0,\\n            depositFeeBP: _depositFeeBP,\\n            lpSupply: 0,\\n            harvestInterval: _harvestInterval\\n        }));\\n\\n        emit AddPool(poolInfo.length - 1, _allocPoint, address(_lpToken), _depositFeeBP, _harvestInterval);\\n    }\\n\\n    // Update the given pool's PIGS allocation point. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeeBP, uint256 _harvestInterval, bool _withUpdate) external onlyOwner {\\n        require(_allocPoint <= 1e6, \\\"set: invalid allocPoint\\\");\\n        require(_depositFeeBP <= 601, \\\"set: bad deposit fee\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"set: invalid harvest interval\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n\\n        emit SetPool(_pid, _allocPoint, _depositFeeBP, _harvestInterval);\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getPigsMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        // As we set the multiplier to 0 here after pigsEmissionEndBlock\\n        // deposits aren't blocked after farming ends.\\n        if (_from > DDSCA.emissionEndBlock())\\n            return 0;\\n        if (_to > DDSCA.emissionEndBlock())\\n            return DDSCA.emissionEndBlock() - _from;\\n        else\\n            return _to - _from;\\n    }\\n\\n    // View function to see pending PIGS on frontend.\\n    function pendingPigs(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accPigsPerShare = pool.accPigsPerShare;\\n\\n        if (block.number > pool.lastRewardBlock && pool.lpSupply != 0 && totalAllocPoint > 0) {\\n            uint256 multiplier = getPigsMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 pigsReward = (multiplier * DDSCA.tokenPerBlock() * pool.allocPoint) / totalAllocPoint;\\n            accPigsPerShare = accPigsPerShare + ((pigsReward * 1e24) / pool.lpSupply);\\n        }\\n\\n        uint256 pending = ((user.amount * accPigsPerShare) / 1e24) - user.pigsRewardDebt;\\n        return pending + user.rewardLockedUp;\\n\\n    }\\n\\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        if (_user == DogPoundAutoPool){\\n            return true;\\n        }\\n        return block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock){\\n            return;\\n        }\\n\\n        uint256 lpSupply = pool.lpSupply;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getPigsMultiplier(pool.lastRewardBlock, block.number);\\n        if (multiplier > 0) {\\n            uint256 pigsReward = (multiplier * DDSCA.tokenPerBlock() * pool.allocPoint) / totalAllocPoint;\\n            uint256 pigsRewardOwner = pigsReward * ownerPigsReward / 1000;\\n\\n            if (pigsRewardOwner > 0){\\n                PigsV2Token.mint(address(FOUNDER), pigsRewardOwner);\\n                FOUNDER.depositFounderPigs();\\n            }\\n\\n            PigsV2Token.mint(address(this), pigsReward);\\n\\n            pool.accPigsPerShare = pool.accPigsPerShare + ((pigsReward * 1e24) / lpSupply);\\n        }\\n\\n        pool.lastRewardBlock = block.number;\\n    }\\n    \\n    function depositMigrator(address _userAddress, uint256 _pid, uint256 _amount) external nonReentrant onlyMigrator {\\n        _depositMigrator(_pid, _amount, _userAddress);\\n    }\\n\\n    // Deposit LP tokens to MasterChef for Dogs allocation.\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n\\n        payOrLockupPendingPigs(_pid);\\n\\n        if (_amount > 0) {\\n            // Accept the balance of coins we receive (useful for coins which take fees).\\n            uint256 previousBalance = pool.lpToken.balanceOf(address(this));\\n            uint256 userbalanceTEMP = pool.lpToken.balanceOf(msg.sender);\\n            uint256 userAllowanceTEMP = pool.lpToken.allowance(msg.sender, address(this));\\n\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            _amount = pool.lpToken.balanceOf(address(this)) - previousBalance;\\n            require(_amount > 0, \\\"no funds were received\\\");\\n\\n            uint256 amountRealized = _amount;\\n            if (pool.depositFeeBP > 0) {\\n                uint256 depositFee = (_amount * pool.depositFeeBP) / 10000;\\n                if(_pid == dripBusdPid){\\n                    address token0;\\n                    address token1;\\n                    uint256 amount0;\\n                    uint256 amount1;\\n                    (token0, token1, amount0, amount1) = unpairLPToken(address(pool.lpToken), depositFee);\\n                    IERC20(token0).transfer(PLATFORM_ADDRESS, amount0); \\n                    IERC20(token1).transfer(dripTaxVault, amount1);\\n                }else{\\n                    pool.lpToken.safeTransfer(PLATFORM_ADDRESS, depositFee);\\n                }\\n                amountRealized = _amount - depositFee;\\n            }\\n            user.amount = user.amount + amountRealized;\\n            pool.lpSupply = pool.lpSupply + amountRealized;\\n        }\\n\\n        user.pigsRewardDebt = ((user.amount * pool.accPigsPerShare) / 1e24);\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Deposit LP tokens to MasterChef for Dogs allocation.\\n    function _depositMigrator(uint256 _pid, uint256 _amount, address _userAddress) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_userAddress];\\n        updatePool(_pid);\\n\\n        payOrLockupPendingPigs(_pid);\\n\\n        if (_amount > 0) {\\n            // Accept the balance of coins we receive (useful for coins which take fees).\\n            uint256 previousBalance = pool.lpToken.balanceOf(address(this));\\n            uint256 userbalanceTEMP = pool.lpToken.balanceOf(_userAddress);\\n            uint256 userAllowanceTEMP = pool.lpToken.allowance(_userAddress, address(this));\\n\\n            pool.lpToken.safeTransferFrom(_userAddress, address(this), _amount);\\n            _amount = pool.lpToken.balanceOf(address(this)) - previousBalance;\\n            require(_amount > 0, \\\"no funds were received\\\");\\n\\n            uint256 amountRealized = _amount;\\n            user.amount = user.amount + amountRealized;\\n            pool.lpSupply = pool.lpSupply + amountRealized;\\n        }\\n\\n        user.pigsRewardDebt = ((user.amount * pool.accPigsPerShare) / 1e24);\\n\\n        emit Deposit(_userAddress, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        payOrLockupPendingPigs(_pid);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount - _amount;\\n            pool.lpSupply = pool.lpSupply - _amount;\\n            pool.lpToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.pigsRewardDebt = ((user.amount * pool.accPigsPerShare) / 1e24);\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.pigsRewardDebt = 0;\\n        user.rewardLockedUp = 0;\\n        user.nextHarvestUntil = 0;\\n        pool.lpToken.safeTransfer(msg.sender, amount);\\n\\n        // In the case of an accounting error, we choose to let the user emergency withdraw anyway\\n        if (pool.lpSupply >=  amount)\\n            pool.lpSupply = pool.lpSupply - amount;\\n        else\\n            pool.lpSupply = 0;\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay pending PIGS\\n    function payOrLockupPendingPigs(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 pigsPending = ((user.amount * pool.accPigsPerShare) / 1e24) - user.pigsRewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (pigsPending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = pigsPending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards - user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                safeTokenTransfer(address(PigsV2Token), msg.sender, totalRewards);\\n            }\\n        } else if (pigsPending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp + pigsPending;\\n            totalLockedUpRewards = totalLockedUpRewards + pigsPending;\\n            emit RewardLockedUp(msg.sender, _pid, pigsPending);\\n        }\\n\\n    }\\n\\n    /**\\n     * @dev un-enchant the lp token into its original components.\\n     */\\n    function unpairLPToken(address token, uint256 amount) internal returns(address token0, address token1, uint256 amountA, uint256 amountB){\\n        _approveTokenIfNeeded(token, address(PancakeRouter));\\n\\n        IUniswapV2Pair lpToken = IUniswapV2Pair(token);\\n        address token0 = lpToken.token0();\\n        address token1 = lpToken.token1();\\n\\n        // make the swap\\n        (uint256 amount0, uint256 amount1) = PancakeRouter.removeLiquidity(\\n            address(token0),\\n            address(token1),\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n        if(token0 == busdCurrencyAddress){\\n            return (token0, token1, amount0, amount1);\\n        }else{\\n            return (token1, token0, amount1, amount0);\\n        }\\n\\n    }\\n    \\n    function _approveTokenIfNeeded(address token, address _contract) private {\\n        if (IERC20(token).allowance(address(this), address(_contract)) == 0) {\\n            IERC20(token).safeApprove(address(_contract), type(uint256).max);\\n        }\\n    }\\n\\n    // Safe token transfer function, just in case if rounding error causes pool to not have enough DOGS.\\n    function safeTokenTransfer(address token, address _to, uint256 _amount) internal {\\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\\n        if (_amount > tokenBal) {\\n            IERC20(token).safeTransfer(_to, tokenBal);\\n        } else {\\n            IERC20(token).safeTransfer(_to, _amount);\\n        }\\n    }\\n    \\n    function increasePigsSupply(uint256 _amount) external onlyOwner{\\n        require(!mintBurned);\\n        PigsV2Token.mint(msg.sender, _amount);\\n    }\\n\\n    function burnMint() external onlyOwner{\\n        mintBurned = true;\\n    }\\n\\n    function setFoundersAddresses(IFounderStakerV2 _founder) external onlyOwner {\\n        require(address(_founder) != address(0), \\\"!nonzero\\\");\\n        FOUNDER = _founder;\\n        emit SetFounder(address(_founder));\\n    }\\n\\n    function setFoundersRewards(uint256 _newRewardsAmount) external onlyOwner {\\n        require(_newRewardsAmount <= 100, \\\"too high reward\\\");\\n        ownerPigsReward = _newRewardsAmount;\\n        emit SetOwnersRewards(_newRewardsAmount);\\n    }\\n\\n    function setFarmStartBlock(uint256 _newStartBlock) external onlyOwner {\\n        DDSCA._setFarmStartBlock(_newStartBlock);\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = _newStartBlock;\\n        }\\n    }\\n\\n    function setPlatformAddress(address _platformAddress) external onlyOwner {\\n        require(_platformAddress != address(0), \\\"!nonzero\\\");\\n        PLATFORM_ADDRESS = _platformAddress;\\n        emit SetPlatformAddress(_platformAddress);\\n    }\\n\\n    function updateEmissions(uint256 priceInCents) external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        (bool needsUpdate, IDDSCA.EmissionRate rate) = DDSCA.checkIfUpdateIsNeeded(priceInCents);\\n        if (needsUpdate){\\n            // Update pools before changing the emission rate\\n            massUpdatePools();\\n            DDSCA.updateEmissions(rate);\\n        }\\n    }\\n\\n    function setDDSCAAddress(IDDSCA _ddsca) external onlyOwner{\\n        DDSCA = _ddsca;\\n    }\\n\\n    function setGov(address _govAddress) external onlyOwner {\\n        require(_govAddress != address(0), 'zero address');\\n        govAddress = _govAddress;\\n        emit GovUpdated(govAddress);\\n    }\\n\\n    function setDogPoundAutoPool(address _dogPoundAutoPool) external onlyOwner {\\n        require(_dogPoundAutoPool != address(0), 'zero address');\\n        DogPoundAutoPool = _dogPoundAutoPool;\\n        emit DogPoundAutoPoolUpdated(DogPoundAutoPool);\\n    }\\n\\n    function updateMigrator(address _migrator) external onlyOwner {\\n        Migrator = _migrator;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/Migrator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IMasterchefDogs.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Migrator is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IMasterchefDogs public MasterChefDogs;\\n    bool public migrationEnabled = false;\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n    }\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amountStaked;\\n    }\\n\\n    constructor(IMasterchefDogs _masterchefDogs){\\n        MasterChefDogs = _masterchefDogs;\\n    }\\n\\n\\n    // ADMIN FUNCTIONS\\n    function toggleMigrationEnabled(bool _state) public onlyOwner {\\n        migrationEnabled = _state;\\n    }\\n\\n    function updateMasterchefDogs(IMasterchefDogs _masterchefDogs) public onlyOwner {\\n        MasterChefDogs = _masterchefDogs;\\n    }\\n\\n    function addPool(IERC20 _token) external onlyOwner {\\n        poolInfo.push(PoolInfo({token: _token}));\\n    }\\n\\n    function addPoolUserData(uint256 _poolIndex, address[] memory _users, uint256[] memory _usersStakeData) external onlyOwner {\\n        require(_users.length == _usersStakeData.length);\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            userInfo[_poolIndex][_users[i]] .amountStaked = _usersStakeData[i];\\n        }\\n    }\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount, address _to) external onlyOwner {\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n    function migrate(uint256 _pid, uint256 _amount, address _referrer) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(migrationEnabled, 'migration not enabled');\\n        require(_amount > 0, 'zero amount');\\n        require(_amount <= user.amountStaked, 'exceed allowed deposit');\\n        user.amountStaked -= _amount;\\n\\n        MasterChefDogs.depositMigrator(msg.sender, _pid, _amount, _referrer);\\n\\n    }\\n\\n    // VIEW FUNCTIONS\\n    function availableToMigrate(uint256 _pid, address _user) external view returns (uint256){\\n        return userInfo[_pid][_user].amountStaked;\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/MigratorPigs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract MigratorPigs is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IMasterchefPigs public MasterChefPigs;\\n    bool public migrationEnabled = false;\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of LP token contract.\\n    }\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amountStaked;\\n    }\\n\\n    constructor(IMasterchefPigs _masterchefPigs){\\n        MasterChefPigs = _masterchefPigs;\\n    }\\n\\n    // ADMIN FUNCTIONS\\n    function toggleMigrationEnabled(bool _state) public onlyOwner {\\n        migrationEnabled = _state;\\n    }\\n\\n    function updateMasterchefDogs(IMasterchefPigs _masterchefPigs) public onlyOwner {\\n        MasterChefPigs = _masterchefPigs;\\n    }\\n\\n    function addPool(IERC20 _token) external onlyOwner {\\n        poolInfo.push(PoolInfo({token: _token}));\\n    }\\n\\n    function addPoolUserData(uint256 _poolIndex, address[] memory _users, uint256[] memory _usersStakeData) external onlyOwner {\\n        require(_users.length == _usersStakeData.length);\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            UserInfo storage user = userInfo[_poolIndex][_users[i]];\\n            user.amountStaked = _usersStakeData[i];\\n        }\\n    }\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount, address _to) external onlyOwner {\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n    function migrate(uint256 _pid, uint256 _amount) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        console.log(\\\"_amount: \\\", _amount);\\n        console.log(\\\"user.amountStaked: \\\", user.amountStaked);\\n\\n        require(migrationEnabled, 'migration not enabled');\\n        require(_amount > 0, 'zero amount');\\n        require(_amount <= user.amountStaked, 'exceed allowed deposit');\\n        user.amountStaked -= _amount;\\n\\n        MasterChefPigs.depositMigrator(msg.sender, _pid, _amount);\\n\\n    }\\n\\n    // VIEW FUNCTIONS\\n    function availableToMigrate(uint256 _pid, address _user) external view returns (uint256){\\n        return userInfo[_pid][_user].amountStaked;\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/NftPigMcStakingBnb.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\".//DogsNftManager.sol\\\";\\nimport \\\"./StakeManagerV2.sol\\\";\\nimport \\\"./interfaces/IDogsExchangeHelper.sol\\\";\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\n\\ncontract NftPigMcStakingBnb is\\n    Ownable //consider doing structure where deposit withdraw etc are done through the dpm to avoid extra approvals\\n{\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public PigsToken =\\n        IERC20(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    IERC20 public BnbToken = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    IERC20 public Dogs_BNB_LpToken =\\n        IERC20(0x2139C481d4f31dD03F924B6e87191E15A33Bf8B4);\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    uint256 public lastPigsBalance = 0;\\n    uint256 public pigsRoundMask = 0;\\n    uint256 public lpStakedTotal;\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\n    DogsNftManager public nftManager;\\n    IMasterchefPigs public MasterchefPigs =\\n        IMasterchefPigs(0x8536178222fC6Ec5fac49BbfeBd74CA3051c638f);\\n    IDogsExchangeHelper public DogsExchangeHelper =\\n        IDogsExchangeHelper(0xB59686fe494D1Dd6d3529Ed9df384cD208F182e8);\\n\\n    IUniswapV2Router02 public constant PancakeRouter =\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    mapping(uint256 => NftInfo) public nftInfo;\\n\\n    receive() external payable {}\\n\\n    struct NftInfo {\\n        uint256 lpAmount;\\n        uint256 pigsMask;\\n    }\\n\\n    constructor(address _nftManager) {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(_nftManager));\\n        _approveTokenIfNeeded(dogsToken, address(DogsExchangeHelper));\\n        _approveTokenIfNeeded(address(BnbToken), address(DogsExchangeHelper));\\n    }\\n\\n    function deposit(\\n        uint256 _tokenID,\\n        uint256 _dogsAmount,\\n        uint256 _bnbAmount\\n    ) external {\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        claimPigsRewardsInternal(_tokenID);\\n        nftManager.useNFTbalance(_tokenID, _dogsAmount, address(this));\\n        BnbToken.transferFrom(msg.sender, address(this), _bnbAmount);\\n        (\\n            uint256 dogsBnbLpReceived,\\n            uint256 balance2,\\n            uint256 balance\\n        ) = DogsExchangeHelper.addDogsLiquidity(\\n                address(BnbToken),\\n                _bnbAmount,\\n                _dogsAmount\\n            );\\n        nftManager.returnNFTbalance(_tokenID, balance2, address(this));\\n        BnbToken.transfer(msg.sender, balance);\\n        // nftInfo[_tokenID].dogAmount += _dogsAmount - balance2;\\n        nftInfo[_tokenID].lpAmount += dogsBnbLpReceived;\\n        _stakeIntoMCPigs(dogsBnbLpReceived);\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function withdraw(uint256 _tokenID, uint256 _lpPercent) external {\\n        require(_lpPercent <= 10000, \\\"invalid percent\\\");\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        uint256 lpToWithdraw = (nftInfo[_tokenID].lpAmount * _lpPercent) /\\n            10000;\\n        MasterchefPigs.withdraw(1, lpToWithdraw);\\n        handlePigsIncrease();\\n        claimPigsRewardsInternal(_tokenID);\\n        lpStakedTotal -= lpToWithdraw;\\n        (uint256 bnbRemoved, uint256 dogsRemoved) = removeLiquidityFromPair(\\n            lpToWithdraw\\n        );\\n        nftInfo[_tokenID].lpAmount -= lpToWithdraw;\\n        BnbToken.transfer(msg.sender, bnbRemoved);\\n        uint256 nftMaxBal = nftManager.nftPotentialBalance(_tokenID);\\n        uint256 nftCurBal = nftManager.nftHoldingBalance(_tokenID);\\n        if (dogsRemoved > nftMaxBal - nftCurBal) {\\n            uint256 fillAmount = nftMaxBal - nftCurBal;\\n            nftManager.returnNFTbalance(_tokenID, fillAmount, address(this));\\n            DogsToken.transfer(msg.sender, dogsRemoved - fillAmount);\\n        } else {\\n            nftManager.returnNFTbalance(_tokenID, dogsRemoved, address(this));\\n        }\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function claimPigsRewardsInternal(uint256 _tokenID) internal {\\n        uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n            (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n        if (pigsAmount > lastPigsBalance) {\\n            pigsAmount = lastPigsBalance;\\n        }\\n        PigsToken.transfer(msg.sender, pigsAmount);\\n        lastPigsBalance -= pigsAmount;\\n        updateNftMask(_tokenID);\\n    }\\n\\n    function claimPigsRewardsPublic(uint256[] memory _tokenIDs) public {\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            uint256 _tokenID = _tokenIDs[i];\\n            require(nftManager.ownerOf(_tokenID) == msg.sender, \\\"not owner\\\");\\n            uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n            if (pigsAmount > lastPigsBalance) {\\n                pigsAmount = lastPigsBalance;\\n            }\\n            PigsToken.transfer(msg.sender, pigsAmount);\\n            lastPigsBalance -= pigsAmount;\\n            updateNftMask(_tokenID);\\n        }\\n    }\\n\\n    function removeLiquidityFromPair(\\n        uint256 _amount\\n    ) internal returns (uint256 bnbRemoved, uint256 dogsRemoved) {\\n        Dogs_BNB_LpToken.approve(address(PancakeRouter), _amount);\\n        // add the liquidity\\n        (bnbRemoved, dogsRemoved) = PancakeRouter.removeLiquidity(\\n            address(BnbToken),\\n            dogsToken,\\n            _amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function pendingRewards(\\n        uint256 _tokenID\\n    ) external view returns (uint256 pigsAmount) {\\n        pigsAmount =\\n            (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) /\\n            1e18;\\n    }\\n\\n    function lpAmount(\\n        uint256 _tokenID\\n    ) external view returns (uint256 _lpAmount) {\\n        _lpAmount = nftInfo[_tokenID].lpAmount;\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address _address) private {\\n        if (IERC20(token).allowance(address(this), address(_address)) == 0) {\\n            IERC20(token).safeApprove(address(_address), type(uint256).max);\\n        }\\n    }\\n\\n    function handlePigsIncrease() internal {\\n        uint256 pigsEarned = getPigsEarned();\\n        pigsRoundMask += (pigsEarned * 1e18) / lpStakedTotal;\\n    }\\n\\n    function _stakeIntoMCPigs(uint256 _amountLP) internal {\\n        allowanceCheckAndSet(\\n            IERC20(Dogs_BNB_LpToken),\\n            address(MasterchefPigs),\\n            _amountLP\\n        );\\n        MasterchefPigs.deposit(1, _amountLP);\\n        lpStakedTotal += _amountLP;\\n        handlePigsIncrease();\\n    }\\n\\n    function allowanceCheckAndSet(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        if (allowance < _amount) {\\n            require(_token.approve(_spender, _amount), \\\"allowance err\\\");\\n        }\\n    }\\n\\n    function setNftManager(address _nftManager) external onlyOwner {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(nftManager));\\n    }\\n\\n    function getPigsEarned() internal returns (uint256) {\\n        uint256 pigsBalance = PigsToken.balanceOf(address(this));\\n        uint256 pigsEarned = pigsBalance - lastPigsBalance;\\n        lastPigsBalance = pigsBalance;\\n        return pigsEarned;\\n    }\\n\\n    function updateNftMask(uint256 _tokenID) internal {\\n        nftInfo[_tokenID].pigsMask = pigsRoundMask;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NftPigMcStakingBnbWWrap.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\".//DogsNftManager.sol\\\";\\nimport \\\"./StakeManagerV2.sol\\\";\\nimport \\\"./interfaces/IDogsExchangeHelper.sol\\\";\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\n\\ncontract NftPigMcStakingBnbWWrap is\\n    Ownable,\\n    ReentrancyGuard //consider doing structure where deposit withdraw etc are done through the dpm to avoid extra approvals\\n{\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public PigsToken =\\n        IERC20(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    IERC20 public BnbToken = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    IERC20 public Dogs_BNB_LpToken =\\n        IERC20(0x2139C481d4f31dD03F924B6e87191E15A33Bf8B4);\\n    IWETH wBnb = IWETH(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    uint256 public lastPigsBalance = 0;\\n    uint256 public pigsRoundMask = 0;\\n    uint256 public lpStakedTotal;\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\n    DogsNftManager public nftManager;\\n    IMasterchefPigs public MasterchefPigs =\\n        IMasterchefPigs(0x8536178222fC6Ec5fac49BbfeBd74CA3051c638f);\\n    IDogsExchangeHelper public DogsExchangeHelper =\\n        IDogsExchangeHelper(0xB59686fe494D1Dd6d3529Ed9df384cD208F182e8);\\n\\n    IUniswapV2Router02 public constant PancakeRouter =\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    mapping(uint256 => NftInfo) public nftInfo;\\n\\n    receive() external payable {}\\n\\n    struct NftInfo {\\n        uint256 lpAmount;\\n        uint256 pigsMask;\\n    }\\n\\n    constructor(address _nftManager) {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(_nftManager));\\n        _approveTokenIfNeeded(dogsToken, address(DogsExchangeHelper));\\n        _approveTokenIfNeeded(address(BnbToken), address(DogsExchangeHelper));\\n    }\\n\\n    function deposit(\\n        uint256 _tokenID,\\n        uint256 _dogsAmount\\n    ) external payable nonReentrant {\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        claimPigsRewardsInternal(_tokenID);\\n        nftManager.useNFTbalance(_tokenID, _dogsAmount, address(this));\\n        uint256 bnbAmount = msg.value;\\n        wBnb.deposit{value: bnbAmount}();\\n        (\\n            uint256 dogsBnbLpReceived,\\n            uint256 balance2,\\n            uint256 balance\\n        ) = DogsExchangeHelper.addDogsLiquidity(\\n                address(BnbToken),\\n                bnbAmount,\\n                _dogsAmount\\n            );\\n        nftManager.returnNFTbalance(_tokenID, balance2, address(this));\\n        BnbToken.transfer(msg.sender, balance);\\n        // nftInfo[_tokenID].dogAmount += _dogsAmount - balance2;\\n        nftInfo[_tokenID].lpAmount += dogsBnbLpReceived;\\n        _stakeIntoMCPigs(dogsBnbLpReceived);\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function withdraw(\\n        uint256 _tokenID,\\n        uint256 _lpPercent\\n    ) external nonReentrant {\\n        require(_lpPercent <= 10000, \\\"invalid percent\\\");\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        uint256 lpToWithdraw = (nftInfo[_tokenID].lpAmount * _lpPercent) /\\n            10000;\\n        MasterchefPigs.withdraw(1, lpToWithdraw);\\n        handlePigsIncrease();\\n        claimPigsRewardsInternal(_tokenID);\\n        lpStakedTotal -= lpToWithdraw;\\n        (uint256 bnbRemoved, uint256 dogsRemoved) = removeLiquidityFromPair(\\n            lpToWithdraw\\n        );\\n        nftInfo[_tokenID].lpAmount -= lpToWithdraw;\\n        wBnb.withdraw(bnbRemoved);\\n        (bool success, ) = (msg.sender).call{value: bnbRemoved}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n        uint256 nftMaxBal = nftManager.nftPotentialBalance(_tokenID);\\n        uint256 nftCurBal = nftManager.nftHoldingBalance(_tokenID);\\n        if (dogsRemoved > nftMaxBal - nftCurBal) {\\n            uint256 fillAmount = nftMaxBal - nftCurBal;\\n            nftManager.returnNFTbalance(_tokenID, fillAmount, address(this));\\n            DogsToken.transfer(msg.sender, dogsRemoved - fillAmount);\\n        } else {\\n            nftManager.returnNFTbalance(_tokenID, dogsRemoved, address(this));\\n        }\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function claimPigsRewardsInternal(uint256 _tokenID) internal {\\n        uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n            (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n        if (pigsAmount > lastPigsBalance) {\\n            pigsAmount = lastPigsBalance;\\n        }\\n        PigsToken.transfer(msg.sender, pigsAmount);\\n        lastPigsBalance -= pigsAmount;\\n        updateNftMask(_tokenID);\\n    }\\n\\n    function claimPigsRewardsPublic(uint256[] memory _tokenIDs) public {\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            uint256 _tokenID = _tokenIDs[i];\\n            require(nftManager.ownerOf(_tokenID) == msg.sender, \\\"not owner\\\");\\n            uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n            if (pigsAmount > lastPigsBalance) {\\n                pigsAmount = lastPigsBalance;\\n            }\\n            PigsToken.transfer(msg.sender, pigsAmount);\\n            lastPigsBalance -= pigsAmount;\\n            updateNftMask(_tokenID);\\n        }\\n    }\\n\\n    function removeLiquidityFromPair(\\n        uint256 _amount\\n    ) internal returns (uint256 bnbRemoved, uint256 dogsRemoved) {\\n        Dogs_BNB_LpToken.approve(address(PancakeRouter), _amount);\\n        // add the liquidity\\n        (bnbRemoved, dogsRemoved) = PancakeRouter.removeLiquidity(\\n            address(BnbToken),\\n            dogsToken,\\n            _amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address _address) private {\\n        if (IERC20(token).allowance(address(this), address(_address)) == 0) {\\n            IERC20(token).safeApprove(address(_address), type(uint256).max);\\n        }\\n    }\\n\\n    function handlePigsIncrease() internal {\\n        uint256 pigsEarned = getPigsEarned();\\n        pigsRoundMask += (pigsEarned * 1e18) / lpStakedTotal;\\n    }\\n\\n    function _stakeIntoMCPigs(uint256 _amountLP) internal {\\n        allowanceCheckAndSet(\\n            IERC20(Dogs_BNB_LpToken),\\n            address(MasterchefPigs),\\n            _amountLP\\n        );\\n        MasterchefPigs.deposit(1, _amountLP);\\n        lpStakedTotal += _amountLP;\\n        handlePigsIncrease();\\n    }\\n\\n    function pendingRewards(\\n        uint256 _tokenID\\n    ) external view returns (uint256 pigsAmount) {\\n        pigsAmount =\\n            (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) /\\n            1e18;\\n    }\\n\\n    function lpAmount(\\n        uint256 _tokenID\\n    ) external view returns (uint256 _lpAmount) {\\n        _lpAmount = nftInfo[_tokenID].lpAmount;\\n    }\\n\\n    function allowanceCheckAndSet(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        if (allowance < _amount) {\\n            require(_token.approve(_spender, _amount), \\\"allowance err\\\");\\n        }\\n    }\\n\\n    function setNftManager(address _nftManager) external onlyOwner {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(nftManager));\\n    }\\n\\n    function getPigsEarned() internal returns (uint256) {\\n        uint256 pigsBalance = PigsToken.balanceOf(address(this));\\n        uint256 pigsEarned = pigsBalance - lastPigsBalance;\\n        lastPigsBalance = pigsBalance;\\n        return pigsEarned;\\n    }\\n\\n    function updateNftMask(uint256 _tokenID) internal {\\n        nftInfo[_tokenID].pigsMask = pigsRoundMask;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NftPigMcStakingBusd.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\".//DogsNftManager.sol\\\";\\nimport \\\"./StakeManagerV2.sol\\\";\\nimport \\\"./interfaces/IDogsExchangeHelper.sol\\\";\\nimport \\\"./interfaces/IDogsToken.sol\\\";\\nimport \\\"./interfaces/IMasterchefPigs.sol\\\";\\n\\ncontract NftPigMcStakingBusd is\\n    Ownable //consider doing structure where deposit withdraw etc are done through the dpm to avoid extra approvals\\n{\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public PigsToken =\\n        IERC20(0x9a3321E1aCD3B9F6debEE5e042dD2411A1742002);\\n    IERC20 public BusdToken =\\n        IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n    IERC20 public Dogs_BUSD_LpToken =\\n        IERC20(0xb5151965b13872B183EBa08e33D0d06743AC8132);\\n    address public dogsToken = 0x198271b868daE875bFea6e6E4045cDdA5d6B9829;\\n    uint256 public lastPigsBalance = 0;\\n    uint256 public pigsRoundMask = 0;\\n    uint256 public lpStakedTotal;\\n    IDogsToken public DogsToken = IDogsToken(dogsToken);\\n    DogsNftManager public nftManager;\\n    IMasterchefPigs public MasterchefPigs =\\n        IMasterchefPigs(0x8536178222fC6Ec5fac49BbfeBd74CA3051c638f);\\n    IDogsExchangeHelper public DogsExchangeHelper =\\n        IDogsExchangeHelper(0xB59686fe494D1Dd6d3529Ed9df384cD208F182e8);\\n\\n    IUniswapV2Router02 public constant PancakeRouter =\\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    mapping(uint256 => NftInfo) public nftInfo;\\n\\n    receive() external payable {}\\n\\n    struct NftInfo {\\n        uint256 lpAmount;\\n        uint256 pigsMask;\\n    }\\n\\n    constructor(address _nftManager) {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(_nftManager));\\n        _approveTokenIfNeeded(dogsToken, address(DogsExchangeHelper));\\n        _approveTokenIfNeeded(address(BusdToken), address(DogsExchangeHelper));\\n    }\\n\\n    function deposit(\\n        uint256 _tokenID,\\n        uint256 _dogsAmount,\\n        uint256 _busdAmount\\n    ) external {\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        claimPigsRewardsInternal(_tokenID);\\n        nftManager.useNFTbalance(_tokenID, _dogsAmount, address(this));\\n        BusdToken.transferFrom(msg.sender, address(this), _busdAmount);\\n        (\\n            uint256 dogsBusdLpReceived,\\n            uint256 balance2,\\n            uint256 balance\\n        ) = DogsExchangeHelper.addDogsLiquidity(\\n                address(BusdToken),\\n                _busdAmount,\\n                _dogsAmount\\n            );\\n        nftManager.returnNFTbalance(_tokenID, balance2, address(this));\\n        BusdToken.transfer(msg.sender, balance);\\n        // nftInfo[_tokenID].dogAmount += _dogsAmount - balance2;\\n        nftInfo[_tokenID].lpAmount += dogsBusdLpReceived;\\n        _stakeIntoMCPigs(dogsBusdLpReceived);\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function withdraw(uint256 _tokenID, uint256 _lpPercent) external {\\n        require(_lpPercent <= 10000, \\\"invalid percent\\\");\\n        nftManager.transferFrom(msg.sender, address(this), _tokenID);\\n        uint256 lpToWithdraw = (nftInfo[_tokenID].lpAmount * _lpPercent) /\\n            10000;\\n        MasterchefPigs.withdraw(0, lpToWithdraw);\\n        handlePigsIncrease();\\n        claimPigsRewardsInternal(_tokenID);\\n        lpStakedTotal -= lpToWithdraw;\\n        (uint256 busdRemoved, uint256 dogsRemoved) = removeLiquidityFromPair(\\n            lpToWithdraw\\n        );\\n        nftInfo[_tokenID].lpAmount -= lpToWithdraw;\\n        BusdToken.transfer(msg.sender, busdRemoved);\\n        uint256 nftMaxBal = nftManager.nftPotentialBalance(_tokenID);\\n        uint256 nftCurBal = nftManager.nftHoldingBalance(_tokenID);\\n        if (dogsRemoved > nftMaxBal - nftCurBal) {\\n            uint256 fillAmount = nftMaxBal - nftCurBal;\\n            nftManager.returnNFTbalance(_tokenID, fillAmount, address(this));\\n            DogsToken.transfer(msg.sender, dogsRemoved - fillAmount);\\n        } else {\\n            nftManager.returnNFTbalance(_tokenID, dogsRemoved, address(this));\\n        }\\n        nftManager.transferFrom(address(this), msg.sender, _tokenID);\\n    }\\n\\n    function claimPigsRewardsInternal(uint256 _tokenID) internal {\\n        uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n            (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n        if (pigsAmount > lastPigsBalance) {\\n            pigsAmount = lastPigsBalance;\\n        }\\n        PigsToken.transfer(msg.sender, pigsAmount);\\n        lastPigsBalance -= pigsAmount;\\n        updateNftMask(_tokenID);\\n    }\\n\\n    function claimPigsRewardsPublic(uint256[] memory _tokenIDs) public {\\n        for (uint256 i = 0; i < _tokenIDs.length; i++) {\\n            uint256 _tokenID = _tokenIDs[i];\\n            require(nftManager.ownerOf(_tokenID) == msg.sender, \\\"not owner\\\");\\n            uint256 pigsAmount = (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) / 1e18;\\n            if (pigsAmount > lastPigsBalance) {\\n                pigsAmount = lastPigsBalance;\\n            }\\n            PigsToken.transfer(msg.sender, pigsAmount);\\n            lastPigsBalance -= pigsAmount;\\n            updateNftMask(_tokenID);\\n        }\\n    }\\n\\n    function removeLiquidityFromPair(\\n        uint256 _amount\\n    ) internal returns (uint256 busdRemoved, uint256 dogsRemoved) {\\n        Dogs_BUSD_LpToken.approve(address(PancakeRouter), _amount);\\n        // add the liquidity\\n        (busdRemoved, dogsRemoved) = PancakeRouter.removeLiquidity(\\n            address(BusdToken),\\n            dogsToken,\\n            _amount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address _address) private {\\n        if (IERC20(token).allowance(address(this), address(_address)) == 0) {\\n            IERC20(token).safeApprove(address(_address), type(uint256).max);\\n        }\\n    }\\n\\n    function handlePigsIncrease() internal {\\n        uint256 pigsEarned = getPigsEarned();\\n        pigsRoundMask += (pigsEarned * 1e18) / lpStakedTotal;\\n    }\\n\\n    function _stakeIntoMCPigs(uint256 _amountLP) internal {\\n        allowanceCheckAndSet(\\n            IERC20(Dogs_BUSD_LpToken),\\n            address(MasterchefPigs),\\n            _amountLP\\n        );\\n        MasterchefPigs.deposit(0, _amountLP);\\n        lpStakedTotal += _amountLP;\\n        handlePigsIncrease();\\n    }\\n\\n    function allowanceCheckAndSet(\\n        IERC20 _token,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        uint256 allowance = _token.allowance(address(this), _spender);\\n        if (allowance < _amount) {\\n            require(_token.approve(_spender, _amount), \\\"allowance err\\\");\\n        }\\n    }\\n\\n    function pendingRewards(\\n        uint256 _tokenID\\n    ) external view returns (uint256 pigsAmount) {\\n        pigsAmount =\\n            (nftInfo[_tokenID].lpAmount *\\n                (pigsRoundMask - nftInfo[_tokenID].pigsMask)) /\\n            1e18;\\n    }\\n\\n    function lpAmount(\\n        uint256 _tokenID\\n    ) external view returns (uint256 _lpAmount) {\\n        _lpAmount = nftInfo[_tokenID].lpAmount;\\n    }\\n\\n    function setNftManager(address _nftManager) external onlyOwner {\\n        nftManager = DogsNftManager(_nftManager);\\n        _approveTokenIfNeeded(dogsToken, address(nftManager));\\n    }\\n\\n    function getPigsEarned() internal returns (uint256) {\\n        uint256 pigsBalance = PigsToken.balanceOf(address(this));\\n        uint256 pigsEarned = pigsBalance - lastPigsBalance;\\n        lastPigsBalance = pigsBalance;\\n        return pigsEarned;\\n    }\\n\\n    function updateNftMask(uint256 _tokenID) internal {\\n        nftInfo[_tokenID].pigsMask = pigsRoundMask;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/NftReadContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DogsNftManager.sol\\\";\\nimport \\\"./LPToTokenCalculator.sol\\\";\\nimport \\\"./StakeManagerV2.sol\\\";\\nimport \\\"./NftPigMcStakingBusd.sol\\\";\\nimport \\\"./NftPigMcStakingBnb.sol\\\";\\n\\ncontract NftReadContract {\\n \\n  LPToTokenCalculator public lpCalc =  LPToTokenCalculator(0x1e55514a1bA84cC4144841111A5BAdA6D1416D08);\\n  StakeManagerV2 public stakeManager;\\n  NftPigMcStakingBnb public nftPigMcStakingBnb;\\n  NftPigMcStakingBusd public nftPigMcStakingBusd; \\n  \\n\\n  \\n  struct WithdrawnStakeInfoView2 {\\n        uint256 nftID;\\n        uint256 currentAmount;\\n        uint256 potentialAmount;\\n        uint256 dogsInLP;\\n        uint256 busdLP;\\n        uint256 bnbLP;\\n        uint256 pigsPendingBusd;\\n        uint256 pigsPendingBnb;\\n        uint256 taxReduction;\\n        uint256 endTime;\\n        bool isAutoPool;\\n\\n  }\\n\\n  constructor (address _stakeManager, address _stakebusd, address _stakebnb) {\\n    stakeManager = StakeManagerV2(_stakeManager);\\n    nftPigMcStakingBusd = NftPigMcStakingBusd(payable(_stakebusd));\\n    nftPigMcStakingBnb = NftPigMcStakingBnb(payable(_stakebnb));\\n  }\\n\\n\\n\\n  function getUserWithdrawnStakes(address _user) external view returns(WithdrawnStakeInfoView2 [] memory ) {\\n    StakeManagerV2.WithdrawnStakeInfoView[] memory stakesinit = stakeManager.getUserWithdrawnStakes(_user);\\n    uint256 len = stakesinit.length;\\n    WithdrawnStakeInfoView2[] memory stakes = new WithdrawnStakeInfoView2[](len);\\n    for(uint256 i = 0; i < len ; i++){\\n      uint256 nftId = stakesinit[i].nftID;\\n      (uint256 lpAmountBusd , )  = (nftPigMcStakingBusd.nftInfo(nftId));\\n      (uint256 lpAmountBnb , ) = (nftPigMcStakingBnb.nftInfo(nftId));\\n      (uint256 lpTotalBusd, ) = lpCalc.calculateTokensFromLPBusd(lpAmountBusd);\\n      (uint256 lpTotalBnb, ) = lpCalc.calculateTokensFromLPBnb(lpAmountBnb);\\n      uint256 lpTotal = lpTotalBusd + lpTotalBnb;\\n      stakes[i].nftID = stakesinit[i].nftID;\\n      stakes[i].currentAmount = stakesinit[i].currentAmount;\\n      stakes[i].potentialAmount = stakesinit[i].potentialAmount;\\n      stakes[i].dogsInLP = lpTotal;\\n      stakes[i].busdLP = lpAmountBusd;\\n      stakes[i].bnbLP = lpAmountBnb;\\n      stakes[i].pigsPendingBusd = nftPigMcStakingBusd.pendingRewards(stakesinit[i].nftID);\\n      stakes[i].pigsPendingBnb = nftPigMcStakingBnb.pendingRewards(stakesinit[i].nftID);\\n      stakes[i].taxReduction = stakesinit[i].taxReduction;\\n      stakes[i].endTime = stakesinit[i].endTime;\\n      stakes[i].isAutoPool = stakesinit[i].isAutoPool;\\n    }\\n\\n    return stakes;\\n    \\n  }\\n\\n\\n  function getWithdrawnStakeInfo(uint256 _tokenId) external view returns (WithdrawnStakeInfoView2 memory){\\n    StakeManagerV2.WithdrawnStakeInfoView memory stakeinit = stakeManager.getUserWithdrawnStake(_tokenId);\\n    WithdrawnStakeInfoView2 memory returnStake;\\n    (uint256 lpAmountBusd , )  = (nftPigMcStakingBusd.nftInfo(_tokenId));\\n    (uint256 lpAmountBnb , ) = (nftPigMcStakingBnb.nftInfo(_tokenId));\\n    (uint256 lpTotalBusd, ) = lpCalc.calculateTokensFromLPBusd(lpAmountBusd);\\n    (uint256 lpTotalBnb, ) = lpCalc.calculateTokensFromLPBnb(lpAmountBnb);\\n    uint256 lpTotal = lpTotalBusd + lpTotalBnb;\\n    returnStake.nftID = stakeinit.nftID;\\n    returnStake.currentAmount = stakeinit.currentAmount;\\n    returnStake.potentialAmount = stakeinit.potentialAmount;\\n    returnStake.dogsInLP = lpTotal;\\n    returnStake.taxReduction = stakeinit.taxReduction;\\n    returnStake.endTime = stakeinit.endTime;\\n    returnStake.isAutoPool = stakeinit.isAutoPool;\\n    returnStake.busdLP = lpAmountBusd;\\n    returnStake.bnbLP = lpAmountBnb;\\n    returnStake.pigsPendingBusd = nftPigMcStakingBusd.pendingRewards(stakeinit.nftID);\\n    returnStake.pigsPendingBnb = nftPigMcStakingBnb.pendingRewards(stakeinit.nftID);\\n    return returnStake;\\n  }\\n\\n\\n\\n}\"\r\n    },\r\n    \"contracts/OptimizerStrategy.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2022-05-05\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOptimizerStrategy {\\n    /// @return Maximul PLP value that could be minted\\n    function maxTotalSupply() external view returns (uint256);\\n\\n    /// @notice Period of time that we observe for price slippage\\n    /// @return time in seconds\\n    function twapDuration() external view returns (uint32);\\n\\n    /// @notice Maximum deviation of time waited avarage price in ticks\\n    function maxTwapDeviation() external view returns (int24);\\n\\n    /// @notice Tick multuplier for base range calculation\\n    function tickRangeMultiplier() external view returns (int24);\\n\\n    /// @notice The price impact percentage during swap denominated in hundredths of a bip, i.e. 1e-6\\n    /// @return The max price impact percentage\\n    function priceImpactPercentage() external view returns (uint24);\\n}\\n\\n/// @title Permissioned Optimizer variables\\n/// @notice Contains Optimizer variables that may only be called by the governance\\ncontract OptimizerStrategy is IOptimizerStrategy {\\n    /// @inheritdoc IOptimizerStrategy\\n    uint256 public override maxTotalSupply;\\n    // Address of the Optimizer's strategy owner\\n    address public governance;\\n    // Pending to claim ownership address\\n    address public pendingGovernance;\\n\\n    /// @inheritdoc IOptimizerStrategy\\n    uint32 public override twapDuration;\\n    /// @inheritdoc IOptimizerStrategy\\n    int24 public override maxTwapDeviation;\\n    /// @inheritdoc IOptimizerStrategy\\n    int24 public override tickRangeMultiplier;\\n    /// @inheritdoc IOptimizerStrategy\\n    uint24 public override priceImpactPercentage;\\n\\n    event TransferGovernance(\\n        address indexed previousGovernance,\\n        address indexed newGovernance\\n    );\\n\\n    /**\\n     * @param _twapDuration TWAP duration in seconds for rebalance check\\n     * @param _maxTwapDeviation Max deviation from TWAP during rebalance\\n     * @param _tickRangeMultiplier Used to determine base order range\\n     * @param _priceImpactPercentage The price impact percentage during swap in hundredths of a bip, i.e. 1e-6\\n     * @param _maxTotalSupply Maximul PLP value that could be minted\\n     */\\n    constructor(\\n        uint32 _twapDuration,\\n        int24 _maxTwapDeviation,\\n        int24 _tickRangeMultiplier,\\n        uint24 _priceImpactPercentage,\\n        uint256 _maxTotalSupply\\n    ) {\\n        twapDuration = _twapDuration;\\n        maxTwapDeviation = _maxTwapDeviation;\\n        tickRangeMultiplier = _tickRangeMultiplier;\\n        priceImpactPercentage = _priceImpactPercentage;\\n        maxTotalSupply = _maxTotalSupply;\\n        governance = msg.sender;\\n        require(_maxTwapDeviation >= 20, \\\"maxTwapDeviation\\\");\\n        require(\\n            _priceImpactPercentage < 1e6 && _priceImpactPercentage > 0,\\n            \\\"PIP\\\"\\n        );\\n        require(maxTotalSupply > 0, \\\"maxTotalSupply\\\");\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"NOT ALLOWED\\\");\\n        _;\\n    }\\n\\n    function setMaxTotalSupply(\\n        uint256 _maxTotalSupply\\n    ) external onlyGovernance {\\n        require(_maxTotalSupply > 0, \\\"maxTotalSupply\\\");\\n        maxTotalSupply = _maxTotalSupply;\\n    }\\n\\n    function setTwapDuration(uint32 _twapDuration) external onlyGovernance {\\n        twapDuration = _twapDuration;\\n    }\\n\\n    function setMaxTwapDeviation(\\n        int24 _maxTwapDeviation\\n    ) external onlyGovernance {\\n        require(_maxTwapDeviation >= 20, \\\"PF\\\");\\n        maxTwapDeviation = _maxTwapDeviation;\\n    }\\n\\n    function setTickRange(int24 _tickRangeMultiplier) external onlyGovernance {\\n        tickRangeMultiplier = _tickRangeMultiplier;\\n    }\\n\\n    function setPriceImpact(\\n        uint16 _priceImpactPercentage\\n    ) external onlyGovernance {\\n        require(\\n            _priceImpactPercentage < 1e6 && _priceImpactPercentage > 0,\\n            \\\"PIP\\\"\\n        );\\n        priceImpactPercentage = _priceImpactPercentage;\\n    }\\n\\n    /**\\n     * @notice `setGovernance()` should be called by the existing governance\\n     * address prior to calling this function.\\n     */\\n    function setGovernance(address _governance) external onlyGovernance {\\n        pendingGovernance = _governance;\\n    }\\n\\n    /**\\n     * @notice Governance address is not updated until the new governance\\n     * address has called `acceptGovernance()` to accept this responsibility.\\n     */\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance, \\\"PG\\\");\\n        emit TransferGovernance(governance, pendingGovernance);\\n        pendingGovernance = address(0);\\n        governance = msg.sender;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OptimizerZapV3.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2023-03-22\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n    function transfer(\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function approve(\\n        address _spender,\\n        uint256 _value\\n    ) external returns (bool success);\\n\\n    function allowance(\\n        address _owner,\\n        address _spender\\n    ) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n}\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\\n\\n    function returnDataToString(\\n        bytes memory data\\n    ) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_SYMBOL)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_NAME)\\n        );\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_DECIMALS)\\n        );\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address to\\n    ) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_BALANCE_OF, to)\\n        );\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @return totalSupply The token totalSupply.\\n    function safeTotalSupply(\\n        IERC20 token\\n    ) internal view returns (uint256 totalSupply) {\\n        (bool success, bytes memory data) = address(token).staticcall(\\n            abi.encodeWithSelector(SIG_TOTALSUPPLY)\\n        );\\n        require(\\n            success && data.length >= 32,\\n            \\\"BoringERC20: totalSupply failed\\\"\\n        );\\n        totalSupply = abi.decode(data, (uint256));\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                0,\\n                0x23b872dd00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(4, from) // Append the \\\"from\\\" argument.\\n            mstore(36, to) // Append the \\\"to\\\" argument.\\n            mstore(68, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 100 because that's the total length of our calldata (4 + 32 * 3)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 100, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                0,\\n                0xa9059cbb00000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(IERC20 token, address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(\\n                0,\\n                0x095ea7b300000000000000000000000000000000000000000000000000000000\\n            )\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(\\n                    and(eq(mload(0), 1), gt(returndatasize(), 31)),\\n                    iszero(returndatasize())\\n                ),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\\n// Simplified by BoringCrypto\\n\\ncontract OwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract Ownable is OwnableData {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(\\n                newOwner != address(0) || renounce,\\n                \\\"Ownable: zero address\\\"\\n            );\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(\\n            msg.sender == _pendingOwner,\\n            \\\"Ownable: caller != pending owner\\\"\\n        );\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\\ninterface IPancakeV3Optimizer {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function deposit(\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        uint256 slippage,\\n        uint256 compSlippage,\\n        address to\\n    ) external returns (uint256 shares, uint256 amount0, uint256 amount1);\\n}\\n\\nimport \\\"./interfaces/INonfungiblePositionManager.sol\\\";\\n\\ncontract OptimizerZapV3 is Ownable {\\n    using BoringERC20 for IERC20;\\n\\n    error ErrSwapFailed0();\\n    error ErrSwapFailed1();\\n\\n    mapping(address => bool) public approvedTargets;\\n    address public immutable weth;\\n    address public immutable eth;\\n    INonfungiblePositionManager public nonFungiblePositionManager =\\n        INonfungiblePositionManager(\\n            payable(0x46A15B0b27311cedF172AB29E4f4766fbE7F4364)\\n        );\\n\\n    struct ZapData {\\n        address tokenIn0;\\n        address tokenIn1;\\n        address to;\\n        address swapTarget0;\\n        address swapTarget1;\\n        IPancakeV3Optimizer optimizer;\\n        uint amountIn0;\\n        uint amountIn1;\\n        bytes swapData0;\\n        bytes swapData1;\\n    }\\n\\n    struct Cache {\\n        address token0;\\n        address token1;\\n        uint256 balance0;\\n        uint256 balance1;\\n        uint256 balanceIn;\\n    }\\n\\n    constructor(address _weth, address _eth) {\\n        weth = _weth;\\n        eth = _eth;\\n        approvedTargets[address(0)] = true; // for non-swaps\\n        approvedTargets[0x13f4EA83D0bd40E75C8222255bc855a974568Dd4] = true;\\n        approvedTargets[0x1b81D678ffb9C0263b24A97847620C99d213eB14] = true;\\n        approvedTargets[0x10ED43C718714eb63d5aA57B78B54704E256024E] = true;\\n    }\\n\\n    function DepositInEth(\\n        IPancakeV3Optimizer optimizer,\\n        address to,\\n        uint _otherAmount,\\n        uint256 slippage,\\n        uint256 compSlip\\n    ) external payable {\\n        require(address(optimizer) != address(0), \\\"ONA\\\");\\n        require(to != address(0), \\\"RNA\\\");\\n\\n        Cache memory cache;\\n\\n        cache.balanceIn = msg.value;\\n        cache.token0 = optimizer.token0();\\n        cache.token1 = optimizer.token1();\\n        require(cache.token0 == weth || cache.token1 == weth, \\\"BO\\\");\\n\\n        IWETH9(weth).deposit{value: cache.balanceIn}();\\n        _approveToken(weth, address(optimizer), cache.balanceIn);\\n        if (cache.token0 == weth) {\\n            IERC20(cache.token1).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _otherAmount\\n            );\\n            _approveToken(cache.token1, address(optimizer), _otherAmount);\\n            (, uint256 amount0, uint256 amount1) = optimizer.deposit(\\n                cache.balanceIn,\\n                _otherAmount,\\n                slippage,\\n                compSlip,\\n                to\\n            );\\n            cache.balance0 = cache.balanceIn - amount0;\\n            cache.balance1 = _otherAmount - amount1;\\n        } else {\\n            IERC20(cache.token0).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _otherAmount\\n            );\\n            _approveToken(cache.token0, address(optimizer), _otherAmount);\\n            (, uint256 amount0, uint256 amount1) = optimizer.deposit(\\n                _otherAmount,\\n                cache.balanceIn,\\n                slippage,\\n                compSlip,\\n                to\\n            );\\n            cache.balance0 = _otherAmount - amount0;\\n            cache.balance1 = cache.balanceIn - amount1;\\n        }\\n        if (cache.balance0 > 0)\\n            IERC20(cache.token0).safeTransfer(to, cache.balance0);\\n        if (cache.balance1 > 0)\\n            IERC20(cache.token1).safeTransfer(to, cache.balance1);\\n    }\\n\\n    function ZapIn(\\n        ZapData memory data,\\n        uint256 slippage,\\n        uint256 compSlip\\n    ) external payable {\\n        require(approvedTargets[data.swapTarget0], \\\"STNA0\\\");\\n        require(approvedTargets[data.swapTarget1], \\\"STNA1\\\");\\n        Cache memory cache;\\n        uint value = msg.value;\\n        cache.token0 = data.optimizer.token0();\\n        cache.token1 = data.optimizer.token1();\\n        cache.balance0 = IERC20(cache.token0).safeBalanceOf(address(this));\\n        cache.balance1 = IERC20(cache.token1).safeBalanceOf(address(this));\\n        if (data.amountIn1 > 0) {\\n            IERC20(data.tokenIn1).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                data.amountIn1\\n            );\\n        }\\n        if (data.tokenIn0 == eth || data.tokenIn0 == address(0)) {\\n            cache.balanceIn = IERC20(weth).safeBalanceOf(address(this));\\n            IWETH9(weth).deposit{value: value}();\\n            data.amountIn0 = value;\\n            data.tokenIn0 = weth;\\n        } else {\\n            cache.balanceIn = IERC20(data.tokenIn0).safeBalanceOf(\\n                address(this)\\n            );\\n            IERC20(data.tokenIn0).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                data.amountIn0\\n            );\\n        }\\n        if (data.swapData0.length > 0) {\\n            _approveToken(data.tokenIn0, data.swapTarget0, data.amountIn0);\\n            (bool success, ) = data.swapTarget0.call(data.swapData0);\\n            if (!success) {\\n                revert ErrSwapFailed0();\\n            }\\n        }\\n        if (data.swapData1.length > 0) {\\n            _approveToken(data.tokenIn0, data.swapTarget1, data.amountIn0);\\n            (bool success, ) = data.swapTarget1.call(data.swapData1);\\n            if (!success) {\\n                revert ErrSwapFailed1();\\n            }\\n        }\\n        cache.balance0 =\\n            IERC20(cache.token0).safeBalanceOf(address(this)) -\\n            cache.balance0;\\n        cache.balance1 =\\n            IERC20(cache.token1).safeBalanceOf(address(this)) -\\n            cache.balance1;\\n        _approveToken(cache.token0, address(data.optimizer), cache.balance0);\\n        _approveToken(cache.token1, address(data.optimizer), cache.balance1);\\n        (, uint amount0, uint amount1) = data.optimizer.deposit(\\n            cache.balance0,\\n            cache.balance1,\\n            slippage,\\n            compSlip,\\n            data.to\\n        );\\n        cache.balance0 = cache.balance0 - amount0;\\n        cache.balance1 = cache.balance1 - amount1;\\n        if (cache.balance0 > 0)\\n            IERC20(cache.token0).safeTransfer(data.to, cache.balance0);\\n        if (cache.balance1 > 0)\\n            IERC20(cache.token1).safeTransfer(data.to, cache.balance1);\\n        cache.balanceIn =\\n            IERC20(data.tokenIn0).safeBalanceOf(address(this)) -\\n            cache.balanceIn;\\n        if (cache.balanceIn > 0)\\n            IERC20(data.tokenIn0).safeTransfer(data.to, cache.balanceIn);\\n    }\\n\\n    function ZapInNFT(\\n        ZapData memory data,\\n        uint256 slippage,\\n        uint256 nftId,\\n        uint256 amount0MinNft,\\n        uint256 amount1MinNft,\\n        uint256 compSlip\\n    ) external payable {\\n        require(approvedTargets[data.swapTarget0], \\\"STNA0\\\");\\n        require(approvedTargets[data.swapTarget1], \\\"STNA1\\\");\\n        Cache memory cache;\\n        cache.token0 = data.optimizer.token0();\\n        cache.token1 = data.optimizer.token1();\\n        cache.balance0 = IERC20(cache.token0).safeBalanceOf(address(this));\\n        cache.balance1 = IERC20(cache.token1).safeBalanceOf(address(this));\\n        cache.balanceIn = IERC20(data.tokenIn0).safeBalanceOf(address(this));\\n\\n        nonFungiblePositionManager.transferFrom(\\n            msg.sender,\\n            address(this),\\n            nftId\\n        );\\n        (, , , , , , , uint128 liquidity, , , , ) = nonFungiblePositionManager\\n            .positions(nftId);\\n        nonFungiblePositionManager.decreaseLiquidity(\\n            INonfungiblePositionManager.DecreaseLiquidityParams(\\n                nftId,\\n                liquidity,\\n                amount0MinNft,\\n                amount1MinNft,\\n                block.timestamp\\n            )\\n        );\\n        nonFungiblePositionManager.collect(\\n            INonfungiblePositionManager.CollectParams(\\n                nftId,\\n                address(this),\\n                type(uint128).max,\\n                type(uint128).max\\n            )\\n        );\\n        //         struct DecreaseLiquidityParams {\\n        //     uint256 tokenId;\\n        //     uint128 liquidity;\\n        //     uint256 amount0Min;\\n        //     uint256 amount1Min;\\n        //     uint256 deadline;\\n        // }\\n\\n        // IERC20(data.tokenIn).safeTransferFrom(\\n        //     msg.sender,\\n        //     address(this),\\n        //     data.amountIn\\n        // );\\n\\n        if (data.swapData0.length > 0) {\\n            _approveToken(data.tokenIn0, data.swapTarget0, data.amountIn0);\\n            (bool success, ) = data.swapTarget0.call(data.swapData0);\\n            if (!success) {\\n                revert ErrSwapFailed0();\\n            }\\n        }\\n        cache.balance0 =\\n            IERC20(cache.token0).safeBalanceOf(address(this)) -\\n            cache.balance0;\\n        cache.balance1 =\\n            IERC20(cache.token1).safeBalanceOf(address(this)) -\\n            cache.balance1;\\n        _approveToken(cache.token0, address(data.optimizer), cache.balance0);\\n        _approveToken(cache.token1, address(data.optimizer), cache.balance1);\\n        (, uint amount0, uint amount1) = data.optimizer.deposit(\\n            cache.balance0,\\n            cache.balance1,\\n            slippage,\\n            compSlip,\\n            data.to\\n        );\\n        cache.balance0 = cache.balance0 - amount0;\\n        cache.balance1 = cache.balance1 - amount1;\\n        if (cache.balance0 > 0)\\n            IERC20(cache.token0).safeTransfer(data.to, cache.balance0);\\n        if (cache.balance1 > 0)\\n            IERC20(cache.token1).safeTransfer(data.to, cache.balance1);\\n        cache.balanceIn =\\n            IERC20(data.tokenIn0).safeBalanceOf(address(this)) -\\n            cache.balanceIn;\\n        if (cache.balanceIn > 0)\\n            IERC20(data.tokenIn0).safeTransfer(data.to, cache.balanceIn);\\n    }\\n\\n    function _approveToken(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (IERC20(token).allowance(address(this), spender) > 0)\\n            IERC20(token).safeApprove(spender, 0);\\n        IERC20(token).safeApprove(spender, amount);\\n    }\\n\\n    //Only Owner\\n\\n    function approveTarget(address _target) external onlyOwner {\\n        approvedTargets[_target] = true;\\n    }\\n\\n    function rejectTarget(address _target) external onlyOwner {\\n        require(approvedTargets[_target], \\\"TNA\\\");\\n        approvedTargets[_target] = false;\\n    }\\n\\n    function recoverLostToken(IERC20 _token) external onlyOwner {\\n        _token.safeTransfer(owner, _token.safeBalanceOf(address(this)));\\n    }\\n\\n    // function deposit(\\n    // uint256 amount0Desired,\\n    // uint256 amount1Desired,\\n    // uint256 slippage,\\n    // uint256 compSlippage,\\n    //     address to\\n    // )\\n\\n    function depositEndpoint(\\n        uint256 amount0Desired,\\n        uint256 amount1Desired,\\n        uint256 slippage,\\n        uint256 compSlippage,\\n        address optimizer\\n    ) external {\\n        IPancakeV3Optimizer _optimizer = IPancakeV3Optimizer(optimizer);\\n        Cache memory cache;\\n        cache.token0 = _optimizer.token0();\\n        cache.token1 = _optimizer.token1();\\n        cache.balance0 = IERC20(cache.token0).safeBalanceOf(address(this));\\n        cache.balance1 = IERC20(cache.token1).safeBalanceOf(address(this));\\n        IERC20(cache.token0).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount0Desired\\n        );\\n        IERC20(cache.token1).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount1Desired\\n        );\\n        cache.balance0 =\\n            IERC20(cache.token0).safeBalanceOf(address(this)) -\\n            cache.balance0;\\n        cache.balance1 =\\n            IERC20(cache.token1).safeBalanceOf(address(this)) -\\n            cache.balance1;\\n        _approveToken(cache.token0, address(_optimizer), cache.balance0);\\n        _approveToken(cache.token1, address(_optimizer), cache.balance1);\\n        (, uint amount0, uint amount1) = _optimizer.deposit(\\n            amount0Desired,\\n            amount1Desired,\\n            slippage,\\n            compSlippage,\\n            msg.sender\\n        );\\n        cache.balance0 = cache.balance0 - amount0;\\n        cache.balance1 = cache.balance1 - amount1;\\n        if (cache.balance0 > 0)\\n            IERC20(cache.token0).safeTransfer(msg.sender, cache.balance0);\\n        if (cache.balance1 > 0)\\n            IERC20(cache.token1).safeTransfer(msg.sender, cache.balance1);\\n    }\\n\\n    function refundETH() external onlyOwner {\\n        if (address(this).balance > 0)\\n            BoringERC20.safeTransferETH(owner, address(this).balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ReferralSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ReferralSystem is Ownable {\\n\\n    address public operator;\\n\\n    mapping(address => address) public referrers; // user address => referrer address\\n    mapping(address => uint256) public referralsCount; // referrer address => referrals count\\n    mapping(address => uint256) public totalReferralCommissions; // referrer address => total referral commissions\\n\\n    event ReferralRecorded(address indexed user, address indexed referrer);\\n    event ReferralCommissionRecorded(address indexed referrer, uint256 commission);\\n    event OperatorUpdated(address indexed operator);\\n\\n    modifier onlyOperator {\\n        require(operator == msg.sender, \\\"Operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    function recordReferral(address _user, address _referrer) external onlyOperator {\\n        if (_user != address(0)\\n        && _referrer != address(0)\\n        && _user != _referrer\\n            && referrers[_user] == address(0)\\n        ) {\\n            referrers[_user] = _referrer;\\n            referralsCount[_referrer] += 1;\\n            emit ReferralRecorded(_user, _referrer);\\n        }\\n    }\\n\\n    function recordReferralCommission(address _referrer, uint256 _commission) external onlyOperator {\\n        if (_referrer != address(0)) {\\n            totalReferralCommissions[_referrer] += _commission;\\n            emit ReferralCommissionRecorded(_referrer, _commission);\\n        }\\n    }\\n\\n    // Get the referrer address that referred the user\\n    function getReferrer(address _user) external view returns (address) {\\n        return referrers[_user];\\n    }\\n\\n\\n    function updateOperator(address _operator) external onlyOwner {\\n        require(_operator != address(0), \\\"operator cannot be the 0 address\\\");\\n        require(operator == address(0), \\\"operator is already set!\\\");\\n\\n        operator = _operator;\\n\\n        emit OperatorUpdated(_operator);\\n    }\\n}\"\r\n    },\r\n    \"contracts/RewardsVaultBnb.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IDogPoundActions.sol\\\";\\nimport \\\"./interfaces/IDogPoundManager.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract RewardsVaultBNB is Ownable {\\n\\n    address public loyalityPoolAddress1;\\n    address public loyalityPoolAddress2;\\n\\n    uint256 public lastPayout;\\n    uint256 public payoutRate = 3; //3% a day\\n    uint256 public distributionInterval = 3600;\\n    IDogPoundManager public DogPoundManager;\\n\\n    // Events\\n    event RewardsDistributed(uint256 rewardAmount);\\n    event UpdatePayoutRate(uint256 payout);\\n    event UpdateDistributionInterval(uint256 interval);\\n\\n    constructor(address _dogPoundManager){\\n        lastPayout = block.timestamp;\\n        DogPoundManager = IDogPoundManager(_dogPoundManager);\\n    }\\n\\n    receive() external payable {}\\n\\n    function payoutDivs() public {\\n\\n        uint256 dividendBalance = address(this).balance;\\n\\n        if (block.timestamp - lastPayout > distributionInterval && dividendBalance > 0) {\\n\\n            //A portion of the dividend is paid out according to the rate\\n            uint256 share = dividendBalance * payoutRate / 100 / 24 hours;\\n            //divide the profit by seconds in the day\\n            uint256 profit = share * (block.timestamp - lastPayout);\\n\\n            if (profit > dividendBalance){\\n                profit = dividendBalance;\\n            }\\n\\n            lastPayout = block.timestamp;\\n            uint256 poolSize;\\n            poolSize = DogPoundManager.getAutoPoolSize();\\n            uint256 transfer1Size = (profit * poolSize)/10000;\\n            uint256 transfer2Size = profit - transfer1Size;\\n            payable (loyalityPoolAddress1).transfer(transfer1Size);\\n            payable (loyalityPoolAddress2).transfer(transfer2Size);\\n\\n\\n            emit RewardsDistributed(profit);\\n\\n        }\\n    }\\n\\n    function updateLoyalityPoolAddress(address _loyalityPoolAddress1, address _loyalityPoolAddress2) external onlyOwner {\\n        loyalityPoolAddress1 = _loyalityPoolAddress1;\\n        loyalityPoolAddress2 = _loyalityPoolAddress2;\\n    }\\n\\n    function updatePayoutRate(uint256 _newPayout) external onlyOwner {\\n        require(_newPayout <= 100, 'invalid payout rate');\\n        payoutRate = _newPayout;\\n        emit UpdatePayoutRate(payoutRate);\\n    }\\n\\n    function setDogPoundManager(IDogPoundManager _dogPoundManager) external onlyOwner {\\n        DogPoundManager = _dogPoundManager;\\n    }   \\n\\n    function payOutAllRewards() external onlyOwner {\\n        uint256 rewardBalance = address(this).balance;\\n        uint256 poolSize;\\n        poolSize = DogPoundManager.getAutoPoolSize();\\n        uint256 transfer1Size = (rewardBalance * poolSize)/10000;\\n        uint256 transfer2Size = rewardBalance - transfer1Size;\\n        payable (loyalityPoolAddress1).transfer(transfer1Size);\\n        payable (loyalityPoolAddress2).transfer(transfer2Size);\\n    }\\n\\n    function updateDistributionInterval(uint256 _newInterval) external onlyOwner {\\n        require(_newInterval > 0 && _newInterval < 24 hours, 'invalid interval');\\n        distributionInterval = _newInterval;\\n        emit UpdateDistributionInterval(distributionInterval);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/StakeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\ncontract StakeManager is Ownable{\\r\\n\\r\\n    struct UserInfo {\\r\\n\\r\\n        uint256 totalStakedDefault; //linear\\r\\n        uint256 totalStakedAutoCompound;\\r\\n\\r\\n        uint256 walletStartTime;\\r\\n        uint256 overThresholdTimeCounter;\\r\\n\\r\\n        uint256 activeStakesCount;\\r\\n        uint256 withdrawStakesCount;\\r\\n\\r\\n        mapping(uint256 => StakeInfo) activeStakes;\\r\\n        mapping(uint256 => WithdrawnStakeInfo) withdrawnStakes;\\r\\n\\r\\n    }\\r\\n\\r\\n    struct StakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    } \\r\\n\\r\\n    struct StakeInfoView {\\r\\n        uint256 stakeID;\\r\\n        uint256 taxReduction;\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    } \\r\\n\\r\\n    struct WithdrawnStakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct WithdrawnStakeInfoView {\\r\\n        uint256 stakeID;\\r\\n        uint256 amount;\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    address public DogPoundManger;\\r\\n    mapping(address => UserInfo) userInfo;\\r\\n\\r\\n\\r\\n    uint256 public reliefPerDay = 75;      // 0.75% default\\r\\n    uint256 public reliefPerDayExtra = 25; // 0.25%\\r\\n\\r\\n    constructor(address _DogPoundManger){\\r\\n        DogPoundManger = _DogPoundManger;\\r\\n    }\\r\\n\\r\\n    modifier onlyDogPoundManager() {\\r\\n        require(DogPoundManger == msg.sender, \\\"manager only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function saveStake(address _user, uint256 _amount, bool _isAutoCompound) onlyDogPoundManager external{\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        user.activeStakes[user.activeStakesCount].amount = _amount;\\r\\n        user.activeStakes[user.activeStakesCount].startTime = block.timestamp;\\r\\n        user.activeStakes[user.activeStakesCount].isAutoPool = _isAutoCompound;\\r\\n        user.activeStakesCount++;\\r\\n        if(_isAutoCompound){\\r\\n            user.totalStakedAutoCompound += _amount;\\r\\n        }else{\\r\\n            user.totalStakedDefault += _amount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawFromStake(address _user,uint256 _amount, uint256 _stakeID) onlyDogPoundManager  external{\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        StakeInfo storage activeStake = user.activeStakes[_stakeID];\\r\\n        require(_amount > 0, \\\"withdraw: zero amount\\\");\\r\\n        require(activeStake.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n        uint256 withdrawCount = user.withdrawStakesCount;\\r\\n        uint256 taxReduction = getActiveStakeTaxReduction(_user, _stakeID);\\r\\n        bool isAutoCompound = isStakeAutoPool(_user,_stakeID);\\r\\n        user.withdrawnStakes[withdrawCount].amount = _amount;\\r\\n        user.withdrawnStakes[withdrawCount].taxReduction = taxReduction;\\r\\n        user.withdrawnStakes[withdrawCount].endTime = block.timestamp;\\r\\n        user.withdrawnStakes[withdrawCount].isAutoPool = isAutoCompound;\\r\\n        user.withdrawStakesCount++;\\r\\n        activeStake.amount -= _amount;\\r\\n        if(isAutoCompound){\\r\\n            user.totalStakedAutoCompound -= _amount;\\r\\n        }else{\\r\\n            user.totalStakedDefault -= _amount;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function utilizeWithdrawnStake(address _user, uint256 _amount, uint256 _stakeID) onlyDogPoundManager external {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        WithdrawnStakeInfo storage withdrawnStake = user.withdrawnStakes[_stakeID];\\r\\n        require(withdrawnStake.amount >= _amount);\\r\\n        user.withdrawnStakes[_stakeID].amount -= _amount;\\r\\n    }\\r\\n\\r\\n    function getUserActiveStakes(address _user) public view returns (StakeInfoView[] memory){\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        StakeInfoView[] memory stakes = new StakeInfoView[](user.activeStakesCount);\\r\\n        for (uint256 i=0; i < user.activeStakesCount; i++){\\r\\n            stakes[i] = StakeInfoView({\\r\\n                stakeID : i,\\r\\n                taxReduction:getActiveStakeTaxReduction(_user,i),\\r\\n                amount : user.activeStakes[i].amount,\\r\\n                startTime : user.activeStakes[i].startTime,\\r\\n                isAutoPool : user.activeStakes[i].isAutoPool\\r\\n            });\\r\\n        }\\r\\n        return stakes;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUserWithdrawnStakes(address _user) public view returns (WithdrawnStakeInfoView[] memory){\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        WithdrawnStakeInfoView[] memory stakes = new WithdrawnStakeInfoView[](user.withdrawStakesCount);\\r\\n        for (uint256 i=0; i < user.withdrawStakesCount; i++){\\r\\n            stakes[i] = WithdrawnStakeInfoView({\\r\\n                stakeID : i,\\r\\n                amount : user.withdrawnStakes[i].amount,\\r\\n                taxReduction : user.withdrawnStakes[i].taxReduction,\\r\\n                endTime : user.withdrawnStakes[i].endTime,\\r\\n                isAutoPool : user.withdrawnStakes[i].isAutoPool\\r\\n            });\\r\\n        }\\r\\n        return stakes;\\r\\n    }\\r\\n\\r\\n    function getActiveStakeTaxReduction(address _user, uint256 _stakeID) public view returns (uint256){\\r\\n        StakeInfo storage activeStake = userInfo[_user].activeStakes[_stakeID];\\r\\n        uint256 relief = reliefPerDay;\\r\\n        if (activeStake.isAutoPool){\\r\\n            relief = reliefPerDay + reliefPerDayExtra;\\r\\n        }\\r\\n        uint256 taxReduction = ((block.timestamp - activeStake.startTime) / 24 hours) * relief;\\r\\n        return taxReduction;\\r\\n\\r\\n    }\\r\\n\\r\\n    function getWithdrawnStakeTaxReduction(address _user, uint256 _stakeID) public view returns (uint256){\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n        return user.withdrawnStakes[_stakeID].taxReduction;\\r\\n    }\\r\\n\\r\\n    function getUserActiveStake(address _user, uint256 _stakeID) external view returns (StakeInfo memory){\\r\\n        return userInfo[_user].activeStakes[_stakeID];\\r\\n\\r\\n    }\\r\\n    \\r\\n    function changeReliefValues(uint256 relief1,uint256 relief2) external onlyOwner{\\r\\n        require(relief1+relief2 < 1000);\\r\\n        reliefPerDay = relief1;\\r\\n        reliefPerDayExtra = relief2;\\r\\n    }\\r\\n\\r\\n    function getUserWithdrawnStake(address _user, uint256 _stakeID) external view returns (WithdrawnStakeInfo memory){\\r\\n        return userInfo[_user].withdrawnStakes[_stakeID];\\r\\n    }\\r\\n\\r\\n    function isStakeAutoPool(address _user, uint256 _stakeID) public view returns (bool){\\r\\n        return userInfo[_user].activeStakes[_stakeID].isAutoPool;\\r\\n    }\\r\\n\\r\\n    function totalStaked(address _user) public view returns (uint256){\\r\\n        return userInfo[_user].totalStakedDefault + userInfo[_user].totalStakedAutoCompound;\\r\\n    }\\r\\n    \\r\\n    function setDogPoundManager(address _address) public onlyOwner {\\r\\n        DogPoundManger = _address;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/StakeManagerV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./StakeManager.sol\\\";\\r\\nimport \\\"./DogsNftManager.sol\\\";\\r\\n\\r\\ncontract StakeManagerV2 is Ownable {\\r\\n    struct UserInfoV2 {\\r\\n        uint256 activeStakesCount;\\r\\n        mapping(uint256 => StakeInfo) activeStakes;\\r\\n    }\\r\\n\\r\\n    struct StakeInfo {\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct StakeInfoView {\\r\\n        uint256 stakeID;\\r\\n        uint256 taxReduction;\\r\\n        uint256 amount;\\r\\n        uint256 startTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct WithdrawnStakeInfoOld {\\r\\n        uint256 amount;\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct WithdrawnStakeInfo {\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    struct WithdrawnStakeInfoView {\\r\\n        uint256 nftID;\\r\\n        uint256 currentAmount;\\r\\n        uint256 potentialAmount;\\r\\n        uint256 taxReduction;\\r\\n        uint256 endTime;\\r\\n        bool isAutoPool;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfoV2) public userInfo;\\r\\n    mapping(uint256 => WithdrawnStakeInfo) public nftWithdrawnStakes;\\r\\n    mapping(address => bool) public allowedAddress;\\r\\n    mapping(address => bool) public initAddress;\\r\\n\\r\\n    StakeManager public stakeManagerV1 =\\r\\n        StakeManager(0x25A959dDaEcEb50c1B724C603A57fe7b32eCbEeA);\\r\\n    DogsNftManager public nftManager;\\r\\n    uint256 public reliefPerDay = 75; // 0.75% default\\r\\n    uint256 public reliefPerDayExtra = 25; // 0.25%\\r\\n\\r\\n    constructor(address _DogPoundManger, address _DogsNftManager) {\\r\\n        allowedAddress[_DogPoundManger] = true;\\r\\n        nftManager = DogsNftManager(_DogsNftManager);\\r\\n    }\\r\\n\\r\\n    modifier onlyAllowedAddress() {\\r\\n        require(allowedAddress[msg.sender], \\\"allowed only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function saveStake(\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        bool _isAutoCompound\\r\\n    ) external onlyAllowedAddress {\\r\\n        if (!initAddress[_user]) {\\r\\n            userInfo[_user].activeStakesCount = getOldActiveStakeCount(_user);\\r\\n            initAddress[_user] = true;\\r\\n        }\\r\\n        UserInfoV2 storage user = userInfo[_user];\\r\\n        user.activeStakes[user.activeStakesCount].amount = _amount;\\r\\n        user.activeStakes[user.activeStakesCount].startTime = block.timestamp;\\r\\n        user.activeStakes[user.activeStakesCount].isAutoPool = _isAutoCompound;\\r\\n        user.activeStakesCount++;\\r\\n    }\\r\\n\\r\\n    function saveStakeOldUserInit(\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        bool _isAutoCompound,\\r\\n        uint256 _lastActiveStake\\r\\n    ) external onlyAllowedAddress {\\r\\n        require(\\r\\n            !initAddress[_user] &&\\r\\n                stakeManagerV1\\r\\n                    .getUserActiveStake(_user, _lastActiveStake)\\r\\n                    .startTime !=\\r\\n                0 &&\\r\\n                stakeManagerV1\\r\\n                    .getUserActiveStake(_user, _lastActiveStake + 1)\\r\\n                    .startTime ==\\r\\n                0,\\r\\n            \\\"Passed stake isnt last stake\\\"\\r\\n        );\\r\\n        userInfo[_user].activeStakesCount == _lastActiveStake + 1;\\r\\n        initAddress[_user] = true;\\r\\n        UserInfoV2 storage user = userInfo[_user];\\r\\n        user.activeStakes[user.activeStakesCount].amount = _amount;\\r\\n        user.activeStakes[user.activeStakesCount].startTime = block.timestamp;\\r\\n        user.activeStakes[user.activeStakesCount].isAutoPool = _isAutoCompound;\\r\\n        user.activeStakesCount++;\\r\\n    }\\r\\n\\r\\n    function withdrawFromStake(\\r\\n        address _user,\\r\\n        uint256 _amount,\\r\\n        uint256 _stakeID,\\r\\n        address _from\\r\\n    ) external onlyAllowedAddress {\\r\\n        UserInfoV2 storage user = userInfo[_user];\\r\\n        StakeInfo storage activeStake = user.activeStakes[_stakeID];\\r\\n        if (activeStake.startTime == 0) {\\r\\n            user.activeStakes[_stakeID] = activeStakeMove(_user, _stakeID);\\r\\n            activeStake = user.activeStakes[_stakeID];\\r\\n        }\\r\\n        require(_amount > 0, \\\"withdraw: zero amount\\\");\\r\\n        require(activeStake.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n        uint256 taxReduction = getActiveStakeTaxReduction(_user, _stakeID);\\r\\n        bool isAutoCompound = activeStake.isAutoPool;\\r\\n        uint256 nftTokenID = nftManager.mintForWithdrawnStake(\\r\\n            _user,\\r\\n            _amount,\\r\\n            _from\\r\\n        );\\r\\n        nftWithdrawnStakes[nftTokenID].taxReduction = taxReduction;\\r\\n        nftWithdrawnStakes[nftTokenID].endTime = block.timestamp;\\r\\n        nftWithdrawnStakes[nftTokenID].isAutoPool = isAutoCompound;\\r\\n        activeStake.amount -= _amount;\\r\\n    }\\r\\n\\r\\n    function mergeNFTs(\\r\\n        //burning usage and aggregation permissions has to be handled outside\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount,\\r\\n        uint256 _mergeFrom\\r\\n    ) external onlyAllowedAddress {\\r\\n        uint256 _nftTokenID = nftManager.mintForWithdrawnStake(\\r\\n            _to,\\r\\n            _amount,\\r\\n            _from\\r\\n        );\\r\\n        uint256 _taxReduction = nftWithdrawnStakes[_mergeFrom].taxReduction;\\r\\n        bool _isAutoCompound = nftWithdrawnStakes[_mergeFrom].isAutoPool;\\r\\n        uint256 _endTime = nftWithdrawnStakes[_mergeFrom].endTime;\\r\\n        nftWithdrawnStakes[_nftTokenID].taxReduction = _taxReduction;\\r\\n        nftWithdrawnStakes[_nftTokenID].endTime = _endTime;\\r\\n        nftWithdrawnStakes[_nftTokenID].isAutoPool = _isAutoCompound;\\r\\n    }\\r\\n\\r\\n    function transitionOldWithdrawnStake(\\r\\n        address _user,\\r\\n        uint256 _stakeID,\\r\\n        address _from\\r\\n    ) external onlyAllowedAddress {\\r\\n        WithdrawnStakeInfoOld memory oldStake = withdrawnStakeMoveInternal(\\r\\n            _user,\\r\\n            _stakeID\\r\\n        );\\r\\n        stakeManagerV1.utilizeWithdrawnStake(_user, oldStake.amount, _stakeID);\\r\\n        uint256 nftTokenID = nftManager.mintForWithdrawnStake(\\r\\n            _user,\\r\\n            oldStake.amount,\\r\\n            _from\\r\\n        );\\r\\n        nftWithdrawnStakes[nftTokenID].taxReduction = oldStake.taxReduction;\\r\\n        nftWithdrawnStakes[nftTokenID].endTime = oldStake.endTime;\\r\\n        nftWithdrawnStakes[nftTokenID].isAutoPool = oldStake.isAutoPool;\\r\\n    }\\r\\n\\r\\n    function activeStakeMove(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) public view returns (StakeInfo memory) {\\r\\n        StakeManager.StakeInfo memory oldActiveStake = stakeManagerV1\\r\\n            .getUserActiveStake(_user, _stakeID);\\r\\n        return\\r\\n            StakeInfo(\\r\\n                oldActiveStake.amount,\\r\\n                oldActiveStake.startTime,\\r\\n                oldActiveStake.isAutoPool\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function withdrawnStakeMove(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) public view returns (WithdrawnStakeInfoOld memory) {\\r\\n        StakeManager.WithdrawnStakeInfo\\r\\n            memory oldWithdrawnStake = stakeManagerV1.getUserWithdrawnStake(\\r\\n                _user,\\r\\n                _stakeID\\r\\n            );\\r\\n        return\\r\\n            WithdrawnStakeInfoOld(\\r\\n                oldWithdrawnStake.amount,\\r\\n                oldWithdrawnStake.taxReduction,\\r\\n                oldWithdrawnStake.endTime,\\r\\n                oldWithdrawnStake.isAutoPool\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function withdrawnStakeMoveInternal(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) internal view returns (WithdrawnStakeInfoOld memory) {\\r\\n        StakeManager.WithdrawnStakeInfo\\r\\n            memory oldWithdrawnStake = stakeManagerV1.getUserWithdrawnStake(\\r\\n                _user,\\r\\n                _stakeID\\r\\n            );\\r\\n        return\\r\\n            WithdrawnStakeInfoOld(\\r\\n                oldWithdrawnStake.amount,\\r\\n                oldWithdrawnStake.taxReduction,\\r\\n                oldWithdrawnStake.endTime,\\r\\n                oldWithdrawnStake.isAutoPool\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getUserActiveStakes(\\r\\n        address _user\\r\\n    ) public view returns (StakeInfoView[] memory) {\\r\\n        UserInfoV2 storage user = userInfo[_user];\\r\\n        uint256 listInit = user.activeStakesCount;\\r\\n        if (listInit == 0) {\\r\\n            listInit = getOldActiveStakeCount(_user);\\r\\n        }\\r\\n        StakeInfoView[] memory stakes = new StakeInfoView[](listInit);\\r\\n        for (uint256 i = 0; i < listInit; i++) {\\r\\n            if (user.activeStakes[i].startTime == 0) {\\r\\n                StakeInfo memory tempInf = activeStakeMove(_user, i);\\r\\n                stakes[i] = StakeInfoView({\\r\\n                    stakeID: i,\\r\\n                    taxReduction: stakeManagerV1.getActiveStakeTaxReduction(\\r\\n                        _user,\\r\\n                        i\\r\\n                    ),\\r\\n                    amount: tempInf.amount,\\r\\n                    startTime: tempInf.startTime,\\r\\n                    isAutoPool: tempInf.isAutoPool\\r\\n                });\\r\\n            } else {\\r\\n                stakes[i] = StakeInfoView({\\r\\n                    stakeID: i,\\r\\n                    taxReduction: getActiveStakeTaxReduction(_user, i),\\r\\n                    amount: user.activeStakes[i].amount,\\r\\n                    startTime: user.activeStakes[i].startTime,\\r\\n                    isAutoPool: user.activeStakes[i].isAutoPool\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n        return stakes;\\r\\n    }\\r\\n\\r\\n    function getUserWithdrawnStakes(\\r\\n        address _user\\r\\n    ) public view returns (WithdrawnStakeInfoView[] memory) {\\r\\n        uint256 balance = nftManager.balanceOf(_user);\\r\\n        WithdrawnStakeInfoView[] memory stakes = new WithdrawnStakeInfoView[](\\r\\n            balance\\r\\n        );\\r\\n        uint256[] memory nftList = new uint256[](balance);\\r\\n        for (uint256 i = 0; i < balance; i++) {\\r\\n            nftList[i] = nftManager.tokenOfOwnerByIndex(_user, i);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < balance; i++) {\\r\\n            stakes[i] = WithdrawnStakeInfoView({\\r\\n                nftID: nftList[i],\\r\\n                currentAmount: nftManager.nftHoldingBalance(nftList[i]),\\r\\n                potentialAmount: nftManager.nftPotentialBalance(nftList[i]),\\r\\n                taxReduction: nftWithdrawnStakes[nftList[i]].taxReduction,\\r\\n                endTime: nftWithdrawnStakes[nftList[i]].endTime,\\r\\n                isAutoPool: nftWithdrawnStakes[nftList[i]].isAutoPool\\r\\n            });\\r\\n        }\\r\\n        return stakes;\\r\\n    }\\r\\n\\r\\n    function getOldActiveStakeCount(\\r\\n        address _user\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 finalI = 0;\\r\\n        while (true) {\\r\\n            if (\\r\\n                stakeManagerV1.getUserActiveStake(_user, finalI).startTime == 0\\r\\n            ) {\\r\\n                break;\\r\\n            }\\r\\n            finalI += 100;\\r\\n        }\\r\\n        if (finalI != 0) {\\r\\n            finalI -= 90;\\r\\n            while (true) {\\r\\n                if (\\r\\n                    stakeManagerV1\\r\\n                        .getUserActiveStake(_user, finalI)\\r\\n                        .startTime == 0\\r\\n                ) {\\r\\n                    break;\\r\\n                }\\r\\n                finalI += 10;\\r\\n            }\\r\\n            for (uint256 i = finalI - 9; i < finalI; i++) {\\r\\n                if (\\r\\n                    stakeManagerV1.getUserActiveStake(_user, i).startTime == 0\\r\\n                ) {\\r\\n                    return i;\\r\\n                }\\r\\n            }\\r\\n            return finalI;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getActiveStakeTaxReduction(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) public view returns (uint256) {\\r\\n        StakeInfo storage activeStake = userInfo[_user].activeStakes[_stakeID];\\r\\n        uint256 relief = reliefPerDay;\\r\\n        if (activeStake.isAutoPool) {\\r\\n            relief = reliefPerDay + reliefPerDayExtra;\\r\\n        }\\r\\n        uint256 taxReduction = ((block.timestamp - activeStake.startTime) /\\r\\n            24 hours) * relief;\\r\\n        return taxReduction;\\r\\n    }\\r\\n\\r\\n    function getWithdrawnStakeTaxReduction(\\r\\n        uint256 _tokenID\\r\\n    ) public view returns (uint256) {\\r\\n        return nftWithdrawnStakes[_tokenID].taxReduction;\\r\\n    }\\r\\n\\r\\n    function getUserActiveStake(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) external view returns (StakeInfo memory) {\\r\\n        return userInfo[_user].activeStakes[_stakeID];\\r\\n    }\\r\\n\\r\\n    function getUserWithdrawnStake(\\r\\n        uint256 _tokenID\\r\\n    ) external view returns (WithdrawnStakeInfoView memory) {\\r\\n        return\\r\\n            WithdrawnStakeInfoView(\\r\\n                _tokenID,\\r\\n                nftManager.nftHoldingBalance(_tokenID),\\r\\n                nftManager.nftPotentialBalance(_tokenID),\\r\\n                nftWithdrawnStakes[_tokenID].taxReduction,\\r\\n                nftWithdrawnStakes[_tokenID].endTime,\\r\\n                nftWithdrawnStakes[_tokenID].isAutoPool\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function isStakeAutoPool(\\r\\n        address _user,\\r\\n        uint256 _stakeID\\r\\n    ) public view returns (bool) {\\r\\n        if (userInfo[_user].activeStakes[_stakeID].startTime == 0) {\\r\\n            return activeStakeMove(_user, _stakeID).isAutoPool;\\r\\n        } else {\\r\\n            return userInfo[_user].activeStakes[_stakeID].isAutoPool;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeReliefValues(\\r\\n        uint256 relief1,\\r\\n        uint256 relief2\\r\\n    ) external onlyOwner {\\r\\n        require(relief1 + relief2 < 1000);\\r\\n        reliefPerDay = relief1;\\r\\n        reliefPerDayExtra = relief2;\\r\\n    }\\r\\n\\r\\n    function setNftManager(address _nftManager) external onlyOwner {\\r\\n        nftManager = DogsNftManager(_nftManager);\\r\\n    }\\r\\n\\r\\n    function setAllowedAddress(address _address, bool _state) public onlyOwner {\\r\\n        allowedAddress[_address] = _state;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/StrategyChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./interfaces/IPancakeswapFarm.sol\\\";\\nimport \\\"./interfaces/ICakePool.sol\\\";\\n\\ncontract StrategyChefV2 is ReentrancyGuard, Pausable {\\n\\n    // Maximises yields in pancakeswap\\n    using SafeERC20 for IERC20;\\n\\n    bool public isCAKEStaking; \\n    bool public immutable isStaking; \\n    ICakePool public cakePoolContract = ICakePool(0x45c54210128a065de780C4B0Df3d16664f7f859e);\\n    address public constant cakeTokenAddress = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\\n\\n    address public farmContractAddress; \\n    uint256 public pid; \\n    address public wantAddress;\\n    address public earnedAddress;\\n\\n    address public immutable MasterChefAddress;\\n    address public govAddress;\\n    address public feeAddress;\\n\\n    uint256 public earnDistributeThreshold = 10e18;\\n    uint256 public wantLockedTotal = 0;\\n\\n    // Events\\n    event FeeAddressUpdated(address feeAddress);\\n    event EarnedAddressUpdated(address earnedAddress);\\n    event GovUpdated(address govAddress);\\n    event StuckTokenRemoval(address token, uint256 amount, address to);\\n    event EarnDistributeThresholdUpdated(uint256 earnDistributeThreshold);\\n\\n    modifier onlyMasterChef() {\\n        require(msg.sender == MasterChefAddress, \\\"Only Masterchef!\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        bool _isStaking,\\n        address _farmContractAddress,\\n        uint256 _pid,\\n        address _wantAddress,\\n        address _earnedAddress\\n    ) {\\n        govAddress = 0x27B788282B3120a254d16bc8d52f16e526F59645;\\n        MasterChefAddress = 0x78205CE1a7e714CAE95a32e65B6dA7b2dA8D8A10;\\n        isCAKEStaking = false;\\n        isStaking = _isStaking;\\n        wantAddress = _wantAddress;\\n        feeAddress = 0xA76216D578BdA59d50B520AaF717B187D21F5121;\\n\\n        if (_isStaking) {\\n            farmContractAddress = _farmContractAddress;\\n            pid = _pid;\\n            earnedAddress = _earnedAddress;\\n        }\\n\\n        if (isCAKEStaking){\\n            IERC20(cakeTokenAddress).approve(address(cakePoolContract), type(uint256).max);\\n        }\\n    }\\n\\n    // Receives new deposits from user\\n    function deposit(uint256 _wantAmt)\\n    external\\n    onlyMasterChef\\n    whenNotPaused\\n    nonReentrant\\n    returns (uint256)\\n    {\\n        uint256 wantBalBefore = IERC20(wantAddress).balanceOf(address(this));\\n\\n        IERC20(wantAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _wantAmt\\n        );\\n        uint256 wantBalAfter = IERC20(wantAddress).balanceOf(address(this));\\n\\n        _wantAmt = wantBalAfter - wantBalBefore;\\n        if (isStaking) {\\n            _farm(_wantAmt);\\n        } else {\\n            wantLockedTotal = wantLockedTotal + _wantAmt;\\n        }\\n\\n        return _wantAmt;\\n    }\\n\\n    function _farm(uint256 _wantAmt) internal {\\n        wantLockedTotal = wantLockedTotal + _wantAmt;\\n        IERC20(wantAddress).safeIncreaseAllowance(farmContractAddress, _wantAmt);\\n\\n        if (isCAKEStaking) {\\n            // _amount, _lockDuration\\n            cakePoolContract.deposit(_wantAmt, 0); // Just for CAKE staking, we dont use deposit()\\n        } else {\\n            IPancakeswapFarm(farmContractAddress).deposit(pid, _wantAmt);\\n        }\\n    }\\n\\n    function withdraw(uint256 _wantAmt)\\n    external\\n    onlyMasterChef\\n    nonReentrant\\n    returns (uint256)\\n    {\\n        require(_wantAmt > 0, \\\"_wantAmt <= 0\\\");\\n        if (isStaking) {\\n            if (isCAKEStaking) {\\n                cakePoolContract.withdrawByAmount(_wantAmt); // Just for CAKE staking, we dont use withdraw()\\n            } else {\\n                IPancakeswapFarm(farmContractAddress).withdraw(pid, _wantAmt);\\n            }\\n        }\\n\\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\\n        if (_wantAmt > wantAmt) {\\n            _wantAmt = wantAmt;\\n        }\\n\\n        if (wantLockedTotal < _wantAmt) {\\n            _wantAmt = wantLockedTotal;\\n        }\\n\\n        wantLockedTotal = wantLockedTotal - _wantAmt;\\n\\n        IERC20(wantAddress).safeTransfer(MasterChefAddress, _wantAmt);\\n\\n        if (isStaking) {\\n            distributeFee();\\n        }\\n\\n        return _wantAmt;\\n    }\\n\\n    // 1. Harvest farm tokens\\n    // 2. Converts farm tokens into want tokens\\n    // 3. Deposits want tokens\\n\\n    function earn() external whenNotPaused nonReentrant {\\n        require(isStaking, \\\"!isStaking\\\");\\n\\n        // Harvest farm tokens\\n        if (!isCAKEStaking) {\\n            IPancakeswapFarm(farmContractAddress).withdraw(pid, 0);\\n        }\\n\\n        distributeFee();\\n    }\\n\\n    function distributeFee() internal {\\n\\n        // Converts farm tokens into want tokens\\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\\n        if (earnedAmt > earnDistributeThreshold){\\n            IERC20(earnedAddress).safeTransfer(feeAddress, earnedAmt);\\n        }\\n    }\\n\\n    function pause() external {\\n        require(msg.sender == govAddress, \\\"Not authorised\\\");\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        require(msg.sender == govAddress, \\\"Not authorised\\\");\\n        _unpause();\\n    }\\n\\n    function setGov(address _govAddress) external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        govAddress = _govAddress;\\n        emit GovUpdated(govAddress);\\n    }\\n\\n    function setFeeAddress(address _feeAddress) external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        require(_feeAddress != address(0), \\\"!nonzero\\\");\\n        feeAddress = _feeAddress;\\n        emit FeeAddressUpdated(feeAddress);\\n    }\\n\\n    function setEarnedAddress(address _earnedAddress) external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        require(_earnedAddress != address(0), \\\"!nonzero\\\");\\n        earnedAddress = _earnedAddress;\\n        emit EarnedAddressUpdated(earnedAddress);\\n    }\\n\\n    function setEarnDistributeThreshold(uint256 _earnDistributeThreshold) external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        earnDistributeThreshold = _earnDistributeThreshold;\\n        emit EarnDistributeThresholdUpdated(_earnDistributeThreshold);\\n    }\\n\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        require(_token != wantAddress, \\\"!safe\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n        emit StuckTokenRemoval(_to, _amount, _to);\\n    }\\n\\n\\n}\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BnbToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DogsExchangeHelper\",\"outputs\":[{\"internalType\":\"contract IDogsExchangeHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DogsToken\",\"outputs\":[{\"internalType\":\"contract IDogsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dogs_BNB_LpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MasterchefPigs\",\"outputs\":[{\"internalType\":\"contract IMasterchefPigs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PancakeRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PigsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"claimPigsRewardsPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dogsAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPigsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"lpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pigsMask\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftManager\",\"outputs\":[{\"internalType\":\"contract DogsNftManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pigsAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pigsRoundMask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftManager\",\"type\":\"address\"}],\"name\":\"setNftManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpPercent\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NftPigMcStakingBnbWWrap", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009ca4f23d5aadae320a04a73a07f146a203b1ae84", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}