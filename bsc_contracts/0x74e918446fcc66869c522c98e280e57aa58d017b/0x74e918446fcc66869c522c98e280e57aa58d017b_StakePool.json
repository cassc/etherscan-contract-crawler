{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StakePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport { RewardTreasury } from \\\"./RewardTreasury.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev The StakePool contract allows users to stake tokens in exchange for rewards.\\r\\n * Rewards can be distributed in any token, be it the same token that is being staked\\r\\n * or another one.\\r\\n *\\r\\n * A fixed number of reward tokens is distributed every block.\\r\\n * This amount can be updated anytime by the contract owner and the update will\\r\\n * be effective from the next block.\\r\\n *\\r\\n * The amount of reward entitled to each user is calculated based on its\\r\\n * weight in the pool.\\r\\n *\\r\\n * The pool opens at a specific start block.\\r\\n * After the start block is reached, users will be able to {deposit} stake tokens.\\r\\n * To receive all the accrued rewards to their wallet, they can call the {claimReward} function.\\r\\n *\\r\\n * When the end block is reached, no more rewards will be distributed and deposits will be disabled.\\r\\n * Staked tokens are still withdrawable through the {widthdraw} function and pending reward can still be claimed.\\r\\n *\\r\\n * Every time tokens are deposited or withdrawn, all the pending rewards are automatically sent to user's wallet.\\r\\n */\\r\\ncontract StakePool is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @dev Info of each user.\\r\\n    struct UserInfo {\\r\\n        // How many `stakeTokens` the user has provided.\\r\\n        uint256 amount;\\r\\n        // Reward debt. See explanation below.\\r\\n        uint256 rewardDebt;\\r\\n        //\\r\\n        // Any point in time, the amount of reward tokens entitled to a user\\r\\n        // but is pending to be distributed is:\\r\\n        //\\r\\n        //   pendingReward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws tokens to the pool:\\r\\n        //   1. The `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    /// @dev The token to be staked.\\r\\n    IERC20 public stakeToken;\\r\\n    /// @dev The token in which rewards are distributed.\\r\\n    IERC20 public rewardToken;\\r\\n    /// @dev The treasury contract that holds the reward tokens to be distributed.\\r\\n    RewardTreasury public rewardTreasury;\\r\\n    /// @dev The most recent block up to which the rewards have been calculated.\\r\\n    uint256 public lastRewardBlock;\\r\\n    /// @dev Accumulated reward per share, times 1e12. See explanation above.\\r\\n    uint256 public accRewardPerShare;\\r\\n    /// @dev The total amount of tokens staked.\\r\\n    uint256 public totalStakedTokens;\\r\\n    /// @dev The block when reward distribution starts.\\r\\n    uint256 public startBlock;\\r\\n    /// @dev The block when reward distribution ends.\\r\\n    uint256 public endBlock;\\r\\n    /// @dev Reward tokens to be distributed per block.\\r\\n    uint256 public rewardPerBlock;\\r\\n    /// @dev Info of each user that stakes tokens.\\r\\n    mapping (address => UserInfo) public usersInfo;\\r\\n\\r\\n    /// @dev Emitter when `user` deposits some tokens.\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    /// @dev Emitter when `user` withdraws some tokens.\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    /// @dev Emitter when `user` claims the accrues rewards.\\r\\n    event RewardClaim(address indexed user, uint256 amount);\\r\\n    /// @dev Emitter when `user` performs an emergency withdraw.\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes state variables.\\r\\n     */\\r\\n    constructor(\\r\\n        IERC20 stakeToken_,\\r\\n        IERC20 rewardToken_,\\r\\n        uint256 startBlock_,\\r\\n        uint256 endBlock_,\\r\\n        uint256 rewardPerBlock_\\r\\n    ) {\\r\\n        stakeToken = stakeToken_;\\r\\n        rewardToken = rewardToken_;\\r\\n        startBlock = startBlock_;\\r\\n        endBlock = endBlock_;\\r\\n        rewardPerBlock = rewardPerBlock_;\\r\\n        rewardTreasury = new RewardTreasury(rewardToken_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds reward tokens to the `rewardTreasury`.\\r\\n     */\\r\\n    function addRewardTokens(uint256 amount) external {\\r\\n        rewardToken.safeTransferFrom(msg.sender, address(rewardTreasury), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes reward tokens from the `rewardTreasury`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller must be the owner.\\r\\n     */\\r\\n    function removeRewardTokens(uint256 amount) external onlyOwner {\\r\\n        rewardTreasury.sendReward(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the reward distributed for each block.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller must be the owner.\\r\\n     */\\r\\n    function setRewardPerBlock(uint256 rewardPerBlock_) external onlyOwner {\\r\\n        _updatePool();\\r\\n\\r\\n        rewardPerBlock = rewardPerBlock_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates the block when reward distribution ends.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - caller must be the owner.\\r\\n     */\\r\\n    function setEndBlock(uint256 endBlock_) external onlyOwner {\\r\\n        require(endBlock_ >= block.number, \\\"Pool: new endBlock is in the past\\\");\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        if (endBlock < block.number) {\\r\\n            lastRewardBlock = block.number;\\r\\n        }\\r\\n\\r\\n        endBlock = endBlock_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits tokens.\\r\\n     *\\r\\n     * Pending reward will be automatically sent to user's wallet.\\r\\n     */\\r\\n    function deposit(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Pool: deposit amount is zero\\\");\\r\\n        require(block.number >= startBlock, \\\"Pool: pool is not open yet\\\");\\r\\n        require(block.number < endBlock, \\\"Pool: pool is already closed\\\");\\r\\n\\r\\n        UserInfo storage userInfo = usersInfo[msg.sender];\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        if (userInfo.amount > 0) {\\r\\n            _sendReward(msg.sender);\\r\\n        }\\r\\n\\r\\n        userInfo.amount += amount;\\r\\n        userInfo.rewardDebt = userInfo.amount * accRewardPerShare / 1e12;\\r\\n        totalStakedTokens += amount;\\r\\n\\r\\n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        emit Deposit(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws tokens.\\r\\n     *\\r\\n     * Pending reward will be automatically sent to user's wallet.\\r\\n     */\\r\\n    function withdraw(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Pool: withdraw amount is zero\\\");\\r\\n\\r\\n        UserInfo storage userInfo = usersInfo[msg.sender];\\r\\n\\r\\n        require(userInfo.amount >= amount, \\\"Pool: not enough staked tokens\\\");\\r\\n\\r\\n        _updatePool();\\r\\n        _sendReward(msg.sender);\\r\\n\\r\\n        userInfo.amount -= amount;\\r\\n        userInfo.rewardDebt = userInfo.amount * accRewardPerShare / 1e12;\\r\\n        totalStakedTokens -= amount;\\r\\n\\r\\n        stakeToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit Withdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sends all the accrued reward to user's wallet.\\r\\n     */\\r\\n    function claimReward() external {\\r\\n        UserInfo storage userInfo = usersInfo[msg.sender];\\r\\n\\r\\n        require(userInfo.amount > 0, \\\"Pool: no staked token\\\");\\r\\n\\r\\n        _updatePool();\\r\\n        _sendReward(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws all tokens without caring about the reward.\\r\\n     *\\r\\n     * Only for emergencies.\\r\\n     */\\r\\n    function emergencyWithdraw() external {\\r\\n        UserInfo storage userInfo = usersInfo[msg.sender];\\r\\n\\r\\n        require(userInfo.amount > 0, \\\"Pool: nothing to withdraw\\\");\\r\\n\\r\\n        uint256 amount = userInfo.amount;\\r\\n\\r\\n        userInfo.amount = 0;\\r\\n        userInfo.rewardDebt = 0;\\r\\n        totalStakedTokens -= amount;\\r\\n\\r\\n        stakeToken.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of pending reward to be claimed.\\r\\n     */\\r\\n    function getPendingReward(address user) public view returns (uint256) {\\r\\n        UserInfo storage userInfo = usersInfo[user];\\r\\n\\r\\n        uint256 lastProfitableBlock = block.number > endBlock ? endBlock : block.number;\\r\\n        uint256 currentAccRewardPerShare = accRewardPerShare;\\r\\n\\r\\n        if (lastProfitableBlock > lastRewardBlock && totalStakedTokens != 0) {\\r\\n            uint256 elapsedBlocks = lastProfitableBlock - lastRewardBlock;\\r\\n            uint256 reward = rewardPerBlock * elapsedBlocks;\\r\\n\\r\\n            currentAccRewardPerShare = accRewardPerShare + reward * 1e12 / totalStakedTokens;\\r\\n        }\\r\\n\\r\\n        return userInfo.amount * currentAccRewardPerShare / 1e12 - userInfo.rewardDebt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updated contract variables to be up-to-date.\\r\\n     */\\r\\n    function _updatePool() internal {\\r\\n        uint256 lastProfitableBlock = block.number > endBlock ? endBlock : block.number;\\r\\n\\r\\n        if (lastProfitableBlock <= lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (totalStakedTokens == 0) {\\r\\n            lastRewardBlock = lastProfitableBlock;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 elapsedBlocks = lastProfitableBlock - lastRewardBlock;\\r\\n        uint256 reward = rewardPerBlock * elapsedBlocks;\\r\\n\\r\\n        accRewardPerShare += reward * 1e12 / totalStakedTokens;\\r\\n        lastRewardBlock = lastProfitableBlock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to send all the accrued reward to user's wallet.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * The pool must be updated with {_updatePool} before calling this function.\\r\\n     */\\r\\n    function _sendReward(address user) internal {\\r\\n        uint256 pendingReward = getPendingReward(user);\\r\\n\\r\\n        if (pendingReward > 0) {\\r\\n            UserInfo storage userInfo = usersInfo[user];\\r\\n            userInfo.rewardDebt = userInfo.amount * accRewardPerShare / 1e12;\\r\\n\\r\\n            rewardTreasury.sendReward(user, pendingReward);\\r\\n\\r\\n            emit RewardClaim(user, pendingReward);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RewardTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev The RewardTresury contract stores the tokens to be sent as reward\\r\\n * for the StakePool.\\r\\n */\\r\\ncontract RewardTreasury is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// @dev The token in which rewards are distributed\\r\\n    IERC20 public token;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes state variables.\\r\\n     */\\r\\n    constructor(IERC20 token_) {\\r\\n        token = token_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the reward to user's wallet.\\r\\n     */\\r\\n    function sendReward(address to, uint256 amount) external onlyOwner {\\r\\n        token.safeTransfer(to, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTreasury\",\"outputs\":[{\"internalType\":\"contract RewardTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endBlock_\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock_\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakePool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002992bed56a519670efa04f904801e20c322670db000000000000000000000000feea0bdd3d07eb6fe305938878c0cadbfa16904200000000000000000000000000000000000000000000000000000000007bf94e000000000000000000000000000000000000000000000000000000000089284e0000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}