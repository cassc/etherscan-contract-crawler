{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract PreSale_Contract is Ownable {\r\n    using SafeMath for uint256;\r\n    IERC20 public token; \r\n    uint256 public rate;\r\n    uint8 public tokenDecimals; \r\n    uint8 public usdtDecimals; \r\n    uint256 public tokenWeiRaised;\r\n    uint256 public usdtMaxPurchase;\r\n    address payable private admin;\r\n    mapping(address => uint256) public purchasedUSDT;\r\n\r\n    IERC20 public usdtToken;\r\n    address public usdtTokenAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n   // address public usdtTokenAddress = 0x337610d27c682E347C9cD60BD4b3b107C9d34dDd;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    // Modifier to ensure that only the owner can set the USDT token address\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(msg.sender == owner || msg.sender == admin, \"Only the owner or admin can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUsdtTokenHolders(address account) {\r\n        require(usdtToken.allowance(account, address(this)) > 0, \"USDT allowance not set\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _rate, IERC20 _token, uint256 _max) public {\r\n        require(_rate > 0);\r\n        require(address(_token) != address(0));\r\n        rate = _rate;\r\n        token = _token;\r\n        tokenDecimals = 18; \r\n        admin = msg.sender;\r\n        usdtToken = IERC20(usdtTokenAddress);\r\n        usdtMaxPurchase = _max;\r\n    }\r\n\r\n    fallback () external payable {\r\n        revert();\r\n    }\r\n\r\n    receive () external payable {\r\n        revert();\r\n    }\r\n\r\n    function buyTokensWithUSDT(address _beneficiary, uint256 usdtAmount) public payable  onlyUsdtTokenHolders(msg.sender) {\r\n        require(address(usdtToken) != address(0), \"USDT token address is not set\");\r\n        uint256 maxUsdtAmount = maxUsdt(_beneficiary);\r\n        require(usdtAmount > 0 && usdtAmount <= maxUsdtAmount, \"Invalid USDT amount\");\r\n\r\n        require(usdtToken.transferFrom(msg.sender, address(this), usdtAmount), \"USDT transfer failed\");\r\n        uint256 tokens = _getTokenAmount(usdtAmount);\r\n        tokenWeiRaised = tokenWeiRaised.add(usdtAmount);\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, _beneficiary, usdtAmount, tokens);\r\n    }\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint256 _usdtAmount) public view returns (uint256) {\r\n        require(_beneficiary != address(0));\r\n        require(_usdtAmount > 0);\r\n        uint256 tokenAmount = _getTokenAmount(_usdtAmount);\r\n        uint256 curBalance = token.balanceOf(address(this));\r\n        if (tokenAmount > curBalance) {\r\n            return curBalance.mul(uint256(10)**uint256(tokenDecimals)).div(rate);\r\n        }\r\n        return _usdtAmount;\r\n    }\r\n\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.transfer(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    function _updatePurchasingState(address _beneficiary, uint256 _usdtAmount) internal {\r\n        purchasedUSDT[_beneficiary] = _usdtAmount.add(purchasedUSDT[_beneficiary]);\r\n    }\r\n\r\n    function _getTokenAmount(uint256 _usdtAmount) public view returns (uint256) {\r\n        return _usdtAmount.mul(rate).div(uint256(10)**usdtDecimals);\r\n    }\r\n\r\n    function maxUsdt(address _beneficiary) public view returns (uint256) {\r\n        return usdtMaxPurchase.sub(purchasedUSDT[_beneficiary]);\r\n    }\r\n\r\n    function withdrawTokens(uint256 tokens) external onlyOwner {\r\n     require(admin == msg.sender, \"caller is not the owner\");\r\n     token.transfer(admin, tokens);\r\n    \r\n    }\r\n\r\n    function withdrawUSDT(uint256 usdtAmount) public onlyOwner {\r\n    require(address(usdtToken) != address(0), \"USDT token address is not set\");\r\n    require(usdtAmount > 0, \"Withdrawal amount must be greater than 0\");\r\n    require(usdtToken.transfer(owner, usdtAmount), \"USDT transfer failed\");\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"_getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"_preValidatePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUSDT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"maxUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWeiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtMaxPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PreSale_Contract", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb200000000000000000000000000000000000000000000000000000000000000c8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bdc040485eb1baf33ce1af2be25b502e1eb4b793d36551f519f7738b70b284d5"}