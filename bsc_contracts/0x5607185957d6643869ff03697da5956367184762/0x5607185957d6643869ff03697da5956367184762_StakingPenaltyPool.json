{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/staking/pools/StakingPenaltyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./StakingPool.sol\\\";\\n\\nimport \\\"../../tier-calculator/interfaces/ITierCalculator.sol\\\";\\n\\ncontract StakingPenaltyPool is StakingPool {\\n\\n    struct Penalty {\\n        uint256 duration;\\n        uint256 penaltyBP;\\n    }\\n\\n    Penalty[] public allPenalties;\\n\\n    event ChargedPenalty(uint256 penaltyAmount, uint256 penaltyBP);\\n\\n    function __StakingPenaltyPool_init(\\n        IERC20Upgradeable _stakingToken,\\n        IERC20Upgradeable _poolToken,\\n        uint256 _startTime,\\n        uint256 _finishTime,\\n        uint256 _poolTokenAmount,\\n        bool _hasWhitelisting,\\n        IStakeMaster _stakeMaster,\\n        uint256 _depositFeeBP,\\n        address _feeTo\\n    ) public initializer {\\n        StakingPool.__StakingPool_init(\\n            _stakingToken,\\n            _poolToken,\\n            _startTime,\\n            _finishTime,\\n            _poolTokenAmount,\\n            _hasWhitelisting,\\n            _stakeMaster,\\n            _depositFeeBP,\\n            _feeTo\\n        );\\n\\n        // - less than 10 days - 30%\\n        // - less than 20 days - 25%\\n        // - less than 30 days - 20%\\n        // - less than 60 days - 10%\\n        // - less than 90 days - 5%\\n        // - after 90 days - 0%\\n\\n        allPenalties.push(Penalty(864000, 3000));\\n        allPenalties.push(Penalty(1728000, 2500));\\n        allPenalties.push(Penalty(2592000, 2000));\\n        allPenalties.push(Penalty(5184000, 1000));\\n        allPenalties.push(Penalty(7776000, 500));\\n    }\\n\\n    function getPenaltyBP(address _user) public view returns (uint256) {\\n        ITierCalculator tierCalculator = ITierCalculator(stakeMaster.tierCalculator());\\n        if (address(tierCalculator) != address(0)) {\\n            return getPenaltyBP(tierCalculator.userLockingStarts(_user));\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getPenaltyBP(uint256 _startTime) public view returns (uint256) {\\n        uint256 duration = now.sub(_startTime);\\n\\n        uint256 len = allPenalties.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (duration < allPenalties[i].duration) {\\n                return allPenalties[i].penaltyBP;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getPenalty(address _user, uint256 _claimAmount) public view returns (uint256 penaltyAmount, uint256 penaltyBP) {\\n        penaltyBP = getPenaltyBP(_user);\\n        penaltyAmount = _claimAmount.mul(penaltyBP).div(MAX_BPS);\\n    }\\n\\n    function stakeTokens(uint256 _amountToStake) public override {\\n        super.stakeTokens(_amountToStake);\\n\\n        if(stakeMaster.tierCalculator() != address(0)) {\\n            stakeMaster.resetStartOnce(msg.sender);\\n        }\\n    }\\n\\n    // Leave the pool. Claim back your tokens.\\n    // Unlocks the staked + gained tokens and burns pool shares\\n    function withdrawStake(uint256 _amount) public override {\\n        (uint256 penaltyAmount, uint256 penaltyBP) = getPenalty(msg.sender, _amount);\\n\\n        // IMPORTANT: first step \u2013 withdraw without penalty, second step \u2013 charge penalty\\n        super.withdrawStake(_amount.sub(penaltyAmount));\\n        _chargePenalty(msg.sender, penaltyAmount, penaltyBP);\\n\\n        // update reward debt states after the penalty has been charged\\n        if (penaltyAmount > 0) {\\n            UserInfo storage user = userInfo[msg.sender];\\n\\n            allRewardDebt = allRewardDebt.sub(user.rewardDebt);\\n            user.rewardDebt = user.amount.mul(accTokensPerShare).div(1e18);\\n            allRewardDebt = allRewardDebt.add(user.rewardDebt); \\n        }\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw() public override {\\n        (uint256 penaltyAmount, uint256 penaltyBP) = getPenalty(msg.sender, userInfo[msg.sender].amount);\\n\\n        // IMPORTANT: first step \u2013 charge penalty, second step \u2013 emergencyWithdraw\\n        _chargePenalty(msg.sender, penaltyAmount, penaltyBP);\\n        super.emergencyWithdraw();\\n    }\\n\\n    function updatePenalty(uint256 _index, uint256 _duration, uint256 _penaltyBP) external onlyOwnerOrAdmin {\\n        require(_index < allPenalties.length, \\\"Incorrect index\\\");\\n        require(_penaltyBP <= MAX_BPS, \\\"Invalid penalty BP\\\");\\n\\n        Penalty storage item = allPenalties[_index];\\n        item.duration = _duration;\\n        item.penaltyBP = _penaltyBP;\\n    }\\n\\n    function _chargePenalty(address _user, uint256 _penaltyAmount, uint256 _penaltyBP) internal {\\n        if (_penaltyAmount > 0) {\\n            userInfo[_user].amount = userInfo[_user].amount.sub(_penaltyAmount);\\n            allStakedAmount = allStakedAmount.sub(_penaltyAmount);\\n            stakingToken.safeTransfer(feeTo, _penaltyAmount);\\n        }\\n\\n        emit ChargedPenalty(_penaltyAmount, _penaltyBP);\\n    }\\n}\"\r\n    },\r\n    \"/contracts/utils/AdminableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nabstract contract AdminableUpgradeable is OwnableUpgradeable {\\n\\n    mapping(address => bool) public isAdmin;\\n\\n    event SetAdminPermission(address indexed admin, bool permission);\\n\\n    modifier onlyAdmin {\\n        require(isAdmin[msg.sender], \\\"Only admin can call\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrAdmin {\\n        require((owner() == msg.sender) || isAdmin[msg.sender], \\\"Only owner or admin can call\\\");\\n        _;\\n    }\\n\\n    function __Adminable_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    function setAdminPermission(address _user, bool _permission) external onlyOwner {\\n        isAdmin[_user] = _permission;\\n\\n        emit SetAdminPermission(_user, _permission);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/tier-calculator/interfaces/ITierCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ITierCalculator {\\n\\n    function getTierIndex(address _user, address _deal)\\n        external\\n        view\\n        returns (bool success, uint256 tierIndex, bool withNft);\\n\\n    function resetStartOnce(address _user) external;\\n\\n    function resetStart(address _user) external;\\n\\n    function changeWallet(address _from, address _to) external;\\n\\n    function userLockingStarts(address _user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/staking/whitelist/WhitelistUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../utils/AdminableUpgradeable.sol\\\";\\n\\ncontract WhitelistUpgradeable is AdminableUpgradeable {\\n\\n    mapping(address => bool) public whitelist;\\n\\n    bool public hasWhitelisting = false;\\n\\n    event AddedToWhitelist(address account);\\n    event RemovedFromWhitelist(address account);\\n\\n    modifier onlyWhitelisted() {\\n        if(hasWhitelisting){\\n            require(isWhitelisted(msg.sender));\\n        }\\n        _;\\n    }\\n    \\n    function __Whitelist_init (bool _hasWhitelisting) public initializer {\\n        __Adminable_init();\\n        hasWhitelisting = _hasWhitelisting;\\n    }\\n\\n    function add(address[] memory _addresses) public onlyOwnerOrAdmin {\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            whitelist[_addresses[i]] = true;\\n\\n            emit AddedToWhitelist(_addresses[i]);\\n        }\\n    }\\n\\n    function remove(address[] memory _addresses) public onlyOwnerOrAdmin {\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            address uAddress = _addresses[i];\\n            if(whitelist[uAddress]){\\n                whitelist[uAddress] = false;\\n                emit RemovedFromWhitelist(uAddress);\\n            }\\n        }\\n    }\\n\\n    function isWhitelisted(address _address) public view returns(bool) {\\n        return whitelist[_address];\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/staking/pools/StakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IStakeMaster.sol\\\";\\nimport \\\"../whitelist/WhitelistUpgradeable.sol\\\";\\nimport \\\"../../utils/AdminableUpgradeable.sol\\\";\\n\\ncontract StakingPool is WhitelistUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    bool public allowReinvest;\\n\\n    IERC20Upgradeable public stakingToken;\\n    IERC20Upgradeable public rewardToken;\\n    IStakeMaster public stakeMaster;\\n\\n    uint256 public startTime;\\n    uint256 public lastRewardTime;\\n    uint256 public finishTime;\\n    uint256 public allStakedAmount;\\n    uint256 public allPaidReward;\\n    uint256 public allRewardDebt;\\n    uint256 public poolTokenAmount;\\n    uint256 public rewardPerSec;\\n    uint256 public accTokensPerShare; // Accumulated tokens per share\\n    uint256 public participants; //Count of participants\\n\\n    address public feeTo; // deposit fee to this address (wihtout StakeMaster profit sharing)\\n    uint256 public depositFeeBP;\\n\\n    uint256 public constant MAX_BPS = 10000; // 100% in basis points\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;     // How many tokens the user has staked.\\n        uint256 rewardDebt; // Reward debt\\n        bool registrated;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    event PoolReplenished(uint256 amount);\\n    event TokensStaked(address indexed user, uint256 amount, uint256 reward, bool reinvest);\\n    event StakeWithdrawn(address indexed user, uint256 amount, uint256 reward);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    event WithdrawPoolRemainder(address indexed user, uint256 amount);\\n    event UpdateFinishTime(uint256 addedTokenAmount, uint256 newFinishTime);\\n    event HasWhitelistingUpdated(bool newValue);\\n\\n    event SetFeeTo(address feeTo);\\n    event ChargedDepositFee(uint256 feeAmountToMasterWallet, uint256 feeAmountToPoolWallet);\\n\\n    event SetDepositFeeBP(uint256 depositFeeBP);\\n\\n    function __StakingPool_init(\\n        IERC20Upgradeable _stakingToken,\\n        IERC20Upgradeable _poolToken,\\n        uint256 _startTime,\\n        uint256 _finishTime,\\n        uint256 _poolTokenAmount,\\n        bool _hasWhitelisting,\\n        IStakeMaster _stakeMaster,\\n        uint256 _depositFeeBP,\\n        address _feeTo\\n    ) public initializer {\\n        __Whitelist_init(_hasWhitelisting);\\n        __ReentrancyGuard_init();\\n\\n        require(_startTime < _finishTime, \\\"Start must be less than finish\\\");\\n        require(_startTime > now, \\\"Start must be more than now\\\");\\n        require(_depositFeeBP <= MAX_BPS, \\\"Invalid deposit fee BP\\\");\\n\\n        stakingToken = _stakingToken;\\n        rewardToken = _poolToken;\\n        stakeMaster = _stakeMaster;\\n\\n        startTime = _startTime;\\n        lastRewardTime = startTime;\\n        finishTime = _finishTime;\\n        poolTokenAmount = _poolTokenAmount;\\n        rewardPerSec = _poolTokenAmount.div(_finishTime.sub(_startTime));\\n\\n        allowReinvest = address(stakingToken) == address(rewardToken);\\n\\n        feeTo = _feeTo;\\n        depositFeeBP = _depositFeeBP;\\n    }\\n\\n    function getUserInfo(address user) external view returns (uint256, uint256) {\\n        UserInfo memory info = userInfo[user];\\n\\n        return (info.amount, info.rewardDebt);\\n    }\\n\\n    function getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\\n        if (_from >= _to) {\\n            return 0;\\n        }\\n\\n        if (_to <= finishTime) {\\n            return _to.sub(_from);\\n        } else if (_from >= finishTime) {\\n            return 0;\\n        } else {\\n            return finishTime.sub(_from);\\n        }\\n    }\\n\\n    // View function to see pending Reward on frontend.\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 tempAccTokensPerShare = accTokensPerShare;\\n        if (now > lastRewardTime && allStakedAmount != 0) {\\n            uint256 multiplier = getMultiplier(lastRewardTime, now);\\n            uint256 reward = multiplier.mul(rewardPerSec);\\n            tempAccTokensPerShare = accTokensPerShare.add(\\n                reward.mul(1e18).div(allStakedAmount)\\n            );\\n        }\\n        return user.amount.mul(tempAccTokensPerShare).div(1e18).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool() public {\\n        if (now <= lastRewardTime) {\\n            return;\\n        }\\n\\n        if (allStakedAmount == 0) {\\n            lastRewardTime = now;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(lastRewardTime, now);\\n        uint256 reward = multiplier.mul(rewardPerSec);\\n        accTokensPerShare = accTokensPerShare.add(\\n            reward.mul(1e18).div(allStakedAmount)\\n        );\\n\\n        lastRewardTime = now;\\n    }\\n\\n    function reinvestTokens() external nonReentrant onlyWhitelisted {\\n        innerStakeTokens(0, true);\\n    }\\n\\n    function stakeTokens(uint256 _amountToStake) public virtual nonReentrant onlyWhitelisted {\\n        // deposit fee logic\\n        uint256 feeAmount = _amountToStake.mul(depositFeeBP).div(MAX_BPS);\\n\\n        chargeDepositFee(feeAmount);\\n\\n        innerStakeTokens(_amountToStake.sub(feeAmount), false);\\n    }\\n\\n    function chargeDepositFee(uint256 _feeAmount) private {\\n        uint256 feeAmountToMasterWallet = 0;\\n        uint256 feeAmountToPoolWallet = 0;\\n\\n        if (_feeAmount > 0) {\\n            // fee to StakeMaster feeWallet address\\n            uint256 profitSharingBP = stakeMaster.profitSharingBP(address(this));\\n            if (profitSharingBP > 0) {\\n                feeAmountToMasterWallet = _feeAmount.mul(profitSharingBP).div(MAX_BPS);\\n                stakingToken.safeTransferFrom(msg.sender, stakeMaster.feeWallet(), feeAmountToMasterWallet);\\n            }\\n\\n            // fee to feeTo address\\n            feeAmountToPoolWallet = _feeAmount.sub(feeAmountToMasterWallet);\\n            if (feeAmountToPoolWallet > 0) {\\n                stakingToken.safeTransferFrom(msg.sender, feeTo, feeAmountToPoolWallet);\\n            }\\n        }\\n\\n        emit ChargedDepositFee(feeAmountToMasterWallet, feeAmountToPoolWallet);\\n    }\\n\\n    function innerStakeTokens(uint256 _amountToStake, bool reinvest) private {\\n        updatePool();\\n        uint256 pending = 0;\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (!user.registrated) {\\n            user.registrated = true;\\n            participants = participants.add(1);\\n        }\\n\\n        if (user.amount > 0) {\\n            pending = transferPendingReward(user, reinvest);\\n            if (reinvest) {\\n                require(allowReinvest, \\\"Reinvest disabled\\\");\\n                user.amount = user.amount.add(pending);\\n                allStakedAmount = allStakedAmount.add(pending);\\n            }\\n        }\\n\\n        if (_amountToStake > 0) {\\n            uint256 balanceBefore = stakingToken.balanceOf(address(this));\\n            stakingToken.safeTransferFrom(msg.sender, address(this), _amountToStake);\\n            uint256 received = stakingToken.balanceOf(address(this)).sub(balanceBefore);\\n            _amountToStake = received;\\n            user.amount = user.amount.add(_amountToStake);\\n            allStakedAmount = allStakedAmount.add(_amountToStake);\\n        }\\n\\n        allRewardDebt = allRewardDebt.sub(user.rewardDebt);\\n        user.rewardDebt = user.amount.mul(accTokensPerShare).div(1e18);\\n        allRewardDebt = allRewardDebt.add(user.rewardDebt);\\n\\n        emit TokensStaked(msg.sender, _amountToStake, pending, reinvest);\\n    }\\n\\n    // Leave the pool. Claim back your tokens.\\n    // Unlocks the staked + gained tokens and burns pool shares\\n    function withdrawStake(uint256 _amount) public virtual nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool();\\n\\n        uint256 pending = transferPendingReward(user, false);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            stakingToken.safeTransfer(msg.sender, _amount);\\n        }\\n\\n        allRewardDebt = allRewardDebt.sub(user.rewardDebt);\\n        user.rewardDebt = user.amount.mul(accTokensPerShare).div(1e18);\\n        allRewardDebt = allRewardDebt.add(user.rewardDebt);\\n        allStakedAmount = allStakedAmount.sub(_amount);\\n\\n        emit StakeWithdrawn(msg.sender, _amount, pending);\\n    }\\n\\n    function transferPendingReward(UserInfo memory user, bool reinvest) internal returns (uint256) {\\n        uint256 pending = user.amount.mul(accTokensPerShare).div(1e18).sub(user.rewardDebt);\\n\\n        if (pending > 0) {\\n            if (!reinvest) {\\n                rewardToken.safeTransfer(msg.sender, pending);\\n            }\\n            allPaidReward = allPaidReward.add(pending);\\n        }\\n\\n        return pending;\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw() public virtual nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (user.amount > 0) {\\n            stakingToken.safeTransfer(msg.sender, user.amount);\\n\\n            emit EmergencyWithdraw(msg.sender, user.amount);\\n\\n            allStakedAmount = allStakedAmount.sub(user.amount);\\n            allRewardDebt = allRewardDebt.sub(user.rewardDebt);\\n            user.amount = 0;\\n            user.rewardDebt = 0;\\n        }\\n    }\\n\\n    function withdrawPoolRemainder() external onlyOwner nonReentrant {\\n        require(now > finishTime, \\\"Allow after finish\\\");\\n\\n        updatePool();\\n\\n        uint256 pending = allStakedAmount.mul(accTokensPerShare).div(1e18).sub(allRewardDebt);\\n        uint256 returnAmount = poolTokenAmount.sub(allPaidReward).sub(pending);\\n        allPaidReward = allPaidReward.add(returnAmount);\\n\\n        rewardToken.safeTransfer(msg.sender, returnAmount);\\n\\n        emit WithdrawPoolRemainder(msg.sender, returnAmount);\\n    }\\n\\n    function extendDuration(uint256 _addTokenAmount, uint256 _duration) external onlyOwnerOrAdmin nonReentrant {\\n        rewardToken.safeTransferFrom(msg.sender, address(this), _addTokenAmount);\\n        poolTokenAmount = poolTokenAmount.add(_addTokenAmount);\\n\\n        if (_duration > 0) {\\n            finishTime = finishTime.add(_duration);\\n            rewardPerSec = poolTokenAmount.div(finishTime.sub(startTime));\\n        }\\n        else {\\n            finishTime = finishTime.add(_addTokenAmount.div(rewardPerSec));\\n        }\\n\\n        emit UpdateFinishTime(_addTokenAmount, finishTime);\\n    }\\n\\n    function setHasWhitelisting(bool value) external onlyOwnerOrAdmin {\\n        hasWhitelisting = value;\\n\\n        emit HasWhitelistingUpdated(hasWhitelisting);\\n    }\\n\\n    function setFeeTo(address _feeTo) external onlyOwner {\\n        feeTo = _feeTo;\\n\\n        emit SetFeeTo(_feeTo);\\n    }\\n\\n    function setDepositFeeBP(uint256 _depositFeeBP) external onlyOwnerOrAdmin {\\n        require(_depositFeeBP <= stakeMaster.maxDepositFee(), \\\"setDepositFee: _depositFeeBP cannot be more maxDepositFee\\\");\\n\\n        depositFeeBP = _depositFeeBP;\\n\\n        emit SetDepositFeeBP(_depositFeeBP);\\n    }\\n\\n    function changeWallet(address from, address to) external onlyOwnerOrAdmin {\\n        require(from != address(0) && to != address(0), \\\"Address cannot be zero\\\");\\n        require(from != to, \\\"Addresses are the same\\\");\\n\\n        UserInfo storage fromInfo = userInfo[from];\\n        UserInfo storage toInfo = userInfo[to];\\n\\n        require(toInfo.registrated == false && toInfo.amount == 0 && toInfo.rewardDebt == 0,\\n            \\\"Target address not empty\\\");\\n\\n        toInfo.amount = fromInfo.amount;\\n        toInfo.rewardDebt = fromInfo.rewardDebt;\\n        toInfo.registrated = fromInfo.registrated;\\n\\n        fromInfo.amount = 0;\\n        fromInfo.rewardDebt = 0;\\n        fromInfo.registrated = false;\\n    }\\n\\n    // ============ Version Control ============\\n    function version() external pure returns (uint256) {\\n        return 103; // 1.0.3\\n    }\\n}\"\r\n    },\r\n    \"/contracts/staking/interfaces/IStakeMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IStakeMaster {\\n\\n    function createStakingPool(\\n        IERC20Upgradeable _stakingToken,\\n        IERC20Upgradeable _poolToken,\\n        uint256 _startTime,\\n        uint256 _finishTime,\\n        uint256 _poolTokenAmount,\\n        bool _hasWhitelisting,\\n        uint256 _depositFeeBP,\\n        address _feeTo\\n    ) external;\\n\\n    function profitSharingBP(address _address) external view returns (uint256);\\n\\n    function feeWallet() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function maxDepositFee() external view returns (uint256);\\n\\n    function resetStartOnce(address _user) external;\\n\\n    function getStartByUpdaters(address _user) external view returns (uint256);\\n\\n    function tierCalculator() external view returns (address);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmountToMasterWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmountToPoolWallet\",\"type\":\"uint256\"}],\"name\":\"ChargedDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penaltyBP\",\"type\":\"uint256\"}],\"name\":\"ChargedPenalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"HasWhitelistingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolReplenished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"SetAdminPermission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"}],\"name\":\"SetDepositFeeBP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"SetFeeTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"reinvest\",\"type\":\"bool\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFinishTime\",\"type\":\"uint256\"}],\"name\":\"UpdateFinishTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPoolRemainder\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_finishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasWhitelisting\",\"type\":\"bool\"},{\"internalType\":\"contract IStakeMaster\",\"name\":\"_stakeMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"__StakingPenaltyPool_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_finishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasWhitelisting\",\"type\":\"bool\"},{\"internalType\":\"contract IStakeMaster\",\"name\":\"_stakeMaster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"__StakingPool_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasWhitelisting\",\"type\":\"bool\"}],\"name\":\"__Whitelist_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokensPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPaidReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPenalties\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyBP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allRewardDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowReinvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"extendDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimAmount\",\"type\":\"uint256\"}],\"name\":\"getPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyBP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"getPenaltyBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPenaltyBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasWhitelisting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_permission\",\"type\":\"bool\"}],\"name\":\"setAdminPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFeeBP\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setHasWhitelisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeMaster\",\"outputs\":[{\"internalType\":\"contract IStakeMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToStake\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyBP\",\"type\":\"uint256\"}],\"name\":\"updatePenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"registrated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPoolRemainder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingPenaltyPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}