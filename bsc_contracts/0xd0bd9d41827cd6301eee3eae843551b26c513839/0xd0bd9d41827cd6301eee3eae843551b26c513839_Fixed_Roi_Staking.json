{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable {\r\n    /// Variables\r\n    address private currentOwner;\r\n    address private proposedOwner;\r\n\r\n    /// Events\r\n    event NewOwnerProposed(address indexed proposedOwner);\r\n    event OwnershipClaimed(address indexed newOwner);\r\n\r\n    /// Constructor\r\n    constructor() {\r\n        currentOwner = msg.sender;\r\n    }\r\n\r\n    /// Modifier\r\n    modifier onlyOwner {\r\n        require(msg.sender == currentOwner, \"You are not the owner!\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Function to propose a new owner\r\n    /// @param _newOwner Address proposed to take the ownership\r\n    function proposeNewOwner(address _newOwner) public virtual onlyOwner {\r\n        proposedOwner = _newOwner;\r\n\r\n        emit NewOwnerProposed(_newOwner);\r\n    }\r\n\r\n    /// @dev Function to claim the ownership\r\n    function claimOwnership() public virtual {\r\n        require(msg.sender == proposedOwner, \"You are not the proposed owner!\");\r\n        currentOwner = msg.sender;\r\n        proposedOwner = address(0);\r\n\r\n        emit OwnershipClaimed(msg.sender);\r\n    }\r\n\r\n    /// @dev Function to return the owner\r\n    /// @return _owner Address of current owner\r\n    function getOwner() public virtual view returns(address _owner) {\r\n        _owner = currentOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private enter = 1;\r\n\r\n    modifier nonReentrant() {\r\n        require(enter == 1, \"Can't enter!\");\r\n        enter = 2;\r\n        _;\r\n        enter = 1;\r\n    }\r\n}\r\n\r\ninterface IToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Fixed_Roi_Staking is Ownable, ReentrancyGuard {\r\n    // ROI\r\n    uint256 public roi = 50;\r\n\r\n    // Time variables\r\n    uint256 public startDate;\r\n    uint256 public limitTime = 7 days;\r\n    uint256 public duration = 90 days;\r\n    uint256 public endDate;\r\n\r\n    // Analytics\r\n    uint256 public totalStaked;\r\n    uint256 public totalClaimed;\r\n\r\n    // Token object\r\n    IToken public token;\r\n\r\n    // Link staked amount to address\r\n    mapping(address => uint256) public stakedByUser;\r\n\r\n    // Whitelist users\r\n    mapping(address => uint256) public isWhitelisted;\r\n    mapping(address => uint256) public maxAmountToStake;\r\n\r\n    // Events\r\n    event Stake(address indexed user, uint256 amount);\r\n    event Claim(address indexed user, uint256 amount, uint256 rewards);\r\n\r\n    // Constructor\r\n    constructor(\r\n        address _token\r\n    ) {\r\n        startDate = block.timestamp;\r\n        endDate = block.timestamp + 90 days;\r\n\r\n        token = IToken(_token);\r\n\r\n        isWhitelisted[msg.sender] = 1;\r\n    }\r\n\r\n    // Deposit function\r\n    function deposit(uint256 amount) external nonReentrant() {\r\n        require(isWhitelisted[msg.sender] == 1, \"You are not whitelisted!\");\r\n        require(stakedByUser[msg.sender] + amount <= maxAmountToStake[msg.sender], \"Can't stake that much!\");\r\n        require(block.timestamp < startDate + limitTime, \"Can't stake anymore!\");\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Can't stake tokens!\");\r\n\r\n        unchecked {\r\n            stakedByUser[msg.sender] += amount;\r\n            totalStaked += amount;\r\n        }\r\n\r\n        emit Stake(msg.sender, amount);\r\n    }\r\n\r\n    // Claim and unstake function\r\n    function claimAndUnstake() external nonReentrant() {\r\n        require(isWhitelisted[msg.sender] == 1, \"You are not whitelisted!\");\r\n        require(block.timestamp >= endDate, \"Can't unstake now!\");\r\n        uint256 _amount = stakedByUser[msg.sender];\r\n        uint256 _claimable = computeAmountToSent(msg.sender);\r\n\r\n        stakedByUser[msg.sender] = 0;\r\n\r\n        require(token.transfer(msg.sender, _claimable), \"Can't transfer rewards!\");\r\n\r\n        unchecked {\r\n            totalClaimed += _claimable - _amount;\r\n        }\r\n\r\n        emit Claim(msg.sender, _amount, _claimable - _amount);\r\n    }\r\n\r\n    // Change the limit time\r\n    function changeLimitTime(uint256 newLimitTime) external onlyOwner {\r\n        limitTime = newLimitTime * 1 days;\r\n    }\r\n\r\n    // Change roi\r\n    function changeRoi(uint256 newRoi) external onlyOwner {\r\n        require(newRoi < 101);\r\n        roi = newRoi;\r\n    }\r\n\r\n    // Set max amount to stake\r\n    function setMaxAmountToStake(address[] calldata users, uint256[] calldata amounts) external onlyOwner {\r\n        require(users.length == amounts.length, \"Invalid parameters!\");\r\n        for(uint256 i = 0; i < users.length;) {\r\n            isWhitelisted[users[i]] = 1;\r\n            maxAmountToStake[users[i]] = amounts[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Whitelist address\r\n    function whitelistAddresses(address[] calldata users) external onlyOwner {\r\n        for(uint256 i = 0; i < users.length;) {\r\n            require(isWhitelisted[users[i]] == 0, \"Already whitelisted!\");\r\n            isWhitelisted[users[i]] = 1;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Blacklist address\r\n    function blacklistAddresses(address[] calldata users) external onlyOwner {\r\n        for(uint256 i = 0; i < users.length;) {\r\n            require(isWhitelisted[users[i]] == 1, \"Not whitelisted!\");\r\n            isWhitelisted[users[i]] = 0;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Withdraw all tokens\r\n    function withdrawAllTokens(address _token) external onlyOwner {\r\n        uint256 _balance = IToken(_token).balanceOf(address(this));\r\n        require(IToken(_token).transfer(msg.sender, _balance), \"Can't withdraw tokens!\");\r\n    }\r\n\r\n    // Withdraw amount\r\n     function withdrawTokenAmount(address _token, uint256 _amount) external onlyOwner {\r\n        require(IToken(_token).transfer(msg.sender, _amount), \"Can't withdraw tokens!\");\r\n     }\r\n\r\n    // Return staked amount + the rewards\r\n    function computeAmountToSent(address user) internal view returns(uint256) {\r\n        return stakedByUser[user] + stakedByUser[user] * roi / 100;\r\n    }\r\n\r\n    // Return staked amount\r\n    function getStakedAmount(address user) public view returns(uint256) {\r\n        return stakedByUser[user];\r\n    }\r\n\r\n    // Return the rewards\r\n    function getFinalRewards(address user) public view returns(uint256) {\r\n        return stakedByUser[user] * roi / 100;\r\n    }\r\n\r\n    // Return 1 if the user is whitelisted\r\n    function getWhitelisted(address user) public view returns(uint256) {\r\n        return isWhitelisted[user];\r\n    }\r\n\r\n    // Return end date\r\n    function getEndDate() public view returns(uint256) {\r\n        return endDate;\r\n    }\r\n\r\n    // Return the limit date for staking\r\n    function getLimitDate() external view returns(uint256) {\r\n        return startDate + limitTime;\r\n    }\r\n\r\n    // Get total expected rewards\r\n    function getTotalExpectedRewards() public view returns(uint256) {\r\n        return totalStaked * roi / 100;\r\n    }\r\n\r\n    // Get max amount to stake\r\n    function getMaxamountToStake(address user) public view returns(uint256) {\r\n        return maxAmountToStake[user];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"NewOwnerProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"blacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimitTime\",\"type\":\"uint256\"}],\"name\":\"changeLimitTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRoi\",\"type\":\"uint256\"}],\"name\":\"changeRoi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAndUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFinalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimitDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxamountToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalExpectedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAmountToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMaxAmountToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Fixed_Roi_Staking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "00000000000000000000000030b5e345c79255101b8af22a19805a6fb96ddebb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://94c95b5f4bfb1299135e8d58e256ce9b4d48b72b435d4205b894d3f8ae19acc2"}