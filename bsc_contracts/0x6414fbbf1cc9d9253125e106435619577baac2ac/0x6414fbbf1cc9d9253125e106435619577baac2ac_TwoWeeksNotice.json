{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract TwoWeeksNotice {\r\n    \r\n    struct StakeState {\r\n        uint64 balance;\r\n        uint64 unlockPeriod; // time it takes from requesting withdraw to being able to withdraw\r\n        uint64 lockedUntil; // 0 if withdraw is not requested\r\n        uint64 since;\r\n        uint128 accumulated; // token-days staked\r\n        uint128 accumulatedStrict; // token-days staked sans withdraw periods\r\n    }\r\n    \r\n    event StakeUpdate(address indexed from, uint64 balance);\r\n    event WithdrawRequest(address indexed from, uint64 until);\r\n    \r\n    mapping(address => StakeState) private _states;\r\n    \r\n    IERC20 private token;\r\n    \r\n    constructor (IERC20 _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function getStakeState(address account) external view returns (uint64, uint64, uint64, uint64) {\r\n        StakeState storage ss = _states[account];\r\n        return (ss.balance, ss.unlockPeriod, ss.lockedUntil, ss.since);\r\n    }\r\n    \r\n    function getAccumulated(address account) external view returns (uint128, uint128) {\r\n        StakeState storage ss = _states[account];\r\n        return (ss.accumulated, ss.accumulatedStrict);\r\n    }\r\n\r\n    function estimateAccumulated(address account) external view returns (uint128, uint128) {\r\n        StakeState storage ss = _states[account];\r\n        uint128 sum = ss.accumulated;\r\n        uint128 sumStrict = ss.accumulatedStrict;\r\n        if (ss.balance > 0) {\r\n            uint256 until = block.timestamp;\r\n            if (ss.lockedUntil > 0 && ss.lockedUntil < block.timestamp) {\r\n                until = ss.lockedUntil;\r\n            }\r\n            if (until > ss.since) {\r\n                uint128 delta = uint128( (uint256(ss.balance) * (until - ss.since))/86400 );\r\n                sum += delta;\r\n                if (ss.lockedUntil == 0) {\r\n                    sumStrict += delta;\r\n                }\r\n            }\r\n        }\r\n        return (sum, sumStrict);\r\n    }\r\n    \r\n    \r\n    function updateAccumulated(StakeState storage ss) private {\r\n        if (ss.balance > 0) {\r\n            uint256 until = block.timestamp;\r\n            if (ss.lockedUntil > 0 && ss.lockedUntil < block.timestamp) {\r\n                until = ss.lockedUntil;\r\n            }\r\n            if (until > ss.since) {\r\n                uint128 delta = uint128( (uint256(ss.balance) * (until - ss.since))/86400 );\r\n                ss.accumulated += delta;\r\n                if (ss.lockedUntil == 0) {\r\n                    ss.accumulatedStrict += delta;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function stake(uint64 amount, uint64 unlockPeriod) external {\r\n        StakeState storage ss = _states[msg.sender];\r\n        require(amount > 0, \"amount must be positive\");\r\n        require(ss.balance <= amount, \"cannot decrease balance\");\r\n        require(unlockPeriod <= 1000 days, \"unlockPeriod cannot be higher than 1000 days\");\r\n        require(ss.unlockPeriod <= unlockPeriod, \"cannot decrease unlock period\");\r\n        require(unlockPeriod >= 2 weeks, \"unlock period can't be less than 2 weeks\");\r\n        \r\n        updateAccumulated(ss);\r\n        \r\n        uint128 delta = amount - ss.balance;\r\n        if (delta > 0) {\r\n            require(token.transferFrom(msg.sender, address(this), delta), \"transfer unsuccessful\");\r\n        }\r\n\r\n        ss.balance = amount;\r\n        ss.unlockPeriod = unlockPeriod;\r\n        ss.lockedUntil = 0;\r\n        ss.since = uint64(block.timestamp);\r\n        emit StakeUpdate(msg.sender, amount);\r\n    }\r\n    \r\n    function requestWithdraw() external {\r\n         StakeState storage ss = _states[msg.sender];\r\n         require(ss.balance > 0);\r\n         updateAccumulated(ss);\r\n         ss.since = uint64(block.timestamp);\r\n         ss.lockedUntil = uint64(block.timestamp + ss.unlockPeriod);\r\n    }\r\n\r\n    function withdraw(address to) external {\r\n        StakeState storage ss = _states[msg.sender];\r\n        require(ss.balance > 0, \"must have tokens to withdraw\");\r\n        require(ss.lockedUntil != 0, \"unlock not requested\");\r\n        require(ss.lockedUntil < block.timestamp, \"still locked\");\r\n        updateAccumulated(ss);\r\n        uint128 balance = ss.balance;\r\n        ss.balance = 0;\r\n        ss.unlockPeriod = 0;\r\n        ss.lockedUntil = 0;\r\n        ss.since = 0;\r\n        require(token.transfer(to, balance), \"transfer unsuccessful\");\r\n        emit StakeUpdate(msg.sender, 0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"balance\",\"type\":\"uint64\"}],\"name\":\"StakeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"until\",\"type\":\"uint64\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"estimateAccumulated\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccumulated\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStakeState\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockPeriod\",\"type\":\"uint64\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TwoWeeksNotice", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ac51066d7bec65dc4589368da368b212745d63e8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18766132a65336f9e885ca22b65751fbf43119463ed189e729415d1e04f785f6"}