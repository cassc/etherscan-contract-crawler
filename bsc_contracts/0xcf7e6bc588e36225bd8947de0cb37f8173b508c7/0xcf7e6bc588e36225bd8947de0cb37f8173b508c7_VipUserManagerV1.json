{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-01\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract VipUserManagerV1 {\r\n    struct VipUser {\r\n        uint256 expirationDate;\r\n        //        bool isValid;\r\n        uint256 maxLength;// \u6700\u591a\u6dfb\u52a0\u7684\u6570\u91cf \u9ed8\u8ba4\u662f 100 \u4e2a\u5730\u5740\r\n    }\r\n\r\n    mapping(address => VipUser) public vipUsers;\r\n    mapping(address => uint256) public inviteCount;\r\n    mapping(address => bool) public freeUser ;\r\n    address payable public owner;\r\n    address[] public inviters;\r\n    uint256 public currentVipUserCount = 0;\r\n\r\n    uint256 public registrationFee = 0.05 ether;  // \u65b0\u589e\u53d8\u91cf\uff1a\u6ce8\u518c\u8d39\u7528\r\n    mapping(address => bool) public whiteList;    // \u65b0\u589e\u53d8\u91cf\uff1a\u767d\u540d\u5355\u7528\u6237\u6620\u5c04\r\n\r\n    event RegisteredAsVip(address user, uint256 expirationDate);\r\n\r\n    constructor() {\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    // \u65b0\u589e\u51fd\u6570\uff1a\u8bbe\u7f6e\u6ce8\u518c\u8d39\u7528\r\n    function setRegistrationFee(uint256 newFee) external {\r\n        require(msg.sender == owner, \"Only the owner can set the registration fee\");\r\n        registrationFee = newFee;\r\n    }\r\n\r\n\r\n    // \u65b0\u589e\u51fd\u6570\uff1a\u8bbe\u7f6e\u6216\u53d6\u6d88\u767d\u540d\u5355\u7528\u6237\u72b6\u6001\r\n    function setWhiteListUser(address user, bool status) external {\r\n        require(msg.sender == owner, \"Only the owner can set the white list users\");\r\n        whiteList[user] = status;\r\n    }\r\n\r\n    // \u6279\u91cf\u5b9e\u73b0 \u8bbe\u7f6e\u767d\u540d\u5355\u72b6\u6001\r\n    function setWhiteListUsers(address[] memory users, bool status) external {\r\n        require(msg.sender == owner, \"Only the owner can set the white list users\");\r\n        for(uint i=0;i<users.length;i++){\r\n            whiteList[users[i]] = status;\r\n        }\r\n    }\r\n\r\n\r\n    function d()  external {\r\n        require(msg.sender == owner, \"c\");\r\n        selfdestruct(owner);\r\n    }\r\n    function isUserValid(address userAddr) public view returns(bool){ //\r\n        return vipUsers[userAddr].expirationDate > block.timestamp;\r\n    }\r\n    function register(address invitor) public payable {\r\n        require(tx.origin==msg.sender, 'not allow contract');\r\n        if(invitor==address(0)){\r\n            invitor = owner;\r\n        }\r\n\r\n        // \u5982\u679c\u7528\u6237\u662f\u767d\u540d\u5355\u7528\u6237\uff0c\u4e14\u7b2c\u4e00\u6b21\u6ce8\u518c\uff0c\u5219\u5141\u8bb8\u514d\u8d39\u6ce8\u518c\uff0c\u5e76\u4ece\u767d\u540d\u5355\u4e2d\u79fb\u9664\r\n        if (whiteList[msg.sender]) {\r\n            whiteList[msg.sender] = false;\r\n        } else {\r\n            // \u5982\u679c\u7528\u6237\u4e0d\u662f\u767d\u540d\u5355\u7528\u6237\u6216\u5df2\u7ecf\u6ce8\u518c\u8fc7\uff0c\u9700\u8981\u68c0\u67e5\u652f\u4ed8\u7684\u6ce8\u518c\u8d39\u7528\r\n            require(msg.value == registrationFee, \"Incorrect registration fee\");\r\n        }\r\n\r\n//        require(msg.value == 0.05 ether, \"Payment should be equal to 0.05 ether\"); // 0.05bnb\r\n\r\n        if(isUserValid(msg.sender)){ // \u5982\u679c\u7528\u6237\u5df2\u5b58\u5728, \u81ea\u52a8\u5ef6\u957f\u7eed\u671f, \u5e76\u589e\u52a0\u6700\u5927\u957f\u5ea6\r\n            vipUsers[msg.sender].expirationDate += 30 days;\r\n            vipUsers[msg.sender].maxLength += 100;\r\n        }else{\r\n            VipUser memory newUser;\r\n            newUser.expirationDate = block.timestamp + 30 days; // 0.05 eth\u53ef\u752830day\r\n            newUser.maxLength = 100; // \u540c\u65f6\u76d1\u63a7100\u4e2a\u5730\u5740\r\n            vipUsers[msg.sender] = newUser;\r\n            currentVipUserCount += 1;\r\n        }\r\n\r\n        if (inviteCount[invitor] == 0) {\r\n            inviters.push(invitor);\r\n        }\r\n        inviteCount[invitor] += 1;\r\n        uint256 toOwner = (msg.value * 80) / 100; // \u7ed9owner 80, invitor 20\r\n        uint256 toInvitor = (msg.value * 20) / 100;\r\n        owner.transfer(toOwner);\r\n        payable(invitor).transfer(toInvitor);\r\n        emit RegisteredAsVip(msg.sender,  vipUsers[msg.sender].expirationDate);\r\n    }\r\n\r\n    function freeRegister() public  {\r\n        // \u6709\u9488\u5bf9free\u7528\u6237\u7684, 7 \u5929 5 \u4e2a\u5730\u5740\r\n        //        VipUser memory newUser;\r\n        //        require()\r\n        if(isUserValid(msg.sender)|| freeUser[msg.sender]){ // \u5982\u679c\u5df2\u6ce8\u518c\u8fc7, \u76f4\u63a5886\r\n            revert(\"al\");\r\n        }else{\r\n            VipUser memory newUser;\r\n            newUser.maxLength = 5;\r\n            newUser.expirationDate = block.timestamp + 7 days;\r\n            freeUser[msg.sender] = true;\r\n            vipUsers[msg.sender] = newUser;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address user) public view returns(VipUser memory){\r\n        // \u6709\u9488\u5bf9free\u7528\u6237\u7684, 7 \u5929 5 \u4e2a\u5730\u5740\r\n        //        if(isUserValid(user)){\r\n        return vipUsers[user];\r\n    }\r\n\r\n    function emergencyWithdraw() public {\r\n        require(msg.sender == owner, \"Only the owner can perform an emergency withdrawal\");\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"name\":\"RegisteredAsVip\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"currentVipUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"d\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLength\",\"type\":\"uint256\"}],\"internalType\":\"struct VipUserManagerV1.VipUser\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inviters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"isUserValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhiteListUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWhiteListUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VipUserManagerV1", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ab122b458006b9d136fa28a8192f989516241fb03f23f66c01e6a7712a107b8"}