{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PalmVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./interfaces/IPalmPad.sol\\\";\\nimport \\\"./interfaces/IPalmToken.sol\\\";\\n\\ncontract PalmVesting is Ownable {\\n    struct VestingInfo {\\n        uint64 timeFromTge; // First release time from TGE (seconds)\\n        uint64 tgePct; // First release percentage\\n        uint64 periodInDays; // Vesting period of days after first release (days)\\n    }\\n\\n    /// @dev emitted when TGE time updated\\n    event TgeSet(uint64 tgeTime);\\n\\n    /// @dev emitted when last category updated\\n    event LastCategorySet(uint8 lastCategory);\\n\\n    /// @dev emitted when vesting info updated\\n    event VestingInfoSet(uint8 indexed category, VestingInfo info);\\n\\n    /// @dev emitted when user claimed PALM\\n    event Claimed(uint8 indexed category, address indexed user, uint256 amount);\\n\\n    /// @dev emitted when amount of user set\\n    event AmountSet(uint8 indexed category, address user, uint256 amount);\\n\\n    uint64 constant DENOMINATOR = 100000;\\n    uint64 constant ONE_DAY = 86400;\\n\\n    /// @dev new category can be added later, so we don't use enum type\\n    uint8 constant PUBLIC_SALE = 0;\\n    uint8 constant PUBLIC_SALE_SPONSOR_COMMISSION = 1;\\n    uint8 constant SEED_SALE = 2;\\n    uint8 constant TEAM = 3;\\n    uint8 constant MARKETING = 4;\\n    uint8 constant TRADING_COMPETTIION_AIRDROP = 5;\\n    uint8 constant AIRDROP_1 = 6;\\n    uint8 constant AIRDROP_4 = 7;\\n    uint8 constant NFT_WINNER_AIRDROP = 8;\\n    uint8 constant RETROACTIVE_REWARDS = 9;\\n\\n    uint8 public lastCategory = 9;\\n\\n    /// @dev palm token address\\n    IPalmToken public immutable palmToken;\\n    /// @dev palm pad address\\n    IPalmPad public immutable palmPad;\\n    /// @dev TGE time. all vesting starts after TGE.\\n    uint64 public tgeTime;\\n\\n    /// @dev Vesting info per category\\n    mapping(uint8 => VestingInfo) public vestingInfos;\\n    /// @dev Vesting amount per category and user address\\n    mapping(uint8 => mapping(address => uint256)) private amounts;\\n    /// @dev Claimed amount per category and user address\\n    mapping(uint8 => mapping(address => uint256)) public claimedAmounts;\\n\\n    modifier onlyValidCategory(uint8 category) {\\n        if (category > lastCategory) {\\n            revert Errors.InvalidCategory();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _palmToken, address _palmPad) {\\n        if (_palmToken == address(0) || _palmPad == address(0)) {\\n            revert Errors.ZeroAddress();\\n        }\\n\\n        palmToken = IPalmToken(_palmToken);\\n        palmPad = IPalmPad(_palmPad);\\n    }\\n\\n    /// @dev set TGE time\\n    function setTgeTime(uint64 _tgeTime) external onlyOwner {\\n        if (_tgeTime == 0) {\\n            revert Errors.ZeroAmount();\\n        }\\n        tgeTime = _tgeTime;\\n\\n        emit TgeSet(_tgeTime);\\n    }\\n\\n    /// @dev set last category\\n    function setLastCategory(uint8 _lastCategory) external onlyOwner {\\n        lastCategory = _lastCategory;\\n\\n        emit LastCategorySet(_lastCategory);\\n    }\\n\\n    /// @dev set vesting info\\n    function setVestingInfo(uint8 category, VestingInfo calldata vestingInfo)\\n        public\\n        onlyOwner\\n        onlyValidCategory(category)\\n    {\\n        if (vestingInfo.tgePct > DENOMINATOR) {\\n            revert Errors.InvalidPercentage();\\n        }\\n        if (\\n            vestingInfo.tgePct != DENOMINATOR && vestingInfo.periodInDays == 0\\n        ) {\\n            revert Errors.InvalidVestingInfo();\\n        }\\n        vestingInfos[category] = vestingInfo;\\n\\n        emit VestingInfoSet(category, vestingInfo);\\n    }\\n\\n    /// @dev set multiple vesting infos\\n    function setVestingInfoInBatch(\\n        uint8[] calldata _categories,\\n        VestingInfo[] calldata _vestingInfos\\n    ) external {\\n        uint256 len = _categories.length;\\n        if (len == 0 || len != _vestingInfos.length) {\\n            revert Errors.InvalidArray();\\n        }\\n        for (uint256 i = 0; i < len; i += 1) {\\n            setVestingInfo(_categories[i], _vestingInfos[i]);\\n        }\\n    }\\n\\n    /// @dev set vesting amount per category and user\\n    function setAmount(\\n        uint8 category,\\n        address user,\\n        uint256 amount\\n    ) public onlyOwner onlyValidCategory(category) {\\n        if (amount == 0) {\\n            revert Errors.ZeroAmount();\\n        }\\n        if (user == address(0)) {\\n            revert Errors.ZeroAddress();\\n        }\\n        require(\\n            category != PUBLIC_SALE &&\\n                category != PUBLIC_SALE_SPONSOR_COMMISSION,\\n            \\\"PalmVesting: Cannot set amount for public sale\\\"\\n        );\\n\\n        amounts[category][user] = amount;\\n\\n        emit AmountSet(category, user, amount);\\n    }\\n\\n    /// @dev set multiple amounts\\n    function setAmountInBatch(\\n        uint8[] calldata _categories,\\n        address[] calldata _users,\\n        uint256[] calldata _amounts\\n    ) external {\\n        uint256 len = _categories.length;\\n        if (len == 0 || len != _users.length || len != _amounts.length) {\\n            revert Errors.InvalidArray();\\n        }\\n        for (uint256 i = 0; i < len; i += 1) {\\n            setAmount(_categories[i], _users[i], _amounts[i]);\\n        }\\n    }\\n\\n    /// @dev get allocated amount per category and user\\n    function getAmount(uint8 category, address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (category == PUBLIC_SALE) {\\n            return palmPad.getPalmAmount(user);\\n        } else if (category == PUBLIC_SALE_SPONSOR_COMMISSION) {\\n            return palmPad.getPalmCommissionAmount(user);\\n        } else {\\n            return amounts[category][user];\\n        }\\n    }\\n\\n    /// @dev get vested amount until now\\n    function getVestedAmount(uint8 category, address user)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        VestingInfo memory vestingInfo = vestingInfos[category];\\n        uint256 totalAmount = getAmount(category, user);\\n\\n        if (totalAmount == 0 || block.timestamp < tgeTime) {\\n            return 0;\\n        }\\n\\n        uint64 firstReleaseTime = tgeTime + vestingInfo.timeFromTge;\\n        uint256 tgeAmount = (totalAmount * vestingInfo.tgePct) / DENOMINATOR;\\n\\n        if (block.timestamp < firstReleaseTime) {\\n            return tgeAmount;\\n        }\\n\\n        if (vestingInfo.tgePct == DENOMINATOR) {\\n            return totalAmount;\\n        }\\n        if (vestingInfo.periodInDays == 0) {\\n            return 0;\\n        }\\n\\n        uint256 totalVestedAmount = totalAmount - tgeAmount;\\n        uint64 elapsedDays = (uint64(block.timestamp) - firstReleaseTime) /\\n            ONE_DAY;\\n\\n        uint256 vestedAmount = ((totalVestedAmount * elapsedDays) /\\n            vestingInfo.periodInDays) + tgeAmount;\\n\\n        if (vestedAmount > totalAmount) {\\n            return totalAmount;\\n        }\\n        return vestedAmount;\\n    }\\n\\n    /// @dev claim available PALM\\n    function claim(uint8 category, bool revertForZero) public {\\n        uint256 vestedAmount = getVestedAmount(category, msg.sender);\\n        uint256 availableAmount = vestedAmount -\\n            claimedAmounts[category][msg.sender];\\n\\n        if (availableAmount != 0) {\\n            claimedAmounts[category][msg.sender] = vestedAmount;\\n            palmToken.mint(msg.sender, availableAmount);\\n\\n            emit Claimed(category, msg.sender, availableAmount);\\n        } else if (revertForZero) {\\n            revert Errors.NothingToClaim();\\n        }\\n    }\\n\\n    /// @dev claim available PALM of all categories\\n    function claimAll() external {\\n        uint256 lastIdx = lastCategory;\\n        for (uint8 i = 0; i <= lastIdx; i += 1) {\\n            claim(uint8(i), false);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPalmPad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\ninterface IPalmPad {\\n    /// @dev get PALM allocation from launchpad\\n    function getPalmAmount(address user) external view returns (uint256);\\n\\n    /// @dev get PALM commission from launchpad invite program\\n    function getPalmCommissionAmount(address user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPalmToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPalmToken is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nlibrary Errors {\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error PoolDoesNotExist();\\n    error NoReward();\\n    error InvalidPercentage();\\n    error InvalidArray();\\n    error InvalidVestingInfo();\\n    error NothingToClaim();\\n    error InvalidCategory();\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_palmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_palmPad\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCategory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lastCategory\",\"type\":\"uint8\"}],\"name\":\"LastCategorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"tgeTime\",\"type\":\"uint64\"}],\"name\":\"TgeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"timeFromTge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tgePct\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"periodInDays\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct PalmVesting.VestingInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"VestingInfoSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"revertForZero\",\"type\":\"bool\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastCategory\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"palmPad\",\"outputs\":[{\"internalType\":\"contract IPalmPad\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"palmToken\",\"outputs\":[{\"internalType\":\"contract IPalmToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_categories\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setAmountInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_lastCategory\",\"type\":\"uint8\"}],\"name\":\"setLastCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_tgeTime\",\"type\":\"uint64\"}],\"name\":\"setTgeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"timeFromTge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tgePct\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"periodInDays\",\"type\":\"uint64\"}],\"internalType\":\"struct PalmVesting.VestingInfo\",\"name\":\"vestingInfo\",\"type\":\"tuple\"}],\"name\":\"setVestingInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_categories\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"timeFromTge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tgePct\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"periodInDays\",\"type\":\"uint64\"}],\"internalType\":\"struct PalmVesting.VestingInfo[]\",\"name\":\"_vestingInfos\",\"type\":\"tuple[]\"}],\"name\":\"setVestingInfoInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"vestingInfos\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"timeFromTge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tgePct\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"periodInDays\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PalmVesting", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000029745314b4d294b7c77cdb411b8aaa95923aae3800000000000000000000000096a96915646e9d0e10028edf77c3079d975700aa", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}