{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\nabstract contract ReentrancyGuard {\r\n    \r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    \r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n\r\ncontract Z is ReentrancyGuard, Context, IERC20 {\r\n    address public contractOwner;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    uint public totalSupply;\r\n    address public ecosystem;\r\n    uint public ecosystemValue;\r\n    bool public tradeMode;\r\n\r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n    mapping(address => bool) public isBlacklisted;\r\n    uint public maxWalletLimit;\r\n\r\n    event WalletBlacklisted(address indexed wallet);\r\n    event WalletUnblacklisted(address indexed wallet);\r\n    event MaxWalletLimitSet(uint limit);\r\n    constructor() {\r\n        contractOwner = msg.sender;\r\n        name = \"Zwigato\";\r\n        symbol = \"Z\";\r\n        decimals = 18;\r\n        totalSupply = 80000000 * 10 ** decimals;\r\n        ecosystemValue = 100; // Default value for ecosystemValue\r\n        ecosystem = msg.sender; // Set ecosystem to contract deployer's address\r\n        tradeMode = false; // Enable trade mode by default\r\n        maxWalletLimit = 0; // Set default max wallet limit to 0 (unlimited)\r\n\r\n        balances[msg.sender] = totalSupply; // Transfer the total supply to the deployer's address\r\n\r\n    }\r\n    modifier onlyOwner(){\r\n        require(msg.sender==contractOwner,\"only contract owner can call this function\");\r\n        _;\r\n    }\r\n    fallback() external payable {\r\n        transferToOwner();\r\n    }\r\n\r\n    receive() external payable {\r\n        transferToOwner();\r\n        // This empty receive function is added to suppress the warning\r\n    }\r\n\r\n    // Function to explicitly handle Ether transfers\r\n    function transferToOwner() internal {\r\n        require(msg.value > 0, \"No Ether sent\");\r\n        address owner = payable(contractOwner);\r\n        // Transfer the received Ether to the owner\r\n        payable(owner).transfer(msg.value);\r\n    }\r\n\r\n    // Getter for totalSupply\r\n    function getTotalSupply() public view returns (uint) {\r\n        return totalSupply;\r\n    }\r\n\r\n    // Setter for ecosystemValue\r\n    function setEcosystemValue(uint newValue) public onlyOwner {\r\n        ecosystemValue = newValue;\r\n    }\r\n\r\n    // Setter for ecosystem\r\n    function setEcosystem(address newEcosystem) public onlyOwner{\r\n        ecosystem = newEcosystem;\r\n    }\r\n\r\n    // Setter for tradeMode\r\n    function setTradeMode(bool enabled) public onlyOwner{\r\n        tradeMode = enabled;\r\n    }\r\n\r\n    // Setter for maxWalletLimit\r\n    function setMaxWalletLimit(uint limit) public onlyOwner{\r\n        maxWalletLimit = limit;\r\n        emit MaxWalletLimitSet(limit);\r\n    }\r\n\r\n    // Transfer ownership of the contract\r\n    function transferOwnership(address newOwner) public onlyOwner{\r\n        require(newOwner != address(0), \"Invalid new owner address\");\r\n\r\n        contractOwner = newOwner;\r\n    }\r\n\r\n    // Transfer tokens\r\n    function transfer(address to, uint256 value) public nonReentrant returns (bool) {\r\n        require(balances[msg.sender] >= value, 'Insufficient funds');\r\n        require(!isBlacklisted[msg.sender], 'Sender address is blacklisted');\r\n        require(!isBlacklisted[to], 'Recipient address is blacklisted');\r\n        require(tradeMode || msg.sender == contractOwner, 'Trading is currently restricted');\r\n\r\n        if (maxWalletLimit > 0) {\r\n            require(balances[to]+value <= maxWalletLimit, 'Recipient wallet will exceed the maximum limit');\r\n        }\r\n\r\n        uint256 fee = (value)*(ecosystemValue) / 10000;\r\n        uint256 transferAmount = value-fee;\r\n\r\n        balances[ecosystem] = balances[ecosystem]+fee;\r\n        balances[to] = balances[to]+transferAmount;\r\n        balances[msg.sender] = balances[msg.sender]-value;\r\n\r\n        emit Transfer(msg.sender, to, transferAmount);\r\n        return true;\r\n    }\r\n\r\n    // Transfer tokens from a specific address\r\n    function transferFrom(address from, address to, uint256 value) public nonReentrant returns (bool) {\r\n        require(balances[from] >= value, 'Insufficient funds');\r\n        require(allowance[from][msg.sender] >= value, 'Allowance too low');\r\n        require(!isBlacklisted[from], 'Sender address is blacklisted');\r\n        require(!isBlacklisted[to], 'Recipient address is blacklisted');\r\n        require(tradeMode || msg.sender == contractOwner, 'Trading is currently restricted');\r\n\r\n        if (maxWalletLimit > 0) {\r\n            require(balances[to]+value <= maxWalletLimit, 'Recipient wallet will exceed the maximum limit');\r\n        }\r\n\r\n        uint256 fee = (value*ecosystemValue) / 10000;\r\n        uint256 transferAmount = value-fee;\r\n\r\n        balances[ecosystem] = balances[ecosystem]+fee;\r\n        balances[to] = balances[to]+transferAmount;\r\n        balances[from] = balances[from]-value;\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n        return true;\r\n    }\r\n\r\n    // Approve token allowance\r\n    function approve(address spender, uint value) public returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Get token balance of an address\r\n    function balanceOf(address owner) public view returns (uint) {\r\n        return balances[owner];\r\n    }\r\n\r\n    // Blacklist a wallet address\r\n    function blacklistWallet(address wallet) public onlyOwner{\r\n        isBlacklisted[wallet] = true;\r\n        emit WalletBlacklisted(wallet);\r\n    }\r\n\r\n    // Unblacklist a wallet address\r\n    function unblacklistWallet(address wallet) public onlyOwner{\r\n        isBlacklisted[wallet] = false;\r\n        emit WalletUnblacklisted(wallet);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"MaxWalletLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletUnblacklisted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"blacklistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecosystemValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEcosystem\",\"type\":\"address\"}],\"name\":\"setEcosystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setEcosystemValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTradeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"unblacklistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Z", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://43727ecbaa362d80df1228b87e61d0b13d40f3b293f5a43e69ddc1b080f18297"}