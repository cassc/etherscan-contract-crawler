{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"launchpad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n///@author Okoli Evans\\r\\n///@title  A contract that holds Initial Coin Offerings (ICO), and can handle multiple\\r\\n///@title  ICOs at once\\r\\n///@dev  The contract admin oversees registration and creation of vetted projects for ICO,\\r\\n///@dev  and also monitors the process, and disburses funds at the end of the ICO.\\r\\n///@notice  An ID is assigned to every ICO created to for efficient tracking of variables changes and\\r\\n///@notice  updates.\\r\\n\\r\\n\\r\\ncontract Launchpad {\\r\\n\\r\\n    struct IFODetail {\\r\\n        uint32 totalBuyers;\\r\\n        address admin;\\r\\n        address token;\\r\\n        uint32 id;\\r\\n        uint256 publicshareBalance;\\r\\n        uint256 MaxCap;\\r\\n        uint256 minimumSubscription;\\r\\n        uint256 maximumSubscription;\\r\\n        uint256 tokenTotalSupply;\\r\\n        uint256 publicShare;\\r\\n        uint256 exchangeRate;\\r\\n        uint256 totalAmountRaised;\\r\\n        uint256 totalAmountDistributed;\\r\\n        string tokenName;\\r\\n        string tokenSymbol;\\r\\n        bool hasStarted;\\r\\n        bool maxCapReached;\\r\\n    }\\r\\n\\r\\n    mapping(uint32 => IFODetail ) IFODetails_ID;\\r\\n    mapping(address => mapping(uint32 => uint256)) Amount_per_subscriber;\\r\\n\\r\\n    address public Controller;\\r\\n    uint256 public GlobaltotalAmountRaised;\\r\\n    uint256 public GlobaltotalAmountDistributed;\\r\\n\\r\\n    /////////  ERRORS  ///////////\\r\\n\\r\\n    error notController();\\r\\n    error IFO_Not_Started();\\r\\n    error IFO_Already_Started();\\r\\n    error Amount_less_Than_Minimum_Subscription();\\r\\n    error Amount_greater_Than_Maximum_Subscription();\\r\\n    error IFO_Not_Ended();\\r\\n    error IFO_Not_In_Session();\\r\\n    error IFO_still_in_progress();\\r\\n    error Value_cannot_be_empty();\\r\\n    error IFO_Details_Not_Found();\\r\\n    error MaxCapReached();\\r\\n    error Insufficient_Funds();\\r\\n    error Invalid_Address();\\r\\n    error ID_Taken_Choose_Another_ID();\\r\\n\\r\\n    ////////  EVENTS  /////////\\r\\n    event ICO_Created(uint32 _id, address _token);\\r\\n    event ICO_Started(uint32 _id);\\r\\n    event BuyPresale(uint32 _id, address _buyer, uint256 _amount);\\r\\n    event BuyPresale2(uint32 _id, address _buyer, uint256 _amount);\\r\\n    event ICO_Ended(uint32 _id);\\r\\n    event Claim_Token(uint32 _id, address _claimer, uint256 _amount);\\r\\n\\r\\n    constructor() {\\r\\n        Controller = msg.sender;\\r\\n    }\\r\\n\\r\\n\\r\\n   ////////////////////////////////////////////////////////////////\\r\\n   ///                                                         ////\\r\\n   ///                     CORE FUNCTIONS                      ////\\r\\n   ///                                                         ////\\r\\n   //////////////////////////////////////////////////////////////// \\r\\n\\r\\n\\r\\n    function createICO(\\r\\n        uint32 _id,\\r\\n        address _admin,\\r\\n        address _token,\\r\\n        uint256 _maxCap,\\r\\n        uint256 _minimumSubscription,\\r\\n        uint256 _maximumSubscription,\\r\\n        uint256 _tokenTotalSupply,\\r\\n        uint256 _publicShare,\\r\\n        uint256 _exchangeRate,\\r\\n        string memory _tokenName,\\r\\n        string memory _tokenSymbol\\r\\n        ) external  {\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        if(msg.sender != Controller) revert notController();\\r\\n        if (ifoDetail.hasStarted == true) revert IFO_Already_Started();\\r\\n        if(_id <= 0) revert Value_cannot_be_empty();\\r\\n         if(ifoDetail.id == _id) revert ID_Taken_Choose_Another_ID();\\r\\n        if(_maxCap <= 0) revert Value_cannot_be_empty();\\r\\n        if(_token == address(0))revert Value_cannot_be_empty();\\r\\n        if(_minimumSubscription <= 0) revert Value_cannot_be_empty();\\r\\n        if(_maximumSubscription <= 0) revert Value_cannot_be_empty();\\r\\n        if(_tokenTotalSupply <= 0) revert Value_cannot_be_empty();\\r\\n        if(_publicShare <= 0) revert Value_cannot_be_empty();\\r\\n        if(_exchangeRate <= 0) revert Value_cannot_be_empty();\\r\\n        if(_admin == address(0)) revert Value_cannot_be_empty();\\r\\n\\r\\n        bool success = IERC20(_token).transferFrom(_admin, address(this), _tokenTotalSupply);\\r\\n        require(success, \\\"Transfer FAIL\\\");\\r\\n       \\r\\n        ifoDetail.totalBuyers = 0;\\r\\n        ifoDetail.id = _id;\\r\\n        ifoDetail.admin = _admin;\\r\\n        ifoDetail.token = _token;\\r\\n        ifoDetail.MaxCap = _maxCap;\\r\\n        ifoDetail.minimumSubscription = _minimumSubscription;\\r\\n        ifoDetail.maximumSubscription = _maximumSubscription;\\r\\n        ifoDetail.tokenTotalSupply = _tokenTotalSupply;\\r\\n        ifoDetail.publicShare = _publicShare;\\r\\n        ifoDetail.exchangeRate = _exchangeRate;\\r\\n        ifoDetail.tokenName = _tokenName;\\r\\n        ifoDetail.tokenSymbol = _tokenSymbol;\\r\\n\\r\\n        emit ICO_Created(_id, _token);\\r\\n\\r\\n    }\\r\\n\\r\\n    function startICO(uint32 _id) external {\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        require(msg.sender == Controller, \\\"only owner can start ICO\\\");\\r\\n        if (ifoDetail.hasStarted == true) revert IFO_Already_Started();\\r\\n        if (ifoDetail.id == 0) revert IFO_Details_Not_Found();\\r\\n        ifoDetail.hasStarted = true;\\r\\n      \\r\\n        emit ICO_Started(_id);\\r\\n    }\\r\\n\\r\\n\\r\\n    function buyPresale(uint32 _id) external payable {\\r\\n        uint _amount = msg.value;\\r\\n\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        if(ifoDetail.hasStarted == false) revert IFO_Not_In_Session();\\r\\n        if(_amount < ifoDetail.minimumSubscription ) revert Amount_less_Than_Minimum_Subscription();\\r\\n        if(ifoDetail.maximumSubscription < _amount) revert Amount_greater_Than_Maximum_Subscription();\\r\\n        if(ifoDetail.publicShare == 0) revert MaxCapReached();\\r\\n\\r\\n        uint256 xRate = ifoDetail.exchangeRate;\\r\\n        uint256 amount_bought = _amount/10**10 * xRate; //for 18 decimal remove /10**10\\r\\n        ifoDetail.publicShare = ifoDetail.publicShare - amount_bought;\\r\\n        ifoDetail.publicshareBalance = ifoDetail.publicshareBalance + amount_bought;\\r\\n        Amount_per_subscriber[msg.sender][_id] = Amount_per_subscriber[msg.sender][_id] + amount_bought;\\r\\n        \\r\\n        ifoDetail.totalAmountRaised = ifoDetail.totalAmountRaised + _amount;\\r\\n        GlobaltotalAmountRaised = GlobaltotalAmountRaised + _amount;\\r\\n        \\r\\n        ifoDetail.totalBuyers += 1;\\r\\n\\r\\n        emit BuyPresale(_id, msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function buyPresaleRef(uint32 _id, address payable _referral) external payable {\\r\\n        uint _amount = msg.value;\\r\\n        address payable _target = _referral;\\r\\n\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        require(_target != msg.sender, \\\"Referral address should be different\\\");\\r\\n        require(_amount > 0.1 ether, \\\"Amount must be greater than 0.1 BNB\\\");\\r\\n        // require(_amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        if(ifoDetail.hasStarted == false) revert IFO_Not_In_Session();\\r\\n        if(_amount < ifoDetail.minimumSubscription ) revert Amount_less_Than_Minimum_Subscription();\\r\\n        if(ifoDetail.maximumSubscription < _amount) revert Amount_greater_Than_Maximum_Subscription();\\r\\n        if(ifoDetail.publicShare == 0) revert MaxCapReached();\\r\\n\\r\\n        uint256 xRate = ifoDetail.exchangeRate;\\r\\n        uint256 amount_bought = _amount/10**10 * xRate; //for 18 decimal remove /10**10\\r\\n        ifoDetail.publicShare = ifoDetail.publicShare - amount_bought;\\r\\n        ifoDetail.publicshareBalance = ifoDetail.publicshareBalance + amount_bought;\\r\\n        Amount_per_subscriber[msg.sender][_id] = Amount_per_subscriber[msg.sender][_id] + amount_bought;\\r\\n        \\r\\n        //Send 1% to the referral if user buy more than 0.1 bnb\\r\\n\\r\\n        _target.transfer(_amount/100); \\r\\n\\r\\n\\r\\n        ifoDetail.totalAmountDistributed = ifoDetail.totalAmountDistributed + _amount*1/100;\\r\\n        GlobaltotalAmountDistributed = GlobaltotalAmountDistributed + _amount*1/100;\\r\\n\\r\\n        ifoDetail.totalAmountRaised = ifoDetail.totalAmountRaised + _amount*99/100;\\r\\n        GlobaltotalAmountRaised = GlobaltotalAmountRaised + _amount*99/100;\\r\\n\\r\\n        ifoDetail.totalBuyers += 1;\\r\\n\\r\\n        emit BuyPresale2(_id, msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function endICO(uint32 _id) external {\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        require(msg.sender == Controller, \\\"only owner can end ICO\\\");\\r\\n        if (ifoDetail.hasStarted == false) revert IFO_Not_In_Session();\\r\\n        if (ifoDetail.id == 0) revert IFO_Details_Not_Found();\\r\\n\\r\\n        ifoDetail.hasStarted = false;\\r\\n\\r\\n        // ifoDetail.MaxCap = 0;\\r\\n        // ifoDetail.minimumSubscription = 0;\\r\\n        // ifoDetail.maximumSubscription = 0;\\r\\n\\r\\n        // ifoDetail.exchangeRate = 0;\\r\\n        // ifoDetail.tokenName = \\\"\\\";\\r\\n        // ifoDetail.tokenSymbol = \\\"\\\";\\r\\n        // ifoDetail.maxCapReached = false;\\r\\n        emit ICO_Ended(_id);\\r\\n    }\\r\\n\\r\\n    function claimToken(uint32 _id) external {\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        require(Amount_per_subscriber[msg.sender][_id] > 0, \\\"No record found\\\");\\r\\n        if(ifoDetail.hasStarted == true) revert IFO_still_in_progress();\\r\\n\\r\\n        uint256 _amount = Amount_per_subscriber[msg.sender][_id];\\r\\n        if(_amount > ifoDetail.publicshareBalance) revert Insufficient_Funds();\\r\\n        ifoDetail.publicshareBalance = ifoDetail.publicshareBalance - _amount;\\r\\n       Amount_per_subscriber[msg.sender][_id] = 0;\\r\\n       IERC20(ifoDetail.token).transfer(msg.sender, _amount);\\r\\n\\r\\n       emit Claim_Token(_id, msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address _to,uint32 _id, uint256 _amount) external  {\\r\\n        require(msg.sender == Controller, \\\"only owner can withdraw\\\");\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        if(_to == address(0)) revert Invalid_Address();\\r\\n        \\r\\n        IERC20(ifoDetail.token).transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawEther(uint256 _amount, address _to) external {\\r\\n        require(msg.sender == Controller, \\\"only owner can withdraw\\\");\\r\\n        if(_amount > address(this).balance) revert Insufficient_Funds();\\r\\n        if(_to == address(0)) revert Invalid_Address();\\r\\n\\r\\n        (bool success, ) = payable(_to).call{ value: _amount}(\\\"\\\");\\r\\n        require(success, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function getTotalEthRaised() external view returns(uint256){\\r\\n        return GlobaltotalAmountRaised;\\r\\n    }\\r\\n\\r\\n    function getTotalEthDistributed() external view returns(uint256){\\r\\n        return GlobaltotalAmountDistributed;\\r\\n    }\\r\\n\\r\\n    function getStatus(uint32 _id) external view returns(bool){\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        return ifoDetail.hasStarted;\\r\\n    }\\r\\n\\r\\n    function getParticipants(uint32 _id) external view returns(uint32){\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        return ifoDetail.totalBuyers;\\r\\n    }\\r\\n\\r\\n    function getPublicBalance(uint32 _id) external view returns(uint256){\\r\\n        IFODetail storage ifoDetail = IFODetails_ID[_id];\\r\\n        return ifoDetail.publicshareBalance;\\r\\n    }\\r\\n\\r\\n    function getAmountPerSubscriber(address _user, uint32 _id) external view returns(uint256) {\\r\\n        return Amount_per_subscriber[_user][_id];\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() payable external {}\\r\\n    fallback() payable external {}\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Amount_greater_Than_Maximum_Subscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Amount_less_Than_Minimum_Subscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ID_Taken_Choose_Another_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IFO_Already_Started\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IFO_Details_Not_Found\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IFO_Not_Ended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IFO_Not_In_Session\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IFO_Not_Started\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IFO_still_in_progress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Insufficient_Funds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Invalid_Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCapReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Value_cannot_be_empty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notController\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyPresale2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claim_Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ICO_Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"ICO_Ended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"ICO_Started\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GlobaltotalAmountDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GlobaltotalAmountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"buyPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"address payable\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"buyPresaleRef\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumSubscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumSubscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"createICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"endICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getAmountPerSubscriber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getParticipants\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getPublicBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEthDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEthRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"startICO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Launchpad", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}