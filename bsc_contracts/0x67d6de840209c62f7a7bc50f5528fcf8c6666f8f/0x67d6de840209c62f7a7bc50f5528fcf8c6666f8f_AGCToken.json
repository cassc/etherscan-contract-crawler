{"SourceCode": "pragma solidity 0.5.8;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n \r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n \r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n \r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n \r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n \r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n \r\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        // \u7a7a\u5b57\u7b26\u4e32hash\u503c\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;  \r\n        //\u5185\u8054\u7f16\u8bd1\uff08inline assembly\uff09\u8bed\u8a00\uff0c\u662f\u7528\u4e00\u79cd\u975e\u5e38\u5e95\u5c42\u7684\u65b9\u5f0f\u6765\u8bbf\u95eeEVM\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n    function getPair(address,address) external view returns (address);    \r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountsIn(uint amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function totalSupply() external view returns (uint256);\r\n    function getReserves() external view returns (uint,uint,uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface TokenLike {\r\n    function award(address buyer, uint256 wad) external;\r\n    function balanceOf(address) external view returns(uint256);\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256){\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool){\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool){\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  modifier onlySelf() {\r\n    require(address(msg.sender) == address(tx.origin));\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n//------------------------------------------------------------------------------\r\ncontract AGCToken is StandardToken,Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    string public name = \"AGC\";\r\n    string public symbol = \"AGC\";\r\n    uint8 public decimals = 18;\r\n\r\n    address public pankFactory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    address public pankRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public tokenAddressA = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    address public pankPair = address(0);\r\n    address public tokenAddressB = address(0);\r\n\r\n    //----------------------------------------------------------------------------------------\r\n    address public lianchuangAccount = 0x9cF446D89DdBBED883e3284b57d9263247d81308;\r\n    address public shengtaiAccount = 0x43F3f4Af85Ecc2F6f3Cd61bC72E530690ceE1787;\r\n    address public CDCTokenForDefiiAccount;\r\n\r\n    constructor(\r\n      \r\n    ) public {\r\n        totalSupply_ = 100000000 * (10 ** uint256(decimals));\r\n\r\n        balances[msg.sender] = totalSupply_;\r\n        tokenAddressB = address(this);\r\n    }\r\n\r\n    uint BUY = 1;\r\n    uint REMOVELIQUIDITY = 2;\r\n    uint TRANSFER = 3;\r\n    uint SALE = 4;\r\n    uint ADDLIQUIDITY = 5;\r\n    uint TRANSFERFROM = 6;\r\n\r\n    uint public sort = 0;\r\n    uint public state = 0;//0-close 1-\u79c1\u52df  2-\u5f00\u653e\u4ea4\u6613\r\n\r\n    //---------------------------------------------------------------\r\n    function transfer(address dst, uint256 wad) public returns (bool){\r\n      if(msg.sender == owner || dst == owner || msg.sender == CDCTokenForDefiiAccount || dst == CDCTokenForDefiiAccount){\r\n        return super.transfer(dst,wad);\r\n      }\r\n\r\n      sort = 0;\r\n      if (isV2Pair(msg.sender)) {\r\n        if(isBuy(msg.sender,wad)) {\r\n          sort = BUY;\r\n        }else{\r\n          sort = REMOVELIQUIDITY;\r\n        }\r\n      }else{\r\n        sort = TRANSFER;\r\n      }\r\n\r\n      //-----------------------------------------------------------------------------\r\n      if(state == 1){\r\n        if(sort==BUY){\r\n          return false;\r\n        }else if(sort==REMOVELIQUIDITY){\r\n          return false;\r\n        }else if(sort==TRANSFER){\r\n          super.transfer(dst, wad);\r\n          return true;\r\n        }\r\n      }else if(state == 2){\r\n        if(sort==BUY){\r\n          uint256 wadLianchuangPrise = wad.div(100).mul(2);\r\n          uint256 wadShengtaiPrise = wad.div(100).mul(1);\r\n          wad = wad.sub(wadLianchuangPrise);\r\n          wad = wad.sub(wadShengtaiPrise);\r\n\r\n          super.transfer(lianchuangAccount,wadLianchuangPrise);\r\n          super.transfer(shengtaiAccount,wadShengtaiPrise);\r\n          super.transfer(dst,wad);\r\n\r\n          return true;\r\n        }else if(sort==REMOVELIQUIDITY){\r\n          super.transfer(dst, wad);\r\n          return true;\r\n        }else if(sort==TRANSFER){\r\n          super.transfer(dst, wad);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    function transferFrom(address src, address dst, uint256 wad) public returns (bool)\r\n    { \r\n      if(src == owner || dst == owner || src == CDCTokenForDefiiAccount || dst == CDCTokenForDefiiAccount){\r\n        return super.transferFrom(src,dst,wad);\r\n      }\r\n\r\n      if(isV2Pair(dst)) {\r\n        if(!isAddLiquidity(dst,wad)){\r\n          sort = SALE;\r\n        }else{\r\n          sort = ADDLIQUIDITY;\r\n        }\r\n      }else{\r\n        sort = TRANSFERFROM;\r\n      }\r\n\r\n      //----------------------------\r\n      if(state == 1){\r\n        if(sort==SALE){\r\n          uint256 wadLianchuangPrise = wad.div(100).mul(2);\r\n          uint256 wadShengtaiPrise = wad.div(100).mul(1);\r\n          wad = wad.sub(wadLianchuangPrise);\r\n          wad = wad.sub(wadShengtaiPrise);\r\n\r\n          super.transferFrom(src,lianchuangAccount,wadLianchuangPrise);\r\n          super.transferFrom(src,shengtaiAccount,wadShengtaiPrise);\r\n          super.transferFrom(src,dst,wad);\r\n\r\n          return true;\r\n        }else if(sort==ADDLIQUIDITY){\r\n          return false;\r\n        }else if(sort==TRANSFERFROM){\r\n          return false;\r\n        }\r\n      }else if(state == 2){\r\n        if(sort==SALE){\r\n          uint256 wadLianchuangPrise = wad.div(100).mul(2);\r\n          uint256 wadShengtaiPrise = wad.div(100).mul(1);\r\n          wad = wad.sub(wadLianchuangPrise);\r\n          wad = wad.sub(wadShengtaiPrise);\r\n\r\n          super.transferFrom(src,lianchuangAccount,wadLianchuangPrise);\r\n          super.transferFrom(src,shengtaiAccount,wadShengtaiPrise);\r\n          super.transferFrom(src,dst,wad);\r\n\r\n          return true;\r\n        }else if(sort==ADDLIQUIDITY){\r\n          super.transferFrom(src,dst,wad);\r\n          return true;\r\n        }else if(sort==TRANSFERFROM){\r\n          super.transferFrom(src,dst,wad);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------\r\n    function initPankPair() public onlyOwner onlySelf{\r\n      pankPair = IPancakeFactory(pankFactory).getPair(tokenAddressA,tokenAddressB);\r\n    }\r\n    \r\n    function updateAccount(address _lianchuangAccount, address _shengtaiAccount, address _CDCTokenForDefiiAccount) public onlyOwner onlySelf{\r\n      lianchuangAccount = _lianchuangAccount;\r\n      shengtaiAccount = _shengtaiAccount;\r\n      CDCTokenForDefiiAccount = _CDCTokenForDefiiAccount;\r\n    }\r\n\r\n    function updateState(uint _state) public onlyOwner onlySelf{\r\n      state = _state;\r\n    }\r\n\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------\r\n    //Find a pair address in addition to the SPD token\r\n    function getAsset(address _pair) private view returns (address){\r\n        address _token0 = IPancakePair(_pair).token0();\r\n        address _token1 = IPancakePair(_pair).token1();\r\n        address asset = _token0 == address(this) ? _token1 : _token0;\r\n        return asset;\r\n    }\r\n\r\n    //Check whether an address is PancakePair \r\n    function isV2Pair(address _pair) private view returns (bool) {\r\n        bytes32 accountHash;\r\n        bytes32 codeHash;  \r\n        address pair = pankPair;  \r\n        assembly { accountHash := extcodehash(pair)}\r\n        assembly { codeHash := extcodehash(_pair) }\r\n        return (codeHash == accountHash);\r\n    }\r\n\r\n    //Decide whether to add liquidity or sell,\r\n    function isAddLiquidity(address _pair,uint256 wad) private view returns (bool) {\r\n        address _asset = getAsset(_pair);\r\n        uint balance1 = TokenLike(_asset).balanceOf(_pair);\r\n        (uint reserve0, uint reserve1,) = IPancakePair(_pair).getReserves();\r\n        if (reserve0 ==0 || reserve1 ==0 ) return true;\r\n        address _token0 = IPancakePair(_pair).token0();\r\n        (uint spdreserve, uint assetreserve)= _token0 == address(this) ? (reserve0,reserve1) : (reserve1,reserve0);\r\n        uint assetamount = IPancakeRouter(pankRouter).quote(wad, spdreserve, assetreserve);\r\n        return (balance1 > assetreserve + assetamount/2 );\r\n     }\r\n     \r\n    //Determine whether you are buying or remove liquidity\r\n    function isBuy(address _pair,uint256 wad) private view returns (bool) {\r\n        if (!isV2Pair(_pair)) return false;\r\n        (uint reserve0, uint reserve1,) = IPancakePair(_pair).getReserves();\r\n        address _token0 = IPancakePair(_pair).token0();\r\n        (,uint assetreserve)= _token0 == address(this) ? (reserve0,reserve1) : (reserve1,reserve0);\r\n        address _asset = getAsset(_pair);\r\n        address[] memory path = new address[](2);\r\n        path[0] = _asset;\r\n        path[1] = address(this);\r\n        uint[] memory amounts = IPancakeRouter(pankRouter).getAmountsIn(wad,path);\r\n        uint balance1 = TokenLike(_asset).balanceOf(_pair);\r\n        return (balance1 > assetreserve + amounts[0]/2);\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"CDCTokenForDefiiAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initPankPair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lianchuangAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pankPair\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pankRouter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddressA\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sort\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shengtaiAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pankFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddressB\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"updateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lianchuangAccount\",\"type\":\"address\"},{\"name\":\"_shengtaiAccount\",\"type\":\"address\"},{\"name\":\"_CDCTokenForDefiiAccount\",\"type\":\"address\"}],\"name\":\"updateAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "AGCToken", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a2f88dd71d0233c26d8f89fe90a094ec7f2dc88038d475a0ce9e4e63bcb2a488"}