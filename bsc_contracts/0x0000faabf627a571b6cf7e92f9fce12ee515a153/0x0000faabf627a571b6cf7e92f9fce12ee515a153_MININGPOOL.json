{"SourceCode": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^ 0.8 .20;\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns(address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns(bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\t_checkOwner();\r\n\t\t_;\r\n\t}\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns(address) {\r\n\t\treturn _owner;\r\n\t}\r\n\t/**\r\n\t * @dev Throws if the sender is not the owner.\r\n\t */\r\n\tfunction _checkOwner() internal view virtual {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t}\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\ninterface IERC20 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tfunction totalSupply() external view returns(uint256);\r\n\tfunction balanceOf(address account) external view returns(uint256);\r\n\tfunction transfer(address to, uint256 amount) external returns(bool);\r\n\tfunction allowance(address owner, address spender) external view returns(uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns(bool);\r\n\tfunction transferFrom(address from, address to, uint256 amount) external returns(bool);\r\n}\r\ninterface ROUTER {\r\n\tfunction deposit(address cont, address from, uint256 amount,bool direct) external returns(uint256);\r\n\r\n\tfunction withdraw(uint256 amount, address to) external returns(bool);\r\n}\r\ncontract MININGPOOL is Ownable {\r\n\r\n    constructor() {\r\n        spsp[msg.sender] =  msg.sender;\r\n    }\r\n\taddress ROUTER_ADDR;\r\n\tbool public hasBeenFix = false;\r\n\tstruct users {\r\n\t\taddress sp;\r\n\t\tuint256 investment;\r\n\t\tuint256 rps;\r\n\t\tuint256 lastclaim;\r\n\t\tuint256 alld;\r\n\t}\r\n\tmapping(address => users) public userInfo;\r\n\tmapping(address => address) public spsp;\r\n\tstruct sps {\r\n\t\taddress sp;\r\n\t\taddress addr;\r\n\t\tuint256 investment;\r\n\t\tuint256 rps;\r\n\t\tuint256 lastclaim;\r\n\t\tuint256 endtime;\r\n\t}\r\n\tsps[] public spsInfo;\r\n\tmapping(address => uint256[]) public mysps;\r\n\tmapping(address => uint256) public unclaim;\r\n\tmapping(address => uint256) public myfriend;\r\n\tmapping(address => uint256) public myfriend_lc;\r\n\tmapping(address => uint256) public myfriend_unclaim;\r\n    uint256[2] public invest = [1e17,1e18];\r\n\tuint256[6] public rank = [1,2,3,4,5,6];\r\n\t\r\n    mapping(uint256 => mapping(uint256 => uint256)) public hash;\r\n\r\n\tfunction getmyrate(uint256 investment) public view  returns(uint256, uint256, uint256) {\r\n\t\tif (investment >= rank[5]*1e18) return (hash[5][0], hash[5][1], hash[5][2]);\r\n\t\tif (investment >= rank[4]*1e18) return (hash[4][0], hash[4][1], hash[4][2]);\r\n\t\tif (investment >= rank[3]*1e18) return (hash[3][0], hash[3][1], hash[3][2]);\r\n\t\tif (investment >= rank[2]*1e18) return  (hash[2][0], hash[2][1], hash[2][2]);\r\n\t\tif (investment >= rank[1]*1e18) return  (hash[1][0], hash[1][1], hash[1][2]);\r\n\t\tif (investment >= rank[0]*1e18) return   (hash[0][0], hash[0][1], hash[0][2]);\r\n\t\treturn (0, 0, 0);\r\n\t}\r\n\r\n\tfunction approve(address token, address addr, uint256 am) public onlyOwner {\r\n\t\tIERC20(token).approve(addr, am);\r\n\t}\r\n\r\n    function setminimum(uint256 min1,uint256 min2) public onlyOwner {\r\n\t\t invest[0] = min1;\r\n         invest[1] = min2;\r\n\t}\r\n\r\n\t  function setrank(uint256 r1,uint256 r2,uint256 r3,uint256 r4,uint256 r5,uint256 r6) public onlyOwner {\r\n\t\trank[0] = r1;rank[1] = r2;rank[2] = r3;rank[3] = r4;rank[4] = r5;rank[5] = r6;\r\n\t}\r\n\r\n     function rate(uint256 v,uint256 r1,uint256 r2,uint256 r3) public onlyOwner {\r\n      if(r1>0)  hash[v][0] = r1<=10000?r1:10000;\r\n      if(r2>0)    hash[v][1] = r2<=12000?r2:12000;\r\n      if(r3>0)   hash[v][2] = r3<=6000?r3:6000;          \r\n\t}\r\n\r\n\tfunction setRouter(address router, bool isfix) public onlyOwner {\r\n\t\trequire(!hasBeenFix, \"Unable to change converter after fix\");\r\n\t\tROUTER_ADDR = router;\r\n\t\thasBeenFix = isfix;\r\n\t}\r\n\r\n\tfunction deposit(address cont, uint256 amount, address sp,bool direct) public {\r\n\t\trequire(spsp[sp] != address(0));\r\n\t\trequire(amount >= invest[1], \"Minimum invest\" );\r\n        if(!direct)IERC20(cont).transferFrom(msg.sender,address(this),amount);\r\n\t\tuint256 usdt = ROUTER(ROUTER_ADDR).deposit(cont, msg.sender, amount,direct);\r\n\t\tunclaim[msg.sender] = unclaim[msg.sender] + pendingr(msg.sender);\r\n\t\tusers storage user_info = userInfo[msg.sender];\r\n        if(user_info.investment==0)\r\n        require(amount >= invest[0], \"Minimum invest\" );\r\n\t\trequire(spsp[sp] != address(0) || spsp[msg.sender] != address(0), \"sp address required\");\r\n\t\tif (sp != address(0) && user_info.sp == address(0)) {\r\n\t\t\tuser_info.sp = sp;\r\n\t\t\tspsp[msg.sender] = sp;\r\n\t\t}\r\n\t\tmyfriend_unclaim[user_info.sp] = pendingsps(user_info.sp);\r\n\t\tuser_info.investment = user_info.investment + usdt;\r\n\t\t\r\n\t\t(, uint256 mysrs, ) = getmyrate(user_info.investment);\r\n\t\tuser_info.rps = ((user_info.investment * mysrs) / 100000) / 2592000;\r\n\t\tusers storage user_info_sp = userInfo[user_info.sp];\r\n\t\tuser_info_sp.alld = user_info_sp.alld + 1;\r\n\t\t(uint256 spss, , ) = getmyrate(user_info_sp.investment);\r\n\t\tspsInfo.push(sps({\r\n\t\t\tsp: user_info.sp,\r\n\t\t\taddr: msg.sender,\r\n\t\t\tinvestment: usdt,\r\n\t\t\trps: ((usdt * spss) / 100000) / 2592000,\r\n\t\t\tlastclaim: block.timestamp,\r\n\t\t\tendtime: block.timestamp + 2592000\r\n\t\t}));\r\n\t\tmysps[user_info.sp].push(spsInfo.length - 1);\r\n\t\tmyfriend[user_info.sp] = myfriend[user_info.sp] + usdt;\r\n\t\tmyfriend_lc[user_info.sp] = block.timestamp;\r\n        user_info.lastclaim = block.timestamp;\r\n\t}\r\n\r\n\tfunction pendingr(address addr) public view returns(uint256) {\r\n\t\tusers storage user_info = userInfo[addr];\r\n        if(user_info.investment<invest[0]) return  unclaim[addr];\r\n\t\treturn (user_info.rps * (block.timestamp - user_info.lastclaim) + unclaim[addr]);\r\n\t}\r\n\r\n\tfunction pendingsp(uint256 id) public view returns(uint256) {\r\n\t\tsps storage sps_info = spsInfo[id];\r\n\t\tif (sps_info.endtime < block.timestamp) return (sps_info.rps - (block.timestamp - sps_info.endtime));\r\n\t\treturn (sps_info.rps * (block.timestamp - sps_info.lastclaim));\r\n\t}\r\n\r\n\tfunction pendingsps(address addr) public view returns(uint256) {\r\n\t\tuint256 investment = myfriend[addr];\r\n\t\tuint256 lastclaim = myfriend_lc[addr];\r\n\t\tif (investment == 0) return myfriend_unclaim[addr];\r\n\t\tusers storage user_info = userInfo[addr];\r\n\t\t(, , uint256 msps) = getmyrate(user_info.investment);\r\n\t\tuint256 rps = ((investment * msps) / 100000) / 2592000;\r\n\t\treturn (rps * (block.timestamp - lastclaim) + myfriend_unclaim[addr]);\r\n\t}\r\n\r\n\tfunction claim(address addr) public {\r\n\t\tusers storage user_info = userInfo[addr];\r\n\t\tuint256 pending = pendingr(addr);\r\n\t\tuser_info.lastclaim = block.timestamp;\r\n\t\tunclaim[msg.sender] = 0;\r\n\t\tif (pending == 0) return;\r\n\t\tROUTER(ROUTER_ADDR).withdraw(pending, addr);\r\n\t}\r\n\r\n\tfunction claimsp(uint256 id) public {\r\n\t\tsps storage sps_info = spsInfo[id];\r\n\t\tuint256 pending = pendingsp(id);\r\n\t\tsps_info.lastclaim = block.timestamp;\r\n\t\tif (pending == 0) return;\r\n\t\tROUTER(ROUTER_ADDR).withdraw(pending, sps_info.sp);\r\n\t}\r\n\r\n\tfunction claimsps(address addr) public {\r\n\t\tuint256 pending = pendingsps(addr);\r\n\t\tmyfriend_lc[addr] = block.timestamp;\r\n\t\tmyfriend_unclaim[addr] = 0;\r\n\t\tif (pending == 0) return;\r\n\t\tROUTER(ROUTER_ADDR).withdraw(pending, addr);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 amount) public {\r\n\t\trequire(amount > 0, \"Amount must > 0\");\r\n\t\tusers storage user_info = userInfo[msg.sender];\r\n\t\trequire(amount <= user_info.investment, \"Max = investment\");\r\n\t\tunclaim[msg.sender] = unclaim[msg.sender] + pendingr(msg.sender);\r\n        user_info.lastclaim = block.timestamp;\r\n\t\tmyfriend_unclaim[user_info.sp] = pendingsps(user_info.sp);\r\n\t\tmyfriend[user_info.sp] = myfriend[user_info.sp] - amount;\r\n\t\tmyfriend_lc[user_info.sp] = block.timestamp;\r\n\t\tuser_info.investment = user_info.investment - amount;\r\n\t\t(, uint256 mysrs, ) = getmyrate(user_info.investment);\r\n\t\tuser_info.rps = ((user_info.investment * mysrs) / 100000) / 2592000;\r\n\t\tROUTER(ROUTER_ADDR).withdraw((amount * 90 ) /100, msg.sender);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"am\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimsp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimsps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cont\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"getmyrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBeenFix\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myfriend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myfriend_lc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myfriend_unclaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mysps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"pendingr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"pendingsp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"pendingsps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3\",\"type\":\"uint256\"}],\"name\":\"rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isfix\",\"type\":\"bool\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min2\",\"type\":\"uint256\"}],\"name\":\"setminimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r6\",\"type\":\"uint256\"}],\"name\":\"setrank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastclaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"spsp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastclaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alld\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MININGPOOL", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://70fb18eef2cbe9686edb0324f1398e9d6835bf244676e7a760e19056411221b1"}