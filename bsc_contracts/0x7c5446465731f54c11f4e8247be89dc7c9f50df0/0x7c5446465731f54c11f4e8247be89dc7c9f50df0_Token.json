{"SourceCode": "// File: interfaces/IInsurance.sol\r\n\r\n\r\npragma solidity >=0.8.0;\r\n \r\ninterface IInsurance {\r\n     function addAmountToPool(uint256[] memory amounts, address[] memory tos) external;\r\n}\r\n\r\n// File: TOKEN_NEW.sol\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-02-16\r\n */\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) isDividendExempt;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedToFee;\r\n    mapping(address => bool) private _updated;\r\n    mapping(address => bool) public isMarketPair;\r\n\r\n    uint256 private _allPercentage = 10000;\r\n    uint256 private _tFeeTotal;\r\n    string private _name = \"King of Prophecy\";\r\n    string private _symbol = \"KOP\";\r\n    uint8 private _decimals = 18;\r\n\r\n    //\u9500\u6bc1\r\n    uint256 public _burnFee = 450;\r\n    uint256 private _previousburnFee;\r\n\r\n    //LP\u5206\u7ea2\r\n    uint256 public _lpFee = 0;\r\n    uint256 private _previousLpFee;\r\n\r\n    //\u6d41\u52a8\u6027\u77ff\u6c60\r\n    uint256 public _lpFeePool = 600;\r\n    uint256 private _previousLpFeePool;\r\n\r\n    uint256 public _cakeFee = 0;\r\n    uint256 private _previousCakeFee;\r\n\r\n    //\u9500\u6bc1\u77ff\u6c60\r\n    uint256 public _destoryPoolFee = 100;\r\n    uint256 private _previousDestoryPoolFee;\r\n\r\n    //\u521b\u4e16\u77ff\u6c60\r\n    uint256 public _genesisPoolFee = 100;\r\n    uint256 private _previousGenesisPoolFee;\r\n\r\n    //\u5408\u4f19\u4eba\u5956\u52b1\r\n    uint256 public _partnerPoolFee = 25;\r\n    uint256 private _previousPartnerPoolFee;\r\n\r\n    //\u5de5\u4f1a\r\n    uint256 public _industrialPoolFee = 25;\r\n    uint256 private _previousIndustrialPoolFee;\r\n\r\n    //\u4e70\u65b9\u6ed1\u70b9\r\n\r\n    //\u6d41\u52a8\u6027\u77ff\u6c60\r\n    uint256 public _buyLpFeePool = 1523;\r\n    uint256 private _buypreviousLpFeePool;\r\n\r\n    //\u4e70\u65b9\u9500\u6bc1\u77ff\u6c60\r\n    uint256 public _buyburnFee = 1142;\r\n    uint256 private _buypreviousburnFee;\r\n\r\n    //LP\u5206\u7ea2\r\n    uint256 public _buylpFee = 0;\r\n    uint256 private _buypreviousLpFee;\r\n\r\n    uint256 public _buycakeFee = 0;\r\n    uint256 private _buypreviousCakeFee;\r\n\r\n    //\u9500\u6bc1\u77ff\u6c60\r\n    uint256 public _buydestoryPoolFee = 253;\r\n    uint256 private _buypreviousDestoryPoolFee;\r\n\r\n    //\u521b\u4e16\u77ff\u6c60\r\n    uint256 public _buygenesisPoolFee = 253;\r\n    uint256 private _buypreviousGenesisPoolFee;\r\n\r\n    //\u5408\u4f19\u4eba\u5956\u52b1\r\n    uint256 public _buypartnerPoolFee = 63;\r\n    uint256 private _buypreviousPartnerPoolFee;\r\n\r\n    //\u5de5\u4f1a\r\n    uint256 public _buyindustrialPoolFee = 63;\r\n    uint256 private _buypreviousIndustrialPoolFee;\r\n\r\n    uint256 currentIndex;\r\n    //\u603b\u53d1\u73b02.1\u4ebf\r\n    uint256 private _tTotal = 21 * 10 ** 7 * 10 ** 18;\r\n    uint256 distributorGas = 500000;\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public lpFeeShareTime;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n\r\n    mapping(address => address) public inviter;\r\n    address[] shareholders;\r\n    mapping(address => uint256) shareholderIndexes;\r\n    //\u9500\u6bc1\u6c60\u5408\u7ea6\r\n    address public destoryNFTPool;\r\n    //\u521b\u4e16\u5408\u7ea6\r\n    address public genesisNFTPool;\r\n    //\u5de5\u4f1a\u5408\u7ea6\r\n    address public industrialPool;\r\n    //\u5408\u4f19\u4eba\u5408\u7ea6\r\n    address public partnerPool;\r\n    //\u6d41\u52a8\u6027\u77ff\u6c60\u5408\u7ea6\r\n    address public lpPool;\r\n\r\n    bool inSwapAndLiquify;\r\n    IInsurance public insurance;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        _tOwned[msg.sender] = _tTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), address(0x55d398326f99059fF775485246999027B3197955));\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n        isMarketPair[uniswapV2Pair] = true;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        address from = msg.sender;\r\n        address to = recipient;\r\n        if (!_isExcludedFromFee[from] && !_isExcludedToFee[to]) {\r\n            _transfer(from, recipient, amount);\r\n        } else {\r\n            _tOwned[from] = _tOwned[from].sub(amount);\r\n            _tOwned[to] = _tOwned[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if (!_isExcludedFromFee[sender] && !_isExcludedToFee[recipient]) {\r\n            _transfer(sender, recipient, amount);\r\n        } else {\r\n            _tOwned[sender] = _tOwned[sender].sub(amount);\r\n            _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function updateExcludeFromFee(\r\n        address account,\r\n        bool status\r\n    ) public onlyOwner {\r\n        _isExcludedFromFee[account] = status;\r\n    }\r\n\r\n    function isExcludedToFee(address account) public view returns (bool) {\r\n        return _isExcludedToFee[account];\r\n    }\r\n\r\n    function isDividendExemptF(address account) public view returns (bool) {\r\n        return isDividendExempt[account];\r\n    }\r\n\r\n    function updateIsDividendExempt(\r\n        address account,\r\n        bool status\r\n    ) public onlyOwner {\r\n        isDividendExempt[account] = status;\r\n    }\r\n\r\n    function updateExcludeToFee(address account, bool status) public onlyOwner {\r\n        _isExcludedToFee[account] = status;\r\n    }\r\n\r\n    function updateBurnFee(uint256 _updateBurnFee) public onlyOwner {\r\n        _burnFee = _updateBurnFee;\r\n    }\r\n\r\n    function updatePartnerPoolFee(\r\n        uint256 _updatePartnerPoolFee\r\n    ) public onlyOwner {\r\n        _partnerPoolFee = _updatePartnerPoolFee;\r\n    }\r\n\r\n    function updateLpFee(uint256 _updateLpFee) public onlyOwner {\r\n        _lpFee = _updateLpFee;\r\n    }\r\n\r\n    function updateLpFeePool(uint256 _updateLpFeePool) public onlyOwner {\r\n        _lpFeePool = _updateLpFeePool;\r\n    }\r\n\r\n    function updateDestoryPoolFee(\r\n        uint256 _updateDestoryPoolFee\r\n    ) public onlyOwner {\r\n        _destoryPoolFee = _updateDestoryPoolFee;\r\n    }\r\n\r\n    function updateGenesisPoolFee(\r\n        uint256 _updateGenesisPoolFee\r\n    ) public onlyOwner {\r\n        _genesisPoolFee = _updateGenesisPoolFee;\r\n    }\r\n\r\n    function updateIndustrialPoolFee(\r\n        uint256 _updateIndustrialPoolFee\r\n    ) public onlyOwner {\r\n        _industrialPoolFee = _updateIndustrialPoolFee;\r\n    }\r\n\r\n    function buyupdateBurnFee(uint256 _updateBurnFee) public onlyOwner {\r\n        _buyburnFee = _updateBurnFee;\r\n    }\r\n\r\n    function buyupdateLpFee(uint256 _updateLpFee) public onlyOwner {\r\n        _buylpFee = _updateLpFee;\r\n    }\r\n\r\n    function buyupdateDestoryPoolFee(\r\n        uint256 _updateDestoryPoolFee\r\n    ) public onlyOwner {\r\n        _buydestoryPoolFee = _updateDestoryPoolFee;\r\n    }\r\n\r\n    function buyupdateGenesisPoolFee(\r\n        uint256 _updateGenesisPoolFee\r\n    ) public onlyOwner {\r\n        _buygenesisPoolFee = _updateGenesisPoolFee;\r\n    }\r\n\r\n    function buyupdateIndustrialPoolFee(\r\n        uint256 _updateIndustrialPoolFee\r\n    ) public onlyOwner {\r\n        _buyindustrialPoolFee = _updateIndustrialPoolFee;\r\n    }\r\n\r\n    function buyupdatePartnerPoolFee(\r\n        uint256 _updatePartnerPoolFee\r\n    ) public onlyOwner {\r\n        _buypartnerPoolFee = _updatePartnerPoolFee;\r\n    }\r\n\r\n    function buyupdateLpFeePool(uint256 _updateLpFeePool) public onlyOwner {\r\n        _buyLpFeePool = _updateLpFeePool;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = false;\r\n        //\u9ed8\u8ba40\u672a\u4e70\u5165\r\n        uint8 transferType = 0;\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (from == uniswapV2Pair || to == address(uniswapV2Pair)) {\r\n            takeFee = true;\r\n            if (to == address(uniswapV2Pair)) {\r\n                transferType = 1;\r\n            }\r\n        }\r\n\r\n        if (takeFee) {\r\n            //\u4e70\u5165\u624b\u7eed\u8d39\r\n            if (transferType == 0) {\r\n                _buyTokenTransfer(from, to, amount, takeFee);\r\n            } else {\r\n                _tokenTransfer(from, to, amount, takeFee);\r\n            }\r\n        } else {\r\n            _tOwned[from] = _tOwned[from].sub(amount);\r\n            _tOwned[to] = _tOwned[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n        }\r\n\r\n        if(_lpFee!=0  && _buylpFee!=0){\r\n            if (fromAddress == address(0)) fromAddress = from;\r\n            if (toAddress == address(0)) toAddress = to;\r\n            if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair)\r\n               setShare(fromAddress);\r\n            if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair)\r\n               setShare(toAddress);\r\n\r\n               fromAddress = from;\r\n               toAddress = to;\r\n            if (\r\n               _tOwned[address(this)] >= 1 * 10 ** 4 * 10 ** 18 &&\r\n               from != address(this) &&\r\n               lpFeeShareTime.add(minPeriod) <= block.timestamp\r\n             ) {\r\n               process(distributorGas);\r\n               lpFeeShareTime = block.timestamp;\r\n             }\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) return;\r\n        uint256 nowbanance = _tOwned[address(this)];\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            uint256 amount = nowbanance\r\n                .mul(\r\n                    IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])\r\n                )\r\n                .div(IERC20(uniswapV2Pair).totalSupply());\r\n            if (amount < 1 * 10 ** 18) {\r\n                currentIndex++;\r\n                iterations++;\r\n                return;\r\n            }\r\n            if (_tOwned[address(this)] < amount) return;\r\n            distributeDividend(shareholders[currentIndex], amount);\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function distributeDividend(address shareholder, uint256 amount) internal {\r\n        _tOwned[address(this)] = _tOwned[address(this)].sub(amount);\r\n        _tOwned[shareholder] = _tOwned[shareholder].add(amount);\r\n        emit Transfer(address(this), shareholder, amount);\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (_updated[shareholder]) {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0)\r\n                quitShare(shareholder);\r\n            return;\r\n        }\r\n        if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n        addShareholder(shareholder);\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        _transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    function _buyTokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        _buyTransferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    //\r\n    function _takeburnFee(address sender, uint256 tAmount) private {\r\n        if (_burnFee == 0) return;\r\n        if (_tFeeTotal >= 999 * 10 ** 7 * 10 ** 9) _burnFee = 0;\r\n        _tOwned[address(0)] = _tOwned[address(0)].add(tAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n        emit Transfer(sender, address(0), tAmount);\r\n    }\r\n\r\n    function _takeLPFee(address sender, uint256 tAmount) private {\r\n        if (_lpFee == 0 && _cakeFee == 0) return;\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\r\n        emit Transfer(sender, address(this), tAmount);\r\n    }\r\n\r\n    function _buyTakeLPFee(address sender, uint256 tAmount) private {\r\n        if (_buylpFee == 0 && _buycakeFee == 0) return;\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\r\n        emit Transfer(sender, address(this), tAmount);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _takeLPFee(\r\n            sender,\r\n            tAmount.div(_allPercentage).mul(_lpFee.add(_cakeFee))\r\n        );\r\n\r\n        //\u9500\u6bc1\r\n        uint256 _burnAmount = tAmount.div(_allPercentage).mul(_burnFee);\r\n        _tOwned[address(0x000000000000000000000000000000000000dEaD)] = _tOwned[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ].add(_burnAmount);\r\n\r\n        emit Transfer(\r\n            sender,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            _burnAmount\r\n        );\r\n        \r\n        //\u9500\u6bc1\u77ff\u6c60\u6dfb\u52a0\u4f59\u989d\r\n        uint256 _destoryNFTPoolAmount = tAmount.div(_allPercentage).mul(\r\n            _destoryPoolFee\r\n        );\r\n        \r\n        _tOwned[address(destoryNFTPool)] = _tOwned[address(destoryNFTPool)].add(\r\n            _destoryNFTPoolAmount\r\n        );\r\n\r\n        emit Transfer(sender, address(destoryNFTPool), _destoryNFTPoolAmount);\r\n\r\n       //\u521b\u4e16\u77ff\u6c60\u6dfb\u52a0\u4f59\u989d\r\n        uint256 _genesisPoolAmount = tAmount.div(_allPercentage).mul(\r\n            _genesisPoolFee\r\n        );\r\n        \r\n        _tOwned[address(genesisNFTPool)] = _tOwned[address(genesisNFTPool)].add(\r\n            _genesisPoolAmount\r\n        );\r\n\r\n        emit Transfer(sender, address(genesisNFTPool), _genesisPoolAmount);\r\n\r\n        //\u6d41\u52a8\u6027\u77ff\u6c60\u6dfb\u52a0\r\n        uint256 _lpFeePoolAmount = tAmount.div(_allPercentage).mul(\r\n            _lpFeePool\r\n        );\r\n        \r\n        _tOwned[address(lpPool)] = _tOwned[address(lpPool)].add(\r\n            _lpFeePoolAmount\r\n        );\r\n\r\n\r\n        emit Transfer(sender, address(lpPool), _lpFeePoolAmount);\r\n\r\n        //\u5de5\u4f1a\u77ff\u6c60\u6dfb\u52a0\r\n        uint256 _industrialPoolAmount = tAmount.div(_allPercentage).mul(\r\n            _industrialPoolFee\r\n        );\r\n        \r\n        _tOwned[address(industrialPool)] = _tOwned[address(industrialPool)].add(\r\n            _industrialPoolAmount\r\n        );\r\n\r\n\r\n        emit Transfer(sender, address(industrialPool), _industrialPoolAmount);\r\n\r\n        //\u5408\u4f19\u4eba\u77ff\u6c60\u6dfb\u52a0\r\n        uint256 _partnerPoolAmount = tAmount.div(_allPercentage).mul(\r\n            _partnerPoolFee\r\n        );\r\n        \r\n        _tOwned[address(partnerPool)] = _tOwned[address(partnerPool)].add(\r\n            _partnerPoolAmount\r\n        );\r\n\r\n        emit Transfer(sender, address(partnerPool), _partnerPoolAmount);\r\n\r\n        uint256 recipientRate = _allPercentage -\r\n            _lpFee -\r\n            _cakeFee -\r\n            _burnFee -\r\n            _genesisPoolFee -\r\n            _destoryPoolFee -\r\n            _lpFeePool -\r\n            _partnerPoolFee -\r\n            _industrialPoolFee;\r\n        _tOwned[recipient] = _tOwned[recipient].add(\r\n            tAmount.div(_allPercentage).mul(recipientRate)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            tAmount.div(_allPercentage).mul(recipientRate)\r\n        );\r\n    }\r\n\r\n    function _buyTransferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _buyTakeLPFee(\r\n            sender,\r\n            tAmount.div(_allPercentage).mul(_buylpFee.add(_buycakeFee))\r\n        );\r\n\r\n        uint256 _burnAmount = tAmount.div(_allPercentage).mul(_buyburnFee);\r\n        _tOwned[address(0x000000000000000000000000000000000000dEaD)] = _tOwned[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ].add(_burnAmount);\r\n        emit Transfer(\r\n            sender,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            _burnAmount\r\n        );\r\n\r\n        \r\n        //\u9500\u6bc1\u77ff\u6c60\u6dfb\u52a0\u4f59\u989d\r\n        uint256 _destoryNFTPoolAmount = tAmount.div(_allPercentage).mul(\r\n            _buydestoryPoolFee\r\n        );\r\n        \r\n        _tOwned[address(destoryNFTPool)] = _tOwned[address(destoryNFTPool)].add(\r\n            _destoryNFTPoolAmount\r\n        );\r\n\r\n        emit Transfer(sender, address(destoryNFTPool), _destoryNFTPoolAmount);\r\n\r\n       //\u521b\u4e16\u77ff\u6c60\u6dfb\u52a0\u4f59\u989d\r\n        uint256 _genesisPoolAmount = tAmount.div(_allPercentage).mul(\r\n            _buygenesisPoolFee\r\n        );\r\n        \r\n        _tOwned[address(genesisNFTPool)] = _tOwned[address(genesisNFTPool)].add(\r\n            _genesisPoolAmount\r\n        );\r\n\r\n        emit Transfer(sender, address(genesisNFTPool), _genesisPoolAmount);\r\n\r\n        //\u6d41\u52a8\u6027\u77ff\u6c60\u6dfb\u52a0\r\n        uint256 _lpFeePoolAmount = tAmount.div(_allPercentage).mul(\r\n            _buyLpFeePool\r\n        );\r\n        \r\n        _tOwned[address(lpPool)] = _tOwned[address(lpPool)].add(\r\n            _lpFeePoolAmount\r\n        );\r\n\r\n\r\n        emit Transfer(sender, address(lpPool), _lpFeePoolAmount);\r\n\r\n        //\u5de5\u4f1a\u77ff\u6c60\u6dfb\u52a0\r\n        uint256 _industrialPoolAmount = tAmount.div(_allPercentage).mul(\r\n            _buyindustrialPoolFee\r\n        );\r\n        \r\n        _tOwned[address(industrialPool)] = _tOwned[address(industrialPool)].add(\r\n            _industrialPoolAmount\r\n        );\r\n\r\n\r\n        emit Transfer(sender, address(industrialPool), _industrialPoolAmount);\r\n\r\n        //\u5408\u4f19\u4eba\u77ff\u6c60\u6dfb\u52a0\r\n        uint256 _partnerPoolAmount = tAmount.div(_allPercentage).mul(\r\n            _buypartnerPoolFee\r\n        );\r\n        \r\n        _tOwned[address(partnerPool)] = _tOwned[address(partnerPool)].add(\r\n            _partnerPoolAmount\r\n        );\r\n\r\n        emit Transfer(sender, address(partnerPool), _partnerPoolAmount);\r\n\r\n        uint256 recipientRate = _allPercentage -\r\n            _buylpFee -\r\n            _buycakeFee -\r\n            _buyburnFee -\r\n            _buygenesisPoolFee -\r\n            _buydestoryPoolFee -\r\n            _buyLpFeePool -\r\n            _buypartnerPoolFee -\r\n            _buyindustrialPoolFee;\r\n        _tOwned[recipient] = _tOwned[recipient].add(\r\n            tAmount.div(_allPercentage).mul(recipientRate)\r\n        );\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            tAmount.div(_allPercentage).mul(recipientRate)\r\n        );\r\n    }\r\n\r\n    function setMarketPair(address pair, bool hasPair) external onlyOwner {\r\n        isMarketPair[pair] = hasPair;\r\n    }\r\n\r\n    function setDestoryNFTPool(address _destoryNFTPool) external onlyOwner {\r\n        destoryNFTPool = _destoryNFTPool;\r\n    }\r\n\r\n    function setGenesisNFTPool(address _genesisNFTPool) external onlyOwner {\r\n        genesisNFTPool = _genesisNFTPool;\r\n    }\r\n\r\n    function setIndustrialPool(address _industrialPool) external onlyOwner {\r\n        industrialPool = _industrialPool;\r\n    }\r\n\r\n    function setLpPool(address _lpPool) external onlyOwner {\r\n        lpPool = _lpPool;\r\n    }\r\n\r\n    function setPartnerPool(address _partnerPool) external onlyOwner {\r\n        partnerPool = _partnerPool;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLpFeePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyburnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buycakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buydestoryPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buygenesisPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyindustrialPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buylpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buypartnerPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destoryPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_genesisPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_industrialPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFeePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_partnerPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateBurnFee\",\"type\":\"uint256\"}],\"name\":\"buyupdateBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateDestoryPoolFee\",\"type\":\"uint256\"}],\"name\":\"buyupdateDestoryPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateGenesisPoolFee\",\"type\":\"uint256\"}],\"name\":\"buyupdateGenesisPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateIndustrialPoolFee\",\"type\":\"uint256\"}],\"name\":\"buyupdateIndustrialPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateLpFee\",\"type\":\"uint256\"}],\"name\":\"buyupdateLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateLpFeePool\",\"type\":\"uint256\"}],\"name\":\"buyupdateLpFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatePartnerPoolFee\",\"type\":\"uint256\"}],\"name\":\"buyupdatePartnerPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destoryNFTPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisNFTPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"industrialPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurance\",\"outputs\":[{\"internalType\":\"contract IInsurance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDividendExemptF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedToFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeShareTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destoryNFTPool\",\"type\":\"address\"}],\"name\":\"setDestoryNFTPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genesisNFTPool\",\"type\":\"address\"}],\"name\":\"setGenesisNFTPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_industrialPool\",\"type\":\"address\"}],\"name\":\"setIndustrialPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpPool\",\"type\":\"address\"}],\"name\":\"setLpPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setMarketPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerPool\",\"type\":\"address\"}],\"name\":\"setPartnerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateBurnFee\",\"type\":\"uint256\"}],\"name\":\"updateBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateDestoryPoolFee\",\"type\":\"uint256\"}],\"name\":\"updateDestoryPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateExcludeToFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateGenesisPoolFee\",\"type\":\"uint256\"}],\"name\":\"updateGenesisPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateIndustrialPoolFee\",\"type\":\"uint256\"}],\"name\":\"updateIndustrialPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateLpFee\",\"type\":\"uint256\"}],\"name\":\"updateLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateLpFeePool\",\"type\":\"uint256\"}],\"name\":\"updateLpFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updatePartnerPoolFee\",\"type\":\"uint256\"}],\"name\":\"updatePartnerPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2d17396572add839d13adb7cca84bf690ec5ac4472775929da1f26247c912230"}