{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n// UniswapV2Router02 and IERC20 interfaces\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Ownable contract\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid owner address\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract JsonBotRouter is Ownable {\r\n    event AvgPriceUpdated(uint256 newAvgPrice); // Define an event\r\n\r\n    IUniswapV2Router02 public uniswapRouter;\r\n    address public feeReceiver;\r\n    uint256 public feePercentage; // Fee percentage in basis points (1 basis point = 0.01%)\r\n\r\n    constructor() {\r\n        address currentRouter;\r\n\r\n        if (block.chainid == 56) {\r\n            currentRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PCS Router\r\n        } else if (block.chainid == 97) {\r\n            currentRouter = 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; // PCS Testnet\r\n        } else if (block.chainid == 43114) {\r\n            currentRouter = 0x60aE616a2155Ee3d9A68541Ba4544862310933d4; //Avax Mainnet\r\n        } else if (block.chainid == 137) {\r\n            currentRouter = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff; //Polygon Ropsten\r\n        } else if (block.chainid == 250) {\r\n            currentRouter = 0xF491e7B69E4244ad4002BC14e878a34207E38c29; //SpookySwap FTM\r\n        } else if (block.chainid == 3) {\r\n            currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //Ropsten\r\n        } else if (block.chainid == 1 || block.chainid == 4) {\r\n            currentRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; //Mainnet\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        uniswapRouter = IUniswapV2Router02(currentRouter);\r\n        feeReceiver = msg.sender; // Initially, the contract owner is the fee receiver\r\n        feePercentage = 100;\r\n    }\r\n\r\n    // ------------------ only owner functions ------------------\r\n\r\n    function setFeeReceiver(address _newFeeReceiver) external onlyOwner {\r\n        feeReceiver = _newFeeReceiver;\r\n    }\r\n\r\n    function setFeePercentage(uint256 _newFeePercentage) external onlyOwner {\r\n        require(\r\n            _newFeePercentage <= 100,\r\n            \"Fee should be less than 100 basis points\"\r\n        );\r\n        feePercentage = _newFeePercentage;\r\n    }\r\n\r\n    function withdrawEth() external onlyOwner returns (bool) {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = payable(msg.sender).call{value: balance}(\"\");\r\n        return success;\r\n    }\r\n\r\n    function withdrawERC20(\r\n        address _tokenAddress\r\n    ) external onlyOwner returns (bool) {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        bool success = token.transfer(msg.sender, balance);\r\n        return success;\r\n    }\r\n\r\n    // ------------------ public functions ------------------\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 _amountOut,\r\n        address _tokenAddress,\r\n        uint256 _avgPrice,\r\n        uint256 _slippage // slippage is in basis points (1 basis = 0.1%)\r\n    ) external payable {\r\n        uint256 feeAmount = (msg.value * feePercentage) / 10000;\r\n        uint256 swapAmount = msg.value - feeAmount;\r\n        require(feeAmount > 0 && swapAmount > 0, \"Insufficient ETH amount\");\r\n\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        uint256 initialBalance = token.balanceOf(msg.sender);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapRouter.WETH();\r\n        path[1] = _tokenAddress;\r\n\r\n        // price of 1 token\r\n        uint256 currentPrice = uniswapRouter.getAmountsIn(\r\n            1 * (10 ** token.decimals()),\r\n            path\r\n        )[0];\r\n\r\n        uniswapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: swapAmount\r\n        }(\r\n            slippageCalculator(_amountOut, _slippage, true),\r\n            path,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 finalBalance = token.balanceOf(msg.sender);\r\n        uint256 tokensPurchased = finalBalance - initialBalance;\r\n\r\n        // Transfer fee to feeReceiver\r\n        (bool success, ) = payable(feeReceiver).call{value: feeAmount}(\"\");\r\n        require(success, \"Fee transfer failed.\");\r\n\r\n        // Calculate new average price\r\n        if (_avgPrice == 0 && initialBalance > 0) {\r\n            emit AvgPriceUpdated(currentPrice);\r\n        } else {\r\n            emit AvgPriceUpdated(\r\n                ((_avgPrice * initialBalance) +\r\n                    (tokensPurchased * currentPrice)) /\r\n                    (initialBalance + tokensPurchased)\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 _amountOut,\r\n        address _tokenAddress,\r\n        uint256 _tokenAmount,\r\n        uint256 _slippage\r\n    ) external {\r\n        require(_tokenAmount > 0, \"Token amount must be greater than zero\");\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        require(\r\n            token.transferFrom(msg.sender, address(this), _tokenAmount),\r\n            \"Token transfer to contract failed\"\r\n        );\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = _tokenAddress;\r\n        path[1] = uniswapRouter.WETH();\r\n\r\n        require(\r\n            token.approve(address(uniswapRouter), _tokenAmount),\r\n            \"Approval failed\"\r\n        );\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            slippageCalculator(_amountOut, _slippage, false),\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 finalBalance = address(this).balance;\r\n        uint256 ethRecieved = finalBalance > initialBalance\r\n            ? finalBalance - initialBalance\r\n            : 0;\r\n        uint256 feeAmount = (ethRecieved * feePercentage) / 10000;\r\n        uint256 swapAmount = ethRecieved - feeAmount;\r\n\r\n        // Transfer fee to feeReceiver\r\n        (bool success, ) = payable(feeReceiver).call{value: feeAmount}(\"\");\r\n        require(success, \"Fee transfer failed.\");\r\n\r\n        // Transfer eth to msg.sender\r\n        (success, ) = payable(msg.sender).call{value: swapAmount}(\"\");\r\n        require(success, \"Eth transfer failed.\");\r\n    }\r\n\r\n    function slippageCalculator(\r\n        uint256 _amount,\r\n        uint256 _slippage,\r\n        bool _isBuy\r\n    ) internal view returns (uint256) {\r\n        if (_isBuy) {\r\n            return\r\n                _amount -\r\n                ((_amount * _slippage) / 1000) -\r\n                ((_amount * feePercentage) / 10000);\r\n        } else {\r\n            return _amount - ((_amount * _slippage) / 1000);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAvgPrice\",\"type\":\"uint256\"}],\"name\":\"AvgPriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_avgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JsonBotRouter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5055b931dbda681ea39a175321e3e11cbae7f3151d48934bb2b8e6b1597582e5"}