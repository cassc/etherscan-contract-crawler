{"SourceCode": "pragma solidity =0.8.0;\r\n\r\ninterface IRevoTokenContract{\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function totalSupply() external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IRevoStakingContract{\r\n    struct Stake {\r\n        uint256 stakedAmount;\r\n        uint256 startTime;\r\n        uint256 poolIndex;\r\n        uint256 tierIndex;\r\n        uint256 reward;\r\n        uint256 harvested;\r\n        bool withdrawStake;\r\n    }\r\n    \r\n    struct Pool {\r\n        string poolName;\r\n        uint256 poolIndex;\r\n        uint256 startTime;\r\n        uint256 totalReward;\r\n        uint256 totalStaked;\r\n        uint256 currentReward;\r\n        uint256 duration;\r\n        uint256 APR;\r\n        bool terminated;\r\n        uint256 maxRevoStaking;\r\n    }\r\n    \r\n    function getUserStakes(address _user) external view returns (Stake[] memory);\r\n    function getAllPools() external view returns(IRevoStakingContract.Pool[] memory);\r\n    function performStake(uint256 _poolIndex, uint256 _revoAmount, address _wallet) external;\r\n    function unstake(uint256 _poolIndex, address _wallet) external;\r\n    function harvest(uint256 _poolIndex, address _wallet) external;\r\n    function getUserPoolReward(uint256 _poolIndex, uint256 _stakeAmount, address _wallet) external view returns(uint256);\r\n    function getHarvestable(address _wallet, uint256 _poolIndex) external view returns(uint256);\r\n}\r\n\r\ninterface IRevoFarming{\r\n    struct FarmingPool {\r\n        string name;\r\n        uint256 poolIndex;\r\n        uint256 startTime;\r\n        uint256 periodFinish;\r\n        uint256 rewardRate;\r\n        uint256 rewardsDuration;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewardPerTokenStored;\r\n        uint256 totalLpStaked;\r\n    }\r\n    \r\n    struct Stake {\r\n        uint256 stakedAmount;\r\n        uint256 poolIndex;\r\n        uint256 harvested;\r\n        uint256 harvestable;\r\n    }\r\n    \r\n    function stake(uint256 _poolIndex, address _wallet, uint256 amount) external;\r\n    function withdraw(uint256 _poolIndex, address _wallet, uint256 amount) external;\r\n    function harvest(uint256 _poolIndex, address _wallet) external;\r\n    function exit(uint256 _poolIndex, address _wallet) external;\r\n    function earned(uint256 _poolIndex, address account) external view returns (uint256);\r\n    function getAllPools() external view returns(FarmingPool[] memory);\r\n    function lpAddress() external view returns(address);\r\n    function getUserStakes(address _user) external view returns(IRevoFarming.Stake[] memory);\r\n}\r\n\r\ninterface IPancakeContract {\r\n    function totalSupply() external view returns (uint);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () { }\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract RevoPoolManager is Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n    struct AbsctractPool {\r\n        address contractAddress;\r\n        IRevoStakingContract.Pool pool;\r\n    }\r\n    \r\n    struct AbsctractUserStake {\r\n        address contractAddress;\r\n        IRevoStakingContract.Stake stake;\r\n    }\r\n    \r\n    struct AbsctractFarmingPool {\r\n        address contractAddress;\r\n        uint256 lpReserves0;\r\n        uint256 lpReserves1;\r\n        uint256 lpTotalSupply;\r\n        IRevoFarming.FarmingPool pool;\r\n    }\r\n    \r\n    //Revo Token\r\n    address public revoAddress;\r\n    IRevoTokenContract revoToken;\r\n    //Staking pools\r\n    address[] public stakingPools;\r\n    //Farming pools\r\n    address[] public farmingPools;\r\n    \r\n    constructor(address _revoAddress) {\r\n        setRevo(_revoAddress);\r\n    }\r\n    \r\n    /*\r\n    Returns the amount of Revo staked from all staking pools accross all contracts\r\n    */\r\n    function getRevoStakedFromStakingPools(address _wallet) public view returns(uint256) {\r\n        uint256 revoStaked;\r\n        for(uint256 i = 0; i < stakingPools.length; i++){\r\n            if(stakingPools[i] != 0x0000000000000000000000000000000000000000){\r\n                IRevoStakingContract.Stake[] memory stakes = IRevoStakingContract(stakingPools[i]).getUserStakes(_wallet);\r\n                for(uint256 s = 0; s < stakes.length; s++){ \r\n                    revoStaked = revoStaked.add(!stakes[s].withdrawStake ? stakes[s].stakedAmount : 0);\r\n                }\r\n            }\r\n        }\r\n        return revoStaked;\r\n    }\r\n    \r\n    /*\r\n    Returns the amount of LP tokens staked from all farming pools\r\n    */\r\n    function getLPStakedFromFarmingPools(address _wallet) public view returns(uint256) {\r\n        uint256 lpStaked;\r\n        for(uint256 i = 0; i < farmingPools.length; i++){\r\n            if(farmingPools[i] != 0x0000000000000000000000000000000000000000){\r\n\r\n                IRevoFarming.Stake[] memory stakes = IRevoFarming(farmingPools[i]).getUserStakes(_wallet);\r\n                for(uint256 s = 0; s < stakes.length; s++){ \r\n                    lpStaked = lpStaked.add(stakes[s].stakedAmount);\r\n                }\r\n            }\r\n        }\r\n        return lpStaked;\r\n    }\r\n    \r\n    /*\r\n    Add an address in pools array\r\n    */\r\n    function addPoolAddress(address _address, bool _isFarming) public onlyOwner {\r\n        (_isFarming ? farmingPools : stakingPools).push(_address);\r\n    }\r\n    \r\n    /*\r\n    Remove an address in pools array\r\n    */\r\n    function removePoolAddress(address _address, bool _isFarming) public onlyOwner {\r\n        uint256 index = 99999999;\r\n        address[] storage addresses = (_isFarming ? farmingPools : stakingPools);\r\n        for(uint256 i = 0; i < addresses.length; i++){\r\n            if(addresses[i] == _address){\r\n                index = i;\r\n            }\r\n        }\r\n        if(index < 99999999){\r\n            delete addresses[index];\r\n        }\r\n    }\r\n    \r\n    /**********************\r\n     * Staking Proxy\r\n     *********************/\r\n    \r\n    /*\r\n    Get all staking pools accross all staking contracts\r\n    */\r\n    function getStakingPools() public view returns(AbsctractPool[] memory){\r\n        uint256 size = 0;\r\n        for(uint256 i = 0; i < stakingPools.length; i++){\r\n            if(stakingPools[i] != 0x0000000000000000000000000000000000000000){\r\n                size += IRevoStakingContract(stakingPools[uint(i)]).getAllPools().length;\r\n            }\r\n        }\r\n        AbsctractPool[] memory pools = new AbsctractPool[](size);\r\n        \r\n        uint256 arrayIndex;\r\n        for(int256 i = int(stakingPools.length) - 1; i >= 0; i--){\r\n            if(stakingPools[uint(i)] != 0x0000000000000000000000000000000000000000){\r\n                IRevoStakingContract stakingContract = IRevoStakingContract(stakingPools[uint(i)]);\r\n                \r\n                for(int256 p = int(stakingContract.getAllPools().length) - 1; p >= 0 ; p--){\r\n                    pools[arrayIndex].contractAddress = stakingPools[uint(i)];\r\n                    pools[arrayIndex].pool = stakingContract.getAllPools()[uint(p)];\r\n                    \r\n                    arrayIndex++;\r\n                }\r\n            }\r\n        }\r\n        return pools;\r\n    }\r\n    \r\n    function getUserStakes(address _user) public view returns (AbsctractUserStake[] memory){\r\n        uint256 size = 0;\r\n        for(uint256 i = 0; i < stakingPools.length; i++){\r\n            if(stakingPools[i] != 0x0000000000000000000000000000000000000000){\r\n                size += IRevoStakingContract(stakingPools[uint(i)]).getUserStakes(_user).length;\r\n            }\r\n        }\r\n        \r\n        AbsctractUserStake[] memory stakes = new AbsctractUserStake[](size);\r\n        \r\n        uint256 arrayIndex;\r\n        for(int256 i = int(stakingPools.length) - 1; i >= 0; i--){\r\n            if(stakingPools[uint(i)] != 0x0000000000000000000000000000000000000000){\r\n                IRevoStakingContract stakingContract = IRevoStakingContract(stakingPools[uint(i)]);\r\n                \r\n                for(int256 p = int(stakingContract.getUserStakes(_user).length) - 1; p >= 0 ; p--){\r\n                    stakes[arrayIndex].contractAddress = stakingPools[uint(i)];\r\n                    stakes[arrayIndex].stake = stakingContract.getUserStakes(_user)[uint(p)];\r\n                    \r\n                    arrayIndex++;\r\n                }\r\n            }\r\n        }\r\n        return stakes;\r\n    }\r\n    \r\n    \r\n    function stake(address _contractAddress, uint256 _poolIndex, uint256 _revoAmount) public{ \r\n        IRevoStakingContract(_contractAddress).performStake(_poolIndex, _revoAmount, msg.sender);\r\n    }\r\n    \r\n    function unstake(address _contractAddress, uint256 _poolIndex) public{\r\n        IRevoStakingContract(_contractAddress).unstake(_poolIndex, msg.sender);\r\n    }\r\n    \r\n    function harvest(address _contractAddress, uint256 _poolIndex) public{\r\n        IRevoStakingContract(_contractAddress).harvest(_poolIndex, msg.sender);\r\n    }\r\n    \r\n    function getUserPoolReward(address _contractAddress, uint256 _poolIndex, uint256 _stakeAmount, address _wallet) external view returns(uint256){\r\n        return IRevoStakingContract(_contractAddress).getUserPoolReward(_poolIndex, _stakeAmount, _wallet);\r\n    }\r\n    \r\n    function getHarvestable(address[] memory _contractAddresses, address _wallet, uint256[] memory _poolIndexes) public view returns(uint256[] memory){\r\n        uint256[] memory harvestArray = new uint256[](_poolIndexes.length);\r\n        for(uint256 i = 0; i < _poolIndexes.length; i++){\r\n            harvestArray[i] = IRevoStakingContract(_contractAddresses[i]).getHarvestable(_wallet, _poolIndexes[i]);\r\n        }\r\n        return harvestArray;\r\n    }\r\n    \r\n    /**********************\r\n    * Farming Proxy\r\n    *********************/\r\n    function getFarmingPools() public view returns(AbsctractFarmingPool[] memory){\r\n        uint256 size = 0;\r\n        for(uint256 i = 0; i < farmingPools.length; i++){\r\n            if(farmingPools[i] != 0x0000000000000000000000000000000000000000){\r\n                size += IRevoFarming(farmingPools[uint(i)]).getAllPools().length;\r\n            }\r\n        }\r\n        AbsctractFarmingPool[] memory pools = new AbsctractFarmingPool[](size);\r\n        uint256 arrayIndex;\r\n        for(int256 i = int(farmingPools.length) - 1; i >= 0; i--){\r\n            if(farmingPools[uint(i)] != 0x0000000000000000000000000000000000000000){\r\n                IRevoFarming farmingContract = IRevoFarming(farmingPools[uint(i)]);\r\n                \r\n                for(int256 p = int(farmingContract.getAllPools().length) - 1; p >= 0 ; p--){\r\n                    pools[arrayIndex].contractAddress = farmingPools[uint(i)];\r\n                    pools[arrayIndex].pool = farmingContract.getAllPools()[uint(p)];\r\n                    //LP token information\r\n                    (uint112 _reserve0, uint112 _reserve1,) = IPancakeContract(farmingContract.lpAddress()).getReserves();\r\n                    pools[arrayIndex].lpReserves0 = _reserve0;\r\n                    pools[arrayIndex].lpReserves1 = _reserve1;\r\n                    pools[arrayIndex].lpTotalSupply = IPancakeContract(farmingContract.lpAddress()).totalSupply();\r\n\r\n                    arrayIndex++;\r\n                }\r\n            }\r\n        }\r\n        return pools;\r\n    }\r\n    \r\n    function getUserStakesLP(address _user) public view returns (IRevoFarming.Stake[] memory){\r\n        uint256 size = 0;\r\n        for(uint256 i = 0; i < farmingPools.length; i++){\r\n            if(farmingPools[i] != 0x0000000000000000000000000000000000000000){\r\n                size += IRevoFarming(farmingPools[uint(i)]).getUserStakes(_user).length;\r\n            }\r\n        }\r\n        \r\n        IRevoFarming.Stake[] memory stakes = new IRevoFarming.Stake[](size);\r\n        \r\n        uint256 arrayIndex;\r\n        for(int256 i = int(farmingPools.length) - 1; i >= 0; i--){\r\n            if(farmingPools[uint(i)] != 0x0000000000000000000000000000000000000000){\r\n                IRevoFarming farmingContract = IRevoFarming(farmingPools[uint(i)]);\r\n                \r\n                for(int256 p = int(farmingContract.getUserStakes(_user).length) - 1; p >= 0 ; p--){\r\n                    stakes[arrayIndex] = farmingContract.getUserStakes(_user)[uint(p)];\r\n                    \r\n                    arrayIndex++;\r\n                }\r\n            }\r\n        }\r\n        return stakes;\r\n    }\r\n     \r\n    function stakeLp(address _contractAddress, uint256 _poolIndex, uint256 _lpAmount) public{\r\n        IRevoFarming(_contractAddress).stake(_poolIndex, msg.sender, _lpAmount);\r\n    }\r\n    \r\n    function withdrawLp(address _contractAddress, uint256 _poolIndex, uint256 amount) public{\r\n        IRevoFarming(_contractAddress).withdraw(_poolIndex, msg.sender, amount);\r\n    }\r\n    \r\n    function harvestFarming(address _contractAddress, uint256 _poolIndex) public{\r\n        IRevoFarming(_contractAddress).harvest(_poolIndex, msg.sender);\r\n    }\r\n    \r\n    function exitFarming(address _contractAddress, uint256 _poolIndex) public{\r\n        IRevoFarming(_contractAddress).exit(_poolIndex, msg.sender);\r\n    }\r\n    \r\n    function getHarvestableFarming(address[] memory _contractAddresses, address _wallet, uint256[] memory _poolIndexes) public view returns(uint256[] memory){\r\n        uint256[] memory harvestArray = new uint256[](_contractAddresses.length);\r\n        for(uint256 i = 0; i < _contractAddresses.length; i++){\r\n            harvestArray[i] = IRevoFarming(_contractAddresses[i]).earned(_poolIndexes[i], _wallet);\r\n        }\r\n        return harvestArray;\r\n    }\r\n    \r\n    /*\r\n    Set revo Address & token\r\n    */\r\n    function setRevo(address _revo) public onlyOwner {\r\n        revoAddress = _revo;\r\n        revoToken = IRevoTokenContract(revoAddress);\r\n    }\r\n    \r\n    function getPools(bool _isFarming) public view returns(address[] memory) {\r\n        return _isFarming ? farmingPools : stakingPools;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isFarming\",\"type\":\"bool\"}],\"name\":\"addPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"}],\"name\":\"exitFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farmingPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarmingPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpReserves0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpReserves1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTotalSupply\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLpStaked\",\"type\":\"uint256\"}],\"internalType\":\"struct IRevoFarming.FarmingPool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"internalType\":\"struct RevoPoolManager.AbsctractFarmingPool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolIndexes\",\"type\":\"uint256[]\"}],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_poolIndexes\",\"type\":\"uint256[]\"}],\"name\":\"getHarvestableFarming\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getLPStakedFromFarmingPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isFarming\",\"type\":\"bool\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getRevoStakedFromStakingPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APR\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"terminated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxRevoStaking\",\"type\":\"uint256\"}],\"internalType\":\"struct IRevoStakingContract.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"internalType\":\"struct RevoPoolManager.AbsctractPool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUserPoolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawStake\",\"type\":\"bool\"}],\"internalType\":\"struct IRevoStakingContract.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct RevoPoolManager.AbsctractUserStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakesLP\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestable\",\"type\":\"uint256\"}],\"internalType\":\"struct IRevoFarming.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"}],\"name\":\"harvestFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isFarming\",\"type\":\"bool\"}],\"name\":\"removePoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revo\",\"type\":\"address\"}],\"name\":\"setRevo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revoAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"stakeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RevoPoolManager", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000155040625d7ae3e9cada9a73e3e44f76d3ed1409", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://def9c8906ab6acdb93fc827484e1795b2e6e83d6bbab1cde48e56fdccc79f722"}