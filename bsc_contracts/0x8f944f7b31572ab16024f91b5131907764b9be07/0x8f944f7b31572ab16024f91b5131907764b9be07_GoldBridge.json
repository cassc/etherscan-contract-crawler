{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17; \r\n\r\ninterface ERC20Essential \r\n{\r\n\r\n    function balanceOf(address user) external view returns(uint256);\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n\r\n}\r\n\r\n\r\n//USDT contract in Ethereum does not follow ERC20 standard so it needs different interface\r\ninterface usdtContract\r\n{\r\n    function transferFrom(address _from, address _to, uint256 _amount) external;\r\n}\r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\ncontract owned\r\n{\r\n    address public owner;\r\n    mapping(address => bool) public signer;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event SignerUpdated(address indexed signer, bool indexed status);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        //owner does not become signer automatically.\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlySigner {\r\n        require(signer[msg.sender], 'caller must be signer');\r\n        _;\r\n    }\r\n\r\n\r\n    function changeSigner(address _signer, bool _status) public onlyOwner {\r\n        signer[_signer] = _status;\r\n        emit SignerUpdated(_signer, _status);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    \r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract GoldBridge is owned {\r\n    \r\n    uint256 public orderID;\r\n    uint256 public exraCoinRewards;   // if we give users extra coins to cover gas cost of some initial transactions.\r\n    bool public bridgeStatus = true;\r\n    \r\n\r\n    // This generates a public event of coin received by contract\r\n    event CoinIn(uint256 indexed orderID, address indexed user, uint256 value, address outputCurrency);\r\n    event CoinOut(uint256 indexed orderID, address indexed user, uint256 value);\r\n    event CoinOutFailed(uint256 indexed orderID, address indexed user, uint256 value);\r\n    event TokenIn(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID, address outputCurrency);\r\n    event TokenOut(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID);\r\n    event TokenOutFailed(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID);\r\n\r\n   \r\n\r\n    \r\n    receive () external payable {\r\n        //nothing happens for incoming fund\r\n    }\r\n    \r\n    function coinIn(address outputCurrency) external payable returns(bool){\r\n        require(bridgeStatus, \"Bridge is inactive\");\r\n        orderID++;\r\n        payable(owner).transfer(msg.value);     //send fund to owner\r\n        emit CoinIn(orderID, msg.sender, msg.value, outputCurrency);\r\n        return true;\r\n    }\r\n    \r\n    function coinOut(address user, uint256 amount, uint256 _orderID) external onlySigner returns(bool){\r\n        require(bridgeStatus, \"Bridge is inactive\");\r\n        payable(user).transfer(amount);\r\n        emit CoinOut(_orderID, user, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    function tokenIn(address tokenAddress, uint256 tokenAmount, uint256 chainID, address outputCurrency) external returns(bool){\r\n        require(bridgeStatus, \"Bridge is inactive\");\r\n        orderID++;\r\n        //fund will go to the owner\r\n        if(tokenAddress == address(0xdAC17F958D2ee523a2206206994597C13D831ec7)){\r\n            //There should be different interface for the USDT Ethereum contract\r\n            usdtContract(tokenAddress).transferFrom(msg.sender, owner, tokenAmount);\r\n        }else{\r\n            ERC20Essential(tokenAddress).transferFrom(msg.sender, owner, tokenAmount);\r\n        }\r\n        emit TokenIn(orderID, tokenAddress, msg.sender, tokenAmount, chainID, outputCurrency);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function tokenOut(address tokenAddress, address user, uint256 tokenAmount, uint256 _orderID, uint256 chainID) external onlySigner returns(bool){\r\n            require(bridgeStatus, \"Bridge is inactive\");\r\n            ERC20Essential(tokenAddress).transfer(user, tokenAmount);\r\n\r\n            if(exraCoinRewards > 0 && address(this).balance >= exraCoinRewards){\r\n                payable(user).transfer(exraCoinRewards);\r\n            }\r\n            emit TokenOut(_orderID, tokenAddress, user, tokenAmount, chainID);\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    function setExraCoinsRewards(uint256 _exraCoinRewards) external onlyOwner returns( string memory){\r\n        exraCoinRewards = _exraCoinRewards;\r\n        return \"Extra coins rewards updated\";\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"CoinIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CoinOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CoinOutFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"TokenIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"TokenOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"TokenOutFailed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bridgeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"coinIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"coinOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exraCoinRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exraCoinRewards\",\"type\":\"uint256\"}],\"name\":\"setExraCoinsRewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"tokenIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"tokenOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GoldBridge", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://71a7425ff1c750a7ac38ce8854dc2b65090c85b1016032c43b294646dc8168a4"}