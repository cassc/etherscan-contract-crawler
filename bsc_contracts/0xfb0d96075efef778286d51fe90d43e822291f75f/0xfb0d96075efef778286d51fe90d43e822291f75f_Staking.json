{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@dlsl/dev-modules/utils/Globals.sol\\\";\\nimport \\\"@dlsl/dev-modules/libs/math/DSMath.sol\\\";\\n\\nimport \\\"./IStaking.sol\\\";\\n\\ncontract Staking is Ownable, IStaking {\\n    using Arrays for uint256[];\\n    using SafeERC20 for IERC20;\\n    using DSMath for uint128;\\n\\n    address public token;\\n    uint256 public aggregateStakedAmount;\\n\\n    Intervals private _intervals;\\n    mapping(address => Stake) public accountToStake;\\n\\n    constructor(address token_) {\\n        require(token_ != address(0), \\\"SC: invalid token\\\");\\n\\n        token = token_;\\n    }\\n\\n    function setIntervals(uint256[] calldata amounts_, uint128[] calldata percents_)\\n        external\\n        onlyOwner\\n    {\\n        _validateAmounts(amounts_);\\n        require(amounts_.length == percents_.length, \\\"SC: invalid length\\\");\\n\\n        delete _intervals;\\n\\n        _intervals.amounts = amounts_;\\n        _intervals.percents = percents_;\\n\\n        emit IntervalsSetted(amounts_, percents_);\\n    }\\n\\n    function addIntervals(uint256[] calldata amounts_, uint128[] calldata percents_)\\n        external\\n        onlyOwner\\n    {\\n        require(amounts_.length > 0, \\\"SC: invalid length\\\");\\n\\n        _validateAmounts(amounts_);\\n\\n        uint256 intervalsLength_ = _intervals.amounts.length;\\n        if (intervalsLength_ == 0) {\\n            require(amounts_[0] > 0, \\\"SC: invalid initial amount (1)\\\");\\n        } else {\\n            require(\\n                amounts_[0] > _intervals.amounts[intervalsLength_ - 1],\\n                \\\"SC: invalid initial amount (2)\\\"\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < amounts_.length; i++) {\\n            _intervals.amounts.push(amounts_[i]);\\n            _intervals.percents.push(percents_[i]);\\n        }\\n\\n        emit IntervalsAdded(amounts_, percents_);\\n    }\\n\\n    function editIntervals(\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_,\\n        uint128[] calldata percents_\\n    ) external onlyOwner {\\n        uint256 intervalsLength_ = _intervals.amounts.length;\\n        require(intervalsLength_ > 0, \\\"SC: intervals isn't added\\\");\\n\\n        for (uint256 i = 0; i < indexes_.length; i++) {\\n            uint256 index_ = indexes_[i];\\n            if (0 < index_ && index_ < intervalsLength_ - 1) {\\n                require(\\n                    _intervals.amounts[index_ - 1] < amounts_[i] &&\\n                        amounts_[i] < _intervals.amounts[index_ + 1],\\n                    \\\"SC: invalid amount (1)\\\"\\n                );\\n            } else if (0 == index_ && intervalsLength_ > 1) {\\n                require(amounts_[i] < _intervals.amounts[index_ + 1], \\\"SC: invalid amount (2)\\\");\\n            } else if (index_ == intervalsLength_ - 1 && intervalsLength_ > 1) {\\n                require(_intervals.amounts[index_ - 1] < amounts_[i], \\\"SC: invalid amount (3)\\\");\\n            } else if (0 == index_) {\\n                require(amounts_[i] > 0, \\\"SC: invalid amount (4)\\\");\\n            } else {\\n                revert(\\\"SC: invalid index\\\");\\n            }\\n\\n            _intervals.amounts[index_] = amounts_[i];\\n            _intervals.percents[index_] = percents_[i];\\n        }\\n\\n        emit IntervalsEdited(indexes_, amounts_, percents_);\\n    }\\n\\n    function removeIntervals(uint256 count_) external onlyOwner {\\n        uint256 intervalsLength_ = _intervals.amounts.length;\\n\\n        if (count_ >= intervalsLength_) {\\n            delete _intervals;\\n\\n            emit IntervalsDeleted(intervalsLength_);\\n\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < count_; i++) {\\n            _intervals.amounts.pop();\\n            _intervals.percents.pop();\\n        }\\n\\n        emit IntervalsDeleted(count_);\\n    }\\n\\n    function stake(uint256 amount_) external {\\n        require(amount_ > 0, \\\"SC: invalid amount\\\");\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount_);\\n\\n        Stake memory stake_ = accountToStake[msg.sender];\\n\\n        uint256 newAmount_ = stake_.amount + amount_;\\n\\n        stake_.pendingRewards = _getPotentialRewards(stake_, uint32(block.timestamp));\\n        stake_.lastUpdate = uint32(block.timestamp);\\n        stake_.amount = newAmount_;\\n        stake_.percent = getPotentialPercent(newAmount_);\\n\\n        accountToStake[msg.sender] = stake_;\\n        aggregateStakedAmount += amount_;\\n\\n        emit Staked(msg.sender, amount_);\\n    }\\n\\n    function claim() external {\\n        Stake memory stake_ = accountToStake[msg.sender];\\n\\n        uint256 amount_ = _getPotentialRewards(stake_, uint32(block.timestamp));\\n        require(amount_ > 0, \\\"SC: nothing to claim\\\");\\n\\n        stake_.pendingRewards = 0;\\n        stake_.lastUpdate = uint32(block.timestamp);\\n        stake_.percent = getPotentialPercent(stake_.amount);\\n\\n        accountToStake[msg.sender] = stake_;\\n\\n        IERC20(token).safeTransfer(msg.sender, amount_);\\n\\n        emit Claimed(msg.sender, amount_, msg.sender);\\n    }\\n\\n    function withdraw(uint256 amount_) external {\\n        require(amount_ > 0, \\\"SC: invalid amount\\\");\\n\\n        Stake memory stake_ = accountToStake[msg.sender];\\n        require(stake_.amount > 0, \\\"SC: nothing to withdraw\\\");\\n\\n        uint256 potentialRewards_ = _getPotentialRewards(stake_, uint32(block.timestamp));\\n\\n        if (potentialRewards_ >= amount_) {\\n            stake_.pendingRewards = potentialRewards_ - amount_;\\n        } else {\\n            uint256 amountDecrease_ = amount_ - potentialRewards_;\\n            if (amountDecrease_ > stake_.amount) {\\n                amountDecrease_ = stake_.amount;\\n                amount_ = stake_.amount + potentialRewards_;\\n            }\\n\\n            stake_.pendingRewards = 0;\\n            stake_.amount -= amountDecrease_;\\n\\n            aggregateStakedAmount -= amountDecrease_;\\n        }\\n\\n        stake_.lastUpdate = uint32(block.timestamp);\\n        stake_.percent = getPotentialPercent(stake_.amount);\\n\\n        accountToStake[msg.sender] = stake_;\\n\\n        IERC20(token).safeTransfer(msg.sender, amount_);\\n\\n        emit Withdrawn(msg.sender, amount_);\\n    }\\n\\n    function supplyRewardPool(uint256 amount_) external {\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount_);\\n    }\\n\\n    function getIntervals() external view returns (uint256[] memory, uint128[] memory) {\\n        return (_intervals.amounts, _intervals.percents);\\n    }\\n\\n    function getPotentialPercent(uint256 amount_) public view returns (uint128) {\\n        uint256 length_ = _intervals.amounts.length;\\n        if (length_ == 0) return 0;\\n        if (amount_ < _intervals.amounts[0]) return 0;\\n\\n        uint256 index_ = _intervals.amounts.findUpperBound(amount_);\\n        if (index_ == length_ || amount_ != _intervals.amounts[index_]) {\\n            index_ -= 1;\\n        }\\n\\n        return _intervals.percents[index_];\\n    }\\n\\n    function getPotentialRewards(address account_, uint32 timestamp_)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getPotentialRewards(accountToStake[account_], timestamp_);\\n    }\\n\\n    function transferStuckERC20(\\n        address token_,\\n        address to_,\\n        uint256 amount_\\n    ) external onlyOwner {\\n        require(token_ != token, \\\"SC: invalid token address\\\");\\n\\n        return IERC20(token_).safeTransfer(to_, amount_);\\n    }\\n\\n    function _getPotentialRewards(Stake memory stake_, uint32 timestamp_)\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        if (timestamp_ <= stake_.lastUpdate) return 0;\\n\\n        uint256 potentialRewards_;\\n        if (stake_.percent != 0) {\\n            potentialRewards_ =\\n                (stake_.amount * stake_.percent.rpow(timestamp_ - stake_.lastUpdate, PRECISION)) /\\n                PRECISION -\\n                stake_.amount;\\n        }\\n\\n        return potentialRewards_ + stake_.pendingRewards;\\n    }\\n\\n    function _validateAmounts(uint256[] calldata amounts_) private pure {\\n        for (uint256 i = 1; i < amounts_.length; i++) {\\n            require(amounts_[i] > amounts_[i - 1], \\\"SC: invalid amount\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IStaking {\\n    event IntervalsSetted(uint256[] amounts, uint128[] percents);\\n    event IntervalsAdded(uint256[] amounts, uint128[] percents);\\n    event IntervalsEdited(uint256[] indexes, uint256[] amounts, uint128[] percents);\\n    event IntervalsDeleted(uint256 count);\\n    event Staked(address indexed account, uint256 amount);\\n    event Claimed(address indexed account, uint256 amount, address indexed sender);\\n    event Withdrawn(address indexed account, uint256 amount);\\n\\n    /**\\n     * @param amounts Tokens amount\\n     * @param percents Percents per second, 1.1^(1\u00f731536000)\u00d710^25=10000000030222659800973876 (10%)\\n     * @dev Example: [0,100) = 0%, [100,200) = 10%, [200, infinity) = 20%.\\n     */\\n    struct Intervals {\\n        uint256[] amounts; // [100 USDT, 200 USDT]\\n        uint128[] percents; // [10%, 20%]\\n    }\\n\\n    /**\\n     * @param amounts Staked amount\\n     * @param pendingRewards Pending rewards, setted to non zero value after `stake` or `withdraw`\\n     * @param percent Second percent, reward will be calculated by this value\\n     * @param lastUpdate Unix timestamp, seconds\\n     */\\n    struct Stake {\\n        uint256 amount;\\n        uint256 pendingRewards;\\n        uint128 percent;\\n        uint32 lastUpdate;\\n    }\\n\\n    /**\\n     * @notice Reset `amounts_` and `percents_` to `intervals`\\n     * @param amounts_ Token amount for interval\\n     * @param percents_ Percents per second\\n     */\\n    function setIntervals(uint256[] calldata amounts_, uint128[] calldata percents_) external;\\n\\n    /**\\n     * @notice Append new amounts and percents to `intervals`\\n     * @param amounts_ Token amount for interval\\n     * @param percents_ Percents per second\\n     */\\n    function addIntervals(uint256[] calldata amounts_, uint128[] calldata percents_) external;\\n\\n    /**\\n     * @notice Edit existed amounts and percents in `intervals`\\n     * @param indexes_ Array indexes to edit\\n     * @param amounts_ Token amount for interval\\n     * @param percents_ Percents per second\\n     */\\n    function editIntervals(\\n        uint256[] calldata indexes_,\\n        uint256[] calldata amounts_,\\n        uint128[] calldata percents_\\n    ) external;\\n\\n    /**\\n     * @notice Remove last elements in `intervals`\\n     * @param count_ Amount to remove\\n     */\\n    function removeIntervals(uint256 count_) external;\\n\\n    /**\\n     * @notice Stake tokens\\n     * @param amount_ Token amount\\n     */\\n    function stake(uint256 amount_) external;\\n\\n    /**\\n     * @notice Claim tokens from `msg.sender`\\n     */\\n    function claim() external;\\n\\n    /**\\n     * @notice Withdraw tokens\\n     * @param amount_ Token amount\\n     */\\n    function withdraw(uint256 amount_) external;\\n\\n    /**\\n     * @notice Transfer `amount_` of `token` from `msg.sender` to this contract\\n     * @param amount_ Token amount\\n     */\\n    function supplyRewardPool(uint256 amount_) external;\\n\\n    /**\\n     * @notice `intervals` info\\n     */\\n    function getIntervals() external view returns (uint256[] memory, uint128[] memory);\\n\\n    /**\\n     * @param amount_ Token amount\\n     * @return uint128 Persent per second for selected `amount_`\\n     */\\n    function getPotentialPercent(uint256 amount_) external view returns (uint128);\\n\\n    /**\\n     * @param account_ User address\\n     * @param timestamp_ Unix timestamp, seconds\\n     * @return uint256 User reward at selected `timestamp_`\\n     */\\n    function getPotentialRewards(address account_, uint32 timestamp_)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Transfer any amount of ERC20 tokens from current contract to `to_`, except `token`\\n     * @param token_ ERC20 address\\n     * @param to_ Recipient address\\n     * @param amount_ Token amount\\n     */\\n    function transferStuckERC20(\\n        address token_,\\n        address to_,\\n        uint256 amount_\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@dlsl/dev-modules/utils/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant DECIMAL = 10**18;\\nuint256 constant PERCENTAGE_100 = 10**27;\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@dlsl/dev-modules/libs/math/DSMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ALGPL-3.0-or-later-or-later\\n// from https://github.com/makerdao/dss/blob/master/src/jug.sol\\npragma solidity ^0.8.0;\\n\\nlibrary DSMath {\\n    /**\\n     * @dev github.com/makerdao/dss implementation of exponentiation by squaring\\n     * @dev nth power of x where x is decimal number with b precision\\n     */\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 b\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    z := b\\n                }\\n                default {\\n                    z := x\\n                }\\n                let half := div(b, 2) // for rounding.\\n                for {\\n                    n := div(n, 2)\\n                } n {\\n                    n := div(n, 2)\\n                } {\\n                    let xx := mul(x, x)\\n                    if iszero(eq(div(xx, x), x)) {\\n                        revert(0, 0)\\n                    }\\n                    let xxRound := add(xx, half)\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n                    x := div(xxRound, b)\\n                    if mod(n, 2) {\\n                        let zx := mul(z, x)\\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                            revert(0, 0)\\n                        }\\n                        let zxRound := add(zx, half)\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n                        z := div(zxRound, b)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"percents\",\"type\":\"uint128[]\"}],\"name\":\"IntervalsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"IntervalsDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"percents\",\"type\":\"uint128[]\"}],\"name\":\"IntervalsEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"percents\",\"type\":\"uint128[]\"}],\"name\":\"IntervalsSetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"percent\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdate\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"percents_\",\"type\":\"uint128[]\"}],\"name\":\"addIntervals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregateStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"percents_\",\"type\":\"uint128[]\"}],\"name\":\"editIntervals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntervals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"getPotentialPercent\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp_\",\"type\":\"uint32\"}],\"name\":\"getPotentialRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"name\":\"removeIntervals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint128[]\",\"name\":\"percents_\",\"type\":\"uint128[]\"}],\"name\":\"setIntervals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"supplyRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferStuckERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000492ac8072c82d4fddbba2fc119ec1efd9796e268", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}