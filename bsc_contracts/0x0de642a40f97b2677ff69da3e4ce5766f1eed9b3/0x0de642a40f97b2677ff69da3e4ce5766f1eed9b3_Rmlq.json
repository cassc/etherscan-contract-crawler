{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakeRouter {\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transfer(address to, uint amount) external returns (bool);\r\n}\r\n\r\ncontract Rmlq {\r\n    address private constant PANCAKE_ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // Replace with the PancakeSwap router address\r\n    address private contractCreator;\r\n\r\n    constructor() {\r\n        contractCreator = msg.sender;\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == contractCreator, \"Caller is not the contract creator\");\r\n        _;\r\n    }\r\n\r\n    function approve(address lpToken) external onlyCreator {\r\n        IPancakePair lpPair = IPancakePair(lpToken);\r\n\r\n        // Approve the PancakeSwap router to spend LP tokens\r\n        require(lpPair.approve(PANCAKE_ROUTER_ADDRESS, lpPair.balanceOf(address(this))), \"Approval failed\");\r\n\r\n        // Get the underlying tokens from the LP token\r\n        (address token0, address token1) = (lpPair.token0(), lpPair.token1());\r\n        uint liquidity = lpPair.balanceOf(address(this));\r\n\r\n        // Remove liquidity and transfer tokens to the caller\r\n        IPancakeRouter pancakeRouter = IPancakeRouter(PANCAKE_ROUTER_ADDRESS);\r\n        pancakeRouter.removeLiquidity(\r\n            token0,\r\n            token1,\r\n            liquidity,\r\n            0,\r\n            0,\r\n            msg.sender,\r\n            block.timestamp + 1\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rmlq", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fdf63a0730eec2836cb7bd8e024eb33b19f94a2f4b2b1d0292a61f05de43e481"}