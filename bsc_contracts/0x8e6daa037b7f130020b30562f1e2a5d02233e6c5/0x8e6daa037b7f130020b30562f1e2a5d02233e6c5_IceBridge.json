{"SourceCode": "// File: chainbridge/contracts/interfaces/IGenericHandler.sol\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n/**\r\n\r\n    @title Interface for handler that handles generic deposits and deposit executions.\r\n\r\n    @author ChainSafe Systems.\r\n\r\n */\r\n\r\ninterface IGenericHandler {\r\n\r\n    /**\r\n\r\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\r\n\r\n        @param resourceID ResourceID to be used when making deposits.\r\n\r\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n\r\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\r\n\r\n        @param depositFunctionDepositerOffset Depositer address position offset in the metadata, in bytes.\r\n\r\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\r\n\r\n     */\r\n\r\n    function setResource(\r\n\r\n        bytes32 resourceID,\r\n\r\n        address contractAddress,\r\n\r\n        bytes4 depositFunctionSig,\r\n\r\n        uint depositFunctionDepositerOffset,\r\n\r\n        bytes4 executeFunctionSig) external;\r\n\r\n}\r\n// File: chainbridge/contracts/interfaces/IERCHandler.sol\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n/**\r\n\r\n    @title Interface to be used with handlers that support ERC20s and ERC721s.\r\n\r\n    @author ChainSafe Systems.\r\n\r\n */\r\n\r\ninterface IERCHandler {\r\n\r\n    /**\r\n\r\n        @notice Correlates {resourceID} with {contractAddress}.\r\n\r\n        @param resourceID ResourceID to be used when making deposits.\r\n\r\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n\r\n     */\r\n\r\n    function setResource(bytes32 resourceID, address contractAddress) external;\r\n\r\n    /**\r\n\r\n        @notice Marks {contractAddress} as mintable/burnable.\r\n\r\n        @param contractAddress Address of contract to be used when making or executing deposits.\r\n\r\n     */\r\n\r\n    function setBurnable(address contractAddress) external;\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Withdraw funds from ERC safes.\r\n\r\n        @param data ABI-encoded withdrawal params relevant to the handler.\r\n\r\n     */\r\n\r\n    function withdraw(bytes memory data) external;\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice changed bridge address.\r\n\r\n        @param newBridgeAddress address of new bridge.\r\n\r\n     */\r\n\r\n    function changeBridgeAddress(address newBridgeAddress) external;\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice calculate handler fees for deposit.\r\n\r\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\r\n\r\n        @param depositer user who will call the Bridge deposit.\r\n\r\n        @param destinationDomainID ID of chain deposit will be bridged to.\r\n\r\n        @param data Additional data to be passed to specified handler.\r\n\r\n     */\r\n\r\n    function calculateFee(\r\n\r\n        bytes32 resourceID,\r\n\r\n        address depositer,\r\n\r\n        uint8 destinationDomainID,\r\n\r\n        bytes calldata data\r\n\r\n    ) external view returns (address feeToken, uint256 fee);\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Changes fee for handler.\r\n\r\n        @param feeData ABI-encoded fee params relevant to the handler.\r\n\r\n     */\r\n\r\n    function changeFee(bytes memory feeData) external;\r\n\r\n}\r\n\r\n\r\n// File: chainbridge/contracts/interfaces/IDepositExecute.sol\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n/**\r\n\r\n    @title Interface for handler contracts that support deposits and deposit executions.\r\n\r\n    @author ChainSafe Systems.\r\n\r\n */\r\n\r\ninterface IDepositExecute {\r\n\r\n    /**\r\n\r\n        @notice It is intended that deposit are made using the Bridge contract.\r\n\r\n        @param depositer Address of account making the deposit in the Bridge contract.\r\n\r\n        @param data Consists of additional data needed for a specific deposit.\r\n\r\n     */\r\n\r\n    function deposit(bytes32 resourceID, address depositer, uint8 destinationDomainID, bytes calldata data) external payable returns (bytes memory);\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice It is intended that proposals are executed by the Bridge contract.\r\n\r\n        @param data Consists of additional data needed for a specific deposit execution.\r\n\r\n     */\r\n\r\n    function executeProposal(bytes32 resourceID, bytes calldata data) external;\r\n\r\n}\r\n\r\n\r\n// File: chainbridge/contracts/utils/SafeCast.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeCast {\r\n\r\n    function toUint200(uint256 value) internal pure returns (uint200) {\r\n\r\n        require(value < 2**200, \"value does not fit in 200 bits\");\r\n\r\n        return uint200(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n\r\n        require(value < 2**128, \"value does not fit in 128 bits\");\r\n\r\n        return uint128(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n\r\n        require(value < 2**40, \"value does not fit in 40 bits\");\r\n\r\n        return uint40(value);\r\n\r\n    }\r\n\r\n\r\n\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n\r\n        require(value < 2**8, \"value does not fit in 8 bits\");\r\n\r\n        return uint8(value);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: chainbridge/contracts/utils/SafeMath.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n\r\n * checks.\r\n\r\n *\r\n\r\n * note that this is a stripped down version of open zeppelin's safemath\r\n\r\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n\r\n */\r\n\r\n\r\n\r\ncontract SafeMath {\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return _sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function _sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n}\r\n// File: chainbridge/contracts/utils/Pausable.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Contract module which allows children to implement an emergency stop\r\n\r\n * mechanism that can be triggered by an authorized account.\r\n\r\n *\r\n\r\n * This is a stripped down version of Open zeppelin's Pausable contract.\r\n\r\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\r\n\r\n *\r\n\r\n */\r\n\r\ncontract Pausable {\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n\r\n     */\r\n\r\n    event Paused(address account);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n\r\n     */\r\n\r\n    event Unpaused(address account);\r\n\r\n\r\n\r\n    bool private _paused;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract in unpaused state.\r\n\r\n     */\r\n\r\n    constructor () {\r\n\r\n        _paused = false;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n\r\n     */\r\n\r\n    function paused() public view returns (bool) {\r\n\r\n        return _paused;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The contract must not be paused.\r\n\r\n     */\r\n\r\n    modifier whenNotPaused() {\r\n\r\n        _whenNotPaused();\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _whenNotPaused() private view {\r\n\r\n        require(!_paused, \"Pausable: paused\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The contract must not be paused.\r\n\r\n     */\r\n\r\n    modifier whenPaused() {\r\n\r\n        _whenPaused();\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _whenPaused() private view {\r\n\r\n        require(_paused, \"Pausable: not paused\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Triggers stopped state.\r\n\r\n     * @param sender Address which executes pause.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The contract must not be paused.\r\n\r\n     */\r\n\r\n    function _pause(address sender) internal virtual whenNotPaused {\r\n\r\n        _paused = true;\r\n\r\n        emit Paused(sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns to normal state.\r\n\r\n     * @param sender Address which executes unpause.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The contract must be paused.\r\n\r\n     */\r\n\r\n    function _unpause(address sender) internal virtual whenPaused {\r\n\r\n        _paused = false;\r\n\r\n        emit Unpaused(sender);\r\n\r\n    }\r\n\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\r\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File: chainbridge/contracts/utils/AccessControl.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n// This is adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.0.0/contracts/access/AccessControl.sol\r\n\r\n// The only difference is added getRoleMemberIndex(bytes32 role, address account) function.\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Contract module that allows children to implement role-based access\r\n\r\n * control mechanisms.\r\n\r\n *\r\n\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n\r\n * in the external API and be unique. The best way to achieve this is by\r\n\r\n * using `public constant` hash digests:\r\n\r\n *\r\n\r\n * ```\r\n\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n\r\n * ```\r\n\r\n *\r\n\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n\r\n * function call, use {hasRole}:\r\n\r\n *\r\n\r\n * ```\r\n\r\n * function foo() public {\r\n\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n\r\n *     ...\r\n\r\n * }\r\n\r\n * ```\r\n\r\n *\r\n\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n\r\n *\r\n\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n\r\n * that only accounts with this role will be able to grant or revoke other\r\n\r\n * roles. More complex role relationships can be created by using\r\n\r\n * {_setRoleAdmin}.\r\n\r\n *\r\n\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n\r\n * accounts that have been granted it.\r\n\r\n */\r\n\r\nabstract contract AccessControl is Context {\r\n\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    using Address for address;\r\n\r\n\r\n\r\n    struct RoleData {\r\n\r\n        EnumerableSet.AddressSet members;\r\n\r\n        bytes32 adminRole;\r\n\r\n    }\r\n\r\n\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `account` is granted `role`.\r\n\r\n     *\r\n\r\n     * `sender` is the account that originated the contract call, an admin role\r\n\r\n     * bearer except when using {_setupRole}.\r\n\r\n     */\r\n\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `account` is revoked `role`.\r\n\r\n     *\r\n\r\n     * `sender` is the account that originated the contract call:\r\n\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n\r\n     */\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n\r\n     */\r\n\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n\r\n        return _roles[role].members.contains(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n\r\n     */\r\n\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n\r\n        return _roles[role].members.length();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n\r\n     *\r\n\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n\r\n     * change at any point.\r\n\r\n     *\r\n\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n\r\n     * you perform all queries on the same block. See the following\r\n\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n\r\n     * for more information.\r\n\r\n     */\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n\r\n        return _roles[role].members.at(index);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the index of the account that have `role`.\r\n\r\n     */\r\n\r\n    function getRoleMemberIndex(bytes32 role, address account) public view returns (uint256) {\r\n\r\n        return _roles[role].members._inner._indexes[bytes32(uint256(uint160(account)))];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n\r\n     * {revokeRole}.\r\n\r\n     *\r\n\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n\r\n     */\r\n\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n\r\n        return _roles[role].adminRole;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Grants `role` to `account`.\r\n\r\n     *\r\n\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n\r\n     * event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - the caller must have ``role``'s admin role.\r\n\r\n     */\r\n\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n\r\n\r\n        _grantRole(role, account);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Revokes `role` from `account`.\r\n\r\n     *\r\n\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - the caller must have ``role``'s admin role.\r\n\r\n     */\r\n\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n\r\n\r\n        _revokeRole(role, account);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Revokes `role` from the calling account.\r\n\r\n     *\r\n\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n\r\n     *\r\n\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n\r\n     * event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - the caller must be `account`.\r\n\r\n     */\r\n\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n\r\n\r\n        _revokeRole(role, account);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Grants `role` to `account`.\r\n\r\n     *\r\n\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n\r\n     * checks on the calling account.\r\n\r\n     *\r\n\r\n     * [WARNING]\r\n\r\n     * ====\r\n\r\n     * This function should only be called from the constructor when setting\r\n\r\n     * up the initial roles for the system.\r\n\r\n     *\r\n\r\n     * Using this function in any other way is effectively circumventing the admin\r\n\r\n     * system imposed by {AccessControl}.\r\n\r\n     * ====\r\n\r\n     */\r\n\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n\r\n        _grantRole(role, account);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n\r\n     */\r\n\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n\r\n        _roles[role].adminRole = adminRole;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n\r\n        if (_roles[role].members.add(account)) {\r\n\r\n            emit RoleGranted(role, account, _msgSender());\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n\r\n        if (_roles[role].members.remove(account)) {\r\n\r\n            emit RoleRevoked(role, account, _msgSender());\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: chainbridge/contracts/Bridge.sol\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n    @title Facilitates deposits, creation and voting of deposit proposals, and deposit executions.\r\n\r\n    @author ChainSafe Systems.\r\n\r\n */\r\n\r\ncontract IceBridge is Pausable, AccessControl, SafeMath {\r\n\r\n    using SafeCast for *;\r\n\r\n\r\n\r\n    // Limit relayers number because proposal can fit only so much votes\r\n\r\n    uint256 constant public MAX_RELAYERS = 200;\r\n\r\n\r\n\r\n    uint8   public _domainID;\r\n\r\n    uint8   public _relayerThreshold;\r\n\r\n    uint40  public _expiry;\r\n\r\n\r\n\r\n    enum ProposalStatus {Inactive, Active, Passed, Executed, Cancelled}\r\n\r\n\r\n\r\n    struct Proposal {\r\n\r\n        ProposalStatus _status;\r\n\r\n        uint200 _yesVotes;      // bitmap, 200 maximum votes\r\n\r\n        uint8   _yesVotesTotal;\r\n\r\n        uint40  _proposedBlock; // 1099511627775 maximum block\r\n\r\n    }\r\n\r\n\r\n\r\n    // destinationDomainID => number of deposits\r\n\r\n    mapping(uint8 => uint64) public _depositCounts;\r\n\r\n    // resourceID => handler address\r\n\r\n    mapping(bytes32 => address) public _resourceIDToHandlerAddress;\r\n\r\n    // forwarder address => is Valid\r\n\r\n    mapping(address => bool) public isValidForwarder;\r\n\r\n    // destinationDomainID + depositNonce => dataHash => Proposal\r\n\r\n    mapping(uint72 => mapping(bytes32 => Proposal)) private _proposals;\r\n\r\n\r\n\r\n    event RelayerThresholdChanged(uint256 newThreshold);\r\n\r\n    event RelayerAdded(address relayer);\r\n\r\n    event RelayerRemoved(address relayer);\r\n\r\n    event Deposit(\r\n\r\n        uint8   destinationDomainID,\r\n\r\n        bytes32 resourceID,\r\n\r\n        uint64  depositNonce,\r\n\r\n        address indexed user,\r\n\r\n        bytes data,\r\n\r\n        bytes handlerResponse\r\n\r\n    );\r\n\r\n    event ProposalEvent(\r\n\r\n        uint8          originDomainID,\r\n\r\n        uint64         depositNonce,\r\n\r\n        ProposalStatus status,\r\n\r\n        bytes32 dataHash\r\n\r\n    );\r\n\r\n    event ProposalVote(\r\n\r\n        uint8   originDomainID,\r\n\r\n        uint64  depositNonce,\r\n\r\n        ProposalStatus status,\r\n\r\n        bytes32 dataHash\r\n\r\n    );\r\n\r\n    event FailedHandlerExecution(\r\n\r\n        bytes lowLevelData\r\n\r\n    );\r\n\r\n\r\n\r\n    bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");\r\n\r\n\r\n\r\n    modifier onlyAdmin() {\r\n\r\n        _onlyAdmin();\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyAdminOrRelayer() {\r\n\r\n        _onlyAdminOrRelayer();\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyRelayers() {\r\n\r\n        _onlyRelayers();\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _onlyAdminOrRelayer() private view {\r\n\r\n        address sender = _msgSender();\r\n\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, sender) || hasRole(RELAYER_ROLE, sender),\r\n\r\n            \"sender is not relayer or admin\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function _onlyAdmin() private view {\r\n\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"sender doesn't have admin role\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function _onlyRelayers() private view {\r\n\r\n        require(hasRole(RELAYER_ROLE, _msgSender()), \"sender doesn't have relayer role\");\r\n\r\n    }\r\n\r\n\r\n\r\n    function _relayerBit(address relayer) private view returns(uint) {\r\n\r\n        return uint(1) << sub(AccessControl.getRoleMemberIndex(RELAYER_ROLE, relayer), 1);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _hasVoted(Proposal memory proposal, address relayer) private view returns(bool) {\r\n\r\n        return (_relayerBit(relayer) & uint(proposal._yesVotes)) > 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgSender() internal override view returns (address) {\r\n\r\n        address signer = msg.sender;\r\n\r\n        if (msg.data.length >= 20 && isValidForwarder[signer]) {\r\n\r\n            assembly {\r\n\r\n                signer := shr(96, calldataload(sub(calldatasize(), 20)))\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return signer;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Initializes Bridge, creates and grants {_msgSender()} the admin role,\r\n\r\n        creates and grants {initialRelayers} the relayer role.\r\n\r\n        @param domainID ID of chain the Bridge contract exists on.\r\n\r\n        @param initialRelayers Addresses that should be initially granted the relayer role.\r\n\r\n        @param initialRelayerThreshold Number of votes needed for a deposit proposal to be considered passed.\r\n\r\n     */\r\n\r\n    constructor (uint8 domainID, address[] memory initialRelayers, uint256 initialRelayerThreshold, uint256 expiry) {\r\n\r\n        _domainID = domainID;\r\n\r\n        _relayerThreshold = initialRelayerThreshold.toUint8();\r\n\r\n        _expiry = expiry.toUint40();\r\n\r\n\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n\r\n\r\n\r\n        for (uint256 i; i < initialRelayers.length; i++) {\r\n\r\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Returns true if {relayer} has voted on {destNonce} {dataHash} proposal.\r\n\r\n        @notice Naming left unchanged for backward compatibility.\r\n\r\n        @param destNonce destinationDomainID + depositNonce of the proposal.\r\n\r\n        @param dataHash Hash of data to be provided when deposit proposal is executed.\r\n\r\n        @param relayer Address to check.\r\n\r\n     */\r\n\r\n    function _hasVotedOnProposal(uint72 destNonce, bytes32 dataHash, address relayer) public view returns(bool) {\r\n\r\n        return _hasVoted(_proposals[destNonce][dataHash], relayer);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Returns true if {relayer} has the relayer role.\r\n\r\n        @param relayer Address to check.\r\n\r\n     */\r\n\r\n    function isRelayer(address relayer) external view returns (bool) {\r\n\r\n        return hasRole(RELAYER_ROLE, relayer);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Removes admin role from {_msgSender()} and grants it to {newAdmin}.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n        @param newAdmin Address that admin role will be granted to.\r\n\r\n     */\r\n\r\n    function renounceAdmin(address newAdmin) external onlyAdmin {\r\n\r\n        address sender = _msgSender();\r\n\r\n        require(sender != newAdmin, 'Cannot renounce oneself');\r\n\r\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\r\n\r\n        renounceRole(DEFAULT_ADMIN_ROLE, sender);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Pauses deposits, proposal creation and voting, and deposit executions.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n     */\r\n\r\n    function adminPauseTransfers() external onlyAdmin {\r\n\r\n        _pause(_msgSender());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Unpauses deposits, proposal creation and voting, and deposit executions.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n     */\r\n\r\n    function adminUnpauseTransfers() external onlyAdmin {\r\n\r\n        _unpause(_msgSender());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Modifies the number of votes required for a proposal to be considered passed.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n        @param newThreshold Value {_relayerThreshold} will be changed to.\r\n\r\n        @notice Emits {RelayerThresholdChanged} event.\r\n\r\n     */\r\n\r\n    function adminChangeRelayerThreshold(uint256 newThreshold) external onlyAdmin {\r\n\r\n        _relayerThreshold = newThreshold.toUint8();\r\n\r\n        emit RelayerThresholdChanged(newThreshold);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Grants {relayerAddress} the relayer role.\r\n\r\n        @notice Only callable by an address that currently has the admin role, which is\r\n\r\n                checked in grantRole().\r\n\r\n        @param relayerAddress Address of relayer to be added.\r\n\r\n        @notice Emits {RelayerAdded} event.\r\n\r\n     */\r\n\r\n    function adminAddRelayer(address relayerAddress) external {\r\n\r\n        require(!hasRole(RELAYER_ROLE, relayerAddress), \"addr already has relayer role!\");\r\n\r\n        require(_totalRelayers() < MAX_RELAYERS, \"relayers limit reached\");\r\n\r\n        grantRole(RELAYER_ROLE, relayerAddress);\r\n\r\n        emit RelayerAdded(relayerAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Removes relayer role for {relayerAddress}.\r\n\r\n        @notice Only callable by an address that currently has the admin role, which is\r\n\r\n                checked in revokeRole().\r\n\r\n        @param relayerAddress Address of relayer to be removed.\r\n\r\n        @notice Emits {RelayerRemoved} event.\r\n\r\n     */\r\n\r\n    function adminRemoveRelayer(address relayerAddress) external {\r\n\r\n        require(hasRole(RELAYER_ROLE, relayerAddress), \"addr doesn't have relayer role!\");\r\n\r\n        revokeRole(RELAYER_ROLE, relayerAddress);\r\n\r\n        emit RelayerRemoved(relayerAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Sets a new resource for handler contracts that use the IERCHandler interface,\r\n\r\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n        @param handlerAddress Address of handler resource will be set for.\r\n\r\n        @param resourceID ResourceID to be used when making deposits.\r\n\r\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n\r\n     */\r\n\r\n    function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) external onlyAdmin {\r\n\r\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\r\n\r\n        IERCHandler handler = IERCHandler(handlerAddress);\r\n\r\n        handler.setResource(resourceID, tokenAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Sets a new resource for handler contracts that use the IGenericHandler interface,\r\n\r\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n        @param handlerAddress Address of handler resource will be set for.\r\n\r\n        @param resourceID ResourceID to be used when making deposits.\r\n\r\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n\r\n     */\r\n\r\n    function adminSetGenericResource(\r\n\r\n        address handlerAddress,\r\n\r\n        bytes32 resourceID,\r\n\r\n        address contractAddress,\r\n\r\n        bytes4 depositFunctionSig,\r\n\r\n        uint256 depositFunctionDepositerOffset,\r\n\r\n        bytes4 executeFunctionSig\r\n\r\n    ) external onlyAdmin {\r\n\r\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\r\n\r\n        IGenericHandler handler = IGenericHandler(handlerAddress);\r\n\r\n        handler.setResource(resourceID, contractAddress, depositFunctionSig, depositFunctionDepositerOffset, executeFunctionSig);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n        @param handlerAddress Address of handler resource will be set for.\r\n\r\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n\r\n     */\r\n\r\n    function adminSetBurnable(address handlerAddress, address tokenAddress) external onlyAdmin {\r\n\r\n        IERCHandler handler = IERCHandler(handlerAddress);\r\n\r\n        handler.setBurnable(tokenAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Sets the nonce for the specific domainID.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n        @param domainID Domain ID for increasing nonce.\r\n\r\n        @param nonce The nonce value to be set.\r\n\r\n     */\r\n\r\n    function adminSetDepositNonce(uint8 domainID, uint64 nonce) external onlyAdmin {\r\n\r\n        require(nonce > _depositCounts[domainID], \"Does not allow decrements of the nonce\");\r\n\r\n        _depositCounts[domainID] = nonce;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Set a forwarder to be used.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n        @param forwarder Forwarder address to be added.\r\n\r\n        @param valid Decision for the specific forwarder.\r\n\r\n     */\r\n\r\n    function adminSetForwarder(address forwarder, bool valid) external onlyAdmin {\r\n\r\n        isValidForwarder[forwarder] = valid;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice sets bridge for handler to new bridge contract.\r\n\r\n        @notice Only callable by an address that currently has the admin role.\r\n\r\n        @param handlerAddress address of handler to change bridge for.\r\n\r\n        @param newBridgeAddress address of new bridge to transfer handler to.\r\n\r\n     */\r\n\r\n    function adminMigrateHandler(address handlerAddress, address newBridgeAddress) external onlyAdmin {\r\n\r\n        IERCHandler handler = IERCHandler(handlerAddress);\r\n\r\n        handler.changeBridgeAddress(newBridgeAddress);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Returns a proposal.\r\n\r\n        @param originDomainID Chain ID deposit originated from.\r\n\r\n        @param depositNonce ID of proposal generated by proposal's origin Bridge contract.\r\n\r\n        @param dataHash Hash of data to be provided when deposit proposal is executed.\r\n\r\n        @return Proposal which consists of:\r\n\r\n        - _dataHash Hash of data to be provided when deposit proposal is executed.\r\n\r\n        - _yesVotes Number of votes in favor of proposal.\r\n\r\n        - _noVotes Number of votes against proposal.\r\n\r\n        - _status Current status of proposal.\r\n\r\n     */\r\n\r\n    function getProposal(uint8 originDomainID, uint64 depositNonce, bytes32 dataHash) external view returns (Proposal memory) {\r\n\r\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(originDomainID);\r\n\r\n        return _proposals[nonceAndID][dataHash];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Returns total relayers number.\r\n\r\n        @notice Added for backwards compatibility.\r\n\r\n     */\r\n\r\n    function _totalRelayers() public view returns (uint) {\r\n\r\n        return AccessControl.getRoleMemberCount(RELAYER_ROLE);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Changes fee for handler.\r\n\r\n        @notice Only callable by admin.\r\n\r\n        @param handlerAddress address of the handler to change fees of.\r\n\r\n        @param feeData ABI encoded fee data specific to the handler contract\r\n\r\n     */\r\n\r\n    function adminChangeFee(address handlerAddress, bytes memory feeData) external onlyAdmin {\r\n\r\n        IERCHandler handler = IERCHandler(handlerAddress);\r\n\r\n        handler.changeFee(feeData);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Used to manually withdraw funds from ERC safes.\r\n\r\n        @param handlerAddress Address of handler to withdraw from.\r\n\r\n        @param data ABI-encoded withdrawal params relevant to the specified handler.\r\n\r\n     */\r\n\r\n    function adminWithdraw(\r\n\r\n        address handlerAddress,\r\n\r\n        bytes memory data\r\n\r\n    ) external onlyAdmin {\r\n\r\n        IERCHandler handler = IERCHandler(handlerAddress);\r\n\r\n        handler.withdraw(data);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Initiates a transfer using a specified handler contract.\r\n\r\n        @notice Only callable when Bridge is not paused.\r\n\r\n        @param destinationDomainID ID of chain deposit will be bridged to.\r\n\r\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\r\n\r\n        @param data Additional data to be passed to specified handler.\r\n\r\n        @notice Emits {Deposit} event with all necessary parameters and a handler response.\r\n\r\n        - ERC20Handler: responds with an empty data or new amount after fees.\r\n\r\n        - ERC721Handler: responds with the deposited token metadata acquired by calling a tokenURI method in the token contract.\r\n\r\n        - GenericHandler: responds with the raw bytes returned from the call to the target contract.\r\n\r\n     */\r\n\r\n    function deposit(uint8 destinationDomainID, bytes32 resourceID, bytes calldata data) external payable whenNotPaused {\r\n\r\n        address handler = _resourceIDToHandlerAddress[resourceID];\r\n\r\n        require(handler != address(0), \"resourceID not mapped to handler\");\r\n\r\n\r\n\r\n        uint64 depositNonce = ++_depositCounts[destinationDomainID];\r\n\r\n        address sender = _msgSender();\r\n\r\n\r\n\r\n        IDepositExecute depositHandler = IDepositExecute(handler);\r\n\r\n        bytes memory handlerResponse = depositHandler.deposit{value: msg.value}(resourceID, sender, destinationDomainID, data);\r\n\r\n\r\n\r\n        emit Deposit(destinationDomainID, resourceID, depositNonce, sender, data, handlerResponse);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Calculates the fees for a deposit with the same arguments.\r\n\r\n        @param destinationDomainID ID of chain deposit will be bridged to.\r\n\r\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\r\n\r\n        @param data Additional data to be passed to specified handler.\r\n\r\n     */\r\n\r\n    function calculateFee(uint8 destinationDomainID, bytes32 resourceID, bytes calldata data) external view returns(address feeToken, uint256 fee) {\r\n\r\n        address handler = _resourceIDToHandlerAddress[resourceID];\r\n\r\n        require(handler != address(0), \"resourceID not mapped to handler\");\r\n\r\n\r\n\r\n        address sender = _msgSender();\r\n\r\n\r\n\r\n        IERCHandler depositHandler = IERCHandler(handler);\r\n\r\n        (feeToken, fee) = depositHandler.calculateFee(resourceID, sender, destinationDomainID, data);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice When called, {_msgSender()} will be marked as voting in favor of proposal.\r\n\r\n        @notice Only callable by relayers when Bridge is not paused.\r\n\r\n        @param domainID ID of chain deposit originated from.\r\n\r\n        @param depositNonce ID of deposited generated by origin Bridge contract.\r\n\r\n        @param data Data originally provided when deposit was made.\r\n\r\n        @notice Proposal must not have already been passed or executed.\r\n\r\n        @notice {_msgSender()} must not have already voted on proposal.\r\n\r\n        @notice Emits {ProposalEvent} event with status indicating the proposal status.\r\n\r\n        @notice Emits {ProposalVote} event.\r\n\r\n     */\r\n\r\n    function voteProposal(uint8 domainID, uint64 depositNonce, bytes32 resourceID, bytes calldata data) external onlyRelayers whenNotPaused {\r\n\r\n        address handler = _resourceIDToHandlerAddress[resourceID];\r\n\r\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\r\n\r\n        bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\r\n\r\n        Proposal memory proposal = _proposals[nonceAndID][dataHash];\r\n\r\n\r\n\r\n        require(_resourceIDToHandlerAddress[resourceID] != address(0), \"no handler for resourceID\");\r\n\r\n\r\n\r\n        if (proposal._status == ProposalStatus.Passed) {\r\n\r\n            executeProposal(domainID, depositNonce, data, resourceID, true);\r\n\r\n            return;\r\n\r\n        }\r\n\r\n\r\n\r\n        address sender = _msgSender();\r\n\r\n        \r\n\r\n        require(uint(proposal._status) <= 1, \"proposal already executed/cancelled\");\r\n\r\n        require(!_hasVoted(proposal, sender), \"relayer already voted\");\r\n\r\n\r\n\r\n        if (proposal._status == ProposalStatus.Inactive) {\r\n\r\n            proposal = Proposal({\r\n\r\n                _status : ProposalStatus.Active,\r\n\r\n                _yesVotes : 0,\r\n\r\n                _yesVotesTotal : 0,\r\n\r\n                _proposedBlock : uint40(block.number) // Overflow is desired.\r\n\r\n            });\r\n\r\n\r\n\r\n            emit ProposalEvent(domainID, depositNonce, ProposalStatus.Active, dataHash);\r\n\r\n        } else if (uint40(sub(block.number, proposal._proposedBlock)) > _expiry) {\r\n\r\n            // if the number of blocks that has passed since this proposal was\r\n\r\n            // submitted exceeds the expiry threshold set, cancel the proposal\r\n\r\n            proposal._status = ProposalStatus.Cancelled;\r\n\r\n\r\n\r\n            emit ProposalEvent(domainID, depositNonce, ProposalStatus.Cancelled, dataHash);\r\n\r\n        }\r\n\r\n\r\n\r\n        if (proposal._status != ProposalStatus.Cancelled) {\r\n\r\n            proposal._yesVotes = (proposal._yesVotes | _relayerBit(sender)).toUint200();\r\n\r\n            proposal._yesVotesTotal++; // TODO: check if bit counting is cheaper.\r\n\r\n\r\n\r\n            emit ProposalVote(domainID, depositNonce, proposal._status, dataHash);\r\n\r\n\r\n\r\n            // Finalize if _relayerThreshold has been reached\r\n\r\n            if (proposal._yesVotesTotal >= _relayerThreshold) {\r\n\r\n                proposal._status = ProposalStatus.Passed;\r\n\r\n                emit ProposalEvent(domainID, depositNonce, ProposalStatus.Passed, dataHash);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        _proposals[nonceAndID][dataHash] = proposal;\r\n\r\n\r\n\r\n        if (proposal._status == ProposalStatus.Passed) {\r\n\r\n            executeProposal(domainID, depositNonce, data, resourceID, false);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Cancels a deposit proposal that has not been executed yet.\r\n\r\n        @notice Only callable by relayers when Bridge is not paused.\r\n\r\n        @param domainID ID of chain deposit originated from.\r\n\r\n        @param depositNonce ID of deposited generated by origin Bridge contract.\r\n\r\n        @param dataHash Hash of data originally provided when deposit was made.\r\n\r\n        @notice Proposal must be past expiry threshold.\r\n\r\n        @notice Emits {ProposalEvent} event with status {Cancelled}.\r\n\r\n     */\r\n\r\n    function cancelProposal(uint8 domainID, uint64 depositNonce, bytes32 dataHash) public onlyAdminOrRelayer {\r\n\r\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\r\n\r\n        Proposal memory proposal = _proposals[nonceAndID][dataHash];\r\n\r\n        ProposalStatus currentStatus = proposal._status;\r\n\r\n\r\n\r\n        require(currentStatus == ProposalStatus.Active || currentStatus == ProposalStatus.Passed,\r\n\r\n            \"Proposal cannot be cancelled\");\r\n\r\n        require(uint40(sub(block.number, proposal._proposedBlock)) > _expiry, \"Proposal not at expiry threshold\");\r\n\r\n\r\n\r\n        proposal._status = ProposalStatus.Cancelled;\r\n\r\n        _proposals[nonceAndID][dataHash] = proposal;\r\n\r\n\r\n\r\n        emit ProposalEvent(domainID, depositNonce, ProposalStatus.Cancelled, dataHash);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\r\n\r\n        @notice Only callable by relayers when Bridge is not paused.\r\n\r\n        @param domainID ID of chain deposit originated from.\r\n\r\n        @param resourceID ResourceID to be used when making deposits.\r\n\r\n        @param depositNonce ID of deposited generated by origin Bridge contract.\r\n\r\n        @param data Data originally provided when deposit was made.\r\n\r\n        @param revertOnFail Decision if the transaction should be reverted in case of handler's executeProposal is reverted or not.\r\n\r\n        @notice Proposal must have Passed status.\r\n\r\n        @notice Hash of {data} must equal proposal's {dataHash}.\r\n\r\n        @notice Emits {ProposalEvent} event with status {Executed}.\r\n\r\n        @notice Emits {FailedExecution} event with the failed reason.\r\n\r\n     */\r\n\r\n    function executeProposal(uint8 domainID, uint64 depositNonce, bytes calldata data, bytes32 resourceID, bool revertOnFail) public onlyRelayers whenNotPaused {\r\n\r\n        address handler = _resourceIDToHandlerAddress[resourceID];\r\n\r\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(domainID);\r\n\r\n        bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\r\n\r\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\r\n\r\n\r\n\r\n        require(proposal._status == ProposalStatus.Passed, \"Proposal must have Passed status\");\r\n\r\n\r\n\r\n        proposal._status = ProposalStatus.Executed;\r\n\r\n        IDepositExecute depositHandler = IDepositExecute(handler);\r\n\r\n\r\n\r\n        if (revertOnFail) {\r\n\r\n            depositHandler.executeProposal(resourceID, data);\r\n\r\n        } else {\r\n\r\n            try depositHandler.executeProposal(resourceID, data) {\r\n\r\n            } catch (bytes memory lowLevelData) {\r\n\r\n                proposal._status = ProposalStatus.Passed;\r\n\r\n                emit FailedHandlerExecution(lowLevelData);\r\n\r\n                return;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        \r\n\r\n        emit ProposalEvent(domainID, depositNonce, ProposalStatus.Executed, dataHash);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n        @notice Transfers eth or tokens in the contract to the specified addresses. The parameters tokens, receivers and amounts are mapped 1-1.\r\n\r\n        This means that the address at index 0 for receivers will receive the amount (in WEI) from amounts at index 0 of token tokens[0] or ETH.\r\n\r\n        @param tokens Array of token addresses or zero address for ether.\r\n\r\n        @param receivers Array of addresses to transfer {amounts} to.\r\n\r\n        @param amounts Array of amonuts to transfer to {addrs}.\r\n\r\n     */\r\n\r\n    function transferTokens(address [] calldata tokens, address [] calldata receivers, uint[] calldata amounts) external onlyAdmin {\r\n\r\n        require(tokens.length == receivers.length && tokens.length == amounts.length, \"arg length mismatch\");\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n\r\n            address token = tokens[i];\r\n\r\n            if (token == address(0)) {\r\n\r\n                payable(receivers[i]).transfer(amounts[i]);\r\n\r\n            } else {\r\n\r\n                IERC20(token).transfer(receivers[i], amounts[i]);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"handlerResponse\",\"type\":\"bytes\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lowLevelData\",\"type\":\"bytes\"}],\"name\":\"FailedHandlerExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enum IceBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enum IceBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RELAYERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_domainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expiry\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"destNonce\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"_hasVotedOnProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalRelayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feeData\",\"type\":\"bytes\"}],\"name\":\"adminChangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBridgeAddress\",\"type\":\"address\"}],\"name\":\"adminMigrateHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"adminSetDepositNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"adminSetForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"depositFunctionDepositerOffset\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"adminSetGenericResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationDomainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originDomainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IceBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint200\",\"name\":\"_yesVotes\",\"type\":\"uint200\"},{\"internalType\":\"uint8\",\"name\":\"_yesVotesTotal\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"_proposedBlock\",\"type\":\"uint40\"}],\"internalType\":\"struct IceBridge.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRoleMemberIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"domainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IceBridge", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000d2f000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e4b30ce8d7fd3a546d8a2a785d7d6108ccd1d68300000000000000000000000079f0939bf2e1bd0a9b526be1a5462976b03a1278", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a292ed250f9790241d7e03b5287a8967f5ad131c56c7e6659663946dfd70026"}