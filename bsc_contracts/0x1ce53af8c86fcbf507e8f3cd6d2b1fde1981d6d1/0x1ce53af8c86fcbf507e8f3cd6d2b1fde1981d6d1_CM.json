{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Tiger Studio\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IDividendPool {\r\n    function addTokenRewardBuy(uint256 rewardAmount) external;\r\n\r\n    function addTokenRewardSell(uint256 rewardAmount) external;\r\n}\r\n\r\ninterface ISonToken {\r\n    function _mainPair() external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) public _lockLPAmount;\r\n    mapping(address => uint256) public _lpAmount;\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 public _buyLPFee = 100;\r\n    uint256 public _buyStudioNFTFee = 100;\r\n    uint256 public _buyCMMPoolFee = 100;\r\n\r\n    uint256 public _sellLPFee = 100;\r\n    uint256 public _sellPartnerNFTFee = 100;\r\n    uint256 public _sellCMMPoolFee = 100;\r\n\r\n    uint256 public startTradeBlock;\r\n    address public immutable _usdt;\r\n    address public immutable _mainPair;\r\n\r\n    uint256 public _releaseLPStartTime;\r\n    uint256 public _releaseLPDailyDuration = 1 days;\r\n    uint256 public _releaseLPDailyRate = 100;\r\n\r\n    address public _CMM;\r\n    address public _CMMPool; //sontoken pool\r\n    address public _CMRouter;\r\n\r\n    uint256 public _limitAmount;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        address RouterAddress,\r\n        address UsdtAddress,\r\n        string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply,\r\n        address ReceiveAddress,\r\n        address CMRouter,\r\n        address CMM,\r\n        uint256 LimitAmount\r\n    ) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        _usdt = UsdtAddress;\r\n        IERC20(UsdtAddress).approve(address(swapRouter), MAX);\r\n        address pair = swapFactory.createPair(address(this), UsdtAddress);\r\n        _swapPairList[pair] = true;\r\n        _mainPair = pair;\r\n\r\n        uint256 tokenUnit = 10**Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        _CMRouter = CMRouter;\r\n        _CMM = CMM;\r\n        _CMMPool = ISonToken(CMM)._mainPair();\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[CMRouter] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n        _feeWhiteList[\r\n            address(0x648F900C8dF3526B4A18Ed5842E92e728D6428C0)\r\n        ] = true;\r\n        _limitAmount = LimitAmount * tokenUnit;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setFee(uint256[] memory fees) public onlyOwner {\r\n        _buyLPFee = fees[0];\r\n        _buyStudioNFTFee = fees[1];\r\n        _buyCMMPoolFee = fees[2];\r\n\r\n        _sellLPFee = fees[3];\r\n        _sellPartnerNFTFee = fees[4];\r\n        _sellCMMPoolFee = fees[5];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"BNE\");\r\n\r\n        bool takeFee;\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount;\r\n            uint256 remainAmount = 10**(_decimals - 6);\r\n            if (balance > remainAmount) {\r\n                maxSellAmount = balance - remainAmount;\r\n            }\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                _lpAmount[from] += addLPLiquidity;\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            if (removeLPLiquidity > 0) {\r\n                (\r\n                    uint256 lpAmount,\r\n                    uint256 lpLockAmount,\r\n                    uint256 releaseAmount,\r\n                    uint256 lpBalance\r\n                ) = getUserInfo(to);\r\n                if (lpLockAmount > 0) {\r\n                    require(\r\n                        lpBalance + releaseAmount >= lpLockAmount,\r\n                        \"rq Lock\"\r\n                    );\r\n                }\r\n                require(lpAmount >= removeLPLiquidity, \">userLP\");\r\n                _lpAmount[to] -= removeLPLiquidity;\r\n            }\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock, \"!T\");\r\n                takeFee = true;\r\n                if (addLPLiquidity > 0) {\r\n                    takeFee = false;\r\n                }\r\n                if (removeLPLiquidity > 0) {\r\n                    takeFee = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (takeFee && block.number < startTradeBlock + delayTime) {\r\n            _killTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        uint256 limitAmount = _limitAmount;\r\n        if (limitAmount > 0) {\r\n            //Hold Limit\r\n            if (!_feeWhiteList[to] && !_swapPairList[to]) {\r\n                require(limitAmount >= balanceOf(to), \"Limit\");\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 delayTime = 5;\r\n\r\n    function setdelayTime(uint256 amount) public onlyOwner {\r\n        delayTime = amount;\r\n    }\r\n\r\n    function minusLPAmount(address account, uint256 amount) public {\r\n        require(_CMRouter == msg.sender, \"rq DividendPool\");\r\n        (\r\n            uint256 lpAmount,\r\n            uint256 lpLockAmount,\r\n            uint256 releaseAmount,\r\n            uint256 lpBalance\r\n        ) = getUserInfo(account);\r\n        if (lpLockAmount > 0) {\r\n            require(lpBalance + releaseAmount >= lpLockAmount, \"rq Lock\");\r\n        }\r\n        require(lpAmount >= amount, \">userLP\");\r\n        _lpAmount[account] -= amount;\r\n    }\r\n\r\n    function addLPAmount(address account, uint256 amount) public {\r\n        require(_CMRouter == msg.sender, \"rq DividendPool\");\r\n        _lpAmount[account] += amount;\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256 liquidity)\r\n    {\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = (amount * rOther) / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity, ) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply *\r\n                        (rootK - rootKLast) *\r\n                        8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 rOther,\r\n            uint256 rThis,\r\n            uint256 balanceOther\r\n        )\r\n    {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n    function _isRemoveLiquidity(uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256 liquidity)\r\n    {\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity =\r\n                (amount * ISwapPair(_mainPair).totalSupply() + 1) /\r\n                (balanceOf(_mainPair) - amount - 1);\r\n        }\r\n    }\r\n\r\n    function _killTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = (tAmount * 99) / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            address(0x000000000000000000000000000000000000dEaD),\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            if (_swapPairList[sender]) {\r\n                //Buy\r\n                uint256 buyLPFeeAmount = (tAmount * _buyLPFee) / 10000;\r\n                if (buyLPFeeAmount > 0 && _CMRouter != address(0)) {\r\n                    feeAmount += buyLPFeeAmount;\r\n                }\r\n                uint256 buyStudioNFTFeeAmount = (tAmount * _buyStudioNFTFee) /\r\n                    10000;\r\n                if (buyStudioNFTFeeAmount > 0 && _CMRouter != address(0)) {\r\n                    feeAmount += buyStudioNFTFeeAmount;\r\n                }\r\n                if (feeAmount > 0) {\r\n                    _takeTransfer(sender, address(_CMRouter), feeAmount);\r\n                    IDividendPool(_CMRouter).addTokenRewardBuy(feeAmount);\r\n                }\r\n\r\n                uint256 buyCMMPoolFeeAmount = (tAmount * _buyCMMPoolFee) /\r\n                    10000;\r\n                if (buyCMMPoolFeeAmount > 0) {\r\n                    feeAmount += buyCMMPoolFeeAmount;\r\n                    _takeTransfer(sender, address(this), buyCMMPoolFeeAmount);\r\n                }\r\n            } else if (_swapPairList[recipient]) {\r\n                //Sell\r\n                uint256 sellLPFeeAmount = (tAmount * _sellLPFee) / 10000;\r\n                if (sellLPFeeAmount > 0 && _CMRouter != address(0)) {\r\n                    feeAmount += sellLPFeeAmount;\r\n                }\r\n                uint256 sellPartnerNFTFeeAmount = (tAmount *\r\n                    _sellPartnerNFTFee) / 10000;\r\n                if (sellPartnerNFTFeeAmount > 0 && _CMRouter != address(0)) {\r\n                    feeAmount += sellPartnerNFTFeeAmount;\r\n                }\r\n                if (feeAmount > 0) {\r\n                    _takeTransfer(sender, address(_CMRouter), feeAmount);\r\n                    IDividendPool(_CMRouter).addTokenRewardSell(feeAmount);\r\n                }\r\n                uint256 sellCMMPoolFeeAmount = (tAmount * _sellCMMPoolFee) /\r\n                    10000;\r\n                if (sellCMMPoolFeeAmount > 0 && _CMMPool != address(0)) {\r\n                    feeAmount += sellCMMPoolFeeAmount;\r\n                    _takeTransfer(sender, address(this), sellCMMPoolFeeAmount);\r\n                    if (!inSwap) {\r\n                        swapTokenForFund();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    uint256 public lastBuyCMM;\r\n    uint256 public interval = 21600;\r\n\r\n    function setInterval(uint256 i) public onlyOwner {\r\n        interval = i;\r\n    }\r\n\r\n    function swapTokenForFund() private lockTheSwap {\r\n        uint256 tokenAmount = balanceOf(address(this));\r\n        if (tokenAmount == 0 || _CMMPool == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 tokenAmountPool = tokenAmount;\r\n\r\n        if (lastBuyCMM + interval < block.timestamp) {\r\n            tokenAmountPool = (tokenAmount * 9999) / 10000;\r\n        }\r\n        // address distributor = address(_CMMPool);\r\n        address usdt = _usdt;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmountPool,\r\n            0,\r\n            path,\r\n            _CMMPool,\r\n            block.timestamp\r\n        );\r\n        ISwapPair(_CMMPool).sync();\r\n        address[] memory pathson = new address[](3);\r\n        pathson[0] = address(this);\r\n        pathson[1] = usdt;\r\n        pathson[2] = _CMM;\r\n        uint256 tokenAmountBuy = tokenAmount - tokenAmountPool;\r\n        if (tokenAmountBuy > 0)\r\n            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmountBuy,\r\n                0,\r\n                pathson,\r\n                ISonToken(_CMM).owner(),\r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setCMRouterAddress(address addr, address CMM) external onlyOwner {\r\n        _CMM = CMM;\r\n        _CMMPool = ISonToken(CMM)._mainPair();\r\n        _CMRouter = addr;\r\n        _feeWhiteList[addr] = true;\r\n        _feeWhiteList[_CMMPool] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address[] memory addr, bool enable)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"T\");\r\n        startTradeBlock = block.number;\r\n        _releaseLPStartTime = block.timestamp;\r\n        lastBuyCMM = block.timestamp;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public {\r\n        if (\r\n            _feeWhiteList[msg.sender] &&\r\n            (_CMRouter == msg.sender || _owner == msg.sender)\r\n        ) {\r\n            _lpAmount[account] = lpAmount;\r\n        }\r\n    }\r\n\r\n    function updateLPLockAmount(address account, uint256 lockAmount) public {\r\n        if (\r\n            _feeWhiteList[msg.sender] &&\r\n            (_CMRouter == msg.sender || _owner == msg.sender)\r\n        ) {\r\n            _lockLPAmount[account] = lockAmount;\r\n        }\r\n    }\r\n\r\n    function initLPLockAmounts(address[] memory accounts, uint256 lpAmount)\r\n        public\r\n    {\r\n        if (\r\n            _feeWhiteList[msg.sender] &&\r\n            (_CMRouter == msg.sender || _owner == msg.sender)\r\n        ) {\r\n            uint256 len = accounts.length;\r\n            for (uint256 i; i < len; ) {\r\n                _lpAmount[accounts[i]] = lpAmount;\r\n                _lockLPAmount[accounts[i]] = lpAmount;\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function initLPLockAmountsSend(address[] memory accounts, uint256 lpAmount)\r\n        public\r\n    {\r\n        if (\r\n            _feeWhiteList[msg.sender] &&\r\n            (_CMRouter == msg.sender || _owner == msg.sender)\r\n        ) {\r\n            uint256 len = accounts.length;\r\n            for (uint256 i; i < len; ) {\r\n                _lpAmount[accounts[i]] = lpAmount;\r\n                _lockLPAmount[accounts[i]] = lpAmount;\r\n                IERC20(_mainPair).transfer(accounts[i], lpAmount);\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address account)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 lpAmount,\r\n            uint256 lpLockAmount,\r\n            uint256 releaseAmount,\r\n            uint256 lpBalance\r\n        )\r\n    {\r\n        // UserInfo storage userInfo = _userInfo[account];\r\n        lpAmount = _lpAmount[account];\r\n\r\n        lpLockAmount = _lockLPAmount[account];\r\n        if (_releaseLPStartTime > 0) {\r\n            uint256 times = (block.timestamp - _releaseLPStartTime) /\r\n                _releaseLPDailyDuration;\r\n            releaseAmount =\r\n                (lpLockAmount * (1 + times) * _releaseLPDailyRate) /\r\n                10000;\r\n            if (releaseAmount > lpLockAmount) {\r\n                releaseAmount = lpLockAmount;\r\n            }\r\n        }\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n    }\r\n\r\n    function setDailyDuration(uint256 d) external onlyOwner {\r\n        _releaseLPDailyDuration = d;\r\n    }\r\n\r\n    function setReleaseLPDailyRate(uint256 rate) external onlyOwner {\r\n        _releaseLPDailyRate = rate;\r\n    }\r\n\r\n    function getLPInfo()\r\n        public\r\n        view\r\n        returns (uint256 totalLP, uint256 lpUAmount)\r\n    {\r\n        totalLP = IERC20(_mainPair).totalSupply();\r\n        lpUAmount = IERC20(_usdt).balanceOf(_mainPair) * 2;\r\n    }\r\n}\r\n\r\n// TEST:0xF3b43a7922Fa4d506AE83f39B18Ae36a8E6de763   USDT\uff1a   0x55d398326f99059fF775485246999027B3197955\r\n//0xD99D1c33F9fC3444f8101754aBC46c52416550D1 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\ncontract CM is AbsToken {\r\n    constructor()\r\n        AbsToken(\r\n            //SwapRouter\r\n            address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n            //USDT\r\n            address(0x55d398326f99059fF775485246999027B3197955),\r\n            \"CM\",\r\n            \"CM\",\r\n            18,\r\n            10000,\r\n            //Receive\r\n            msg.sender,\r\n            //CMRouter\r\n            address(0),\r\n            //_CMM\r\n            address(0x6D22C8c003ecee438DaaB082F3B8f51965E0B5Ac),\r\n            //Limit\r\n            10\r\n        )\r\n    {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CMM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CMMPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CMRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyCMMPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyStudioNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lockLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPDailyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPDailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_releaseLPStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellCMMPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellPartnerNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpUAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpLockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPLockAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPLockAmountsSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBuyCMM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"minusLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"CMM\",\"type\":\"address\"}],\"name\":\"setCMRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setDailyDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"setInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setReleaseLPDailyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setdelayTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPLockAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CM", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b0eaa59fca594bbd727b4ece2aacd1dd01ec0cd59a6341c0a59adb50ab0851c"}