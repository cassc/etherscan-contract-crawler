{"SourceCode": "/*\r\nBabyRat $BRAT\r\n                                                                                                                                                                     \r\n                             ,@Mg                                               \r\n                           ,@||]L*g                                             \r\n                          ,R|||jK  %,                                           \r\n                          @||||j@   'N    ,m*\"\"\"    \"\"\"Mmg,           ,,,       \r\n                         ]F|||||@     ]w*`                 \"m,     ,gP  'K      \r\n                         $||||||]L     '                     `%,,m\"`     $      \r\n                         $L |||||%                             ]g        $      \r\n                         '@|||| ||%,                            \"g     |jF      \r\n                          \"%,| ,F''\"N                            ]w    ,P       \r\n                            '*@\"                                  @  ,@\"        \r\n                             $`                                   $gM`          \r\n                         ,,,g@,,         g]@@L                    ]             \r\n                            $     '*w    \"MM*            $g@@      @            \r\n                           ,$W*****Mw           @\"```\"%p '*M*      ]            \r\n                        '',mM@                  \"@g||g@'         \"`]F`'\"*x,     \r\n                       ,A\"   \"K               *NmN$M@,,g         \"\"@*w,         \r\n                     gF        \"w                \"**``            @     *,      \r\n                   gF                                           gP        \"     \r\n                 ,P                                         ,gM\"                \r\n                gF                             ||||\"\"***\"\"\"`]W                  \r\n               )F   ,mmmmg,           j            |||||||||'$N,                \r\n               @ ,@\" ,,,  `\"N          %g,                |  ]W]N               \r\n              ]F @ |$\"  \"*g  ]g           \"-'$#Mg         |  @,|j@              \r\n              $  $ |%wgg   $  ]W            '$FgwF        | |}@&g@              \r\n              $   *wwwM    ]L |$            @P\"           |||]Pg\"               \r\n              ]            ]L |$         ,gM'                @P'                \r\n      ,gwwmmMMM@          gC |jM\"*MmmmNM\"\"``                @                   \r\n  gM\"-   ,;|;||]g       g&`|||M                           ,@                    \r\n $`   #|gN*\"\"\"\"\"\"N, ,gN*.,||@`                      || | gP                     \r\n %,    \"Mwg,,,,gwm*\"` ,;|gM`                     ||||',g$,                      \r\n  \"@gLL,,      ,,,;;g@NN@gggwwWmNNNNWwg '        ,,gNM||'*M@]L                  \r\n     '\"*MNNNNNMM*\"\"       %,,,gW,,,$gg@P````\"````\"*MMMMMM*\"\"`                   \r\n                                 `'                                             \r\n                                                                                    \r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint amountA,\r\n            uint amountB,\r\n            uint liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountDCMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint amountToken,\r\n            uint amountDC,\r\n            uint liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountDCMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountDC);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountDCMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountDC);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountDCMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountDC);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDexPair {\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function sync() external;\r\n}\r\n\r\ncontract DividendDistributor {\r\n\r\n    address _mainToken;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n    IERC20 TOKEN;\r\n    address ETH;\r\n    IDEXRouter router;\r\n\r\n    address[] public shareholders;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n    mapping (address => uint256) public shareholderClaims;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1000000 * (10 ** 9);\r\n    uint256 public gas = 500000;\r\n    \r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _mainToken || _mainToken == address(0)); _;\r\n    }\r\n\r\n    constructor (address routerAddress, address _reflectionToken) {\r\n        router = IDEXRouter(routerAddress);\r\n        TOKEN = IERC20(_reflectionToken);\r\n        ETH = router.WETH();\r\n        _mainToken = msg.sender;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _gas) external onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n        gas = _gas;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external onlyToken {\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n        \r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n        \r\n        totalShares = (totalShares - shares[shareholder].amount) + amount;\r\n        shares[shareholder].amount = amount;\r\n        \r\n        shares[shareholder].totalExcluded = getCumulativeDividends(amount);\r\n    }\r\n\r\n    function deposit() external payable {\r\n        bool native = address(TOKEN) == address(0);\r\n        uint256 balanceBefore = native ? address(this).balance : TOKEN.balanceOf(address(this));\r\n\r\n        if (!native) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = ETH;\r\n            path[1] = address(TOKEN);\r\n\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        uint256 amount = native ? msg.value : TOKEN.balanceOf(address(this)) - balanceBefore;\r\n\r\n        totalDividends = totalDividends + amount;\r\n        dividendsPerShare = dividendsPerShare + (dividendsPerShareAccuracyFactor * amount) / totalShares;\r\n    }\r\n\r\n    function process() public onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n            \r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n    \r\n    function getClaimTime(address shareholder) external view returns (uint256) {\r\n        if (shareholderClaims[shareholder] + minPeriod <= block.timestamp)\r\n            return 0;\r\n        else\r\n            return (shareholderClaims[shareholder] + minPeriod) - block.timestamp;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n        \r\n        uint256 unpaidEarnings = getUnpaidEarnings(shareholder);\r\n        if(unpaidEarnings > 0){\r\n            uint256 previousExcluded = shares[shareholder].totalExcluded;\r\n\r\n            totalDistributed += unpaidEarnings;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised += unpaidEarnings;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n\r\n            if(address(TOKEN) == address(0)) {\r\n                (bool sent, ) = shareholder.call{value: unpaidEarnings}(\"\");\r\n                if (!sent) {\r\n                    totalDistributed -= unpaidEarnings;\r\n                    shares[shareholder].totalRealised -= unpaidEarnings;\r\n                    shares[shareholder].totalExcluded = previousExcluded;\r\n                }\r\n            } else {\r\n                TOKEN.transfer(shareholder, unpaidEarnings);\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimDividend(address shareholder) external onlyToken {\r\n        distributeDividend(shareholder);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n    \r\n    function getPaidDividends(address shareholder) external view returns (uint256) {\r\n        return shares[shareholder].totalRealised;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        if(share == 0){ return 0; }\r\n        return (share * dividendsPerShare) / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function countShareholders() external view returns (uint256) {\r\n        return shareholders.length;\r\n    }\r\n    \r\n    function getTotalRewarded() external view returns (uint256) {\r\n        return totalDistributed;\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\ninterface IAntiSnipe {\r\n  function setTokenOwner(address owner, address pair) external;\r\n\r\n  function onPreTransferCheck(\r\n    address sender,\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external returns (bool checked);\r\n}\r\n\r\ncontract BabyRat is IERC20, Ownable {\r\n    using Address for address;\r\n    \r\n    address ETH;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    string constant _name = \"BabyRat\";\r\n    string constant _symbol = \"BRAT\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 100_000_000 * (10 ** _decimals);\r\n    uint256 _maxBuyTxAmount = (_totalSupply * 1) / 500;\r\n    uint256 _maxSellTxAmount = (_totalSupply * 1) / 500;\r\n    uint256 _maxWalletSize = (_totalSupply * 1) / 200;\r\n    uint256 minimumBalance = 1;\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isDividendExempt;\r\n    mapping (address => bool) liquidityCreator;\r\n\r\n    mapping (address => bool) public whitelist;\r\n    bool public whitelistEnabled = true;\r\n\r\n    uint256 marketingFee = 100;\r\n    uint256 marketingSellFee = 200;\r\n    uint256 rewardsFee = 0;\r\n    uint256 rewardsSellFee = 0;\r\n    uint256 liquidityFee = 100;\r\n    uint256 liquiditySellFee = 200;\r\n    uint256 teamFee = 0;\r\n    uint256 teamSellFee = 0;\r\n    uint256 totalBuyFee = marketingFee + liquidityFee + teamFee + rewardsFee;\r\n    uint256 totalSellFee = marketingSellFee + liquiditySellFee + teamSellFee + rewardsSellFee;\r\n    uint256 feeDenominator = 10000;\r\n\r\n    address public liquidityFeeReceiver = DEAD;\r\n    address payable teamFeeReceiver;\r\n    address payable marketingFeeReceiver;\r\n\r\n    IDEXRouter public router;\r\n    address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    mapping (address => bool) liquidityPools;\r\n\r\n    address public pair;\r\n\r\n    uint256 public launchedAt;\r\n    uint256 public launchedTime;\r\n    uint256 public deadBlocks;\r\n    bool startBullRun = false;\r\n\r\n    IAntiSnipe public antisnipe;\r\n    bool public protectionEnabled = true;\r\n    bool public protectionDisabled = false;\r\n\r\n    DividendDistributor public rewards;\r\n    bool public autoProcess = true;\r\n\r\n    mapping (address => address) public stakedIn;\r\n\r\n    bool public swapEnabled = false;\r\n    uint256 public swapThreshold = _totalSupply / 400;\r\n    uint256 public swapMinimum = _totalSupply / 10000;\r\n    uint256 public maxSwapPercent = 75;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor (address _newOwner, address _marketing, address _team) {\r\n        isFeeExempt[_newOwner] = true;\r\n        liquidityCreator[_newOwner] = true;\r\n        _allowances[_newOwner][routerAddress] = type(uint256).max;\r\n        _allowances[address(this)][routerAddress] = type(uint256).max;\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[_newOwner] = true;\r\n        isTxLimitExempt[routerAddress] = true;\r\n\r\n        isDividendExempt[_newOwner] = true;\r\n        isDividendExempt[routerAddress] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[address(0)] = true;\r\n\r\n        uint256 half = _totalSupply * 50 / 100;\r\n        _balances[_newOwner] = half;\r\n        _balances[DEAD] = _totalSupply - half;\r\n\r\n        rewards = new DividendDistributor(routerAddress, address(0));\r\n\r\n        marketingFeeReceiver = payable(_marketing);\r\n        isFeeExempt[_marketing] = true;\r\n        isTxLimitExempt[_marketing] = true;\r\n        teamFeeReceiver = payable(_team);\r\n\r\n        emit Transfer(address(0), _newOwner, half);\r\n        emit Transfer(address(0), DEAD, _totalSupply - half);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure returns (uint8) { return _decimals; }\r\n    function symbol() external pure returns (string memory) { return _symbol; }\r\n    function name() external pure returns (string memory) { return _name; }\r\n    function getOwner() external view returns (address) { return owner(); }\r\n    function maxBuyTxTokens() external view returns (uint256) { return _maxBuyTxAmount / (10 ** _decimals); }\r\n    function maxSellTxTokens() external view returns (uint256) { return _maxSellTxAmount / (10 ** _decimals); }\r\n    function maxWalletTokens() external view returns (uint256) { return _maxWalletSize / (10 ** _decimals); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function setProtectionEnabled(bool _protect) external onlyOwner {\r\n        if (_protect)\r\n            require(!protectionDisabled);\r\n        protectionEnabled = _protect;\r\n    }\r\n    \r\n    function setProtection(address _protection, bool _call) external onlyOwner {\r\n        if (_protection != address(antisnipe)){\r\n            require(!protectionDisabled);\r\n            antisnipe = IAntiSnipe(_protection);\r\n        }\r\n        if (_call)\r\n            antisnipe.setTokenOwner(address(this), pair);\r\n    }\r\n    \r\n    function disableProtection() external onlyOwner {\r\n        protectionDisabled = true;\r\n    }\r\n    \r\n    function airdrop(address[] memory addresses, uint256[] memory amounts) external onlyOwner {\r\n        require(addresses.length > 0 && addresses.length == amounts.length, \"Length mismatch\");\r\n        address from = msg.sender;\r\n\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            if(!liquidityPools[addresses[i]] && !liquidityCreator[addresses[i]]) {\r\n                _transferFrom(from, addresses[i], amounts[i] * (10 ** _decimals));\r\n            }\r\n        }\r\n    }\r\n    \r\n    function launch(uint256 _deadBlocks, bool _whitelistMode) external payable onlyOwner {\r\n        require(!startBullRun && _deadBlocks < 7);\r\n        require(msg.value > 0, \"Insufficient funds\");\r\n        uint256 toLP = msg.value;\r\n\r\n        router = IDEXRouter(routerAddress);\r\n        IDEXFactory factory = IDEXFactory(router.factory());\r\n        ETH = router.WETH();\r\n\r\n        pair = factory.getPair(ETH, address(this));\r\n        if(pair == address(0))\r\n            pair = factory.createPair(ETH, address(this));\r\n\r\n        liquidityPools[pair] = true;\r\n        isDividendExempt[pair] = true;\r\n\r\n        isFeeExempt[address(this)] = true;\r\n        liquidityCreator[address(this)] = true;\r\n\r\n        router.addLiquidityETH{value: toLP}(address(this),balanceOf(address(this)),0,0,msg.sender,block.timestamp);\r\n\r\n        deadBlocks = _whitelistMode ? 0 : _deadBlocks;\r\n        startBullRun = !_whitelistMode;\r\n        whitelistEnabled = _whitelistMode;\r\n        launchedAt = block.number;\r\n        launchedTime = block.timestamp;\r\n    }\r\n\r\n    function endWhitelist(uint256 _deadBlocks) external onlyOwner {\r\n        require(!startBullRun && _deadBlocks < 7);\r\n        deadBlocks = _deadBlocks;\r\n        startBullRun = true;\r\n        whitelistEnabled = false;\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function extractTokens() external onlyOwner {\r\n        require(!startBullRun);\r\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\r\n    }\r\n\r\n    function setAutoProcess(bool _enabled) external onlyOwner {\r\n        autoProcess = _enabled;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(amount > 0, \"No tokens sent\");\r\n        require(sender != address(0) && recipient != address(0), \"invalid transfer address\");\r\n        require(_balances[sender] >= amount, \"Insufficient balance\");\r\n        if(!launched() && liquidityPools[recipient]){ require(liquidityCreator[sender], \"Liquidity not added yet.\"); launch(); }\r\n        if(!startBullRun){ require(liquidityCreator[sender] || liquidityCreator[recipient] || whitelist[recipient], \"Trading not open yet.\"); }\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient])\r\n            checkTxLimit(sender, amount);\r\n        \r\n        if (!liquidityPools[recipient] && recipient != DEAD) {\r\n            if (!isTxLimitExempt[recipient]) {\r\n                checkWalletLimit(recipient, amount);\r\n            }\r\n        }\r\n\r\n        _balances[sender] -= amount;\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) && shouldTakeFee(recipient) ? takeFee(recipient, sender, amount) : amount;\r\n        \r\n        if(shouldSwapBack(sender, recipient)){ swapBack(amount); }\r\n        \r\n        _balances[recipient] += amountReceived;\r\n\r\n        if(!liquidityPools[sender] && shouldTakeFee(sender) && minimumBalance > 0 && _balances[sender] == 0) {\r\n            _balances[sender] = minimumBalance;\r\n            _balances[recipient] -= minimumBalance;\r\n        }\r\n\r\n        if (startBullRun && protectionEnabled && shouldTakeFee(sender))\r\n            antisnipe.onPreTransferCheck(msg.sender, sender, recipient, amount);\r\n\r\n        if(!isDividendExempt[sender]){ try rewards.setShare(sender, _balances[sender]) {} catch {} }\r\n        if(!isDividendExempt[recipient]){ try rewards.setShare(recipient, _balances[recipient]) {} catch {} }\r\n\r\n        if(autoProcess) { try rewards.process() {} catch {} }\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        launchedAt = block.number;\r\n        launchedTime = block.timestamp;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\r\n        uint256 walletLimit = _maxWalletSize;\r\n        require(_balances[recipient] + amount <= walletLimit, \"Transfer amount exceeds the bag size.\");\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= (liquidityPools[sender] ? _maxBuyTxAmount : _maxSellTxAmount), \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function getTotalFee(bool selling) public view returns (uint256) {\r\n        if(launchedAt + deadBlocks > block.number){ return feeDenominator - 1; }\r\n        if (selling) return totalSellFee;\r\n        return totalBuyFee;\r\n    }\r\n\r\n    function takeFee(address recipient, address sender, uint256 amount) internal returns (uint256) {\r\n        bool selling = liquidityPools[recipient];\r\n        uint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\r\n        \r\n        _balances[address(this)] += feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount);\r\n    \r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function shouldSwapBack(address sender, address recipient) internal view returns (bool) {\r\n        return !liquidityPools[sender]\r\n        && !inSwap\r\n        && swapEnabled\r\n        && liquidityPools[recipient]\r\n        && !isFeeExempt[sender]\r\n        && _balances[address(this)] >= swapMinimum \r\n        && totalBuyFee + totalSellFee > 0;\r\n    }\r\n\r\n    function swapBack(uint256 amount) internal swapping {\r\n        uint256 totalFee = totalBuyFee + totalSellFee;\r\n        uint256 amountToSwap = amount - (amount * maxSwapPercent / 100) <= swapThreshold ? amount * maxSwapPercent / 100 : swapThreshold;\r\n        if (_balances[address(this)] < amountToSwap) amountToSwap = _balances[address(this)];\r\n        \r\n        uint256 amountToLiquify = ((amountToSwap * (liquidityFee + liquiditySellFee)) / totalFee) / 2;\r\n        amountToSwap -= amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = ETH;\r\n        \r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 balance = address(this).balance;\r\n        uint256 fees = totalFee - ((liquidityFee + liquiditySellFee) / 2);\r\n\r\n        uint256 amountLiquidity = (balance * (liquidityFee + liquiditySellFee)) / fees / 2;\r\n        uint256 amountTeam = (balance * (teamFee + teamSellFee)) / fees;\r\n        uint256 amountRewards = (balance * (rewardsFee + rewardsSellFee)) / fees;\r\n        uint256 amountMarketing = balance - (amountLiquidity + amountTeam + amountRewards);\r\n        \r\n        if (amountTeam > 0) {\r\n            (bool sentTeam, ) = teamFeeReceiver.call{value: amountTeam}(\"\");\r\n            require(sentTeam, \"Failed to transfer to team\");\r\n        }\r\n\r\n        if (amountMarketing > 0) {\r\n            (bool sentMk, ) = marketingFeeReceiver.call{value: amountMarketing}(\"\");\r\n            require(sentMk, \"Failed to transfer to marketing\");\r\n        }\r\n\r\n        if (amountRewards > 0)\r\n            try rewards.deposit{value: amountRewards}() {} catch {}\r\n\r\n        if(amountLiquidity > 0){\r\n            router.addLiquidityETH{value: amountLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                liquidityFeeReceiver,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        emit FundsDistributed(amountLiquidity, amountMarketing, amountTeam);\r\n    }\r\n\r\n    function updateRewards(address _contract) external onlyOwner {\r\n        rewards = DividendDistributor(_contract);\r\n        isFeeExempt[_contract] = true;\r\n        isTxLimitExempt[_contract] = true;\r\n        emit UpdatedSettings('rewards Updated', [Log(toString(abi.encodePacked(_contract)), 1), Log('', 0), Log('', 0)]);\r\n    }\r\n    \r\n    function addLiquidityPool(address lp, bool isPool) external onlyOwner {\r\n        require(lp != pair, \"Can't alter current liquidity pair\");\r\n        liquidityPools[lp] = isPool;\r\n        isDividendExempt[lp] = true;\r\n        emit UpdatedSettings(isPool ? 'Liquidity Pool Enabled' : 'Liquidity Pool Disabled', [Log(toString(abi.encodePacked(lp)), 1), Log('', 0), Log('', 0)]);\r\n    }\r\n    \r\n    function switchRouter(address newRouter) external onlyOwner {\r\n        router = IDEXRouter(newRouter);\r\n        ETH = router.WETH();\r\n        isTxLimitExempt[newRouter] = true;\r\n        emit UpdatedSettings('Exchange Router Updated', [Log(concatenate('New Router: ',toString(abi.encodePacked(newRouter))), 1),Log('', 0), Log('', 0)]);\r\n    }\r\n    \r\n    function setLiquidityCreator(address preSaleAddress) external onlyOwner {\r\n        liquidityCreator[preSaleAddress] = true;\r\n        isTxLimitExempt[preSaleAddress] = true;\r\n        isDividendExempt[preSaleAddress] = true;\r\n        isFeeExempt[preSaleAddress] = true;\r\n        emit UpdatedSettings('Presale Setup', [Log(concatenate('Presale Address: ',toString(abi.encodePacked(preSaleAddress))), 1),Log('', 0), Log('', 0)]);\r\n    }\r\n    \r\n    function getPoolStatistics() external view returns (uint256 totalClaimed, uint256 holders) {\r\n        totalClaimed = rewards.getTotalRewarded();\r\n        holders = rewards.countShareholders();\r\n    }\r\n    \r\n    function getWalletStatistics(address wallet) external view returns (uint256 pending, uint256 claimed) {\r\n\t    pending = rewards.getUnpaidEarnings(wallet);\r\n\t    claimed = rewards.getPaidDividends(wallet);\r\n\t}\r\n\r\n    function resetShares(address shareholder) external onlyOwner {\r\n        if(!isDividendExempt[shareholder]){ rewards.setShare(shareholder, _balances[shareholder]); }\r\n        else rewards.setShare(shareholder, 0);\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(this) && !liquidityPools[holder] && holder != owner());\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            rewards.setShare(holder, 0);\r\n        }else{\r\n            rewards.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 gas) external onlyOwner {\r\n        require(gas < 750000);\r\n        rewards.setDistributionCriteria(_minPeriod, _minDistribution, gas);\r\n    }\r\n\r\n    function setTxLimit(uint256 buyNumerator, uint256 sellNumerator, uint256 divisor) external onlyOwner {\r\n        require(buyNumerator > 0 && sellNumerator > 0 && divisor > 0 && divisor <= 10000);\r\n        _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor;\r\n        _maxSellTxAmount = (_totalSupply * sellNumerator) / divisor;\r\n        emit UpdatedSettings('Maximum Transaction Size', [Log('Max Buy Tokens', _maxBuyTxAmount / (10 ** _decimals)), Log('Max Sell Tokens', _maxSellTxAmount / (10 ** _decimals)), Log('', 0)]);\r\n    }\r\n    \r\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyOwner() {\r\n        require(numerator > 0 && divisor > 0 && divisor <= 10000);\r\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\r\n        emit UpdatedSettings('Maximum Wallet Size', [Log('Tokens', _maxWalletSize / (10 ** _decimals)), Log('', 0), Log('', 0)]);\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n        emit UpdatedSettings(exempt ? 'Fees Removed' : 'Fees Enforced', [Log(toString(abi.encodePacked(holder)), 1), Log('', 0), Log('', 0)]);\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n        emit UpdatedSettings(exempt ? 'Transaction Limit Removed' : 'Transaction Limit Enforced', [Log(toString(abi.encodePacked(holder)), 1), Log('', 0), Log('', 0)]);\r\n    }\r\n\r\n    function updateWhitelist(address[] calldata _addresses, bool _enabled) external onlyOwner {\r\n        require(whitelistEnabled, \"Whitelist disabled\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            whitelist[_addresses[i]] = _enabled;\r\n        }\r\n    }\r\n\r\n    function setFees(uint256 _rewardsFee, uint256 _rewardsSellFee, uint256 _liquidityFee, uint256 _liquiditySellFee, uint256 _marketingFee, uint256 _marketingSellFee, uint256 _teamFee, uint256 _teamSellFee, uint256 _feeDenominator) external onlyOwner {\r\n        rewardsFee = _rewardsFee;\r\n        rewardsSellFee = _rewardsSellFee;\r\n        liquidityFee = _liquidityFee;\r\n        liquiditySellFee = _liquiditySellFee;\r\n        marketingFee = _marketingFee;\r\n        marketingSellFee = _marketingSellFee;\r\n        teamFee = _teamFee;\r\n        teamSellFee = _teamSellFee;\r\n\r\n        totalBuyFee = teamFee + liquidityFee + marketingFee + rewardsFee;\r\n        totalSellFee = teamSellFee + liquiditySellFee + marketingSellFee + rewardsSellFee;\r\n        feeDenominator = _feeDenominator;\r\n\r\n        require((totalBuyFee + totalSellFee) * 100 / feeDenominator <= 15, \"Fees too high\");\r\n\r\n        emit UpdatedSettings('Fees', [Log('Total Buy Fee Percent', totalBuyFee * 100 / feeDenominator), Log('Total Sell Fee Percent', totalSellFee * 100 / feeDenominator), Log('Distribution Percent', (_rewardsFee + _rewardsSellFee) * 100 / feeDenominator)]);\r\n    }\r\n\r\n    function setMinimumBalance(uint256 _minimum) external onlyOwner {\r\n        require(_minimum < 100);\r\n        minimumBalance = _minimum;\r\n        emit UpdatedSettings('Minimum Balance', [Log('Minimum: ', _minimum), Log('', 0), Log('', 0)]);\r\n    }\r\n\r\n    function setFeeReceivers(address _marketingFeeReceiver, address _teamFeeReceiver) external onlyOwner {\r\n        marketingFeeReceiver = payable(_marketingFeeReceiver);\r\n        teamFeeReceiver = payable(_teamFeeReceiver);\r\n\r\n        emit UpdatedSettings('Fee Receivers', [Log(concatenate('Marketing Receiver: ',toString(abi.encodePacked(_marketingFeeReceiver))), 1), Log(concatenate('Team Receiver: ',toString(abi.encodePacked(_teamFeeReceiver))), 1), Log('', 0)]);\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _denominator, uint256 _swapMinimum) external onlyOwner {\r\n        require(_denominator > 0);\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _totalSupply / _denominator;\r\n        swapMinimum = _swapMinimum * (10 ** _decimals);\r\n        emit UpdatedSettings('Swap Settings', [Log('Enabled', _enabled ? 1 : 0),Log('Swap Maximum', swapThreshold), Log('', 0)]);\r\n    }\r\n\r\n    function setMaxSwapPercent(uint256 _percent) external onlyOwner {\r\n        require(_percent <= 100, \"Percent too high\");\r\n        maxSwapPercent = _percent;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(address(0)));\r\n    }\r\n\t\r\n\tfunction toString(bytes memory data) internal pure returns(string memory) {\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n    \r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint i = 0; i < data.length; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n    \r\n    function concatenate(string memory a, string memory b) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(a, b));\r\n    }\r\n\r\n\tstruct Log {\r\n\t    string name;\r\n\t    uint256 value;\r\n\t}\r\n\r\n    event FundsDistributed(uint256 liquidity, uint256 marketing, uint256 team);\r\n    event UpdatedSettings(string name, Log[3] values);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct BabyRat.Log[3]\",\"name\":\"values\",\"type\":\"tuple[3]\"}],\"name\":\"UpdatedSettings\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPool\",\"type\":\"bool\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisnipe\",\"outputs\":[{\"internalType\":\"contract IAntiSnipe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoProcess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"}],\"name\":\"endWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_whitelistMode\",\"type\":\"bool\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"resetShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setAutoProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquiditySellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_teamSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"preSaleAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setMaxSwapPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protection\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_call\",\"type\":\"bool\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_protect\",\"type\":\"bool\"}],\"name\":\"setProtectionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapMinimum\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedIn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"switchRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabyRat", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ad650d8662d03709c07bec23a50c87efb659e214000000000000000000000000a456bf34ad25eb8fe73fc2b22baf95b9e153f2ad000000000000000000000000a456bf34ad25eb8fe73fc2b22baf95b9e153f2ad", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e696fd394ca83b785911ab14ea7ddde6759aaee56dc525e9375194e540ddd3e"}