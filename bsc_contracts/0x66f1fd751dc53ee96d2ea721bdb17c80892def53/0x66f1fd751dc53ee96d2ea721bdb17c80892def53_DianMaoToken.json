{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\ninterface DMRouter{\r\n    function userBalances(address user) external returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\ncontract TokenDistributor is Ownable {\r\n    mapping(address=>bool) public operator;\r\n    constructor (address USDT) {\r\n        operator[owner()] = true;\r\n        IERC20(USDT).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n    function withdrawTokens(address tokenAddress, uint256 amount) external {\r\n        require(operator[msg.sender],\"not allow\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.transfer(msg.sender, amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function withdrawETH(uint256 amountOut) external  {\r\n        require(operator[msg.sender],\"not allow\");\r\n        TransferHelper.safeTransferETH(msg.sender, amountOut);\r\n    }\r\n\r\n    function setOperator(address _addressA,bool t) external{\r\n        require(operator[msg.sender],\"not allow\");\r\n        operator[_addressA] = t;\r\n    }\r\n\r\n}\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ncontract DianMaoToken is  IERC20, Ownable {\r\n\r\n    mapping(address=>uint) public lpHolderIndex;\r\n    address[] public lpHolders;\r\n    uint256 public lpCurrentIndex;\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals=18;\r\n\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    address public USDT;\r\n\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _lpTokenDistributor;\r\n    TokenDistributor public _DynamicRewardsTokenDistributor;\r\n    TokenDistributor public _BottomPoolTokenDistributor;\r\n    DMRouter public dMRouter;\r\n\r\n\r\n    address public _mainPair;\r\n\r\n\r\n    address public fundAddress;\r\n    address public FoundationAddress;\r\n    address public LPAddress;\r\n    address public DynamicRewardsAddress;\r\n    address public BottomPoolAddress;\r\n    uint256 public LP_fee = 1;\r\n    uint256 public Foundation_fee = 1;\r\n    uint256 public Dynamic_fee = 1;\r\n    uint256 public Bottom_fee = 1;\r\n    uint256 public BottomPoolLimit = 1000 ** _decimals;\r\n    uint256 public buyLimit=20;\r\n    uint256 public startTradeBlock;\r\n\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public blacklistedUsers;\r\n    mapping(address => bool) public _reWardExcludeList;\r\n\r\n\r\n    uint256 public refAmount=(1 * 10**_decimals)/10000; //\u5224\u5b9a\u53d1\u9001\u591a\u5c11\u91d1\u989d\u7b97\u7ed1\u5b9a\u5173\u7cfb\r\n    mapping(address => address) public referees; // \u5b58\u50a8\u63a8\u8350\u5173\u7cfb\r\n    mapping(address => uint256) public pendingRewards; // \u5b58\u50a8\u5f85\u9886\u53d6\u7684\u5956\u52b1\r\n    uint256 public lastClaimTime; // \u8bb0\u5f55\u4e0a\u6b21\u9886\u53d6\u5956\u52b1\u7684\u65f6\u95f4\r\n    address[] public rewardsUsersList;\r\n    mapping(address=>uint) rewardsUsersListndex;\r\n    bool public rewardsEnable;\r\n\r\n\r\n    address public admin;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Not authorized: Only admin can call this\");\r\n        _;\r\n    }\r\n\r\n\r\n    function setDmRouter(address _dmRouter) external onlyOwner{\r\n        dMRouter = DMRouter(_dmRouter);\r\n    }\r\n\r\n    function setReferee(address _referee) external onlyOwner{\r\n        require(referees[msg.sender] == address(0), \"Referee already set!\");\r\n        referees[msg.sender] = _referee;\r\n    }\r\n\r\n    function setRefAmount(uint256 _newAmount)  external onlyOwner{\r\n        refAmount = _newAmount;\r\n    }\r\n\r\n    function setadmin(address _admin) external onlyOwner{\r\n        admin = _admin;\r\n    }\r\n\r\n\r\n    function setrewardsEnable(bool _rewardsEnable) external onlyOwner{\r\n        rewardsEnable = _rewardsEnable;\r\n    }\r\n\r\n\r\n    function setBottomPoolLimit(uint256 _BottomPoolLimit) external onlyOwner{\r\n        BottomPoolLimit = _BottomPoolLimit;\r\n    }\r\n\r\n    function setBuyLimit(uint256 _buyLimit) external onlyOwner{\r\n        buyLimit = _buyLimit;\r\n    }\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n\r\n\r\n    constructor (\r\n        address RouterAddress,uint256 Supply,address _USDT){\r\n        USDT = _USDT;\r\n        // address USDT= 0x3b389783982bc58c15312871de7fbfec9ce65e39; // TODO \u6d4b\u8bd5\r\n        // = 0x55d398326f99059fF775485246999027B3197955;  // \u7ebf\u4e0a\r\n\r\n        fundAddress = msg.sender;\r\n        FoundationAddress = msg.sender;\r\n        admin =  msg.sender;\r\n\r\n        _lpTokenDistributor = new TokenDistributor(USDT);\r\n        _DynamicRewardsTokenDistributor = new TokenDistributor(USDT);\r\n        _BottomPoolTokenDistributor = new TokenDistributor(USDT);\r\n\r\n        LPAddress = address(_lpTokenDistributor);\r\n        DynamicRewardsAddress = address(_DynamicRewardsTokenDistributor);\r\n        BottomPoolAddress = address(_BottomPoolTokenDistributor);\r\n\r\n\r\n        _name = \"DianMao\";\r\n        _symbol = \"DMC\";\r\n        _tTotal = Supply; //5000000000000000000000\r\n        _balances[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter; // \u6d4b\u8bd5 0xcc7adc94f3d80127849d2b41b6439b7cf1eb4ae0\r\n        // 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        _allowances[LPAddress][address(this)] = MAX;\r\n        _allowances[DynamicRewardsAddress][address(this)] = MAX;\r\n        _allowances[BottomPoolAddress][address(this)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address mainPair = swapFactory.createPair(address(this), USDT);\r\n        _mainPair = mainPair;\r\n\r\n        // \u5224\u65ad\u662f\u5426\u6d41\u52a8\u6027\u5fc5\u987b\u7684\u524d\u7f6e\u6761\u4ef6\r\n        require(USDT < address(this),\"USDT<address(this)\");\r\n\r\n        _feeWhiteList[LPAddress] = true;\r\n        _feeWhiteList[DynamicRewardsAddress] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        IERC20(USDT).approve(RouterAddress,MAX);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        return balance;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function addReWardExcludeListBatch(address[] calldata userAddresses1) external onlyOwner {\r\n        for (uint i = 0; i < userAddresses1.length; i++) {\r\n            _reWardExcludeList[userAddresses1[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeReWardExcludeListBatch(address[] calldata userAddresses1) external onlyOwner {\r\n        for (uint i = 0; i < userAddresses1.length; i++) {\r\n            _reWardExcludeList[userAddresses1[i]] = false;\r\n        }\r\n    }\r\n\r\n\r\n    function addBlacklistBatch(address[] calldata userAddresses1) external onlyOwner {\r\n        for (uint i = 0; i < userAddresses1.length; i++) {\r\n            blacklistedUsers[userAddresses1[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeBlacklistBatch(address[] calldata userAddresses1) external onlyOwner {\r\n        for (uint i = 0; i < userAddresses1.length; i++) {\r\n            blacklistedUsers[userAddresses1[i]] = false;\r\n        }\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        require(!blacklistedUsers[from], \"blacklistedUsers not allowed for this token\");\r\n        if(_feeWhiteList[from]  || _feeWhiteList[to] || inSwap){\r\n            _baseTransfer(from,to,amount);\r\n            return;\r\n        }\r\n\r\n        bool isAddLP;\r\n        bool isRemoveLP;\r\n        bool isBuy;\r\n        bool isSell;\r\n\r\n        // \u5224\u65ad\u884c\u4e3a\u7c7b\u578b \u662f\u6dfb\u52a0\u6d41\u52a8\u6027\u8fd8\u662f\u79fb\u9664\u6d41\u52a8\u6027\r\n        if (to == _mainPair) {\r\n            isAddLP = _isAddLiquidity(amount);\r\n            isSell = !isAddLP;\r\n\r\n        } else if (from == _mainPair) {\r\n            isRemoveLP = _isRemoveLiquidity();\r\n            isBuy = !isRemoveLP;\r\n        }\r\n\r\n        // \u5224\u65ad\u5355\u7b14\u9650\u8d2d10\u679a\uff01\r\n        if(isBuy){\r\n            require(0 < startTradeBlock, \"!Trading\");\r\n            require(amount<=buyLimit*(10 ** _decimals),\"buy chaochu 10 deci\");\r\n        }\r\n\r\n        uint256 totalFee;\r\n        // \u6263\u7a0e\r\n        if (isBuy) {\r\n            _baseTransfer(from, LPAddress, (amount * LP_fee) / 100);\r\n            _baseTransfer(from, FoundationAddress, (amount * Foundation_fee) / 100);\r\n            _baseTransfer(from, DynamicRewardsAddress, (amount * Dynamic_fee) / 100);\r\n            totalFee += (amount * LP_fee) / 100 + (amount * Foundation_fee) / 100 + (amount * Dynamic_fee) / 100;\r\n        }\r\n\r\n        if (isSell || isRemoveLP) {\r\n            _baseTransfer(from, LPAddress, (amount * LP_fee) / 100);\r\n            _baseTransfer(from, FoundationAddress, (amount * Foundation_fee) / 100);\r\n            _baseTransfer(from, BottomPoolAddress, (amount * Bottom_fee) / 100);\r\n            uint256 contractTokenBalance = balanceOf(BottomPoolAddress);\r\n            if (contractTokenBalance > BottomPoolLimit) {\r\n                swapTokenForFund(contractTokenBalance);\r\n            }\r\n            totalFee += (amount * LP_fee) / 100 + (amount * Foundation_fee) / 100 + (amount * Bottom_fee) / 100;\r\n        }\r\n\r\n        //\u5c06\u5269\u4e0b\u7684 amount \u8f6c\u7ed9 to\r\n        _baseTransfer(from,to,amount - totalFee);\r\n\r\n        // LP\u5408\u7ea6\u5206\u7ea2\u672c\u5e01\r\n        if (from != address(_lpTokenDistributor)) {\r\n            if (isAddLP) {\r\n                addLPHolder(from);\r\n            }else{\r\n                processLPReward(500000); // _lpTokenDistributor\r\n            }\r\n        }\r\n\r\n        // \u5224\u65ad\u662f\u5426\u9700\u8981\u7ed1\u5b9a\u5173\u7cfb\r\n        if(!isBuy && !isSell && !isAddLP && !isRemoveLP && amount == refAmount){\r\n            bindDynamicReward(from, to);\r\n        }\r\n        // \u8ba1\u7b97\u5e94\u5f97\u5206\u7ea2\r\n        if(isAddLP){\r\n            distributeDynamicReward(from, amount);\r\n            return;\r\n        }\r\n        // \u89e6\u53d1\u63a8\u8350\u4eba\u5206\u7ea2\r\n        if(rewardsEnable && block.timestamp - lastClaimTime >= 48 hours){\r\n            claimRewardsForUsers(0,rewardsUsersList.length);\r\n        }\r\n\r\n    }\r\n\r\n    function swapTokenForFund(uint256 lpAmount) public lockTheSwap {\r\n        uint256 tokenAmount = lpAmount/2;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDT;\r\n\r\n        _baseTransfer(BottomPoolAddress, address(this), lpAmount);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(BottomPoolAddress),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 lpUsdt = IERC20(USDT).balanceOf(BottomPoolAddress);\r\n        IERC20(USDT).transferFrom(BottomPoolAddress, address(this), lpUsdt);\r\n\r\n        if (lpAmount > 0 && lpUsdt > 0) {\r\n            _swapRouter.addLiquidity(\r\n                address(this), address(USDT), lpAmount, lpUsdt, 0, 0, fundAddress, block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function addLPHolder(address adr) private {\r\n        if (0 == lpHolderIndex[adr]) {\r\n            if (0 == lpHolders.length || lpHolders[0] != adr) {\r\n                lpHolderIndex[adr] = lpHolders.length;\r\n                lpHolders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function addLPHolderExt(address adr) public onlyOwner {\r\n        addLPHolder(adr);\r\n    }\r\n\r\n    function processLPReward(uint256 gas) public {\r\n        IERC20 token = IERC20(address(this));\r\n        uint256 balance = token.balanceOf(address(_lpTokenDistributor));\r\n        if (balance == 0) {\r\n            return;\r\n        }\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpHolders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (lpCurrentIndex >= shareholderCount) {\r\n                lpCurrentIndex = 0;\r\n            }\r\n            shareHolder = lpHolders[lpCurrentIndex];\r\n            if(!_reWardExcludeList[shareHolder]){\r\n                tokenBalance = holdToken.balanceOf(shareHolder) + dMRouter.userBalances(shareHolder);\r\n                if (tokenBalance > 0) {\r\n                    amount = balance * tokenBalance / holdTokenTotal;\r\n                    if (amount > 0) {\r\n                        token.transferFrom(address(_lpTokenDistributor),shareHolder, amount);\r\n                    }\r\n                }\r\n                gasUsed = gasUsed + (gasLeft - gasleft());\r\n                gasLeft = gasleft();\r\n            }\r\n            lpCurrentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) public view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = USDT;\r\n        uint256 r;\r\n        uint256 rToken;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n            rToken = r1;\r\n        } else {\r\n            r = r1;\r\n            rToken = r0;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        if (rToken == 0) {\r\n            isAdd = bal > r;\r\n        } else {\r\n            isAdd = bal > r + r * amount / rToken / 2;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity() public  view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = USDT;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _baseTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n\r\n    function setFundAddress(address _fundAddress) public onlyOwner{\r\n        fundAddress = _fundAddress;\r\n    }\r\n    function setLPAddress(address lpAddress) public onlyOwner{\r\n        LPAddress = lpAddress;\r\n    }\r\n\r\n    function setFoundationAddress(address foundationAddress) public onlyOwner{\r\n        FoundationAddress = foundationAddress;\r\n    }\r\n\r\n    function setDynamicRewardsAddress(address dynamicRewardsAddress) public onlyOwner{\r\n        DynamicRewardsAddress = dynamicRewardsAddress;\r\n    }\r\n\r\n\r\n    function setLPFee(uint256 fee) public onlyOwner{\r\n        LP_fee = fee;\r\n    }\r\n\r\n    function setFoundationFee(uint256 fee) public onlyOwner{\r\n        Foundation_fee = fee;\r\n    }\r\n\r\n    function setDynamicFee(uint256 fee) public onlyOwner{\r\n        Dynamic_fee = fee;\r\n    }\r\n\r\n    function setBottomFee(uint256 fee) public onlyOwner {\r\n        Bottom_fee = fee;\r\n    }\r\n\r\n    function addToFeeWhiteList(address user) public onlyOwner{\r\n        _feeWhiteList[user] = true;\r\n    }\r\n\r\n    function removeFromFeeWhiteList(address user) public onlyOwner{\r\n        _feeWhiteList[user] = false;\r\n    }\r\n\r\n    function bindDynamicReward(address from,address user) private {\r\n        // \u7ed1\u5b9a\u5173\u7cfb\r\n        if(referees[user]==address(0)){\r\n            referees[user] = from;\r\n            if(rewardsUsersListndex[from]==0 || (rewardsUsersList.length>0 && rewardsUsersList[0]!=from)){\r\n                rewardsUsersListndex[user] = rewardsUsersList.length;\r\n                rewardsUsersList.push(from);\r\n            }\r\n        }\r\n    }\r\n    function distributeDynamicReward(address user, uint256 amount) private {\r\n        // \u8ba1\u7b97\u5956\u52b1\r\n        address firstReferee = referees[user];\r\n        if (firstReferee != address(0)) {\r\n            uint256 firstReward = (amount * 5) / 100; // \u4e00\u4ee3\u76f4\u63a85%\r\n            pendingRewards[firstReferee] += firstReward;\r\n\r\n            address secondReferee = referees[firstReferee];\r\n            if (secondReferee != address(0)) {\r\n                uint256 secondReward = (amount * 3) / 100; // \u4e8c\u4ee3\u95f4\u63a83%\r\n                pendingRewards[secondReferee] += secondReward;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function claimRewardsForUsers(uint256 startIndex, uint256 endIndex) private {\r\n        require(startIndex < endIndex && endIndex <= rewardsUsersList.length, \"Invalid index values\");\r\n\r\n        for (uint256 i = startIndex; i < endIndex; i++) {\r\n            address userAddress = rewardsUsersList[i];\r\n\r\n            uint256 reward = pendingRewards[userAddress];\r\n            if(reward > 0) {\r\n                pendingRewards[userAddress]=0;\r\n                _transfer(address(_DynamicRewardsTokenDistributor), userAddress, reward);\r\n            }\r\n        }\r\n        lastClaimTime = block.timestamp;\r\n    }\r\n\r\n\r\n    function claimRewardsForUsersExternal(uint256 startIndex, uint256 endIndex) public onlyAdmin {\r\n        claimRewardsForUsers(startIndex,endIndex);\r\n    }\r\n\r\n\r\n\r\n    function setAdmin(address _admin) external onlyOwner {\r\n        admin = _admin;\r\n    }\r\n\r\n    function setOperator(address _admin) external onlyOwner {\r\n        _lpTokenDistributor.setOperator(_admin,true);\r\n        _DynamicRewardsTokenDistributor.setOperator(_admin,true);\r\n        _BottomPoolTokenDistributor.setOperator(_admin,true);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"RouterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BottomPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BottomPoolLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Bottom_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DynamicRewardsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dynamic_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FoundationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Foundation_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BottomPoolTokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DynamicRewardsTokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_isAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRemove\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpTokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_reWardExcludeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses1\",\"type\":\"address[]\"}],\"name\":\"addBlacklistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"addLPHolderExt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses1\",\"type\":\"address[]\"}],\"name\":\"addReWardExcludeListBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addToFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistedUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"claimRewardsForUsersExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dMRouter\",\"outputs\":[{\"internalType\":\"contract DMRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpCurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpHolderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processLPReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses1\",\"type\":\"address[]\"}],\"name\":\"removeBlacklistBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeFromFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses1\",\"type\":\"address[]\"}],\"name\":\"removeReWardExcludeListBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsUsersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBottomFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_BottomPoolLimit\",\"type\":\"uint256\"}],\"name\":\"setBottomPoolLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dmRouter\",\"type\":\"address\"}],\"name\":\"setDmRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setDynamicFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dynamicRewardsAddress\",\"type\":\"address\"}],\"name\":\"setDynamicRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"foundationAddress\",\"type\":\"address\"}],\"name\":\"setFoundationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFoundationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundAddress\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"setLPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setRefAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"}],\"name\":\"setReferee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setadmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_rewardsEnable\",\"type\":\"bool\"}],\"name\":\"setrewardsEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"swapTokenForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DianMaoToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://27705db0c236347055a3535365b17a20194546683f48a38339455a845e631ff2"}