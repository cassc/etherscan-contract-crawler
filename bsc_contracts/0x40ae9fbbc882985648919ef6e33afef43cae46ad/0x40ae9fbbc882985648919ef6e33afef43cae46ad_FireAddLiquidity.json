{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Emergency.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\n\\r\\ncontract Emergency is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    bool public emergency;\\r\\n\\r\\n    event SetEmergency(bool indexed emergency);\\r\\n    event EmergencyWithdraw(address token_, address user_, uint256 amount_);\\r\\n\\r\\n    modifier noEmergency() {\\r\\n        require(!emergency, \\\"emergency.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() public {\\r\\n        emergency = false;\\r\\n    }\\r\\n\\r\\n    function setEmergency(bool emergency_) external onlyOwner {\\r\\n        emergency = emergency_;\\r\\n        emit SetEmergency(emergency_);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(address token_, uint256 amount)\\r\\n    external\\r\\n    virtual\\r\\n    onlyOwner\\r\\n    {\\r\\n        require(emergency, \\\"no emergency.\\\");\\r\\n        IERC20(token_).safeTransfer(msg.sender, amount);\\r\\n        emit EmergencyWithdraw(token_, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/IUniswapV2Factory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.5 <0.8.0;\\n\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/IUniswapV2Pair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.5 <0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/IUniswapV2Router02.sol\": {\r\n      \"content\": \"\\r\\n//SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n    external\\r\\n    returns (\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ttmv2/FireAddLiquidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../libraries/IUniswapV2Router02.sol\\\";\\nimport \\\"../libraries/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/IUniswapV2Factory.sol\\\";\\nimport \\\"./FireLpStake.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../lib/Emergency.sol\\\";\\nimport \\\"./FireConvert.sol\\\";\\n\\ncontract FireAddLiquidity is ReentrancyGuard, Emergency{\\n\\n    address public router;\\n    FireLpStake public lpStake;\\n    uint256 public RATE_DENOMINATOR = 10000;\\n    uint256 public addMaxLimitRate = 2000;\\n    uint256 public MaxAddUsdt = 100000 * 10 ** 18;\\n    uint256 public UserMaxAddUsdt = 500 * 10 ** 18;\\n    uint256 public dayTime = 1 days;\\n    uint256 public dayTimePadding = 21 hours;\\n    address public usdtToken;\\n    address public ttm;\\n    address public ttmV2;\\n    address public convert;\\n    uint256 public startTime;\\n\\n    mapping(uint256 =>uint256) public usdtMap;\\n    mapping(uint256 => mapping(address=> uint256)) public userMap;\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    constructor(address router_,address ttm_,uint256 dayTime_,uint256 dayTimePadding_,address usdtToken_) public {\\n        router = router_;\\n        ttm = ttm_;\\n        dayTime = dayTime_;\\n        dayTimePadding = dayTimePadding_;\\n        usdtToken = usdtToken_;\\n        startTime = getTimeKey();\\n    }\\n\\n\\n    function setLpStake(address lpStake_) external onlyOwner{\\n        lpStake = FireLpStake(lpStake_);\\n    }\\n\\n    function setMaxRate(uint256 addMaxLimitRate_,uint256 MaxAddUsdt_,uint256 UserMaxAddUsdt_,uint256 startTime_) external onlyOwner{\\n        addMaxLimitRate = addMaxLimitRate_;\\n        UserMaxAddUsdt = UserMaxAddUsdt_;\\n        MaxAddUsdt = MaxAddUsdt_;\\n        startTime = startTime_;\\n    }\\n\\n    function setTtmV2(address ttmV2_) external onlyOwner{\\n        ttmV2 = ttmV2_;\\n    }\\n\\n    function setConvert(address convert_) external onlyOwner{\\n        convert = convert_;\\n    }\\n\\n\\n\\n    function preAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) public view returns (uint amountA, uint amountB) {\\n        (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, 'PancakeRouter: INSUFFICIENT_B_AMOUNT');\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, 'PancakeRouter: INSUFFICIENT_A_AMOUNT');\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n\\n    function getTimeKey() public view returns (uint256) {\\n        return block.timestamp.div(dayTime).mul(dayTime).add(dayTimePadding);\\n    }\\n\\n\\n    function getDayCount() public view returns (uint256) {\\n        uint256 currentTime = getTimeKey();\\n        if(currentTime < startTime){\\n            return 0;\\n        }\\n        return currentTime.sub(startTime).div(dayTime);\\n    }\\n\\n    function getMaxAmount() public view returns (uint256) {\\n        uint256 deyCount = getDayCount();\\n        return MaxAddUsdt.add(deyCount.mul(MaxAddUsdt).mul(addMaxLimitRate).div(RATE_DENOMINATOR));\\n    }\\n    \\n    function getCurrentUseAmount() public view returns (uint256) {\\n        return usdtMap[getTimeKey()];\\n    }\\n\\n\\n    function getUserMaxAmount() public view returns (uint256) {\\n        uint256 deyCount = getDayCount();\\n        return UserMaxAddUsdt.add(deyCount.mul(UserMaxAddUsdt).mul(addMaxLimitRate).div(RATE_DENOMINATOR));\\n    }\\n\\n    function getCurrentUserUseAmount(address user) public view returns (uint256) {\\n        return userMap[getTimeKey()][user];\\n    }\\n\\n    function checkPoolLimit(uint256 usdtAmount) public view returns (bool) {\\n        uint256 useAmount = getCurrentUseAmount();\\n        uint256 maxAmount = getMaxAmount();\\n        return useAmount.add(usdtAmount) <= maxAmount;\\n    }\\n\\n    function checkUserLimit(address user,uint256 usdtAmount) public view returns (bool) {\\n        uint256 useAmount = getCurrentUserUseAmount(user);\\n        uint256 maxAmount = getUserMaxAmount();\\n        return useAmount.add(usdtAmount) <= maxAmount;\\n    }\\n\\n    function addLiquidity(\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) public returns (uint amountA, uint amountB, uint liquidity) {\\n        address tokenA = ttmV2;\\n        address tokenB = usdtToken;\\n        uint256 usdtAmount = amountBDesired;\\n        require(checkPoolLimit(usdtAmount),\\\"Liquidity:Exceeding the limit\\\");\\n        require(checkUserLimit(msg.sender,usdtAmount),\\\"Liquidity:Exceeding the user limit\\\");\\n        usdtMap[getTimeKey()] = usdtMap[getTimeKey()].add(usdtAmount);\\n        userMap[getTimeKey()][msg.sender] = userMap[getTimeKey()][msg.sender].add(usdtAmount);\\n\\n        (amountA, amountB) = preAddLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        IERC20(ttm).safeTransferFrom(msg.sender, address(this), amountA);\\n        IERC20(ttm).safeApprove(address(convert),amountA);\\n        FireConvert(convert).mintConvert(amountA);\\n        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountB);\\n        address pair = getPair(tokenA,tokenB);\\n        IERC20(tokenA).safeTransfer(pair, amountA);\\n        IERC20(tokenB).safeTransfer(pair, amountB);\\n        liquidity = IUniswapV2Pair(pair).mint(address(this));\\n        IERC20(pair).safeApprove(address(lpStake),liquidity);\\n        lpStake.stake(0,liquidity,msg.sender);\\n    }\\n    function addLiquidity2(\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) public returns (uint amountA, uint amountB, uint liquidity) {\\n        address tokenA = ttmV2;\\n        address tokenB = usdtToken;\\n        uint256 usdtAmount = amountBDesired;\\n        require(checkPoolLimit(usdtAmount),\\\"Liquidity:Exceeding the limit\\\");\\n        require(checkUserLimit(msg.sender,usdtAmount),\\\"Liquidity:Exceeding the user limit\\\");\\n        usdtMap[getTimeKey()] = usdtMap[getTimeKey()].add(usdtAmount);\\n        userMap[getTimeKey()][msg.sender] = userMap[getTimeKey()][msg.sender].add(usdtAmount);\\n        (amountA, amountB) = preAddLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        IERC20(tokenA).safeTransferFrom(msg.sender, address(this), amountA);\\n        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountB);\\n        address pair = getPair(tokenA,tokenB);\\n        IERC20(tokenA).safeTransfer(pair, amountA);\\n        IERC20(tokenB).safeTransfer(pair, amountB);\\n        liquidity = IUniswapV2Pair(pair).mint(address(this));\\n        IERC20(pair).safeApprove(address(lpStake),liquidity);\\n        lpStake.stake(0,liquidity,msg.sender);\\n    }\\n\\n\\n    function removeLiquidity(\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) public {\\n        address tokenA = ttmV2;\\n        address tokenB = usdtToken;\\n        address pair = getPair(tokenA,tokenB);\\n        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity);\\n        IUniswapV2Pair(pair).burn(address(this));\\n        uint256 addressA1= IERC20(tokenA).balanceOf(address (this));\\n        uint256 addressB1= IERC20(tokenB).balanceOf(address (this));\\n        require(addressA1 >= amountAMin, 'Liquidity: INSUFFICIENT_A_AMOUNT');\\n        require(addressB1 >= amountBMin, 'Liquidity: INSUFFICIENT_B_AMOUNT');\\n        IERC20(tokenA).safeTransfer(to, addressA1);\\n        IERC20(tokenB).safeTransfer(to, addressB1);\\n    }\\n\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) public pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure returns (uint amountB) {\\n        require(amountA > 0, 'PancakeLibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address tokenA, address tokenB) public view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        address pair = getPair(tokenA,tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    function getPair(address tokenA, address tokenB) public view returns (address) {\\n        address factory = IUniswapV2Router02(router).factory();\\n        address pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n        require(pair != address(0),\\\"!Pair\\\");\\n        return pair;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ttmv2/FireConvert.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../lib/Emergency.sol\\\";\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"./FireToken.sol\\\";\\n\\n\\ncontract FireConvert is ReentrancyGuard, Emergency {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n    address public ttm;\\n    address public ttmv2;\\n\\n    constructor(address ttm_, address ttmv2_) public {\\n        ttm = ttm_;\\n        ttmv2 = ttmv2_;\\n    }\\n\\n    mapping(address =>uint256) public userMintMap;\\n    mapping(address => bool) public recoverList;\\n    mapping(address => bool) public whiteList;\\n\\n\\n    event SetRecover(address indexed user, bool state);\\n    event Mint(address indexed user, uint256 amount);\\n\\n    function setWhiteList(address addr_, bool state_) external onlyOwner {\\n        whiteList[addr_] = state_;\\n    }\\n\\n    function setRecover(address addr_, bool state_)\\n    external\\n    onlyOwner\\n    {\\n        recoverList[addr_] = state_;\\n        emit SetRecover(addr_, state_);\\n    }\\n\\n    modifier ensure(uint256 deadline)  {\\n        require(deadline >= block.timestamp, \\\"V2Convert: EXPIRED\\\");\\n        _;\\n    }\\n\\n\\n    function mintConvert(uint256 amount) public noEmergency nonReentrant {\\n        require(amount > 0, \\\"V2Convert: amount <= 0\\\");\\n        require(whiteList[msg.sender], \\\"V2Convert: invalid caller\\\");\\n        IERC20(ttm).safeTransferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, amount);\\n        FireToken(ttmv2).mint(msg.sender, amount);\\n        emit Mint(msg.sender, amount);\\n    }\\n\\n\\n    function verifyMintSign(\\n        uint256 deadline,\\n        address userAddr,\\n        uint256 userMaxMint,\\n        uint256 mintTimeKey,\\n        bytes memory signature\\n    ) public view returns (bool) {\\n        address recoverAddr = keccak256(\\n            abi.encode(deadline, userAddr, userMaxMint, mintTimeKey, address(this))\\n        ).toEthSignedMessageHash()\\n            .recover(signature);\\n        return recoverList[recoverAddr];\\n    }\\n\\n\\n    function mint(\\n        uint256 amount,\\n        uint256 deadline,\\n        address userAddr,\\n        uint256 userMaxMint,\\n        uint256 mintTimeKey,\\n        bytes calldata signature\\n    ) external noEmergency ensure(deadline) nonReentrant {\\n        require(amount > 0, \\\"V2Convert: amount <= 0\\\");\\n        require(msg.sender == userAddr, \\\"V2Convert: invalid caller\\\");\\n        require(verifyMintSign(deadline, userAddr, userMaxMint, mintTimeKey, signature), \\\"V2Convert: please check the signature\\\");\\n        require(userMintMap[userAddr].add(amount) <= userMaxMint, \\\"V2Convert: Mint volume is too large\\\");\\n        userMintMap[userAddr] = userMintMap[userAddr].add(amount);\\n        IERC20(ttm).safeTransferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, amount);\\n        FireToken(ttmv2).mint(msg.sender, amount);\\n        emit Mint(msg.sender, amount);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ttmv2/FireFeeTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../lib/Emergency.sol\\\";\\n\\ncontract FireFeeTreasury is Emergency {\\n\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public ttmTokenV2;\\n    IERC20 public usdtToken;\\n\\n    constructor() public{\\n    }\\n\\n\\n    mapping(address => bool) public whiteList;\\n\\n    modifier isWhiteList() {\\n        require(whiteList[msg.sender] == true || owner() == msg.sender, \\\"LpFeeTreasury: no permission.\\\");\\n        _;\\n    }\\n\\n    function setTTMToken(address ttmTokenV2_ ) external onlyOwner{\\n        ttmTokenV2 = IERC20(ttmTokenV2_);\\n    }\\n\\n    function setUSDTToken(address usdtToken_ ) external onlyOwner{\\n        usdtToken = IERC20(usdtToken_);\\n    }\\n\\n\\n    function setWhiteList(address user, bool state) external onlyOwner {\\n        whiteList[user] = state;\\n    }\\n\\n    function withdraw(uint256 amount) external noEmergency isWhiteList {\\n        ttmTokenV2.safeTransfer(msg.sender,amount);\\n    }\\n\\n    function withdrawUSDT(uint256 amount) external noEmergency isWhiteList {\\n        usdtToken.safeTransfer(msg.sender,amount);\\n    }\\n}\"\r\n    },\r\n    \"contracts/ttmv2/FireLpStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./FireFeeTreasury.sol\\\";\\n\\n\\ncontract FireLpStake is ReentrancyGuard, Ownable\\n{\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event Stake(\\n        address indexed user,\\n        uint256 indexed pool,\\n        uint256 amount,\\n        uint256 power\\n    );\\n    event StakeLock(address indexed user, UserStake userStake);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event WithdrawLock(address indexed user, UserStake userStake);\\n    event Claimed(address indexed user,address token, uint256 amount);\\n    event SetUnlockTimeWindow(uint256 indexed unlockTimeWindow);\\n    event SetEmergency(bool indexed emergency);\\n    event UpdatePool(uint256 indexed pool, uint256 weight, uint256 lockTime);\\n\\n    struct PoolInfo {\\n        uint256 pid;\\n        uint256 totalPower;\\n        uint256 totalLock;\\n        uint256 weight; // 1e18\\n        uint256 lockTime;\\n    }\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 lockAmount;\\n        uint256 totalPower;\\n\\n        uint256 ttmTotalIncome;\\n        uint256 usdtTotalIncome;\\n        uint256 ttmDebt;\\n        uint256 usdtDebt;\\n        uint256 ttmReward;\\n        uint256 usdtReward;\\n    }\\n\\n    struct UserStake {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 power;\\n        uint256 poolId;\\n        uint256 lockTime;\\n        uint256 startTime;\\n        bool over;\\n    }\\n\\n    struct RewardInfo {\\n        uint256 rewardPerShare;\\n        uint256 remainingRewards;\\n        uint256 totalReward;\\n        uint256 endTime;\\n    }\\n\\n\\n    IERC20 public ttmv2Token;\\n    IERC20 public usdtToken;\\n    IERC20 public stakeToken;\\n\\n\\n    PoolInfo[] public poolInfos;\\n\\n\\n    uint256 public lastBlockTimeStamp;\\n    uint256 public totalPower;\\n\\n\\n    address public lpFeeTreasury;\\n\\n\\n    RewardInfo public ttmv2RewardInfo;\\n    RewardInfo public usdtRewardInfo;\\n\\n\\n    uint256 public rewardLockTime = 7 days;\\n\\n\\n    uint256 public unlockTimeWindow;\\n\\n    bool public emergency;\\n\\n    mapping(address => UserInfo) public userInfos;\\n    mapping(address => UserStake[]) public userInfoDeposits;\\n    mapping(address => bool) public whiteList;\\n\\n    constructor(\\n        address ttmv2Token_,\\n        address usdtToken_,\\n        address stakeToken_,\\n        address lpFeeTreasury_,\\n        uint256 rewardLockTime_,\\n        uint256 lockTime_\\n    ) public {\\n        ttmv2Token = IERC20(ttmv2Token_);\\n        usdtToken = IERC20(usdtToken_);\\n        stakeToken = IERC20(stakeToken_);\\n        lpFeeTreasury = lpFeeTreasury_;\\n        PoolInfo memory pool = PoolInfo(0, 0, 0, 1e18, lockTime_);\\n        poolInfos.push(pool);\\n        rewardLockTime = rewardLockTime_;\\n    }\\n\\n    function setEmergency(bool emergency_) external onlyOwner {\\n        emergency = emergency_;\\n        emit SetEmergency(emergency_);\\n    }\\n\\n    function setWhiteList(address user, bool state) external onlyOwner {\\n        whiteList[user] = state;\\n    }\\n\\n    function emergencyWithdraw(address token_, uint256 amount)\\n    external\\n    onlyOwner\\n    {\\n        require(emergency, \\\"no emergency.\\\");\\n        IERC20(token_).safeTransfer(msg.sender, amount);\\n    }\\n\\n\\n    function setUnlockTimeWindow(uint256 unlockTimeWindow_) external onlyOwner {\\n        unlockTimeWindow = unlockTimeWindow_;\\n        emit SetUnlockTimeWindow(unlockTimeWindow_);\\n    }\\n\\n    modifier noEmergency() {\\n        require(!emergency, \\\"emergency.\\\");\\n        _;\\n    }\\n\\n    modifier verifyPid(uint256 pid) {\\n        require(pid >= 0 && pid <= 4, \\\"!POOL\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhiteList() {\\n        require(whiteList[msg.sender] == true || owner() == msg.sender, \\\"no permission.\\\");\\n        _;\\n    }\\n\\n    modifier updateRewardPerShare() {\\n        if (totalPower > 0 && block.timestamp > lastBlockTimeStamp) {\\n            {\\n                (uint256 _reward, uint256 _perShare, uint256 _remainingRewardsUpdate, uint256 _endTimeUpdate, uint256 _withdrawReward) = currentRewardShare(\\n                    address(ttmv2Token)\\n                );\\n                ttmv2RewardInfo.rewardPerShare = _perShare;\\n                lastBlockTimeStamp = block.timestamp;\\n                if (_withdrawReward > 0) {\\n                    FireFeeTreasury(lpFeeTreasury).withdraw(_withdrawReward);\\n                }\\n                ttmv2RewardInfo.endTime = _endTimeUpdate;\\n                ttmv2RewardInfo.remainingRewards = _remainingRewardsUpdate;\\n                ttmv2RewardInfo.totalReward = ttmv2RewardInfo.totalReward.add(_reward);\\n            }\\n            {\\n                (uint256 _reward, uint256 _perShare, uint256 _remainingRewardsUpdate, uint256 _endTimeUpdate, uint256 _withdrawReward) = currentRewardShare(\\n                    address (usdtToken)\\n                );\\n                usdtRewardInfo.rewardPerShare = _perShare;\\n\\n                if (_withdrawReward > 0) {\\n                    FireFeeTreasury(lpFeeTreasury).withdrawUSDT(_withdrawReward);\\n                }\\n                usdtRewardInfo.endTime = _endTimeUpdate;\\n                usdtRewardInfo.remainingRewards = _remainingRewardsUpdate;\\n                usdtRewardInfo.totalReward = usdtRewardInfo.totalReward.add(_reward);\\n            }\\n            lastBlockTimeStamp = block.timestamp;\\n        }\\n        _;\\n    }\\n\\n    modifier updateUserReward(address user) {\\n        UserInfo storage userInfo = userInfos[user];\\n        if (userInfo.totalPower > 0) {\\n            {\\n                uint256 debt = userInfo.totalPower.mul(ttmv2RewardInfo.rewardPerShare).div(1e18);\\n                uint256 userReward = debt.sub(userInfo.ttmDebt);\\n                userInfo.ttmReward = userInfo.ttmReward.add(userReward);\\n                userInfo.ttmDebt = debt;\\n            }\\n            {\\n                uint256 debt = userInfo.totalPower.mul(usdtRewardInfo.rewardPerShare).div(1e18);\\n                uint256 userReward = debt.sub(userInfo.usdtDebt);\\n                userInfo.usdtReward = userInfo.usdtReward.add(userReward);\\n                userInfo.usdtDebt = debt;\\n            }\\n        }\\n        _;\\n    }\\n\\n\\n    function currentRewardShare(address token)\\n    public\\n    view\\n    virtual\\n    returns (uint256 _reward, uint256 _perShare, uint256 _remainingRewardsUpdate, uint256 _endTimeUpdate, uint256 _withdrawReward)\\n    {\\n        uint256 lastTimeStamp = lastBlockTimeStamp;\\n        if (lastTimeStamp == 0) {\\n            lastTimeStamp = block.timestamp;\\n        }\\n\\n        RewardInfo memory rewardInfo = token == address(ttmv2Token) ? ttmv2RewardInfo : usdtRewardInfo;\\n        uint256 lpFeeTreasuryBalance = IERC20(token).balanceOf(lpFeeTreasury);\\n\\n        uint256 time = block.timestamp.sub(lastTimeStamp);\\n\\n        uint256 remainingTotalReward = lpFeeTreasuryBalance.add(rewardInfo.remainingRewards);\\n\\n        uint256 _endTime = rewardInfo.endTime == 0 ? block.timestamp : rewardInfo.endTime;\\n\\n        if (lpFeeTreasuryBalance > 0) {\\n            if (_endTime < block.timestamp) {\\n                _endTime = _endTime.add(rewardLockTime);\\n            } else {\\n                _endTime = block.timestamp.add(rewardLockTime);\\n            }\\n        }\\n\\n        uint256 preAmount = 0;\\n        if (_endTime < block.timestamp) {\\n            preAmount = remainingTotalReward;\\n            _remainingRewardsUpdate = 0;\\n            _endTime = block.timestamp;\\n        } else {\\n            uint256 totalTime = _endTime.sub(lastTimeStamp);\\n            if (totalTime > 0) {\\n                preAmount = remainingTotalReward.mul(time).div(totalTime);\\n                _remainingRewardsUpdate = remainingTotalReward.sub(preAmount);\\n            }\\n        }\\n       uint256 reward_ = preAmount;\\n        uint256 perShare_ = rewardInfo.rewardPerShare;\\n        if (totalPower > 0) {\\n            perShare_ = perShare_.add(reward_.mul(1e18).div(totalPower));\\n        }\\n        return (reward_, perShare_, _remainingRewardsUpdate, _endTime, lpFeeTreasuryBalance);\\n    }\\n\\n    function getPoolInfo(uint256 pid)\\n    external\\n    view\\n    virtual\\n    verifyPid(pid)\\n    returns (PoolInfo memory)\\n    {\\n        return poolInfos[pid];\\n    }\\n\\n    function getPoolInfos() external view virtual returns (PoolInfo[] memory) {\\n        return poolInfos;\\n    }\\n\\n    function getUserInfo(address user)\\n    external\\n    view\\n    virtual\\n    returns (UserInfo memory)\\n    {\\n        return userInfos[user];\\n    }\\n\\n    function calculateIncome(address user)\\n    external\\n    view\\n    virtual\\n    returns (uint256 ttmV2Income,uint256 usdtIncome)\\n    {\\n        UserInfo memory userInfo = userInfos[user];\\n        {\\n            uint256 _rewardPerShare = ttmv2RewardInfo.rewardPerShare;\\n            if (block.timestamp > lastBlockTimeStamp && totalPower > 0) {\\n                (, _rewardPerShare,,,) = currentRewardShare(address (ttmv2Token));\\n            }\\n            uint256 ttmV2Reward = userInfo\\n                .totalPower\\n                .mul(_rewardPerShare).div(1e18).sub(userInfo.ttmDebt);\\n            ttmV2Income = userInfo.ttmReward.add(ttmV2Reward);\\n        }\\n\\n        {\\n            uint256 _rewardPerShare = usdtRewardInfo.rewardPerShare;\\n            if (block.timestamp > lastBlockTimeStamp && totalPower > 0) {\\n                (, _rewardPerShare,,,) = currentRewardShare(address (usdtToken));\\n            }\\n            uint256 usdtReward = userInfo\\n                .totalPower\\n                .mul(_rewardPerShare).div(1e18).sub(userInfo.usdtDebt);\\n            usdtIncome = userInfo.usdtReward.add(usdtReward);\\n        }\\n    }\\n\\n\\n    function stake(uint256 pid, uint256 amount, address user)\\n    external\\n    virtual\\n    onlyWhiteList\\n    noEmergency\\n    verifyPid(pid)\\n    nonReentrant\\n    updateRewardPerShare\\n    updateUserReward(user)\\n    {\\n        require(user != address(0), \\\"!user\\\");\\n\\n        stakeToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        if (amount > 0) {\\n            PoolInfo storage pool = poolInfos[pid];\\n            uint256 power = amount.mul(pool.weight).div(1e18);\\n\\n            UserInfo storage userInfo = userInfos[user];\\n            userInfo.totalPower = userInfo.totalPower.add(power);\\n            userInfo.ttmDebt = userInfo.totalPower.mul(ttmv2RewardInfo.rewardPerShare).div(1e18);\\n            userInfo.usdtDebt = userInfo.totalPower.mul(usdtRewardInfo.rewardPerShare).div(1e18);\\n            totalPower = totalPower.add(power);\\n            pool.totalPower = pool.totalPower.add(power);\\n            pool.totalLock = pool.totalLock.add(amount);\\n\\n            if (pool.lockTime > 0) {\\n                UserStake memory userStake = UserStake(\\n                    userInfoDeposits[user].length,\\n                    amount,\\n                    power,\\n                    pool.pid,\\n                    pool.lockTime,\\n                    block.timestamp,\\n                    false\\n                );\\n                userInfo.lockAmount = userInfo.lockAmount.add(amount);\\n                userInfoDeposits[user].push(userStake);\\n                emit StakeLock(user, userStake);\\n            } else {\\n                userInfo.amount = userInfo.amount.add(amount);\\n                emit Stake(user, pool.pid, amount, power);\\n            }\\n        }\\n    }\\n\\n    function withdraw(uint256 amount)\\n    external\\n    virtual\\n    nonReentrant\\n    updateRewardPerShare\\n    updateUserReward(msg.sender)\\n    {\\n        if (amount > 0) {\\n            UserInfo storage userInfo = userInfos[msg.sender];\\n            require(userInfo.amount >= amount, \\\"Insufficient balance\\\");\\n\\n            uint256 power = amount;\\n            userInfo.amount = userInfo.amount.sub(amount);\\n            userInfo.totalPower = userInfo.totalPower.sub(power);\\n            userInfo.ttmDebt = userInfo.totalPower.mul(ttmv2RewardInfo.rewardPerShare).div(1e18);\\n            userInfo.usdtDebt = userInfo.totalPower.mul(usdtRewardInfo.rewardPerShare).div(1e18);\\n\\n            PoolInfo storage pool = poolInfos[0];\\n            pool.totalPower = pool.totalPower.sub(power);\\n            pool.totalLock = pool.totalLock.sub(power);\\n\\n            totalPower = totalPower.sub(amount);\\n\\n            stakeToken.safeTransfer(msg.sender, amount);\\n            emit Withdraw(msg.sender, amount);\\n        }\\n    }\\n\\n    function withdrawStake(uint256[] calldata depositIds)\\n    external\\n    virtual\\n    nonReentrant\\n    updateRewardPerShare\\n    updateUserReward(msg.sender)\\n    {\\n        address user = msg.sender;\\n        if (depositIds.length == 0) {\\n            return;\\n        }\\n        UserInfo storage userInfo = userInfos[user];\\n        uint256 unLockAmount = 0;\\n        uint256 unLockPower = 0;\\n\\n        for (uint256 i = 0; i < depositIds.length; i++) {\\n            uint256 id = depositIds[i];\\n            UserStake storage userStake = userInfoDeposits[user][id];\\n\\n            uint256 timeWindowDiv = block\\n                .timestamp\\n                .sub(userStake.startTime)\\n                .div(userStake.lockTime);\\n\\n            uint256 windowsStart = userStake.startTime.add(\\n                timeWindowDiv.mul(userStake.lockTime)\\n            );\\n            uint256 windowsEnd = windowsStart.add(unlockTimeWindow);\\n\\n            if (\\n                timeWindowDiv > 0 &&\\n                block.timestamp >= windowsStart &&\\n                block.timestamp <= windowsEnd &&\\n                userStake.over == false\\n            ) {\\n                userStake.over = true;\\n\\n                PoolInfo storage pool = poolInfos[userStake.poolId];\\n                pool.totalPower = pool.totalPower.sub(userStake.power);\\n                pool.totalLock = pool.totalLock.sub(userStake.amount);\\n\\n                unLockAmount = unLockAmount.add(userStake.amount);\\n                unLockPower = unLockPower.add(userStake.power);\\n                emit WithdrawLock(user, userStake);\\n            }\\n        }\\n        if (unLockPower > 0) {\\n            userInfo.lockAmount = userInfo.lockAmount.sub(unLockAmount);\\n            userInfo.totalPower = userInfo.totalPower.sub(unLockPower);\\n            userInfo.ttmDebt = userInfo.totalPower.mul(ttmv2RewardInfo.rewardPerShare).div(1e18);\\n            userInfo.usdtDebt = userInfo.totalPower.mul(usdtRewardInfo.rewardPerShare).div(1e18);\\n            totalPower = totalPower.sub(unLockPower);\\n            stakeToken.safeTransfer(user, unLockAmount);\\n        }\\n    }\\n\\n    function userDepositsTotal(address user) external view returns (uint256) {\\n        return userInfoDeposits[user].length;\\n    }\\n\\n    function userDepositByIndex(address user, uint256 index)\\n    external\\n    view\\n    returns (UserStake memory)\\n    {\\n        return userInfoDeposits[user][index];\\n    }\\n\\n    function userDeposits(\\n        address user,\\n        uint256 offset,\\n        uint256 size\\n    ) external view returns (UserStake[] memory) {\\n        UserStake[] memory stakeList = userInfoDeposits[user];\\n        if (offset >= stakeList.length) {\\n            return new UserStake[](0);\\n        }\\n        // length = 2\\n        // offset = 0 size = 3\\n        // max size = 2 - 0 = 2\\n        if (size >= stakeList.length - offset) {\\n            size = stakeList.length - offset;\\n        }\\n\\n        UserStake[] memory result = new UserStake[](size);\\n        for (uint256 i = 0; i < size; i++) {\\n            result[i] = stakeList[offset + i];\\n        }\\n        return result;\\n    }\\n\\n    function claim()\\n    external\\n    virtual\\n    noEmergency\\n    nonReentrant\\n    updateRewardPerShare\\n    updateUserReward(msg.sender)\\n    {\\n        UserInfo storage userInfo = userInfos[msg.sender];\\n        if (userInfo.ttmReward > 0) {\\n            uint256 reward = userInfo.ttmReward;\\n            userInfo.ttmReward = 0;\\n            userInfo.ttmTotalIncome = userInfo.ttmTotalIncome.add(reward);\\n            ttmv2Token.safeTransfer(msg.sender, reward);\\n            emit Claimed(msg.sender, address(ttmv2Token), reward);\\n        }\\n        if (userInfo.usdtReward > 0) {\\n            uint256 reward = userInfo.usdtReward;\\n            userInfo.usdtReward = 0;\\n            userInfo.usdtTotalIncome = userInfo.usdtTotalIncome.add(reward);\\n            usdtToken.safeTransfer(msg.sender, reward);\\n            emit Claimed(msg.sender, address (usdtToken),reward);\\n        }\\n    }\\n\\n    function updatePoolInfo(\\n        uint256 pid,\\n        uint256 weight,\\n        uint256 lockTime\\n    ) external virtual onlyOwner verifyPid(pid) updateRewardPerShare {\\n        require(pid >= 0 && weight >= 1e18 && lockTime >= 0, \\\"!params\\\");\\n        PoolInfo storage pool = poolInfos[pid];\\n        pool.weight = weight;\\n        pool.lockTime = lockTime;\\n        emit UpdatePool(pool.pid, pool.weight, pool.lockTime);\\n    }\\n}\"\r\n    },\r\n    \"contracts/ttmv2/FireToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../libraries/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"../libraries/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"../libraries/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"../lib/Emergency.sol\\\";\\r\\n\\r\\n\\r\\ncontract FireToken is ERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public RATE_DENOMINATOR = 10000;\\r\\n    uint256 public buyFeeRate = 500;\\r\\n    uint256 public minSellFeeRate = 500;\\r\\n    uint256 public maxSellFeeRate = 3200;\\r\\n\\r\\n    uint256 public lpFeeRate = 6000;\\r\\n    uint256 public burnFeeRate = 2000;\\r\\n    uint256 public projectPartyFeeRate = 2000;\\r\\n\\r\\n    address public lpPoolFeeTo;\\r\\n    address public projectFeeTo;\\r\\n    address public burnFeeTo = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n\\r\\n    address public tokenUsdt;\\r\\n    address public uniswapV2Pair;\\r\\n    address public addLpTool;\\r\\n    Emergency public emergencyContract;\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n\\r\\n    uint256 public dayTime = 1 days;\\r\\n    uint256 public dayTimePadding = 21 hours;\\r\\n\\r\\n    struct Price {\\r\\n        uint256 reserveA;\\r\\n        uint256 reserveB;\\r\\n        uint256 current;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Price) public dayOpenPriceMapping;\\r\\n    mapping(address => bool) public whiteList;\\r\\n\\r\\n\\r\\n    constructor(address router_, address tokenUsdt_, address addLpTool_, address projectFeeTo_, address lpPoolFeeTo_, uint256 dayTime_, uint256 dayTimePadding_) public ERC20('Fire', 'Fire')  {\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router_);\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), tokenUsdt_);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n        tokenUsdt = tokenUsdt_;\\r\\n        projectFeeTo = projectFeeTo_;\\r\\n        addLpTool = addLpTool_;\\r\\n        lpPoolFeeTo = lpPoolFeeTo_;\\r\\n        dayTime = dayTime_;\\r\\n        dayTimePadding = dayTimePadding_;\\r\\n        emergencyContract = new Emergency();\\r\\n        emergencyContract.setEmergency(true);\\r\\n    }\\r\\n\\r\\n    function setWhiteList(address addr_, bool state_) external onlyOwner {\\r\\n        whiteList[addr_] = state_;\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) external {\\r\\n        require(whiteList[msg.sender], \\\"Token: invalid caller\\\");\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getReserves() public view returns (uint reserveA, uint reserveB) {\\r\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\\r\\n        (reserveA, reserveB) = address(this) == IUniswapV2Pair(uniswapV2Pair).token0() ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        updatePrice();\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, amount);\\r\\n            return;\\r\\n        }\\r\\n        bool isBuy = uniswapV2Pair == from;\\r\\n        bool isSell = uniswapV2Pair == to;\\r\\n        uint feeRate = 0;\\r\\n        if (isBuy) {\\r\\n            feeRate = buyFeeRate; // remove 5% & buy 5%\\r\\n        } else if (isSell) {\\r\\n            feeRate = (from == addLpTool) ? 0 : getSellFeeRate(); // add lp 0% & sell\\r\\n        }\\r\\n        if (feeRate > 0) {\\r\\n            uint256 fees = amount.mul(feeRate).div(RATE_DENOMINATOR);\\r\\n            if (fees > 0) {\\r\\n                amount = amount.sub(fees);\\r\\n                super._transfer(from, address(this), fees);\\r\\n                if (fees > 0) {\\r\\n                    sendTokenFee(fees);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function sendTokenFee(uint256 fees) private {\\r\\n        uint256 lpFee = fees.mul(lpFeeRate).div(RATE_DENOMINATOR);\\r\\n        super._transfer(address(this), lpPoolFeeTo, lpFee);\\r\\n\\r\\n        uint256 burnFee = fees.mul(burnFeeRate).div(RATE_DENOMINATOR);\\r\\n        super._transfer(address(this), burnFeeTo, burnFee);\\r\\n\\r\\n        uint256 projectPartyFee = fees.mul(projectPartyFeeRate).div(RATE_DENOMINATOR);\\r\\n        super._transfer(address(this), projectFeeTo, projectPartyFee);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getDailyChange() public view returns (int256) {\\r\\n        (uint reserveA, uint reserveB) = getReserves();\\r\\n        if (reserveA <= 0 || reserveB <= 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 currentPrice = reserveB.mul(1e18).div(reserveA);\\r\\n        uint256 dayUnixTime = getTimeKey();\\r\\n        Price storage price = dayOpenPriceMapping[dayUnixTime];\\r\\n        if (price.current == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 lastPrice = price.current;\\r\\n        return ((int256(currentPrice) - int256(lastPrice)) * int256(RATE_DENOMINATOR)) / int256(lastPrice);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getSellFeeRate() public view returns (uint256){\\r\\n        int256 change = getDailyChange();\\r\\n        // up 0.5%\\r\\n        if (change >= - 50) {\\r\\n            return minSellFeeRate;\\r\\n        }\\r\\n        // -0.5% 5%\\r\\n        // -0.1% 10%\\r\\n        // -1.1% 11%\\r\\n        // -9.0%  90%\\r\\n        if (change < - 50 && change >= - 320) {\\r\\n            return uint256(change * - 1) * 10;\\r\\n        }\\r\\n        return maxSellFeeRate;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getTimeKey() public view returns (uint256) {\\r\\n        return block.timestamp.div(dayTime).mul(dayTime).add(dayTimePadding);\\r\\n    }\\r\\n\\r\\n    function updatePrice() private {\\r\\n        uint256 dayUnixTime = getTimeKey();\\r\\n        Price storage price = dayOpenPriceMapping[dayUnixTime];\\r\\n        if (price.current == 0) {\\r\\n            (uint reserveA, uint reserveB) = getReserves();\\r\\n            if (reserveA > 0 && reserveB > 0) {\\r\\n                uint256 currentPrice = uint256(reserveB).mul(1e18).div(uint256(reserveA));\\r\\n                dayOpenPriceMapping[dayUnixTime] = Price(uint256(reserveA), uint256(reserveB), currentPrice);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ttm_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dayTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayTimePadding_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usdtToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"}],\"name\":\"SetEmergency\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MaxAddUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UserMaxAddUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidity2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addMaxLimitRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"checkPoolLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"checkUserLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayTimePadding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentUseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCurrentUserUseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDayCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserMaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStake\",\"outputs\":[{\"internalType\":\"contract FireLpStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"preAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"convert_\",\"type\":\"address\"}],\"name\":\"setConvert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"emergency_\",\"type\":\"bool\"}],\"name\":\"setEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpStake_\",\"type\":\"address\"}],\"name\":\"setLpStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addMaxLimitRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxAddUsdt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UserMaxAddUsdt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"}],\"name\":\"setMaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ttmV2_\",\"type\":\"address\"}],\"name\":\"setTtmV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"sortTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttmV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usdtMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FireAddLiquidity", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000002728c49f42f4ac5a38da0080b27ded5ec04b05cc0000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}