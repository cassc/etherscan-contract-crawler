{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// https://cbomber.io\r\n// CryptoBomberData\r\npragma solidity ^0.8.8;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract CryptoBomberData is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct userInfo {\r\n        uint256 code;\r\n        uint256 referrerCode;\r\n        uint256 exp; \r\n        uint256 credit; \r\n        uint256 invitation;\r\n        bool state;\r\n    }\r\n\r\n    mapping (address => bool) private systemUser;\r\n    mapping (address => userInfo) private userInfoMap;\r\n    mapping(uint256 => address) private codes;\r\n\r\n    uint256 private _currentReferrerCode = 0;\r\n\r\n    event Register(address referrer,uint256 code,uint256 time);\r\n\r\n    modifier onlySystem() {\r\n        require(isSystem(_msgSender()) || owner() == _msgSender(), \"Role: caller does not have the System role or above\");\r\n        _;\r\n    }\r\n\r\n    function isSystem(address account) public view returns (bool) {\r\n        return systemUser[account];\r\n    }\r\n\r\n    function addSystem(address account) public onlyOwner{\r\n        systemUser[account] = true;\r\n    }\r\n\r\n    function removeSystem(address account) public onlyOwner{\r\n        systemUser[account] = false;\r\n    }\r\n\r\n    function getNextReferrerCode() public view returns (uint256) {\r\n        return _currentReferrerCode.add(1);\r\n    }\r\n\r\n    function _getNextReferrerCode() internal view returns (uint256) {\r\n        return _currentReferrerCode.add(1);\r\n    }\r\n\r\n    function _incrementReferrerCode() internal  {\r\n        _currentReferrerCode ++;\r\n    }\r\n    \r\n    function addExp(address _user,uint256 _value) public onlySystem{\r\n         if(userInfoMap[_user].state){\r\n            userInfoMap[_user].exp = userInfoMap[_user].exp.add(_value);\r\n        }else{\r\n            userInfoMap[_user] = userInfo({\r\n            code : 0,\r\n            referrerCode : 0,\r\n            exp : _value,\r\n            credit : 0,\r\n            invitation : 0,\r\n            state : true\r\n            });\r\n        }\r\n    }\r\n\r\n    function subExp(address _user,uint256 _value) public onlySystem{\r\n        userInfoMap[_user].exp = userInfoMap[_user].exp.sub(_value);\r\n    }\r\n\r\n    function exp(address _user) public view returns(uint256){\r\n        return userInfoMap[_user].exp;\r\n    }\r\n\r\n    function addCredit(address _user,uint256 _value) public onlySystem{\r\n        if(userInfoMap[_user].state){\r\n            userInfoMap[_user].credit = userInfoMap[_user].credit.add(_value);\r\n        }else{\r\n            userInfoMap[_user] = userInfo({\r\n            code : 0,\r\n            referrerCode : 0,\r\n            exp : 0,\r\n            credit : _value,\r\n            invitation : 0,\r\n            state : true\r\n            });\r\n        }\r\n    }\r\n\r\n    function addInvitation(address _referrer,uint256 _value) public onlySystem{\r\n        if(userInfoMap[_referrer].state){\r\n            userInfoMap[_referrer].invitation = userInfoMap[_referrer].invitation.add(_value);\r\n        }else{\r\n            userInfoMap[_referrer] = userInfo({\r\n            code : 0,\r\n            referrerCode : 0,\r\n            exp : 0,\r\n            credit : 0,\r\n            invitation : _value,\r\n            state : true\r\n            });\r\n        }\r\n    }\r\n\r\n    function subCredit(address _user,uint256 _value) public onlySystem{\r\n        userInfoMap[_user].credit = userInfoMap[_user].credit.sub(_value);\r\n    }\r\n\r\n    function credit(address _user) public view returns(uint256){\r\n        return userInfoMap[_user].credit;\r\n    }\r\n\r\n    function invitation(address _user) public view returns(uint256){\r\n        return userInfoMap[_user].invitation;\r\n    }\r\n\r\n    function referrerCode(address _user) public view returns(uint256){\r\n        return userInfoMap[_user].referrerCode;\r\n    }\r\n\r\n    function referrerAddress(address _user) public view returns(address){\r\n        return codes[userInfoMap[_user].referrerCode];\r\n    }\r\n\r\n    function referrerCodeAssociatedAddress(uint256 _code) public view returns(address){\r\n        return codes[_code];\r\n    }\r\n\r\n    function getRegisterReferrerCode(address _user) public view returns(uint256){\r\n        return userInfoMap[_user].code;\r\n    }\r\n\r\n    function setReferrer(address _user,uint256 _code) public onlySystem{\r\n        if(userInfoMap[_user].state){\r\n            userInfoMap[_user].referrerCode = _code;\r\n        }else{\r\n            userInfoMap[_user] = userInfo({\r\n            code : 0,\r\n            referrerCode : _code,\r\n            exp : 0,\r\n            credit : 0,\r\n            invitation : 0,\r\n            state : true\r\n            });\r\n        }\r\n    }\r\n\r\n    function register() public {\r\n        require(userInfoMap[_msgSender()].code == 0,\"error: Address is registered\");\r\n\r\n        uint256 code = _getNextReferrerCode();\r\n        codes[code] = _msgSender();\r\n        if(userInfoMap[_msgSender()].state){\r\n            userInfoMap[_msgSender()].code = code;\r\n        }else{\r\n            userInfoMap[_msgSender()] = userInfo({\r\n            code : code,\r\n            referrerCode : 0,\r\n            exp : 0,\r\n            credit : 0,\r\n            invitation : 0,\r\n            state : true\r\n            });\r\n        }\r\n        _incrementReferrerCode();\r\n        emit Register( _msgSender(),code,block.timestamp);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addExp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addInvitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"credit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"exp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextReferrerCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRegisterReferrerCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"invitation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSystem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"referrerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"referrerCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"referrerCodeAssociatedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subExp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoBomberData", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d5d8bd4174fa5946b6e66a63f38119f43b74243af3880cd6ad2c792b13cf462"}