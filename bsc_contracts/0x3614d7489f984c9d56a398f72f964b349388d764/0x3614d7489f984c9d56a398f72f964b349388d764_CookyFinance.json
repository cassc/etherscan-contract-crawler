{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/tokens/CookyFinance.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../abstracts/Auth.sol\\\";\\nimport \\\"../abstracts/BEP20.sol\\\";\\nimport \\\"../interfaces/IBEP20.sol\\\";\\nimport \\\"../interfaces/IBEP20Metadata.sol\\\";\\nimport \\\"../interfaces/IDEXFactory.sol\\\";\\nimport \\\"../interfaces/IDEXRouter.sol\\\";\\nimport \\\"../libs/SafeBEP20.sol\\\";\\nimport \\\"../libs/Packer.sol\\\";\\n\\ncontract CookyFinance is BEP20, Auth {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    address private constant ADDR_DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address private constant ADDR_ZERO = 0x0000000000000000000000000000000000000000;\\n\\n    string private constant TOKEN_NAME = \\\"Cooky Finance\\\";\\n    string private constant TOKEN_SYMBOL = \\\"CSF\\\";\\n    uint256 private constant TOTAL_SUPPLY = 1 * 10**9 * 10**18;\\n\\n    mapping (address => bool) private _feeExempt;\\n    mapping (address => bool) private _maxWalletExempt;\\n    mapping (address => bool) private _maxTxExempt;\\n\\n    uint256 public maxTxAmount = TOTAL_SUPPLY.div(100).mul(1);\\n    uint256 public maxWalletSize = TOTAL_SUPPLY.div(100).mul(2);\\n\\n    // Will be lowered after initial launch to prevent automated wallets, see BuyFeesUpdated event.\\n    uint256 public buyMarketingFee = 1800;\\n    uint256 public buyDevelopmentFee = 1200;\\n    uint256 public buyLiquidityFee = 1800;\\n    uint256 public buyStakingFee = 600;\\n    uint256 public buyTotalFee = buyMarketingFee + buyDevelopmentFee + buyLiquidityFee + buyStakingFee;\\n\\n    uint256 public sellMarketingFee = 300;\\n    uint256 public sellDevelopmentFee = 400;\\n    uint256 public sellLiquidityFee = 300;\\n    uint256 public sellStakingFee = 400;\\n    uint256 public sellTotalFee = sellMarketingFee + sellDevelopmentFee + sellLiquidityFee + sellStakingFee;\\n\\n    mapping (address => bool) public amms;\\n\\n    bool public swapEnabled = false;\\n    uint256 public swapThreshold = TOTAL_SUPPLY.div(10000).mul(10);\\n\\n    address public pair;\\n    address public marketingWallet;\\n    address public developmentWallet;\\n    address public stakingWallet;\\n    address public liquidityReceiver;\\n\\n    IDEXRouter public router;\\n\\n    uint256 private _buySellCounter = Packer.pack(0, 0);\\n    bool private _swapping;\\n\\n    event SellFeesUpdated(uint256 previousTotal, uint256 nextTotal);\\n    event BuyFeesUpdated(uint256 previousTotal, uint256 nextTotal);\\n    event MaxTxAmountUpdated(uint256 previous, uint256 next);\\n    event MaxWalletSizeUpdated(uint256 previous, uint256 next);\\n    event DevelopmentWalletUpdated(address previous, address next);\\n    event MarketingWalletUpdated(address previous, address next);\\n    event StakingWalletUpdated(address previous, address next);\\n    event LiquidityReceiverUpdated(address previous, address next);\\n    event UnhandledError(bytes reason);\\n\\n    constructor(\\n        address initialOwner,\\n        address[5] memory _addrs // 0 = Router, 1 = Dev, 2 = Marketing, 3 = Staking Wallet, 4 = Liquidity Receiver\\n    ) Auth(initialOwner) BEP20(TOKEN_NAME, TOKEN_SYMBOL) {\\n\\n        router = IDEXRouter(_addrs[0]);\\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\\n\\n        _approve(address(this), address(router), type(uint256).max);\\n\\n        developmentWallet = _addrs[1];\\n        marketingWallet = _addrs[2];\\n        stakingWallet = _addrs[3];\\n        liquidityReceiver = _addrs[4];\\n\\n        amms[pair] = true;\\n\\n        _feeExempt[initialOwner] = true;\\n        _feeExempt[address(this)] = true;\\n        _feeExempt[ADDR_DEAD] = true;\\n        _feeExempt[developmentWallet] = true;\\n        _feeExempt[marketingWallet] = true;\\n        _feeExempt[stakingWallet] = true;\\n\\n        _maxWalletExempt[initialOwner] = true;\\n        _maxWalletExempt[address(this)] = true;\\n        _maxWalletExempt[ADDR_DEAD] = true;\\n\\n        _maxTxExempt[initialOwner] = true;\\n        _maxTxExempt[address(this)] = true;\\n        _maxTxExempt[ADDR_DEAD] = true;\\n\\n        _mint(initialOwner, TOTAL_SUPPLY);\\n    }\\n \\n    receive() external payable {}\\n\\n     // #region Transfer and Fees\\n    function _transfer(address from, address to, uint256 amount) internal override {\\n        require(from != ADDR_ZERO, \\\"CSF: transfer-from-zero\\\");\\n        require(to != ADDR_ZERO, \\\"CSF: transfer-to-zero\\\");\\n\\n        if (amount == 0 || _swapping) {\\n            super._transfer(from, to, amount);\\n        } else {\\n            if (_shouldSwapBack(from)) {\\n                _swapping = true;\\n                _swapBack();\\n                _swapping = false;\\n            }\\n\\n            _checkTxLimit(from, amount);\\n            \\n            bool takeFee = _shouldTakeFee(from, to);\\n            uint256 amountAfterFees = amount;\\n\\n            _checkMaxWallet(from, to, amountAfterFees);\\n\\n            if (takeFee) {\\n                amountAfterFees = _takeFee(from, to, amount);\\n            }\\n\\n            super._transfer(from, to, amountAfterFees);\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines if the transaction is either a buy or a sell and takes the correct fee amount.\\n     */\\n    function _takeFee(address from, address to, uint256 amount) internal returns (uint256) {\\n        bool isSell = amms[to];\\n        uint256 feePercentage = isSell ? sellTotalFee : buyTotalFee;\\n        uint256 feeAmount = amount.mul(feePercentage).div(10000);\\n\\n        uint128 buys;\\n        uint128 sells;\\n\\n        (buys, sells) = Packer.unpack(_buySellCounter);\\n\\n        if (isSell) {\\n            _buySellCounter = Packer.pack(buys, sells + 1);\\n        } else {\\n            _buySellCounter = Packer.pack(buys + 1, sells);\\n        }\\n\\n        super._transfer(from, address(this), feeAmount);\\n\\n        return amount.sub(feeAmount);\\n    }\\n\\n    /**\\n     * @dev Determines if a fee should be charged for the given transaction\\n     */\\n    function _shouldTakeFee(address from, address to) internal view returns (bool) {\\n        return !_feeExempt[from] && !_feeExempt[to] && (amms[from] || amms[to]);\\n    }\\n\\n    /**\\n     * @dev Checks if the tx limit applicable and not exceeded.\\n     */\\n    function _checkTxLimit(address sender, uint256 amount) internal view {\\n        require (amount <= maxTxAmount || _maxTxExempt[sender] || isAuthorized(sender), \\\"CSF: max-tx-size-exceeded\\\");\\n    }\\n\\n    /**\\n     * @dev Checks if max wallet size applicable and not exceeded.\\n     */\\n    function _checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\\n        uint256 heldTokens = balanceOf(recipient);\\n\\n        require ((heldTokens + amount) <= maxWalletSize || _maxWalletExempt[recipient] || amms[recipient] || isAuthorized(sender), \\\"CSF: max-wallet-exceeded\\\");\\n    }\\n    // #endregion\\n\\n    // #region Swapback\\n    /**\\n     * @dev Contract swaps back when: enabled, not already swapping, from address isn't an AMM and threshold is met.\\n     */\\n    function _shouldSwapBack(address from) internal view returns (bool) {\\n        return swapEnabled && !_swapping && !amms[from] && (balanceOf(address(this)) >= swapThreshold);\\n    }\\n\\n    /**\\n     * Executes the actual swapback, calculates the ratio between buys/sells to transfer the correct share.\\n     */\\n    function _swapBack() internal {\\n        uint128 buys;\\n        uint128 sells;\\n\\n        (buys, sells) = Packer.unpack(_buySellCounter);\\n\\n        if (buys == 0 && sells == 0) {\\n            return;\\n        }\\n\\n        uint256 totalBuysSells = buys + sells;\\n\\n        uint256 liquidityShare = (buyLiquidityFee.mul(buys) + sellLiquidityFee.mul(sells)).div(totalBuysSells); \\n        uint256 marketingShare = (buyMarketingFee.mul(buys) + sellMarketingFee.mul(sells)).div(totalBuysSells);\\n        uint256 developmentShare = (buyDevelopmentFee.mul(buys) + sellDevelopmentFee.mul(sells)).div(totalBuysSells);\\n        uint256 reflectionShare = (buyStakingFee).mul(buys) + sellStakingFee.mul(sells).div(totalBuysSells);\\n\\n        uint256 totalShares = liquidityShare + marketingShare + developmentShare + reflectionShare;\\n\\n        uint256 tokensForLiquidity = swapThreshold.mul(liquidityShare).div(totalShares).div(2);\\n        uint256 tokensToSwap = swapThreshold.sub(tokensForLiquidity);\\n\\n        uint256 nativeBalanceBefore = address(this).balance;\\n\\n        _swapForNative(tokensToSwap);\\n\\n        uint256 receivedNativeTokens = address(this).balance.sub(nativeBalanceBefore);\\n\\n        // In case an error has occurred while swapping, do not block the ongoing transfer.\\n        if (receivedNativeTokens == 0) {\\n            return;\\n        }\\n\\n        uint256 totalNativeShares = totalShares.sub(liquidityShare.div(2));\\n\\n        uint256 nativeForLiquidity = receivedNativeTokens.mul(liquidityShare).div(totalNativeShares).div(2);\\n        uint256 spentNative = nativeForLiquidity;\\n\\n        if (tokensForLiquidity > 0) {\\n            spentNative = _addLiquidity(tokensForLiquidity, nativeForLiquidity);\\n        }\\n\\n        uint256 nativeForMarketing = receivedNativeTokens.mul(marketingShare).div(totalNativeShares);\\n        uint256 nativeForDevelopment = receivedNativeTokens.mul(developmentShare).div(totalNativeShares);\\n        uint256 nativeForStaking = receivedNativeTokens.sub(spentNative).sub(nativeForMarketing).sub(nativeForDevelopment);\\n\\n        if (nativeForMarketing > 0) {\\n            payable(marketingWallet).transfer(nativeForMarketing);\\n        }\\n\\n        if (nativeForDevelopment > 0) {\\n            payable(developmentWallet).transfer(nativeForDevelopment);\\n        }\\n\\n        if (nativeForStaking > 0) {\\n            payable(stakingWallet).transfer(nativeForStaking);\\n        }\\n\\n        // Reset counter\\n        _buySellCounter = Packer.pack(0, 0);\\n    }\\n\\n    /**\\n     * @dev Adds liquidity\\n     */\\n    function _addLiquidity(uint256 tokenAmount, uint256 nativeTokenAmount) private returns (uint256 spentNative) {\\n        _approve(address(this), address(router), tokenAmount);\\n\\n        (,spentNative,) = router.addLiquidityETH{value: nativeTokenAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            liquidityReceiver,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * Swaps our own token for the pair-native (WBNB) token.\\n     */\\n    function _swapForNative(uint256 amount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        _approve(address(this), address(router), amount);\\n\\n        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amount,\\n            0, // Accept any amount\\n            path,\\n            address(this),\\n            block.timestamp\\n        ) {\\n\\n        } catch (bytes memory reason) {\\n            emit UnhandledError(reason);\\n        }\\n    }\\n    // #endregion\\n\\n    // #region Utility\\n    function getCirculatingSupply() public view returns (uint256) {\\n        return TOTAL_SUPPLY.sub(balanceOf(ADDR_DEAD)).sub(balanceOf(ADDR_ZERO));\\n    }\\n    // #endregion\\n\\n    // #region Administration\\n    /**\\n     * @dev Sets the maximum wallet size to the given (scaled) percentage with a minimum of 1%\\n     */\\n\\n    function setSwapEnabled(bool enabled) external authorized {\\n        require (swapEnabled != enabled, \\\"CSF: value-already-set\\\");\\n\\n        swapEnabled = enabled;\\n    }\\n\\n    function setSwapThreshold(uint256 nextThreshold) external authorized {\\n        require(swapThreshold != nextThreshold, \\\"CSF: value-already-set\\\");\\n\\n        swapThreshold = nextThreshold;\\n    }\\n\\n    /**\\n     * @dev Exempts or subjects the given holder to transaction fees.\\n     */\\n    function setFeeExempt(address holder, bool exempt) external authorized {\\n        require(_feeExempt[holder] != exempt, \\\"CSF: already-set\\\");\\n        \\n        _feeExempt[holder] = exempt;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum wallet size, must be at least 1% of total supply.\\n     */\\n    function setMaxWalletSize(uint256 nextMaxWalletPerc) external authorized {\\n        require(nextMaxWalletPerc >= 100, \\\"CSF: max-wallet-lt-1-perc\\\");\\n\\n        uint256 nextMaxWalletSize = TOTAL_SUPPLY.div(10000).mul(nextMaxWalletPerc);\\n        emit MaxWalletSizeUpdated(maxWalletSize, nextMaxWalletSize);\\n        maxWalletSize = nextMaxWalletSize;\\n    }\\n\\n    /**\\n     * @dev Exempts or subjects the given holder to max wallet size.\\n     */\\n    function setMaxWalletExempt(address holder, bool exempt) external authorized {\\n        require(_maxWalletExempt[holder] != exempt, \\\"CSF: already-set\\\");\\n\\n        _maxWalletExempt[holder] = exempt;\\n    }\\n\\n    /**\\n     * @dev Sets the maximum tx amount, must be at least 0.5% of total supply.\\n     */\\n    function setMaxTxAmount(uint256 nextMaxTxAmountPerc) external authorized {\\n        require(nextMaxTxAmountPerc >= 50, \\\"CSF: max-tx-lt-.5-perc\\\");\\n\\n        uint256 nextMaxTxAmount = TOTAL_SUPPLY.div(10000).mul(nextMaxTxAmountPerc);\\n        emit MaxTxAmountUpdated(maxTxAmount, nextMaxTxAmount);\\n        maxTxAmount = nextMaxTxAmount;\\n    }\\n\\n    /**\\n     * @dev Exempts or subjects the given holder to max tx size.\\n     */\\n    function setMaxTxExempt(address holder, bool exempt) external authorized {\\n        require(_maxTxExempt[holder] != exempt, \\\"CSF: already-set\\\");\\n\\n        _maxTxExempt[holder] = exempt;\\n    }\\n\\n    /**\\n     * @dev Exempts or subjects given holder from all limitations (fees, wallet and tx)\\n     */\\n    function setExempt(address holder, bool exempt) external authorized {\\n        _feeExempt[holder] = exempt;\\n        _maxWalletExempt[holder] = exempt;\\n        _maxTxExempt[holder] = exempt;\\n    }\\n\\n    /**\\n     * @dev Marks an address as automated market maker (or not).\\n     */\\n    function setAmm(address amm, bool isMaker) external authorized {\\n        require(amms[amm] != isMaker, \\\"CSF: already-set\\\");\\n\\n        amms[amm] = isMaker;\\n    }\\n\\n    /**\\n     * @dev Update the marketing wallet address and automatically exempt it from fees and max wallet size.\\n     */\\n    function setMarketingWallet(address nextMarketingWallet) external authorized {\\n        require(nextMarketingWallet != marketingWallet, \\\"CSF: value-already-set\\\");\\n\\n        _feeExempt[nextMarketingWallet] = true;\\n\\n        emit MarketingWalletUpdated(marketingWallet, nextMarketingWallet);\\n\\n        marketingWallet = nextMarketingWallet;\\n    }\\n\\n    /**\\n     * @dev Update the development wallet address and automatically exempt it from fees and max wallet size.\\n     */\\n    function setDevelopmentWallet(address nextDevelopmentWallet) external authorized {\\n        require(nextDevelopmentWallet != developmentWallet, \\\"CSF: value-already-set\\\");\\n\\n        _feeExempt[nextDevelopmentWallet] = true;\\n\\n        emit DevelopmentWalletUpdated(developmentWallet, nextDevelopmentWallet);\\n\\n        developmentWallet = nextDevelopmentWallet;\\n    }\\n\\n    /**\\n     * @dev Update the staking wallet address and automatically exempt it from fees and max wallet size.\\n     */\\n    function setStakingWallet(address nextStakingWallet) external authorized {\\n        require(nextStakingWallet != stakingWallet, \\\"CSF: value-already-set\\\");\\n\\n        _feeExempt[stakingWallet] = true;\\n\\n        emit StakingWalletUpdated(stakingWallet, nextStakingWallet);\\n\\n        stakingWallet = nextStakingWallet;\\n    }\\n\\n    /**\\n     * @dev Update the liquidity receiver address\\n     */\\n    function setLiquidityReceiver(address nextLiquidityReceiver) external authorized {\\n        require(nextLiquidityReceiver != liquidityReceiver, \\\"CSF: value-already-set\\\");\\n\\n        emit LiquidityReceiverUpdated(liquidityReceiver, nextLiquidityReceiver);\\n\\n        liquidityReceiver = nextLiquidityReceiver;\\n    }\\n\\n    /**\\n     * @dev Updates the fees-on-buy with a combined maximum of 20% and a single maximum of 10%\\n     */\\n    function setBuyFees(uint256 nextMarketingFee, uint256 nextDevelopmentFee, uint256 nextLiquidityFee, uint256 nextStakingFee) external authorized {\\n        require((nextMarketingFee + nextDevelopmentFee + nextLiquidityFee + nextStakingFee) <= 2000, \\\"CSF: total-fees-exceed-20-percent\\\");\\n        require(nextMarketingFee <= 1000 && nextDevelopmentFee <= 1000 && nextLiquidityFee <= 1000 && nextStakingFee <= 1000, \\\"CSF: single-fee-exceeds-10-percent\\\");\\n\\n        buyMarketingFee = nextMarketingFee;\\n        buyDevelopmentFee = nextDevelopmentFee;\\n        buyLiquidityFee = nextLiquidityFee;\\n        buyStakingFee = nextStakingFee;\\n\\n        emit BuyFeesUpdated(buyTotalFee, buyMarketingFee + buyDevelopmentFee + buyLiquidityFee + nextStakingFee);\\n        \\n        buyTotalFee = buyMarketingFee + buyDevelopmentFee + buyLiquidityFee + nextStakingFee;\\n    }\\n\\n    /**\\n     * @dev Updates the fees-on-sell with a combined maximum of 20% and a single maximum of 10%\\n     */\\n    function setSellFees(uint256 nextMarketingFee, uint256 nextDevelopmentFee, uint256 nextLiquidityFee, uint256 nextStakingFee) external authorized {\\n        require((nextMarketingFee + nextDevelopmentFee + nextLiquidityFee + nextStakingFee) <= 2000, \\\"CSF: total-fees-exceed-20-percent\\\");\\n        require(nextMarketingFee <= 1000 && nextDevelopmentFee <= 1000 && nextLiquidityFee <= 1000 && nextStakingFee <= 1000, \\\"CSF: single-fee-exceeds-10-percent\\\");\\n\\n        sellMarketingFee = nextMarketingFee;\\n        sellDevelopmentFee = nextDevelopmentFee;\\n        sellLiquidityFee = nextLiquidityFee;\\n        sellStakingFee = nextStakingFee;\\n\\n        emit SellFeesUpdated(sellTotalFee, sellMarketingFee + sellDevelopmentFee + sellLiquidityFee + nextStakingFee);\\n\\n        sellTotalFee = sellMarketingFee + sellDevelopmentFee + sellLiquidityFee + nextStakingFee;\\n    }\\n    // #endregion\\n\\n    // #region Rescue\\n    \\n    /**\\n     * @dev Rescues stuck balance of any BEP20-Token.\\n     */\\n    function rescueBalance(IBEP20 token, uint256 percentage) external authorized {\\n        require(percentage >= 0 && percentage <= 100, \\\"CSF: value-not-between-0-and-100\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        require(balance > 0, \\\"CSF: contract-has-no-balance\\\");\\n        token.transfer(_msgSender(), balance.mul(percentage).div(100));\\n    }\\n\\n    /**\\n     * @dev Rescues stuck balance of our own token.\\n     */\\n    function rescueOwnBalance(uint256 percentage) external authorized {\\n        require(percentage >= 0 && percentage <= 100, \\\"CSF: value-not-between-0-and-100\\\");\\n\\n        uint256 amount = balanceOf(address(this));\\n        \\n        super._transfer(address(this), _msgSender(), amount.mul(percentage).div(100));\\n    }\\n\\n    /**\\n     * Rescues stuck native (BRISE) balance.\\n     */\\n    function rescueNativeBalance(uint256 percentage) external authorized {\\n        require(percentage >= 0 && percentage <= 100, \\\"CSF: value-not-between-0-and-100\\\");\\n\\n        uint256 nativeAmount = address(this).balance;\\n        payable(_msgSender()).transfer(nativeAmount.mul(percentage).div(100));\\n    }\\n    // #endregion\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/Auth.sol\": {\r\n      \"content\": \"\\n//SPDX-License-Identifier: MPL-2.0\\npragma solidity ^0.8.0;\\n\\nabstract contract Auth {\\n    address internal _owner;\\n    mapping (address => bool) internal authorizations;\\n\\n    constructor(address initialOwner) {\\n        _owner = initialOwner;\\n        authorizations[initialOwner] = true;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner(msg.sender), \\\"not-owner\\\"); _;\\n    }\\n\\n    modifier authorized() {\\n        require(isAuthorized(msg.sender), \\\"not-authorized\\\"); _;\\n    }\\n\\n    function authorize(address adr) public onlyOwner {\\n        authorizations[adr] = true;\\n    }\\n\\n    function unauthorize(address adr) public onlyOwner {\\n        authorizations[adr] = false;\\n    }\\n\\n    function isOwner(address account) public view returns (bool) {\\n        return account == _owner;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function isAuthorized(address adr) public view returns (bool) {\\n        return authorizations[adr];\\n    }\\n\\n    function transferOwnership(address payable nextOwner) public onlyOwner {\\n        _owner = nextOwner;\\n        authorizations[nextOwner] = true;\\n        emit OwnershipTransferred(nextOwner);\\n    }\\n\\n    event OwnershipTransferred(address owner);\\n}\"\r\n    },\r\n    \"contracts/abstracts/BEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/IBEP20.sol\\\";\\nimport \\\"../interfaces/IBEP20Metadata.sol\\\";\\n\\ncontract BEP20 is Context, IBEP20, IBEP20Metadata {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\n// Based on OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\npragma solidity ^0.8.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBEP20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MPL-2.0\\n// Based on OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBEP20.sol\\\";\\n\\ninterface IBEP20Metadata is IBEP20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDEXFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDEXFactory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDEXRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/libs/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.6.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IBEP20.sol\\\";\\n\\nlibrary SafeBEP20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBRC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBRC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeBRC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBRC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeBRC20: BRC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libs/Packer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MPL-2.0\\npragma solidity ^0.8.0;\\n\\nlibrary Packer {\\n    \\n    function pack(uint128 a, uint128 b) internal pure returns (uint256 packed) {\\n        return uint256(a) << 128 | uint256(b);\\n    }\\n\\n    function unpack(uint256 packed) internal pure returns (uint128 a, uint128 b) {\\n        a = uint128(packed >> 128);\\n        b = uint128(packed);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 400\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address[5]\",\"name\":\"_addrs\",\"type\":\"address[5]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotal\",\"type\":\"uint256\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"name\":\"DevelopmentWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"name\":\"LiquidityReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"name\":\"MaxWalletSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTotal\",\"type\":\"uint256\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"name\":\"StakingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"UnhandledError\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"rescueBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"rescueNativeBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"rescueOwnBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellStakingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isMaker\",\"type\":\"bool\"}],\"name\":\"setAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextDevelopmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStakingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextDevelopmentWallet\",\"type\":\"address\"}],\"name\":\"setDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextLiquidityReceiver\",\"type\":\"address\"}],\"name\":\"setLiquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextMaxTxAmountPerc\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setMaxTxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextMaxWalletPerc\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextDevelopmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStakingFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nextStakingWallet\",\"type\":\"address\"}],\"name\":\"setStakingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextThreshold\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"nextOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CookyFinance", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "400", "ConstructorArguments": "0000000000000000000000007567d203c9ee602503946f2c4da6120db70d1dd700000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000005712905d6d57d97aca4f06696f3724a50e040c93000000000000000000000000eb5dad58a62d971cfc3373dbb45d92e7aac69036000000000000000000000000ffdbc88edd17c66caec5138f179b9dd6280c5a0c0000000000000000000000007567d203c9ee602503946f2c4da6120db70d1dd7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}