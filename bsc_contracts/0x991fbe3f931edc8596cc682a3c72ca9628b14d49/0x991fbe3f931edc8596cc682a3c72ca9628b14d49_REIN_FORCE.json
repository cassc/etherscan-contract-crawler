{"SourceCode": "pragma solidity >= 0.5.0;\r\n//SPDX-License-Identifier: UNLICENCED\r\ncontract REIN_FORCE{\r\n  \r\n    event Registration(address indexed user, address indexed referrer,string referrerId,uint jpackage,uint bnbAmt);\r\n    event BuyMatrix(address indexed user, uint256 matrixAmt,uint256 matrix,uint256 bnbAmt);\r\n    event UpgradeLevel(address indexed user, uint256 levelAmt,uint256 level,address indexed sponsor,address indexed promoter,uint256 bnbAmt);\r\n    event MagicalMatrix(address indexed user,uint256 matrixAmt, uint256 matrix,uint256 bnbAmt);\r\n    event BuyPool(address indexed user, uint256 poolAmt,string trType,uint256 bnbAmt); \r\n    event UserIncome(address indexed sender, address indexed receiver, uint level, uint256 IncomeAmt,string IncomeType,uint256 bnbAmt);\r\n  \r\n  using SafeMath for uint256;\r\n  address payable public owner;\r\n  uint256 public adminPer=5;  \r\n   address payable public adminWallet;\r\n   address payable public magicalWallet;\r\n   address payable public matrixWallet;\r\n   address payable public authPrice;\r\n  uint256 public usdtPrice=4100000000000000;    //0.0041 BNB   \r\n   mapping(uint8 => uint256) public levelPrice;\r\n   mapping(uint8 => uint256) public magicalMatrix;\r\n   mapping(uint8 => uint256) public matrix;\r\n     \r\n  constructor(address payable ownerAddress,address payable _adminWallet,address payable _magicalWallet,address payable _matrixWallet,address payable _authPrice) public {\r\n    owner = ownerAddress;\r\n    adminWallet=_adminWallet;  \r\n    magicalWallet=_magicalWallet;\r\n    matrixWallet=_matrixWallet;\r\n    authPrice=_authPrice;\r\n\r\n        levelPrice[1] = 20 ;\r\n        levelPrice[2] = 30 ;\r\n        levelPrice[3] = 40 ;\r\n        levelPrice[4] = 60 ;\r\n        levelPrice[5] = 100;\r\n        levelPrice[6] = 200 ;\r\n        levelPrice[7] = 500 ;\r\n        levelPrice[8] = 1000 ;\r\n        levelPrice[9] = 5000 ;\r\n        levelPrice[10] = 10000 ;\r\n\r\n        matrix[1]=50;\r\n        matrix[2]=100;\r\n        matrix[3]=200; \r\n        matrix[4]=400;  \r\n        matrix[5]=800;  \r\n        matrix[6]=1600; \r\n        matrix[7]=3200; \r\n        matrix[8]=6400; \r\n        matrix[9]=12800; \r\n\r\n        magicalMatrix[1]=100;\r\n        magicalMatrix[2]=200;\r\n        magicalMatrix[3]=400; \r\n        magicalMatrix[4]=800;  \r\n        magicalMatrix[5]=1600;  \r\n        magicalMatrix[6]=3200;  \r\n        magicalMatrix[7]=6400;  \r\n        magicalMatrix[8]=12800;  \r\n\r\n  }\r\n    \r\n  function NewRegistration(string memory sponcer_id,address payable referrerAddress) public payable\r\n\t{\r\n        uint256 bnbAmt=levelPrice[1]*usdtPrice;\r\n        require(msg.value>=bnbAmt,\"Invalid BNB Amount\");\r\n        uint256 adminAmt=bnbAmt*adminPer/100;\r\n        uint256 referralbnb=bnbAmt*(100-adminPer)/100;\r\n        if(adminAmt>0)\r\n        {\r\n            adminWallet.transfer(adminAmt);\r\n        }\r\n        referrerAddress.transfer(referralbnb);\r\n \t\t    emit Registration(msg.sender, referrerAddress,sponcer_id,levelPrice[1],bnbAmt);\r\n        emit UserIncome(msg.sender, referrerAddress, 1, levelPrice[1],\"REFERRAL INCOME\",referralbnb);\r\n\t}\r\n\r\n    function buyLevel(address payable referrerAddress,address payable promoterAddress,uint8 level) public payable\r\n\t{\r\n        uint256 bnbAmt=levelPrice[level]*usdtPrice;\r\n        require(msg.value>=bnbAmt,\"Invalid BNB Amount\");\r\n        uint256 adminAmt=bnbAmt*adminPer/100;\r\n        uint256 incomeAmt=(bnbAmt-adminAmt)/2;\r\n        if(adminAmt>0)\r\n        {\r\n            adminWallet.transfer(adminAmt);\r\n        }\r\n        referrerAddress.transfer(incomeAmt);\r\n        promoterAddress.transfer(incomeAmt);\r\n        emit UpgradeLevel(msg.sender, levelPrice[level],level,referrerAddress,promoterAddress,bnbAmt);\r\n \t    emit UserIncome(msg.sender, referrerAddress, level, levelPrice[level],\"SPONSOR INCOME\",incomeAmt);\r\n        emit UserIncome(msg.sender, referrerAddress, level, levelPrice[level],\"PLACEMENT UPLINE INCOME\",incomeAmt);\r\n\t}\r\n\r\n    function buyMatrix(uint8 level) public payable\r\n\t{\r\n        uint256 bnbAmt=matrix[level]*usdtPrice;\r\n        require(msg.value>=bnbAmt,\"Invalid BNB Amount\");\r\n        uint256 adminAmt=bnbAmt*adminPer/100;\r\n        uint256 matrixAmt=bnbAmt*(100-adminPer)/100;\r\n        if(adminAmt>0)\r\n        {\r\n            adminWallet.transfer(adminAmt);\r\n        }\r\n        matrixWallet.transfer(matrixAmt);\r\n        emit BuyMatrix(msg.sender, matrix[level],level,bnbAmt);\r\n\t}\r\n    function buyMagicalMatrix(uint8 level) public payable\r\n\t{\r\n        uint256 bnbAmt=magicalMatrix[level]*usdtPrice;\r\n        require(msg.value>=bnbAmt,\"Invalid BNB Amount\");\r\n        uint256 adminAmt=bnbAmt*adminPer/100;\r\n        uint256 matrixAmt=bnbAmt*(100-adminPer)/100;\r\n        if(adminAmt>0)\r\n        {\r\n            adminWallet.transfer(adminAmt);\r\n        }\r\n        magicalWallet.transfer(matrixAmt);\r\n        emit MagicalMatrix(msg.sender, matrix[level],level,bnbAmt);\r\n\t}\r\n\r\n    function buypool(uint8 pool,string memory  trType) public payable\r\n\t{\r\n        uint256 bnbAmt=pool*usdtPrice;\r\n        require(msg.value>=bnbAmt,\"Invalid BNB Amount\");\r\n        owner.transfer(bnbAmt);\r\n        emit BuyPool(msg.sender, pool,trType,bnbAmt); \r\n\t}\r\n\r\n    function multisendBNB(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i] );\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n          }\r\n\t\r\n    }\r\n    \r\n   \r\n  function withdrawLostBNBFromBalance() public {\r\n        owner.transfer(address(this).balance);\r\n  }\r\n \r\n  function transferOwnerShip(address payable newOwner) external {\r\n        require(msg.sender==owner,'Permission denied');\r\n        owner = newOwner;\r\n    }\r\n\r\n    function changeAdminWallet(address payable _newAdmin) external {\r\n        require(msg.sender==owner,'Permission denied');\r\n        adminWallet = _newAdmin;\r\n    }\r\n\t\r\n    function changematrixWallet(address payable _newMatrix) external {\r\n        require(msg.sender==owner,'Permission denied');\r\n        matrixWallet = _newMatrix;\r\n    }\r\n    function changeMagicalMatrix(address payable _magicalWallet) external {\r\n        require(msg.sender==owner,'Permission denied');\r\n        magicalWallet = _magicalWallet;\r\n    }\r\n     function changeAuthPrice(address payable _authPrice) external {\r\n        require(msg.sender==owner,'Permission denied');\r\n        authPrice = _authPrice;\r\n    }\r\n    \r\n    function perSetting(uint256 _adminPer) external {\r\n        require(msg.sender==owner,'Permission denied');\r\n        adminPer=_adminPer;\r\n     \r\n    }\r\n    function priceSetting(uint256 _usdtPrice) external {\r\n        require(msg.sender==authPrice,'Permission denied');\r\n        usdtPrice=_usdtPrice;\r\n    }\r\n    \r\n}\r\n\r\n\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"matrixWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMatrix\",\"type\":\"address\"}],\"name\":\"changematrixWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdtPrice\",\"type\":\"uint256\"}],\"name\":\"priceSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdminWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminPer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"matrix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLostBNBFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sponcer_id\",\"type\":\"string\"},{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"NewRegistration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyMagicalMatrix\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyMatrix\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"},{\"name\":\"promoterAddress\",\"type\":\"address\"},{\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyLevel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_magicalWallet\",\"type\":\"address\"}],\"name\":\"changeMagicalMatrix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"magicalMatrix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"magicalWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminPer\",\"type\":\"uint256\"}],\"name\":\"perSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pool\",\"type\":\"uint8\"},{\"name\":\"trType\",\"type\":\"string\"}],\"name\":\"buypool\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authPrice\",\"type\":\"address\"}],\"name\":\"changeAuthPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"_adminWallet\",\"type\":\"address\"},{\"name\":\"_magicalWallet\",\"type\":\"address\"},{\"name\":\"_matrixWallet\",\"type\":\"address\"},{\"name\":\"_authPrice\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrerId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"jpackage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bnbAmt\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrixAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bnbAmt\",\"type\":\"uint256\"}],\"name\":\"BuyMatrix\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"levelAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"promoter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bnbAmt\",\"type\":\"uint256\"}],\"name\":\"UpgradeLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matrixAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"matrix\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bnbAmt\",\"type\":\"uint256\"}],\"name\":\"MagicalMatrix\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"poolAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"trType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"bnbAmt\",\"type\":\"uint256\"}],\"name\":\"BuyPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"IncomeAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"IncomeType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"bnbAmt\",\"type\":\"uint256\"}],\"name\":\"UserIncome\",\"type\":\"event\"}]", "ContractName": "REIN_FORCE", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c9eaf2124d9a808508fe28aaa94193d5f1b50ba40000000000000000000000001a3bc71aa4a669555090d7d73cf6e2e7b2b7541b0000000000000000000000003f02e0b7606018074267747f6ff3d71af5ec3dd50000000000000000000000009f69f4acd20184941482037541725c50888f87d30000000000000000000000002395a98f52882097a2ae4d61d6e1d971cb146813", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5da009b8327ebc815f22b01c9c8a3c4e29505de82c4c01ad90db6782d5870da2"}