{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity  ^0.8.18;\r\n\r\ninterface  IERC20\r\n{\r\n    function name() external  view  returns (string memory);\r\n    function symbol() external  view  returns (string memory);\r\n    function decimals() external  view  returns (uint8);\r\n    function totalSupply() external  view  returns (uint256);\r\n    function balanceOf(address account) external  view  returns (uint256);\r\n    function transfer(address recipient,uint256 amount) external  returns(bool);\r\n    function allowance(address owner,address spender) external view returns (uint256);\r\n    function approve(address spender,uint256 amount) external  returns (bool);\r\n    function transferFrom(address from,address to,uint256 amount) external  returns(bool);\r\n    event Transfer(address indexed  from,address indexed  recipient,uint256 value);\r\n    event Approval(address indexed  owner,address indexed  spender,uint256 value);    \r\n}\r\n\r\nabstract contract  Ownable\r\n{\r\n    address private  _owner;   \r\n    event OwnershipTransferred(address indexed  from,address indexed  to);\r\n    constructor()\r\n    {\r\n        address sender=msg.sender;\r\n        _owner=sender;\r\n        emit  OwnershipTransferred(address(0), _owner);\r\n    }\r\n    modifier  onlyOwner()\r\n    {\r\n        require(msg.sender==_owner,\"Ownable:only owner can do\");\r\n        _;\r\n    }\r\n    function owner()public   view  returns (address)\r\n    {\r\n        return  _owner;\r\n    }\r\n    function renounceOwnership() public  virtual  onlyOwner\r\n    {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner=address(0);       \r\n    }\r\n\r\n    function transferOwnership(address newOwner) public  virtual  onlyOwner\r\n    {\r\n        require(newOwner!=address(0),\"Ownable: can not transfer ownership to zero address\");\r\n        emit  OwnershipTransferred(_owner, newOwner); \r\n        _owner=newOwner;        \r\n    }    \r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract ABSToken is IERC20,Ownable\r\n{\r\n    using SafeMath for uint256;   \r\n    mapping (address=>uint256) private  _balances;   \r\n    mapping (address=>mapping (address=>uint256)) private _allowances;  \r\n\r\n    string private  _name;\r\n    string private _symbol;\r\n    uint256 private immutable  _tokenTotal;\r\n    address private  _proOwnerAddress; \r\n\r\n   // mapping (address=>bool) private _breakerList;\r\n    address private  DEAD=address(0x000000000000000000000000000000000000dEaD);\r\n    address private  _USDTAddress;\r\n    IERC20 _USDTContract; \r\n\r\n    IUniswapV2Router02 immutable _uniswapv2Router;\r\n    mapping (address=>bool) public   _uniswapPair;\r\n    address private   _usdtPair;\r\n \r\n    uint256 private  _MAX=~uint256(0); \r\n\r\n\r\n    mapping (address=>uint256[]) public   minerDateMapping;\r\n    mapping (address=>uint256[]) public  minerPowerMapping;\r\n    mapping (address=>uint256[]) public  minerRewardMapping;\r\n    address[]  private  miners;\r\n\r\n\r\n    uint256 oneMonthSecond=30*24*60*60;\r\n    uint256 maxYearsSecond=60*oneMonthSecond;\r\n    uint256 pMonthReward=500*10**18;\r\n    uint256 pSecondReward=pMonthReward.div(oneMonthSecond);\r\n\r\n    fallback()external  payable {}\r\n    receive()external  payable {}\r\n\r\n\r\n    constructor(string memory __name,  string memory __symbol, uint256 __supply, address __proOwnerAddress,address _swapRouterAddress )  \r\n    {\r\n        _name=__name;\r\n        _symbol=__symbol;     \r\n        _tokenTotal=__supply*10**18;  \r\n        _proOwnerAddress=__proOwnerAddress;       \r\n        _uniswapv2Router=IUniswapV2Router02(_swapRouterAddress);  \r\n\r\n        //send tokens to this address 50%\r\n        defaultAllocation(address(this),_tokenTotal.div(100).mul(50));\r\n        //send tokens to proj 50%\r\n        defaultAllocation(__proOwnerAddress,_tokenTotal.div(100).mul(50));               \r\n    }\r\n\r\n    function defaultAllocation(address addr,uint256 amount) private \r\n    {\r\n        _balances[addr]=amount;\r\n        emit  Transfer(address(0), addr, amount);       \r\n    }\r\n\r\n    function name() external   view override   returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n    function symbol() external  view override returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n    function decimals() external  pure   override returns (uint8)\r\n    {\r\n        return 18;\r\n    }\r\n    function totalSupply() external   view override returns (uint256)\r\n    {\r\n       return _tokenTotal;\r\n    }\r\n    function balanceOf(address account) public   view  override returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient,uint256 amount) public  override returns(bool)\r\n    {        \r\n        _transfer(msg.sender,recipient,amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner,address spender) public view  override returns (uint256)\r\n    {\r\n       return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender,uint256 amount) public override  returns (bool)\r\n    {\r\n       _approve(msg.sender,spender,amount);\r\n       return true;\r\n    } \r\n    function _approve(address owner, address spender, uint256 amount) private\r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function increaseAllowance(address spender,uint256 addedValue) public virtual returns (bool) \r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender,uint256 subtractedValue) public virtual returns (bool) \r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n    function transferFrom(address from,address to,uint256 amount) public  override returns(bool)\r\n    {\r\n        if( _allowances[from][msg.sender]>=amount)\r\n        {\r\n            _transfer(from,to,amount);\r\n            _approve(\r\n                from,\r\n                msg.sender,\r\n                _allowances[from][msg.sender].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n            return  true;\r\n        }\r\n        else \r\n        {\r\n            return  false;\r\n        }     \r\n    }       \r\n    function _transfer(address from,address to,uint256 amount) private \r\n    {        \r\n        require(from!=address(0),\"ERC20:transfer can not from zero address\");\r\n        require(to!=address(0),\"ERC20:transfer can not to zero address\");\r\n        require(amount>0);  \r\n        require(balanceOf(from)>=amount);    \r\n        if(_uniswapPair[from]||_uniswapPair[to]) //>sell or sell  \r\n        {          \r\n              require(0==1,\"Not allow trade!\");     \r\n        }       \r\n        else  //>transfer\r\n        {        \r\n            _tokenTransfer(from,to,amount);\r\n        }\r\n    } \r\n    //finally transfer token\r\n    function _tokenTransfer(address from,address to,uint256 value) private  \r\n    {    \r\n       if(value>0)\r\n       {          \r\n            _balances[from]= _balances[from].sub(value);          \r\n            _balances[to]=_balances[to].add(value);\r\n            emit  Transfer(from, to, value);  \r\n       }\r\n    }     \r\n     function SetMinerState(address addr,bool isAdd) private \r\n    {\r\n        uint256 length=miners.length;\r\n        if(isAdd)\r\n        {\r\n            for(uint256 i=0;i<length;i++)\r\n            {\r\n                if(miners[i]==addr)\r\n                {\r\n                    return ;\r\n                }\r\n            }\r\n            miners.push(addr);\r\n        }\r\n        else \r\n        {          \r\n            for(uint256 i=0;i<length;i++)\r\n            {\r\n                if(miners[i]==addr)\r\n                {                  \r\n                   if(i==length-1) //is the last element\r\n                   {\r\n                       miners.pop();\r\n                   }\r\n                   else //is not the last element,need move the element to the last and pop it\r\n                   {\r\n                       address lastAddr=miners[length-1];\r\n                       miners[i]=lastAddr;\r\n                       //_kTokenRewardOwners[length-1]=addr;\r\n                       miners.pop();\r\n                   }\r\n                   return ;\r\n                }\r\n            }           \r\n        }\r\n    }\r\n    function addSwapPair(address pair) external  onlyOwner\r\n    {\r\n        require(pair!=address(0)&&pair!=DEAD);\r\n        _uniswapPair[pair]=true;      \r\n    }  \r\n    function claimBalance() external  onlyOwner\r\n    {                 \r\n        payable (_proOwnerAddress).transfer(address(this).balance);        \r\n    }\r\n    function claimToken(address token)external  onlyOwner\r\n    {                   \r\n        IERC20(token).transfer(_proOwnerAddress, IERC20(token).balanceOf(address(this)));  \r\n    } \r\n    function addMintInfo(address miner,uint256 value) external  onlyOwner\r\n    { \r\n       require(miner!=address(this),\"miner is error\");\r\n       require(miner!=address(0),\"miner is error\");\r\n       require(miner!=DEAD,\"miner is error\");\r\n       require(value>=100,\"value is to letter\");\r\n       require(value%100==0,\"value is must be 100x\");\r\n       minerDateMapping[miner].push(block.timestamp);\r\n       minerRewardMapping[miner].push(block.timestamp);\r\n       minerPowerMapping[miner].push(value.div(100));\r\n       SetMinerState(miner,true);\r\n    }    \r\n    function sendReward()external   onlyOwner\r\n    {       \r\n        for(uint256 i=0;i<miners.length;i++)\r\n        {\r\n            address miner=miners[i];\r\n            uint256 rewardNum=0;\r\n            for(uint256 i_d=0;i_d<minerDateMapping[miner].length;i_d++)\r\n            {\r\n               uint256 beginTime=minerDateMapping[miner][i_d];\r\n               uint256 lastTime=minerRewardMapping[miner][i_d];\r\n               uint256 keepTime=block.timestamp-beginTime;\r\n               uint256 offsetTime=block.timestamp-lastTime;\r\n               if(keepTime>=maxYearsSecond)//>\u5956\u52b1\u5230\u671f\u4e86\r\n               {\r\n                  uint256 outTime=beginTime.add(maxYearsSecond);\r\n                  if(lastTime<outTime)\r\n                  {\r\n                    offsetTime=outTime.sub(lastTime);                   \r\n                  }\r\n               }\r\n               minerRewardMapping[miner][i_d]=block.timestamp;\r\n               rewardNum=rewardNum.add(offsetTime.mul(pSecondReward).mul(minerPowerMapping[miner][i_d]));              \r\n            }\r\n            if(rewardNum>0)\r\n            {\r\n                uint256 remain=balanceOf(address(this));\r\n                require(remain>=rewardNum,\"token remain is not much!\");\r\n                address token=address(this);\r\n                IERC20(token).transfer(miner, rewardNum);  \r\n            }           \r\n        }\r\n    }\r\n}\r\n\r\ncontract CToken is ABSToken\r\n{       \r\n    address swapRouterAddress=address(0x10ED43C718714eb63d5aA57B78B54704E256024E);  //uniswapv2router bsc mainnet address\uff1a 0x10ED43C718714eb63d5aA57B78B54704E256024E  uniswapv2router bsc testnet address 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3/0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    constructor() ABSToken(\r\n        \"JBTEST_0\",\r\n        \"JBTEST_0\",\r\n        10000000000,\r\n        0xe060F12ce3A8E587b10fdD9b31ed56BF621DD79A, //projAddress\r\n        swapRouterAddress\r\n        ){}              \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addMintInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minerDateMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minerPowerMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minerRewardMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7d9fc6447374e896d4057a6e2384b7f48394c977fbdf8e9add05db6a54856bb6"}