{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/aspis/AspisLiquidityCalculator.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ITokenValueCalculator.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\n\\nstruct DataFeed {\\n    address erc20ContractAddress;\\n    address oracleAddress;\\n    uint256 decimals;\\n}\\n\\ncontract AspisLiquidityCalculator is ITokenValueCalculator {\\n    \\n    mapping(address => bytes32) public dataFeeds;\\n\\n    uint256 public constant SUPPORTED_USD_DECIMALS = 4;\\n\\n    address immutable private aspisGuardian; \\n\\n    constructor(address _aspisGuardian) {\\n        require(_aspisGuardian != address(0), \\\"zero address error\\\");\\n        aspisGuardian = _aspisGuardian;\\n    }\\n\\n    function addPriceFeed(DataFeed[] calldata _dataFeeds) external {\\n        require(msg.sender == aspisGuardian, \\\"Unauthorized access\\\");\\n\\n        for(uint64 i = 0; i < _dataFeeds.length; i++) {\\n            dataFeeds[_dataFeeds[i].erc20ContractAddress] = bytes32(bytes20(_dataFeeds[i].oracleAddress)) | bytes32(uint256(_dataFeeds[i].decimals));\\n        }\\n    }\\n\\n    function getDerivedPrice(address _base, address _quote, uint8 _decimals)\\n        public\\n        view\\n        returns (int256, uint8)\\n    {\\n        require(_decimals > uint8(0) && _decimals <= uint8(18), \\\"Invalid _decimals\\\");\\n        \\n        int256 decimals = int256(10 ** uint256(_decimals));\\n        \\n        (uint80 roundId, int256 basePrice, ,uint256 timestamp,uint80 answerdInRound) = IAggregator(_base).latestRoundData();\\n\\n        require(basePrice > 0, \\\"Chainlink: price <=0\\\");\\n        require(answerdInRound >= roundId, \\\"Chainlink: Stale Price\\\");\\n        require(timestamp > 0, \\\"Chainlink: Round not complete\\\");\\n        \\n        uint8 baseDecimals = IAggregator(_base).decimals();\\n        \\n        basePrice = scalePrice(basePrice, baseDecimals, _decimals);\\n\\n        ( , int256 quotePrice, , , ) = IAggregator(_quote).latestRoundData();\\n        uint8 quoteDecimals = IAggregator(_quote).decimals();\\n        \\n        quotePrice = scalePrice(quotePrice, quoteDecimals, _decimals);\\n\\n        return (basePrice * decimals / quotePrice, _decimals);\\n    }\\n\\n    function getPrice(address _base, uint8 _decimals)\\n        public\\n        view\\n        returns (int256, uint8)\\n    {\\n        require(_decimals > uint8(0) && _decimals <= uint8(18), \\\"Invalid _decimals\\\");\\n                \\n        ( , int256 basePrice, , , ) = IAggregator(_base).latestRoundData();\\n        uint8 baseDecimals = IAggregator(_base).decimals();\\n        \\n        // basePrice = scalePrice(basePrice, baseDecimals, _decimals);\\n\\n        return (basePrice, baseDecimals);\\n    }\\n\\n    function scalePrice(int256 _price, uint8 _priceDecimals, uint8 _decimals)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (_priceDecimals < _decimals) {\\n            return _price * int256(10 ** uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / int256(10 ** uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n\\n    //add decimal places for the tokens (usdc and usdt have 6 decimal places)\\n    function convert(address _token, uint256 _amount) public view returns (uint256) {\\n        (address _oracleAddress,  uint8 _decimals) = getOracleAndDecimals(_token);\\n\\n        require(_oracleAddress != address(0), \\\"This token is not supported\\\"); \\n\\n        (int256 _price, uint8 decimals) =  getPrice(_oracleAddress, _decimals);\\n\\n        return (_amount * uint256(_price)) /(10 ** (decimals + _decimals - SUPPORTED_USD_DECIMALS));\\n    }\\n\\n    function getOracleAndDecimals(address _token) public view returns(address, uint8) {\\n        address _oracleAddress = address(bytes20(dataFeeds[_token]));\\n        uint8 _decimals = uint8(uint96(uint256(dataFeeds[_token])));\\n\\n        return (_oracleAddress, _decimals);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/aspis/IAggregator.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\ninterface IAggregator {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/aspis/ITokenValueCalculator.sol\": {\r\n      \"content\": \"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity 0.8.10;\\n\\ninterface ITokenValueCalculator {\\n    function convert(address _token, uint256 _amount) external returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aspisGuardian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SUPPORTED_USD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct DataFeed[]\",\"name\":\"_dataFeeds\",\"type\":\"tuple[]\"}],\"name\":\"addPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dataFeeds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"getDerivedPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOracleAndDecimals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AspisLiquidityCalculator", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000d11892356b7ac5aa2699d09b5a3d81bf6525cd69", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}