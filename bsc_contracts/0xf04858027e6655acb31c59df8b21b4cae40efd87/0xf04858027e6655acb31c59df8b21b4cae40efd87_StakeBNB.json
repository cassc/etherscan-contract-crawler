{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StakeBNB.sol\": {\r\n      \"content\": \"/*  StakeBNB is the perfect combination of Digital Technology, High Security and Community Program\\r\\n *   Safe and decentralized. The Smart Contract source is verified and available to everyone.\\r\\n *\\r\\n *   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\\r\\n *   \u2502   Website: https://stakebnb.org    \\t\\t\\t\\t\\t\\t\\t\\t \u2502\\r\\n * \\t \u2502                                                                       \u2502\\r\\n *\\t \u2502\\t 0.4% Daily ROI \\t\\t\\t\\t\\t\\t       \\t \u2502\\r\\n *\\t \u2502                                                                       \u2502\\r\\n *   \u2502   Audited verified No Backdoor.       \\t\\t\\t\\t\\t\\t\\t\\t \u2502\\r\\n *   \u2502                                                                 \\t\\t \u2502\\r\\n *   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\\r\\n *\\r\\n *   [USAGE INSTRUCTION]\\r\\n *\\r\\n *   1) Connect Smart Chain browser extension Metamask, or mobile wallet apps like Trust Wallet / Klever\\r\\n *   2) Ask your sponsor for Referral link and contribute to the contract.\\r\\n *\\r\\n *   [AFFILIATE PROGRAM]\\r\\n *\\r\\n *   - 11-level referral commission: 10% - 2% - 1% - 0.5% - 0.4% - 0.3% - 0.2% - 0.1% - 0.1% - 0.1% - 0.1% \\r\\n *   \\r\\n */\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.5.10;\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\ncontract StakeBNB {\\r\\n    using SafeMath for uint;\\r\\n    uint constant public DEPOSITS_MAX = 300;\\r\\n    uint constant public INVEST_MIN_AMOUNT = 0.03 ether;\\r\\n    uint constant public INVEST_MAX_AMOUNT = 4000000 ether;\\r\\n    uint constant public BASE_PERCENT = 40;\\r\\n    uint[] public REFERRAL_PERCENTS = [1000, 200, 100, 50, 40, 30, 20, 10, 10, 10, 10];\\r\\n    uint constant public MARKETING_FEE = 1000; \\r\\n    uint constant public PROJECT_FEE = 1000;\\r\\n    uint constant public ADMIN_FEE = 500;\\r\\n\\tuint constant public NETWORK = 1000;\\r\\n    uint constant public MAX_CONTRACT_PERCENT = 100;\\r\\n    uint constant public MAX_LEADER_PERCENT = 20;\\r\\n    uint constant public MAX_HOLD_PERCENT = 10;\\r\\n    uint constant public MAX_COMMUNITY_PERCENT = 50;\\r\\n    uint constant public PERCENTS_DIVIDER = 10000;\\r\\n    uint constant public CONTRACT_BALANCE_STEP = 100000000 ether;\\r\\n    uint constant public LEADER_BONUS_STEP = 100000000  ether;\\r\\n    uint constant public COMMUNITY_BONUS_STEP = 10000000;\\r\\n    uint constant public TIME_STEP = 1 days;\\r\\n    uint public totalInvested;\\r\\n    address payable public marketingAddress;\\r\\n    address payable public projectAddress;\\r\\n    address payable public adminAddress;\\r\\n\\taddress payable public networkAddress;\\r\\n    uint public totalDeposits;\\r\\n    uint public totalWithdrawn;\\r\\n    uint public contractPercent;\\r\\n    uint public contractCreationTime;\\r\\n    uint public totalRefBonus;\\r\\n    \\r\\n    struct Deposit {\\r\\n        uint64 amount;\\r\\n        uint64 withdrawn;\\r\\n        // uint64 refback;\\r\\n        uint32 start;\\r\\n    }\\r\\n    struct User {\\r\\n        Deposit[] deposits;\\r\\n        uint32 checkpoint;\\r\\n        address referrer;\\r\\n        uint64 bonus;\\r\\n        uint24[11] refs;\\r\\n        // uint16 rbackPercent;\\r\\n    }\\r\\n    mapping (address => User) internal users;\\r\\n    mapping (uint => uint) internal turnover;\\r\\n    event Newbie(address user);\\r\\n    event NewDeposit(address indexed user, uint amount);\\r\\n    event Withdrawn(address indexed user, uint amount);\\r\\n    event RefBonus(address indexed referrer, address indexed referral, uint indexed level, uint amount);\\r\\n    event RefBack(address indexed referrer, address indexed referral, uint amount);\\r\\n    event FeePayed(address indexed user, uint totalAmount);\\r\\n\\r\\n    constructor(address payable marketingAddr, address payable projectAddr, address payable adminAddr, address payable networkAddr) public {\\r\\n        require(!isContract(marketingAddr) && !isContract(projectAddr));\\r\\n        marketingAddress = marketingAddr;\\r\\n        projectAddress = projectAddr;\\r\\n        adminAddress = adminAddr;\\r\\n\\t\\tnetworkAddress = networkAddr;\\r\\n        contractCreationTime = block.timestamp;\\r\\n     \\r\\n        contractPercent = getContractBalanceRate();\\r\\n    }\\r\\n\\r\\n    // function setRefback(uint16 rbackPercent) public {\\r\\n    //     require(rbackPercent <= 10000);\\r\\n\\r\\n    //     User storage user = users[msg.sender];\\r\\n\\r\\n    //     if (user.deposits.length > 0) {\\r\\n    //         user.rbackPercent = rbackPercent;\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    function getContractBalance() public view returns (uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getContractBalanceRate() public view returns (uint) {\\r\\n        uint contractBalance = address(this).balance;\\r\\n        uint contractBalancePercent = BASE_PERCENT.add(contractBalance.div(CONTRACT_BALANCE_STEP).mul(20));\\r\\n\\r\\n        if (contractBalancePercent < BASE_PERCENT.add(MAX_CONTRACT_PERCENT)) {\\r\\n            return contractBalancePercent;\\r\\n        } else {\\r\\n            return BASE_PERCENT.add(MAX_CONTRACT_PERCENT);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getLeaderBonusRate() public view returns (uint) {\\r\\n        uint leaderBonusPercent = totalRefBonus.div(LEADER_BONUS_STEP).mul(10);\\r\\n\\r\\n        if (leaderBonusPercent < MAX_LEADER_PERCENT) {\\r\\n            return leaderBonusPercent;\\r\\n        } else {\\r\\n            return MAX_LEADER_PERCENT;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function getCommunityBonusRate() public view returns (uint) {\\r\\n        uint communityBonusRate = totalDeposits.div(COMMUNITY_BONUS_STEP).mul(10);\\r\\n\\r\\n        if (communityBonusRate < MAX_COMMUNITY_PERCENT) {\\r\\n            return communityBonusRate;\\r\\n        } else {\\r\\n            return MAX_COMMUNITY_PERCENT;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function withdraw() public {\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        uint userPercentRate = getUserPercentRate(msg.sender);\\r\\n\\t\\tuint communityBonus = getCommunityBonusRate();\\r\\n\\t\\tuint leaderbonus = getLeaderBonusRate();\\r\\n\\r\\n        uint totalAmount;\\r\\n        uint dividends;\\r\\n\\r\\n        for (uint i = 0; i < user.deposits.length; i++) {\\r\\n\\r\\n            if (uint(user.deposits[i].withdrawn) < uint(user.deposits[i].amount).mul(2)) {\\r\\n\\r\\n                if (user.deposits[i].start > user.checkpoint) {\\r\\n\\r\\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(uint(user.deposits[i].start)))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                } else {\\r\\n\\r\\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(uint(user.checkpoint)))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                }\\r\\n\\r\\n                if (uint(user.deposits[i].withdrawn).add(dividends) > uint(user.deposits[i].amount).mul(2)) {\\r\\n                    dividends = (uint(user.deposits[i].amount).mul(2)).sub(uint(user.deposits[i].withdrawn));\\r\\n                }\\r\\n\\r\\n                user.deposits[i].withdrawn = uint64(uint(user.deposits[i].withdrawn).add(dividends)); /// changing of storage data\\r\\n                totalAmount = totalAmount.add(dividends);\\r\\n\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(totalAmount > 0, \\\"User has no dividends\\\");\\r\\n\\r\\n        uint contractBalance = address(this).balance;\\r\\n        if (contractBalance < totalAmount) {\\r\\n            totalAmount = contractBalance;\\r\\n        }\\r\\n        \\r\\n        // if (msgValue > availableLimit) {\\r\\n        //     msg.sender.transfer(msgValue.sub(availableLimit));\\r\\n        //     msgValue = availableLimit;\\r\\n        // }\\r\\n\\r\\n        // uint halfDayTurnover = turnover[getCurrentHalfDay()];\\r\\n        // uint halfDayLimit = getCurrentDayLimit();\\r\\n\\r\\n        // if (INVEST_MIN_AMOUNT.add(msgValue).add(halfDayTurnover) < halfDayLimit) {\\r\\n        //     turnover[getCurrentHalfDay()] = halfDayTurnover.add(msgValue);\\r\\n        // } else {\\r\\n        //     turnover[getCurrentHalfDay()] = halfDayLimit;\\r\\n        // }\\r\\n\\r\\n        user.checkpoint = uint32(block.timestamp);\\r\\n\\r\\n        msg.sender.transfer(totalAmount);\\r\\n\\r\\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\\r\\n\\r\\n\\r\\n        emit Withdrawn(msg.sender, totalAmount);\\r\\n    }\\r\\n\\r\\n    function getUserPercentRate(address userAddress) public view returns (uint) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        if (isActive(userAddress)) {\\r\\n            uint timeMultiplier = (block.timestamp.sub(uint(user.checkpoint))).div(TIME_STEP.div(2)).mul(5);\\r\\n            if (timeMultiplier > MAX_HOLD_PERCENT) {\\r\\n                timeMultiplier = MAX_HOLD_PERCENT;\\r\\n            }\\r\\n            // return contractPercent.add(timeMultiplier);\\r\\n            return contractPercent;\\r\\n        } else {\\r\\n            return contractPercent;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserAvailable(address userAddress) public view returns (uint) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint userPercentRate = getUserPercentRate(userAddress);\\r\\n\\t\\tuint communityBonus = getCommunityBonusRate();\\r\\n\\t\\tuint leaderbonus = getLeaderBonusRate();\\r\\n\\r\\n        uint totalDividends;\\r\\n        uint dividends;\\r\\n\\r\\n        for (uint i = 0; i < user.deposits.length; i++) {\\r\\n\\r\\n            if (uint(user.deposits[i].withdrawn) < uint(user.deposits[i].amount).mul(2)) {\\r\\n\\r\\n                if (user.deposits[i].start > user.checkpoint) {\\r\\n\\r\\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(uint(user.deposits[i].start)))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                } else {\\r\\n\\r\\n                    dividends = (uint(user.deposits[i].amount).mul(userPercentRate+communityBonus+leaderbonus).div(PERCENTS_DIVIDER))\\r\\n                        .mul(block.timestamp.sub(uint(user.checkpoint)))\\r\\n                        .div(TIME_STEP);\\r\\n\\r\\n                }\\r\\n\\r\\n                if (uint(user.deposits[i].withdrawn).add(dividends) > uint(user.deposits[i].amount).mul(2)) {\\r\\n                    dividends = (uint(user.deposits[i].amount).mul(2)).sub(uint(user.deposits[i].withdrawn));\\r\\n                }\\r\\n\\r\\n                totalDividends = totalDividends.add(dividends);\\r\\n\\r\\n                /// no update of withdrawn because that is view function\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        return totalDividends;\\r\\n    }\\r\\n    \\r\\n    function invest(address referrer) public payable {\\r\\n        require(!isContract(msg.sender) && msg.sender == tx.origin);\\r\\n\\r\\n        require(msg.value >= INVEST_MIN_AMOUNT && msg.value <= INVEST_MAX_AMOUNT, \\\"Bad Deposit\\\");\\r\\n\\r\\n        User storage user = users[msg.sender];\\r\\n\\r\\n        require(user.deposits.length < DEPOSITS_MAX, \\\"Maximum 300 deposits from address\\\");\\r\\n\\r\\n        // uint availableLimit = getCurrentHalfDayAvailable();\\r\\n        // require(availableLimit > 0, \\\"Deposit limit exceed\\\");\\r\\n\\r\\n        uint msgValue = msg.value;\\r\\n\\r\\n        // if (msgValue > availableLimit) {\\r\\n        //     msg.sender.transfer(msgValue.sub(availableLimit));\\r\\n        //     msgValue = availableLimit;\\r\\n        // }\\r\\n\\r\\n        // uint halfDayTurnover = turnover[getCurrentHalfDay()];\\r\\n        // uint halfDayLimit = getCurrentDayLimit();\\r\\n\\r\\n        // if (INVEST_MIN_AMOUNT.add(msgValue).add(halfDayTurnover) < halfDayLimit) {\\r\\n        //     turnover[getCurrentHalfDay()] = halfDayTurnover.add(msgValue);\\r\\n        // } else {\\r\\n        //     turnover[getCurrentHalfDay()] = halfDayLimit;\\r\\n        // }\\r\\n\\r\\n        uint marketingFee = msgValue.mul(MARKETING_FEE).div(PERCENTS_DIVIDER);\\r\\n        uint projectFee = msgValue.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\\r\\n\\t\\tuint adminFee = msgValue.mul(ADMIN_FEE).div(PERCENTS_DIVIDER);\\r\\n\\t\\tuint network = msgValue.mul(NETWORK).div(PERCENTS_DIVIDER);\\r\\n\\r\\n        marketingAddress.transfer(marketingFee);\\r\\n        projectAddress.transfer(projectFee);\\r\\n\\t\\tadminAddress.transfer(adminFee);\\r\\n\\t\\tnetworkAddress.transfer(network);\\r\\n\\r\\n        emit FeePayed(msg.sender, marketingFee.add(projectFee).add(network));\\r\\n\\r\\n        if (user.referrer == address(0) && users[referrer].deposits.length > 0 && referrer != msg.sender) {\\r\\n            user.referrer = referrer;\\r\\n        }\\r\\n        // else{\\r\\n        //     user.referrer = adminAddress;\\r\\n        // }\\r\\n        \\r\\n        // uint refbackAmount;\\r\\n        if (user.referrer != address(0)) {\\r\\n\\r\\n            address upline = user.referrer;\\r\\n            for (uint i = 0; i < 11; i++) {\\r\\n                if (upline != address(0)) {\\r\\n                    uint amount = msgValue.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\\r\\n\\r\\n                    // }\\r\\n\\r\\n                    if (amount > 0) {\\r\\n                        address(uint160(upline)).transfer(amount);\\r\\n                        users[upline].bonus = uint64(uint(users[upline].bonus).add(amount));\\r\\n                        \\r\\n                        totalRefBonus = totalRefBonus.add(amount);\\r\\n                        emit RefBonus(upline, msg.sender, i, amount);\\r\\n                    }\\r\\n\\r\\n                    users[upline].refs[i]++;\\r\\n                    upline = users[upline].referrer;\\r\\n                } else break;\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        if (user.deposits.length == 0) {\\r\\n            user.checkpoint = uint32(block.timestamp);\\r\\n            emit Newbie(msg.sender);\\r\\n        }\\r\\n\\r\\n        user.deposits.push(Deposit(uint64(msgValue), 0, uint32(block.timestamp)));\\r\\n\\r\\n        totalInvested = totalInvested.add(msgValue);\\r\\n        totalDeposits++;\\r\\n\\r\\n        if (contractPercent < BASE_PERCENT.add(MAX_CONTRACT_PERCENT)) {\\r\\n            uint contractPercentNew = getContractBalanceRate();\\r\\n            if (contractPercentNew > contractPercent) {\\r\\n                contractPercent = contractPercentNew;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit NewDeposit(msg.sender, msgValue);\\r\\n    }\\r\\n\\r\\n    function isActive(address userAddress) public view returns (bool) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        return (user.deposits.length > 0) && uint(user.deposits[user.deposits.length-1].withdrawn) < uint(user.deposits[user.deposits.length-1].amount).mul(2);\\r\\n    }\\r\\n\\r\\n    function getUserAmountOfDeposits(address userAddress) public view returns (uint) {\\r\\n        return users[userAddress].deposits.length;\\r\\n    }\\r\\n    \\r\\n    function getUserLastDeposit(address userAddress) public view returns (uint) {\\r\\n        User storage user = users[userAddress];\\r\\n        return user.checkpoint;\\r\\n    }\\r\\n\\r\\n    function getUserTotalDeposits(address userAddress) public view returns (uint) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint amount;\\r\\n\\r\\n        for (uint i = 0; i < user.deposits.length; i++) {\\r\\n            amount = amount.add(uint(user.deposits[i].amount));\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function getUserTotalWithdrawn(address userAddress) public view returns (uint) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint amount = user.bonus;\\r\\n\\r\\n        for (uint i = 0; i < user.deposits.length; i++) {\\r\\n            amount = amount.add(uint(user.deposits[i].withdrawn));\\r\\n        }\\r\\n\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function getCurrentHalfDay() public view returns (uint) {\\r\\n        return (block.timestamp.sub(contractCreationTime)).div(TIME_STEP.div(2));\\r\\n    }\\r\\n\\r\\n    // function getCurrentDayLimit() public view returns (uint) {\\r\\n    //     uint limit;\\r\\n\\r\\n    //     uint currentDay = (block.timestamp.sub(contractCreation)).div(TIME_STEP);\\r\\n\\r\\n    //     if (currentDay == 0) {\\r\\n    //         limit = DAY_LIMIT_STEPS[0];\\r\\n    //     } else if (currentDay == 1) {\\r\\n    //         limit = DAY_LIMIT_STEPS[1];\\r\\n    //     } else if (currentDay >= 2 && currentDay <= 5) {\\r\\n    //         limit = DAY_LIMIT_STEPS[1].mul(currentDay);\\r\\n    //     } else if (currentDay >= 6 && currentDay <= 19) {\\r\\n    //         limit = DAY_LIMIT_STEPS[2].mul(currentDay.sub(3));\\r\\n    //     } else if (currentDay >= 20 && currentDay <= 49) {\\r\\n    //         limit = DAY_LIMIT_STEPS[3].mul(currentDay.sub(11));\\r\\n    //     } else if (currentDay >= 50) {\\r\\n    //         limit = DAY_LIMIT_STEPS[4].mul(currentDay.sub(30));\\r\\n    //     }\\r\\n\\r\\n    //     return limit;\\r\\n    // }\\r\\n\\r\\n    function getCurrentHalfDayTurnover() public view returns (uint) {\\r\\n        return turnover[getCurrentHalfDay()];\\r\\n    }\\r\\n\\r\\n    // function getCurrentHalfDayAvailable() public view returns (uint) {\\r\\n    //     return getCurrentDayLimit().sub(getCurrentHalfDayTurnover());\\r\\n    // }\\r\\n\\r\\n    function getUserDeposits(address userAddress, uint last, uint first) public view returns (uint[] memory, uint[] memory, uint[] memory, uint[] memory) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        uint count = first.sub(last);\\r\\n        if (count > user.deposits.length) {\\r\\n            count = user.deposits.length;\\r\\n        }\\r\\n\\r\\n        uint[] memory amount = new uint[](count);\\r\\n        uint[] memory withdrawn = new uint[](count);\\r\\n        uint[] memory refback = new uint[](count);\\r\\n        uint[] memory start = new uint[](count);\\r\\n\\r\\n        uint index = 0;\\r\\n        for (uint i = first; i > last; i--) {\\r\\n            amount[index] = uint(user.deposits[i-1].amount);\\r\\n            withdrawn[index] = uint(user.deposits[i-1].withdrawn);\\r\\n            // refback[index] = uint(user.deposits[i-1].refback);\\r\\n            start[index] = uint(user.deposits[i-1].start);\\r\\n            index++;\\r\\n        }\\r\\n\\r\\n        return (amount, withdrawn, refback, start);\\r\\n    }\\r\\n\\r\\n    function getSiteStats() public view returns (uint, uint, uint, uint) {\\r\\n        return (totalInvested, totalDeposits, address(this).balance, contractPercent);\\r\\n    }\\r\\n\\r\\n    function getUserStats(address userAddress) public view returns (uint, uint, uint, uint, uint) {\\r\\n        uint userPerc = getUserPercentRate(userAddress);\\r\\n        uint userAvailable = getUserAvailable(userAddress);\\r\\n        uint userDepsTotal = getUserTotalDeposits(userAddress);\\r\\n        uint userDeposits = getUserAmountOfDeposits(userAddress);\\r\\n        uint userWithdrawn = getUserTotalWithdrawn(userAddress);\\r\\n\\r\\n        return (userPerc, userAvailable, userDepsTotal, userDeposits, userWithdrawn);\\r\\n    }\\r\\n\\r\\n    function getUserReferralsStats(address userAddress) public view returns (address, uint64, uint24[11] memory) {\\r\\n        User storage user = users[userAddress];\\r\\n\\r\\n        return (user.referrer, user.bonus, user.refs);\\r\\n    }\\r\\n\\r\\n    function isContract(address addr) internal view returns (bool) {\\r\\n        uint size;\\r\\n        assembly { size := extcodesize(addr) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_CONTRACT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSiteStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LEADER_BONUS_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralsStats\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint24[11]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMMUNITY_BONUS_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLeaderBonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADMIN_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_HOLD_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"last\",\"type\":\"uint256\"},{\"name\":\"first\",\"type\":\"uint256\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_COMMUNITY_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_BALANCE_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommunityBonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MAX_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NETWORK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserLastDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSITS_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractCreationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"networkAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_LEADER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentHalfDayTurnover\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentHalfDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalanceRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"marketingAddr\",\"type\":\"address\"},{\"name\":\"projectAddr\",\"type\":\"address\"},{\"name\":\"adminAddr\",\"type\":\"address\"},{\"name\":\"networkAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]", "ContractName": "StakeBNB", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d1c2264248ab45c193f668e4b22439e924618a5300000000000000000000000078d663e544c8d545ec9bdb3aacc6832300cab801000000000000000000000000976a53abb15624505ebd7938fb08e3c5a300cf3e000000000000000000000000efc855394ea429dc7e69369317da54b79d81c6b8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}