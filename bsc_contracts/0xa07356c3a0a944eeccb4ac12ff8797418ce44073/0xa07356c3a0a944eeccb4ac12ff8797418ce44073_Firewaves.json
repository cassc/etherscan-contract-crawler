{"SourceCode": "{\"firewaves.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract Firewaves is ReentrancyGuard \\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    address private owner;\\r\\n    IERC20  private usdt;\\r\\n    uint256 public Start_Time;\\r\\n    uint256 private time = 1 days;\\r\\n    uint256 private  last_ref=1;\\r\\n    struct upline {\\r\\n        address  upline;\\r\\n        uint256  referrals;\\r\\n        uint40   deposit_time;\\r\\n        uint256  totalearn;\\r\\n    }\\r\\n    struct addressreplace {\\r\\n        address  upline;\\r\\n        uint256   position;\\r\\n        address  last_Left;\\r\\n        address  last_right;\\r\\n        address  left_side;\\r\\n        address  right_side;\\r\\n        uint256  Total_levelROI_left_side;\\r\\n        uint256  Total_levelROI_right_side;        \\r\\n    }\\r\\n    struct userinfo {\\r\\n        uint256  amount;\\r\\n        uint256  time;\\r\\n        uint256  DailyPercentage;\\r\\n        uint40   TotalPercentage;\\r\\n        uint256  withdrawreward;\\r\\n        uint256  maxrewad;\\r\\n        uint256  capping;\\r\\n        uint256  levelROI_left_side;\\r\\n        uint256  levelROI_right_side;\\r\\n        uint256  TeamIncome;\\r\\n        uint256  userIncome;\\r\\n        uint256  owner_levelROI;\\r\\n        bool     stop;\\r\\n    }\\r\\n    struct Pool {\\r\\n        uint256  upline;\\r\\n        uint256  Direct;\\r\\n        uint256  global_income;\\r\\n        bool      P1;\\r\\n        uint256  grandAmount;\\r\\n        bool     P1_Done;\\r\\n        bool     P1_1st;\\r\\n        uint256  Withdrawable_Amount;\\r\\n    }\\r\\n   mapping(address =\\u003e upline) public Referrals;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_One;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_two;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_three;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_four;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_five;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_six;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_seven;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_eight;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_nine;\\r\\n   mapping(uint256 =\\u003e Pool) public Global_Pool_Ten;\\r\\n   mapping(address =\\u003e addressreplace) public ReplaceBy;\\r\\n   mapping(address =\\u003e userinfo) public user;\\r\\n   mapping(address =\\u003e userinfo) public users;\\r\\n   mapping(address =\\u003e address []) public _DirectArray;\\r\\n   mapping(uint256 =\\u003e uint256 []) private Global_DirectArray;\\r\\n   mapping(address =\\u003e mapping(uint256 =\\u003e bool)) private Position_status;\\r\\n   mapping(address =\\u003e mapping(address =\\u003e uint256)) private Position_to_raffar;\\r\\n   uint256 [] private TotalUser1 ;\\r\\n   address [] private TotalUser ;\\r\\n   uint256 private index = 1;\\r\\n   uint256 private distribution_index =0;\\r\\n   address private Add1;\\r\\n   address private Add2;\\r\\n    constructor() {\\r\\n        owner=msg.sender;\\r\\n        Start_Time = uint256(block.timestamp);\\r\\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\\r\\n        Add1 = (0x4890BF1c5c772c76FD84c8CD84aDFA65Cf3c5e87);\\r\\n        Add2 = (0xD30Cb352A73212B698CB081C5EB8E1C1185FCfe2);\\r\\n        ReplaceBy[owner].last_Left = msg.sender;\\r\\n        ReplaceBy[owner].last_right =msg.sender;\\r\\n        Global_Pool_1(msg.sender);\\r\\n        Global_Pool_2(1); \\r\\n        Global_Pool_3(1);\\r\\n        Global_Pool_4(1);\\r\\n        Global_Pool_5(1);\\r\\n        Global_Pool_6(1);\\r\\n        Global_Pool_7(1);\\r\\n        Global_Pool_8(1);\\r\\n        Global_Pool_9(1);\\r\\n        Global_Pool_10(1);        \\r\\n       \\r\\n    }  \\r\\n     modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    uint256 private Ids = 1;\\r\\n    mapping(uint256 =\\u003e address) private addresstoid;\\r\\n    mapping(address =\\u003e uint256) private userlastId;\\r\\n    mapping(address =\\u003e uint256 []) private userids;\\r\\n    function Check_userids(address a) public view returns(uint256 [] memory){\\r\\n        return userids[a];\\r\\n    }\\r\\n\\r\\n   \\r\\n      function Withdraw_global_Reward() external nonReentrant { \\r\\n        uint256 reward;\\r\\n        for(uint256 i=0; i \\u003c userids[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids[msg.sender][i];\\r\\n            reward += Global_Pool_One[_add].Withdrawable_Amount;\\r\\n            Global_Pool_One[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        if(userids2[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids2[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids2[msg.sender][i];\\r\\n            reward += Global_Pool_two[_add].Withdrawable_Amount;\\r\\n            Global_Pool_two[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }\\r\\n        if(userids3[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids3[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids3[msg.sender][i];\\r\\n            reward += Global_Pool_three[_add].Withdrawable_Amount;\\r\\n            Global_Pool_three[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }\\r\\n        if(userids4[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids4[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids4[msg.sender][i];\\r\\n            reward += Global_Pool_four[_add].Withdrawable_Amount;\\r\\n            Global_Pool_four[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }\\r\\n        if(userids5[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids5[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids5[msg.sender][i];\\r\\n            reward += Global_Pool_five[_add].Withdrawable_Amount;\\r\\n            Global_Pool_five[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }     \\r\\n        if(userids6[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids6[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids6[msg.sender][i];\\r\\n            reward += Global_Pool_six[_add].Withdrawable_Amount;\\r\\n            Global_Pool_six[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }\\r\\n        if(userids7[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids7[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids7[msg.sender][i];\\r\\n            reward += Global_Pool_seven[_add].Withdrawable_Amount;\\r\\n            Global_Pool_seven[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }\\r\\n        if(userids8[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids8[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids8[msg.sender][i];\\r\\n            reward += Global_Pool_eight[_add].Withdrawable_Amount;\\r\\n            Global_Pool_eight[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }  \\r\\n        if(userids9[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids9[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids9[msg.sender][i];\\r\\n            reward += Global_Pool_nine[_add].Withdrawable_Amount;\\r\\n            Global_Pool_nine[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }    \\r\\n          \\r\\n        if(userids10[msg.sender].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids10[msg.sender].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids10[msg.sender][i];\\r\\n            reward += Global_Pool_Ten[_add].Withdrawable_Amount;\\r\\n            Global_Pool_Ten[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        } \\r\\n        Referrals[msg.sender].totalearn += reward;   \\r\\n        require(reward \\u003e0 ,\\\"error\\\");     \\r\\n        usdt.transfer(msg.sender,reward);        \\r\\n    }\\r\\n\\r\\n    function Global_Pool_1(address __add_) private{\\r\\n            userlastId[__add_] = Ids;\\r\\n            addresstoid[Ids] = __add_;\\r\\n            TotalUser1.push(Ids);\\r\\n            userids[__add_].push(Ids);\\r\\n            Ids++;\\r\\n        if(Global_Pool_One[last_ref].Direct \\u003c 2){\\r\\n        Global_Pool_One[userlastId[__add_]].upline = last_ref;\\r\\n        Global_Pool_One[last_ref].Direct++;\\r\\n        Global_DirectArray[last_ref].push(userlastId[__add_]);\\r\\n        }else{\\r\\n            last_ref = TotalUser1[index];\\r\\n            index++;\\r\\n            Global_Pool_One[userlastId[__add_]].upline = last_ref;\\r\\n            Global_Pool_One[last_ref].Direct++;  \\r\\n            Global_DirectArray[last_ref].push(userlastId[__add_]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_One[userlastId[__add_]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_One[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_One[_add].global_income +=2 ether ;\\r\\n                   usdt.transfer(addresstoid[_add], 2 ether);\\r\\n                     if(Global_Pool_One[_add].global_income == 60 ether)\\r\\n                       {\\r\\n                         Global_Pool_One[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_One[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_One[_add].grandAmount += 2 ether;\\r\\n                    if(Global_Pool_One[_add].grandAmount == 64 ether)\\r\\n                    {\\r\\n                           Global_Pool_One[_add].P1_1st = true;\\r\\n                           Global_Pool_One[_add].P1_Done = true;\\r\\n                           Global_Pool_One[_add].Withdrawable_Amount += 14 ether;\\r\\n                           Global_Pool_One[_add].grandAmount = 0;\\r\\n                           Global_Pool_1(addresstoid[_add]);\\r\\n                           Global_Pool_1(addresstoid[_add]);                           \\r\\n                           Global_Pool_2(_add);\\r\\n                    }\\r\\n                    _add = Global_Pool_One[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    uint256 private last_ref2 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray2;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId2;\\r\\n    mapping(uint256 =\\u003e address ) private addresstoid2;\\r\\n    uint256 [] private TotalUser2 ;\\r\\n    uint256 private index2 =1;\\r\\n    uint256 private Ids2 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids2;\\r\\n    function Check_userids2(address a) public view returns(uint256 [] memory){\\r\\n        return userids2[a];\\r\\n    }\\r\\n\\r\\n\\r\\n    function Global_Pool_2(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid[_add_];\\r\\n            userlastId2[useraddress] = Ids2;\\r\\n            addresstoid2[Ids2] = useraddress;\\r\\n            TotalUser2.push(Ids2);\\r\\n            userids2[useraddress].push(Ids2);\\r\\n            Ids2++;\\r\\n        \\r\\n        if(Global_Pool_two[last_ref2].Direct \\u003c 2){\\r\\n        Global_Pool_two[userlastId2[useraddress]].upline = last_ref2;\\r\\n        Global_Pool_two[last_ref2].Direct++;\\r\\n        Global_DirectArray2[last_ref2].push(userlastId2[useraddress]);\\r\\n        }else{\\r\\n            last_ref2 = TotalUser2[index2];\\r\\n            index2++;\\r\\n            Global_Pool_two[userlastId2[useraddress]].upline = last_ref2;\\r\\n            Global_Pool_two[last_ref2].Direct++;  \\r\\n            Global_DirectArray[last_ref2].push(userlastId2[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_two[userlastId2[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_two[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_two[_add].global_income +=6 ether ;\\r\\n                   usdt.transfer(addresstoid2[_add], 6 ether);\\r\\n                   \\r\\n                     if(Global_Pool_two[_add].global_income == 180 ether)\\r\\n                       {\\r\\n                         Global_Pool_two[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_two[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_two[_add].grandAmount += 6 ether;\\r\\n                    if(Global_Pool_two[_add].grandAmount == 192 ether)\\r\\n                    {\\r\\n                           Global_Pool_two[_add].P1_1st = true;\\r\\n                           Global_Pool_two[_add].P1_Done = true;\\r\\n                           Global_Pool_two[_add].Withdrawable_Amount += 92 ether;\\r\\n                           Global_Pool_two[_add].grandAmount = 0;\\r\\n                           Global_Pool_1(addresstoid2[_add]);\\r\\n                           Global_Pool_1(addresstoid2[_add]); \\r\\n                           Global_Pool_1(addresstoid2[_add]);\\r\\n                           Global_Pool_1(addresstoid2[_add]);\\r\\n                           Global_Pool_3(_add);     \\r\\n                    }\\r\\n                    _add = Global_Pool_two[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    uint256 private last_ref3 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray3;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId3;\\r\\n    mapping(uint256 =\\u003e address )private addresstoid3;\\r\\n    uint256 [] private TotalUser3 ;\\r\\n    uint256 private index3 =1;\\r\\n    uint256 private Ids3 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids3;\\r\\n    function Check_userids3(address a) public view returns(uint256 [] memory){\\r\\n        return userids3[a];\\r\\n    }\\r\\n    function Global_Pool_3(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid2[_add_];\\r\\n            userlastId3[useraddress] = Ids2;\\r\\n            addresstoid3[Ids3] = useraddress;\\r\\n            TotalUser3.push(Ids3);\\r\\n            userids3[useraddress].push(Ids3);\\r\\n            Ids3++;\\r\\n        \\r\\n        if(Global_Pool_three[last_ref3].Direct \\u003c 2){\\r\\n        Global_Pool_three[userlastId3[useraddress]].upline = last_ref3;\\r\\n        Global_Pool_three[last_ref3].Direct++;\\r\\n        Global_DirectArray3[last_ref3].push(userlastId3[useraddress]);\\r\\n        }else{\\r\\n            last_ref3 = TotalUser3[index3];\\r\\n            index3++;\\r\\n            Global_Pool_three[userlastId3[useraddress]].upline = last_ref3;\\r\\n            Global_Pool_three[last_ref3].Direct++;  \\r\\n            Global_DirectArray[last_ref3].push(userlastId3[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_three[userlastId3[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_three[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_three[_add].global_income += 12 ether ;\\r\\n                   usdt.transfer(addresstoid2[_add], 12 ether);\\r\\n                   \\r\\n                     if(Global_Pool_three[_add].global_income == 360 ether)\\r\\n                       {\\r\\n                         Global_Pool_three[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_three[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_three[_add].grandAmount += 12 ether;\\r\\n                    if(Global_Pool_three[_add].grandAmount == 384 ether)\\r\\n                    {\\r\\n                        // if(Global_Pool_two[_add].P1_1st == false)\\r\\n                        //  {\\r\\n                           Global_Pool_three[_add].P1_1st = true;\\r\\n                           Global_Pool_three[_add].P1_Done = true;\\r\\n                           Global_Pool_three[_add].Withdrawable_Amount += 184 ether;\\r\\n                           Global_Pool_three[_add].grandAmount = 0;\\r\\n                           for(uint256 d=0; d\\u003c8;d++)\\r\\n                           {\\r\\n                             Global_Pool_1(addresstoid3[_add]);\\r\\n                           }  \\r\\n                           Global_Pool_4(_add);       \\r\\n                        //  }else{\\r\\n                        //     Global_Pool_two[_add].Withdrawable_Amount += 152 ether;\\r\\n                        //     Global_Pool_two[_add].grandAmount = 0;\\r\\n                        //     Global_Pool_two[_add].P1_Done = true;                   \\r\\n                        //  }\\r\\n                    }\\r\\n                    _add = Global_Pool_three[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    uint256 private last_ref4 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray4;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId4;\\r\\n    mapping(uint256 =\\u003e address ) private addresstoid4;\\r\\n    uint256  [] private TotalUser4 ;\\r\\n    uint256 private index4 =1;\\r\\n    uint256 private Ids4 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids4;\\r\\n    function Check_userids4(address a) public view returns(uint256 [] memory){\\r\\n        return userids4[a];\\r\\n    }\\r\\n    function Global_Pool_4(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid4[_add_];\\r\\n            userlastId4[useraddress] = Ids4;\\r\\n            addresstoid4[Ids4] = useraddress;\\r\\n            TotalUser4.push(Ids4);\\r\\n            userids4[useraddress].push(Ids4);\\r\\n            Ids4++;\\r\\n        \\r\\n        if(Global_Pool_four[last_ref4].Direct \\u003c 2){\\r\\n        Global_Pool_four[userlastId4[useraddress]].upline = last_ref4;\\r\\n        Global_Pool_four[last_ref4].Direct++;\\r\\n        Global_DirectArray4[last_ref4].push(userlastId4[useraddress]);\\r\\n        }else{\\r\\n            last_ref4 = TotalUser4[index4];\\r\\n            index4++;\\r\\n            Global_Pool_four[userlastId4[useraddress]].upline = last_ref4;\\r\\n            Global_Pool_four[last_ref4].Direct++;  \\r\\n            Global_DirectArray[last_ref4].push(userlastId4[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_four[userlastId4[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_four[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_four[_add].global_income +=24 ether ;\\r\\n                   usdt.transfer(addresstoid4[_add], 24 ether);\\r\\n                   \\r\\n                     if(Global_Pool_four[_add].global_income == 720 ether)\\r\\n                       {\\r\\n                         Global_Pool_four[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_four[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_four[_add].grandAmount += 24 ether;\\r\\n                    if(Global_Pool_four[_add].grandAmount == 768 ether)\\r\\n                    {\\r\\n                           Global_Pool_four[_add].P1_1st = true;\\r\\n                           Global_Pool_four[_add].P1_Done = true;\\r\\n                           Global_Pool_four[_add].Withdrawable_Amount += 368 ether;\\r\\n                           Global_Pool_four[_add].grandAmount = 0;\\r\\n                           for(uint256 d=0; d\\u003c16;d++)\\r\\n                           {\\r\\n                             Global_Pool_1(addresstoid4[_add]);\\r\\n                           }  \\r\\n                           Global_Pool_5(_add);\\r\\n                    }\\r\\n                    _add = Global_Pool_four[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256 private last_ref5 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray5;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId5;\\r\\n    mapping(uint256 =\\u003e address ) private addresstoid5;\\r\\n    uint256 [] private TotalUser5 ;\\r\\n    uint256 private index5 =1;\\r\\n    uint256 private Ids5 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids5;\\r\\n    function Check_userids5(address a) public view returns(uint256 [] memory){\\r\\n        return userids2[a];\\r\\n    }\\r\\n\\r\\n\\r\\n    function Global_Pool_5(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid4[_add_];\\r\\n            userlastId5[useraddress] = Ids5;\\r\\n            addresstoid5[Ids5] = useraddress;\\r\\n            TotalUser5.push(Ids5);\\r\\n            userids5[useraddress].push(Ids5);\\r\\n            Ids5++;\\r\\n        \\r\\n        if(Global_Pool_five[last_ref5].Direct \\u003c 2){\\r\\n        Global_Pool_five[userlastId5[useraddress]].upline = last_ref5;\\r\\n        Global_Pool_five[last_ref5].Direct++;\\r\\n        Global_DirectArray5[last_ref5].push(userlastId5[useraddress]);\\r\\n        }else{\\r\\n            last_ref5 = TotalUser5[index5];\\r\\n            index5++;\\r\\n            Global_Pool_five[userlastId5[useraddress]].upline = last_ref5;\\r\\n            Global_Pool_five[last_ref5].Direct++;  \\r\\n            Global_DirectArray[last_ref5].push(userlastId5[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_five[userlastId5[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_five[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_five[_add].global_income +=48 ether ;\\r\\n                   usdt.transfer(addresstoid2[_add], 48 ether);\\r\\n                   \\r\\n                     if(Global_Pool_five[_add].global_income == 1440 ether)\\r\\n                       {\\r\\n                         Global_Pool_five[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_five[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_five[_add].grandAmount += 48 ether;\\r\\n                    if(Global_Pool_five[_add].grandAmount == 1536 ether)\\r\\n                    {\\r\\n                           Global_Pool_five[_add].P1_1st = true;\\r\\n                           Global_Pool_five[_add].P1_Done = true;\\r\\n                           Global_Pool_five[_add].Withdrawable_Amount += 736 ether;\\r\\n                           Global_Pool_five[_add].grandAmount = 0;\\r\\n                           for(uint256 d=0; d\\u003c32;d++)\\r\\n                           {\\r\\n                             Global_Pool_1(addresstoid5[_add]);\\r\\n                           }\\r\\n                           Global_Pool_6(_add);  \\r\\n                    }\\r\\n                    _add = Global_Pool_five[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    uint256 private last_ref6 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray6;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId6;\\r\\n    mapping(uint256 =\\u003e address ) private addresstoid6;\\r\\n    uint256 [] private TotalUser6 ;\\r\\n    uint256 private index6 =1;\\r\\n    uint256 private Ids6 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids6;\\r\\n    function Check_userids6(address a) public view returns(uint256 [] memory){\\r\\n        return userids6[a];\\r\\n    }\\r\\n\\r\\n\\r\\n    function Global_Pool_6(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid5[_add_];\\r\\n            userlastId6[useraddress] = Ids6;\\r\\n            addresstoid6[Ids6] = useraddress;\\r\\n            TotalUser6.push(Ids6);\\r\\n            userids6[useraddress].push(Ids6);\\r\\n            Ids6++;\\r\\n        \\r\\n        if(Global_Pool_six[last_ref6].Direct \\u003c 2){\\r\\n        Global_Pool_six[userlastId6[useraddress]].upline = last_ref6;\\r\\n        Global_Pool_six[last_ref6].Direct++;\\r\\n        Global_DirectArray6[last_ref6].push(userlastId6[useraddress]);\\r\\n        }else{\\r\\n            last_ref6 = TotalUser6[index6];\\r\\n            index6++;\\r\\n            Global_Pool_six[userlastId6[useraddress]].upline = last_ref6;\\r\\n            Global_Pool_six[last_ref6].Direct++;  \\r\\n            Global_DirectArray[last_ref6].push(userlastId6[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_six[userlastId6[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_six[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_six[_add].global_income +=96 ether ;\\r\\n                   usdt.transfer(addresstoid2[_add], 96 ether);\\r\\n                   \\r\\n                     if(Global_Pool_six[_add].global_income == 2880 ether)\\r\\n                       {\\r\\n                         Global_Pool_six[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_six[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_six[_add].grandAmount += 96 ether;\\r\\n                    if(Global_Pool_six[_add].grandAmount == 3072 ether)\\r\\n                    {\\r\\n                           Global_Pool_six[_add].P1_1st = true;\\r\\n                           Global_Pool_six[_add].P1_Done = true;\\r\\n                           Global_Pool_six[_add].Withdrawable_Amount += 1472 ether;\\r\\n                           Global_Pool_six[_add].grandAmount = 0;\\r\\n                           for(uint256 d=0; d\\u003c64;d++)\\r\\n                           {\\r\\n                             Global_Pool_1(addresstoid6[_add]);\\r\\n                           }\\r\\n                           Global_Pool_7(_add);   \\r\\n                    }\\r\\n                    _add = Global_Pool_six[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    uint256 private last_ref7 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray7;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId7;\\r\\n    mapping(uint256 =\\u003e address ) private addresstoid7;\\r\\n    uint256 [] private TotalUser7 ;\\r\\n    uint256 private index7 =1;\\r\\n    uint256 private Ids7 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids7;\\r\\n    function Check_userids7(address a) public view returns(uint256 [] memory){\\r\\n        return userids7[a];\\r\\n    }\\r\\n\\r\\n\\r\\n    function Global_Pool_7(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid6[_add_];\\r\\n            userlastId7[useraddress] = Ids7;\\r\\n            addresstoid7[Ids7] = useraddress;\\r\\n            TotalUser7.push(Ids7);\\r\\n            userids7[useraddress].push(Ids7);\\r\\n            Ids7++;\\r\\n        \\r\\n        if(Global_Pool_seven[last_ref7].Direct \\u003c 2){\\r\\n        Global_Pool_seven[userlastId7[useraddress]].upline = last_ref7;\\r\\n        Global_Pool_seven[last_ref7].Direct++;\\r\\n        Global_DirectArray7[last_ref7].push(userlastId7[useraddress]);\\r\\n        }else{\\r\\n            last_ref7 = TotalUser7[index7];\\r\\n            index7++;\\r\\n            Global_Pool_seven[userlastId7[useraddress]].upline = last_ref7;\\r\\n            Global_Pool_seven[last_ref7].Direct++;  \\r\\n            Global_DirectArray[last_ref7].push(userlastId7[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_seven[userlastId7[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_seven[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_seven[_add].global_income +=192 ether ;\\r\\n                   usdt.transfer(addresstoid2[_add], 192 ether);\\r\\n                   \\r\\n                     if(Global_Pool_seven[_add].global_income == 5760 ether)\\r\\n                       {\\r\\n                         Global_Pool_seven[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_seven[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_seven[_add].grandAmount += 192 ether;\\r\\n                    if(Global_Pool_seven[_add].grandAmount == 6144 ether)\\r\\n                    {\\r\\n                           Global_Pool_seven[_add].P1_1st = true;\\r\\n                           Global_Pool_seven[_add].P1_Done = true;\\r\\n                           Global_Pool_seven[_add].Withdrawable_Amount += 2944 ether;\\r\\n                           Global_Pool_seven[_add].grandAmount = 0;\\r\\n                           for(uint256 d=0; d\\u003c128;d++)\\r\\n                           {\\r\\n                             Global_Pool_1(addresstoid7[_add]);\\r\\n                           }\\r\\n                           Global_Pool_8(_add);   \\r\\n                    }\\r\\n                    _add = Global_Pool_seven[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256 private last_ref8 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray8;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId8;\\r\\n    mapping(uint256 =\\u003e address ) private addresstoid8;\\r\\n    uint256 [] private TotalUser8 ;\\r\\n    uint256 private index8 =1;\\r\\n    uint256 private Ids8 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids8;\\r\\n    function Check_userids8(address a) public view returns(uint256 [] memory){\\r\\n        return userids8[a];\\r\\n    }\\r\\n\\r\\n\\r\\n    function Global_Pool_8(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid7[_add_];\\r\\n            userlastId8[useraddress] = Ids8;\\r\\n            addresstoid8[Ids8] = useraddress;\\r\\n            TotalUser8.push(Ids8);\\r\\n            userids8[useraddress].push(Ids8);\\r\\n            Ids8++;\\r\\n        \\r\\n        if(Global_Pool_eight[last_ref8].Direct \\u003c 2){\\r\\n        Global_Pool_eight[userlastId8[useraddress]].upline = last_ref8;\\r\\n        Global_Pool_eight[last_ref8].Direct++;\\r\\n        Global_DirectArray8[last_ref8].push(userlastId8[useraddress]);\\r\\n        }else{\\r\\n            last_ref8 = TotalUser8[index8];\\r\\n            index8++;\\r\\n            Global_Pool_eight[userlastId8[useraddress]].upline = last_ref8;\\r\\n            Global_Pool_eight[last_ref8].Direct++;  \\r\\n            Global_DirectArray[last_ref8].push(userlastId8[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_eight[userlastId8[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_eight[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_eight[_add].global_income +=384 ether ;\\r\\n                   usdt.transfer(addresstoid2[_add], 384 ether);\\r\\n                   \\r\\n                     if(Global_Pool_eight[_add].global_income == 11520 ether)\\r\\n                       {\\r\\n                         Global_Pool_eight[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_eight[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_eight[_add].grandAmount += 384 ether;\\r\\n                    if(Global_Pool_eight[_add].grandAmount == 12288 ether)\\r\\n                    {\\r\\n                           Global_Pool_eight[_add].P1_1st = true;\\r\\n                           Global_Pool_eight[_add].P1_Done = true;\\r\\n                           Global_Pool_eight[_add].Withdrawable_Amount += 5888 ether;\\r\\n                           Global_Pool_eight[_add].grandAmount = 0;\\r\\n                           for(uint256 d=0; d\\u003c128;d++)\\r\\n                           {\\r\\n                             Global_Pool_1(addresstoid8[_add]);\\r\\n                           }\\r\\n                           Global_Pool_9(_add);   \\r\\n                    }\\r\\n                    _add = Global_Pool_eight[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256 private last_ref9 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray9;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId9;\\r\\n    mapping(uint256 =\\u003e address ) private addresstoid9;\\r\\n    uint256 [] private TotalUser9 ;\\r\\n    uint256 private index9 =1;\\r\\n    uint256 private Ids9 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids9;\\r\\n    function Check_userids9(address a) public view returns(uint256 [] memory){\\r\\n        return userids9[a];\\r\\n    }\\r\\n\\r\\n\\r\\n    function Global_Pool_9(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid8[_add_];\\r\\n            userlastId9[useraddress] = Ids9;\\r\\n            addresstoid9[Ids9] = useraddress;\\r\\n            TotalUser9.push(Ids9);\\r\\n            userids9[useraddress].push(Ids9);\\r\\n            Ids9++;\\r\\n        \\r\\n        if(Global_Pool_nine[last_ref9].Direct \\u003c 2){\\r\\n        Global_Pool_nine[userlastId9[useraddress]].upline = last_ref9;\\r\\n        Global_Pool_nine[last_ref9].Direct++;\\r\\n        Global_DirectArray9[last_ref9].push(userlastId9[useraddress]);\\r\\n        }else{\\r\\n            last_ref9 = TotalUser9[index9];\\r\\n            index9++;\\r\\n            Global_Pool_nine[userlastId9[useraddress]].upline = last_ref9;\\r\\n            Global_Pool_nine[last_ref9].Direct++;  \\r\\n            Global_DirectArray[last_ref9].push(userlastId9[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_nine[userlastId9[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_nine[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_nine[_add].global_income +=768 ether ;\\r\\n                   usdt.transfer(addresstoid2[_add], 768 ether);\\r\\n                   \\r\\n                     if(Global_Pool_nine[_add].global_income == 23040 ether)\\r\\n                       {\\r\\n                         Global_Pool_nine[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_nine[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_nine[_add].grandAmount += 768 ether;\\r\\n                    if(Global_Pool_nine[_add].grandAmount == 24576 ether)\\r\\n                    {\\r\\n                           Global_Pool_nine[_add].P1_1st = true;\\r\\n                           Global_Pool_nine[_add].P1_Done = true;\\r\\n                           Global_Pool_nine[_add].Withdrawable_Amount += 11776 ether;\\r\\n                           Global_Pool_nine[_add].grandAmount = 0;\\r\\n                           for(uint256 d=0; d\\u003c512;d++)\\r\\n                           {\\r\\n                             Global_Pool_1(addresstoid9[_add]);\\r\\n                           }\\r\\n                           Global_Pool_10(_add);\\r\\n                    }\\r\\n                    _add = Global_Pool_nine[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256 private last_ref10 =1;\\r\\n    mapping(uint256 =\\u003e uint256 []) private Global_DirectArray10;\\r\\n    mapping(address =\\u003e uint256 ) private userlastId10;\\r\\n    mapping(uint256 =\\u003e address ) private addresstoid10;\\r\\n    uint256 [] private TotalUser10 ;\\r\\n    uint256 private index10 =1;\\r\\n    uint256 private Ids10 =1;\\r\\n    mapping(address =\\u003e uint256 []) private userids10;\\r\\n    function Check_userids10(address a) public view returns(uint256 [] memory){\\r\\n        return userids10[a];\\r\\n    }\\r\\n\\r\\n\\r\\n    function Global_Pool_10(uint256 _add_) private{       \\r\\n            address useraddress = addresstoid10[_add_];\\r\\n            userlastId10[useraddress] = Ids10;\\r\\n            addresstoid10[Ids10] = useraddress;\\r\\n            TotalUser10.push(Ids10);\\r\\n            userids10[useraddress].push(Ids10);\\r\\n            Ids10++;\\r\\n        \\r\\n        if(Global_Pool_Ten[last_ref10].Direct \\u003c 2){\\r\\n        Global_Pool_Ten[userlastId10[useraddress]].upline = last_ref10;\\r\\n        Global_Pool_Ten[last_ref10].Direct++;\\r\\n        Global_DirectArray10[last_ref10].push(userlastId10[useraddress]);\\r\\n        }else{\\r\\n            last_ref10 = TotalUser10[index10];\\r\\n            index10++;\\r\\n            Global_Pool_Ten[userlastId10[useraddress]].upline = last_ref10;\\r\\n            Global_Pool_Ten[last_ref10].Direct++;  \\r\\n            Global_DirectArray[last_ref10].push(userlastId10[useraddress]);  \\r\\n        }\\r\\n        uint256 _add = Global_Pool_Ten[userlastId10[useraddress]].upline;\\r\\n\\r\\n        for(uint256 t=0;t\\u003c5;t++)\\r\\n        {      \\r\\n            if(_add != 0 \\u0026\\u0026 _add != 1)\\r\\n            {\\r\\n                if(Global_Pool_Ten[_add].P1 == false)\\r\\n                 {\\r\\n                   Global_Pool_Ten[_add].global_income +=1536 ether ;\\r\\n                   usdt.transfer(addresstoid2[_add], 1536 ether);\\r\\n                   \\r\\n                     if(Global_Pool_Ten[_add].global_income == 46080 ether)\\r\\n                       {\\r\\n                         Global_Pool_Ten[_add].P1 = true;\\r\\n                       }\\r\\n                       _add = Global_Pool_Ten[_add].upline;\\r\\n                 }else\\r\\n                 {\\r\\n                    Global_Pool_Ten[_add].grandAmount += 1536 ether;\\r\\n                    if(Global_Pool_Ten[_add].grandAmount == 49152 ether)\\r\\n                    {\\r\\n                           Global_Pool_Ten[_add].P1_1st = true;\\r\\n                           Global_Pool_Ten[_add].P1_Done = true;\\r\\n                           Global_Pool_Ten[_add].Withdrawable_Amount += 23552 ether;\\r\\n                           Global_Pool_Ten[_add].grandAmount = 0;\\r\\n                           for(uint256 d=0; d\\u003c1024;d++)\\r\\n                           {\\r\\n                             Global_Pool_1(addresstoid10[_add]);\\r\\n                           } \\r\\n                    }\\r\\n                    _add = Global_Pool_Ten[_add].upline;\\r\\n                 }\\r\\n            }else\\r\\n            {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setUpline (address _addr, address  _upline) private {\\r\\n        if(Referrals [_addr].upline == address(0) \\u0026\\u0026 _upline != _addr \\u0026\\u0026 _addr != owner \\u0026\\u0026 (Referrals[_upline].deposit_time \\u003e 0 || _upline == owner)) {\\r\\n            Referrals[_addr].upline = _upline;\\r\\n            Referrals[_upline].referrals++;\\r\\n        }\\r\\n    }\\r\\n    function IsUpline( address _upline) public view returns(bool status){\\r\\n        if(Referrals[msg.sender].upline == address(0) \\u0026\\u0026 _upline != msg.sender \\u0026\\u0026 msg.sender != owner \\u0026\\u0026 (Referrals[_upline].deposit_time \\u003e 0 || _upline == owner)) \\r\\n        {\\r\\n            status = true;  \\r\\n        }\\r\\n        return status;\\r\\n    }\\r\\n    function ChakUpline( address _upline) public view returns(address add){\\r\\n        return Referrals[_upline].upline;\\r\\n    }\\r\\n    function DirectArray_global(uint256 a) public view returns(uint256 [] memory){\\r\\n        return Global_DirectArray[a];\\r\\n    }\\r\\n    function DirectArray(address a) public view returns(address [] memory){\\r\\n        return _DirectArray[a];\\r\\n    }\\r\\n     function set_replace_Upline (address _addr, address  _upline,uint256 _positions) private {\\r\\n        require(Position_status[_upline][_positions] == false,\\\"position not free\\\");\\r\\n            ReplaceBy[_addr].upline = _upline;\\r\\n            ReplaceBy[_addr].position = _positions ;\\r\\n            Position_status[_upline][_positions] = true;\\r\\n            if(_positions == 1){\\r\\n            ReplaceBy[_upline].left_side = _addr;\\r\\n            }else{\\r\\n                ReplaceBy[_upline].right_side = _addr;\\r\\n            } \\r\\n            \\r\\n    }\\r\\n      function Check_Placement( address _upline) public view returns(address add){\\r\\n        return ReplaceBy[_upline].upline;\\r\\n    }\\r\\n    function levelincome(address currentReferrer , uint256 amo) private{\\r\\n        // address  = a;\\r\\n        address s;\\r\\n        for (uint256 i = 0; i \\u003c 50; i++) \\r\\n        {\\r\\n            s = ChakUpline(currentReferrer);\\r\\n            if (currentReferrer == owner) \\r\\n            {\\r\\n                user[currentReferrer].owner_levelROI +=amo;\\r\\n                break;\\r\\n            }\\r\\n            if(Position_to_raffar[currentReferrer][s] == 1 )\\r\\n            {\\r\\n                currentReferrer = Check_Placement(currentReferrer);\\r\\n                user[currentReferrer].levelROI_left_side +=amo; \\r\\n                ReplaceBy[currentReferrer].Total_levelROI_left_side += amo;\\r\\n            }\\r\\n            else{\\r\\n                currentReferrer = Check_Placement(currentReferrer);\\r\\n                user[currentReferrer].levelROI_right_side +=amo;\\r\\n                ReplaceBy[currentReferrer].Total_levelROI_right_side += amo;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    function SIGNUP(address _referral,uint256 _amount ,uint256 _position) external  nonReentrant{\\r\\n        require(Referrals[msg.sender].upline == address(0), \\\"already register\\\");\\r\\n        require(IsUpline(_referral) == true, \\\"upline not found\\\");\\r\\n        require(_amount \\u003e= user[msg.sender].amount, \\\"min 50\\\");\\r\\n        require(_amount % 50 ether ==0 , \\\"Invalid amount\\\");\\r\\n        require(_position == 1 || _position == 2, \\\"please enter 1 or 2\\\");\\r\\n        _setUpline(msg.sender,_referral);\\r\\n        Referrals[msg.sender].deposit_time = uint40(block.timestamp);\\r\\n        ReplaceBy[msg.sender].last_right =msg.sender;\\r\\n        ReplaceBy[msg.sender].last_Left  = msg.sender;\\r\\n        if(_position == 1)\\r\\n            {\\r\\n                    set_replace_Upline(msg.sender,ReplaceBy[_referral].last_Left,_position);\\r\\n                    ReplaceBy[_referral].last_Left  = msg.sender;\\r\\n                    ReplaceBy[ReplaceBy[_referral].last_Left].last_Left  = msg.sender;\\r\\n                                       \\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                    set_replace_Upline(msg.sender,ReplaceBy[_referral].last_right,_position);\\r\\n                    ReplaceBy[_referral].last_right  = msg.sender;\\r\\n                    ReplaceBy[ReplaceBy[_referral].last_right].last_right  = msg.sender;\\r\\n                                        \\r\\n            }\\r\\n        usdt.transferFrom(msg.sender,address(this),_amount);\\r\\n        uint256 a1 = _amount*5/100;\\r\\n        uint256 a2 = _amount*1/100;\\r\\n        \\r\\n        usdt.transfer(Add1,a1);\\r\\n        usdt.transfer(Add2,a2);        \\r\\n        _amount = _amount.sub(10 ether);\\r\\n        _DirectArray[_referral].push(msg.sender);\\r\\n        TotalUser.push(msg.sender);\\r\\n        user[msg.sender].amount = _amount;\\r\\n        user[msg.sender].userIncome += _amount;\\r\\n        user[msg.sender].time   = uint40(block.timestamp);\\r\\n        user[msg.sender].DailyPercentage = 500000000000000000;\\r\\n        user[msg.sender].TotalPercentage = 200;\\r\\n        user[msg.sender].maxrewad  = _amount*200/100;\\r\\n        user[msg.sender].capping  += _amount*400/100;  \\r\\n        Position_to_raffar[msg.sender][_referral] = _position;\\r\\n        levelincome(msg.sender,_amount); \\r\\n        Global_Pool_1(msg.sender);\\r\\n    }\\r\\n    function Activation(uint256 _amount) external nonReentrant {\\r\\n        require(Referrals[msg.sender].upline != address(0), \\\"please register\\\");\\r\\n        require(_amount \\u003e= user[msg.sender].amount, \\\"min 50\\\");\\r\\n        require(_amount % 50 ether ==0 , \\\"Invalid amount\\\");\\r\\n        \\r\\n\\r\\n        usdt.transferFrom(msg.sender,address(this),_amount);\\r\\n        uint256 a1 = _amount*5/100;\\r\\n        uint256 a2 = _amount*1/100;\\r\\n        \\r\\n        usdt.transfer(Add1,a1);\\r\\n        usdt.transfer(Add2,a2);\\r\\n        _amount = _amount.sub(10 ether);\\r\\n        user[msg.sender].amount =_amount;\\r\\n        user[msg.sender].userIncome += _amount;\\r\\n        user[msg.sender].time   = uint40(block.timestamp);\\r\\n        user[msg.sender].DailyPercentage = 500000000000000000;\\r\\n        user[msg.sender].TotalPercentage = 200;\\r\\n        user[msg.sender].maxrewad  = _amount*200/100; \\r\\n        user[msg.sender].capping  = _amount*400/100;\\r\\n        levelincome(msg.sender,_amount); \\r\\n        user[msg.sender].stop = true;\\r\\n        Global_Pool_1(msg.sender);\\r\\n    }\\r\\n    function Matching_income() public nonReentrant {\\r\\n        uint256 matchingamount;\\r\\n        if ( user[msg.sender].levelROI_left_side\\u003e user[msg.sender].levelROI_right_side )\\r\\n        {\\r\\n            matchingamount = user[msg.sender].levelROI_right_side;\\r\\n            user[msg.sender].levelROI_left_side = user[msg.sender].levelROI_left_side.sub(user[msg.sender].levelROI_right_side);\\r\\n            user[msg.sender].levelROI_right_side=0;\\r\\n        }else{\\r\\n            matchingamount = user[msg.sender].levelROI_left_side;\\r\\n            user[msg.sender].levelROI_right_side = user[msg.sender].levelROI_right_side.sub(user[msg.sender].levelROI_left_side);\\r\\n            user[msg.sender].levelROI_left_side=0;\\r\\n        }\\r\\n\\r\\n        uint256 matching_reward = Check_Matching_Income(msg.sender);\\r\\n        if(matching_reward \\u003e0)\\r\\n        {\\r\\n            users[msg.sender].withdrawreward += matching_reward;\\r\\n            user[msg.sender].capping = user[msg.sender].capping.sub(matching_reward);\\r\\n            usdt.transfer(msg.sender,matching_reward);\\r\\n        }\\r\\n        \\r\\n\\r\\n        users[msg.sender].amount += matchingamount;\\r\\n        users[msg.sender].time   = uint40(block.timestamp);\\r\\n        users[msg.sender].DailyPercentage += (matchingamount*500000000000000000/100000000000000000000);\\r\\n        users[msg.sender].maxrewad  += matchingamount;         \\r\\n\\r\\n        // users\\r\\n    }\\r\\n    function Check_Matching_Income(address _add) public view returns(uint256){\\r\\n        uint256 totaltime = (block.timestamp-users[_add].time)/(time);\\r\\n        uint256 totalreward = (totaltime*users[_add].DailyPercentage);\\r\\n        uint256 totalavalaiblereward =  totalreward-users[_add].withdrawreward;\\r\\n        if(users[_add].withdrawreward+totalavalaiblereward \\u003e users[_add].maxrewad)\\r\\n        {\\r\\n            totalavalaiblereward = users[_add].maxrewad-users[_add].withdrawreward;\\r\\n        }\\r\\n        return totalavalaiblereward;\\r\\n    }\\r\\n    function Check_ROI_Income(address _add) public view returns(uint256){\\r\\n        uint256 totalavalaiblereward;\\r\\n        if(user[_add].stop == false){\\r\\n        uint256 totaltime = (block.timestamp-user[_add].time)/(time);\\r\\n        uint256 totalreward = ((user[_add].amount*user[_add].DailyPercentage/100)/1e18)*totaltime;\\r\\n         totalavalaiblereward =  totalreward-user[_add].withdrawreward;\\r\\n        if(user[_add].withdrawreward+totalavalaiblereward \\u003e user[_add].maxrewad)\\r\\n        {\\r\\n            totalavalaiblereward = user[_add].maxrewad.sub(user[_add].withdrawreward);\\r\\n        }\\r\\n        }else{\\r\\n            totalavalaiblereward =0;\\r\\n        }\\r\\n        return totalavalaiblereward;\\r\\n    }\\r\\n      function WithdrawReward() external nonReentrant{\\r\\n \\r\\n        uint256 reward = Check_ROI_Income(msg.sender);\\r\\n        user[msg.sender].withdrawreward += reward;\\r\\n        uint256 matching_reward = Check_Matching_Income(msg.sender);\\r\\n        users[msg.sender].withdrawreward += matching_reward; \\r\\n        uint256 total_reward = reward+matching_reward;\\r\\n        user[msg.sender].capping = user[msg.sender].capping.sub(total_reward);\\r\\n        Referrals[msg.sender].totalearn += total_reward;\\r\\n        require(total_reward \\u003e= 10 ether , \\\"error\\\"); \\r\\n        usdt.transfer(msg.sender,total_reward);        \\r\\n    }\\r\\n        function Change_Owner(address add) external onlyOwner\\r\\n    {\\r\\n        owner = add;\\r\\n    }\\r\\n\\r\\n    function OwnerClaim(address add) external onlyOwner\\r\\n    {\\r\\n        require(block.timestamp \\u003e user[add].time + 365 days,\\\"error\\\");\\r\\n        uint256 matching_reward = Check_Matching_Income(add);\\r\\n        uint256 reward = Check_ROI_Income(add);\\r\\n        users[add].withdrawreward += matching_reward;\\r\\n        user[add].withdrawreward += reward;\\r\\n        \\r\\n        for(uint256 i=0; i \\u003c userids[add].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids[add][i];\\r\\n            reward += Global_Pool_One[_add].Withdrawable_Amount;\\r\\n            Global_Pool_One[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        if(userids2[add].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids2[add].length;i++)\\r\\n        {\\r\\n            uint256 _add = userids2[add][i];\\r\\n            reward += Global_Pool_two[_add].Withdrawable_Amount;\\r\\n            Global_Pool_two[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }\\r\\n        if(userids3[add].length \\u003e0){\\r\\n        for(uint256 i=0; i \\u003c userids3[add].length;i++)\\r\\n        {\\r\\n            uint256 _add =userids3[add][i];\\r\\n            reward += Global_Pool_three[_add].Withdrawable_Amount;\\r\\n            Global_Pool_three[_add].Withdrawable_Amount=0;\\r\\n        }\\r\\n        }\\r\\n        usdt.transfer(msg.sender,reward);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }  \\r\\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\\r\\n        uint256 c = add(a,m);\\r\\n        uint256 d = sub(c,1);\\r\\n        return mul(div(d,m),m);\\r\\n    } \\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Activation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"ChakUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"Change_Owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"Check_Matching_Income\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"Check_Placement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"Check_ROI_Income\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids10\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids3\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids4\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids5\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids6\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids7\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids8\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"Check_userids9\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"DirectArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"DirectArray_global\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_One\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_Ten\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_eight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_five\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_four\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_nine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_seven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_six\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_three\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Global_Pool_two\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Direct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"grandAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"P1_Done\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"P1_1st\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"Withdrawable_Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"}],\"name\":\"IsUpline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Matching_income\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"OwnerClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"totalearn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ReplaceBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"last_Left\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"last_right\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"left_side\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"right_side\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Total_levelROI_left_side\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Total_levelROI_right_side\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"SIGNUP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Start_Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw_global_Reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_DirectArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DailyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"TotalPercentage\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"withdrawreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxrewad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capping\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelROI_left_side\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelROI_right_side\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TeamIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owner_levelROI\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DailyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"TotalPercentage\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"withdrawreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxrewad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capping\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelROI_left_side\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelROI_right_side\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TeamIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"owner_levelROI\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stop\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Firewaves", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://65aa2768baae962875a947724d8651c11ea6a4a23041b3c5cc7dd50dfa9e999d"}