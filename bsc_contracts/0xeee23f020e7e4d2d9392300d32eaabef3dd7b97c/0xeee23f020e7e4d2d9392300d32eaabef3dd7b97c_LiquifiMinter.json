{"SourceCode": "pragma solidity = 0.7.0;\r\n\r\n\r\ninterface ActivityMeter {\r\n    event Deposit(address indexed user, address indexed pool, uint amount);\r\n    event Withdraw(address indexed user, address indexed pool, uint amount);\r\n\r\n    function actualizeUserPool(uint endPeriod, address user, address pool) external returns (uint ethLocked, uint mintedAmount) ;  \r\n    function deposit(address pool, uint128 amount) external returns (uint ethLocked, uint mintedAmount);\r\n    function withdraw(address pool, uint128 amount) external returns (uint ethLocked, uint mintedAmount);\r\n    function actualizeUserPools() external returns (uint ethLocked, uint mintedAmount);\r\n    function liquidityEthPriceChanged(uint effectiveTime, uint availableBalanceEth, uint totalSupply) external;\r\n    function effectivePeriod(uint effectiveTime) external view returns (uint periodNumber, uint quantaElapsed);\r\n    function governanceRouter() external view returns (GovernanceRouter);\r\n    function userEthLocked(address user) external view returns (uint ethLockedPeriod, uint ethLocked, uint totalEthLocked);\r\n    \r\n    function ethLockedHistory(uint period) external view returns (uint ethLockedTotal);\r\n\r\n    function poolsPriceHistory(uint period, address pool) external view returns (\r\n        uint cumulativeEthPrice,\r\n        uint240 lastEthPrice,\r\n        uint16 timeRef\r\n    );\r\n\r\n    function userPoolsSummaries(address user, address pool) external view returns (\r\n        uint144 cumulativeAmountLocked,\r\n        uint16 amountChangeQuantaElapsed,\r\n\r\n        uint128 lastAmountLocked,\r\n        uint16 firstPeriod,\r\n        uint16 lastPriceRecord,\r\n        uint16 earnedForPeriod\r\n    );\r\n\r\n    function userPools(address user, uint poolIndex) external view returns (address pool);\r\n    function userPoolsLength(address user) external view returns (uint length);\r\n\r\n    function userSummaries(address user) external view returns (\r\n        uint128 ethLocked,\r\n        uint16 ethLockedPeriod,\r\n        uint16 firstPeriod\r\n    );\r\n    \r\n    function poolSummaries(address pool) external view returns (\r\n        uint16 lastPriceRecord\r\n    );\r\n    \r\n    function users(uint userIndex) external view returns (address user);\r\n    function usersLength() external view returns (uint);\r\n}\r\n\r\ninterface ERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool success);\r\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function transfer(address to, uint256 value) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface Minter is ERC20 {\r\n    event Mint(address indexed to, uint256 value, uint indexed period, uint userEthLocked, uint totalEthLocked);\r\n\r\n    function governanceRouter() external view returns (GovernanceRouter);\r\n    function mint(address to, uint period, uint128 userEthLocked, uint totalEthLocked) external returns (uint amount);\r\n    function userTokensToClaim(address user) external view returns (uint amount);\r\n    function periodTokens(uint period) external pure returns (uint128);\r\n    function periodDecayK() external pure returns (uint decayK);\r\n    function initialPeriodTokens() external pure returns (uint128);\r\n}\r\n\r\ninterface PoolFactory {\r\n    event PoolCreatedEvent(address tokenA, address tokenB, bool aIsWETH, address indexed pool);\r\n\r\n    function getPool(address tokenA, address tokenB) external returns (address);\r\n    function findPool(address tokenA, address tokenB) external view returns (address);\r\n    function pools(uint poolIndex) external view returns (address pool);\r\n    function getPoolCount() external view returns (uint);\r\n}\r\n\r\ninterface WETH is ERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface GovernanceRouter {\r\n    event GovernanceApplied(uint packedGovernance);\r\n    event GovernorChanged(address covernor);\r\n    event ProtocolFeeReceiverChanged(address protocolFeeReceiver);\r\n    event PoolFactoryChanged(address poolFactory);\r\n\r\n    function schedule() external returns(uint timeZero, uint miningPeriod);\r\n    function creator() external returns(address);\r\n    function weth() external returns(WETH);\r\n\r\n    function activityMeter() external returns(ActivityMeter);\r\n    function setActivityMeter(ActivityMeter _activityMeter) external;\r\n\r\n    function minter() external returns(Minter);\r\n    function setMinter(Minter _minter) external;\r\n\r\n    function poolFactory() external returns(PoolFactory);\r\n    function setPoolFactory(PoolFactory _poolFactory) external;\r\n\r\n    function protocolFeeReceiver() external returns(address);\r\n    function setProtocolFeeReceiver(address _protocolFeeReceiver) external;\r\n\r\n    function governance() external view returns (address _governor, uint96 _defaultGovernancePacked);\r\n    function setGovernor(address _governor) external;\r\n    function applyGovernance(uint96 _defaultGovernancePacked) external;\r\n}\r\n\r\nlibrary Liquifi {\r\n    enum Flag { \r\n        // padding 8 bits\r\n        PAD1, PAD2, PAD3, PAD4, PAD5, PAD6, PAD7, PAD8,\r\n        // transient flags\r\n        HASH_DIRTY, BALANCE_A_DIRTY, BALANCE_B_DIRTY, TOTALS_DIRTY, QUEUE_STOPLOSS_DIRTY, QUEUE_TIMEOUT_DIRTY, MUTEX, INVALID_STATE,\r\n        TOTAL_SUPPLY_DIRTY, SWAPS_INCOME_DIRTY, RESERVED1, RESERVED2,\r\n        // persistent flags set by governance\r\n        POOL_LOCKED, ARBITRAGEUR_FULL_FEE, GOVERNANCE_OVERRIDEN\r\n    }\r\n\r\n    struct PoolBalances { // optimized for storage\r\n        // saved on BALANCE_A_DIRTY in exit()\r\n        uint112 balanceALocked;\r\n        uint144 poolFlowSpeedA; // flow speed: (amountAIn * 2^32)/second\r\n\r\n        // saved on BALANCE_B_DIRTY in exit()\r\n        uint112 balanceBLocked;\r\n        uint144 poolFlowSpeedB; // flow speed: (amountBIn * 2^32)/second\r\n        \r\n        // saved on TOTALS_DIRTY in exit()\r\n        uint128 totalBalanceA;\r\n        uint128 totalBalanceB;\r\n\r\n        // saved on SWAPS_INCOME_DIRTY in exit()\r\n        // contains 128 bits of delayedSwapsIncomeA and 128 bits of delayedSwapsIncomeB\r\n        uint delayedSwapsIncome;\r\n        \r\n        // saved on TOTAL_SUPPLY_DIRTY in exit()\r\n        // contains 128 bits of rootKLast and 128 bits of totalSupply\r\n        // rootKLast = sqrt(availableBalanceA * availableBalanceB), as of immediately after the most recent liquidity event\r\n        uint rootKLastTotalSupply;\r\n    }\r\n\r\n    struct PoolState { // optimized for storage\r\n        // saved on HASH_DIRTY in exit()\r\n        bytes32 lastBreakHash;\r\n\r\n        // saved on QUEUE_STOPLOSS_DIRTY in exit()\r\n        uint64 firstByTokenAStopLoss; uint64 lastByTokenAStopLoss; // linked list of orders sorted by (amountAIn/stopLossAmount) ascending\r\n        uint64 firstByTokenBStopLoss; uint64 lastByTokenBStopLoss; // linked list of orders sorted by (amountBIn/stopLossAmount) ascending\r\n\r\n        // saved on QUEUE_TIMEOUT_DIRTY in exit()\r\n        uint64 firstByTimeout; uint64 lastByTimeout; // linked list of orders sorted by timeouts ascending\r\n        // this field contains\r\n        // 8 bits of instantSwapFee\r\n        // 8 bits of desiredOrdersFee\r\n        // 8 bits of protocolFee\r\n        // 32 bits of maxPeriod\r\n        // 16 bits of desiredMaxHistory\r\n        // 4 bits of persistent flags\r\n        // 12 bits of transient flags\r\n        // 8 bits of transient invalidStateReason (ErrorArg)\r\n        // Packing reduces stack depth and helps in governance\r\n        uint96 packed; // not saved in exit(), saved only by governance\r\n        uint16 notFee; // not saved in exit()\r\n\r\n        // This word is always saved in exit()\r\n        uint64 lastBalanceUpdateTime;\r\n        uint64 nextBreakTime;\r\n        uint32 maxHistory;\r\n        uint32 ordersToClaimCount;\r\n        uint64 breaksCount; // counter with increments of 2. 1st bit is used as mutex flag\r\n    }\r\n\r\n    enum OrderFlag { \r\n        NONE, IS_TOKEN_A, EXTRACT_ETH\r\n    }\r\n\r\n    struct Order { // optimized for storage, fits into 3 words\r\n        // Also closing hash is saved in this word on order close.\r\n        // Closing hash always has last bit = 1, I.e. prevByStopLoss & 1 == 1\r\n        uint64 nextByTimeout; uint64 prevByTimeout;\r\n        uint64 nextByStopLoss; uint64 prevByStopLoss;\r\n        \r\n        // mostly used together\r\n        uint112 stopLossAmount;\r\n        uint112 amountIn;\r\n        uint32 period;\r\n\r\n        address owner;\r\n        uint64 timeout;\r\n        uint8 flags;\r\n    }\r\n\r\n    struct OrderClaim { //in-memory only\r\n        uint amountOut;\r\n        uint orderFlowSpeed;\r\n        uint orderId;\r\n        uint flags;\r\n        uint closeReason;\r\n        uint previousAvailableBalance;\r\n        uint previousFlowSpeed;\r\n        uint previousOthers;\r\n    }\r\n\r\n    enum Error { \r\n        A_MUL_OVERFLOW, \r\n        B_ADD_OVERFLOW, \r\n        C_TOO_BIG_TIME_VALUE, \r\n        D_TOO_BIG_PERIOD_VALUE,\r\n        E_TOO_BIG_AMOUNT_VALUE,\r\n        F_ZERO_AMOUNT_VALUE,\r\n        G_ZERO_PERIOD_VALUE,\r\n        H_BALANCE_AFTER_BREAK,\r\n        I_BALANCE_OF_SAVED_UPD,\r\n        J_INVALID_POOL_STATE,\r\n        K_TOO_BIG_TOTAL_VALUE,\r\n        L_INSUFFICIENT_LIQUIDITY,\r\n        M_EMPTY_LIST,\r\n        N_BAD_LENGTH,\r\n        O_HASH_MISMATCH,\r\n        P_ORDER_NOT_CLOSED,\r\n        Q_ORDER_NOT_ADDED,\r\n        R_INCOMPLETE_HISTORY,\r\n        S_REENTRANCE_NOT_SUPPORTED,\r\n        T_INVALID_TOKENS_PAIR,\r\n        U_TOKEN_TRANSFER_FAILED,\r\n        V_ORDER_NOT_EXIST,\r\n        W_DIV_BY_ZERO,\r\n        X_ORDER_ALREADY_CLOSED,\r\n        Y_UNAUTHORIZED_SENDER,\r\n        Z_TOO_BIG_FLOW_SPEED_VALUE\r\n    }\r\n\r\n    enum ErrorArg {\r\n        A_NONE,\r\n        B_IN_AMOUNT,\r\n        C_OUT_AMOUNT,\r\n        D_STOP_LOSS_AMOUNT,\r\n        E_IN_ADD_ORDER,\r\n        F_IN_SWAP,\r\n        G_IN_COMPUTE_AVAILABLE_BALANCE,\r\n        H_IN_BREAKS_HISTORY,\r\n        I_USER_DATA,\r\n        J_IN_ORDER,\r\n        K_IN_MINT,\r\n        L_IN_BURN,\r\n        M_IN_CLAIM_ORDER,\r\n        N_IN_PROCESS_DELAYED_ORDERS,\r\n        O_TOKEN_A,\r\n        P_TOKEN_B,\r\n        Q_TOKEN_ETH,\r\n        R_IN_CLOSE_ORDER,\r\n        S_BY_GOVERNANCE,\r\n        T_FEE_CHANGED_WITH_ORDERS_OPEN,\r\n        U_BAD_EXCHANGE_RATE,\r\n        V_INSUFFICIENT_TOTAL_BALANCE,\r\n        W_POOL_LOCKED,\r\n        X_TOTAL_SUPPLY\r\n    }\r\n\r\n    // this methods allows to pass some information in 'require' calls without storing strings in contract bytecode \r\n    // messages will be like \"FAIL https://err.liquifi.org/XY\" where X and Y are error and errorArg from respective enums\r\n    function _require(bool condition, Error error, ErrorArg errorArg) internal pure {\r\n        if (condition) return;\r\n        { // new scope to not waste message memory if condition is satisfied \r\n            // FAIL https://err.liquifi.org/__\r\n            bytes memory message = \"\\x46\\x41\\x49\\x4c\\x20\\x68\\x74\\x74\\x70\\x73\\x3a\\x2f\\x2f\\x65\\x72\\x72\\x2e\\x6c\\x69\\x71\\x75\\x69\\x66\\x69\\x2e\\x6f\\x72\\x67\\x2f\\x5f\\x5f\";\r\n            \r\n            message[29] = bytes1(65 + uint8(error));\r\n            message[30] = bytes1(65 + uint8(errorArg));\r\n            require(false, string(message));\r\n        }\r\n    }\r\n\r\n    uint64 constant maxTime = ~uint64(0);\r\n\r\n    function trimTime(uint time) internal pure returns (uint64 trimmedTime) {\r\n        Liquifi._require(time <= maxTime, Liquifi.Error.C_TOO_BIG_TIME_VALUE, Liquifi.ErrorArg.A_NONE);\r\n        return uint64(time);\r\n    }\r\n\r\n    function trimPeriod(uint period, Liquifi.ErrorArg periodType) internal pure returns (uint32 trimmedPeriod) {\r\n        Liquifi._require(period <= ~uint32(0), Liquifi.Error.D_TOO_BIG_PERIOD_VALUE, periodType);\r\n        return uint32(period);\r\n    }\r\n\r\n    function trimAmount(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint112 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint112(0), Liquifi.Error.E_TOO_BIG_AMOUNT_VALUE, amountType);\r\n        return uint112(amount);\r\n    }\r\n\r\n\r\n    function trimTotal(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint128 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint128(0), Liquifi.Error.K_TOO_BIG_TOTAL_VALUE, amountType);\r\n        return uint128(amount);\r\n    }\r\n\r\n    function trimFlowSpeed(uint amount, Liquifi.ErrorArg amountType) internal pure returns (uint144 trimmedAmount) {\r\n        Liquifi._require(amount <= ~uint144(0), Liquifi.Error.Z_TOO_BIG_FLOW_SPEED_VALUE, amountType);\r\n        return uint144(amount);\r\n    }\r\n\r\n    function checkFlag(PoolState memory _state, Flag flag) internal pure returns(bool) {\r\n        return _state.packed & uint96(1 << uint(flag)) != 0;\r\n    }\r\n\r\n    function setFlag(PoolState memory _state, Flag flag) internal pure {\r\n        _state.packed = _state.packed | uint96(1 << uint(flag));\r\n    }\r\n\r\n    function clearFlag(PoolState memory _state, Flag flag) internal pure {\r\n        _state.packed = _state.packed & ~uint96(1 << uint(flag));\r\n    }\r\n\r\n    function unpackGovernance(PoolState memory _state) internal pure returns(\r\n        uint instantSwapFee, uint desiredOrdersFee, uint protocolFee, uint maxPeriod, uint desiredMaxHistory\r\n    ) {\r\n        desiredMaxHistory = uint16(_state.packed >> 24);\r\n        maxPeriod = uint32(_state.packed >> 40);\r\n        protocolFee = uint8(_state.packed >> 72);\r\n        desiredOrdersFee = uint8(_state.packed >> 80);\r\n        instantSwapFee = uint8(_state.packed >> 88);\r\n    }\r\n\r\n    function setInvalidState(PoolState memory _state, Liquifi.ErrorArg reason) internal pure {\r\n        setFlag(_state, Liquifi.Flag.INVALID_STATE);\r\n        uint oldReason = uint8(_state.packed);\r\n        if (uint(reason) > oldReason) {\r\n            _state.packed = _state.packed & ~uint96(~uint8(0)) | uint96(reason);\r\n        }\r\n    }\r\n\r\n    function checkInvalidState(PoolState memory _state) internal pure returns (Liquifi.ErrorArg reason) {\r\n        reason = Liquifi.ErrorArg.A_NONE;\r\n        if (checkFlag(_state, Liquifi.Flag.INVALID_STATE)) {\r\n            return Liquifi.ErrorArg(uint8(_state.packed));\r\n        }\r\n    }\r\n\r\n    function isTokenAIn(uint orderFlags) internal pure returns (bool) {\r\n        return orderFlags & uint(Liquifi.OrderFlag.IS_TOKEN_A) != 0;\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    \r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        result = x > y ? x : y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 result) {\r\n        result = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint x) internal pure returns (uint result) {\r\n        uint y = x;\r\n        result = (x + 1) / 2;\r\n        while (result < y) {\r\n            y = result;\r\n            result = (x / result + result) / 2;\r\n        }\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        Liquifi._require(y == 0 || (z = x * y) / y == x, Liquifi.Error.A_MUL_OVERFLOW, Liquifi.ErrorArg.A_NONE);\r\n    }\r\n\r\n    function mulWithClip(uint x, uint y, uint maxValue) internal pure returns (uint z) {\r\n        if (y != 0 && ((z = x * y) / y != x || z > maxValue)) {\r\n            z = maxValue;\r\n        }\r\n    }\r\n\r\n    function subWithClip(uint x, uint y) internal pure returns (uint z) {\r\n        if ((z = x - y) > x) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        Liquifi._require((z = x + y) >= x, Liquifi.Error.B_ADD_OVERFLOW, Liquifi.ErrorArg.A_NONE);\r\n    }\r\n\r\n    function addWithClip(uint x, uint y, uint maxValue) internal pure returns (uint z) {\r\n        if ((z = x + y) < x || z > maxValue) {\r\n            z = maxValue;\r\n        }\r\n    }\r\n\r\n    // function div(uint x, uint y, Liquifi.ErrorArg scope) internal pure returns (uint z) {\r\n    //     Liquifi._require(y != 0, Liquifi.Error.R_DIV_BY_ZERO, scope);\r\n    //     z = x / y;\r\n    // }\r\n}\r\n\r\nabstract contract LiquifiToken is ERC20 {\r\n\r\n    function transfer(address to, uint256 value) public override returns (bool success) {\r\n        if (accountBalances[msg.sender] >= value && value > 0) {\r\n            accountBalances[msg.sender] -= value;\r\n            accountBalances[to] += value;\r\n            emit Transfer(msg.sender, to, value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public override returns (bool success) {\r\n        if (accountBalances[from] >= value && allowed[from][msg.sender] >= value && value > 0) {\r\n            accountBalances[to] += value;\r\n            accountBalances[from] -= value;\r\n            allowed[from][msg.sender] -= value;\r\n            emit Transfer(from, to, value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function balanceOf(address owner) public override view returns (uint256 balance) {\r\n        return accountBalances[owner];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external override returns (bool success) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external override view returns (uint256 remaining) {\r\n      return allowed[owner][spender];\r\n    }\r\n\r\n    mapping (address => uint256) internal accountBalances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\n//import { Debug } from \"./libraries/Debug.sol\";\r\ncontract LiquifiMinter is LiquifiToken, Minter {\r\n    using Math for uint256;\r\n\r\n    string public constant override name = \"Liquifi DAO Token\";\r\n    string public constant override symbol = \"LQF\";\r\n    uint8 public constant override decimals = 18;\r\n    uint public override totalSupply;\r\n    GovernanceRouter public override immutable governanceRouter;\r\n    ActivityMeter public immutable activityMeter;\r\n\r\n    uint128 public override constant initialPeriodTokens = 2500000 * (10 ** 18);\r\n    uint public override constant periodDecayK = 250; // pre-multiplied by 2**8\r\n\r\n    constructor(address _governanceRouter) public {\r\n        GovernanceRouter(_governanceRouter).setMinter(this);\r\n        governanceRouter = GovernanceRouter(_governanceRouter);\r\n        activityMeter = GovernanceRouter(_governanceRouter).activityMeter();\r\n    }\r\n\r\n    function periodTokens(uint period) public override pure returns (uint128) {\r\n        period -= 1; // decayK for 1st period = 1\r\n        uint decay = periodDecayK ** (period % 16); // process periods not covered by the loop\r\n        decay = decay << ((16 - period % 16) * 8); // ensure that result is pre-multiplied by 2**128\r\n        period = period / 16;\r\n        uint numerator = periodDecayK ** 16;\r\n        uint denominator = 1 << 128;\r\n        while(period * decay != 0) { // one loop multiplies result by 16 periods decay\r\n            decay = (decay * numerator) / denominator;\r\n            period--;\r\n        }\r\n\r\n        return uint128((decay * initialPeriodTokens) >> 128);\r\n    }\r\n\r\n    function mint(address to, uint period, uint128 userEthLocked, uint totalEthLocked) external override returns (uint amount) {\r\n        require(msg.sender == address(activityMeter), \"LIQUIFI: INVALID MINT SENDER\");\r\n        if (totalEthLocked == 0) {\r\n            return 0;\r\n        }\r\n        amount = (uint(periodTokens(period)) * userEthLocked) / totalEthLocked;\r\n        totalSupply = totalSupply.add(amount);\r\n        accountBalances[to] += amount;\r\n        emit Mint(to, amount, period, userEthLocked, totalEthLocked);\r\n    }\r\n\r\n    function userTokensToClaim(address user) external view override returns (uint amount) {\r\n        (uint ethLockedPeriod, uint userEthLocked, uint totalEthLocked) = activityMeter.userEthLocked(user);\r\n        if (ethLockedPeriod != 0 && totalEthLocked != 0) {\r\n            amount = (uint(periodTokens(ethLockedPeriod)) * userEthLocked) / totalEthLocked;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userEthLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEthLocked\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activityMeter\",\"outputs\":[{\"internalType\":\"contract ActivityMeter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceRouter\",\"outputs\":[{\"internalType\":\"contract GovernanceRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPeriodTokens\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"userEthLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"totalEthLocked\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodDecayK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"periodTokens\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userTokensToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LiquifiMinter", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000e28820a80f12d0917ba63cabf33e893e49a83e57", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fe4aa87f446fc9598c004f052e2aaf6d2c6e94e455f11f60e3a717a205b91c56"}