{"SourceCode": "// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity 0.8.6;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Internal function without access restriction.\r\n\t */\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tuint256 c = a + b;\r\n\t\t\tif (c < a) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b > a) return (false, 0);\r\n\t\t\treturn (true, a - b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t\t// benefit is lost if 'b' is also tested.\r\n\t\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\t\tif (a == 0) return (true, 0);\r\n\t\t\tuint256 c = a * b;\r\n\t\t\tif (c / a != b) return (false, 0);\r\n\t\t\treturn (true, c);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a / b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (b == 0) return (false, 0);\r\n\t\t\treturn (true, a % b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a + b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a * b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a % b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {trySub}.\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b <= a, errorMessage);\r\n\t\t\treturn a - b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a / b;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * reverting with custom message when dividing by zero.\r\n\t *\r\n\t * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n\t * message unnecessarily. For custom revert reasons use {tryMod}.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\trequire(b > 0, errorMessage);\r\n\t\t\treturn a % b;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies on extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n\t * revert reason using the provided one.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.4.2\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(\r\n\t\tIERC20 token,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(\r\n\t\tIERC20 token,\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Deprecated. This function has issues similar to the ones found in\r\n\t * {IERC20-approve}, and its usage is discouraged.\r\n\t *\r\n\t * Whenever possible, use {safeIncreaseAllowance} and\r\n\t * {safeDecreaseAllowance} instead.\r\n\t */\r\n\tfunction safeApprove(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\t// safeApprove should only be called when setting an initial allowance,\r\n\t\t// or when resetting it to zero. To increase and decrease it, use\r\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n\t\trequire(\r\n\t\t\t(value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender) + value;\r\n\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(\r\n\t\tIERC20 token,\r\n\t\taddress spender,\r\n\t\tuint256 value\r\n\t) internal {\r\n\t\tunchecked {\r\n\t\t\tuint256 oldAllowance = token.allowance(address(this), spender);\r\n\t\t\trequire(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n\t\t\tuint256 newAllowance = oldAllowance - value;\r\n\t\t\t_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n\t\t// the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n\t\tbytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n\t\tif (returndata.length > 0) {\r\n\t\t\t// Return data is optional\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\tuint256 amountA,\r\n\t\t\tuint256 amountB,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (\r\n\t\t\tuint256 amountToken,\r\n\t\t\tuint256 amountETH,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns (uint256 amountB);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountOut);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountIn);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n\tfunction getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n\tfunction allPairs(uint256) external view returns (address pair);\r\n\r\n\tfunction allPairsLength() external view returns (uint256);\r\n\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\ninterface IUniswapV2Pair {\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction name() external pure returns (string memory);\r\n\r\n\tfunction symbol() external pure returns (string memory);\r\n\r\n\tfunction decimals() external pure returns (uint8);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint256);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external returns (bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n\tfunction nonces(address owner) external view returns (uint256);\r\n\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 value,\r\n\t\tuint256 deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n\tevent Swap(\r\n\t\taddress indexed sender,\r\n\t\tuint256 amount0In,\r\n\t\tuint256 amount1In,\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n\tfunction factory() external view returns (address);\r\n\r\n\tfunction token0() external view returns (address);\r\n\r\n\tfunction token1() external view returns (address);\r\n\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint112 reserve0,\r\n\t\t\tuint112 reserve1,\r\n\t\t\tuint32 blockTimestampLast\r\n\t\t);\r\n\r\n\tfunction price0CumulativeLast() external view returns (uint256);\r\n\r\n\tfunction price1CumulativeLast() external view returns (uint256);\r\n\r\n\tfunction kLast() external view returns (uint256);\r\n\r\n\tfunction mint(address to) external returns (uint256 liquidity);\r\n\r\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n\tfunction swap(\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress to,\r\n\t\tbytes calldata data\r\n\t) external;\r\n\r\n\tfunction skim(address to) external;\r\n\r\n\tfunction sync() external;\r\n\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\n// File contracts/Energyfi.sol\r\n\r\ncontract Energyfi is Context, IERC20, Ownable {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\taddress private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\tuint8 public constant MAX_TAX_FEE = 10; // Transaction fee % that would be distributed to holders (0-10)\r\n\tuint8 public constant MAX_BURN_FEE = 10; // Transaction fee % that would be burned (0-10)\r\n\tuint8 public constant MAX_MARKETING_FEE = 10; // Transaction fee % that would be used to sell tokens and send the reward to a marketing or charity wallet (0-10)\r\n\r\n\tmapping(address => uint256) private _rOwned;\r\n\tmapping(address => uint256) private _tOwned;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tmapping(address => bool) private _isExcludedFromFee;\r\n\r\n\tmapping(address => bool) private _isExcluded;\r\n\taddress[] private _excluded;\r\n\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\tuint256 public _tTotal;\r\n\tuint256 private _rTotal;\r\n\tuint256 private _tFeeTotal;\r\n\r\n\tstring public _name;\r\n\tstring public _symbol;\r\n\tuint8 private immutable _decimals;\r\n\r\n\tuint8 public _taxFee = 0;\r\n\tuint8 private _previousTaxFee = _taxFee;\r\n\r\n\tuint8 public _burnFee = 0;\r\n\tuint8 private _previousBurnFee = _burnFee;\r\n\r\n\tuint8 public _marketingFee = 0;\r\n\tuint8 private _previousMarketingFee = _marketingFee;\r\n\r\n\tIUniswapV2Router02 public immutable pcsV2Router;\r\n\taddress public immutable wbnb;\r\n\taddress payable public marketingWallet;\r\n\r\n\tbool private inSwap;\r\n\tbool public swapEnabled = false;\r\n\tbool public feesEnabled = false;\r\n\r\n\tuint256 public minTokensForSwap;\r\n\tuint256 public maxTokensForSwap;\r\n\r\n\tevent SwapEnabledUpdated(bool enabled);\r\n\tevent FeesEnabledUpdated(bool enabled);\r\n\r\n\tmodifier lockTheSwap() {\r\n\t\tinSwap = true;\r\n\t\t_;\r\n\t\tinSwap = false;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tstring memory tokenName,\r\n\t\tstring memory tokenSymbol,\r\n\t\taddress _router\r\n\t) {\r\n\t\taddress tokenOwner = _msgSender();\r\n\t\tuint8 decimal = 18;\r\n\t\tuint256 amountOfTokenWei = 150 * 10**6 * 10**18;\r\n\t\t_name = tokenName;\r\n\t\t_symbol = tokenSymbol;\r\n\t\t_decimals = decimal;\r\n\t\t_tTotal = amountOfTokenWei;\r\n\t\t_rTotal = (MAX - (MAX % _tTotal));\r\n\r\n\t\t_rOwned[tokenOwner] = _rTotal;\r\n\r\n\t\tmarketingWallet = payable(address(0xC48fA79712B5fd485b6f11E7C8EC2ce2F67e469d));\r\n\r\n\t\tminTokensForSwap = 100 * 10**18;\r\n\t\tmaxTokensForSwap = MAX;\r\n\r\n\t\tIUniswapV2Router02 _pcsV2Router = IUniswapV2Router02(_router);\r\n\r\n\t\t// set the rest of the contract variables\r\n\t\tpcsV2Router = _pcsV2Router;\r\n\r\n\t\twbnb = _pcsV2Router.WETH();\r\n\r\n\t\t_isExcludedFromFee[tokenOwner] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\r\n\t\temit Transfer(address(0), tokenOwner, _tTotal);\r\n\t}\r\n\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\tif (_isExcluded[account]) return _tOwned[account];\r\n\t\treturn tokenFromReflection(_rOwned[account]);\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(\r\n\t\t\tsender,\r\n\t\t\t_msgSender(),\r\n\t\t\t_allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(\r\n\t\t\t_msgSender(),\r\n\t\t\tspender,\r\n\t\t\t_allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction isExcludedFromReward(address account) public view returns (bool) {\r\n\t\treturn _isExcluded[account];\r\n\t}\r\n\r\n\tfunction totalFees() public view returns (uint256) {\r\n\t\treturn _tFeeTotal;\r\n\t}\r\n\r\n\tfunction deliver(uint256 tAmount) public {\r\n\t\taddress sender = _msgSender();\r\n\t\trequire(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n\t\t(uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rTotal = _rTotal.sub(rAmount);\r\n\t\t_tFeeTotal = _tFeeTotal.add(tAmount);\r\n\t}\r\n\r\n\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\r\n\t\trequire(tAmount <= _tTotal, \"Amt must be less than supply\");\r\n\t\tif (!deductTransferFee) {\r\n\t\t\t(uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n\t\t\treturn rAmount;\r\n\t\t} else {\r\n\t\t\t(, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\r\n\t\t\treturn rTransferAmount;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n\t\trequire(rAmount <= _rTotal, \"Amt must be less than tot refl\");\r\n\t\tuint256 currentRate = _getRate();\r\n\t\treturn rAmount.div(currentRate);\r\n\t}\r\n\r\n\tfunction excludeFromReward(address account) external onlyOwner {\r\n\t\trequire(!_isExcluded[account], \"Account is already excluded from reward\");\r\n\t\tif (_rOwned[account] > 0) {\r\n\t\t\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\t\t}\r\n\t\t_isExcluded[account] = true;\r\n\t\t_excluded.push(account);\r\n\t}\r\n\r\n\tfunction includeInReward(address account) external onlyOwner {\r\n\t\trequire(_isExcluded[account], \"Already excluded\");\r\n\t\tfor (uint256 i = 0; i < _excluded.length; i++) {\r\n\t\t\tif (_excluded[i] == account) {\r\n\t\t\t\t_excluded[i] = _excluded[_excluded.length - 1];\r\n\t\t\t\t_tOwned[account] = 0;\r\n\t\t\t\t_isExcluded[account] = false;\r\n\t\t\t\t_excluded.pop();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction excludeFromFee(address account) external onlyOwner {\r\n\t\t_isExcludedFromFee[account] = true;\r\n\t}\r\n\r\n\tfunction includeInFee(address account) external onlyOwner {\r\n\t\t_isExcludedFromFee[account] = false;\r\n\t}\r\n\r\n\tfunction setAllFeePercent(\r\n\t\tuint8 taxFee,\r\n\t\tuint8 burnFee,\r\n\t\tuint8 marketingFee\r\n\t) external onlyOwner {\r\n\t\trequire(taxFee >= 0 && taxFee <= MAX_TAX_FEE, \"TF err\");\r\n\t\trequire(burnFee >= 0 && burnFee <= MAX_BURN_FEE, \"BF err\");\r\n\t\trequire(marketingFee >= 0 && marketingFee <= MAX_MARKETING_FEE, \"MF err\");\r\n\t\t_taxFee = taxFee;\r\n\t\t_burnFee = burnFee;\r\n\t\t_marketingFee = marketingFee;\r\n\t}\r\n\r\n\tfunction setSwapEnabled(bool _enabled) external onlyOwner {\r\n\t\tswapEnabled = _enabled;\r\n\t\temit SwapEnabledUpdated(_enabled);\r\n\t}\r\n\r\n\tfunction setFeesEnabled(bool _enabled) external onlyOwner {\r\n\t\tfeesEnabled = _enabled;\r\n\t\temit FeesEnabledUpdated(_enabled);\r\n\t}\r\n\r\n\tfunction setMinTokensForSwap(uint256 _minTokensForSwap) external onlyOwner {\r\n\t\trequire(_minTokensForSwap <= maxTokensForSwap, \"Greater than maxTokensForSwap\");\r\n\t\tminTokensForSwap = _minTokensForSwap;\r\n\t}\r\n\r\n\tfunction setMaxTokensForSwap(uint256 _maxTokensForSwap) external onlyOwner {\r\n\t\trequire(_maxTokensForSwap >= minTokensForSwap, \"Less than minTokensForSwap\");\r\n\t\tmaxTokensForSwap = _maxTokensForSwap;\r\n\t}\r\n\r\n\tfunction setMarketingWallet(address payable newMarketingWallet) external onlyOwner {\r\n\t\trequire(newMarketingWallet != address(0), \"ZERO ADDRESS\");\r\n\t\tmarketingWallet = newMarketingWallet;\r\n\t}\r\n\r\n\t//to recieve ETH from pcsV2Router when swaping\r\n\treceive() external payable {}\r\n\r\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\t\t_rTotal = _rTotal.sub(rFee);\r\n\t\t_tFeeTotal = _tFeeTotal.add(tFee);\r\n\t}\r\n\r\n\tfunction _getValues(uint256 tAmount)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\t(uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n\t\treturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n\t}\r\n\r\n\tfunction _getTValues(uint256 tAmount)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\tuint256 tFee = calculateTaxFee(tAmount);\r\n\t\tuint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n\t\tuint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n\t\treturn (tTransferAmount, tFee, tLiquidity);\r\n\t}\r\n\r\n\tfunction _getRValues(\r\n\t\tuint256 tAmount,\r\n\t\tuint256 tFee,\r\n\t\tuint256 tLiquidity,\r\n\t\tuint256 currentRate\r\n\t)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\tuint256 rAmount = tAmount.mul(currentRate);\r\n\t\tuint256 rFee = tFee.mul(currentRate);\r\n\t\tuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\t\tuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n\t\treturn (rAmount, rTransferAmount, rFee);\r\n\t}\r\n\r\n\tfunction _getRate() private view returns (uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply.div(tSupply);\r\n\t}\r\n\r\n\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\n\t\tuint256 rSupply = _rTotal;\r\n\t\tuint256 tSupply = _tTotal;\r\n\t\tfor (uint256 i = 0; i < _excluded.length; i++) {\r\n\t\t\tif (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n\t\t\trSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n\t\t\ttSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n\t\t}\r\n\t\tif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n\r\n\tfunction _takeLiquidity(uint256 tLiquidity) private {\r\n\t\tuint256 currentRate = _getRate();\r\n\t\tuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\t\t_rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n\t\tif (_isExcluded[address(this)]) _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n\t}\r\n\r\n\tfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n\t\treturn _amount.mul(_taxFee).div(10**2);\r\n\t}\r\n\r\n\tfunction calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n\t\treturn _amount.mul(_burnFee + _marketingFee).div(10**2);\r\n\t}\r\n\r\n\tfunction removeAllFee() private {\r\n\t\tif (_taxFee == 0 && _burnFee == 0 && _marketingFee == 0) return;\r\n\r\n\t\t_previousTaxFee = _taxFee;\r\n\t\t_previousBurnFee = _burnFee;\r\n\t\t_previousMarketingFee = _marketingFee;\r\n\r\n\t\t_taxFee = 0;\r\n\t\t_burnFee = 0;\r\n\t\t_marketingFee = 0;\r\n\t}\r\n\r\n\tfunction restoreAllFee() private {\r\n\t\t_taxFee = _previousTaxFee;\r\n\t\t_burnFee = _previousBurnFee;\r\n\t\t_marketingFee = _previousMarketingFee;\r\n\t}\r\n\r\n\tfunction isExcludedFromFee(address account) public view returns (bool) {\r\n\t\treturn _isExcludedFromFee[account];\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\trequire(from != address(0), \"ERC20: transfer from zero address\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to zero address\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\t\taddress pcsV2Pair = IUniswapV2Factory(pcsV2Router.factory()).getPair(address(this), wbnb);\r\n\t\tif (pcsV2Pair != address(0)) {\r\n\t\t\t// is the token balance of this contract address over the min number of\r\n\t\t\t// tokens that we need to initiate a swap?\r\n\t\t\t// also, don't get caught in a circular swap event.\r\n\t\t\t// also, don't swap if sender is uniswap pair.\r\n\t\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n\t\t\tif (\r\n\t\t\t\t!inSwap &&\r\n\t\t\t\tto == pcsV2Pair &&\r\n\t\t\t\tswapEnabled &&\r\n\t\t\t\tcontractTokenBalance > 0 &&\r\n\t\t\t\tcontractTokenBalance >= minTokensForSwap\r\n\t\t\t) {\r\n\t\t\t\tif (contractTokenBalance > maxTokensForSwap) {\r\n\t\t\t\t\tcontractTokenBalance = maxTokensForSwap;\r\n\t\t\t\t}\r\n\t\t\t\tswap(contractTokenBalance);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//indicates if fee should be deducted from transfer\r\n\t\tbool takeFee = !inSwap && feesEnabled;\r\n\r\n\t\t//if any account belongs to _isExcludedFromFee account then remove the fee\r\n\t\tif (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\r\n\t\t//transfer amount, it will take tax, burn and marketing fee\r\n\t\t_tokenTransfer(from, to, amount, takeFee);\r\n\t}\r\n\r\n\tfunction swap(uint256 contractTokenBalance) private lockTheSwap {\r\n\t\t//This needs to be distributed among burn and marketing\r\n\t\tuint8 totFee = _burnFee + _marketingFee;\r\n\t\tuint256 spentAmount = 0;\r\n\t\tbool executeFees = true;\r\n\t\tif (_burnFee != 0 && contractTokenBalance.div(totFee).mul(_burnFee) == 0) {\r\n\t\t\texecuteFees = false;\r\n\t\t} else if (_marketingFee != 0) {\r\n\t\t\t// This test is required because the transaction would fail in the router contract if the amount of tokens is too low for getting at least 1wei out of the swap.\r\n\t\t\tspentAmount = contractTokenBalance.div(totFee).mul(_marketingFee);\r\n\t\t\t(address token0, ) = address(this) < wbnb ? (address(this), wbnb) : (wbnb, address(this));\r\n\t\t\tIUniswapV2Pair pcsV2Pair = IUniswapV2Pair(\r\n\t\t\t\tIUniswapV2Factory(pcsV2Router.factory()).getPair(address(this), wbnb)\r\n\t\t\t);\r\n\t\t\t(uint256 reserve0, uint256 reserve1, ) = pcsV2Pair.getReserves();\r\n\t\t\t(uint256 reserveInput, uint256 reserveOutput) = address(this) == token0\r\n\t\t\t\t? (reserve0, reserve1)\r\n\t\t\t\t: (reserve1, reserve0);\r\n\t\t\tuint256 amountOut = pcsV2Router.getAmountOut(spentAmount, reserveInput, reserveOutput);\r\n\t\t\tif (amountOut == 0) {\r\n\t\t\t\texecuteFees = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (executeFees) {\r\n\t\t\tif (_burnFee != 0) {\r\n\t\t\t\tspentAmount = contractTokenBalance.div(totFee).mul(_burnFee);\r\n\t\t\t\t_tokenTransferNoFee(address(this), DEAD, spentAmount);\r\n\t\t\t}\r\n\r\n\t\t\tif (_marketingFee != 0) {\r\n\t\t\t\tspentAmount = contractTokenBalance.div(totFee).mul(_marketingFee);\r\n\t\t\t\tuint256 intialBalance = address(this).balance;\r\n\t\t\t\tswapTokensForBNB(spentAmount);\r\n\t\t\t\t(bool sent, ) = marketingWallet.call{value: address(this).balance.sub(intialBalance)}(\"\");\r\n\t\t\t\trequire(sent, \"Marketing transaction failed\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction swapTokensForBNB(uint256 tokenAmount) private {\r\n\t\t// generate the uniswap pair path of token -> wbnb\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = wbnb;\r\n\r\n\t\t_approve(address(this), address(pcsV2Router), tokenAmount);\r\n\r\n\t\t// make the swap\r\n\t\tpcsV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t//this method is responsible for taking all fee, if takeFee is true\r\n\tfunction _tokenTransfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount,\r\n\t\tbool takeFee\r\n\t) private {\r\n\t\tif (!takeFee) removeAllFee();\r\n\r\n\t\tif (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\t\t\t_transferFromExcluded(sender, recipient, amount);\r\n\t\t} else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n\t\t\t_transferToExcluded(sender, recipient, amount);\r\n\t\t} else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\t\t\t_transferStandard(sender, recipient, amount);\r\n\t\t} else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n\t\t\t_transferBothExcluded(sender, recipient, amount);\r\n\t\t} else {\r\n\t\t\t_transferStandard(sender, recipient, amount);\r\n\t\t}\r\n\r\n\t\tif (!takeFee) restoreAllFee();\r\n\t}\r\n\r\n\tfunction _transferStandard(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount\r\n\t) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 rFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 tFee,\r\n\t\t\tuint256 tLiquidity\r\n\t\t) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferToExcluded(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount\r\n\t) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 rFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 tFee,\r\n\t\t\tuint256 tLiquidity\r\n\t\t) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferFromExcluded(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount\r\n\t) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 rFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 tFee,\r\n\t\t\tuint256 tLiquidity\r\n\t\t) = _getValues(tAmount);\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferBothExcluded(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount\r\n\t) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 rFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 tFee,\r\n\t\t\tuint256 tLiquidity\r\n\t\t) = _getValues(tAmount);\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _tokenTransferNoFee(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\tuint256 currentRate = _getRate();\r\n\t\tuint256 rAmount = amount.mul(currentRate);\r\n\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n\r\n\t\tif (_isExcluded[sender]) {\r\n\t\t\t_tOwned[sender] = _tOwned[sender].sub(amount);\r\n\t\t}\r\n\t\tif (_isExcluded[recipient]) {\r\n\t\t\t_tOwned[recipient] = _tOwned[recipient].add(amount);\r\n\t\t}\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction recoverBEP20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\r\n\t\t// do not allow recovering self token\r\n\t\trequire(tokenAddress != address(this), \"Self withdraw\");\r\n\t\tIERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"FeesEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BURN_FEE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MARKETING_FEE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TAX_FEE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcsV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"taxFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burnFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketingFee\",\"type\":\"uint8\"}],\"name\":\"setAllFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setFeesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokensForSwap\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokensForSwap\",\"type\":\"uint256\"}],\"name\":\"setMinTokensForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnb\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Energyfi", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000000000000000000000000000000000000000000008454654205465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044546545400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2abe17de33c59975194ced3921cd7c17b3f624d5426884f361b98e3368e2b20d"}