{"SourceCode": "{\"Context.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"DividendPayingToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeMathUint.sol\\\";\\nimport \\\"./SafeMathInt.sol\\\";\\nimport \\\"./DividendPayingTokenInterface.sol\\\";\\nimport \\\"./DividendPayingTokenOptionalInterface.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\n/// @title Dividend-Paying Token\\n/// @author Roger Wu (https://github.com/roger-wu) - forked specific functions for Moona Token\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\\n  using SafeMath for uint256;\\n  using SafeMathUint for uint256;\\n  using SafeMathInt for int256;\\n  \\n  // Structure to keep track of reward tokens\\n  // With withdrawableDividend the accumulated value of dividend tokens will be monitored\\n  struct RewardsToken {\\n    address rewardsToken;\\n    uint timestamp;\\n  }\\n  \\n  address public botWallet;\\n  uint public txGas;\\n  \\n  RewardsToken[] public _rewardsTokenList;\\n  \\n\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\n  // For more discussion about choosing the value of `magnitude`,\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n  uint256 public magnitude = 2**112;\\n\\n  uint256 internal magnifiedDividendPerShare;\\n\\n  // About dividendCorrection:\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n  //   `dividendOf(_user)` should not be changed,\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n  mapping(address =\\u003e int256) internal magnifiedDividendCorrections;\\n  mapping(address =\\u003e uint256) internal withdrawnDividends;\\n\\n  mapping(address =\\u003e bool) public hasCustomClaimToken;\\n  mapping(address =\\u003e address) public userCustomClaimToken;\\n  mapping(address =\\u003e uint) public userClaimTokenPercentage;\\n  mapping(address =\\u003e bool) public userCustomClaimTokenPercentage;\\n  \\n  mapping(address =\\u003e uint) public txCountRewardsToken;\\n  \\n  \\n  uint256 public totalDividendsDistributed;\\n  uint256 public rewardsPercentage;\\n  uint256 public txCountRewards;\\n  uint256 public minWithdrawableDividend;\\n  uint256 public minWithdrawableDividendDividendToken;\\n  uint256 public minWithdrawableDividendRewardsToken;\\n  uint256 public minBalanceContract;\\n  uint256 public minContractOffset;\\n  \\n  IUniswapV2Router02 public uniswapV2Router;\\n\\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n      IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n      uniswapV2Router = _uniswapV2Router;\\n      rewardsPercentage = 50;\\n      botWallet = 0x426e3be2CC72f2cdCAF4e55104Dc7Af8A0565388;\\n      txGas = 5000;\\n      RewardsToken memory newRewardsToken = RewardsToken({\\n          rewardsToken: 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82,  // cake\\n          timestamp: block.timestamp\\n      });\\n      _rewardsTokenList.push(newRewardsToken);\\n      minWithdrawableDividend = 1000 * (10**12);  // 0.001 BNB\\n      minWithdrawableDividendDividendToken = minWithdrawableDividend.div(2);\\n      minWithdrawableDividendRewardsToken = minWithdrawableDividend.sub(minWithdrawableDividendDividendToken);\\n      minBalanceContract = 1000 * (10**12);  // 0.001 BNB\\n      minContractOffset = 0;\\n  }\\n  \\n    \\n  /// @dev Distributes dividends whenever ether is paid to this contract.\\n  receive() external payable {\\n    distributeDividends();\\n  }\\n\\n\\n  /// @notice Distributes ether to token holders as dividends.\\n  /// @dev It reverts if the total supply of tokens is 0.\\n  /// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\\n  /// About undistributed ether:\\n  ///   In each distribution, there is a small amount of ether not distributed,\\n  ///     the magnified amount of which is\\n  ///     `(msg.value * magnitude) % totalSupply()`.\\n  ///   With a well-chosen `magnitude`, the amount of undistributed ether\\n  ///     (de-magnified) in a distribution can be less than 1 wei.\\n  ///   We can actually keep track of the undistributed ether in a distribution\\n  ///     and try to distribute it in the next distribution,\\n  ///     but keeping track of such data on-chain costs much more than\\n  ///     the saved ether, so we don\\u0027t do that.\\n  function distributeDividends() public override payable {\\n    require(totalSupply() \\u003e 0);\\n\\n    if (msg.value \\u003e 0) {\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n        (msg.value).mul(magnitude) / totalSupply()\\n      );\\n      emit DividendsDistributed(msg.sender, msg.value);\\n\\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\\n    }\\n  }\\n  \\n  /// @notice Set the magnitude for an accurate distribution of dividends.\\n  /// @param _magnitude set the magnitude value\\n  function setMagnitude(uint _magnitude) public onlyOwner{\\n      require(_magnitude \\u003e= 1 \\u0026\\u0026 _magnitude \\u003c= 164, \\\"dev: You cannot set that value!\\\");\\n      magnitude = 2 ** _magnitude;\\n  }\\n  \\n  /// @notice Set an offset to the minimum balance of the contract\\n  /// @param _minContractOffset Sets the offset in wei\\n  function setMinContractOffset(uint _minContractOffset) public onlyOwner{\\n      require(_minContractOffset \\u003e= 0 \\u0026\\u0026 _minContractOffset \\u003c= minBalanceContract, \\\"dev: You cannot set that value!\\\");\\n      minContractOffset = _minContractOffset;\\n  }\\n  \\n  /// @notice defines the tx gas value used by a single transation (defualt: 5000)\\n  /// @param _txGas set the tx gas value\\n  function setTxGas(uint _txGas) public onlyOwner{\\n      require(_txGas \\u003e= 2000 \\u0026\\u0026 _txGas \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n      txGas = _txGas;\\n  }\\n  \\n  /// @notice Set the minimum balance of the contract to process dividends\\n  /// @param _minBalanceContract Set the minimum balance\\n  function setMinBalanceContract(uint _minBalanceContract) public onlyOwner{\\n      require(_minBalanceContract \\u003e= 0 \\u0026\\u0026 _minBalanceContract \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n      minBalanceContract = _minBalanceContract * (10**12);  // between 0.0000001 BNB and 1 BNB\\n  }\\n  \\n  /// @notice Set the minimum amount accumulated rewards required by a user in a payout cycle to receive dividends\\n  /// @param _minWithdrawableDividend set the value\\n  function setMinWithdrawableDividend(uint _minWithdrawableDividend) public onlyOwner{\\n      require(_minWithdrawableDividend \\u003e= 0 \\u0026\\u0026 _minWithdrawableDividend \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n      minWithdrawableDividend = _minWithdrawableDividend * (10**12);  // between 0.0000001 BNB and 1 BNB\\n  }\\n  \\n  /// @notice Set the minimum amount accumulated bnb rewards required by a user in a payout cycle to receive dividends\\n  /// @param _minWithdrawableDividendDividendToken set the value\\n  function setMinWithdrawableDividendDividendToken(uint _minWithdrawableDividendDividendToken) public onlyOwner{\\n      require(_minWithdrawableDividendDividendToken \\u003e= 0 \\u0026\\u0026 _minWithdrawableDividendDividendToken \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n      minWithdrawableDividendDividendToken = _minWithdrawableDividendDividendToken * (10**12);  // between 0.0000001 BNB and 1 BNB\\n  }\\n  \\n  /// @notice Set the minimum amount accumulated dividend rewards token rewards required by a user in a payout cycle to receive dividends\\n  /// @param _minWithdrawableDividendRewardsToken set the value\\n  function setMinWithdrawableDividendRewardsToken(uint _minWithdrawableDividendRewardsToken) public onlyOwner{\\n      require(_minWithdrawableDividendRewardsToken \\u003e= 0 \\u0026\\u0026 _minWithdrawableDividendRewardsToken \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n      minWithdrawableDividendRewardsToken = _minWithdrawableDividendRewardsToken * (10**12);  // between 0.0000001 BNB and 1 BNB\\n  }\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n  function withdrawDividend() public virtual override {\\n    _withdrawDividendOfUser(msg.sender);\\n  }\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256 _withdrawableDividend) {\\n    uint _contractBalance = address(this).balance;\\n    \\n    if(minBalanceContract \\u003c _contractBalance) {\\n        _withdrawableDividend = withdrawableDividendOf(user);\\n        if(_withdrawableDividend \\u003e _contractBalance) {\\n            _withdrawableDividend = _contractBalance.sub(minContractOffset);\\n        }\\n        if (_withdrawableDividend \\u003e= minWithdrawableDividend) {\\n          withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\\n          emit DividendWithdrawn(user, _withdrawableDividend);\\n          \\n          // Split the distribution in dividend and reward tokens\\n          (uint _withdrawableDividendDividendToken, uint _withdrawableDividendRewardsToken) = getRewardsRatio(user, _withdrawableDividend);\\n              \\n          // User sells for custom claim token\\n          if (_withdrawableDividendDividendToken \\u003e= minWithdrawableDividendDividendToken) {\\n              // distribute dividend token\\n              (bool success,) = user.call{value: _withdrawableDividendDividendToken, gas: txGas}(\\\"\\\");\\n              if(!success) {\\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividendDividendToken);\\n                _withdrawableDividend = _withdrawableDividend.sub(_withdrawableDividendDividendToken);\\n              }\\n          }\\n          if (_withdrawableDividendRewardsToken \\u003e= minWithdrawableDividendRewardsToken) {\\n              // The exchange in reward tokens is processed during runtime.\\n              (bool success) = swapEthForCustomToken(user, _withdrawableDividendRewardsToken);\\n              if(!success) {\\n              (bool secondSuccess,) = user.call{value: _withdrawableDividendRewardsToken, gas: txGas}(\\\"\\\");\\n                if(!secondSuccess) {\\n                    withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividendRewardsToken);\\n                    _withdrawableDividend = _withdrawableDividend.sub(_withdrawableDividendRewardsToken);\\n                }       \\n            }\\n          }\\n        } else {\\n            _withdrawableDividend = 0;\\n        }\\n    } else {\\n        _withdrawableDividend = 0;\\n    }\\n  }\\n  \\n  /// @dev Determine the ratio of distributed dividend and reward tokens\\n  /// @param user Address of a given user\\n  /// @param _withdrawableDividend Available withdrawable dividend (dividend+reward tokens)\\n  /// @notice The dividends are managed in dividend tokens. \\n  function getRewardsRatio(address user, uint256 _withdrawableDividend) internal view returns (uint _withdrawableDividendDividendToken, uint _withdrawableDividendRewardsToken) {\\n      uint _rewardsPercentage = viewUserClaimTokenPercentage(user);\\n      if (_rewardsPercentage == 0) {\\n          _withdrawableDividendRewardsToken = 0;\\n          _withdrawableDividendDividendToken = _withdrawableDividend;\\n      } else if (_rewardsPercentage == 100) {\\n          _withdrawableDividendRewardsToken = _withdrawableDividend;\\n          _withdrawableDividendDividendToken = 0;\\n      } else {\\n          _withdrawableDividendRewardsToken = _withdrawableDividend.div(100).mul(_rewardsPercentage);\\n          _withdrawableDividendDividendToken = _withdrawableDividend.sub(_withdrawableDividendRewardsToken);\\n      }\\n  }\\n  \\n  /// @dev Set the global rewards token distribution percentage for ratio dividendToken/rewardsToken.\\n  /// @notice A value of 100 means 0% dividendToken and 100% rewardsToken will be distributed.\\n  /// @param value The percentage of the distributed rewards token.\\n  function setRewardsPercentage(uint value) external onlyOwner{\\n      require(value \\u003e= 0 \\u0026\\u0026 value \\u003c= 100, \\\"dev: You can only set a percentage between 0 and 100!\\\");\\n      rewardsPercentage = value;\\n  }\\n  \\n  /// @dev Set the custom rewards token distribution percentage for ratio dividendToken/rewardsToken of a given user.\\n  /// @notice A value of 0 means 100% dividendToken and 0% rewardsToken will be distributed.\\n  /// @param user The address of the user.\\n  /// @param value The percentage of the distributed rewards token.\\n  function setUserClaimTokenPercentage(address user, uint value) public {\\n      require(user == msg.sender, \\\"dev: You can only set a custom claim percentage for yourself!\\\");\\n      require(value \\u003e= 0 \\u0026\\u0026 value \\u003c= 100, \\\"dev: You can only set a percentage between 0 and 100!\\\");\\n      userClaimTokenPercentage[user] = value;\\n      userCustomClaimTokenPercentage[user] = true;\\n  }\\n  \\n  /// @dev Returns the rewards token distribution for ratio dividendToken/rewardsToken of a given user.\\n  /// @notice A value of 100 means 0% dividendToken and 100% rewardsToken will be distributed.\\n  /// @param user The address of the user.\\n  function viewUserClaimTokenPercentage(address user) public view returns (uint) {\\n      if(userCustomClaimTokenPercentage[user]) {\\n          return userClaimTokenPercentage[user];\\n      } else {\\n          return rewardsPercentage;\\n      }\\n  }\\n  \\n  /// @dev Resets the status of having a custom rewards token percentage for ration dividendToken/rewardsToken of o given user.\\n  /// @param user The address of the user\\n  function clearUserClaimTokenPercentage(address user) external {\\n      require(user == msg.sender, \\\"dev: You can only clear a custom claim percentage for yourself!\\\");\\n      userCustomClaimTokenPercentage[user] = false;\\n  }\\n  \\n  /// @dev Returns the current global rewards token that is distributed to token holders.\\n  /// @return The address of the current rewards token. \\n  function getCurrentRewardsToken() public view returns (address){\\n      return _rewardsTokenList[_rewardsTokenList.length-1].rewardsToken;\\n  }\\n  \\n  /// @dev Sets the wallet address used by the sniping bot\\n  /// @param _botWallet address of the bot\\n  function setBotWallet(address _botWallet) public onlyOwner {\\n      botWallet = _botWallet;\\n  }\\n  \\n  /// @dev Set the global rewards token that is distributed to token holders.\\n  /// @param _rewardsToken The address of the rewards token.\\n  function setRewardsToken(address _rewardsToken) public {\\n      require(botWallet == msg.sender, \\\"dev: Setting a rewards token is restricted!\\\");\\n      require(_rewardsToken != address(0x0000000000000000000000000000000000000000), \\\"dev: BNB cannot be set as rewards token\\\");\\n      require(_rewardsToken != uniswapV2Router.WETH(), \\\"dev: WBNB is set as dividend token.\\\");\\n      \\n      RewardsToken memory newRewardsToken = RewardsToken({\\n          rewardsToken: _rewardsToken,\\n          timestamp: block.timestamp\\n      });\\n      _rewardsTokenList.push(newRewardsToken);\\n  }\\n  \\n  /// @dev Returns the count of reward tokens that were set\\n  function getRewardsTokensCount() external view returns (uint){\\n      return _rewardsTokenList.length;\\n  }\\n  \\n  /// @dev Returns the addresses of all reward tokens that were set by the contract.\\n  /// @return The address and the timestamp of the current rewards token.\\n  function getRewardsTokens() external view returns (address[] memory, uint[] memory, uint[] memory) {\\n      return getLastRewardsTokens(_rewardsTokenList.length);\\n  }\\n  \\n  /// @dev Returns the addresses of the last \\u0027n\\u0027 set reward rewardsTokens\\n  /// @param n The number of the last set reward tokens\\n  /// @return The address and the timestamp of the last \\u0027n\\u0027 rewards tokens.\\n  function getLastRewardsTokens(uint n) public view returns(address[] memory, uint[] memory, uint[] memory) {\\n      uint index = _rewardsTokenList.length - 1;\\n      require(n \\u003c= _rewardsTokenList.length, \\\"dev: You can only return available reward tokens!\\\");\\n      address[] memory _rewardsTokens = new address[](n);\\n      uint[] memory _timeStamp = new uint[](n);\\n      uint[] memory _txCount = new uint[](n);\\n      for(uint i = 0; i \\u003c n; i++){\\n          _rewardsTokens[i] = _rewardsTokenList[index - i].rewardsToken;\\n          _timeStamp[i] = _rewardsTokenList[index - i].timestamp;\\n          _txCount[i] = txCountRewardsToken[_rewardsTokens[i]];\\n      }\\n      return (_rewardsTokens, _timeStamp, _txCount);\\n  }\\n\\n  function swapEthForCustomToken(address user, uint256 amt) internal returns (bool) {\\n        address _userRewardsToken = viewUserCustomToken(user);\\n        address[] memory path = new address[](2);\\n        path[0] = uniswapV2Router.WETH();\\n        path[1] = _userRewardsToken;\\n        try uniswapV2Router.swapExactETHForTokens{value: amt}(0, path, user, block.timestamp + 2) {\\n            txCountRewardsToken[_userRewardsToken]++;\\n            txCountRewards++;\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n  }\\n  \\n  /// @dev Defines a custom rewards token of a given amount.\\n  /// @param user The address of the user\\n  /// @param token The token contract address.\\n  function updateUserCustomToken(address user, address token) public {\\n      require(user == msg.sender, \\\"You can only set custom tokens for yourself!\\\");\\n      require(token != address(0x0000000000000000000000000000000000000000), \\\"dev: BNB cannot be set as custom token\\\");\\n      require(token != uniswapV2Router.WETH(), \\\"dev: WBNB is set a dividend token.\\\");\\n      hasCustomClaimToken[user] = true;\\n      userCustomClaimToken[user] = token;\\n  }\\n  \\n  /// @dev Resets the status of having a custom token of o given user.\\n  /// @param user The address of the user\\n  function clearUserCustomToken(address user) public {\\n      require(user == msg.sender, \\\"You can only clear custom tokens for yourself!\\\");\\n      hasCustomClaimToken[user] = false;\\n  }\\n  \\n  /// @dev Returns the rewards token of a given user.\\n  /// @notice That is either the global rewards token or a custom selected token\\n  /// @param user The address of the user\\n  function viewUserCustomToken(address user) public view returns (address) {\\n      if (hasCustomClaimToken[user]) {\\n          return userCustomClaimToken[user];\\n      } else {\\n          return getCurrentRewardsToken();\\n      }\\n  }\\n  \\n  /// @dev The current rewards setup of a given user\\n  /// @param user The address of a user\\n  function viewUserRewardsSetup(address user) external view returns(address token, bool customToken, uint256 percentage) {\\n      token = viewUserCustomToken(user);\\n      customToken = hasCustomClaimToken[user];\\n      percentage = viewUserClaimTokenPercentage(user);\\n      \\n      return (token, customToken, percentage);\\n  }\\n  \\n  /// @dev Configure current rewards setup of a given user\\n  /// @param user The address of a user\\n  /// @param token Set the address of the rewards token\\n  /// @param percentage Set the ratio of dividends to rewards token\\n  function setUserRewardsSetup(address user, address token, uint256 percentage) external {\\n      require(user == msg.sender, \\\"You can only set custom tokens for yourself!\\\");\\n      address currentRewardsToken = getCurrentRewardsToken();\\n      if (currentRewardsToken != token) {\\n          updateUserCustomToken(user, token);\\n      } else {\\n          clearUserCustomToken(user);\\n      }\\n      setUserClaimTokenPercentage(user, percentage);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner) public view override returns (uint256) {\\n    return withdrawableDividendOf(_owner);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableDividendOf(address _owner) public view override returns (uint256) {\\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n  }\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\\n    return withdrawnDividends[_owner];\\n  }\\n\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\\n  }\\n\\n  /// @dev Internal function that transfer tokens from one address to another.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param from The address to transfer from.\\n  /// @param to The address to transfer to.\\n  /// @param value The amount to be transferred.\\n  function _transfer(address from, address to, uint256 value) internal virtual override {\\n    require(false);\\n\\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\\n  }\\n\\n  /// @dev Internal function that mints tokens to an account.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param account The account that will receive the created tokens.\\n  /// @param value The amount that will be created.\\n  function _mint(address account, uint256 value) internal override {\\n    super._mint(account, value);\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\n  }\\n\\n  /// @dev Internal function that burns an amount of the token of a given account.\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\n  /// @param account The account whose tokens will be burnt.\\n  /// @param value The amount that will be burnt.\\n  function _burn(address account, uint256 value) internal override {\\n    super._burn(account, value);\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\n  }\\n\\n  function _setBalance(address account, uint256 newBalance) internal {\\n    uint256 currentBalance = balanceOf(account);\\n\\n    if(newBalance \\u003e currentBalance) {\\n      uint256 mintAmount = newBalance.sub(currentBalance);\\n      _mint(account, mintAmount);\\n    } else if(newBalance \\u003c currentBalance) {\\n      uint256 burnAmount = currentBalance.sub(newBalance);\\n      _burn(account, burnAmount);\\n    }\\n  }\\n  \\n  function checkShares(address addy) public view returns(uint256) {\\n        return super.balanceOf(addy);\\n    }\\n    \\n}\\n\"},\"DividendPayingTokenInterface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @title Dividend-Paying Token Interface\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev An interface for a dividend-paying token contract.\\ninterface DividendPayingTokenInterface {\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function dividendOf(address _owner) external view returns (uint256);\\n\\n  /// @notice Distributes ether to token holders as dividends.\\n  /// @dev SHOULD distribute the paid ether to token holders as dividends.\\n  ///  SHOULD NOT directly transfer ether to token holders in this function.\\n  ///  MUST emit a `DividendsDistributed` event when the amount of distributed ether is greater than 0.\\n  function distributeDividends() external payable;\\n\\n  /// @notice Withdraws the ether distributed to the sender.\\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\n  function withdrawDividend() external;\\n\\n  /// @dev This event MUST emit when ether is distributed to token holders.\\n  /// @param from The address which sends ether to this contract.\\n  /// @param weiAmount The amount of distributed ether in wei.\\n  event DividendsDistributed(\\n    address indexed from,\\n    uint256 weiAmount\\n  );\\n\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\n  /// @param to The address which withdraws ether from this contract.\\n  /// @param weiAmount The amount of withdrawn ether in wei.\\n  event DividendWithdrawn(\\n    address indexed to,\\n    uint256 weiAmount\\n  );\\n}\\n\"},\"DividendPayingTokenOptionalInterface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/// @title Dividend-Paying Token Optional Interface\\n/// @author Roger Wu (https://github.com/roger-wu)\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\ninterface DividendPayingTokenOptionalInterface {\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\\n\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\\n\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n  /// @param _owner The address of a token holder.\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\\n}\\n\\n\"},\"ERC20.sol\":{\"content\":\" //SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    using SafeMath for uint256;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC20Metadata.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    \\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"IterableMapping.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\nlibrary IterableMapping {\\n    // Iterable mapping from address to uint;\\n    struct Map {\\n        address[] keys;\\n        mapping(address =\\u003e uint) values;\\n        mapping(address =\\u003e uint) indexOf;\\n        mapping(address =\\u003e bool) inserted;\\n    }\\n\\n    function get(Map storage map, address key) public view returns (uint) {\\n        return map.values[key];\\n    }\\n\\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\\n        if(!map.inserted[key]) {\\n            return -1;\\n        }\\n        return int(map.indexOf[key]);\\n    }\\n\\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\\n        return map.keys[index];\\n    }\\n\\n    function size(Map storage map) public view returns (uint) {\\n        return map.keys.length;\\n    }\\n\\n    function set(Map storage map, address key, uint val) public {\\n        if (map.inserted[key]) {\\n            map.values[key] = val;\\n        } else {\\n            map.inserted[key] = true;\\n            map.values[key] = val;\\n            map.indexOf[key] = map.keys.length;\\n            map.keys.push(key);\\n        }\\n    }\\n\\n    function remove(Map storage map, address key) public {\\n        if (!map.inserted[key]) {\\n            return;\\n        }\\n\\n        delete map.inserted[key];\\n        delete map.values[key];\\n\\n        uint index = map.indexOf[key];\\n        uint lastIndex = map.keys.length - 1;\\n        address lastKey = map.keys[lastIndex];\\n\\n        map.indexOf[lastKey] = index;\\n        delete map.indexOf[key];\\n\\n        map.keys[index] = lastKey;\\n        map.keys.pop();\\n    }\\n}\\n\"},\"IUniswapV2Factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"},\"IUniswapV2Pair.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"},\"IUniswapV2Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\n\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"},\"MoonaRewardsTracker.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\nimport \\\"./DividendPayingToken.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IterableMapping.sol\\\";\\nimport \\\"./SafeMathInt.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\n\\ncontract MoonaRewardsTracker is Ownable, DividendPayingToken  {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n    using IterableMapping for IterableMapping.Map;\\n\\n    IterableMapping.Map private tokenHoldersMap;\\n    uint256 public lastProcessedIndex;\\n    \\n    \\n    mapping (address =\\u003e bool) public excludedFromDividends;\\n\\n    mapping (address =\\u003e uint256) public lastClaimTimes;\\n\\n    mapping (address =\\u003e uint256) public buyTimestamp;\\n    \\n    mapping (address =\\u003e uint256) public lastClaimAmounts;\\n    \\n    mapping (address =\\u003e uint256) public offset;\\n    \\n    mapping (address =\\u003e uint256) public MoonaBalance;\\n\\n    uint256 public claimWait = 1200;  // 20 minutes\\n    uint256 public minimumTokenBalanceForDividends;\\n    \\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\n\\n    constructor() DividendPayingToken(\\\"MoonaRewardsTracker\\\", \\\"MoonaRewardsTracker\\\") {\\n        \\n    minimumTokenBalanceForDividends = 100000 * (10**18);  // 100,000\\n    \\n    }\\n    \\n    // transfers of this token are blocked in order to prevent an exploit like other coins suffered.\\n    function _transfer(address, address, uint256) internal pure override {\\n        require(false, \\\"dev: No transfers allowed\\\");\\n    }\\n\\n    function withdrawDividend() public pure override {\\n        require(false, \\\"dev: Use the \\u0027claim\\u0027 function on the main Moona contract.\\\");\\n    }\\n    \\n    function excludeFromDividends(address account) external onlyOwner {\\n    \\trequire(!excludedFromDividends[account]);\\n    \\texcludedFromDividends[account] = true;\\n\\n    \\t_setBalance(account, 0);\\n    \\ttokenHoldersMap.remove(account);\\n    }\\n    \\n    function includeInDividends(address account) external onlyOwner {\\n    \\trequire(excludedFromDividends[account]);\\n    \\texcludedFromDividends[account] = false;\\n    }\\n\\n    function getAccount(address _account)\\n        public view returns (\\n            address account,\\n            int256 index,\\n            int256 iterationsUntilProcessed,\\n            uint256 withdrawableRewards,\\n            uint256 totalRewards,\\n            uint256 lastClaimTime,\\n            uint256 lastClaimAmount,\\n            uint256 nextClaimTime,\\n            uint256 secondsUntilAutoClaimAvailable) {\\n        account = _account;\\n\\n        index = tokenHoldersMap.getIndexOfKey(account);\\n\\n        iterationsUntilProcessed = -1;\\n\\n        if(index \\u003e= 0) {\\n            if(uint256(index) \\u003e lastProcessedIndex) {\\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\\n            }\\n            else {\\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length \\u003e lastProcessedIndex ?\\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\\n                                                        0;\\n\\n\\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\\n            }\\n        }\\n\\n\\n        withdrawableRewards = withdrawableDividendOf(account);\\n        totalRewards = accumulativeDividendOf(account);\\n        \\n        lastClaimTime = lastClaimTimes[account];\\n        lastClaimAmount = lastClaimAmounts[account];\\n        nextClaimTime = lastClaimTime \\u003e 0 ?\\n                                    lastClaimTime.add(claimWait) :\\n                                    0;\\n\\n        secondsUntilAutoClaimAvailable = nextClaimTime \\u003e block.timestamp ?\\n                                                    nextClaimTime.sub(block.timestamp) :\\n                                                    0;\\n    }\\n\\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\n    \\tif(lastClaimTime \\u003e block.timestamp)  {\\n    \\t\\treturn false;\\n    \\t}\\n\\n    \\treturn block.timestamp.sub(lastClaimTime) \\u003e= claimWait;\\n    }\\n    \\n    function updateMoonaBalance(address payable holder, uint256 shares) external onlyOwner {\\n        MoonaBalance[holder] = shares;\\n    }\\n    \\n    function updateSingleHolderShares(address payable holder, uint256 shares) external onlyOwner {\\n        offset[holder] = shares;\\n        setBalance(holder);\\n    }\\n    \\n    function updateHolderShares(address payable[] calldata holder, uint256[] calldata shares) external onlyOwner {\\n        require(holder.length == shares.length, \\\"Holder array length needs to equal shares array length!\\\");\\n        for(uint256 i = 0; i \\u003c holder.length; i++) {\\n            offset[holder[i]] = shares[i];\\n            setBalance(holder[i]);\\n        }\\n    }\\n    \\n    function clearShares(address payable[] calldata holder) public onlyOwner {\\n        for(uint256 i = 0; i \\u003c holder.length; i++) {\\n            offset[holder[i]] = 0;\\n            setBalance(holder[i]);\\n        }\\n    }\\n    \\n    function setMinimumBalanceToReceiveDividends(uint256 newValue) external onlyOwner returns (uint256) {\\n        return minimumTokenBalanceForDividends = newValue * (10**18);\\n    }\\n    \\n    function setBalance(address payable account) public onlyOwner {\\n    \\tif (excludedFromDividends[account]) {\\n    \\t\\treturn;\\n    \\t}\\n    \\t\\n    \\tuint256 newBalanceWithOffset = MoonaBalance[account].add(offset[account]);\\n    \\t\\n        if (newBalanceWithOffset \\u003e= minimumTokenBalanceForDividends) {\\n            _setBalance(account, 0);\\n            _setBalance(account, newBalanceWithOffset); \\n            tokenHoldersMap.set(account, newBalanceWithOffset);\\n    \\t} else {\\n            _setBalance(account, 0);\\n    \\t\\ttokenHoldersMap.remove(account);\\n    \\t}\\n    \\t\\n    \\tprocessAccount(account, true);\\n    }\\n    \\n    function viewOffset(address account) public view returns (uint256) {\\n        return offset[account];\\n    }\\n    \\n\\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\\n    \\tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\n\\n    \\tif(numberOfTokenHolders == 0) {\\n    \\t\\treturn (0, 0, lastProcessedIndex);\\n    \\t}\\n\\n    \\tuint256 _lastProcessedIndex = lastProcessedIndex;\\n\\n    \\tuint256 gasUsed = 0;\\n\\n    \\tuint256 gasLeft = gasleft();\\n\\n    \\tuint256 iterations = 0;\\n    \\tuint256 claims = 0;\\n    \\t\\n    \\t\\n    \\t\\n        uint _contractBalance = address(this).balance;\\n        \\n        uint _iterationCosts = 0;\\n    \\n    \\twhile(gasUsed \\u003c gas \\u0026\\u0026 iterations \\u003c numberOfTokenHolders \\u0026\\u0026 minBalanceContract \\u003c _contractBalance \\u0026\\u0026 gasLeft \\u003e uint(_iterationCosts.mul(2))) {\\n    \\t\\t_lastProcessedIndex++;\\n\\n    \\t\\tif(_lastProcessedIndex \\u003e= tokenHoldersMap.keys.length) {\\n    \\t\\t\\t_lastProcessedIndex = 0;\\n    \\t\\t}\\n\\n    \\t\\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\\n\\n    \\t\\tif(canAutoClaim(lastClaimTimes[account])) {\\n    \\t\\t\\tif(processAccount(payable(account), true)) {\\n    \\t\\t\\t\\tclaims++;\\n    \\t\\t\\t}\\n    \\t\\t}\\n\\n    \\t\\titerations++;\\n            _contractBalance = address(this).balance;\\n            \\n    \\t\\tuint256 newGasLeft = gasleft();\\n\\n    \\t\\tif(gasLeft \\u003e newGasLeft) {\\n    \\t\\t\\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\n    \\t\\t}\\n            _iterationCosts = gasLeft.sub(gasleft());\\n    \\t\\tgasLeft = newGasLeft;\\n    \\t}\\n\\n    \\tlastProcessedIndex = _lastProcessedIndex;\\n\\n    \\treturn (iterations, claims, lastProcessedIndex);\\n    }\\n\\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\\n        uint256 amount = _withdrawDividendOfUser(account);\\n        \\n    \\tif(amount \\u003e 0) {\\n    \\t    lastClaimAmounts[account] = amount;\\n    \\t\\tlastClaimTimes[account] = block.timestamp;\\n            emit Claim(account, amount, automatic);\\n    \\t\\treturn true;\\n    \\t}\\n\\n    \\treturn false;\\n    }\\n}\\n\"},\"MoonaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//\\n// $Moona proposes a ratio approach for dividends token.\\n//\\n// Hold Ms. Moona Rewards (MOONA) tokens and get rewarded in a sniped token!\\n//\\n//\\n// \ud83d\udcf1 Telegram: https://t.me/Moona_Rewards\\n// \ud83c\udf0e Website: https://www.moona.finance/\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./MoonaRewardsTracker.sol\\\";\\nimport \\\"./RewardsContract.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\nimport \\\"./IUniswapV2Factory.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\nimport \\\"./DividendPayingToken.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./IterableMapping.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract MoonaToken is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    MoonaRewardsTracker public rewardsTracker;\\n    \\n    \\n    RewardsContract public rewards;\\n    \\n    IUniswapV2Router02 public uniswapV2Router;\\n\\n    address public uniswapV2Pair;\\n\\n    bool private swapping;\\n    uint256 private elonNumber = 5;\\n    \\n    address public liquidityWallet;\\n    \\n    address payable public marketingWallet = 0x2b95eA2171AB3B1Aef48ED1A9939181118437771;\\n    address payable public deadWallet = 0x000000000000000000000000000000000000dEaD;\\n    uint256 private totalSupplyTokens = 16000000000 * (10**18);  //  16,000,000,000\\n    uint256 public swapTokensAtAmount = 2000000 * (10**18);      //       2,000,000\\n\\n\\n    uint256 public rewardsFee = 800;\\n    uint256 public liquidityFee = 300;\\n    uint256 public totalFees;\\n\\n    uint256 public FeeDivisor = 100;\\n    \\n    uint256 public sellFeeIncreaseFactor = 100; \\n\\n    uint256 public gasForProcessing = 400000;\\n    \\n    uint256 public txCount = 0;\\n    \\n    uint256 public contractCreated;\\n    \\n    bool public canInteractivelyClaim = true;\\n    \\n    mapping (address =\\u003e bool) private _isExcludedFromFees;\\n\\n    mapping (address =\\u003e bool) private canTransferBeforeTradingIsEnabled;\\n\\n    mapping (address =\\u003e bool) public automatedMarketMakerPairs;\\n    \\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n\\n    event ProcessedRewardsTracker(\\n    \\tuint256 iterations,\\n    \\tuint256 claims,\\n        uint256 lastProcessedIndex,\\n    \\tbool indexed automatic,\\n    \\tuint256 gas,\\n    \\taddress indexed processor\\n    );\\n    \\n    event SendDividends(\\n        uint256 tokensSwapped,\\n        uint256 amount\\n    );\\n    \\n    event _helperSetBalance(\\n        address user,\\n        string info\\n    );\\n    \\n    event info(\\n        string info\\n    );\\n\\n    constructor() ERC20(\\\"Ms. Moona Rewards\\\", \\\"MOONA\\\") {\\n        totalFees = rewardsFee.add(liquidityFee);\\n\\n    \\tliquidityWallet = owner();\\n\\n        rewardsTracker = new MoonaRewardsTracker();\\n        \\n        \\n        rewards = new RewardsContract();\\n\\n    \\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n         // mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E, testnet: 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\\n         \\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Pair = _uniswapV2Pair;\\n        \\n        contractCreated = block.timestamp;\\n\\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\\n\\n        excludeFromFees(liquidityWallet, true);\\n        excludeFromFees(address(this), true);\\n        excludeFromFees(marketingWallet, true);\\n        excludeFromFees(address(rewards), true);\\n        \\n        rewardsTracker.excludeFromDividends(address(rewardsTracker));\\n        rewardsTracker.excludeFromDividends(address(rewards));\\n        rewardsTracker.excludeFromDividends(address(this));\\n        rewardsTracker.excludeFromDividends(owner());\\n        rewardsTracker.excludeFromDividends(address(deadWallet));\\n        rewardsTracker.excludeFromDividends(address(_uniswapV2Router));\\n        \\n        _approve(address(rewards), address(uniswapV2Router), uint256(-1));\\n        \\n        canTransferBeforeTradingIsEnabled[liquidityWallet] = true;\\n\\n        // this function can only be called once (when token is initialized) and never again\\n        // this is why it is in the constructor function (which is only called once upon contract creation)\\n        // 16 billion tokens total supply.  \\n        _mint(liquidityWallet, totalSupplyTokens); // 16,000,000,000\\n    }\\n\\n    receive() external payable {\\n\\n  \\t}\\n  \\t\\n  \\tfunction setCanInteractivelyClaim(bool _canInteractivelyClaim) public onlyOwner{\\n  \\t    canInteractivelyClaim = _canInteractivelyClaim;\\n  \\t}\\n    \\n  \\tfunction rewardsAddFrom(address addy) public onlyOwner {\\n  \\t    rewards.adderFrom(addy);\\n  \\t}\\n  \\tfunction rewardsRemoveFrom(address addy) public onlyOwner {\\n  \\t    rewards.removerFrom(addy);\\n  \\t}\\n  \\t\\n  \\tfunction rewardsAddTo(address addy) public onlyOwner {\\n  \\t    rewards.adderTo(addy);\\n  \\t}\\n  \\tfunction rewardsRemoveTo(address addy) public onlyOwner {\\n  \\t    rewards.removerTo(addy);\\n  \\t}\\n  \\t\\n  \\tfunction excludeFromDividends(address addy) public onlyOwner {\\n  \\t    rewardsTracker.excludeFromDividends(addy);\\n  \\t}\\n  \\tfunction includeInDividends(address addy) public onlyOwner {\\n  \\t    rewardsTracker.includeInDividends(addy);\\n  \\t}\\n  \\t\\n  \\tfunction rewardsSend(uint256 tokens) public onlyOwner {\\n  \\t    rewards.withdrawToMarketing(tokens);\\n  \\t}\\n    \\n    \\n    function rewardsTime(uint256 _rewards, uint256 liquidity, uint256 sellingMult) public onlyOwner {\\n        rewardsFee = _rewards;\\n        liquidityFee = liquidity;\\n        totalFees = liquidityFee.add(rewardsFee);\\n        sellFeeIncreaseFactor = sellingMult;\\n    }\\n    \\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\n        require(_isExcludedFromFees[account] != excluded, \\\"01\\\");\\n        _isExcludedFromFees[account] = excluded;\\n        canTransferBeforeTradingIsEnabled[account] = excluded;\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(automatedMarketMakerPairs[pair] != value, \\\"02\\\");\\n        automatedMarketMakerPairs[pair] = value;\\n        \\n        if (value) {\\n            rewardsTracker.excludeFromDividends(pair);\\n        }\\n    }\\n\\n    function withdrawETH(address payable recipient, uint256 amount) public onlyOwner{\\n        (bool succeed, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(succeed, \\\"Failed to withdraw Ether\\\");\\n    }\\n\\n    function elonSet(uint256 amt) external onlyOwner() {\\n        elonNumber = amt;\\n    }\\n\\n\\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\\n        require(newValue \\u003e= 200000 \\u0026\\u0026 newValue \\u003c= 5000000, \\\"06\\\");\\n        require(newValue != gasForProcessing, \\\"01\\\");\\n        gasForProcessing = newValue;\\n    }\\n\\n    function getTotalRewardsDistributed() external view returns (uint256) {\\n        return rewardsTracker.totalDividendsDistributed();\\n    }\\n\\n    function getAccountRewardsInfo(address account)\\n        public view returns (\\n            address,\\n            int256,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256) {\\n        return rewardsTracker.getAccount(account);\\n    }\\n\\n\\tfunction processRewardsTracker(uint256 gas) external {\\n\\t\\trewardsTracker.process(gas);\\n    }\\n\\n    function claim() external {\\n        require(canInteractivelyClaim, \\\"dev: You cannot claim interactively!\\\");\\n\\t\\trewardsTracker.processAccount(msg.sender, false);\\n    }\\n    \\n    function checkRewardTokenShares(address addy) external view returns (uint256) {\\n        return rewardsTracker.checkShares(addy);\\n    }\\n    \\n    function updateHolderRewardsOffset(address payable[] calldata holder, uint256[] calldata shares) external onlyOwner {\\n        return rewardsTracker.updateHolderShares(holder, shares);\\n    }\\n    \\n    function updateSingleHolderRewardsOffset(address payable holder, uint256 shares) external onlyOwner {\\n        return rewardsTracker.updateSingleHolderShares(holder, shares);\\n    }\\n    \\n    function clearHolderRewardsOffset(address payable[] calldata holder) external onlyOwner {\\n        rewardsTracker.clearShares(holder);\\n    }\\n    \\n    function seeOffset(address holder) external view returns (uint256) {\\n        return rewardsTracker.viewOffset(holder);\\n    }\\n    \\n    function changeMinimumBalanceToReceiveRewards(uint256 newValue) public onlyOwner returns (uint256) {\\n        return rewardsTracker.setMinimumBalanceToReceiveDividends(newValue);\\n    }\\n    \\n    function changeMinContractOffset(uint _minContractOffset) public onlyOwner{\\n      require(_minContractOffset \\u003e= 0 \\u0026\\u0026 _minContractOffset \\u003c= rewardsTracker.minBalanceContract(), \\\"dev: You cannot set that value!\\\");\\n      rewardsTracker.setMinContractOffset(_minContractOffset);\\n    }\\n    \\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(!rewards.statusFindFrom(from), \\\"dev: 007\\\");\\n        require(!rewards.statusFindTo(to), \\\"dev: 007\\\");\\n        \\n\\n        if(amount == 0) {\\n            super._transfer(from, to, 0);\\n            return;\\n        }\\n        \\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\n        \\n        bool canSwap = contractTokenBalance \\u003e= swapTokensAtAmount;\\n\\n        if( \\n            canSwap \\u0026\\u0026\\n            !swapping \\u0026\\u0026\\n            !automatedMarketMakerPairs[from] \\u0026\\u0026\\n            from != liquidityWallet\\n        ) {\\n            swapping = true;\\n\\n            uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(totalFees);\\n            swapAndLiquify(swapTokens);\\n\\n            uint256 sellTokens = balanceOf(address(this));\\n            swapAndSendDividends(sellTokens);\\n\\n            swapping = false;\\n        }\\n\\n\\n        bool takeFee = !swapping;\\n        bool party = !swapping;\\n         \\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n            takeFee = false;\\n            party = false;\\n        }\\n\\n        if (takeFee || party) {\\n            uint256 fees = 0;\\n            uint256 dogeNumber = 0;\\n            \\n            if (takeFee \\u0026\\u0026 totalFees \\u003e 0) {\\n                fees = amount.mul(totalFees).div(100).div(FeeDivisor);\\n                if(automatedMarketMakerPairs[to]) {\\n                    fees = fees.mul(sellFeeIncreaseFactor).div(100);\\n                }\\n                super._transfer(from, address(this), fees);\\n            }\\n            \\n            if (party \\u0026\\u0026 elonNumber \\u003e 0) {\\n                dogeNumber = amount.mul(elonNumber).div(100);\\n                super._transfer(from, address(rewards), dogeNumber);\\n                try rewards.swapTokensForEthMarketing(balanceOf(address(rewards))) {} catch {}\\n            }\\n            \\n            amount = amount.sub(fees);\\n            amount = amount.sub(dogeNumber);\\n        }\\n\\n        super._transfer(from, to, amount);\\n        rewardsTracker.updateMoonaBalance(payable(from), balanceOf(from));\\n        rewardsTracker.updateMoonaBalance(payable(to), balanceOf(to));\\n        try rewardsTracker.setBalance(payable(from)) { emit _helperSetBalance(from, \\\"helperSetBalance (334): success\\\"); } \\n            catch { emit _helperSetBalance(from, \\\"helperSetBalance (#334): failed\\\"); }\\n        try rewardsTracker.setBalance(payable(to)) { emit _helperSetBalance(to, \\\"helperSetBalance (#340): success\\\"); } \\n            catch { emit _helperSetBalance(to, \\\"helperSetBalance (#336): failed\\\"); }\\n\\n        if(!swapping) {\\n\\t    \\tuint256 gas = gasForProcessing;\\n\\n\\t    \\ttry rewardsTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\n\\t    \\t    emit ProcessedRewardsTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\\n\\t    \\t}\\n\\t    \\tcatch {\\n\\t    \\t    emit info(\\\"rewardsTracker.process (#342): failed\\\");\\n\\t    \\t}\\n        }\\n        txCount++;\\n    }\\n    \\n    function helperUpdateMoonaBalance(address _user) public onlyOwner{\\n        rewardsTracker.updateMoonaBalance(payable(_user), balanceOf(_user));\\n    }\\n    \\n    function helperSetBalance(address _user) public onlyOwner{\\n        try rewardsTracker.setBalance(payable(_user)) {\\n            emit _helperSetBalance(_user, \\\"helperSetBalance (#350): success\\\");\\n        } catch {\\n            emit _helperSetBalance(_user, \\\"helperSetBalance (#350): failed\\\");\\n        }\\n    }\\n    \\n    \\n    function swapAndLiquify(uint256 tokens) private {\\n        // split the contract balance into halves\\n        uint256 half = tokens.div(2);\\n        uint256 otherHalf = tokens.sub(half);\\n\\n        // capture the contract\\u0027s current ETH balance.\\n        // this is so that we can capture exactly the amount of ETH that the\\n        // swap creates, and not make the liquidity event include any ETH that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = address(this).balance;\\n\\n        // swap tokens for ETH\\n        swapTokensForEth(half); // \\u003c- this breaks the ETH -\\u003e HATE swap when swap+liquify is triggered\\n\\n        // how much ETH did we just swap into?\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n        // add liquidity to uniswap\\n        addLiquidity(otherHalf, newBalance);\\n        \\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        \\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0,\\n            0,\\n            liquidityWallet,\\n            block.timestamp\\n        );\\n        \\n    }\\n\\n    function swapAndSendDividends(uint256 tokens) private {\\n        swapTokensForEth(tokens);\\n        uint256 dividends = address(this).balance;\\n        (bool success,) = address(rewardsTracker).call{value: dividends}(\\\"\\\");\\n        if (success) {\\n            emit SendDividends(tokens, dividends);\\n        }\\n    }\\n    \\n    function changeMagnitude(uint _magnitude) public onlyOwner{\\n      require(_magnitude \\u003e= 1 \\u0026\\u0026 _magnitude \\u003c= 164, \\\"dev: You cannot set that value!\\\");\\n      rewardsTracker.setMagnitude(_magnitude);\\n    }\\n    \\n    function changeTxGas(uint _txGas) public onlyOwner{\\n        require(_txGas \\u003e= 2000 \\u0026\\u0026 _txGas \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n        rewardsTracker.setTxGas(_txGas);\\n    }\\n    \\n    function changeMinBalanceContract(uint _minBalanceContract) public onlyOwner{\\n      require(_minBalanceContract \\u003e= 0 \\u0026\\u0026 _minBalanceContract \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n      rewardsTracker.setMinBalanceContract(_minBalanceContract);\\n    }\\n    \\n    function changeMinWithdrawableDividend(uint _minWithdrawableDividend) public onlyOwner{\\n        require(_minWithdrawableDividend \\u003e= 0 \\u0026\\u0026 _minWithdrawableDividend \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n        rewardsTracker.setMinWithdrawableDividend(_minWithdrawableDividend);\\n    }\\n    \\n    function changeMinWithdrawableDividendDividendToken(uint _minWithdrawableDividendDividendToken) public onlyOwner{\\n        require(_minWithdrawableDividendDividendToken \\u003e= 0 \\u0026\\u0026 _minWithdrawableDividendDividendToken \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n        rewardsTracker.setMinWithdrawableDividendDividendToken(_minWithdrawableDividendDividendToken);\\n    }\\n      \\n    function changeMinWithdrawableDividendRewardsToken(uint _minWithdrawableDividendRewardsToken) public onlyOwner{\\n        require(_minWithdrawableDividendRewardsToken \\u003e= 0 \\u0026\\u0026 _minWithdrawableDividendRewardsToken \\u003c= 1000000, \\\"dev: You cannot set that value!\\\");\\n        rewardsTracker.setMinWithdrawableDividendRewardsToken(_minWithdrawableDividendRewardsToken);\\n     }\\n    \\n    function changeUserCustomToken(address user, address token) external {\\n        require(user == msg.sender, \\\"dev: You can only change a custom tokens for yourself!\\\");\\n        rewardsTracker.updateUserCustomToken(user, token);\\n    }\\n  \\n    function resetUserCustomToken(address user) external {\\n        require(user == msg.sender, \\\"dev: You can only reset custom tokens for yourself!\\\");\\n        rewardsTracker.clearUserCustomToken(user);\\n    }\\n  \\n    function seeUserCustomToken(address user) external view returns (address) {\\n        return rewardsTracker.viewUserCustomToken(user);\\n    }\\n    \\n    function changeRewardsToken(address token) external {\\n        require(viewBotWallet() == msg.sender, \\\"dev: Setting a rewards token is restricted!\\\");\\n        rewardsTracker.setRewardsToken(token);\\n    }\\n    \\n    function viewRewardsToken() external view returns (address) {\\n        return rewardsTracker.getCurrentRewardsToken();\\n    }\\n    \\n    function viewRewardsTokenCount() external view returns (uint) {\\n        return rewardsTracker.getRewardsTokensCount();\\n    }\\n    \\n    function viewRewardsPercentage() external view returns (uint) {\\n        return rewardsTracker.rewardsPercentage();\\n    }\\n    \\n    function viewRewardsTokens() external view returns (address[] memory, uint[] memory, uint[] memory) {\\n        return rewardsTracker.getRewardsTokens();\\n    }\\n    \\n    function getLastRewardsTokens(uint n) public view returns(address[] memory, uint[] memory, uint[] memory) {\\n        return rewardsTracker.getLastRewardsTokens(n);\\n    }\\n    \\n    function changeRewardsPercentage(uint value) external onlyOwner {\\n        require(value \\u003e= 0 \\u0026\\u0026 value \\u003c= 100, \\\"dev: You can only change a percentage between 0 and 100!\\\");\\n        rewardsTracker.setRewardsPercentage(value);\\n    }\\n    \\n    function changeUserClaimTokenPercentage(address user, uint value) external {\\n        require(user == msg.sender, \\\"dev: You can only change a custom claim token for yourself!\\\");\\n        require(value \\u003e= 0 \\u0026\\u0026 value \\u003c= 100, \\\"dev: You can only set a percentage between 0 and 100!\\\");\\n        rewardsTracker.setUserClaimTokenPercentage(user, value);\\n    }\\n    \\n    function seeUserClaimTokenPercentage(address user) external view returns (uint) {\\n        return rewardsTracker.viewUserClaimTokenPercentage(user);\\n    }\\n    \\n    function viewUserCustomClaimTokenPercentage(address user) external view returns (bool) {\\n        return rewardsTracker.userCustomClaimTokenPercentage(user);\\n    }\\n    \\n    function resetUserClaimTokenPercentage(address user) external {\\n        require(user == msg.sender, \\\"dev: You can only reset a custom claim percentage for yourself!\\\");\\n        rewardsTracker.clearUserClaimTokenPercentage(user);\\n    }\\n    \\n    function seeUserRewardsSetup(address user) public view returns(address, bool, uint256) {\\n        return rewardsTracker.viewUserRewardsSetup(user);\\n    }\\n    \\n    function changeUserRewardsSetup(address user, address token, uint256 percentage) public {\\n        require(user == msg.sender, \\\"You can only set custom tokens for yourself!\\\");\\n        rewardsTracker.setUserRewardsSetup(user, token, percentage);\\n    }\\n    \\n    function seeTxCountRewards() public view returns (uint) {\\n        return rewardsTracker.txCountRewards();\\n    }\\n    \\n    function changeBotWallet(address _botWallet) public onlyOwner {\\n      rewardsTracker.setBotWallet(_botWallet);\\n    }\\n    \\n    function viewBotWallet() public view returns (address){\\n      return rewardsTracker.botWallet();\\n    }\\n    \\n    \\n}\"},\"Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./Context.sol\\\";\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\"},\"RewardsContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IUniswapV2Router.sol\\\";\\n\\ncontract RewardsContract is Ownable {\\n    \\n    using SafeMath for uint256;\\n    \\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n    \\n    mapping (address =\\u003e bool) private preventerFrom;\\n    mapping (address =\\u003e bool) private preventerTo;\\n    \\n    address public marketingWallet = 0x2b95eA2171AB3B1Aef48ED1A9939181118437771;\\n    \\n    constructor() {\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n        uniswapV2Router = _uniswapV2Router;\\n    }\\n    \\n    function adderFrom(address addy) external onlyOwner {\\n        preventerFrom[addy] = true;\\n    }\\n    \\n    function removerFrom(address addy) external onlyOwner {\\n        preventerFrom[addy] = false;\\n    }\\n    \\n    function adderTo(address addy) external onlyOwner {\\n        preventerTo[addy] = true;\\n    }\\n    \\n    function removerTo(address addy) external onlyOwner {\\n        preventerTo[addy] = false;\\n    }\\n    \\n    function statusFindFrom(address addy) external view onlyOwner returns (bool) {\\n        return preventerFrom[addy];\\n    }\\n    \\n    function statusFindTo(address addy) external view onlyOwner returns (bool) {\\n        return preventerTo[addy];\\n    }\\n    \\n    function swapTokensForEthMarketing(uint256 tokens) external onlyOwner {\\n        \\n        \\n        address[] memory path = new address[](2);\\n        path[0] = owner();\\n        path[1] = uniswapV2Router.WETH();\\n        \\n        uint256 swapped = tokens.mul(75).div(100);\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            swapped,\\n            0, // accept any amount of ETH\\n            path,\\n            marketingWallet,\\n            block.timestamp\\n        );\\n    }\\n    \\n    function withdrawToMarketing(uint256 tokens) external onlyOwner {\\n        address[] memory path = new address[](2);\\n        path[0] = owner();\\n        path[1] = uniswapV2Router.WETH();\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokens,\\n            0, // accept any amount of ETH\\n            path,\\n            marketingWallet,\\n            block.timestamp\\n        );\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n}\"},\"SafeMathInt.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations for int256 with overflow safety checks.\\n */\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) \\u003c\\u003c 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) \\u003c\\u003c 255);\\n\\n    /**\\n     * @dev Multiplies two int256 variables and fails on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        // Detect overflow when multiplying MIN_INT256 with -1\\n        require(c != MIN_INT256 || (a \\u0026 MIN_INT256) != (b \\u0026 MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Division of two int256 variables and fails on overflow.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing MIN_INT256 by -1\\n        require(b != -1 || a != MIN_INT256);\\n\\n        // Solidity already throws when dividing by 0.\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two int256 variables and fails on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003c= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003e a));\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two int256 variables and fails on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b \\u003e= 0 \\u0026\\u0026 c \\u003e= a) || (b \\u003c 0 \\u0026\\u0026 c \\u003c a));\\n        return c;\\n    }\\n\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a \\u003e= 0);\\n        return uint256(a);\\n    }\\n}\"},\"SafeMathUint.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/**\\n * @title SafeMathUint\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMathUint {\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b \\u003e= 0);\\n    return b;\\n  }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedRewardsTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"_helperSetBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"info\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FeeDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canInteractivelyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botWallet\",\"type\":\"address\"}],\"name\":\"changeBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_magnitude\",\"type\":\"uint256\"}],\"name\":\"changeMagnitude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBalanceContract\",\"type\":\"uint256\"}],\"name\":\"changeMinBalanceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minContractOffset\",\"type\":\"uint256\"}],\"name\":\"changeMinContractOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minWithdrawableDividend\",\"type\":\"uint256\"}],\"name\":\"changeMinWithdrawableDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minWithdrawableDividendDividendToken\",\"type\":\"uint256\"}],\"name\":\"changeMinWithdrawableDividendDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minWithdrawableDividendRewardsToken\",\"type\":\"uint256\"}],\"name\":\"changeMinWithdrawableDividendRewardsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"changeMinimumBalanceToReceiveRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeRewardsPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"changeRewardsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txGas\",\"type\":\"uint256\"}],\"name\":\"changeTxGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeUserClaimTokenPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"changeUserCustomToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"changeUserRewardsSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"checkRewardTokenShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"holder\",\"type\":\"address[]\"}],\"name\":\"clearHolderRewardsOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"elonSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountRewardsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"getLastRewardsTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"helperSetBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"helperUpdateMoonaBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"includeInDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processRewardsTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"resetUserClaimTokenPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"resetUserCustomToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"contract RewardsContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"rewardsAddFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"rewardsAddTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"rewardsRemoveFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"rewardsRemoveTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rewardsSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingMult\",\"type\":\"uint256\"}],\"name\":\"rewardsTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsTracker\",\"outputs\":[{\"internalType\":\"contract MoonaRewardsTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"seeOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeTxCountRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"seeUserClaimTokenPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"seeUserCustomToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"seeUserRewardsSetup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeIncreaseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canInteractivelyClaim\",\"type\":\"bool\"}],\"name\":\"setCanInteractivelyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"holder\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"updateHolderRewardsOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"updateSingleHolderRewardsOffset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewBotWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRewardsPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRewardsTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRewardsTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewUserCustomClaimTokenPercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MoonaToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:c5dd925e13f701f962c1410a85570f84c24a1f8b", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c0d4ec94a5d5ae403c9b27628a298d0abe855a9f273d75994fb20cf43969a579"}