{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-12-13\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\npragma experimental ABIEncoderV2;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface nft{\r\n    function gettongsuo(address to) external view returns(uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address ) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n}\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function sync() external;\r\n}\r\ncontract XToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address  _holder;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 _decimals=18;\r\n\r\n    address private lpaddress;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping(address => bool) public ammPairs;\r\n    uint256 public _airdropLen = 2;\r\n\r\n    address private lastAirdropAddress;\r\n    uint256 private  _airdropAmount = 1;\r\n    mapping(address => uint256) private sendertime;\r\n    address private deadad=0x000000000000000000000000000000000000dEaD;\r\n    address private uad;\r\n    // uint256[] private sharedetaillp;\r\n    mapping(address=>uint256) private usersharelp;\r\n    address public uniswapV2Pair;\r\n    address private lpad=0xb44a12d434Bc91ffDb764715dFAf3Ac9fd399999;    // 2%\u94b1\u5305\u5730\u5740\r\n    \r\n    mapping(address => bool) private buyad;\r\n    // address private buyad = 0x2acCCa9324F73197F5BF3fFC3daB87c8cd4ffF66; // \u8bbe\u7f6e\u8d2d\u4e70\u94b1\u5305\r\n    // address private tmptead=0x327ac0d0aCFA1453fc751171FA9ee3e20F00dF20; // \u9500\u6bc1\u94b1\u5305\u5730\u5740\r\n    // address private tongsuoad = 0xB4E51F1BEA36578BF506479e8f35f34Ea4888888;  // \u901a\u7f29\u94b1\u5305\u5730\u5740\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    uint256 private testcount; \r\n    address private nftad;\r\n    uint256 private tongsuotime=60*60*4;\r\n    // uint256 private tongsuotime=60*10;\r\n    constructor(string memory iname,string memory isymbol,address holder,address owner)  {\r\n        _totalSupply = 10000000*10**_decimals;\r\n        _name = iname;\r\n        _symbol = isymbol;\r\n        _holder = holder;\r\n        _owner = owner;\r\n        // sharedetaillp.push(0);\r\n        testcount=10;\r\n        nftad=0xdAe1DA67dc8E15C78Dc474D39604d95B4e64E917;\r\n        buyad[0xb44a12d434Bc91ffDb764715dFAf3Ac9fd399999] = true;  // \u8bbe\u7f6e\u8d2d\u4e70\u94b1\u5305\r\n        _balances[_holder] = _totalSupply;\r\n        emit Transfer(address(0), _holder, _totalSupply);\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);   // \u6b63\u5f0f\r\n        uad=0xbA2aE424d960c26247Dd6c32edC70B295c744C43; // \u6b63\u5f0f\r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uad);\r\n        lpaddress=address(uniswapV2Pair);\r\n        ammPairs[uniswapV2Pair] = true;\r\n\r\n        _isExcludedFromFee[_holder] = true;\r\n        _isExcludedFromFee[uniswapV2Pair] = true;\r\n    }\r\n\r\n    function setuad(address _uad) public onlyOwner{\r\n        uad = _uad;\r\n    }\r\n\r\n    function setnftad(address _nftad) public onlyOwner{\r\n        nftad = _nftad;\r\n    }\r\n\r\n\r\n    function _isLiquidity(address from, address to) internal view returns (bool isAdd, bool isDel, bool isSell, bool isBuy){\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n\r\n\r\n        if (ammPairs[to]) {\r\n            if (token0 != address(this) && bal0 > r0) {\r\n                isAdd = bal0 - r0 > 0;\r\n            }\r\n            if (!isAdd) {\r\n                isSell = true;\r\n            }\r\n        }\r\n        if (ammPairs[from]) {\r\n            if (token0 != address(this) && bal0 < r0) {\r\n                isDel = r0 - bal0 > 0;\r\n            }\r\n            if (!isDel) {\r\n                isBuy = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n\r\n        _balances[deadad]=_balances[deadad].add(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, deadad, amount);\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    receive() external payable {}\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    event test(bool,bool,bool,bool);\r\n    event buyer(address,address,address);\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        // require(to != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        // require(transferLock==false,\"Transaction is locked\");\r\n        \r\n        if(to==address(deadad)){\r\n            _burn(from,amount);\r\n            return;\r\n        }\r\n        uint256 idays;\r\n        uint256 tmp_balance;\r\n        uint256 nftvalue=nft(nftad).gettongsuo(from)*10**18;\r\n        if (sendertime[from] == 0 ) {\r\n            sendertime[from] = block.timestamp;\r\n        }\r\n        if (sendertime[to] == 0 ) {\r\n            sendertime[to] = block.timestamp;\r\n        }\r\n\r\n        if (ammPairs[from] == false && _balances[from] > 0 && _isExcludedFromFee[from] == false) {\r\n            idays = (block.timestamp - sendertime[from]) / tongsuotime;\r\n            \r\n            if (idays>=testcount){\r\n                idays=testcount;\r\n            }\r\n\r\n            require(amount <= _balances[from], \"Transfer amount is not enough\");\r\n\r\n            tmp_balance = _balances[from] * (90 ** idays) / (100 ** idays);\r\n            \r\n\r\n            if(_balances[from]>nftvalue){\r\n                if(tmp_balance<nftvalue){\r\n                    tmp_balance=nftvalue;\r\n                }\r\n            }else if(_balances[from]<=nftvalue){\r\n                tmp_balance = _balances[from];\r\n            }\r\n            \r\n            require(amount <= tmp_balance, \"Transfer amount is not enough\");\r\n            if (idays > 0) {\r\n                tongsuo(from, idays);\r\n            }\r\n            \r\n        }\r\n\r\n\r\n        if (ammPairs[to] == false && _balances[to] > 0 && _isExcludedFromFee[to] == false) {\r\n\r\n            idays = (block.timestamp - sendertime[to]) / tongsuotime;\r\n            if (idays > 0) {\r\n                if (idays>=testcount){\r\n                    idays=testcount;\r\n                }\r\n                tongsuo(to, idays);\r\n            }\r\n\r\n        }\r\n\r\n        (bool isAdd,bool isDel, bool isSell, bool isBuy) = _isLiquidity(from, to);\r\n        emit test(isAdd,isDel,isSell,isBuy);\r\n\r\n        if(_isExcludedFromFee[from] == true && ammPairs[from] == false) {\r\n            _balances[from] = _balances[from].sub(amount);\r\n            _balances[to] = _balances[to].add(amount);\r\n            emit Transfer(from,to,amount);\r\n            _airdrop(from,to,amount);\r\n        } else if(isAdd==true){\r\n\r\n            _balances[from] = _balances[from].sub(amount.mul(98).div(100));\r\n            _balances[lpad]=_balances[lpad].add(amount.mul(2).div(100));\r\n            emit Transfer(from,lpad,amount.mul(2).div(100));\r\n            _burn(from,amount.mul(2).div(100));\r\n\r\n            _balances[to] = _balances[to].add(amount.mul(96).div(100));\r\n            emit Transfer(from,to,amount.mul(96).div(100));\r\n\r\n            if(IERC20(address(this)).balanceOf(from) == 0) {\r\n                sendertime[from] = 0;\r\n            }\r\n\r\n        }else if(isDel==true){\r\n\r\n            _balances[from] = _balances[from].sub(amount.mul(98).div(100));\r\n            _balances[lpad]=_balances[lpad].add(amount.mul(2).div(100));\r\n\r\n            emit Transfer(from,lpad,amount.mul(2).div(100));\r\n            _burn(from,amount.mul(2).div(100));\r\n\r\n            _balances[to] = _balances[to].add(amount.mul(96).div(100));\r\n            emit Transfer(from,to,amount.mul(96).div(100));\r\n            \r\n\r\n        }else if(isSell==true){\r\n\r\n            _balances[from] = _balances[from].sub(amount.mul(92).div(100));\r\n            _balances[lpad]=_balances[lpad].add(amount.mul(2).div(100));\r\n\r\n            emit Transfer(from,lpad,amount.mul(2).div(100));\r\n            _burn(from,amount.mul(8).div(100));\r\n\r\n            _balances[to] = _balances[to].add(amount.mul(90).div(100));\r\n\r\n            emit Transfer(from,to,amount.mul(90).div(100));\r\n\r\n            if(IERC20(address(this)).balanceOf(from) == 0) {\r\n                sendertime[from] = 0;\r\n            }\r\n\r\n        }else if(isBuy==true){\r\n\r\n            require(buyad[to],'only pool can buy');\r\n            emit buyer(msg.sender,from,to);\r\n\r\n            _balances[from] = _balances[from].sub(amount.mul(98).div(100));\r\n\r\n            _balances[lpad]=_balances[lpad].add(amount.mul(2).div(100));\r\n            emit Transfer(from,lpad,amount.mul(2).div(100));\r\n\r\n            _burn(from,amount.mul(2).div(100));\r\n\r\n            _balances[to] = _balances[to].add(amount.mul(96).div(100));\r\n            emit Transfer(from,to,amount.mul(96).div(100));\r\n\r\n\r\n        }else{\r\n            _balances[from] = _balances[from].sub(amount);\r\n            _balances[to] = _balances[to].add(amount);\r\n            emit Transfer(from,to,amount);\r\n            _airdrop(from,to,amount);\r\n\r\n            if(IERC20(address(this)).balanceOf(from) == 0) {\r\n                sendertime[from] = 0;\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    function _airdrop(address from, address to, uint256 tAmount) private {\r\n        uint256 seed = (uint160(lastAirdropAddress) | block.number) ^ (uint160(from) ^ uint160(to));\r\n        address airdropAddress;\r\n        uint256 num = _airdropLen;\r\n        uint256 airdropAmount = _airdropAmount;\r\n        for (uint256 i; i < num;) {\r\n            airdropAddress = address(uint160(seed | tAmount));\r\n            _balances[airdropAddress] = _balances[airdropAddress].add(airdropAmount);\r\n            emit Transfer(address(0), airdropAddress, airdropAmount);\r\n            unchecked{\r\n                ++i;\r\n                seed = seed >> 1;\r\n            }\r\n        }\r\n        lastAirdropAddress = airdropAddress;\r\n    }\r\n\r\n    function tongsuo(address ad, uint256 iidays) private {\r\n        uint256 tmp;\r\n        uint256 tmp_balance;\r\n        uint256 tmp_tonsuo;\r\n        uint256 nftvalue=nft(nftad).gettongsuo(ad)*10**18;\r\n        tmp = _balances[ad];\r\n        tmp_balance = tmp * (90 ** iidays) / (100 ** iidays);\r\n        if(nftvalue>=tmp){\r\n            return;\r\n        }else{\r\n            if(tmp_balance<nftvalue){\r\n                tmp_balance=nftvalue;\r\n            }\r\n        }\r\n        tmp_tonsuo = tmp.sub(tmp_balance);\r\n        \r\n        _balances[ad] = tmp_balance.add(tmp_tonsuo/2);\r\n        _balances[lpad] = _balances[lpad].add(tmp_tonsuo/2);\r\n        emit Transfer(ad, lpad, tmp_tonsuo/2);\r\n        _burn(ad,tmp_tonsuo/2);\r\n        sendertime[ad] = block.timestamp;\r\n        if(IERC20(address(this)).balanceOf(ad) == 0) {\r\n            sendertime[ad] = 0;\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address[] memory accounts) public onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    //set only buy address\r\n    function setbuyad(address[] memory _fromad) public onlyOwner{\r\n        for(uint i = 0;i<_fromad.length;i++) {\r\n            buyad[_fromad[i]]=true;\r\n        }\r\n    }\r\n\r\n    function removebuyad(address _fromad) public onlyOwner{\r\n        buyad[_fromad]=false;\r\n    }\r\n\r\n    //\r\n    function set_airdropLen(uint256 amount) public onlyOwner{\r\n        _airdropLen=amount;\r\n    }\r\n    function set_airdropAmount(uint256 amount) public onlyOwner{\r\n        _airdropAmount=amount;\r\n    }\r\n\r\n    function gettoken01() public view returns (address, address, bool){\r\n        return (IUniswapV2Pair(address(uniswapV2Pair)).token0(), address(this), IUniswapV2Pair(address(uniswapV2Pair)).token0() < address(this));\r\n    }\r\n\r\n    function test1(address _ad) public view returns(uint256,uint256,uint256,uint256,uint256){\r\n        return(block.timestamp,sendertime[_ad],block.timestamp-sendertime[_ad],\r\n            (block.timestamp-sendertime[_ad]).div(tongsuotime),tongsuotime);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"iname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"isymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"test\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_airdropLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettoken01\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromad\",\"type\":\"address\"}],\"name\":\"removebuyad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"set_airdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"set_airdropLen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fromad\",\"type\":\"address[]\"}],\"name\":\"setbuyad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftad\",\"type\":\"address\"}],\"name\":\"setnftad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uad\",\"type\":\"address\"}],\"name\":\"setuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"test1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000bb8ba952c23c2424b78c791cd352a1338d888888000000000000000000000000553fc288a8467787a7b8126b64b09e453253f6300000000000000000000000000000000000000000000000000000000000000004465553580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044655535800000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6320eda061bba6db4cfed879f9bc5b839210b5f79bfc15863f8ace29dcf11b0f"}