{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.1;\r\nlibrary Address {\r\n  \r\n    function isContract(address account) internal view returns (bool) {\r\n       \r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n   \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n  \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n   \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n   \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n   \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n   \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n   \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n   \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n   \r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n           \r\n            if (returndata.length > 0) {\r\n             \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.2;\r\nabstract contract Initializable {\r\n  \r\n    uint8 private _initialized;\r\n\r\n    bool private _initializing;\r\n\r\n   \r\n    event Initialized(uint8 version);\r\n\r\n  \r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n  \r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n   \r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract ReentrancyGuard {\r\n    \r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n      \r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        \r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n      \r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n   \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n  \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC20 {\r\n  \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n   \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n   \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract TokenStaking is Ownable, ReentrancyGuard, Initializable {\r\n   \r\n    struct User {\r\n        uint256 stakeAmount; // Stake Amount\r\n        uint256 rewardAmount; // Reward Amount\r\n        uint256 lastStakeTime; // Last Stake Timestamp\r\n        uint256 lastRewardCalculationTime; // Last Reward Calculation Timestamp\r\n        uint256 rewardsClaimedSoFar; // Sum of rewards claimed so far\r\n    }\r\n\r\n    uint256 _minimumStakingAmount; // minimum staking amount\r\n\r\n    uint256 _maxStakeTokenLimit; // maximum staking token limit for program\r\n\r\n    uint256 _stakeEndDate; // end date for program\r\n\r\n    uint256 _stakeStartDate; // start date for program\r\n\r\n    uint256 _totalStakedTokens; // Total no of tokens that are staked\r\n\r\n    uint256 _totalUsers; // Total no of users\r\n\r\n    uint256 _stakeDays; // staking days\r\n\r\n    uint256 _earlyUnstakeFeePercentage; // early unstake fee percentage\r\n\r\n    bool _isStakingPaused; // staking status\r\n\r\n    // Token contract address\r\n    address private _tokenAddress;\r\n\r\n    // APY\r\n    uint256 _apyRate;\r\n\r\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10000;\r\n    uint256 public constant APY_RATE_CHANGE_THRESHOLD = 10;\r\n\r\n    // User address => User\r\n    mapping(address => User) private _users;\r\n\r\n    event Stake(address indexed user, uint256 amount);\r\n    event UnStake(address indexed user, uint256 amount);\r\n    event EarlyUnStakeFee(address indexed user, uint256 amount);\r\n    event ClaimReward(address indexed user, uint256 amount);\r\n\r\n    modifier whenTreasuryHasBalance(uint256 amount) {\r\n        require(\r\n            IERC20(_tokenAddress).balanceOf(address(this)) >= amount,\r\n            \"TokenStaking: insufficient funds in the treasury\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address owner_,\r\n        address tokenAddress_,\r\n        uint256 apyRate_,\r\n        uint256 minimumStakingAmount_,\r\n        uint256 maxStakeTokenLimit_,\r\n        uint256 stakeStartDate_,\r\n        uint256 stakeEndDate_,\r\n        uint256 stakeDays_,\r\n        uint256 earlyUnstakeFeePercentage_\r\n    ) public virtual initializer {\r\n        __TokenStaking_init_unchained(\r\n            owner_,\r\n            tokenAddress_,\r\n            apyRate_,\r\n            minimumStakingAmount_,\r\n            maxStakeTokenLimit_,\r\n            stakeStartDate_,\r\n            stakeEndDate_,\r\n            stakeDays_,\r\n            earlyUnstakeFeePercentage_\r\n        );\r\n    }\r\n\r\n    function __TokenStaking_init_unchained(\r\n        address owner_,\r\n        address tokenAddress_,\r\n        uint256 apyRate_,\r\n        uint256 minimumStakingAmount_,\r\n        uint256 maxStakeTokenLimit_,\r\n        uint256 stakeStartDate_,\r\n        uint256 stakeEndDate_,\r\n        uint256 stakeDays_,\r\n        uint256 earlyUnstakeFeePercentage_\r\n    ) internal onlyInitializing {\r\n        require(_apyRate <= 10000, \"TokenStaking: apy rate should be less than 10000\");\r\n        require(stakeDays_ > 0, \"TokenStaking: stake days must be non-zero\");\r\n        require(tokenAddress_ != address(0), \"TokenStaking: token address cannot be 0 address\");\r\n        require(stakeStartDate_ < stakeEndDate_, \"TokenStaking: start date must be less than end date\");\r\n\r\n        _transferOwnership(owner_);\r\n        _tokenAddress = tokenAddress_;\r\n        _apyRate = apyRate_;\r\n        _minimumStakingAmount = minimumStakingAmount_;\r\n        _maxStakeTokenLimit = maxStakeTokenLimit_;\r\n        _stakeStartDate = stakeStartDate_;\r\n        _stakeEndDate = stakeEndDate_;\r\n        _stakeDays = stakeDays_ * 1 days;\r\n        _earlyUnstakeFeePercentage = earlyUnstakeFeePercentage_;\r\n    }\r\n\r\n   \r\n    function getMinimumStakingAmount() external view returns (uint256) {\r\n        return _minimumStakingAmount;\r\n    }\r\n\r\n    function getMaxStakingTokenLimit() external view returns (uint256) {\r\n        return _maxStakeTokenLimit;\r\n    }\r\n\r\n  \r\n    function getStakeStartDate() external view returns (uint256) {\r\n        return _stakeStartDate;\r\n    }\r\n\r\n   \r\n    function getStakeEndDate() external view returns (uint256) {\r\n        return _stakeEndDate;\r\n    }\r\n\r\n    \r\n    function getTotalStakedTokens() external view returns (uint256) {\r\n        return _totalStakedTokens;\r\n    }\r\n\r\n   \r\n    function getTotalUsers() external view returns (uint256) {\r\n        return _totalUsers;\r\n    }\r\n\r\n    \r\n    function getStakeDays() external view returns (uint256) {\r\n        return _stakeDays;\r\n    }\r\n\r\n  \r\n    function getEarlyUnstakeFeePercentage() external view returns (uint256) {\r\n        return _earlyUnstakeFeePercentage;\r\n    }\r\n\r\n   \r\n    function getStakingStatus() external view returns (bool) {\r\n        return _isStakingPaused;\r\n    }\r\n\r\n   \r\n    function getAPY() external view returns (uint256) {\r\n        return _apyRate;\r\n    }\r\n\r\n   \r\n    function getUserEstimatedRewards() external view returns (uint256) {\r\n        (uint256 amount, ) = _getUserEstimatedRewards(msg.sender);\r\n        return _users[msg.sender].rewardAmount + amount;\r\n    }\r\n\r\n  \r\n    function getWithdrawableAmount() external view returns (uint256) {\r\n        return IERC20(_tokenAddress).balanceOf(address(this)) - _totalStakedTokens;\r\n    }\r\n\r\n   \r\n    function getUser(address userAddress) external view returns (User memory) {\r\n        return _users[userAddress];\r\n    }\r\n\r\n   \r\n    function isStakeHolder(address _user) external view returns (bool) {\r\n        return _users[_user].stakeAmount != 0;\r\n    }\r\n\r\n    \r\n    function updateMinimumStakingAmount(uint256 newAmount) external onlyOwner {\r\n        _minimumStakingAmount = newAmount;\r\n    }\r\n\r\n   \r\n    function updateMaximumStakingAmount(uint256 newAmount) external onlyOwner {\r\n        _maxStakeTokenLimit = newAmount;\r\n    }\r\n\r\n   \r\n    function updateStakingEndDate(uint256 newDate) external onlyOwner {\r\n        _stakeEndDate = newDate;\r\n    }\r\n\r\n    function updateEarlyUnstakeFeePercentage(uint256 newPercentage) external onlyOwner {\r\n        _earlyUnstakeFeePercentage = newPercentage;\r\n    }\r\n\r\n    function stakeForUser(uint256 amount, address user) external onlyOwner nonReentrant {\r\n        _stakeTokens(amount, user);\r\n    }\r\n\r\n   \r\n    function toggleStakingStatus() external onlyOwner {\r\n        _isStakingPaused = !_isStakingPaused;\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyOwner nonReentrant {\r\n        require(this.getWithdrawableAmount() >= amount, \"TokenStaking: not enough withdrawable tokens\");\r\n        IERC20(_tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n\r\n    function stake(uint256 _amount) external nonReentrant {\r\n        _stakeTokens(_amount, msg.sender);\r\n    }\r\n\r\n    function _stakeTokens(uint256 _amount, address user_) private {\r\n        require(!_isStakingPaused, \"TokenStaking: staking is paused\");\r\n\r\n        uint256 currentTime = getCurrentTime();\r\n        require(currentTime > _stakeStartDate, \"TokenStaking: staking not started yet\");\r\n        require(currentTime < _stakeEndDate, \"TokenStaking: staking ended\");\r\n        require(_totalStakedTokens + _amount <= _maxStakeTokenLimit, \"TokenStaking: max staking token limit reached\");\r\n        require(_amount > 0, \"TokenStaking: stake amount must be non-zero\");\r\n        require(\r\n            _amount >= _minimumStakingAmount,\r\n            \"TokenStaking: stake amount must greater than minimum amount allowed\"\r\n        );\r\n\r\n        if (_users[user_].stakeAmount != 0) {\r\n            _calculateRewards(user_);\r\n        } else {\r\n            _users[user_].lastRewardCalculationTime = currentTime;\r\n            _totalUsers += 1;\r\n        }\r\n\r\n        _users[user_].stakeAmount += _amount;\r\n        _users[user_].lastStakeTime = currentTime;\r\n\r\n        _totalStakedTokens += _amount;\r\n\r\n        require(\r\n            IERC20(_tokenAddress).transferFrom(msg.sender, address(this), _amount),\r\n            \"TokenStaking: failed to transfer tokens\"\r\n        );\r\n        emit Stake(user_, _amount);\r\n    }\r\n\r\n    \r\n    function unstake(uint256 _amount) external nonReentrant whenTreasuryHasBalance(_amount) {\r\n        address user = msg.sender;\r\n\r\n        require(_amount != 0, \"TokenStaking: amount should be non-zero\");\r\n        require(this.isStakeHolder(user), \"TokenStaking: not a stakeholder\");\r\n        require(_users[user].stakeAmount >= _amount, \"TokenStaking: not enough stake to unstake\");\r\n\r\n        \r\n        _calculateRewards(user);\r\n\r\n        uint256 feeEarlyUnstake;\r\n\r\n        if (getCurrentTime() <= _users[user].lastStakeTime + _stakeDays) {\r\n            feeEarlyUnstake = ((_amount * _earlyUnstakeFeePercentage) / PERCENTAGE_DENOMINATOR);\r\n            emit EarlyUnStakeFee(user, feeEarlyUnstake);\r\n        }\r\n\r\n        uint256 amountToUnstake = _amount - feeEarlyUnstake;\r\n\r\n        _users[user].stakeAmount -= _amount;\r\n\r\n        _totalStakedTokens -= _amount;\r\n\r\n        if (_users[user].stakeAmount == 0) {\r\n           \r\n            _totalUsers -= 1;\r\n        }\r\n\r\n        require(IERC20(_tokenAddress).transfer(user, amountToUnstake), \"TokenStaking: failed to transfer\");\r\n        emit UnStake(user, _amount);\r\n    }\r\n\r\n   \r\n    function claimReward() external nonReentrant whenTreasuryHasBalance(_users[msg.sender].rewardAmount) {\r\n        _calculateRewards(msg.sender);\r\n        uint256 rewardAmount = _users[msg.sender].rewardAmount;\r\n\r\n        require(rewardAmount > 0, \"TokenStaking: no reward to claim\");\r\n\r\n        require(IERC20(_tokenAddress).transfer(msg.sender, rewardAmount), \"TokenStaking: failed to transfer\");\r\n\r\n        _users[msg.sender].rewardAmount = 0;\r\n        _users[msg.sender].rewardsClaimedSoFar += rewardAmount;\r\n\r\n        emit ClaimReward(msg.sender, rewardAmount);\r\n    }\r\n\r\n    \r\n    function _calculateRewards(address _user) private {\r\n        (uint256 userReward, uint256 currentTime) = _getUserEstimatedRewards(_user);\r\n\r\n        _users[_user].rewardAmount += userReward;\r\n        _users[_user].lastRewardCalculationTime = currentTime;\r\n    }\r\n\r\n   \r\n    function _getUserEstimatedRewards(address _user) private view returns (uint256, uint256) {\r\n        uint256 userReward;\r\n        uint256 userTimestamp = _users[_user].lastRewardCalculationTime;\r\n\r\n        uint256 currentTime = getCurrentTime();\r\n\r\n        if (currentTime > _users[_user].lastStakeTime + _stakeDays) {\r\n            currentTime = _users[_user].lastStakeTime + _stakeDays;\r\n        }\r\n\r\n        uint256 totalStakedTime = currentTime - userTimestamp;\r\n\r\n        userReward += ((totalStakedTime * _users[_user].stakeAmount * _apyRate) / 365 days) / PERCENTAGE_DENOMINATOR;\r\n\r\n        return (userReward, currentTime);\r\n    }\r\n\r\n   \r\n\r\n    function getCurrentTime() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\n\r\ncontract Theblockchaincoders {\r\n    string public name = \"@theblockchaincoders\";\r\n    string public symbol = \"TBC\";\r\n    string public standard = \"theblockchaincoders v.0.1\";\r\n    uint256 public totalSupply;\r\n    address public ownerOfContract;\r\n    uint256 public _userId;\r\n\r\n    uint256 constant initialSupply = 1000000 * (10**18);\r\n\r\n    address[] public holderToken;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n\r\n    mapping(address => TokenHolderInfo) public tokenHolderInfos;\r\n\r\n    struct TokenHolderInfo {\r\n        uint256 _tokenId;\r\n        address _from;\r\n        address _to;\r\n        uint256 _totalToken;\r\n        bool _tokenHolder;\r\n    }\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor() {\r\n        ownerOfContract = msg.sender;\r\n        balanceOf[msg.sender] = initialSupply;\r\n        totalSupply = initialSupply;\r\n    }\r\n\r\n    function inc() internal {\r\n        _userId++;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(balanceOf[msg.sender] >= _value);\r\n        inc();\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        TokenHolderInfo storage tokenHolderInfo = tokenHolderInfos[_to];\r\n\r\n        tokenHolderInfo._to = _to;\r\n        tokenHolderInfo._from = msg.sender;\r\n        tokenHolderInfo._totalToken = _value;\r\n        tokenHolderInfo._tokenHolder = true;\r\n        tokenHolderInfo._tokenId = _userId;\r\n\r\n        holderToken.push(_to);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        require(_value <= balanceOf[_from]);\r\n        require(_value <= allowance[_from][msg.sender]);\r\n\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getTokenHolderData(address _address)\r\n        public\r\n        view\r\n        returns (\r\n            uint256,\r\n            address,\r\n            address,\r\n            uint256,\r\n            bool\r\n        )\r\n    {\r\n        return (\r\n            tokenHolderInfos[_address]._tokenId,\r\n            tokenHolderInfos[_address]._to,\r\n            tokenHolderInfos[_address]._from,\r\n            tokenHolderInfos[_address]._totalToken,\r\n            tokenHolderInfos[_address]._tokenHolder\r\n        );\r\n    }\r\n\r\n    function getTokenHolder() public view returns (address[] memory) {\r\n        return holderToken;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarlyUnStakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY_RATE_CHANGE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarlyUnstakeFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxStakingTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardCalculationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimedSoFar\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenStaking.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserEstimatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"apyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumStakingAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeTokenLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDays_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyUnstakeFeePercentage_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isStakeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"updateEarlyUnstakeFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaximumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDate\",\"type\":\"uint256\"}],\"name\":\"updateStakingEndDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenStaking", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://698a89bb6b97ac424f1e4dee2db57e3b16a18668de3712f9e14b1c6f5a558731"}