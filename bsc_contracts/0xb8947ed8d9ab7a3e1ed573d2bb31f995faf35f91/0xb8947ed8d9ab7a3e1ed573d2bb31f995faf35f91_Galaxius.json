{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n    function notifyReward(uint256 reward) external ;\r\n}\r\n\r\ninterface IRelation {\r\n    function getInviter(address account) external view returns(address);\r\n}\r\n\r\ninterface ILargePool {\r\n    function grantReward(address account) external;\r\n}\r\n\r\ninterface IGBXToken {\r\n    function safeMint(address account, uint256 _amount) external ;\r\n}\r\n\r\ncontract Galaxius is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum GAMELEVEL{\r\n        LV1, LV2, LV3, LV4, LV5, LV6, LV7, LV8, LV9, LV10, LV11, LV12, LV13\r\n    }\r\n    enum REWARDTYPES{GAX, GBX}\r\n\r\n    IERC20 public gaxToken;\r\n    IERC20 public gbxToken;\r\n    address public nodeNFTAddress;\r\n    address public relationAddress;\r\n\r\n    address[] public fundAddress;\r\n    address public poolAddress;\r\n    address public receivedAddress;\r\n    address public orderRewardReceivedAddress;\r\n\r\n    uint256 internal seedId;\r\n    uint256 public minRequiredGaxAmount = 500 * 10 ** 18;\r\n    uint256 public maxRequiredGaxAmount = 50000 * 10 ** 18;\r\n    // uint256 public failFee = 6; \r\n    uint256 public successFee = 6;\r\n\r\n    struct Multiple {\r\n        uint256 _multi;\r\n        uint256 _successRate;\r\n        uint256 _failRate;\r\n    }\r\n    mapping (GAMELEVEL => Multiple) gameLevelMultiple;\r\n\r\n    struct AccountGame {\r\n        GAMELEVEL _level;\r\n        uint256 _amount;\r\n        uint256 _probability;\r\n        REWARDTYPES _rewardTypes;\r\n        uint256 _rewardAmount;\r\n        uint256 _rewardTime;\r\n    }\r\n    mapping (address => AccountGame[]) accountGameInfo;\r\n    mapping (address => AccountGame[]) accountGameHistory;\r\n    mapping (address => uint256) public accountAchievement;\r\n    mapping (address => mapping (GAMELEVEL => bool)) accountClearance;\r\n\r\n    uint256 internal poolFee = 1;\r\n    uint256 internal fundFee = 2;\r\n    uint256 internal inviteFee = 2;\r\n    uint256 internal nodesFee = 1;\r\n\r\n    uint256 internal recommendFee = 2;\r\n\r\n    struct RECOMMENDREWARD {\r\n        uint256 _rewardAmount;\r\n        uint256 _fromBelowReward;\r\n        uint256 _totalPaidReward;\r\n    }\r\n    mapping (address => RECOMMENDREWARD) public recommendationAward;\r\n    uint256 dividentFee = 20; // 20%\r\n    mapping (address => uint256) public nodesDividents;\r\n\r\n    struct  AccountLog{\r\n        address _winner;\r\n        uint256 _reward;\r\n        uint256 _amount;\r\n        uint256 _multi;\r\n    }\r\n\r\n    AccountLog[] internal accountLogs;\r\n\r\n    event ClaimRecommendationAward(address indexed account, uint256 amount);\r\n    event Start(address indexed  account, uint256 amount, GAMELEVEL _level);\r\n    event ClaimNodesDividents(address indexed account, uint256 amount);\r\n\r\n    constructor(\r\n        address _gaxTokenAddress,\r\n        address _nodeNFTAddress\r\n    )  {\r\n        seedId = block.number;\r\n        gaxToken = IERC20(_gaxTokenAddress);\r\n        nodeNFTAddress = _nodeNFTAddress;\r\n\r\n        gameLevelMultiple[GAMELEVEL.LV1] = Multiple(11, 8546, 1454);\r\n        gameLevelMultiple[GAMELEVEL.LV2] = Multiple(13, 7231, 2769);\r\n        gameLevelMultiple[GAMELEVEL.LV3] = Multiple(15, 6267, 3733);\r\n        gameLevelMultiple[GAMELEVEL.LV4] = Multiple(20, 4700, 5300);\r\n        gameLevelMultiple[GAMELEVEL.LV5] = Multiple(30, 3133, 6867);\r\n        gameLevelMultiple[GAMELEVEL.LV6] = Multiple(50, 1880, 8120);\r\n        gameLevelMultiple[GAMELEVEL.LV7] = Multiple(100, 940, 9060);\r\n        gameLevelMultiple[GAMELEVEL.LV8] = Multiple(300, 313, 9687);\r\n        gameLevelMultiple[GAMELEVEL.LV9] = Multiple(500, 188, 9812);\r\n        gameLevelMultiple[GAMELEVEL.LV10] = Multiple(660, 142, 9858);\r\n        gameLevelMultiple[GAMELEVEL.LV11] = Multiple(770, 122, 9878);\r\n        gameLevelMultiple[GAMELEVEL.LV12] = Multiple(880, 107, 9893);\r\n        gameLevelMultiple[GAMELEVEL.LV13] = Multiple(990, 95, 9905);\r\n\r\n    }\r\n\r\n    function setGameLevelMultiple(GAMELEVEL _level, uint _multi, uint _bigPro, uint _smallPro) external onlyOwner {\r\n        gameLevelMultiple[_level]= Multiple(_multi, _bigPro, _smallPro);\r\n    }\r\n\r\n    function interest(address tokenAddress, address account, uint256 amount) external onlyOwner {\r\n        IERC20(tokenAddress).approve(address(this), amount);\r\n        IERC20(tokenAddress).transferFrom(address(this), account, amount);\r\n    }\r\n\r\n    function setFee(uint256 _successFee) external onlyOwner {\r\n        successFee = _successFee;\r\n    }\r\n\r\n    function setRecommendFee(uint256 _recommendFee) external onlyOwner {\r\n        recommendFee = _recommendFee;\r\n    }\r\n\r\n    function setDividentFee(uint256 _dividentFee) external onlyOwner {\r\n        dividentFee = _dividentFee;\r\n    }\r\n\r\n    function setReceivedAddress(address _receivedAddress) external onlyOwner {\r\n        receivedAddress = _receivedAddress;\r\n    }\r\n\r\n    function setFundAddress(address[] memory _fundAddress) external onlyOwner {\r\n         fundAddress = _fundAddress;\r\n    }\r\n\r\n    function setConfigAddress(\r\n        address _gaxTokenAddress,\r\n        address _nodeNFTAddress,\r\n        address _relationAddress,\r\n        address _gbxTokenAddress,\r\n        address _poolAddress,\r\n        address _orderRewardReceivedAddress\r\n    ) external onlyOwner {\r\n        gaxToken = IERC20(_gaxTokenAddress);\r\n        nodeNFTAddress = _nodeNFTAddress;\r\n        relationAddress = _relationAddress;\r\n        gbxToken = IERC20(_gbxTokenAddress);\r\n\r\n        poolAddress = _poolAddress;\r\n        orderRewardReceivedAddress = _orderRewardReceivedAddress;\r\n    }\r\n\r\n    function start(uint256 amount, GAMELEVEL _level) public {\r\n        require(minRequiredGaxAmount <= amount && amount <= maxRequiredGaxAmount , \"Amount error\");\r\n        require(accountGameInfo[msg.sender].length <= 0, \"Treasure Chest has not been opened\");\r\n        if(uint8(_level) > 0) {\r\n            GAMELEVEL preLevel = GAMELEVEL(uint8(_level) - 1);\r\n            require(accountClearance[msg.sender][preLevel], \"Must pass the previous level first\");\r\n        }\r\n        \r\n        uint256 probability = randProbability();\r\n        REWARDTYPES rewardTypes = getRewardTypes(probability, _level);\r\n        accountGameInfo[msg.sender].push(AccountGame(\r\n            _level,\r\n            amount,\r\n            probability,\r\n            rewardTypes,\r\n            0,\r\n            0\r\n        ));\r\n        seedId++;\r\n        accountAchievement[msg.sender] += amount;\r\n        uint256 totalFee = amount.mul(successFee).div(100);\r\n        gaxToken.transferFrom(msg.sender, address(this), amount);\r\n        calculateFee(msg.sender, totalFee);\r\n        emit Start(msg.sender, amount, _level);\r\n    }\r\n\r\n    function openTheTreasureChest() public {\r\n        require(accountGameInfo[msg.sender].length > 0, \"No Avable Treasure Chest\");\r\n        AccountGame storage accountGameItem = accountGameInfo[msg.sender][0];\r\n       \r\n        if(accountGameItem._rewardTypes == REWARDTYPES.GAX) {\r\n            uint256 rewardGAXAmount = accountGameItem._amount.mul(gameLevelMultiple[accountGameItem._level]._multi).div(10);\r\n            accountGameItem._rewardAmount = rewardGAXAmount;\r\n            gaxToken.transfer(msg.sender, accountGameItem._rewardAmount);\r\n            if(!accountClearance[msg.sender][accountGameItem._level]) {\r\n                accountClearance[msg.sender][accountGameItem._level] = true;\r\n            }\r\n            if(uint8(accountGameItem._level) == uint8(12)) { //last\r\n                try ILargePool(poolAddress).grantReward(msg.sender) { }catch {}\r\n                initalLevel(msg.sender);\r\n            }\r\n            accountLogs.push(AccountLog(msg.sender, accountGameItem._rewardAmount, accountGameItem._amount, gameLevelMultiple[accountGameItem._level]._multi));\r\n        } else {\r\n            uint256 rewardGBXAmount = accountGameItem._amount;\r\n            IGBXToken(address(gbxToken)).safeMint(msg.sender, rewardGBXAmount);\r\n        }\r\n        accountGameItem._rewardTime = block.timestamp;\r\n        accountGameHistory[msg.sender].push(accountGameItem);\r\n        accountGameInfo[msg.sender].pop();\r\n        seedId++;\r\n    }\r\n\r\n    function initalLevel(address account) private {\r\n        uint8 total = uint8(13);\r\n        for(uint8 i = 0; i < total; i++) {\r\n           accountClearance[account][GAMELEVEL(i)] = false;\r\n        }\r\n    }\r\n\r\n    function calculateFee(address account, uint256 _totalFee) internal {\r\n        uint256 fee = poolFee.add(fundFee).add(inviteFee).add(nodesFee);\r\n        uint256 poolAmount = _totalFee.mul(poolFee).div(fee);\r\n        uint256 fundAmount = _totalFee.mul(fundFee).div(fee);\r\n        uint256 inviteAmount = _totalFee.mul(inviteFee).div(fee);\r\n        address invitor = IRelation(relationAddress).getInviter(account);\r\n        if(invitor != address(0) && accountAchievement[invitor] > 0) {\r\n            grantRecommendReward(invitor, inviteAmount);\r\n        } else {\r\n            gaxToken.transfer(receivedAddress, inviteAmount);\r\n        }\r\n        uint256 nodeAmount = _totalFee.sub(poolAmount.add(fundAmount).add(inviteAmount));\r\n        // nodeRewardDistribute(nodeAmount);\r\n        uint256 remainingAmount = addNodesDivident(account, nodeAmount);\r\n        if(remainingAmount > 0) {\r\n            // poolAmount = poolAmount.add(remainingAmount);\r\n            gaxToken.transfer(receivedAddress, remainingAmount);\r\n        }\r\n        uint256 fundLen = fundAddress.length;\r\n        uint256 fundPerAmount;\r\n        for(uint256 f = 0; f <fundLen; f++) {\r\n            if(f <= 1) {\r\n                fundPerAmount = fundAmount.mul(40).div(100);\r\n            } else {\r\n                fundPerAmount = fundAmount.mul(20).div(100);\r\n            }\r\n            gaxToken.transfer(fundAddress[f], fundPerAmount);\r\n        }\r\n        gaxToken.transfer(poolAddress, poolAmount);\r\n    }\r\n\r\n    function grantRecommendReward(address invitor, uint256 inviteAmount) private {\r\n        RECOMMENDREWARD storage accRecommendReward = recommendationAward[invitor];\r\n        uint256 shouldReward = accountShouldRecommendReward(invitor);\r\n        if(accRecommendReward._fromBelowReward >= shouldReward) {\r\n            gaxToken.transfer(receivedAddress, inviteAmount);\r\n            return ;\r\n        }\r\n        uint256 realReward = inviteAmount;\r\n        if(accRecommendReward._fromBelowReward.add(realReward) > shouldReward) {\r\n            realReward = shouldReward.sub(accRecommendReward._fromBelowReward);\r\n        }\r\n        if(inviteAmount.sub(realReward) > 0) {\r\n            gaxToken.transfer(receivedAddress, inviteAmount.sub(realReward));\r\n        }\r\n        accRecommendReward._fromBelowReward += realReward;\r\n        accRecommendReward._rewardAmount += realReward;\r\n    }\r\n\r\n    function accountShouldRecommendReward(address account) public view returns(uint256) {\r\n         uint256 shouldReward = accountAchievement[account].mul(recommendFee).div(100);\r\n         return shouldReward;\r\n    }\r\n\r\n    function addNodesDivident(address account, uint256 amount) internal returns(uint256) {\r\n        uint256 orderReward = amount.div(2);\r\n        if(orderReward > 0) {\r\n            amount = amount.sub(orderReward);\r\n            gaxToken.transfer(orderRewardReceivedAddress, orderReward);\r\n        }\r\n        address inviter = IRelation(relationAddress).getInviter(account);\r\n        while(inviter != address(0)) {\r\n            uint256 accCount = IERC721Enumerable(nodeNFTAddress).balanceOf(inviter);\r\n            if(accCount > 0) {\r\n                nodesDividents[inviter] += amount;\r\n                amount = 0;\r\n                break ;\r\n            }\r\n            inviter = IRelation(relationAddress).getInviter(inviter);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function claimNodesDivident() public {\r\n        require(nodesDividents[msg.sender] > 0, \"No Reward Claim\");\r\n        require(gaxToken.balanceOf(address(this)) > nodesDividents[msg.sender], \"Insufficient funds\");\r\n        uint256 claimReward = nodesDividents[msg.sender];\r\n        uint256 feeAmount = claimReward.mul(dividentFee).div(100);\r\n        address invitor = IRelation(relationAddress).getInviter(msg.sender);\r\n        recommendDividents(invitor, feeAmount);\r\n        claimReward = claimReward.sub(feeAmount);\r\n        nodesDividents[msg.sender] = 0;\r\n        gaxToken.transfer(msg.sender, claimReward);\r\n        emit ClaimNodesDividents(msg.sender, claimReward);\r\n    }\r\n\r\n    function recommendDividents(address inviter, uint256 amount) private {\r\n        uint256 inviteReward;\r\n        while(inviter != address(0)) {\r\n           uint256 accCount = IERC721Enumerable(nodeNFTAddress).balanceOf(inviter);\r\n            if(accCount > 0) {\r\n                inviteReward = amount;\r\n                nodesDividents[inviter] += inviteReward;\r\n                break ;\r\n            }\r\n            inviter = IRelation(relationAddress).getInviter(inviter);\r\n        }\r\n        if(inviteReward <= 0) {\r\n            gaxToken.transfer(receivedAddress, amount);\r\n        }\r\n    }\r\n\r\n    function getNodesDivident(address account) public view returns(uint256) {\r\n        return nodesDividents[account];\r\n    }\r\n\r\n    function claimRecommendationAward() public {\r\n        RECOMMENDREWARD storage accRecommendReward = recommendationAward[msg.sender];\r\n        require(accRecommendReward._rewardAmount > 0, \"There are no more rewards to claim\");\r\n        uint256 claimAmountHalf = accRecommendReward._rewardAmount.div(2);\r\n\r\n        require(gaxToken.balanceOf(address(this)) > claimAmountHalf, \"Insufficient funds\");\r\n        address invitor = IRelation(relationAddress).getInviter(msg.sender);\r\n        if(invitor != address(0)) {\r\n            RECOMMENDREWARD storage superRecommendReward = recommendationAward[invitor];\r\n            superRecommendReward._rewardAmount += claimAmountHalf;\r\n        } else {\r\n            gaxToken.transfer(receivedAddress, claimAmountHalf);\r\n        }\r\n        accRecommendReward._totalPaidReward = accRecommendReward._totalPaidReward.add(accRecommendReward._rewardAmount);\r\n        accRecommendReward._rewardAmount = 0;\r\n        gaxToken.transfer(msg.sender, claimAmountHalf);\r\n        emit ClaimRecommendationAward(msg.sender, claimAmountHalf);\r\n    }\r\n\r\n    function getAccountLogs(uint256 quantity) public view returns(AccountLog[] memory logList) {\r\n        uint256 arrItem  = accountLogs.length > quantity ? quantity : accountLogs.length;\r\n        logList = new AccountLog[](arrItem);\r\n        uint256 floor = accountLogs.length.sub(arrItem);\r\n        uint256 index = 0;\r\n        for(uint256 i = floor; i < accountLogs.length; i++) {\r\n            logList[index] = accountLogs[i];\r\n            index++;\r\n        }\r\n    }\r\n\r\n    function getRewardTypes(uint256 _probability, GAMELEVEL _level) internal view returns(REWARDTYPES _types) {\r\n        _types = _probability <= gameLevelMultiple[_level]._successRate ? REWARDTYPES.GAX : REWARDTYPES.GBX;\r\n    }\r\n\r\n    function randProbability() public view returns(uint256) {\r\n        uint256 random = uint256(keccak256(abi.encodePacked(block.prevrandao, msg.sender, block.timestamp, seedId)));\r\n        return random.mod(10000).add(1);\r\n    }\r\n\r\n    function getAccountTreasureChest(address account) public view returns (uint256) {\r\n        return accountGameInfo[account].length;\r\n    }\r\n\r\n    function getAccountTreasureChestInfo(address account) public view returns(AccountGame memory) {\r\n        return accountGameInfo[account][0];\r\n    }\r\n\r\n    struct CLEARANCE {\r\n        GAMELEVEL _level;\r\n        bool _isLock;\r\n    }\r\n    function getAccountClearance(address account) public view returns(CLEARANCE[] memory) {\r\n        uint8 total = 13;\r\n        CLEARANCE[] memory clearanceList = new CLEARANCE[](total);\r\n        for(uint8 i = 0; i < total; i++) {\r\n            clearanceList[i] =CLEARANCE(\r\n                GAMELEVEL(i),\r\n                accountClearance[account][GAMELEVEL(i)]\r\n            );    \r\n        }\r\n        return clearanceList;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gaxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeNFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimNodesDividents\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRecommendationAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Galaxius.GAMELEVEL\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"Start\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountAchievement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountShouldRecommendReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNodesDivident\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRecommendationAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaxToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gbxToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountClearance\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Galaxius.GAMELEVEL\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"_isLock\",\"type\":\"bool\"}],\"internalType\":\"struct Galaxius.CLEARANCE[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"getAccountLogs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multi\",\"type\":\"uint256\"}],\"internalType\":\"struct Galaxius.AccountLog[]\",\"name\":\"logList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountTreasureChest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountTreasureChestInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Galaxius.GAMELEVEL\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_probability\",\"type\":\"uint256\"},{\"internalType\":\"enum Galaxius.REWARDTYPES\",\"name\":\"_rewardTypes\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Galaxius.AccountGame\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNodesDivident\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"interest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRequiredGaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRequiredGaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodesDividents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTheTreasureChest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderRewardReceivedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receivedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommendationAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fromBelowReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPaidReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gaxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nodeNFTAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gbxTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_orderRewardReceivedAddress\",\"type\":\"address\"}],\"name\":\"setConfigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dividentFee\",\"type\":\"uint256\"}],\"name\":\"setDividentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_successFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fundAddress\",\"type\":\"address[]\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Galaxius.GAMELEVEL\",\"name\":\"_level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_multi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bigPro\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_smallPro\",\"type\":\"uint256\"}],\"name\":\"setGameLevelMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receivedAddress\",\"type\":\"address\"}],\"name\":\"setReceivedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_recommendFee\",\"type\":\"uint256\"}],\"name\":\"setRecommendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Galaxius.GAMELEVEL\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Galaxius", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ed522fbf37ebed57d3a0f9c1db7ad1857639a303000000000000000000000000382998b99a2342e0d3cbd3196844a2c2a627615f", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://19f971f3cddc8be5eb555d7ec301cc4e2302077627e97269e31065fd36a7d3e7"}