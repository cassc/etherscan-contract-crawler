{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LCBridgev2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  function _checkOwner() internal view virtual {\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n  }\\n\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    _transferOwnership(newOwner);\\n  }\\n\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\\n\\ncontract LCBridgev2 is Ownable {\\n  uint256 public chainId;\\n  address public treasury;\\n\\n  mapping (address => bool) public noFeeWallets;\\n  mapping (address => bool) public managers;\\n\\n  uint256 public swapFee = 5000;\\n  uint256 public platformFee = 300000;\\n  uint256 private constant coreDecimal = 1000000;\\n  uint256 private constant MULTIPLIER = 1_0000_0000_0000_0000;\\n\\n  struct StakeInfo {\\n    uint256 amount;   // Staked liquidity\\n    uint256 debtReward;\\n    uint256 rtr;\\n    uint256 updatedAt;\\n  }\\n\\n  struct SwapVoucher {\\n    uint256 amount;\\n    uint256 outChain;\\n    address toAccount;\\n    address refundAccount;\\n  }\\n\\n  uint256 public totalReward = 0;\\n  uint256 public prevReward = 0;\\n  uint256 public rtr = 0;\\n  uint256 public tvl;\\n  mapping (address => StakeInfo) public userInfo;\\n  uint256 private swapIndex = 1;\\n  uint256 private unstakeDebtIndex = 1;\\n  mapping (uint256 => SwapVoucher) public voucherLists;\\n\\n  modifier onlyManager() {\\n    require(managers[msg.sender], \\\"LCBridgev2: !manager\\\");\\n    _;\\n  }\\n\\n  event Swap(address operator, address receiver, address refund, uint256 amount, uint256 srcChainId, uint256 desChainId, uint256 swapIndex);\\n  event Redeem(address operator, address account, uint256 amount, uint256 srcChainId, uint256 swapIndex);\\n  event Stake(address account, uint256 amount);\\n  event Unstake(address account, uint256 amount, bool force);\\n  event UnstakeDebt(address account, uint256 amount, uint256 chainId, uint256 index);\\n  event DebtUnstake(address account, uint256 amount, uint256 chainId, uint256 index);\\n  event Claim(address acccount, uint256 amount);\\n  event Refund(address operator, address account, uint256 index, uint256 amount);\\n  event CutFee(uint256 fee, address treasury, uint256 treasuryFee, uint256 totalFee, uint256 tvl);\\n\\n  constructor(\\n    uint256 _chainId,\\n    address _treasury\\n  )\\n  {\\n    require(_treasury != address(0), \\\"LCBridgev2: Treasury\\\");\\n    \\n    chainId = _chainId;\\n    treasury = _treasury;\\n    managers[msg.sender] = true;\\n  }\\n\\n  function swap(address _to, address _refund, uint256 _outChainID) public payable returns(uint256) {\\n    uint256 amount = msg.value;\\n    if (noFeeWallets[msg.sender] == false) {\\n      amount = _cutFee(amount);\\n    }\\n    voucherLists[swapIndex] = SwapVoucher(amount, _outChainID, _to, _refund);\\n    emit Swap(msg.sender, _to, _refund, amount, chainId, _outChainID, swapIndex);\\n    swapIndex ++;\\n    return amount;\\n  }\\n\\n  function redeem(address account, uint256 amount, uint256 srcChainId, uint256 _swapIndex, uint256 operatorFee) public onlyManager returns(uint256) {\\n    require(amount <= address(this).balance, \\\"LCBridgev2: Few redeem liquidity\\\");\\n    require(amount >= operatorFee, \\\"LCBridgev2: Few redeem liquidity\\\");\\n\\n    amount -= operatorFee;\\n    if (amount > 0) {\\n      (bool success, ) = payable(account).call{value: amount}(\\\"\\\");\\n      require(success, \\\"LCBridgev2: Failed refund manager fee\\\");\\n      emit Redeem(msg.sender, account, amount, srcChainId, _swapIndex);\\n    }\\n\\n    if (operatorFee > 0) {\\n      (bool success, ) = payable(msg.sender).call{value: operatorFee}(\\\"\\\");\\n      require(success, \\\"LCBridgev2: Failed refund manager fee\\\");\\n    }\\n    return amount;\\n  }\\n\\n  function refund(uint256 _index, uint256 _fee) public onlyManager returns(uint256) {\\n    uint256 amount = voucherLists[_index].amount;\\n    amount -= _fee;\\n    (bool success, ) = payable(voucherLists[_index].refundAccount).call{value: amount}(\\\"\\\");\\n    require(success, \\\"LCBridgev2: Failed refund\\\");\\n    if (_fee > 0) {\\n      (success, ) = payable(msg.sender).call{value: _fee}(\\\"\\\");\\n      require(success, \\\"LCBridgev2: Failed operator fee\\\");\\n    }\\n    emit Refund(msg.sender, voucherLists[_index].refundAccount, _index, amount);\\n    return amount;\\n  }\\n\\n  function stake(address account) public payable returns(uint256) {\\n    userInfo[account].debtReward += getReward(account);\\n\\n    uint256 amount = msg.value;\\n    if (tvl > 0) {\\n      rtr += (totalReward - prevReward) * MULTIPLIER / tvl;\\n    }\\n    else {\\n      rtr = 0;\\n    }\\n    prevReward = totalReward;\\n    tvl += amount;\\n    \\n    userInfo[account].amount += amount;\\n    userInfo[account].rtr = rtr;\\n    userInfo[account].updatedAt = block.timestamp;\\n    emit Stake(account, amount);\\n    return amount;\\n  }\\n\\n  function unstake(address account, uint256 amount, bool force) public returns(uint256) {\\n    require(account == msg.sender || managers[msg.sender] == true, \\\"LCBridgev2: wrong account\\\");\\n    if (amount > userInfo[account].amount) {\\n      amount = userInfo[account].amount;\\n    }\\n\\n    uint256 reward = getReward(account);\\n    if (reward > 0) {\\n      claimReward(account);\\n    }\\n\\n    if (amount > 0) {\\n      uint256 liquidity = address(this).balance;\\n      uint256 unstakeAmount = amount;\\n      if (liquidity < amount) {\\n        unstakeAmount = liquidity;\\n        if (force) {\\n          emit UnstakeDebt(account, amount - liquidity, chainId, unstakeDebtIndex);\\n          unstakeDebtIndex ++;\\n        }\\n        else {\\n          amount = liquidity;\\n        }\\n      }\\n\\n      (bool success, ) = payable(account).call{value: unstakeAmount}(\\\"\\\");\\n      require(success, \\\"LCBridgev2: Failed to unstake\\\");\\n\\n      tvl -= amount;\\n      userInfo[account].amount -= amount;\\n      emit Unstake(account, amount, force);\\n    }\\n    return amount;\\n  }\\n\\n  function forceUnstake(address account, uint256 amount, uint256 _chainId, uint256 _debtIndex) public onlyManager {\\n    (bool success, ) = payable(account).call{value: amount}(\\\"\\\");\\n    require(success, \\\"LCBridgev2: Failed to debt unstake\\\");\\n    emit DebtUnstake(account, amount, _chainId, _debtIndex);\\n  }\\n\\n  function getReward(address account) public view returns(uint256) {\\n    uint256 reward = userInfo[account].debtReward;\\n    if (userInfo[account].amount > 0) {\\n      uint256 currentRtr = tvl > 0 ? (totalReward - prevReward) * MULTIPLIER / tvl : 0;\\n      currentRtr += rtr;\\n      if (currentRtr >= userInfo[account].rtr) {\\n        reward += (currentRtr - userInfo[account].rtr) * userInfo[account].amount / MULTIPLIER;\\n      }\\n    }\\n    return reward;\\n  }\\n\\n  function claimReward(address account) public returns(uint256) {\\n    uint256 reward = getReward(account);\\n    if (reward > 0) {\\n      (bool success, ) = payable(account).call{value: reward}(\\\"\\\");\\n      require(success, \\\"LCBridgev2: Failed to claim reward\\\");\\n    }\\n    uint256 currentRtr = tvl > 0 ? (totalReward - prevReward) * MULTIPLIER / tvl : 0;\\n    rtr += currentRtr;\\n    prevReward = totalReward;\\n\\n    userInfo[account].debtReward = 0;\\n    userInfo[account].rtr = rtr;\\n    userInfo[account].updatedAt = block.timestamp;\\n    emit Claim(account, reward);\\n    return reward;\\n  }\\n\\n  function setManager(address account, bool access) public onlyOwner {\\n    managers[account] = access;\\n  }\\n\\n  function setNoFeeWallets(address account, bool access) public onlyManager {\\n    noFeeWallets[account] = access;\\n  }\\n\\n  function setSwapFee(uint256 _swapFee) public onlyManager {\\n    swapFee = _swapFee;\\n  }\\n\\n  function setPlatformFee(uint256 _platformFee) public onlyManager {\\n    platformFee = _platformFee;\\n  }\\n\\n  function setTreasury(address _treasury) public onlyManager {\\n    treasury = _treasury;\\n  }\\n\\n  function _cutFee(uint256 _amount) internal returns(uint256) {\\n    if (_amount > 0) {\\n      uint256 fee = _amount * swapFee / coreDecimal;\\n      uint256 treasuryFee = fee * platformFee / coreDecimal;\\n      if (treasuryFee > 0) {\\n        (bool success, ) = payable(treasury).call{value: treasuryFee}(\\\"\\\");\\n        require(success, \\\"LCBridgev2: Failed cut fee\\\");\\n      }\\n      if (tvl > 0) {\\n        totalReward += (fee - treasuryFee);\\n      }\\n      emit CutFee(fee, treasury, treasuryFee, totalReward, tvl);\\n      return _amount - fee;\\n    }\\n    return 0;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"acccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"CutFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"DebtUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapIndex\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"refund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"desChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapIndex\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"UnstakeDebt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debtIndex\",\"type\":\"uint256\"}],\"name\":\"forceUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFeeWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"operatorFee\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rtr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setNoFeeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outChainID\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rtr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voucherLists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"refundAccount\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LCBridgev2", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000e839eb365cad6ca88b8d519d1475fa74eb9e8485", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}