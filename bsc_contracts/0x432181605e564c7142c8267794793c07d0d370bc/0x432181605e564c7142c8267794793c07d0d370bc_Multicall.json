{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.4;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n}\r\n\r\ncontract Multicall {\r\n\r\n    // Owner of the contract\r\n    address private theowner;\r\n\r\n    // Struct of the calls\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n        uint256 ethtosell;\r\n        uint256 gastouse;\r\n    }\r\n\r\n    // Set the owner\r\n    constructor() public {\r\n    theowner = msg.sender;\r\n    }\r\n\r\n    // onlyOwner modifier\r\n    modifier onlyOwner(){\r\n        require(msg.sender == theowner);\r\n        _;\r\n    }\r\n\r\n    // Multicall function return\r\n    // Return {\r\n    //   blockNumber: number of the block,\r\n    //   returnData: [calls results],\r\n    //   gasUsed: [gas used by each call],\r\n    // }\r\n\r\n    // If a call fails return 0x00\r\n    function aggregate(Call[] memory calls) public onlyOwner returns (uint256 blockNumber, bytes[] memory returnData, uint256[] memory gasUsed) {\r\n        blockNumber = block.number;\r\n        returnData = new bytes[](calls.length);\r\n        gasUsed = new uint256[](calls.length);\r\n        uint256 startGas = gasleft();\r\n        bytes memory ris = hex\"00\";\r\n        for(uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory ret) = calls[i].target.call{value: calls[i].ethtosell, gas: calls[i].gastouse}(calls[i].callData);\r\n            if (!success){\r\n                ret = ris;\r\n            }\r\n            returnData[i] = ret;\r\n            gasUsed[i] = startGas - gasleft();\r\n            startGas = gasleft();\r\n        }\r\n    }\r\n\r\n    // Helper functions\r\n    function getEthBalance(address addr) public view returns (uint256 balance) {\r\n        balance = addr.balance;\r\n    }\r\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(blockNumber);\r\n    }\r\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\r\n        blockHash = blockhash(block.number - 1);\r\n    }\r\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\r\n        timestamp = block.timestamp;\r\n    }\r\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\r\n        difficulty = block.difficulty;\r\n    }\r\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\r\n        gaslimit = block.gaslimit;\r\n    }\r\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\r\n        coinbase = block.coinbase;\r\n    }\r\n\r\n    // To allow the contract to receive funds\r\n    receive() external payable{}\r\n\r\n    // Allows the contract creator to withdraw funds\r\n    function rescueBNB(uint256 amount) external onlyOwner{\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    // Allows the contract creator to withdraw Wfunds\r\n    function withdrawToken(address _tokenContract, uint256 _amount) external onlyOwner{\r\n        IERC20 tokenContract = IERC20(_tokenContract);\r\n        tokenContract.transfer(msg.sender, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"ethtosell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gastouse\",\"type\":\"uint256\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gasUsed\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Multicall", "CompilerVersion": "v0.6.4+commit.1dca32f3", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bea310e1d5a08719141245d39f6a9d5cdbdded724cf3d39090870ee744cb682f"}