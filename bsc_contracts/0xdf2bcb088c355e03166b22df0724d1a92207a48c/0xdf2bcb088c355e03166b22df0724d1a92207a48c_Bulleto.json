{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(0x41673bbC9394D89C531B9f4263Cc5e8067d6e23c);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Bulleto is Ownable {\r\n    address public token1;\r\n    address public token2;\r\n\r\n    uint256 public LAST_SLOT = 8;\r\n    address public paymentWallet;\r\n    uint256 public totalEarning;\r\n    uint256 public btcEarning;\r\n    uint256 public totalUsers;\r\n\r\n    struct Team {\r\n        address member1;\r\n        address member2;\r\n    }\r\n\r\n    struct TeamMembers {\r\n        address member1;\r\n        address member2;\r\n        bool isTeam;\r\n    }\r\n\r\n    struct User {\r\n        address userAddress;\r\n        address referrer;\r\n        uint256 teamMember;\r\n        address[] referrals;\r\n        uint256 timestamp;\r\n        uint256 currentSlot;\r\n        mapping(uint256 => bool) activeSlots;\r\n        mapping(uint256 => uint256) slotsEarning;\r\n        mapping(uint256 => uint256) recycle;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(address => Team[]) public teams;\r\n    mapping(address => TeamMembers[]) teamMembers;\r\n    mapping(address => uint256) public userTotalEarning;\r\n    mapping(address => uint256) addressToId;\r\n    mapping(uint256 => address) idToAddress;\r\n    mapping(address => bool) public isExists;\r\n\r\n    event UserRegistered(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 slot\r\n    );\r\n\r\n    constructor() {\r\n        users[owner()].userAddress = owner();\r\n        users[owner()].activeSlots[1] = true;\r\n        users[owner()].currentSlot = 1;\r\n        totalUsers = 1;\r\n        isExists[owner()] = true;\r\n        paymentWallet = 0x8659DE8B9dfd9e7949edEB7B4A685CF63a2f64c4;\r\n        idToAddress[totalUsers] = owner();\r\n        addressToId[owner()] = totalUsers;\r\n        token1 = 0x55d398326f99059fF775485246999027B3197955;\r\n        token2 = 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c;\r\n    }\r\n\r\n    uint256[] public slots = [\r\n        1.02 ether,\r\n        2 ether,\r\n        4 ether,\r\n        8 ether,\r\n        16 ether,\r\n        32 ether,\r\n        64 ether,\r\n        128 ether\r\n    ];\r\n\r\n    uint256[] public btcSlots = [\r\n        0.001 ether,\r\n        0.002 ether,\r\n        0.004 ether,\r\n        0.008 ether,\r\n        0.016 ether,\r\n        0.032 ether,\r\n        0.064 ether,\r\n        0.128 ether\r\n    ];\r\n\r\n    function changeCurrency(\r\n        address _token1,\r\n        address _token2\r\n    ) external onlyOwner {\r\n        require(\r\n            _token1 != address(0) && _token2 != address(0),\r\n            \"null token address\"\r\n        );\r\n        token1 = _token1;\r\n        token2 = _token2;\r\n    }\r\n\r\n    function changePaymentWallet(address _newPaymentWallet) external onlyOwner {\r\n        require(_newPaymentWallet != address(0), \" null address\");\r\n        paymentWallet = _newPaymentWallet;\r\n    }\r\n\r\n    function withdrawTokens(address _token, uint256 amount) external onlyOwner {\r\n        require(\r\n            IBEP20(_token).balanceOf(address(this)) >= amount,\r\n            \"Insufficient tokens\"\r\n        );\r\n        IBEP20(_token).transfer(_msgSender(), amount);\r\n    }\r\n\r\n    function registration(uint256 referrerId) external returns (bool) {\r\n        require(!isExists[_msgSender()], \"you are already registered\");\r\n        _register(_msgSender(), idToAddress[referrerId]);\r\n        return true;\r\n    }\r\n\r\n    function _register(address _userAddress, address referrer) private {\r\n        require(\r\n            users[_userAddress].userAddress == address(0),\r\n            \"User already registered\"\r\n        );\r\n        require(\r\n            users[referrer].userAddress != address(0),\r\n            \"Referrer not found\"\r\n        );\r\n        totalUsers++;\r\n        User storage user = users[_userAddress];\r\n        user.userAddress = _userAddress;\r\n        user.referrer = referrer;\r\n        user.activeSlots[1] = true;\r\n        user.currentSlot = 1;\r\n        user.timestamp = block.timestamp;\r\n        users[_userAddress].activeSlots[1] = true;\r\n        saveSlot(referrer, 1);\r\n        users[referrer].referrals.push(_userAddress);\r\n        idToAddress[totalUsers] = _msgSender();\r\n        addressToId[_msgSender()] = totalUsers;\r\n        isExists[_msgSender()] = true;\r\n        transaction(0);\r\n        distributeRewards(_msgSender(), 0);\r\n        emit UserRegistered(_userAddress, referrer, 1);\r\n    }\r\n\r\n    function saveSlot(address referrer, uint256 slot) public returns (bool) {\r\n        uint256 teamNumber = teams[referrer].length;\r\n        if (teamNumber == 1 && teams[referrer][0].member2 == address(0))\r\n            teams[referrer][0].member2 = _msgSender();\r\n        if (teamNumber != 0) {\r\n            if (teamNumber == slot) {\r\n                if (teams[referrer][teamNumber - 1].member2 == address(0))\r\n                    teams[referrer][teamNumber - 1].member2 = _msgSender();\r\n            }\r\n            if (teamNumber + 1 == slot)\r\n                teams[referrer].push(Team(_msgSender(), address(0)));\r\n        } else {\r\n            teams[referrer].push(Team(_msgSender(), address(0)));\r\n        }\r\n        saveTeam(referrer);\r\n        return true;\r\n    }\r\n\r\n    function saveTeam(address referrer) private returns (bool) {\r\n        uint256 teamLength = teamMembers[referrer].length;\r\n        if (teamLength > 0) {\r\n            if (teamMembers[referrer][teamLength - 1].isTeam) {\r\n                teamMembers[referrer].push(\r\n                    TeamMembers(_msgSender(), address(0), false)\r\n                );\r\n                users[_msgSender()].teamMember = teamLength;\r\n            } else {\r\n                teamMembers[referrer][teamLength - 1].member2 = _msgSender();\r\n                teamMembers[referrer][teamLength - 1].isTeam = true;\r\n                users[_msgSender()].teamMember = teamLength - 1;\r\n            }\r\n        } else {\r\n            teamMembers[referrer].push(\r\n                TeamMembers(_msgSender(), address(0), false)\r\n            );\r\n            users[_msgSender()].teamMember = 0;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function buyNewSlot(uint256 slot) public returns (bool) {\r\n        User storage user = users[_msgSender()];\r\n        require(user.userAddress != address(0), \"User not registered\");\r\n        require(slot > 1 && slot <= LAST_SLOT, \"invalid slot\");\r\n        require(\r\n            users[_msgSender()].activeSlots[slot - 1],\r\n            \"activate previous slot first\"\r\n        );\r\n        require(\r\n            !users[_msgSender()].activeSlots[slot],\r\n            \"slot already activated\"\r\n        );\r\n        if (isCompletedSlot(_msgSender(), slot - 2)) {\r\n            user.currentSlot += 1;\r\n            users[_msgSender()].activeSlots[slot] = true;\r\n            transaction(slot - 1);\r\n            saveSlot(user.referrer, slot);\r\n            distributeRewards(_msgSender(), slot - 1);\r\n        } else revert(\"Current slot has not completed\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function isCompletedSlot(\r\n        address _user,\r\n        uint256 slotNumber\r\n    ) public view returns (bool) {\r\n        Team memory user = teams[_user][slotNumber];\r\n        if (user.member1 != address(0) && user.member2 != address(0)) {\r\n            if (!users[user.member2].activeSlots[slotNumber + 1]) return false;\r\n            Team memory nextFirstDownline = teams[user.member1][slotNumber];\r\n            if (!users[nextFirstDownline.member2].activeSlots[slotNumber + 1])\r\n                return false;\r\n            Team memory nextScondsDownline = teams[user.member1][slotNumber];\r\n            if (!users[nextScondsDownline.member2].activeSlots[slotNumber + 1])\r\n                return false;\r\n            return (nextFirstDownline.member1 != address(0) &&\r\n                nextFirstDownline.member2 != address(0) &&\r\n                nextScondsDownline.member1 != address(0) &&\r\n                nextScondsDownline.member2 != address(0));\r\n        } else return false;\r\n    }\r\n\r\n    function myPartners(address user) public view returns (uint256) {\r\n        return users[user].referrals.length;\r\n    }\r\n\r\n    function getNumberOfTeams(address user) public view returns (uint256) {\r\n        return teamMembers[user].length;\r\n    }\r\n\r\n    function activateSlot(\r\n        address user,\r\n        uint256 slotid\r\n    ) public view returns (bool) {\r\n        return users[user].activeSlots[slotid];\r\n    }\r\n\r\n    function getUserDownlines(\r\n        address user\r\n    ) external view returns (address[] memory) {\r\n        return users[user].referrals;\r\n    }\r\n\r\n    function distributeRewards(address _userAddress, uint256 _slot) private {\r\n        address uplineAddress = users[_userAddress].referrer;\r\n        if (uplineAddress != address(0)) {\r\n            uint256 teamNumber = users[_userAddress].teamMember;\r\n            User storage teamUpline = users[uplineAddress];\r\n            uint256 slotAmount = btcSlots[_slot];\r\n            uint256 fees = (slotAmount * 2) / 100;\r\n            if (teamUpline.referrer != address(0)) {\r\n                if (users[teamUpline.referrer].recycle[teamNumber] < 3) {\r\n                    users[teamUpline.referrer].slotsEarning[_slot] +=\r\n                        slotAmount -\r\n                        fees;\r\n                    userTotalEarning[teamUpline.referrer] += slotAmount - fees;\r\n                    tokenInstance(token2).transfer(\r\n                        teamUpline.referrer,\r\n                        slotAmount - fees\r\n                    );\r\n                    tokenInstance(token2).transfer(paymentWallet, fees);\r\n                    users[teamUpline.referrer].recycle[teamNumber] += 1;\r\n                } else {\r\n                    userTotalEarning[paymentWallet] += slotAmount;\r\n                    tokenInstance(token2).transfer(paymentWallet, slotAmount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function transaction(uint256 amount) private {\r\n        tokenInstance(token1).transferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            slots[amount]\r\n        );\r\n        tokenInstance(token2).transferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            btcSlots[amount]\r\n        );\r\n        totalEarning += slots[amount];\r\n        btcEarning += btcSlots[amount];\r\n    }\r\n\r\n    function tokenInstance(address _token) private pure returns (IBEP20) {\r\n        return IBEP20(_token);\r\n    }\r\n\r\n    function getTokeBalance(address _token) external view returns (uint256) {\r\n        return tokenInstance(_token).balanceOf(address(this));\r\n    }\r\n\r\n    function userSlotsEarning(\r\n        address userAddress,\r\n        uint256 _slot\r\n    ) public view returns (uint256) {\r\n        return users[userAddress].slotsEarning[_slot];\r\n    }\r\n\r\n    function getUserId(address _user) public view returns (uint256) {\r\n        require(isExists[_user], \"User not found\");\r\n        return addressToId[_user];\r\n    }\r\n\r\n    function getUserAddress(uint256 _user_id) public view returns (address) {\r\n        return idToAddress[_user_id];\r\n    }\r\n\r\n    function getSlotTeams(\r\n        address user,\r\n        uint256 slot\r\n    ) public view returns (address[] memory myteams) {\r\n        require(isExists[user], \"User not found!\");\r\n\r\n        require(teams[user].length > slot, \"Invalid slot\");\r\n\r\n        myteams = new address[](6);\r\n        address member1 = teams[user][slot].member1;\r\n        address member2 = teams[user][slot].member2;\r\n        myteams[0] = member1;\r\n        myteams[1] = member2;\r\n        if (teams[member1].length > slot) {\r\n            address member11 = teams[member1][slot].member1;\r\n            address member12 = teams[member1][slot].member2;\r\n            myteams[2] = member11;\r\n            myteams[3] = member12;\r\n        }\r\n        if (teams[member2].length > slot) {\r\n            address member21 = teams[member2][slot].member1;\r\n            address member22 = teams[member2][slot].member2;\r\n            myteams[4] = member21;\r\n            myteams[5] = member22;\r\n        }\r\n\r\n        return myteams;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LAST_SLOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotid\",\"type\":\"uint256\"}],\"name\":\"activateSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"btcSlots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"buyNewSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"changeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPaymentWallet\",\"type\":\"address\"}],\"name\":\"changePaymentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNumberOfTeams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"getSlotTeams\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"myteams\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_user_id\",\"type\":\"uint256\"}],\"name\":\"getUserAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDownlines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slotNumber\",\"type\":\"uint256\"}],\"name\":\"isCompletedSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"myPartners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"registration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"saveSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"member1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member2\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"userSlotsEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamMember\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSlot\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bulleto", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2162bdeeb9b2cbd6bd191d7572b6dbde95e662715b83c59b889b9be05d57fd83"}