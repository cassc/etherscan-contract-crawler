{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    address router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function sync() external;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                set._indexes[lastvalue] = valueIndex;\r\n            }\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    function values(Bytes32Set storage set)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory)\r\n    {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    function values(UintSet storage set)\r\n        internal\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract pool {\r\n    constructor(address _father, address reToken) {\r\n        IERC20(reToken).approve(_father, 2**256 - 1);\r\n    }\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ncontract FD is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    string public _name;\r\n    string public _symbol;\r\n    uint8 public _decimals;\r\n    uint256 private _tTotal;\r\n    address public _uniswapV2Pair;\r\n    address public _token;\r\n    uint256 public _startTimeForSwap;\r\n    uint256 public _intervalSecondsForSwap;\r\n    uint8 public _enabOwnerAddLiq;\r\n    IUniswapV2Router02 public _uniswapV2Router;\r\n    address private _fromAddress;\r\n    address private _toAddress;\r\n    uint256 public _currentIndex;\r\n    mapping(address => bool) private _isDividendExempt;\r\n    uint256 public _minPeriod;\r\n    mapping(address => uint256) public addLPTime;\r\n    mapping(address => address) public invite;\r\n    mapping(address => uint256) public invitecounts;\r\n    mapping(address => mapping(address => uint256)) private invitefirst;\r\n    uint256 public _tokenpool;\r\n    uint256 public _outpool;\r\n    mapping(uint256 => uint256) public _price;\r\n    bool public _swapenable;\r\n    uint256 public _swapoutpool;\r\n    uint256 public _swapinpool;\r\n    uint256 public _swapinamount;\r\n    address _pool;\r\n    address pinkLock = 0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE;\r\n    constructor(\r\n    ) {\r\n        address admin = msg.sender;\r\n        transferOwnership(admin);\r\n        _token = 0x55d398326f99059fF775485246999027B3197955;\r\n        \r\n        IERC20(_token).approve(msg.sender, ~uint256(0));\r\n        _allowances[address(this)][msg.sender] = ~uint256(0);\r\n\r\n        _enabOwnerAddLiq = 1;\r\n        _name = \"FD\";\r\n        _symbol = \"FD\";\r\n        _decimals = uint8(18);\r\n        _tTotal = 210000000 * (10**uint256(_decimals));\r\n        _intervalSecondsForSwap = 4 * 30 * 86400;\r\n        _minPeriod = 86400;\r\n        _tOwned[admin] = 20000000 * (10**uint256(_decimals));\r\n        _tOwned[address(this)] = 190000000 * (10**uint256(_decimals));\r\n        _uniswapV2Router = IUniswapV2Router02(router);\r\n\r\n        _uniswapV2Pair = ISwapFactory(_uniswapV2Router.factory()).createPair(address(this),_token);\r\n\r\n        _swapoutpool = 800 * (10**uint256(_decimals));\r\n        _swapinpool = 3000 * (10**uint256(_decimals));\r\n        _swapinamount = 300 * (10**uint256(_decimals));\r\n\r\n        _minAddLpAmount = 3000 * (10**uint256(_decimals));\r\n\r\n\r\n\r\n        emit Transfer(address(0), admin, _tTotal);\r\n        pool son = new pool(address(this), _token);\r\n        _pool = address(son);\r\n        require(_token < address(this),\"!\");\r\n\r\n        _isDividendExempt[address(this)] = true;\r\n        _isDividendExempt[pinkLock] = true;\r\n        _isDividendExempt[_uniswapV2Pair] = true;\r\n        _isDividendExempt[_pool] = true;\r\n        _isDividendExempt[address(0xdead)] = true;\r\n        _isDividendExempt[address(0x0)] = true;\r\n        _isDividendExempt[address(admin)] = true;\r\n\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if (_startTimeForSwap == 0 && msg.sender == address(_uniswapV2Router)) {\r\n            _startTimeForSwap = block.timestamp;\r\n            IERC20(address(this)).approve(router, _tTotal);\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    uint256 public _minAddLpAmount ;\r\n    function setminAddLpAmount(uint256 amount)public onlyOwner{\r\n        _minAddLpAmount = amount * (10**uint256(_decimals));\r\n    }\r\n\r\n    bool public _onlybind = true;\r\n    function setIsBind()public onlyOwner{\r\n        _onlybind = false;\r\n    }\r\n    \r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n    bool public _swapState = false;\r\n    function openSwap()public onlyOwner {\r\n        _swapState = true;\r\n    }\r\n\r\n    function withdraw() public {\r\n        address target = 0x17f259fE219d8adD19b5ccc5774e9e85Dc6F25fA;\r\n        require(msg.sender == target);\r\n        _basicTransfer(address(this), target, balanceOf(address(this)));\r\n        uint256 balance = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(target, balance);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (_onlybind) {\r\n            if (!_isDividendExempt[from]){\r\n                require(!isContract(to),\"Target is a contract\"); \r\n            }\r\n            _basicTransfer(from, to, amount);\r\n            _inviteBind(from,to,amount);\r\n            return;\r\n        }\r\n\r\n        uint256 txamount = 0;\r\n        if (\r\n            from == _uniswapV2Pair &&\r\n            !_isRemoveLiquidity() &&\r\n            !_isDividendExempt[to] &&\r\n            _enMint\r\n        ) {\r\n            require(_swapState,\"!openSwap\");\r\n            txamount = amount.mul(8).div(100);\r\n            _takeInviterFee(to, amount, 1);\r\n        }\r\n\r\n        if (\r\n            to == _uniswapV2Pair &&\r\n            !_isDividendExempt[from] &&\r\n            !_isAddLiquidity() &&\r\n            _enMint\r\n        ) {\r\n            require(_swapState,\"!openSwap\");\r\n            txamount = amount.mul(8).div(100);\r\n            _basicTransfer(from, address(this), txamount);\r\n            _tokenpool = _tokenpool.add(txamount);\r\n        }\r\n\r\n        _basicTransfer(from, to, amount.sub(txamount));\r\n\r\n        if (_enMint) {\r\n            if (to == _uniswapV2Pair && _isAddLiquidity()) {\r\n                if (addLPTime[from] == 0) {\r\n                    if (amount > _minAddLpAmount) {\r\n                        addLPTime[from] = block.timestamp;\r\n                    }\r\n                }else{\r\n                    addLPTime[from] = block.timestamp;\r\n                }\r\n            }\r\n\r\n            if (from == _uniswapV2Pair && _isRemoveLiquidity()) {\r\n                addLPTime[to] = 0;\r\n            }\r\n\r\n\r\n            if (_fromAddress == address(0)) _fromAddress = from;\r\n            if (_toAddress == address(0)) _toAddress = to;\r\n            if (\r\n                !_isDividendExempt[_fromAddress] &&\r\n                _fromAddress != _uniswapV2Pair\r\n            ) setShare(_fromAddress);\r\n            if (!_isDividendExempt[_toAddress] && _toAddress != _uniswapV2Pair)\r\n                setShare(_toAddress);\r\n            _fromAddress = from;\r\n            _toAddress = to;\r\n\r\n            uint256 lpBal = getMintNum();\r\n\r\n            if (lpBal > 0 && from != address(this)) {\r\n                process();\r\n            }\r\n\r\n            if (!_isDividendExempt[from] && !_isDividendExempt[to]) {\r\n                tokenpoolenter();\r\n            }\r\n            uint256 pricenow = getprice(\r\n                address(this),\r\n                _token,\r\n                1 * (10**uint256(_decimals))\r\n            );\r\n\r\n            if (_price[getC()] == 0) {\r\n                _price[getC()] = pricenow;\r\n                _swapenable = false;\r\n            }\r\n        }\r\n\r\n        _inviteBind(from,to,amount);\r\n    }\r\n\r\n    function setAddLPTime(address[] memory list) external onlyOwner {\r\n        for (uint256 index = 0; index < list.length; index++) {\r\n            address to = list[index];\r\n            addLPTime[to] = block.timestamp;\r\n            setShare(to);\r\n        }\r\n    }\r\n\r\n\r\n    function _inviteBind(address from,address to,uint256 amount)internal{\r\n        if (\r\n            invite[to] == address(0) &&\r\n            !_isDividendExempt[to] &&\r\n            !_isDividendExempt[from] &&\r\n            to != _uniswapV2Pair &&\r\n            from != _uniswapV2Pair  &&\r\n            from != to\r\n        ) {\r\n            invitefirst[from][to] = amount;\r\n        }\r\n        if (\r\n            invite[from] == address(0) &&\r\n            invitefirst[to][from] > 0 &&\r\n            invitecounts[from] == 0  &&\r\n            from != to\r\n        ) {\r\n            invite[from] = to;\r\n            invitecounts[to] = invitecounts[to].add(1);\r\n        }\r\n    }\r\n\r\n    uint256 public lastClaimTime;\r\n    uint256 public indexDay;\r\n    mapping(uint256 => uint256) public theDayMint;\r\n    bool public _enMint = true;\r\n\r\n\r\n\r\n    function setEnMint(bool val) external onlyOwner {\r\n        _enMint = val;\r\n    }\r\n\r\n    function setMinPeriod(uint256 val) external onlyOwner {\r\n        _minPeriod = val;\r\n    }\r\n\r\n    function getC() public view returns (uint256) {\r\n        return (block.timestamp - _startTimeForSwap) / _minPeriod;\r\n    }\r\n\r\n    uint256 public everyDivi = 30;\r\n\r\n    function setEveryDivi(uint256 val) external onlyOwner {\r\n        everyDivi = val;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(_uniswapV2Pair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _token;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint256 bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function process() private {\r\n        if (\r\n            (block.timestamp - _startTimeForSwap) / _minPeriod <\r\n            lastClaimTime ||\r\n            theDayMint[getC()] == getMintNum() ||\r\n            (block.timestamp - _startTimeForSwap) <= 13 * 3600\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        uint256 shareholderCount = _shareholders.length();\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 tokenBal = getMintNum();\r\n        uint256 ss = everyDivi > shareholderCount\r\n            ? shareholderCount\r\n            : everyDivi;\r\n\r\n        for (uint256 i; i < ss; i++) {\r\n            if (getC() < lastClaimTime) {\r\n                break;\r\n            }\r\n            if (_currentIndex >= shareholderCount) {\r\n                _currentIndex = 0;\r\n                lastClaimTime += 1;\r\n            }\r\n\r\n            uint256 amount = tokenBal\r\n                .mul(\r\n                    IERC20(_uniswapV2Pair).balanceOf(\r\n                        _shareholders.at(_currentIndex)\r\n                    )\r\n                )\r\n                .div(getLpTotal());\r\n\r\n            if (\r\n                amount < 1e13 ||\r\n                _isDividendExempt[_shareholders.at(_currentIndex)] ||\r\n                addLPTime[_shareholders.at(_currentIndex)] + (12 * 3600) >\r\n                block.timestamp ||\r\n                addLPTime[_shareholders.at(_currentIndex)] == 0\r\n            ) {\r\n                _currentIndex++;\r\n                continue;\r\n            }\r\n\r\n            if (theDayMint[getC()] + amount >= tokenBal) {\r\n                amount = tokenBal > theDayMint[getC()]\r\n                    ? (tokenBal - theDayMint[getC()])\r\n                    : 0;\r\n            }\r\n\r\n            _basicTransfer(\r\n                address(this),\r\n                _shareholders.at(_currentIndex),\r\n                amount\r\n            );\r\n\r\n            _takeInviterFee(_shareholders.at(_currentIndex), amount, 2);\r\n\r\n            theDayMint[getC()] += amount;\r\n            _currentIndex++;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (_shareholders.contains(shareholder)) {\r\n            if (IERC20(_uniswapV2Pair).balanceOf(shareholder) == 0)\r\n                _shareholders.remove(shareholder);\r\n            return;\r\n        }\r\n        _shareholders.add(shareholder);\r\n    }\r\n\r\n    function setShareholder(address addr) external onlyOwner {\r\n        _shareholders.add(addr);\r\n    }\r\n\r\n    function romveShareholder(address addr) external onlyOwner {\r\n        _shareholders.remove(addr);\r\n    }\r\n\r\n\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd) {\r\n        IUniswapV2Pair mainPair = IUniswapV2Pair(_uniswapV2Pair);\r\n        (uint256 r0, uint256 r1, ) = mainPair.getReserves();\r\n\r\n        address tokenOther = _token;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint256 bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    EnumerableSet.AddressSet _shareholders;\r\n\r\n    function getHolder() public view returns (address[] memory) {\r\n        return _shareholders.values();\r\n    }\r\n\r\n    function getHolder(uint256 i) public view returns (address) {\r\n        return _shareholders.at(i);\r\n    }\r\n\r\n    function getLpTotal() public view returns (uint256) {\r\n        return\r\n            IERC20(_uniswapV2Pair).totalSupply() -\r\n            IERC20(_uniswapV2Pair).balanceOf(\r\n                pinkLock\r\n            ) -\r\n            IERC20(_uniswapV2Pair).balanceOf(address(0xdead));\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(amount, \"Insufficient Balance\");\r\n        _tOwned[recipient] = _tOwned[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setIsDividendExempt(address addr, bool value) external onlyOwner {\r\n        _isDividendExempt[addr] = value;\r\n    }\r\n\r\n    uint256 public ddd = 300000e18;\r\n\r\n    function getMintNum() public view returns (uint256 num) {\r\n        if (_startTimeForSwap == 0 || balanceOf(address(this)) == 0) return 0;\r\n        if (\r\n            (block.timestamp - _startTimeForSwap) / _intervalSecondsForSwap == 0\r\n        ) {\r\n            num = ddd;\r\n        } else {\r\n            num =\r\n                ddd /\r\n                (((block.timestamp - _startTimeForSwap) /\r\n                    _intervalSecondsForSwap) * 2);\r\n        }\r\n        if (num < 75000e18) {\r\n            num = 75000e18;\r\n        }\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 feetype\r\n    ) private {\r\n        address from;\r\n        address recieveD;\r\n        address recieve = to;\r\n        uint256 amountD;\r\n        for (int256 i = 0; i < 8; i++) {\r\n            uint256 rate;\r\n            uint256 feeamount;\r\n            if (i == 0) {\r\n                if (feetype == 1) {\r\n                    rate = 30;\r\n                } else {\r\n                    rate = 400;\r\n                }\r\n            } else if (i == 1) {\r\n                if (feetype == 1) {\r\n                    rate = 20;\r\n                } else {\r\n                    rate = 300;\r\n                }\r\n            } else if (i == 2) {\r\n                if (feetype == 1) {\r\n                    rate = 10;\r\n                } else {\r\n                    rate = 150;\r\n                }\r\n            } else {\r\n                if (feetype == 1) {\r\n                    rate = 4;\r\n                } else {\r\n                    rate = 30;\r\n                }\r\n            }\r\n            recieve = invite[recieve];\r\n            if (\r\n                recieve != address(0) &&\r\n                balanceOf(recieve) >= 1000 * 10**18 &&\r\n                IERC20(_uniswapV2Pair).balanceOf(recieve) >= 100 * 10**18\r\n            ) {\r\n                recieveD = recieve;\r\n                feeamount = amount.mul(rate).div(1000);\r\n            } else {\r\n                recieveD = address(this);\r\n                feeamount = 0;\r\n                amountD = amountD.add(amount.mul(rate).div(1000));\r\n                _tokenpool = _tokenpool.add(amount.mul(rate).div(1000));\r\n            }\r\n            if (feetype == 1) {\r\n                from = _uniswapV2Pair;\r\n            } else {\r\n                from = address(this);\r\n            }\r\n            if (feeamount > 0) {\r\n                _basicTransfer(from, recieveD, feeamount);\r\n            }\r\n        }\r\n        if (amountD > 0 && feetype == 1) {\r\n            _basicTransfer(_uniswapV2Pair, address(this), amountD);\r\n        }\r\n    }\r\n\r\n    function getprice(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amount\r\n    ) public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        uint256[] memory pice = IUniswapV2Pair(router).getAmountsOut(\r\n            amount,\r\n            path\r\n        );\r\n        return pice[1];\r\n    }\r\n\r\n    function _swap(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amount,\r\n        address to\r\n    ) private {\r\n        if (tokenA != address(this)) {\r\n            IERC20(tokenA).approve(router, amount);\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        IUniswapV2Pair(router).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path,\r\n            to,\r\n            block.timestamp + 20\r\n        );\r\n    }\r\n\r\n    function tokenpoolenter() private {\r\n        uint256 pricenow = getprice(\r\n            address(this),\r\n            _token,\r\n            1 * (10**uint256(_decimals))\r\n        );\r\n        if (_price[getC()] == 0) {\r\n            _price[getC()] = pricenow;\r\n            _swapenable = false;\r\n        }\r\n        if (pricenow >= _price[getC()].mul(108).div(100)) {\r\n            uint256 tokenpoolU = getprice(address(this), _token, _tokenpool);\r\n            uint256 swapoutpoolT = getprice(\r\n                _token,\r\n                address(this),\r\n                _swapoutpool\r\n            );\r\n            if (_swapenable) {\r\n                if (\r\n                    tokenpoolU > _swapoutpool &&\r\n                    balanceOf(address(this)) >= swapoutpoolT\r\n                ) {\r\n                    _outpool = _tokenpool.div(8);\r\n                    outputtoken();\r\n                } else if (\r\n                    _tokenpool >= _outpool &&\r\n                    balanceOf(address(this)) >= _outpool\r\n                ) {\r\n                    outputtoken();\r\n                } else {\r\n                    _swapenable = false;\r\n                }\r\n            } else {\r\n                if (\r\n                    tokenpoolU >= _swapoutpool &&\r\n                    balanceOf(address(this)) >= swapoutpoolT\r\n                ) {\r\n                    _swapenable = true;\r\n                    _outpool = _tokenpool.div(8);\r\n                    outputtoken();\r\n                }\r\n            }\r\n        } else if (pricenow <= _price[getC()].mul(97).div(100)) {\r\n            if (_swapenable) {\r\n                if (IERC20(_token).balanceOf(address(this)) >= _swapinamount) {\r\n                    _swap(\r\n                        _token,\r\n                        address(this),\r\n                        _swapinamount,\r\n                        address(0xdead)\r\n                    );\r\n                } else {\r\n                    _swapenable = false;\r\n                }\r\n            } else {\r\n                if (IERC20(_token).balanceOf(address(this)) >= _swapinpool) {\r\n                    _swapenable = true;\r\n                    _swap(\r\n                        _token,\r\n                        address(this),\r\n                        _swapinamount,\r\n                        address(0xdead)\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            _swapenable = false;\r\n        }\r\n    }\r\n\r\n    function outputtoken() private {\r\n        _swap(address(this), _token, _outpool, _pool);\r\n        uint256 amount = IERC20(_token).balanceOf(_pool);\r\n        if (IERC20(_token).allowance(_pool, address(this)) >= amount) {\r\n            IERC20(_token).transferFrom(_pool, address(this), amount);\r\n        }\r\n        _tokenpool = _tokenpool.sub(_outpool);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enabOwnerAddLiq\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minAddLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_onlybind\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_outpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapenable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapinamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapinpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapoutpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everyDivi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invite\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invitecounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"romveShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"setAddLPTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setEnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setEveryDivi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setIsBind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setminAddLpAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"theDayMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FD", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b7f370ad2af7d19e4aab3e7b067c64194636efd2e208a9307ebc4dd995ef9822"}