{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/access/ISoulAccessManaged.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/*\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\n\\n * Twitter: https://twitter.com/SoulSolidity\\n *  GitHub: https://github.com/SoulSolidity\\n *     Web: https://SoulSolidity.com\\n */\\n\\ninterface ISoulAccessManaged {\\n    function soulAccessRegistry() external view returns (address soulAccessRegistry);\\n}\\n\"\r\n    },\r\n    \"contracts/access/SoulAccessManaged.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\r\\nimport {ISoulAccessManaged} from \\\"./ISoulAccessManaged.sol\\\";\\r\\n\\r\\ncontract SoulAccessManaged is ISoulAccessManaged {\\r\\n    address public soulAccessRegistry;\\r\\n\\r\\n    error SoulAccessUnauthorized();\\r\\n\\r\\n    constructor(address _accessRegistryAddress) {\\r\\n        soulAccessRegistry = _accessRegistryAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only by accounts with a specific role in the SoulAccessRegistry.\\r\\n     * @param roleName The name of the role to check.\\r\\n     * Reverts with a SoulAccessUnauthorizedAccount error if the calling account does not have the role.\\r\\n     */\\r\\n    modifier onlyAccessRegistryRoleName(string memory roleName) {\\r\\n        if (!_hasAccessRegistryRole(_getRoleHash(roleName), msg.sender)) {\\r\\n            revert SoulAccessUnauthorized();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only by accounts with a specific role in the SoulAccessRegistry.\\r\\n     * @param role The hash of the role to check.\\r\\n     * Reverts with a SoulAccessUnauthorizedAccount error if the calling account does not have the role.\\r\\n     */\\r\\n    modifier onlyAccessRegistryRole(bytes32 role) {\\r\\n        if (!_hasAccessRegistryRole(role, msg.sender)) {\\r\\n            revert SoulAccessUnauthorized();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Generates a hash for a role name to be used within the SoulAccessRegistry.\\r\\n     * @param role The name of the role.\\r\\n     * @return bytes32 The hash of the role name.\\r\\n     */\\r\\n    function _getRoleHash(string memory role) internal pure returns (bytes32) {\\r\\n        return keccak256(bytes(role));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if an account has a specific role in the SoulAccessRegistry.\\r\\n     * @param role The hash of the role to check.\\r\\n     * @param account The address of the account to check.\\r\\n     * @return bool True if the account has the role, false otherwise.\\r\\n     */\\r\\n    function _hasAccessRegistryRole(bytes32 role, address account) private view returns (bool) {\\r\\n        return IAccessControl(soulAccessRegistry).hasRole(role, account);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/extensions/ApeBond/lib/ICustomBillRefillable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICustomBillRefillable {\\n    event BillClaimed(uint256 indexed billId, address indexed recipient, uint256 payout, uint256 remaining);\\n    event BillCreated(uint256 deposit, uint256 payout, uint256 expires, uint256 indexed billId);\\n    event BillInitialized(ICustomBill.BillTerms billTerms, uint256 lastDecay);\\n    event BillPriceChanged(uint256 internalPrice, uint256 debtRatio);\\n    event BillRefilled(address payoutToken, uint256 amountAdded);\\n    event ControlVariableAdjustment(uint256 initialBCV, uint256 newBCV, uint256 adjustment);\\n    event FeeToChanged(address indexed newFeeTo);\\n    event Initialized(uint8 version);\\n    event MaxTotalPayoutChanged(uint256 newMaxTotalPayout);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n    event SetAdjustment(uint256 currentBCV, uint256 increment, uint256 targetBCV, uint256 buffer);\\n    event SetFees(uint256[] fees, uint256[] tierCeilings);\\n    event SetPendingOwner(address indexed pendingOwner);\\n    event TermsSet(uint8 parameter, uint256 input);\\n    event UpdateClaimApproval(address indexed owner, address indexed approvedAccount, bool approved);\\n\\n    function DAO() external view returns (address);\\n\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    function MAX_FEE() external view returns (uint256);\\n\\n    function REFILL_ROLE() external view returns (bytes32);\\n\\n    function acceptOwnership() external;\\n\\n    function adjustment()\\n        external\\n        view\\n        returns (uint256 rate, uint256 target, uint256 buffer, uint256 lastAdjustmentTimestamp);\\n\\n    function allIssuedBillIds() external view returns (uint256[] memory);\\n\\n    function batchClaim(uint256[] memory _billIds) external returns (uint256 payout);\\n\\n    function batchRedeem(uint256[] memory _billIds) external returns (uint256 payout);\\n\\n    function billInfo(\\n        uint256\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 payout,\\n            uint256 payoutClaimed,\\n            uint256 vesting,\\n            uint256 vestingTerm,\\n            uint256 vestingStartTimestamp,\\n            uint256 lastClaimTimestamp,\\n            uint256 truePricePaid\\n        );\\n\\n    function billNft() external view returns (address);\\n\\n    function billPrice() external view returns (uint256 price_);\\n\\n    function changeFeeTo(address _feeTo) external;\\n\\n    function claim(uint256 _billId) external returns (uint256);\\n\\n    function claimablePayout(uint256 _billId) external view returns (uint256 claimablePayout_);\\n\\n    function currentDebt() external view returns (uint256);\\n\\n    function currentFee() external view returns (uint256 currentFee_);\\n\\n    function customTreasury() external view returns (address);\\n\\n    function debtDecay() external view returns (uint256 decay_);\\n\\n    function debtRatio() external view returns (uint256 debtRatio_);\\n\\n    function deposit(uint256 _amount, uint256 _maxPrice, address _depositor) external returns (uint256);\\n\\n    function feeInPayout() external view returns (bool);\\n\\n    function feeTiers(uint256) external view returns (uint256 tierCeilings, uint256 fees);\\n\\n    function feeTo() external view returns (address);\\n\\n    function getBillIds(address user) external view returns (uint256[] memory);\\n\\n    function getBillIdsInRange(address user, uint256 start, uint256 end) external view returns (uint256[] memory);\\n\\n    function getBillInfo(uint256 billId) external view returns (ICustomBill.Bill memory);\\n\\n    function getFeeTierLength() external view returns (uint256 tierLength_);\\n\\n    function getMaxTotalPayout() external view returns (uint256);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n\\n    function grantRefillRole(address[] memory _billRefillers) external;\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function initialize(\\n        address _customTreasury,\\n        ICustomBill.BillCreationDetails memory _billCreationDetails,\\n        ICustomBill.BillTerms memory _billTerms,\\n        ICustomBill.BillAccounts memory _billAccounts,\\n        address[] memory _billRefillers\\n    ) external;\\n\\n    function initialize(\\n        address _customTreasury,\\n        ICustomBill.BillCreationDetails memory _billCreationDetails,\\n        ICustomBill.BillTerms memory _billTerms,\\n        ICustomBill.BillAccounts memory _billAccounts\\n    ) external;\\n\\n    function lastDecay() external view returns (uint256);\\n\\n    function maxPayout() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function payoutFor(uint256 _amount) external view returns (uint256 _payout, uint256 _fee);\\n\\n    function payoutToken() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function pendingPayout(uint256 _billId) external view returns (uint256 pendingPayout_);\\n\\n    function pendingVesting(uint256 _billId) external view returns (uint256 pendingVesting_);\\n\\n    function principalToken() external view returns (address);\\n\\n    function redeem(uint256 _billId) external returns (uint256);\\n\\n    function redeemerApproved(address, address) external view returns (bool);\\n\\n    function refillPayoutToken(uint256 _refillAmount) external;\\n\\n    function renounceOwnership() external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function revokeRefillRole(address[] memory _billRefillers) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function setAdjustment(uint256 _rate, uint256 _target, uint256 _buffer) external;\\n\\n    function setBillTerms(uint8 _parameter, uint256 _input) external;\\n\\n    function setClaimApproval(address approvedAccount, bool approved) external;\\n\\n    function setFeeTiers(uint256[] memory fees, uint256[] memory tierCeilings) external;\\n\\n    function setMaxTotalPayout(uint256 _maxTotalPayout) external;\\n\\n    function setPendingOwner(address newPendingOwner) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function terms()\\n        external\\n        view\\n        returns (\\n            uint256 controlVariable,\\n            uint256 vestingTerm,\\n            uint256 minimumPrice,\\n            uint256 maxPayout,\\n            uint256 maxDebt,\\n            uint256 maxTotalPayout,\\n            uint256 initialDebt\\n        );\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function totalPayoutGiven() external view returns (uint256);\\n\\n    function totalPrincipalBilled() external view returns (uint256);\\n\\n    function transferOwnership(address) external view;\\n\\n    function trueBillPrice() external view returns (uint256 price_);\\n\\n    function userBillIds() external view returns (uint256[] memory);\\n\\n    function vestedPayoutAtTime(uint256 _billId, uint256 _timestamp) external view returns (uint256 vestedPayout_);\\n\\n    function vestingCurve() external view returns (address);\\n\\n    function vestingPayout(uint256 _billId) external view returns (uint256 vestingPayout_);\\n\\n    function vestingPeriod(uint256 _billId) external view returns (uint256 vestingStart_, uint256 vestingEnd_);\\n}\\n\\ninterface ICustomBill {\\n    struct BillTerms {\\n        uint256 controlVariable;\\n        uint256 vestingTerm;\\n        uint256 minimumPrice;\\n        uint256 maxPayout;\\n        uint256 maxDebt;\\n        uint256 maxTotalPayout;\\n        uint256 initialDebt;\\n    }\\n\\n    struct Bill {\\n        uint256 payout;\\n        uint256 payoutClaimed;\\n        uint256 vesting;\\n        uint256 vestingTerm;\\n        uint256 vestingStartTimestamp;\\n        uint256 lastClaimTimestamp;\\n        uint256 truePricePaid;\\n    }\\n\\n    struct BillCreationDetails {\\n        address payoutToken;\\n        address principalToken;\\n        address initialOwner;\\n        address vestingCurve;\\n        uint256[] tierCeilings;\\n        uint256[] fees;\\n        bool feeInPayout;\\n    }\\n\\n    struct BillAccounts {\\n        address feeTo;\\n        address DAO;\\n        address billNft;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extensions/ApeBond/SoulZap_Ext_ApeBond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\n/// -----------------------------------------------------------------------\\r\\n/// Package Imports (alphabetical)\\r\\n/// -----------------------------------------------------------------------\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/// -----------------------------------------------------------------------\\r\\n/// Local Imports (alphabetical)\\r\\n/// -----------------------------------------------------------------------\\r\\nimport {Constants} from \\\"../../utils/Constants.sol\\\";\\r\\nimport {ICustomBillRefillable} from \\\"./lib/ICustomBillRefillable.sol\\\";\\r\\nimport {ISoulFeeManager} from \\\"../../fee-manager/ISoulFeeManager.sol\\\";\\r\\nimport {SoulZap_Ext_BondNftWhitelist} from \\\"./SoulZap_Ext_BondNftWhitelist.sol\\\";\\r\\nimport {SoulZap_UniV2} from \\\"../../SoulZap_UniV2.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SoulZap_Ext_ApeBond\\r\\n * @dev This contract extends the SoulZap_UniV2 contract with additional functionality for ApeBond.\\r\\n * @author Soul Solidity - Contact for mainnet licensing until 730 days after first deployment transaction with matching bytecode.\\r\\n * Otherwise feel free to experiment locally or on testnets.\\r\\n * @notice Do not use this contract for any tokens that do not have a standard ERC20 implementation.\\r\\n */\\r\\nabstract contract SoulZap_Ext_ApeBond is SoulZap_Ext_BondNftWhitelist, SoulZap_UniV2 {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Events\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    event ZapBond(ZapParams zapParams, ICustomBillRefillable bond, uint256 maxPrice);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// External Functions\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /// @notice Zap single token to ApeBond\\r\\n    /// @param zapParams ISoulZap.ZapParams\\r\\n    /// @param bond Treasury bond address\\r\\n    /// @param maxPrice Max price of treasury bond\\r\\n    function zapBond(\\r\\n        ZapParams memory zapParams,\\r\\n        SwapPath memory feeSwapPath,\\r\\n        ICustomBillRefillable bond,\\r\\n        uint256 maxPrice\\r\\n    ) external payable nonReentrant whenNotPaused verifyMsgValueAndWrap(zapParams.tokenIn, zapParams.amountIn) {\\r\\n        if (address(zapParams.tokenIn) == address(Constants.NATIVE_ADDRESS)) {\\r\\n            _zapBond(zapParams, feeSwapPath, bond, maxPrice);\\r\\n        } else {\\r\\n            uint256 balanceBefore = _getBalance(zapParams.tokenIn);\\r\\n            zapParams.tokenIn.safeTransferFrom(msg.sender, address(this), zapParams.amountIn);\\r\\n            zapParams.amountIn = _getBalance(zapParams.tokenIn) - balanceBefore;\\r\\n            _zapBond(zapParams, feeSwapPath, bond, maxPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Private Functions\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    function _zapBond(\\r\\n        ZapParams memory zapParams,\\r\\n        SwapPath memory feeSwapPath,\\r\\n        ICustomBillRefillable bond,\\r\\n        uint256 maxPrice\\r\\n    ) private {\\r\\n        // Verify inputs\\r\\n        require(zapParams.amountIn > 0, \\\"SoulZap: amountIn must be > 0\\\");\\r\\n        require(zapParams.to != address(0), \\\"SoulZap: Can't zap to null address\\\");\\r\\n        require(zapParams.liquidityPath.lpRouter != address(0), \\\"SoulZap: lp router can not be address(0)\\\");\\r\\n        require(zapParams.token0 != address(0), \\\"SoulZap: token0 can not be address(0)\\\");\\r\\n        require(zapParams.token1 != address(0), \\\"SoulZap: token1 can not be address(0)\\\");\\r\\n\\r\\n        IUniswapV2Pair bondPrincipalToken = IUniswapV2Pair(bond.principalToken());\\r\\n        bool skipFee = isBondNftWhitelisted(bond);\\r\\n\\r\\n        //Check if bond principal token is single token or lp\\r\\n        bool isSingleTokenBond = true;\\r\\n        try IUniswapV2Pair(bondPrincipalToken).token0() returns (address /*_token0*/) {\\r\\n            isSingleTokenBond = false;\\r\\n        } catch (bytes memory) {}\\r\\n\\r\\n        address to;\\r\\n        if (isSingleTokenBond) {\\r\\n            SwapParams memory swapParams = SwapParams({\\r\\n                tokenIn: zapParams.tokenIn,\\r\\n                amountIn: zapParams.amountIn,\\r\\n                tokenOut: zapParams.token0,\\r\\n                path: zapParams.path0,\\r\\n                to: zapParams.to,\\r\\n                deadline: zapParams.deadline\\r\\n            });\\r\\n            require(swapParams.tokenOut == address(bondPrincipalToken), \\\"ApeBond: Wrong token for Bond\\\");\\r\\n            to = swapParams.to;\\r\\n            swapParams.to = address(this);\\r\\n            _swap(swapParams, feeSwapPath, !skipFee);\\r\\n        } else {\\r\\n            require(\\r\\n                (zapParams.token0 == bondPrincipalToken.token0() && zapParams.token1 == bondPrincipalToken.token1()) ||\\r\\n                    (zapParams.token1 == bondPrincipalToken.token0() &&\\r\\n                        zapParams.token0 == bondPrincipalToken.token1()),\\r\\n                \\\"ApeBond: Wrong LP bondPrincipalToken for Bond\\\"\\r\\n            );\\r\\n            to = zapParams.to;\\r\\n            zapParams.to = address(this);\\r\\n            _zap(zapParams, feeSwapPath, !skipFee);\\r\\n        }\\r\\n\\r\\n        uint256 balance = bondPrincipalToken.balanceOf(address(this));\\r\\n        IERC20(address(bondPrincipalToken)).forceApprove(address(bond), balance);\\r\\n        bond.deposit(balance, maxPrice, to);\\r\\n        IERC20(address(bondPrincipalToken)).forceApprove(address(bond), 0);\\r\\n\\r\\n        emit ZapBond(zapParams, bond, maxPrice);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/extensions/ApeBond/SoulZap_Ext_BondNftWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\n/// -----------------------------------------------------------------------\\r\\n/// Package Imports (alphabetical)\\r\\n/// -----------------------------------------------------------------------\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n/// -----------------------------------------------------------------------\\r\\n/// Local Imports (alphabetical)\\r\\n/// -----------------------------------------------------------------------\\r\\nimport {ICustomBillRefillable} from \\\"./lib/ICustomBillRefillable.sol\\\";\\r\\nimport {SoulAccessManaged} from \\\"../../access/SoulAccessManaged.sol\\\";\\r\\n\\r\\n/// @title SoulZap_Ext_BondNftWhitelist\\r\\n/// @notice This contract extension requires specific role setup to manage the whitelist of Bond NFTs.\\r\\n/// The roles are managed through the SoulAccessManaged contract and are critical for the\\r\\n/// security and proper administration of the whitelist functionality.\\r\\nabstract contract SoulZap_Ext_BondNftWhitelist is SoulAccessManaged {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    EnumerableSet.AddressSet private _whitelistedBondNfts;\\r\\n\\r\\n    event BondNftWhitelisted(address indexed bondNft, bool whitelisted);\\r\\n\\r\\n    /// @notice Add or remove a bondNft from the whitelist\\r\\n    /// @param _bondNft The address of the bondNft to be added or removed\\r\\n    /// @param _isWhitelisted True to add the bondNft to the whitelist, false to remove it\\r\\n    function setBondNftWhitelist(\\r\\n        address _bondNft,\\r\\n        bool _isWhitelisted\\r\\n    ) external onlyAccessRegistryRoleName(\\\"SOUL_ZAP_ADMIN_ROLE\\\") {\\r\\n        if (_isWhitelisted) {\\r\\n            require(_whitelistedBondNfts.add(_bondNft), \\\"BondNft already whitelisted\\\");\\r\\n            emit BondNftWhitelisted(_bondNft, true);\\r\\n        } else {\\r\\n            require(_whitelistedBondNfts.remove(_bondNft), \\\"BondNft not whitelisted\\\");\\r\\n            emit BondNftWhitelisted(_bondNft, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Check if a bondNft is whitelisted\\r\\n    /// @param _bond The bondNft to check\\r\\n    /// @return True if the bondNft is whitelisted, false otherwise\\r\\n    function isBondNftWhitelisted(ICustomBillRefillable _bond) public view returns (bool) {\\r\\n        return _whitelistedBondNfts.contains(_bond.billNft());\\r\\n    }\\r\\n\\r\\n    /// @notice Get the count of whitelisted bondNfts\\r\\n    /// @return The number of whitelisted bondNfts\\r\\n    function getWhitelistedBondNftCount() public view returns (uint256) {\\r\\n        return _whitelistedBondNfts.length();\\r\\n    }\\r\\n\\r\\n    /// @notice Get a whitelisted bondNft by index\\r\\n    /// @param _index The index of the whitelisted bondNft\\r\\n    /// @return The address of the whitelisted bondNft at the given index\\r\\n    function getWhitelistedBondNftAtIndex(uint256 _index) public view returns (address) {\\r\\n        require(_index < _whitelistedBondNfts.length(), \\\"Index out of bounds\\\");\\r\\n        return _whitelistedBondNfts.at(_index);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/fee-manager/ISoulFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/*\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\n\\n * Twitter: https://twitter.com/SoulSolidity\\n *  GitHub: https://github.com/SoulSolidity\\n *     Web: https://SoulSolidity.com\\n */\\n\\n/**\\n * @title SoulFeeManager_Interface\\n * @dev This contract is an interface for the SoulFeeManager. It includes a function for getting the fee based on epoch volume.\\n * @author Soul Solidity - Contact for mainnet licensing until 730 days after first deployment transaction with matching bytecode.\\n * Otherwise feel free to experiment locally or on testnets.\\n */\\ninterface ISoulFeeManager {\\n    function isSoulFeeManager() external view returns (bool);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256 denominator);\\n\\n    function getFeeInfo(\\n        uint256 _volume\\n    )\\n        external\\n        view\\n        returns (\\n            address[] memory feeTokens,\\n            uint256 currentFeePercentage,\\n            uint256 feeDenominator,\\n            address feeCollector\\n        );\\n\\n    function getFee(uint256 epochVolume) external view returns (uint256 fee);\\n\\n    function getFeeCollector() external view returns (address fee);\\n\\n    function getFeeTokensLength() external view returns (uint256 length);\\n\\n    function getFeeTokens() external view returns (address[] memory tokens);\\n\\n    function getFeeToken(uint256 index) external view returns (address token);\\n\\n    function isFeeToken(address _token) external view returns (bool valid);\\n}\\n\"\r\n    },\r\n    \"contracts/full-versions/SoulZap_UniV2_Extended_V1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\n// External package imports\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\n\\r\\n// Internal route directory imports\\r\\nimport {IWETH} from \\\"../lib/IWETH.sol\\\";\\r\\nimport {ISoulFeeManager} from \\\"../fee-manager/ISoulFeeManager.sol\\\";\\r\\nimport {SoulZap_UniV2} from \\\"../SoulZap_UniV2.sol\\\";\\r\\nimport {SoulZap_Ext_ApeBond} from \\\"../extensions/ApeBond/SoulZap_Ext_ApeBond.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SoulZap_UniV2_Extended_V1\\r\\n * @dev This contract is an implementation of ISoulZap interface. It includes functionalities for zapping into\\r\\n * UniswapV2 type liquidity pools.\\r\\n * @notice This contract has the following features:\\r\\n * 1. UniswapV2 Zap In\\r\\n * 2. Deposit into ApeBond, Bond contracts.\\r\\n * @author Soul Solidity - Contact for mainnet licensing until 730 days after first deployment transaction with matching bytecode.\\r\\n * Otherwise feel free to experiment locally or on testnets.\\r\\n */\\r\\ncontract SoulZap_UniV2_Extended_V1 is SoulZap_UniV2, SoulZap_Ext_ApeBond {\\r\\n    constructor(\\r\\n        address _accessRegistry,\\r\\n        IWETH _wnative,\\r\\n        ISoulFeeManager _soulFeeManager,\\r\\n        /// @dev Set to zero to start epoch tracking immediately\\r\\n        uint256 _epochStartTime\\r\\n    ) SoulZap_UniV2(_accessRegistry, _wnative, _soulFeeManager, _epochStartTime) SoulZap_Ext_ApeBond() {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ISoulZap_UniV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/*\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\n\\n * Twitter: https://twitter.com/SoulSolidity\\n *  GitHub: https://github.com/SoulSolidity\\n *     Web: https://SoulSolidity.com\\n */\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ISoulAccessManaged} from \\\"./access/ISoulAccessManaged.sol\\\";\\nimport {ISoulFeeManager} from \\\"./fee-manager/ISoulFeeManager.sol\\\";\\nimport {ITransferHelper} from \\\"./utils/ITransferHelper.sol\\\";\\nimport {IEpochVolumeTracker} from \\\"./utils/IEpochVolumeTracker.sol\\\";\\n\\ninterface ISoulZap_UniV2 is ISoulAccessManaged, ITransferHelper, IEpochVolumeTracker {\\n    /// -----------------------------------------------------------------------\\n    /// Swap Path\\n    /// -----------------------------------------------------------------------\\n\\n    enum SwapType {\\n        V2\\n    }\\n\\n    struct SwapPath {\\n        address swapRouter;\\n        SwapType swapType;\\n        address[] path;\\n        uint256 amountOut;\\n        uint256 amountOutMin;\\n    }\\n\\n    //// -----------------------------------------------------------------------\\n    /// Liquidity Path\\n    /// -----------------------------------------------------------------------\\n\\n    enum LPType {\\n        V2\\n    }\\n\\n    struct LiquidityPath {\\n        address lpRouter;\\n        LPType lpType;\\n        uint256 amountAMin;\\n        uint256 amountBMin;\\n        uint256 lpAmount;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Swap Params\\n    /// -----------------------------------------------------------------------\\n\\n    struct SwapParams {\\n        IERC20 tokenIn;\\n        uint256 amountIn;\\n        address tokenOut;\\n        SwapPath path;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Zap Params\\n    /// -----------------------------------------------------------------------\\n\\n    struct ZapParams {\\n        IERC20 tokenIn;\\n        uint256 amountIn;\\n        address token0;\\n        address token1;\\n        SwapPath path0;\\n        SwapPath path1;\\n        LiquidityPath liquidityPath;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    /// -----------------------------------------------------------------------\\n    /// Storage Variables\\n    /// -----------------------------------------------------------------------\\n\\n    function soulFeeManager() external view returns (ISoulFeeManager);\\n\\n    /// -----------------------------------------------------------------------\\n    /// Functions\\n    /// -----------------------------------------------------------------------\\n\\n    function swap(SwapParams memory swapParams, SwapPath memory feeSwapPath) external payable;\\n\\n    function zap(ZapParams memory zapParams, SwapPath memory feeSwapPath) external payable;\\n\\n    /// -----------------------------------------------------------------------\\n    /// Fee Management\\n    /// -----------------------------------------------------------------------\\n\\n    function isFeeToken(address _token) external view returns (bool valid);\\n\\n    function getFeeInfo()\\n        external\\n        view\\n        returns (\\n            address[] memory feeTokens,\\n            uint256 currentFeePercentage,\\n            uint256 feeDenominator,\\n            address feeCollector\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SoulZap_UniV2_Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\n/// -----------------------------------------------------------------------\\r\\n/// Package Imports\\r\\n/// -----------------------------------------------------------------------\\r\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n/// -----------------------------------------------------------------------\\r\\n/// Local Imports\\r\\n/// -----------------------------------------------------------------------\\r\\nimport {SoulAccessManaged} from \\\"./access/SoulAccessManaged.sol\\\";\\r\\n\\r\\n/// @title SoulZap_UniV2_Whitelist\\r\\n/// @notice This contract extension requires specific role setup to manage the whitelist of Bond NFTs.\\r\\n/// The roles are managed through the SoulAccessManaged contract and are critical for the\\r\\n/// security and proper administration of the whitelist functionality.\\r\\nabstract contract SoulZap_UniV2_Whitelist is SoulAccessManaged {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    EnumerableSet.AddressSet private _whitelistedRouters;\\r\\n\\r\\n    event RouterWhitelisted(address indexed router, bool whitelisted);\\r\\n\\r\\n    /// @notice Add or remove a router from the whitelist\\r\\n    /// @dev This function allows adding or removing a router from the whitelist.\\r\\n    /// @param _router The address of the router to be added or removed\\r\\n    /// @param _isWhitelisted True to add the router to the whitelist, false to remove it\\r\\n    function setRouterWhitelist(\\r\\n        address _router,\\r\\n        bool _isWhitelisted\\r\\n    ) external onlyAccessRegistryRoleName(\\\"SOUL_ZAP_ADMIN_ROLE\\\") {\\r\\n        if (_isWhitelisted) {\\r\\n            require(_whitelistedRouters.add(_router), \\\"Router already whitelisted\\\");\\r\\n            emit RouterWhitelisted(_router, true);\\r\\n        } else {\\r\\n            require(_whitelistedRouters.remove(_router), \\\"Router not whitelisted\\\");\\r\\n            emit RouterWhitelisted(_router, false);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Check if a router is whitelisted\\r\\n    /// @dev This function checks if a router is whitelisted.\\r\\n    /// @param _router The address of the router to check\\r\\n    /// @return true if the router is whitelisted, false otherwise\\r\\n    function isRouterWhitelisted(address _router) public view returns (bool) {\\r\\n        return _whitelistedRouters.contains(_router);\\r\\n    }\\r\\n\\r\\n    /// @notice Get the count of whitelisted routers\\r\\n    /// @dev This function returns the count of whitelisted routers.\\r\\n    /// @return the count of whitelisted routers\\r\\n    function getWhitelistedRouterCount() public view returns (uint256) {\\r\\n        return _whitelistedRouters.length();\\r\\n    }\\r\\n\\r\\n    /// @notice Get the whitelisted router at a specific index\\r\\n    /// @dev This function returns the whitelisted router at the specified index.\\r\\n    /// @param _index The index of the whitelisted router to retrieve\\r\\n    /// @return the address of the whitelisted router at the specified index\\r\\n    function getWhitelistedRouterAtIndex(uint256 _index) public view returns (address) {\\r\\n        require(_index < _whitelistedRouters.length(), \\\"Index out of bounds\\\");\\r\\n        return _whitelistedRouters.at(_index);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SoulZap_UniV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\n/// -----------------------------------------------------------------------\\r\\n/// Package Imports (alphabetical)\\r\\n/// -----------------------------------------------------------------------\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport {IUniswapV2Factory} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/// -----------------------------------------------------------------------\\r\\n/// Internal Imports (alphabetical)\\r\\n/// -----------------------------------------------------------------------\\r\\nimport {Constants} from \\\"./utils/Constants.sol\\\";\\r\\nimport {IWETH} from \\\"./lib/IWETH.sol\\\";\\r\\nimport {EpochVolumeTracker} from \\\"./utils/EpochVolumeTracker.sol\\\";\\r\\nimport {ISoulFeeManager} from \\\"./fee-manager/ISoulFeeManager.sol\\\";\\r\\nimport {ISoulZap_UniV2} from \\\"./ISoulZap_UniV2.sol\\\";\\r\\nimport {SoulAccessManaged} from \\\"./access/SoulAccessManaged.sol\\\";\\r\\nimport {SoulZap_UniV2_Whitelist} from \\\"./SoulZap_UniV2_Whitelist.sol\\\";\\r\\nimport {TransferHelper} from \\\"./utils/TransferHelper.sol\\\";\\r\\nimport {TokenHelper} from \\\"./utils/TokenHelper.sol\\\";\\r\\nimport {LocalVarsLib} from \\\"./utils/LocalVarsLib.sol\\\";\\r\\nimport {Sweeper} from \\\"./utils/Sweeper.sol\\\";\\r\\n\\r\\n/*\\r\\n/// @dev The receive method is used as a fallback function in a contract\\r\\n/// and is called when ether is sent to a contract with no calldata.\\r\\n\\r\\n*/\\r\\n/**\\r\\n * @title SoulZap_UniV2\\r\\n * @notice This contract includes functionalities for zapping in and out of UniswapV2 type liquidity pools.\\r\\n * @dev Do not use this contract for any tokens that do not have a standard ERC20 implementation.\\r\\n * @author Soul Solidity - Contact for mainnet licensing until 730 days after first deployment\\r\\n *   transaction with matching bytecode.\\r\\n * Otherwise feel free to experiment locally or on testnets.\\r\\n */\\r\\ncontract SoulZap_UniV2 is\\r\\n    ISoulZap_UniV2,\\r\\n    SoulAccessManaged,\\r\\n    SoulZap_UniV2_Whitelist,\\r\\n    EpochVolumeTracker,\\r\\n    Initializable,\\r\\n    Pausable,\\r\\n    ReentrancyGuard,\\r\\n    TransferHelper,\\r\\n    Sweeper\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Storage variables\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    ISoulFeeManager public soulFeeManager;\\r\\n\\r\\n    bytes32 public SOUL_ZAP_ADMIN_ROLE = _getRoleHash(\\\"SOUL_ZAP_ADMIN_ROLE\\\");\\r\\n    bytes32 public SOUL_ZAP_PAUSER_ROLE = _getRoleHash(\\\"SOUL_ZAP_PAUSER_ROLE\\\");\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Events\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    event Swap(SwapParams swapParams);\\r\\n    event Zap(ZapParams zapParams);\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Constructor\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    constructor(\\r\\n        address _accessRegistry,\\r\\n        IWETH _wnative,\\r\\n        ISoulFeeManager _soulFeeManager,\\r\\n        /// @dev Set to zero to start epoch tracking immediately\\r\\n        uint256 _epochStartTime\\r\\n    )\\r\\n        SoulAccessManaged(_accessRegistry)\\r\\n        EpochVolumeTracker(_epochStartTime, 0)\\r\\n        TransferHelper(_wnative)\\r\\n        Sweeper(new address[](0), true, SOUL_ZAP_ADMIN_ROLE)\\r\\n    {\\r\\n        require(_soulFeeManager.isSoulFeeManager(), \\\"SoulZap: soulFeeManager is not ISoulFeeManager\\\");\\r\\n        soulFeeManager = _soulFeeManager;\\r\\n    }\\r\\n\\r\\n    /// @dev The receive method is used as a fallback function in a contract\\r\\n    /// and is called when ether is sent to a contract with no calldata.\\r\\n    receive() external payable {\\r\\n        require(msg.sender == address(WNATIVE), \\\"SoulZap: Only receive from WNATIVE\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This modifier checks if the transaction includes Ether (msg.value > 0).\\r\\n     * If it does, it ensures that the input token is Wrapped Native (WNATIVE) and the input amount is 0.\\r\\n     * It then wraps the Ether into WNATIVE and returns the amount of WNATIVE.\\r\\n     *\\r\\n     * @param _inputToken The token that the user wants to use for the transaction.\\r\\n     * @param _inputAmount The amount of the token that the user wants to use for the transaction.\\r\\n     */\\r\\n    modifier verifyMsgValueAndWrap(IERC20 _inputToken, uint256 _inputAmount) {\\r\\n        if (address(_inputToken) == address(Constants.NATIVE_ADDRESS)) {\\r\\n            (, uint256 wrappedAmount) = _wrapNative();\\r\\n            require(_inputAmount == wrappedAmount, \\\"SoulZap: amountIn not equal to wrappedAmount\\\");\\r\\n        } else {\\r\\n            require(msg.value == 0, \\\"SoulZap: msg.value should be 0\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Pausing\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /// @notice Pauses the contract functionality.\\r\\n    function pause() external onlyAccessRegistryRole(SOUL_ZAP_PAUSER_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @notice Unpauses the contract functionality.\\r\\n    /// @dev This operation should only be performed by an admin role as it can be a critical operation.\\r\\n    function unpause() external onlyAccessRegistryRole(SOUL_ZAP_ADMIN_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Swap Functions\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /// @notice Zap single token to LP\\r\\n    /// @param swapParams all parameters for zap\\r\\n    /// @param feeSwapPath swap path for protocol fee\\r\\n    function swap(\\r\\n        SwapParams memory swapParams,\\r\\n        SwapPath memory feeSwapPath\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n        verifyMsgValueAndWrap(swapParams.tokenIn, swapParams.amountIn)\\r\\n    {\\r\\n        if (address(swapParams.tokenIn) == address(Constants.NATIVE_ADDRESS)) {\\r\\n            _swap(swapParams, feeSwapPath, true);\\r\\n        } else {\\r\\n            // No msg.value\\r\\n            uint256 balanceBefore = _getBalance(swapParams.tokenIn);\\r\\n            swapParams.tokenIn.safeTransferFrom(msg.sender, address(this), swapParams.amountIn);\\r\\n            swapParams.amountIn = _getBalance(swapParams.tokenIn) - balanceBefore;\\r\\n            _swap(swapParams, feeSwapPath, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Ultimate ZAP function\\r\\n    /// @dev Assumes tokens are already transferred to this contract.\\r\\n    /// @param swapParams all parameters for swap\\r\\n    /// @param feeSwapPath swap path for protocol fee\\r\\n    function _swap(SwapParams memory swapParams, SwapPath memory feeSwapPath, bool takeFee) internal {\\r\\n        // Verify inputs\\r\\n        require(swapParams.amountIn > 0, \\\"SoulZap: amountIn must be > 0\\\");\\r\\n        require(swapParams.to != address(0), \\\"SoulZap: Can't swap to null address\\\");\\r\\n        require(swapParams.tokenOut != address(0), \\\"SoulZap: tokenOut can't be address(0)\\\");\\r\\n        require(address(swapParams.tokenIn) != swapParams.tokenOut, \\\"SoulZap: tokens can't be the same\\\");\\r\\n\\r\\n        bool native = address(swapParams.tokenIn) == address(Constants.NATIVE_ADDRESS);\\r\\n        if (native) swapParams.tokenIn = WNATIVE;\\r\\n\\r\\n        if (takeFee) {\\r\\n            swapParams.amountIn -= _handleFee(\\r\\n                swapParams.tokenIn,\\r\\n                swapParams.amountIn,\\r\\n                feeSwapPath,\\r\\n                swapParams.deadline\\r\\n            );\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Handle token Swap\\r\\n         */\\r\\n        require(swapParams.path.swapRouter != address(0), \\\"SoulZap: swap router can not be address(0)\\\");\\r\\n        require(swapParams.path.path[0] == address(swapParams.tokenIn), \\\"SoulZap: wrong path path[0]\\\");\\r\\n        require(\\r\\n            swapParams.path.path[swapParams.path.path.length - 1] == swapParams.tokenOut,\\r\\n            \\\"SoulZap: wrong path path[-1]\\\"\\r\\n        );\\r\\n        swapParams.tokenIn.forceApprove(swapParams.path.swapRouter, swapParams.amountIn);\\r\\n        _routerSwapFromPath(swapParams.path, swapParams.amountIn, swapParams.to, swapParams.deadline);\\r\\n\\r\\n        emit Swap(swapParams);\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Zap Functions\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /// @notice Zap single token to LP\\r\\n    /// @param zapParams parameters for Zap\\r\\n    /// @param feeSwapPath swap path for protocol fee\\r\\n    function zap(\\r\\n        ZapParams memory zapParams,\\r\\n        SwapPath memory feeSwapPath\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        override\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n        verifyMsgValueAndWrap(zapParams.tokenIn, zapParams.amountIn)\\r\\n    {\\r\\n        if (address(zapParams.tokenIn) == address(Constants.NATIVE_ADDRESS)) {\\r\\n            _zap(zapParams, feeSwapPath, true);\\r\\n        } else {\\r\\n            uint256 balanceBefore = _getBalance(zapParams.tokenIn);\\r\\n            zapParams.tokenIn.safeTransferFrom(msg.sender, address(this), zapParams.amountIn);\\r\\n            zapParams.amountIn = _getBalance(zapParams.tokenIn) - balanceBefore;\\r\\n            _zap(zapParams, feeSwapPath, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Ultimate ZAP function\\r\\n    /// @dev Assumes tokens are already transferred to this contract.\\r\\n    /// - Native input zap MUST be done with Constants.NATIVE_ADDRESS\\r\\n    /// @param zapParams see ISoulZap_UniV2.ZapParams struct\\r\\n    /// @param feeSwapPath see ISoulZap_UniV2.SwapPath struct\\r\\n    function _zap(ZapParams memory zapParams, SwapPath memory feeSwapPath, bool takeFee) internal {\\r\\n        // Verify inputs\\r\\n        require(zapParams.amountIn > 0, \\\"SoulZap: amountIn must be > 0\\\");\\r\\n        require(zapParams.to != address(0), \\\"SoulZap: Can't zap to null address\\\");\\r\\n        require(zapParams.liquidityPath.lpRouter != address(0), \\\"SoulZap: lp router can not be address(0)\\\");\\r\\n        require(zapParams.token0 != address(0), \\\"SoulZap: token0 can not be address(0)\\\");\\r\\n        require(zapParams.token1 != address(0), \\\"SoulZap: token1 can not be address(0)\\\");\\r\\n\\r\\n        bool native = address(zapParams.tokenIn) == address(Constants.NATIVE_ADDRESS);\\r\\n        if (native) zapParams.tokenIn = WNATIVE;\\r\\n\\r\\n        // Setup struct to prevent stack overflow\\r\\n        LocalVarsLib.LocalVars memory vars;\\r\\n\\r\\n        if (takeFee) {\\r\\n            zapParams.amountIn -= _handleFee(zapParams.tokenIn, zapParams.amountIn, feeSwapPath, zapParams.deadline);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Setup swap amount0 and amount1\\r\\n         */\\r\\n        if (zapParams.liquidityPath.lpType == LPType.V2) {\\r\\n            // Handle UniswapV2 Liquidity\\r\\n            require(\\r\\n                IUniswapV2Factory(IUniswapV2Router02(zapParams.liquidityPath.lpRouter).factory()).getPair(\\r\\n                    zapParams.token0,\\r\\n                    zapParams.token1\\r\\n                ) != address(0),\\r\\n                \\\"SoulZap: Pair doesn't exist\\\"\\r\\n            );\\r\\n            vars.amount0In = zapParams.amountIn / 2;\\r\\n            vars.amount1In = zapParams.amountIn / 2;\\r\\n        } else {\\r\\n            revert(\\\"SoulZap: LPType not supported\\\");\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Handle token0 Swap\\r\\n         */\\r\\n        if (zapParams.token0 != address(zapParams.tokenIn)) {\\r\\n            require(zapParams.path0.swapRouter != address(0), \\\"SoulZap: swap router can not be address(0)\\\");\\r\\n            require(zapParams.path0.path[0] == address(zapParams.tokenIn), \\\"SoulZap: wrong path path0[0]\\\");\\r\\n            require(\\r\\n                zapParams.path0.path[zapParams.path0.path.length - 1] == zapParams.token0,\\r\\n                \\\"SoulZap: wrong path path0[-1]\\\"\\r\\n            );\\r\\n            zapParams.tokenIn.forceApprove(zapParams.path0.swapRouter, vars.amount0In);\\r\\n            vars.amount0Out = _routerSwapFromPath(zapParams.path0, vars.amount0In, address(this), zapParams.deadline);\\r\\n        } else {\\r\\n            vars.amount0Out = zapParams.amountIn - vars.amount1In;\\r\\n        }\\r\\n        /**\\r\\n         * Handle token1 Swap\\r\\n         */\\r\\n        if (zapParams.token1 != address(zapParams.tokenIn)) {\\r\\n            require(zapParams.path1.swapRouter != address(0), \\\"SoulZap: swap router can not be address(0)\\\");\\r\\n            require(zapParams.path1.path[0] == address(zapParams.tokenIn), \\\"SoulZap: wrong path path1[0]\\\");\\r\\n            require(\\r\\n                zapParams.path1.path[zapParams.path1.path.length - 1] == zapParams.token1,\\r\\n                \\\"SoulZap: wrong path path1[-1]\\\"\\r\\n            );\\r\\n            zapParams.tokenIn.forceApprove(zapParams.path1.swapRouter, vars.amount1In);\\r\\n            vars.amount1Out = _routerSwapFromPath(zapParams.path1, vars.amount1In, address(this), zapParams.deadline);\\r\\n        } else {\\r\\n            vars.amount1Out = zapParams.amountIn - vars.amount0In;\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Handle Liquidity Add\\r\\n         */\\r\\n        IERC20(zapParams.token0).forceApprove(address(zapParams.liquidityPath.lpRouter), vars.amount0Out);\\r\\n        IERC20(zapParams.token1).forceApprove(address(zapParams.liquidityPath.lpRouter), vars.amount1Out);\\r\\n\\r\\n        if (zapParams.liquidityPath.lpType == LPType.V2) {\\r\\n            // Add liquidity to UniswapV2 Pool\\r\\n            (vars.amount0Lp, vars.amount1Lp, vars.lpAmount) = IUniswapV2Router02(zapParams.liquidityPath.lpRouter)\\r\\n                .addLiquidity(\\r\\n                    zapParams.token0,\\r\\n                    zapParams.token1,\\r\\n                    vars.amount0Out,\\r\\n                    vars.amount1Out,\\r\\n                    zapParams.liquidityPath.amountAMin,\\r\\n                    zapParams.liquidityPath.amountBMin,\\r\\n                    zapParams.to,\\r\\n                    zapParams.deadline\\r\\n                );\\r\\n            // Possible option to check for min amount of LP tokens received\\r\\n            // require(vars.lpAmount >= zapParams.liquidityPath.lpAmount, \\\"SoulZap: Not enough LP tokens received\\\");\\r\\n        } else {\\r\\n            revert(\\\"SoulZap: lpType not supported\\\");\\r\\n        }\\r\\n\\r\\n        if (zapParams.token0 == address(WNATIVE)) {\\r\\n            // Ensure WNATIVE is called last\\r\\n            _transferOut(IERC20(zapParams.token1), vars.amount1Out - vars.amount1Lp, msg.sender, native);\\r\\n            _transferOut(IERC20(zapParams.token0), vars.amount0Out - vars.amount0Lp, msg.sender, native);\\r\\n        } else {\\r\\n            _transferOut(IERC20(zapParams.token0), vars.amount0Out - vars.amount0Lp, msg.sender, native);\\r\\n            _transferOut(IERC20(zapParams.token1), vars.amount1Out - vars.amount1Lp, msg.sender, native);\\r\\n        }\\r\\n\\r\\n        /**\\r\\n         * Remove approval\\r\\n         */\\r\\n        IERC20(zapParams.token0).forceApprove(address(zapParams.liquidityPath.lpRouter), 0);\\r\\n        IERC20(zapParams.token1).forceApprove(address(zapParams.liquidityPath.lpRouter), 0);\\r\\n\\r\\n        emit Zap(zapParams);\\r\\n    }\\r\\n\\r\\n    function _routerSwapFromPath(\\r\\n        SwapPath memory _uniSwapPath,\\r\\n        uint256 _amountIn,\\r\\n        address _to,\\r\\n        uint256 _deadline\\r\\n    ) private returns (uint256 amountOut) {\\r\\n        require(isRouterWhitelisted(_uniSwapPath.swapRouter), \\\"SoulZap: router not whitelisted\\\");\\r\\n        require(_uniSwapPath.path.length >= 2, \\\"SoulZap: need path0 of >=2\\\");\\r\\n\\r\\n        address outputToken = _uniSwapPath.path[_uniSwapPath.path.length - 1];\\r\\n        uint256 balanceBefore = _getBalance(IERC20(outputToken), _to);\\r\\n        // Swap based on swap type\\r\\n        if (_uniSwapPath.swapType == SwapType.V2) {\\r\\n            IUniswapV2Router02(_uniSwapPath.swapRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                _amountIn,\\r\\n                _uniSwapPath.amountOutMin,\\r\\n                _uniSwapPath.path,\\r\\n                _to,\\r\\n                _deadline\\r\\n            );\\r\\n        } else {\\r\\n            revert(\\\"SoulZap: SwapType not supported\\\");\\r\\n        }\\r\\n        // Return the balance increase of the output token sent to _to\\r\\n        amountOut = _getBalance(IERC20(outputToken), _to) - balanceBefore;\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Fee functions\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given token is a valid fee token.\\r\\n     * @dev Calls the soulFeeManager's isFeeToken function to determine if the token is used for fees.\\r\\n     * @param _token The address of the token to check.\\r\\n     * @return valid True if the token is a valid fee token, false otherwise.\\r\\n     */\\r\\n    function isFeeToken(address _token) external view returns (bool valid) {\\r\\n        return soulFeeManager.isFeeToken(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the current fee information for a given epoch volume.\\r\\n     * @dev Calls the soulFeeManager's getFeeInfo function with the current epoch volume to get fee details.\\r\\n     * @return feeTokens An array of addresses representing the fee tokens.\\r\\n     * @return currentFeePercentage The current fee percentage for the epoch.\\r\\n     * @return feeDenominator The denominator used to calculate the fee percentage.\\r\\n     * @return feeCollector The address of the fee collector.\\r\\n     */\\r\\n    function getFeeInfo()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory feeTokens, uint256 currentFeePercentage, uint256 feeDenominator, address feeCollector)\\r\\n    {\\r\\n        (feeTokens, currentFeePercentage, feeDenominator, feeCollector) = soulFeeManager.getFeeInfo(getEpochVolume());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Handles the protocol fee calculation and transfer.\\r\\n     * @dev This function calculates the protocol fee based on the input amount and the current epoch volume.\\r\\n     * If the protocol fee is not zero, it checks if the output token from the fee swap path is a valid fee token.\\r\\n     * If the fee swap path length is greater than or equal to 2, it approves the input token for the swap router\\r\\n     *   and performs a router swap.\\r\\n     * If the fee swap path length is less than 2, it transfers out the input token to the fee collector.\\r\\n     * The function also accumulates the volume based on the output of the swap or the input fee amount.\\r\\n     * @param _inputToken The input token for which the fee is to be calculated.\\r\\n     * @param _inputAmount The amount of the input token.\\r\\n     * @param _feeSwapPath The swap path for the fee.\\r\\n     * @param _deadline The deadline for the swap to occur.\\r\\n     * @return inputFeeAmount The calculated fee amount.\\r\\n     */\\r\\n    function _handleFee(\\r\\n        IERC20 _inputToken,\\r\\n        uint256 _inputAmount,\\r\\n        SwapPath memory _feeSwapPath,\\r\\n        uint256 _deadline\\r\\n    ) private returns (uint256 inputFeeAmount) {\\r\\n        (, uint256 feePercentage, uint256 feeDenominator, address feeCollector) = getFeeInfo();\\r\\n        if (feePercentage == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        inputFeeAmount = (_inputAmount * feePercentage) / feeDenominator;\\r\\n\\r\\n        if (_feeSwapPath.path.length >= 2) {\\r\\n            require(address(_inputToken) == _feeSwapPath.path[0], \\\"SoulZap: Invalid input token in feeSwapPath\\\");\\r\\n            address outputToken = _feeSwapPath.path[_feeSwapPath.path.length - 1];\\r\\n            require(soulFeeManager.isFeeToken(outputToken), \\\"SoulZap: Invalid output token in feeSwapPath\\\");\\r\\n\\r\\n            _inputToken.forceApprove(_feeSwapPath.swapRouter, inputFeeAmount);\\r\\n            uint256 amountOut = _routerSwapFromPath(_feeSwapPath, inputFeeAmount, feeCollector, _deadline);\\r\\n            // Accumulate normalized fee volume\\r\\n            _accumulateFeeVolume(TokenHelper.normalizeTokenAmount(outputToken, amountOut));\\r\\n        } else {\\r\\n            /// @dev Input token is considered fee token or a token with no output route\\r\\n            /// In order to not create a denial of service, we take any input token in this case.\\r\\n            _transferOut(_inputToken, inputFeeAmount, feeCollector, false);\\r\\n            // Only increase fee volume if input token is a fee token\\r\\n            if (soulFeeManager.isFeeToken(address(_inputToken))) {\\r\\n                // Accumulate normalized fee volume\\r\\n                _accumulateFeeVolume(TokenHelper.normalizeTokenAmount(address(_inputToken), inputFeeAmount));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\nlibrary Constants {\\r\\n    address public constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n    // TODO: Consider upping to 1e18;\\r\\n    uint256 internal constant DENOMINATOR = 10_000;\\r\\n    uint256 internal constant PRECISION = 1e18;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/EpochVolumeTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\nimport {IEpochVolumeTracker} from \\\"./IEpochVolumeTracker.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EpochVolumeTracker\\r\\n * @dev This contract is used to track the volume of epochs.\\r\\n * @author Soul Solidity - Contact for mainnet licensing until 730 days after first deployment transaction with matching bytecode.\\r\\n * Otherwise feel free to experiment locally or on testnets.\\r\\n */\\r\\ncontract EpochVolumeTracker is IEpochVolumeTracker {\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Storage variables\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    uint256 private _EPOCH_DURATION = 28 days;\\r\\n    /// @dev Setting to 1 to reduce gas costs\\r\\n    uint256 private _lifetimeCumulativeVolume = 1;\\r\\n    uint256 private _epochStartCumulativeVolume = 1;\\r\\n    uint256 private _lastEpochStartTime;\\r\\n    uint256 private _initialEpochStartTime;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Constructor\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    constructor(uint256 __lastEpochStartTime, uint256 _epochDuration) {\\r\\n        if (__lastEpochStartTime == 0) {\\r\\n            /// @dev Default current epoch start time is current block timestamp\\r\\n            _lastEpochStartTime = block.timestamp;\\r\\n        } else {\\r\\n            /// @dev Can set the current epoch start time to a past time or future for integration flexibility\\r\\n            // If epoch start time is too far in the past past, then the epoch will start immediately\\r\\n            // IF epoch start time is in the future, then the epoch will not start until the epoch start time\\r\\n            _lastEpochStartTime = __lastEpochStartTime;\\r\\n        }\\r\\n\\r\\n        _initialEpochStartTime = __lastEpochStartTime;\\r\\n\\r\\n        if (_epochDuration == 0) {\\r\\n            /// @dev Default epoch duration is 28 days\\r\\n            _EPOCH_DURATION = 28 days;\\r\\n        } else {\\r\\n            _EPOCH_DURATION = _epochDuration;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Epoch functions\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves the volume information for the current epoch.\\r\\n     * @dev This function returns the lifetime cumulative volume, the cumulative volume at the start of the epoch,\\r\\n     * the start time of the last epoch, the time left in the current epoch, and the duration of an epoch.\\r\\n     * @return epochVolume The volume of the current epoch.\\r\\n     * @return lifetimeCumulativeVolume The total volume accumulated since the contract's inception.\\r\\n     * @return epochStartCumulativeVolume The total volume accumulated at the start of the current epoch.\\r\\n     * @return lastEpochStartTime The start time of the last epoch.\\r\\n     * @return timeLeftInEpoch The remaining time in the current epoch.\\r\\n     * @return epochDuration The duration of an epoch.\\r\\n     */\\r\\n    function getEpochVolumeInfo()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            uint256 epochVolume,\\r\\n            uint256 lifetimeCumulativeVolume,\\r\\n            uint256 epochStartCumulativeVolume,\\r\\n            uint256 lastEpochStartTime,\\r\\n            uint256 timeLeftInEpoch,\\r\\n            uint256 epochDuration\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            getEpochVolume(),\\r\\n            _lifetimeCumulativeVolume,\\r\\n            _epochStartCumulativeVolume,\\r\\n            _lastEpochStartTime,\\r\\n            getTimeLeftInEpoch(),\\r\\n            _EPOCH_DURATION\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the volume of the current epoch\\r\\n    /// @return The volume of the current epoch\\r\\n    function getEpochVolume() public view override returns (uint256) {\\r\\n        if (_epochNeedsReset()) {\\r\\n            return 0;\\r\\n        }\\r\\n        return _lifetimeCumulativeVolume - _epochStartCumulativeVolume;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns the \\\"virtual\\\" time left in the current epoch\\r\\n    /// @return The \\\"virtual\\\" time left in the current epoch\\r\\n    function getTimeLeftInEpoch() public view override returns (uint256) {\\r\\n        if (block.timestamp < _initialEpochStartTime) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 timeSinceInitialEpochStart = block.timestamp - _initialEpochStartTime;\\r\\n        uint256 timeElapsedInCurrentEpoch = timeSinceInitialEpochStart % _EPOCH_DURATION;\\r\\n        return _EPOCH_DURATION - timeElapsedInCurrentEpoch;\\r\\n    }\\r\\n\\r\\n    /// @dev Resets the epoch based on the \\\"virtual\\\" time left in the current epoch\\r\\n    function _resetEpoch() internal {\\r\\n        // Update epoch start cumulative volume to lifetime cumulative volume\\r\\n        _epochStartCumulativeVolume = _lifetimeCumulativeVolume;\\r\\n        // Update current epoch start time based on the \\\"virtual\\\" time left in the current epoch\\r\\n        _lastEpochStartTime = block.timestamp - ((block.timestamp - _initialEpochStartTime) % _EPOCH_DURATION);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if the current epoch is over\\r\\n    /// @return True if the current epoch is over, false otherwise\\r\\n    function _epochNeedsReset() private view returns (bool) {\\r\\n        return block.timestamp >= _lastEpochStartTime + _EPOCH_DURATION;\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Volume functions\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /// @dev Accumulates volume and updates epoch start time if current epoch is over.\\r\\n    /// @param _volume The volume to be accumulated. Intended to be normalized to 18 decimals\\r\\n    function _accumulateFeeVolume(uint256 _volume) internal {\\r\\n        // Epoch start time in future, do not accumulate volume until epoch starts.\\r\\n        // Allows for setting epoch start time to a future time for configuration flexibility.\\r\\n        if (block.timestamp < _initialEpochStartTime) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (_epochNeedsReset()) {\\r\\n            _resetEpoch();\\r\\n        }\\r\\n\\r\\n        // Add the volume to lifetime cumulative volume\\r\\n        _lifetimeCumulativeVolume += _volume;\\r\\n        emit AccumulateVolume(_volume, _lifetimeCumulativeVolume, _epochStartCumulativeVolume, _lastEpochStartTime);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/IEpochVolumeTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/*\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\n\\n * Twitter: https://twitter.com/SoulSolidity\\n *  GitHub: https://github.com/SoulSolidity\\n *     Web: https://SoulSolidity.com\\n */\\n\\ninterface IEpochVolumeTracker {\\n    /// -----------------------------------------------------------------------\\n    /// Events\\n    /// -----------------------------------------------------------------------\\n\\n    event AccumulateVolume(\\n        uint256 volumeAccumulated,\\n        uint256 lifetimeCumulativeVolume,\\n        uint256 epochStartCumulativeVolume,\\n        uint256 currentEpochStartTime\\n    );\\n\\n    /// -----------------------------------------------------------------------\\n    /// Public/External functions\\n    /// -----------------------------------------------------------------------\\n\\n    function getEpochVolume() external view returns (uint256);\\n\\n    function getTimeLeftInEpoch() external view returns (uint256);\\n\\n    function getEpochVolumeInfo()\\n        external\\n        view\\n        returns (\\n            uint256 epochVolume,\\n            uint256 lifetimeCumulativeVolume,\\n            uint256 epochStartCumulativeVolume,\\n            uint256 lastEpochStartTime,\\n            uint256 timeLeftInEpoch,\\n            uint256 epochDuration\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/utils/ITransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/*\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\n\\n * Twitter: https://twitter.com/SoulSolidity\\n *  GitHub: https://github.com/SoulSolidity\\n *     Web: https://SoulSolidity.com\\n */\\n\\nimport {IWETH} from \\\"../lib/IWETH.sol\\\";\\n\\ninterface ITransferHelper {\\n    /// -----------------------------------------------------------------------\\n    /// Storage variables\\n    /// -----------------------------------------------------------------------\\n    function WNATIVE() external view returns (IWETH);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/LocalVarsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary LocalVarsLib {\\n    struct LocalVars {\\n        uint256 amount0In;\\n        uint256 amount1In;\\n        uint256 amount0Out;\\n        uint256 amount1Out;\\n        uint256 amount0Lp;\\n        uint256 amount1Lp;\\n        uint256 lpAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Sweeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nimport {SoulAccessManaged} from \\\"../access/SoulAccessManaged.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Sweep any ERC20 token.\\r\\n * Sometimes people accidentally send tokens to a contract without any way to retrieve them.\\r\\n * This contract makes sure any erc20 tokens can be removed from the contract.\\r\\n */\\r\\nabstract contract Sweeper is SoulAccessManaged {\\r\\n    bytes32 private immutable sweeperAdminRole;\\r\\n\\r\\n    struct NFT {\\r\\n        IERC721 nftAddress;\\r\\n        uint256[] ids;\\r\\n    }\\r\\n    mapping(address => bool) public lockedTokens;\\r\\n    bool public allowNativeSweep;\\r\\n\\r\\n    event SweepWithdrawToken(address indexed receiver, IERC20 indexed token, uint256 balance);\\r\\n\\r\\n    event SweepWithdrawNFTs(address indexed receiver, NFT[] indexed nfts);\\r\\n\\r\\n    event SweepWithdrawNative(address indexed receiver, uint256 balance);\\r\\n\\r\\n    constructor(address[] memory _lockedTokens, bool _allowNativeSweep, bytes32 _sweeperAdminRole) {\\r\\n        _lockTokens(_lockedTokens);\\r\\n        allowNativeSweep = _allowNativeSweep;\\r\\n        sweeperAdminRole = _sweeperAdminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers erc20 tokens to owner\\r\\n     * Only owner of contract can call this function\\r\\n     */\\r\\n    function sweepTokens(IERC20[] memory tokens, address to) external onlyAccessRegistryRole(sweeperAdminRole) {\\r\\n        NFT[] memory empty;\\r\\n        sweepTokensAndNFTs(tokens, empty, to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers NFT to owner\\r\\n     * Only owner of contract can call this function\\r\\n     */\\r\\n    function sweepNFTs(NFT[] memory nfts, address to) external onlyAccessRegistryRole(sweeperAdminRole) {\\r\\n        IERC20[] memory empty;\\r\\n        sweepTokensAndNFTs(empty, nfts, to);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ERC20 and NFT to owner\\r\\n     * Only owner of contract can call this function\\r\\n     */\\r\\n    function sweepTokensAndNFTs(\\r\\n        IERC20[] memory tokens,\\r\\n        NFT[] memory nfts,\\r\\n        address to\\r\\n    ) public onlyAccessRegistryRole(sweeperAdminRole) {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            IERC20 token = tokens[i];\\r\\n            require(!lockedTokens[address(token)], \\\"Tokens can't be swept\\\");\\r\\n            uint256 balance = token.balanceOf(address(this));\\r\\n            token.transfer(to, balance);\\r\\n            emit SweepWithdrawToken(to, token, balance);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < nfts.length; i++) {\\r\\n            IERC721 nftAddress = nfts[i].nftAddress;\\r\\n            require(!lockedTokens[address(nftAddress)], \\\"Tokens can't be swept\\\");\\r\\n            uint256[] memory ids = nfts[i].ids;\\r\\n            for (uint256 j = 0; j < ids.length; j++) {\\r\\n                nftAddress.safeTransferFrom(address(this), to, ids[j]);\\r\\n            }\\r\\n        }\\r\\n        emit SweepWithdrawNFTs(to, nfts);\\r\\n    }\\r\\n\\r\\n    /// @notice Sweep native coin\\r\\n    /// @param _to address the native coins should be transferred to\\r\\n    function sweepNative(address payable _to) external onlyAccessRegistryRole(sweeperAdminRole) {\\r\\n        require(allowNativeSweep, \\\"Not allowed\\\");\\r\\n        uint256 balance = address(this).balance;\\r\\n        _to.transfer(balance);\\r\\n        emit SweepWithdrawNative(_to, balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Refuse native sweep.\\r\\n     * Once refused can't be allowed again\\r\\n     */\\r\\n    function refuseNativeSweep() external onlyAccessRegistryRole(sweeperAdminRole) {\\r\\n        allowNativeSweep = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Lock single token so they can't be transferred from the contract.\\r\\n     * Once locked it can't be unlocked\\r\\n     */\\r\\n    function lockToken(address token) external onlyAccessRegistryRole(sweeperAdminRole) {\\r\\n        address[] memory tokenArray = new address[](1);\\r\\n        tokenArray[0] = token;\\r\\n        _lockTokens(tokenArray);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Lock multiple tokens so they can't be transferred from the contract.\\r\\n     * Once locked it can't be unlocked\\r\\n     */\\r\\n    function lockTokens(address[] memory tokens) external onlyAccessRegistryRole(sweeperAdminRole) {\\r\\n        _lockTokens(tokens);\\r\\n    }\\r\\n\\r\\n    function _lockTokens(address[] memory tokens) private {\\r\\n        for (uint256 i = 0; i < tokens.length; i++) {\\r\\n            lockedTokens[tokens[i]] = true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/TokenHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nlibrary TokenHelper {\\r\\n    /**\\r\\n     * @notice Retrieves the number of decimal places used by a given token.\\r\\n     * @dev If the token supports the IERC20Metadata interface, it will return the token's decimals.\\r\\n     * If the token does not support the interface, it will default to 18 decimals.\\r\\n     * @param token The address of the token for which to retrieve the decimal places.\\r\\n     * @return decimals The number of decimal places used by the token.\\r\\n     */\\r\\n    function getTokenDecimals(address token) internal view returns (uint8 decimals) {\\r\\n        try IERC20Metadata(token).decimals() returns (uint8 dec) {\\r\\n            decimals = dec;\\r\\n        } catch {\\r\\n            decimals = 18;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Normalizes the amount of tokens to a standard 18 decimal format.\\r\\n     * @dev This function adjusts the amount of tokens to a normalized 18 decimal format,\\r\\n     *      taking into account the number of decimal places the token uses.\\r\\n     * @param token The address of the ERC20 token for which to normalize the amount.\\r\\n     * @param amount The original amount of tokens to be normalized.\\r\\n     * @return The adjusted amount of tokens, normalized to 18 decimal places.\\r\\n     */\\r\\n    function normalizeTokenAmount(address token, uint256 amount) internal view returns (uint256) {\\r\\n        return normalizeAmountByDecimals(amount, getTokenDecimals(token));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adjusts the amount of tokens to a normalized 18 decimal format.\\r\\n     * @dev Tokens with less than 18 decimals will loose precision to 18 decimals.\\r\\n     * @param amount The original amount of tokens with `decimals` decimal places.\\r\\n     * @param decimals The number of decimal places the token uses.\\r\\n     * @return The adjusted amount of tokens, normalized to 18 decimal places.\\r\\n     */\\r\\n    function normalizeAmountByDecimals(uint256 amount, uint8 decimals) internal pure returns (uint256) {\\r\\n        // If the token has more than 18 decimals, we divide the amount to normalize to 18 decimals.\\r\\n        if (decimals > 18) {\\r\\n            // Dividing by 10 ** (decimals - 18) to reduce the number of decimals.\\r\\n            return amount / 10 ** (decimals - 18);\\r\\n        } else if (decimals < 18) {\\r\\n            // Multiplying by 10 ** (18 - decimals) to increase the number of decimals.\\r\\n            return amount * 10 ** (18 - decimals);\\r\\n        } else {\\r\\n            // If the token already has 18 decimals, return the amount unchanged.\\r\\n            return amount;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/*\\r\\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557     \u2003\u2003 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\\r\\n\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003\u255a\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551    \u255a\u2588\u2588\u2588\u2588\u2554\u255d \\r\\n \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551     \u2003\u2003 \u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551     \u255a\u2588\u2588\u2554\u255d  \\r\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551      \u2588\u2588\u2551   \\r\\n\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d      \u255a\u2550\u255d   \\r\\n\\r\\n * Twitter: https://twitter.com/SoulSolidity\\r\\n *  GitHub: https://github.com/SoulSolidity\\r\\n *     Web: https://SoulSolidity.com\\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {ITransferHelper} from \\\"../utils/ITransferHelper.sol\\\";\\r\\nimport {IWETH} from \\\"../lib/IWETH.sol\\\";\\r\\n\\r\\ncontract TransferHelper is ITransferHelper {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Storage variables\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    IWETH public immutable WNATIVE;\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Constructor\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    constructor(IWETH wnative) {\\r\\n        WNATIVE = wnative;\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// Wrapped Native helpers\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /// @notice Wrap the msg.value into the Wrapped Native token\\r\\n    /// @return wNative The IERC20 representation of the wrapped asset\\r\\n    /// @return amount Amount of native tokens wrapped\\r\\n    function _wrapNative() internal returns (IERC20 wNative, uint256 amount) {\\r\\n        wNative = IERC20(address(WNATIVE));\\r\\n        amount = msg.value;\\r\\n        WNATIVE.deposit{value: amount}();\\r\\n    }\\r\\n\\r\\n    /// @notice Unwrap current balance of Wrapped Native tokens\\r\\n    /// @return amount Amount of native tokens unwrapped\\r\\n    function _unwrapNative() internal returns (uint256 amount) {\\r\\n        amount = _getBalance(IERC20(address(WNATIVE)));\\r\\n        IWETH(WNATIVE).withdraw(amount);\\r\\n    }\\r\\n\\r\\n    /// -----------------------------------------------------------------------\\r\\n    /// ERC20 transfer helpers (supporting fee on transfer)\\r\\n    /// - Also `_transferOut` WNative unwrap support.\\r\\n    /// -----------------------------------------------------------------------\\r\\n\\r\\n    /// @notice Transfers in ERC20 tokens from the sender to this contract\\r\\n    /// @param token The ERC20 token to transfer\\r\\n    /// @param amount The amount of tokens to transfer\\r\\n    /// @return amountIn The actual amount of tokens transferred\\r\\n\\r\\n    function _transferIn(IERC20 token, uint256 amount) internal returns (uint256 amountIn) {\\r\\n        if (amount == 0) return 0;\\r\\n        uint256 balanceBefore = _getBalance(token);\\r\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        amountIn = _getBalance(token) - balanceBefore;\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers out ERC20 tokens from this contract to a recipient\\r\\n    /// @param token The ERC20 token to transfer\\r\\n    /// @param amount The amount of tokens to transfer\\r\\n    /// @param to The recipient of the tokens\\r\\n    /// @param native Whether to unwrap Wrapped Native tokens before transfer\\r\\n    function _transferOut(IERC20 token, uint256 amount, address to, bool native) internal {\\r\\n        if (amount == 0) return;\\r\\n        if (address(token) == address(WNATIVE) && native) {\\r\\n            IWETH(WNATIVE).withdraw(amount);\\r\\n            // 2600 COLD_ACCOUNT_ACCESS_COST plus 2300 transfer gas - 1\\r\\n            // Intended to support transfers to contracts, but not allow for further code execution\\r\\n            (bool success, ) = to.call{value: amount, gas: 4899}(\\\"\\\");\\r\\n            require(success, \\\"native transfer error\\\");\\r\\n        } else {\\r\\n            token.safeTransfer(to, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the balance of an ERC20 token in this contract\\r\\n    /// @param token The ERC20 token to check the balance of\\r\\n    /// @return balance The balance of the tokens in this contract\\r\\n    function _getBalance(IERC20 token) internal view returns (uint256 balance) {\\r\\n        balance = token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the balance of an ERC20 token in this contract\\r\\n    /// @param token The ERC20 token to check the balance of\\r\\n    /// @param token The address to check the balance of\\r\\n    /// @return balance The balance of the tokens in this contract\\r\\n    function _getBalance(IERC20 token, address _address) internal view returns (uint256 balance) {\\r\\n        balance = token.balanceOf(_address);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_wnative\",\"type\":\"address\"},{\"internalType\":\"contract ISoulFeeManager\",\"name\":\"_soulFeeManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochStartTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SoulAccessUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volumeAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lifetimeCumulativeVolume\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochStartCumulativeVolume\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentEpochStartTime\",\"type\":\"uint256\"}],\"name\":\"AccumulateVolume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondNft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"BondNftWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"RouterWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISoulZap_UniV2.SwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"indexed\":true,\"internalType\":\"struct Sweeper.NFT[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"}],\"name\":\"SweepWithdrawNFTs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"SweepWithdrawNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"SweepWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISoulZap_UniV2.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"}],\"name\":\"Zap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISoulZap_UniV2.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"contract ICustomBillRefillable\",\"name\":\"bond\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"ZapBond\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SOUL_ZAP_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOUL_ZAP_PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowNativeSweep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochVolumeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"epochVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifetimeCumulativeVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochStartCumulativeVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEpochStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLeftInEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"feeTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"currentFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeLeftInEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getWhitelistedBondNftAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedBondNftCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getWhitelistedRouterAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedRouterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICustomBillRefillable\",\"name\":\"_bond\",\"type\":\"address\"}],\"name\":\"isBondNftWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isFeeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"isRouterWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refuseNativeSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondNft\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setBondNftWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setRouterWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulAccessRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulFeeManager\",\"outputs\":[{\"internalType\":\"contract ISoulFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"feeSwapPath\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Sweeper.NFT[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sweepNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"contract IERC721\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Sweeper.NFT[]\",\"name\":\"nfts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweepTokensAndNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"feeSwapPath\",\"type\":\"tuple\"}],\"name\":\"zap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"path1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.LPType\",\"name\":\"lpType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.LiquidityPath\",\"name\":\"liquidityPath\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.ZapParams\",\"name\":\"zapParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"enum ISoulZap_UniV2.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ISoulZap_UniV2.SwapPath\",\"name\":\"feeSwapPath\",\"type\":\"tuple\"},{\"internalType\":\"contract ICustomBillRefillable\",\"name\":\"bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"zapBond\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SoulZap_UniV2_Extended_V1", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000002433594ac4736de4898e6cd1df74e1d301132b1c000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000835b3a6186a34e9e4bfc913d6532f4f67074ea990000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}