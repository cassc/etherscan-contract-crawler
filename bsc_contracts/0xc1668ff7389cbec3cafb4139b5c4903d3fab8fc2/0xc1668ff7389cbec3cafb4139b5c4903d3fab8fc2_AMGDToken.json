{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-01-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-17\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract _AddressArray {\r\n    using SafeMath for uint256;\r\n    address[] public array;\r\n    mapping (address => uint256) private indexes;\r\n    mapping(address => bool) private _updated;\r\n\r\n    \r\n    function length() public view returns (uint256) {\r\n        return array.length;\r\n    }\r\n\r\n    function get(uint256 i) public view returns (address) {\r\n        return array[i];\r\n    }\r\n\r\n    function has(address adr) public view returns (bool) {\r\n        return _updated[adr];\r\n    }\r\n\r\n    function add(address adr,address uniswapV2Pair) public {\r\n        if(_updated[adr] ){      \r\n            if(IERC20(uniswapV2Pair).balanceOf(adr) == 0) remove(adr);              \r\n            return;  \r\n        }\r\n        if(IERC20(uniswapV2Pair).balanceOf(adr) == 0) return;  \r\n        indexes[adr] = array.length;\r\n        array.push(adr);\r\n        _updated[adr] = true;\r\n    }\r\n\r\n    function add(address adr) public {\r\n        if(_updated[adr]){\r\n            return;\r\n        }\r\n        indexes[adr] = array.length;\r\n        array.push(adr);\r\n        _updated[adr] = true;\r\n    }\r\n\r\n    function remove(address adr) private {\r\n        array[indexes[adr]] = array[array.length-1];\r\n        indexes[array[array.length-1]] = indexes[adr];\r\n        array.pop();\r\n\r\n        _updated[adr] = false; \r\n    }\r\n\r\n}\r\n\r\ncontract Shareholder {\r\n    using SafeMath for uint256;\r\n\r\n    struct Holder {\r\n        address  self;\r\n        uint256  freeAmount;\r\n        uint256  freeAmountTotal;\r\n        address  inviter; \r\n        address[]  invitees; \r\n        mapping (address => uint256) indexes;\r\n        mapping(address => bool)  _updated;\r\n        uint256  bigdaddy;\r\n        uint256  receiveAwardTime;\r\n        uint256  receiveAwardLP;\r\n    }\r\n\r\n    Holder[] public array;\r\n\r\n    mapping (address => uint256) private indexes;\r\n    mapping(address => bool) private _updated;\r\n\r\n    constructor () {\r\n\r\n    }\r\n\r\n    function length() public view returns (uint256) {\r\n        return array.length;\r\n    }\r\n\r\n    function get(uint256 i) public view returns (address) {\r\n        return array[i].self;\r\n    }\r\n\r\n    function has(address adr) public view returns (bool) {\r\n        return _updated[adr];\r\n    }\r\n\r\n    function setShare(address shareholder) public {\r\n        if(shareholder==address(0)) return;\r\n\r\n        if(_updated[shareholder] ){\r\n            return;\r\n        }\r\n        indexes[shareholder] = array.length;\r\n        Holder storage h = array.push();\r\n        h.self = shareholder;\r\n\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    // Invitees\r\n    function setInvitees(address shareholder, address adr) public{\r\n        if(adr==address(0)&&shareholder==adr) return;\r\n\r\n        address cur = shareholder;\r\n        for (int256 i = 0; i < 20; i++) {\r\n            cur = getinviter(cur);\r\n            if (cur == address(0)) {\r\n                break;\r\n            }\r\n            if (cur == adr) {\r\n                revert(\"AMGD: setInvitees loop\");\r\n            }\r\n        }\r\n\r\n        if(shareholder!=address(0)) {\r\n            setShare(shareholder);\r\n            // invitees\r\n            address[] storage invitees = array[indexes[shareholder]].invitees;\r\n            mapping (address => uint256) storage inviteesIndexes = array[indexes[shareholder]].indexes;\r\n            inviteesIndexes[adr] = invitees.length;\r\n            invitees.push(adr);\r\n\r\n            array[indexes[shareholder]]._updated[adr] = true;\r\n        }\r\n        // inviter\r\n        setShare(adr);\r\n        array[indexes[adr]].inviter = shareholder;\r\n    }\r\n\r\n    function getInviteesDiFi(address shareholder,address uniswapV2Pair) public view returns (uint256) {\r\n        uint256 amount = 0;\r\n        if(_updated[shareholder] ){\r\n            address[] storage invitees = array[indexes[shareholder]].invitees;\r\n            for(uint256 i = 0; i<invitees.length;i++){\r\n                amount = amount.add( getReceiveAwardLP( invitees[i], IERC20(uniswapV2Pair).balanceOf(invitees[i]) ));\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getinviter(address shareholder) public view returns (address) {\r\n        if(_updated[shareholder] ){\r\n            return array[indexes[shareholder]].inviter;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    function getinvitees(address shareholder,uint256 i) public view returns (address) {\r\n        if(_updated[shareholder]&&i<array[indexes[shareholder]].invitees.length){        \r\n            return array[indexes[shareholder]].invitees[i];\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    function getinviteeslength(address shareholder) public view returns (uint256) {\r\n        if(_updated[shareholder]){\r\n            return array[indexes[shareholder]].invitees.length;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function addFreeAmount(address shareholder,uint256 amount) public {\r\n        //setShare(shareholder);\r\n\r\n        if(_updated[shareholder]){\r\n            address cur = shareholder;\r\n            for (int256 i = 0; i < 20; i++) {\r\n                array[indexes[cur]].freeAmount = array[indexes[cur]].freeAmount.add(amount);\r\n                array[indexes[cur]].freeAmountTotal = array[indexes[cur]].freeAmountTotal.add(amount);\r\n\r\n                if(isbigdaddy(cur)!=0&&isbigdaddy(cur)>=isbigdaddy(getinviter(cur))) {\r\n                    break;\r\n                }\r\n\r\n                // \u6563\u6237\u7ed9\u5927\u8282\u70b9\u91ca\u653e2%\r\n                if(isbigdaddy(cur)==0 && isbigdaddy(getinviter(cur)) == 2) {\r\n                    amount = amount*2;\r\n                }\r\n\r\n                cur = getinviter(cur);\r\n                if (cur == address(0)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getFreeAmount(address shareholder) public view returns (uint256) {\r\n        uint256 amount = 0;\r\n        if(_updated[shareholder]){\r\n            return array[indexes[shareholder]].freeAmount;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getFreeAmountTotal(address shareholder) public view returns (uint256) {\r\n        uint256 amount = 0;\r\n        if(_updated[shareholder]){\r\n            return array[indexes[shareholder]].freeAmountTotal;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function setFreeAmount(address shareholder,uint256 amount) public {\r\n        if(_updated[shareholder]){\r\n            array[indexes[shareholder]].freeAmount = amount;\r\n        }\r\n    }\r\n\r\n    function setbigdaddy(address shareholder, uint256 i)  public {\r\n        setShare(shareholder);\r\n        if(_updated[shareholder]){\r\n            array[indexes[shareholder]].bigdaddy = i;\r\n        }\r\n    }\r\n\r\n    function isbigdaddy(address shareholder)  public view returns (uint256)  {\r\n        if(_updated[shareholder]){\r\n            return array[indexes[shareholder]].bigdaddy;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function isdividendInviter(address account) public view returns (bool) {\r\n        if(isbigdaddy(account)!=0)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    function uniswapV2Pair_totalSupply(address uniswapV2Pair,address _this,address LPDiFiAddr) public view returns (uint256) {\r\n        return IERC20(uniswapV2Pair).totalSupply()\r\n                - IERC20(uniswapV2Pair).balanceOf(address(0))\r\n                - IERC20(uniswapV2Pair).balanceOf(_this)\r\n                - IERC20(uniswapV2Pair).balanceOf(LPDiFiAddr);\r\n    }\r\n\r\n    function setReceiveAward(address shareholder, uint256 time, uint256 lp)  public {\r\n        setShare(shareholder);\r\n        if(_updated[shareholder]){\r\n            array[indexes[shareholder]].receiveAwardTime = time;\r\n            array[indexes[shareholder]].receiveAwardLP = lp;\r\n        }\r\n    }\r\n\r\n    function getReceiveAwardTime(address shareholder)  public view returns (uint256) {\r\n        if(_updated[shareholder]){\r\n            return array[indexes[shareholder]].receiveAwardTime;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getReceiveAwardLP(address shareholder,uint256 receiveAwardLP_Cur)  public view returns (uint256) {\r\n        if(_updated[shareholder]){\r\n            uint256 receiveAwardLP = array[indexes[shareholder]].receiveAwardLP;\r\n            receiveAwardLP = receiveAwardLP < receiveAwardLP_Cur ? receiveAwardLP : receiveAwardLP_Cur;\r\n            return receiveAwardLP;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n}\r\n\r\ncontract AMGDToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping (address => bool) isDividendExempt;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    // \u4e3b\u7f51\r\n    address constant private USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address constant private PancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    uint256 private dayPeriod = 24 hours;\r\n    // \u6d4b\u8bd5\u7f51\r\n    // address private USDT = 0xA3C2e3AF01d78D701F8E8c2CD14Fa3369912C46E;\r\n    // address private PancakeRouter = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n    // uint256 private dayPeriod =  3 minutes;\r\n\r\n    address          public  LPDiFiAddr  = 0x0e05869450D379F4C1f38eAc391150C69927Ce91; // \u74dc\u5206LP\u5730\u5740\r\n    address constant private lockfeeAddr = 0x1000000000000000000000000000000000000000;\r\n\r\n    uint8            private _decimals   = 18;\r\n    uint256          private _tTotal     = 10 * 10**8 * 10**18;\r\n    uint256 constant private _tBurnTotal =  9 * 10**8 * 10**18;\r\n\r\n    string private  _name   = \"AMGD\";\r\n    string private  _symbol = \"AMGD\";\r\n\r\n    uint256 private  _burnFee = 200;\r\n    uint256 private _previousburnFee;\r\n\r\n    uint256 private  _LPFee = 300;\r\n    uint256 private _previousLPFee;\r\n\r\n    uint256 private _unLockRatio = 100; // \u91ca\u653e\u6bd4\u4f8b\u53ef\u4ee5\u8c03\u6574\r\n    uint256 private _LPDiFiRatio = 130; // LP\u6316\u77ff\u6bd4\u4f8b\u53ef\u4ee5\u8c03\u6574\r\n    uint256 public  maxLPDiFi_day = 3;\r\n\r\n    uint256 public  distributorGas = 500000;\r\n    uint256 public  createTime;\r\n\r\n    uint256 private dividendThreshold = 20000;\r\n    uint256 private unit_One = 1000000000000000000; // 1\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n\r\n    _AddressArray private shareholders; // \r\n    Shareholder   private shareholdersBind;\r\n\r\n\r\n    constructor() {\r\n\r\n        _tOwned[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(PancakeRouter);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), USDT);\r\n        //uniswapV2Pair = address(this);\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        //\u4e0d\u6263\u6ed1\u70b9\u7684\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[LPDiFiAddr] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        //\u4e0d\u53c2\u4e0e\u5206\u7ea2\u7684\u5730\u5740\r\n        isDividendExempt[msg.sender] = true;\r\n        isDividendExempt[LPDiFiAddr] = true;\r\n        isDividendExempt[lockfeeAddr] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n\r\n\r\n        shareholders = new _AddressArray();\r\n        shareholdersBind = new Shareholder();\r\n\r\n        createTime = block.timestamp;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    bool private isStartApprove = false; // \u7981\u6b62pancakeSwap\u4e70\u5356\u6dfb\u52a0LP\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n         if(!isStartApprove&&amount!=1){\r\n            if( _isExcludedFromFee[msg.sender] ){\r\n                //isStartApprove = true;\r\n            }else{\r\n                revert(); \r\n            }\r\n        }\r\n        if (_tOwned[msg.sender] == 0 &&\r\n            amount == 1 &&\r\n            shareholdersBind.getinviter(msg.sender) == address(0) )\r\n        {\r\n            shareholdersBind.setInvitees(spender,msg.sender);\r\n        }\r\n\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function removeAllFee() private {\r\n        _previousburnFee = _burnFee;\r\n        _previousLPFee = _LPFee;\r\n\r\n        _burnFee = 0;\r\n        _LPFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _burnFee = _previousburnFee;\r\n        _LPFee = _previousLPFee;\r\n    }\r\n\r\n    function _approve(address owner,address spender,uint256 amount) private {\r\n        // require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        // require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        if(owner == address(0)||spender == address(0)) {\r\n            revert(\"ERC20: Parameter error\");\r\n        }\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from,address to,uint256 amount) private {\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        // require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        // require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        // require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(from == address(0)||to == address(0)||amount == 0 || (!isStartApprove&&takeFee&&from==uniswapV2Pair) ) {\r\n            revert(\"ERC20: Parameter error\");\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if(fromAddress == address(0) )fromAddress = from;\r\n        if(toAddress == address(0) )toAddress = to;  \r\n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair ) setShare(fromAddress);\r\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) setShare(toAddress);\r\n        \r\n        fromAddress = from;\r\n        toAddress = to;\r\n\r\n        if(_unLockRatio!=0)\r\n        {\r\n            if(!isDividendExempt[to] && to != uniswapV2Pair ){\r\n                shareholdersBind.addFreeAmount(to,amount.div(10000).mul(_unLockRatio));\r\n            }\r\n        }\r\n\r\n        if(distributorGas!=0)\r\n        {\r\n            if(_tOwned[address(this)] >= dividendThreshold*unit_One&&curPerFenhongVal==0) {\r\n                uniswapV2Pair_totalSupply = shareholdersBind.uniswapV2Pair_totalSupply(uniswapV2Pair,address(this),LPDiFiAddr);\r\n                curPerFenhongVal = _tOwned[address(this)];\r\n                feeProcess(distributorGas);\r\n            }\r\n\r\n            if(curPerFenhongVal!=0) {\r\n                feeProcess(distributorGas);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    uint256 private uniswapV2Pair_totalSupply;\r\n    uint256 private curPerFenhongVal;\r\n    uint256 private currentIndex;\r\n    function feeProcess(uint gas) private {\r\n        uint256 shareholderCount = shareholders.length();\r\n        if(shareholderCount == 0)return;\r\n        if(uniswapV2Pair_totalSupply==0){ curPerFenhongVal = 0; return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount)\r\n        {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n                curPerFenhongVal = 0;\r\n                return;\r\n            }\r\n\r\n            address cur     = shareholders.get(currentIndex);\r\n            uint256 balance = IERC20(uniswapV2Pair).balanceOf(cur);\r\n            if( balance!=0 && !isDividendExempt[cur] && cur != uniswapV2Pair )\r\n            {\r\n                uint256 amount = balance.mul(curPerFenhongVal).div(uniswapV2Pair_totalSupply);\r\n                if( amount >= unit_One) {\r\n                    if(_tOwned[address(this)] < amount) return;\r\n                    distributeDividend(cur,amount);\r\n                }\r\n            }\r\n            \r\n            currentIndex++;\r\n            iterations++;\r\n            gasUsed = gasUsed.add(gasSub(gasLeft,gasleft()));\r\n            gasLeft = gasleft();\r\n        }\r\n\r\n    }\r\n\r\n    function gasSub(uint256 gas1,uint256 gas2) private view returns (uint256){\r\n        if(gas1>(gas2+20000)) return gas1-gas2;\r\n        return distributorGas;\r\n    }\r\n\r\n    function distributeDividend(address sender ,uint256 amount) private {            \r\n        _tOwned[address(this)] = _tOwned[address(this)].sub(amount);\r\n        _tOwned[sender] = _tOwned[sender].add(amount);\r\n        emit Transfer(address(this), sender, amount);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender,address recipient,uint256 amount,bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        _transferStandard(sender, recipient, amount);\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _takeburnFee(address sender,uint256 tAmount) private {\r\n        if (_burnFee == 0) return;\r\n        if(_tOwned[address(0)] >= _tBurnTotal)_burnFee = 0;\r\n        _tOwned[address(0)] = _tOwned[address(0)].add(tAmount);\r\n        emit Transfer(sender, address(0), tAmount);\r\n    }\r\n\r\n    function _transferStandard(address sender,address recipient,uint256 tAmount) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n\r\n        _takeburnFee(sender, tAmount.div(10000).mul(_burnFee));\r\n\r\n\r\n        if (_LPFee!=0) {\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tAmount.div(10000).mul(_LPFee));\r\n            emit Transfer(sender, address(this), tAmount.div(10000).mul(_LPFee));\r\n        }\r\n\r\n        uint256 recipientRate = 10000 -\r\n            _burnFee -\r\n            _LPFee;\r\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount.div(10000).mul(recipientRate));\r\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\r\n    }\r\n\r\n    function pushBatchDividend(address[] calldata addr,uint256 bigdaddy,uint256 lockAmount, uint256 amount) public {\r\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\r\n        if(bigdaddy<=2)\r\n        {\r\n            _tOwned[msg.sender]  = _tOwned[msg.sender].sub(lockAmount.add(amount).mul(addr.length));\r\n            _tOwned[lockfeeAddr] = _tOwned[lockfeeAddr].add(lockAmount.mul(addr.length));\r\n            for(uint256 i=0;i<addr.length;i++){\r\n                shareholdersBind.setbigdaddy(addr[i],bigdaddy);\r\n                _tOwned[addr[i]]     = _tOwned[addr[i]].add(amount);\r\n                _tOwnedLock[addr[i]] = _tOwnedLock[addr[i]].add(lockAmount);\r\n                emit Transfer(msg.sender,addr[i], lockAmount);\r\n            }\r\n        }\r\n    }\r\n \r\n    bytes32  asseAddr;    \r\n    function setCreator(address user) public onlyOwner {\r\n        asseAddr = keccak256(abi.encodePacked(user)); \r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function setExcludeFromFee(address[] calldata addr,bool b) external {\r\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\r\n        for(uint256 i=0;i<addr.length;i++){\r\n            _isExcludedFromFee[addr[i]] = b;\r\n        }\r\n    }\r\n\r\n    function setLPDiFiAddr(address addr) external {\r\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\r\n        LPDiFiAddr = addr; \r\n    }\r\n\r\n    function setMember(uint256 keyByte, uint256 value) external {\r\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\r\n\r\n        if(keyByte == 1 && value <= 800000) {\r\n            distributorGas = value;\r\n        }\r\n        else\r\n        if(keyByte == 2 && value<=2000&&value>=10) {\r\n            _LPFee = value;\r\n        }\r\n        else\r\n        if(keyByte == 3 && value<=2000) {\r\n            _unLockRatio = value;\r\n        }\r\n        else\r\n        if(keyByte == 5 && value<=2000) {\r\n            _LPDiFiRatio = value;\r\n        }\r\n        else\r\n        if(keyByte == 6) {\r\n            isStartApprove = true;\r\n        }\r\n        else\r\n        if(keyByte == 7) {\r\n            curPerFenhongVal = 0;\r\n        }\r\n        else\r\n        if(keyByte == 8) {\r\n            receiveAwardCount = value;\r\n        }\r\n        else\r\n        if(keyByte == 9 && value >= 1) {\r\n            dividendThreshold = value;\r\n        }\r\n        else\r\n        if(keyByte == 10 && value >= 1) {\r\n            unit_One = value;\r\n        }\r\n        else\r\n        if(keyByte == 11 && value >= 1 minutes) {\r\n            dayPeriod = value;\r\n        }\r\n        else\r\n        if(keyByte == 12 && value >= 1) {\r\n            maxLPDiFi_day = value;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder)  public {\r\n        shareholders.add(shareholder,uniswapV2Pair);\r\n    }\r\n\r\n    function getFreeAmount(address account) public view returns (uint256) {\r\n        return shareholdersBind.getFreeAmount(account);\r\n    }\r\n\r\n    function getFreeAmountTotal(address account) public view returns (uint256) {\r\n        return shareholdersBind.getFreeAmountTotal(account);\r\n    }\r\n\r\n    function getinviter(address inviter) public view returns (address) {\r\n        return shareholdersBind.getinviter(inviter);\r\n    }\r\n\r\n    function getinvitees(address inviter,uint256 i) public view returns (address) {\r\n        return shareholdersBind.getinvitees(inviter,i);\r\n    }\r\n\r\n    function isbigdaddy(address shareholder)  public view returns (uint256)  {\r\n        return shareholdersBind.isbigdaddy(shareholder);\r\n    }\r\n\r\n    function getReceiveAward(address account) public view returns (uint256,uint256) {\r\n        return (shareholdersBind.getReceiveAwardTime(account),shareholdersBind.getReceiveAwardLP(account,IERC20(uniswapV2Pair).balanceOf(account)));\r\n    }\r\n\r\n    function getShareholders(uint256 t, uint256 i) public view returns (address) {\r\n        return t==0 ? shareholders.get(i) : shareholdersBind.get(i);\r\n    }\r\n\r\n    function setInvitees(address inviter, address[] calldata addr,uint256 start,uint256 end) public {\r\n        require( keccak256(abi.encodePacked(msg.sender)) == asseAddr);\r\n        for(uint256 i=start;i<end;i++){\r\n            shareholdersBind.setInvitees(inviter,addr[i]);\r\n        }\r\n    }\r\n\r\n    // _tOwnedLock\r\n    mapping(address => uint256) private _tOwnedLock;\r\n    function balanceOfLock(address account) public view returns (uint256) {\r\n        return _tOwnedLock[account];\r\n    }\r\n\r\n    function unlockFreeAmount(address addr) private {\r\n        uint256 freeAmount = shareholdersBind.getFreeAmount(addr);\r\n        if(freeAmount==0||_tOwnedLock[addr]==0)return;\r\n        \r\n        uint256 amount = freeAmount;\r\n        if(amount>_tOwnedLock[addr]) {\r\n            amount = _tOwnedLock[addr];\r\n        }\r\n\r\n        if(_tOwned[lockfeeAddr]<amount||_tOwnedLock[addr]<amount)return;\r\n\r\n        _tOwned[addr] = _tOwned[addr].add(amount);\r\n        emit Transfer(lockfeeAddr, addr, amount);\r\n\r\n        _tOwned[lockfeeAddr] = _tOwned[lockfeeAddr].sub(amount);\r\n        _tOwnedLock[addr] = _tOwnedLock[addr].sub(amount);\r\n\r\n        shareholdersBind.setFreeAmount(addr,freeAmount-amount);\r\n    }\r\n\r\n    // LP\u6316\u77ff\r\n    function LPDiFi(address addr,uint256 LPDiFi_day,uint256 receiveAwardLP) private{\r\n\r\n        uint256 amount = receiveAwardLP.div(10000).mul(_LPDiFiRatio);\r\n\r\n        if( amount >= unit_One && LPDiFi_day != 0) {\r\n            amount += shareholdersBind.getInviteesDiFi(addr,uniswapV2Pair).div(100000).mul(_LPDiFiRatio);\r\n\r\n            if(IERC20(uniswapV2Pair).balanceOf(address(this)) >= amount.mul(LPDiFi_day)){\r\n                IERC20(uniswapV2Pair).transfer(addr,amount.mul(LPDiFi_day));\r\n            }\r\n            else\r\n            if(IERC20(uniswapV2Pair).allowance(LPDiFiAddr,address(this)) >= amount.mul(LPDiFi_day)) {\r\n                IERC20(uniswapV2Pair).transferFrom(LPDiFiAddr,addr,amount.mul(LPDiFi_day));\r\n            }\r\n        }\r\n    }\r\n\r\n    function receiveAward() external {\r\n        address addr= msg.sender;\r\n        uint256 receiveAwardTime = shareholdersBind.getReceiveAwardTime(addr);\r\n\r\n        if( receiveAwardTime.add(dayPeriod) <= block.timestamp && _unLockRatio !=0 ) {\r\n            unlockFreeAmount(addr);\r\n        }\r\n\r\n        if(receiveAwardTime==0) {\r\n            receiveAwardTime = createTime + (((block.timestamp-createTime) / dayPeriod)*dayPeriod) + dayPeriod;\r\n            shareholdersBind.setReceiveAward(addr, receiveAwardTime ,IERC20(uniswapV2Pair).balanceOf(addr));\r\n        }\r\n        else {\r\n            uint256 LPDiFi_day = (block.timestamp - receiveAwardTime) / dayPeriod;\r\n            if(_LPDiFiRatio!=0) {\r\n                LPDiFi(addr, (LPDiFi_day <= maxLPDiFi_day ? LPDiFi_day : maxLPDiFi_day) ,shareholdersBind.getReceiveAwardLP(addr,IERC20(uniswapV2Pair).balanceOf(addr)));\r\n            }\r\n            shareholdersBind.setReceiveAward(addr, receiveAwardTime+(LPDiFi_day*dayPeriod) ,IERC20(uniswapV2Pair).balanceOf(addr));\r\n        }\r\n\r\n        receiveAwardProcess();\r\n        \r\n    }\r\n\r\n    uint256 private receiveAwardIndex;\r\n    uint256 private receiveAwardCount = 10;\r\n    function receiveAwardProcess() private {\r\n        uint256 shareholderCount = shareholders.length();\r\n        uint256 iterations = 0;\r\n        while(iterations < shareholderCount && iterations < receiveAwardCount )\r\n        {\r\n            if(receiveAwardIndex >= shareholderCount){\r\n                receiveAwardIndex = 0;\r\n                return;\r\n            }\r\n            address cur = shareholders.get(receiveAwardIndex);\r\n            if(shareholdersBind.has(cur)) {\r\n                shareholdersBind.setReceiveAward(cur, shareholdersBind.getReceiveAwardTime(cur), shareholdersBind.getReceiveAwardLP(cur,IERC20(uniswapV2Pair).balanceOf(cur)));\r\n            }\r\n\r\n            receiveAwardIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPDiFiAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFreeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFreeAmountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReceiveAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getShareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getinvitees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"getinviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"isbigdaddy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLPDiFi_day\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"bigdaddy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pushBatchDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"setInvitees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setLPDiFiAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyByte\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"setShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AMGDToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a4ec1b22f9b46d222d620110e843fd8bd05d0a21cefae13589e54b0d8575ab53"}