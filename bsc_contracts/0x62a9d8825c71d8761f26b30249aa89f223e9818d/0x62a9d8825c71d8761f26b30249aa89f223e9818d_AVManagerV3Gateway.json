{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/gateway/AVManagerV3Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport { ERC20 } from \\\"@solmate/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@solmate/utils/SafeTransferLib.sol\\\";\\n\\n// libraries\\nimport { LibTickMath } from \\\"src/libraries/LibTickMath.sol\\\";\\nimport { IWNative } from \\\"src/libraries/IWNative.sol\\\";\\n\\n// interfaces\\nimport { IAVManagerV3Gateway } from \\\"src/interfaces/IAVManagerV3Gateway.sol\\\";\\nimport { ICommonV3Pool } from \\\"src/interfaces/ICommonV3Pool.sol\\\";\\nimport { AutomatedVaultManager } from \\\"src/AutomatedVaultManager.sol\\\";\\nimport { PancakeV3Worker } from \\\"src/workers/PancakeV3Worker.sol\\\";\\n\\ncontract AVManagerV3Gateway is IAVManagerV3Gateway {\\n  using SafeTransferLib for ERC20;\\n\\n  AutomatedVaultManager public immutable vaultManager;\\n  address public immutable wNativeToken;\\n\\n  constructor(address _vaultManager, address _wNativeToken) {\\n    // sanity check\\n    AutomatedVaultManager(_vaultManager).vaultTokenImplementation();\\n    ERC20(_wNativeToken).decimals();\\n\\n    vaultManager = AutomatedVaultManager(_vaultManager);\\n    wNativeToken = _wNativeToken;\\n  }\\n\\n  function deposit(address _vaultToken, address _token, uint256 _amount, uint256 _minReceived)\\n    external\\n    returns (bytes memory _result)\\n  {\\n    if (_amount == 0) {\\n      revert AVManagerV3Gateway_InvalidInput();\\n    }\\n\\n    // pull token\\n    ERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    // approve AVManagerV3Gateway to vault manager\\n    ERC20(_token).safeApprove(address(vaultManager), _amount);\\n\\n    // build deposit params\\n    AutomatedVaultManager.TokenAmount[] memory _depositParams = _getDepositParams(_token, _amount);\\n    _result = vaultManager.deposit(msg.sender, _vaultToken, _depositParams, _minReceived);\\n  }\\n\\n  function depositETH(address _vaultToken, uint256 _minReceived) external payable returns (bytes memory _result) {\\n    if (msg.value == 0) {\\n      revert AVManagerV3Gateway_InvalidInput();\\n    }\\n    // convert native to wrap\\n    IWNative(wNativeToken).deposit{ value: msg.value }();\\n\\n    // approve AVManagerV3Gateway to vault manager\\n    ERC20(wNativeToken).safeApprove(address(vaultManager), msg.value);\\n\\n    // build deposit params\\n    AutomatedVaultManager.TokenAmount[] memory _depositParams = _getDepositParams(wNativeToken, msg.value);\\n    // deposit (check slippage inside here)\\n    _result = vaultManager.deposit(msg.sender, _vaultToken, _depositParams, _minReceived);\\n  }\\n\\n  function withdrawMinimize(\\n    address _vaultToken,\\n    uint256 _shareToWithdraw,\\n    AutomatedVaultManager.TokenAmount[] calldata _minAmountOut\\n  ) external returns (AutomatedVaultManager.TokenAmount[] memory _result) {\\n    // withdraw\\n    _result = _withdraw(_vaultToken, _shareToWithdraw, _minAmountOut);\\n    // check native\\n    uint256 _length = _result.length;\\n    for (uint256 _i; _i < _length;) {\\n      if (_result[_i].token == wNativeToken) {\\n        IWNative(wNativeToken).withdraw(_result[_i].amount);\\n        SafeTransferLib.safeTransferETH(msg.sender, _result[_i].amount);\\n      } else {\\n        ERC20(_result[_i].token).safeTransfer(msg.sender, _result[_i].amount);\\n      }\\n\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  function withdrawConvertAll(address _vaultToken, uint256 _shareToWithdraw, bool _zeroForOne, uint256 _minAmountOut)\\n    external\\n    returns (uint256 _amountOut)\\n  {\\n    // dump token0 <> token1\\n    address _worker = vaultManager.getWorker(_vaultToken);\\n    ERC20 _token0 = PancakeV3Worker(_worker).token0();\\n    ERC20 _token1 = PancakeV3Worker(_worker).token1();\\n    ICommonV3Pool _pool = PancakeV3Worker(_worker).pool();\\n\\n    AutomatedVaultManager.TokenAmount[] memory _minAmountOuts = new AutomatedVaultManager.TokenAmount[](2);\\n    _minAmountOuts[0].token = address(_token0);\\n    _minAmountOuts[0].amount = 0;\\n    _minAmountOuts[1].token = address(_token1);\\n    _minAmountOuts[1].amount = 0;\\n\\n    // withdraw\\n    _withdraw(_vaultToken, _shareToWithdraw, _minAmountOuts);\\n\\n    ERC20 _tokenOut;\\n    uint256 _amountIn;\\n    if (_zeroForOne) {\\n      _tokenOut = _token1;\\n      _amountIn = _token0.balanceOf(address(this));\\n    } else {\\n      _tokenOut = _token0;\\n      _amountIn = _token1.balanceOf(address(this));\\n    }\\n\\n    // skip swap when amount = 0\\n    if (_amountIn > 0) {\\n      _pool.swap(\\n        address(this),\\n        _zeroForOne,\\n        int256(_amountIn),\\n        _zeroForOne ? LibTickMath.MIN_SQRT_RATIO + 1 : LibTickMath.MAX_SQRT_RATIO - 1,\\n        abi.encode(address(_token0), address(_token1), _pool.fee())\\n      );\\n    }\\n\\n    _amountOut = _tokenOut.balanceOf(address(this));\\n    if (_amountOut < _minAmountOut) {\\n      revert AVManagerV3Gateway_TooLittleReceived();\\n    }\\n\\n    // check native\\n    // transfer to user\\n    if (address(_tokenOut) == wNativeToken) {\\n      IWNative(wNativeToken).withdraw(_amountOut);\\n      SafeTransferLib.safeTransferETH(msg.sender, _amountOut);\\n    } else {\\n      _tokenOut.safeTransfer(msg.sender, _amountOut);\\n    }\\n  }\\n\\n  function _getDepositParams(address _token, uint256 _amount)\\n    internal\\n    pure\\n    returns (AutomatedVaultManager.TokenAmount[] memory)\\n  {\\n    AutomatedVaultManager.TokenAmount[] memory _depositParams = new AutomatedVaultManager.TokenAmount[](1);\\n    _depositParams[0] = AutomatedVaultManager.TokenAmount({ token: _token, amount: _amount });\\n    return _depositParams;\\n  }\\n\\n  function pancakeV3SwapCallback(int256 _amount0Delta, int256 _amount1Delta, bytes calldata _data) external {\\n    (address _token0, address _token1, uint24 _fee) = abi.decode(_data, (address, address, uint24));\\n    address _pool = address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex\\\"ff\\\",\\n              0x41ff9AA7e16B8B1a8a8dc4f0eFacd93D02d071c9,\\n              keccak256(abi.encode(_token0, _token1, _fee)),\\n              bytes32(0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2)\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    if (msg.sender != _pool) {\\n      revert AVManagerV3Gateway_NotPool();\\n    }\\n\\n    if (_amount0Delta > 0) {\\n      ERC20(_token0).safeTransfer(msg.sender, uint256(_amount0Delta));\\n    } else {\\n      ERC20(_token1).safeTransfer(msg.sender, uint256(_amount1Delta));\\n    }\\n  }\\n\\n  function _withdraw(\\n    address _vaultToken,\\n    uint256 _shareToWithdraw,\\n    AutomatedVaultManager.TokenAmount[] memory _minAmountOuts\\n  ) internal returns (AutomatedVaultManager.TokenAmount[] memory _result) {\\n    // pull token\\n    ERC20(_vaultToken).safeTransferFrom(msg.sender, address(this), _shareToWithdraw);\\n    // withdraw\\n    _result = vaultManager.withdraw(_vaultToken, _shareToWithdraw, _minAmountOuts);\\n  }\\n\\n  receive() external payable { }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/LibTickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.19;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\n/// @dev Edit by Alpaca Finance to make it compatible with Solidity 0.8.19\\n/// @dev Previous code is commented out, find previous by \\\"previous:\\\" keyword\\nlibrary LibTickMath {\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n  int24 internal constant MIN_TICK = -887272;\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n  /// @dev Throws if |tick| > max tick\\n  /// @param tick The input tick for the above formula\\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n  /// at the given tick\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n    uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n    // previous: require(absTick <= uint256(MAX_TICK), \\\"T\\\");\\n    require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n    uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n    if (absTick & 0x2 != 0) {\\n      ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n    }\\n    if (absTick & 0x4 != 0) {\\n      ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n    }\\n    if (absTick & 0x8 != 0) {\\n      ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n    }\\n    if (absTick & 0x10 != 0) {\\n      ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n    }\\n    if (absTick & 0x20 != 0) {\\n      ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n    }\\n    if (absTick & 0x40 != 0) {\\n      ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n    }\\n    if (absTick & 0x80 != 0) {\\n      ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n    }\\n    if (absTick & 0x100 != 0) {\\n      ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n    }\\n    if (absTick & 0x200 != 0) {\\n      ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n    }\\n    if (absTick & 0x400 != 0) {\\n      ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n    }\\n    if (absTick & 0x800 != 0) {\\n      ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n    }\\n    if (absTick & 0x1000 != 0) {\\n      ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n    }\\n    if (absTick & 0x2000 != 0) {\\n      ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n    }\\n    if (absTick & 0x4000 != 0) {\\n      ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n    }\\n    if (absTick & 0x8000 != 0) {\\n      ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n    }\\n    if (absTick & 0x10000 != 0) {\\n      ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n    }\\n    if (absTick & 0x20000 != 0) {\\n      ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n    }\\n    if (absTick & 0x40000 != 0) {\\n      ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n    }\\n    if (absTick & 0x80000 != 0) {\\n      ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n    }\\n\\n    if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n    sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n  }\\n\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n  /// ever return.\\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n  function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n    // second inequality must be < because the price can never reach the price at the max tick\\n    require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n    uint256 r = ratio;\\n    uint256 msb = 0;\\n\\n    assembly {\\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(5, gt(r, 0xFFFFFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(4, gt(r, 0xFFFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(3, gt(r, 0xFF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(2, gt(r, 0xF))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := shl(1, gt(r, 0x3))\\n      msb := or(msb, f)\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      let f := gt(r, 0x1)\\n      msb := or(msb, f)\\n    }\\n\\n    if (msb >= 128) r = ratio >> (msb - 127);\\n    else r = ratio << (127 - msb);\\n\\n    int256 log_2 = (int256(msb) - 128) << 64;\\n\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(63, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(62, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(61, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(60, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(59, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(58, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(57, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(56, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(55, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(54, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(53, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(52, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(51, f))\\n      r := shr(f, r)\\n    }\\n    assembly {\\n      r := shr(127, mul(r, r))\\n      let f := shr(128, r)\\n      log_2 := or(log_2, shl(50, f))\\n    }\\n\\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n    tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/libraries/IWNative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\ninterface IWNative {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAVManagerV3Gateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\nimport { AutomatedVaultManager } from \\\"src/AutomatedVaultManager.sol\\\";\\n\\ninterface IAVManagerV3Gateway {\\n  error AVManagerV3Gateway_InvalidInput();\\n  error AVManagerV3Gateway_InvalidAddress();\\n  error AVManagerV3Gateway_TooLittleReceived();\\n  error AVManagerV3Gateway_NotPool();\\n\\n  function deposit(address _vaultToken, address _token, uint256 _amount, uint256 _minReceived)\\n    external\\n    returns (bytes memory _result);\\n\\n  function depositETH(address _vaultToken, uint256 _minReceived) external payable returns (bytes memory _result);\\n\\n  function withdrawMinimize(\\n    address _vaultToken,\\n    uint256 _shareToWithdraw,\\n    AutomatedVaultManager.TokenAmount[] calldata _minAmountOut\\n  ) external returns (AutomatedVaultManager.TokenAmount[] memory _result);\\n\\n  function withdrawConvertAll(address _vaultToken, uint256 _shareToWithdraw, bool _zeroForOne, uint256 _minAmountOut)\\n    external\\n    returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICommonV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICommonV3Pool {\\n  struct Slot0 {\\n    uint160 sqrtPriceX96;\\n    int24 tick;\\n    uint16 observationIndex;\\n    uint16 observationCardinality;\\n    uint16 observationCardinalityNext;\\n    uint32 feeProtocol;\\n    bool unlocked;\\n  }\\n\\n  function slot0()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtPriceX96,\\n      int24 tick,\\n      uint16 observationIndex,\\n      uint16 observationCardinality,\\n      uint16 observationCardinalityNext,\\n      uint32 feeProtocol,\\n      bool unlocked\\n    );\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function fee() external view returns (uint24);\\n\\n  function liquidity() external view returns (uint128);\\n\\n  function tickSpacing() external view returns (int24);\\n\\n  function tickBitmap(int16 index) external view returns (uint256);\\n\\n  function ticks(int24 index)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityGross,\\n      int128 liquidityNet,\\n      uint256 feeGrowthOutside0X128,\\n      uint256 feeGrowthOutside1X128,\\n      int56 tickCumulativeOutside,\\n      uint160 secondsPerLiquidityOutsideX128,\\n      uint32 secondsOutside,\\n      bool initialized\\n    );\\n\\n  function swap(\\n    address recipient,\\n    bool zeroForOne,\\n    int256 amountSpecified,\\n    uint160 sqrtPriceLimitX96,\\n    bytes calldata data\\n  ) external returns (int256 amount0, int256 amount1);\\n\\n  function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n  function feeGrowthGlobal1X128() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/AutomatedVaultManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport { ERC20 } from \\\"@solmate/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@solmate/utils/SafeTransferLib.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { ClonesUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\n\\n// contracts\\nimport { AutomatedVaultERC20 } from \\\"src/AutomatedVaultERC20.sol\\\";\\nimport { BaseOracle } from \\\"src/oracles/BaseOracle.sol\\\";\\n\\n// interfaces\\nimport { IExecutor } from \\\"src/interfaces/IExecutor.sol\\\";\\nimport { IVaultOracle } from \\\"src/interfaces/IVaultOracle.sol\\\";\\nimport { IAutomatedVaultERC20 } from \\\"src/interfaces/IAutomatedVaultERC20.sol\\\";\\n\\n// libraries\\nimport { LibShareUtil } from \\\"src/libraries/LibShareUtil.sol\\\";\\nimport { MAX_BPS } from \\\"src/libraries/Constants.sol\\\";\\n\\ncontract AutomatedVaultManager is Initializable, Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\\n  ///////////////\\n  // Libraries //\\n  ///////////////\\n  using SafeTransferLib for ERC20;\\n  using LibShareUtil for uint256;\\n\\n  ////////////\\n  // Errors //\\n  ////////////\\n  error AutomatedVaultManager_InvalidMinAmountOut();\\n  error AutomatedVaultManager_TokenMismatch();\\n  error AutomatedVaultManager_VaultNotExist(address _vaultToken);\\n  error AutomatedVaultManager_WithdrawExceedBalance();\\n  error AutomatedVaultManager_Unauthorized();\\n  error AutomatedVaultManager_TooMuchEquityLoss();\\n  error AutomatedVaultManager_TooMuchLeverage();\\n  error AutomatedVaultManager_BelowMinimumDeposit();\\n  error AutomatedVaultManager_TooLittleReceived();\\n  error AutomatedVaultManager_TokenNotAllowed();\\n  error AutomatedVaultManager_InvalidParams();\\n  error AutomatedVaultManager_ExceedCapacity();\\n  error AutomatedVaultManager_EmergencyPaused();\\n\\n  ////////////\\n  // Events //\\n  ////////////\\n  event LogOpenVault(address indexed _vaultToken, OpenVaultParams _vaultParams);\\n  event LogDeposit(\\n    address indexed _vaultToken,\\n    address indexed _user,\\n    TokenAmount[] _deposits,\\n    uint256 _shareReceived,\\n    uint256 _equityChanged\\n  );\\n  event LogWithdraw(\\n    address indexed _vaultToken,\\n    address indexed _user,\\n    uint256 _sharesWithdrawn,\\n    uint256 _withdrawFee,\\n    uint256 _equityChanged\\n  );\\n  event LogManage(address _vaultToken, bytes[] _executorParams, uint256 _equityBefore, uint256 _equityAfter);\\n  event LogSetVaultManager(address indexed _vaultToken, address _manager, bool _isOk);\\n  event LogSetAllowToken(address indexed _vaultToken, address _token, bool _isAllowed);\\n  event LogSetVaultTokenImplementation(address _prevImplementation, address _newImplementation);\\n  event LogSetToleranceBps(address _vaultToken, uint16 _toleranceBps);\\n  event LogSetMaxLeverage(address _vaultToken, uint8 _maxLeverage);\\n  event LogSetMinimumDeposit(address _vaultToken, uint32 _compressedMinimumDeposit);\\n  event LogSetManagementFeePerSec(address _vaultToken, uint32 _managementFeePerSec);\\n  event LogSetMangementFeeTreasury(address _managementFeeTreasury);\\n  event LogSetWithdrawalFeeTreasury(address _withdrawalFeeTreasury);\\n  event LogSetWithdrawalFeeBps(address _vaultToken, uint16 _withdrawalFeeBps);\\n  event LogSetCapacity(address _vaultToken, uint32 _compressedCapacity);\\n  event LogSetIsDepositPaused(address _vaultToken, bool _isPaused);\\n  event LogSetIsWithdrawPaused(address _vaultToken, bool _isPaused);\\n  event LogSetExemptWithdrawalFee(address _user, bool _isExempt);\\n\\n  /////////////\\n  // Structs //\\n  /////////////\\n  struct TokenAmount {\\n    address token;\\n    uint256 amount;\\n  }\\n\\n  struct VaultInfo {\\n    // === Slot 1 === // 160 + 32 + 32 + 8 + 16 + 8\\n    address worker;\\n    // Deposit\\n    uint32 compressedMinimumDeposit;\\n    uint32 compressedCapacity;\\n    bool isDepositPaused;\\n    // Withdraw\\n    uint16 withdrawalFeeBps;\\n    bool isWithdrawalPaused;\\n    // === Slot 2 === // 160 + 32 + 40\\n    address executor;\\n    // Management fee\\n    uint32 managementFeePerSec;\\n    uint40 lastManagementFeeCollectedAt;\\n    // === Slot 3 === // 160 + 16 + 8\\n    address vaultOracle;\\n    // Manage\\n    uint16 toleranceBps;\\n    uint8 maxLeverage;\\n  }\\n\\n  ///////////////\\n  // Constants //\\n  ///////////////\\n  uint256 constant MAX_MANAGEMENT_FEE_PER_SEC = 10e16 / uint256(365 days); // 10% per year\\n  uint256 constant MINIMUM_DEPOSIT_SCALE = 1e16; // 0.01 USD\\n  uint256 constant CAPACITY_SCALE = 1e18; // 1 USD\\n\\n  /////////////////////\\n  // State variables //\\n  /////////////////////\\n  address public vaultTokenImplementation;\\n  address public managementFeeTreasury;\\n  address public withdrawalFeeTreasury;\\n  /// @dev execution scope to tell downstream contracts (Bank, Worker, etc.)\\n  /// that current executor is acting on behalf of vault and can be trusted\\n  address public EXECUTOR_IN_SCOPE;\\n\\n  mapping(address => VaultInfo) public vaultInfos; // vault's ERC20 address => vault info\\n  mapping(address => mapping(address => bool)) public isManager; // vault's ERC20 address => manager address => is manager\\n  mapping(address => mapping(address => bool)) public allowTokens; // vault's ERC20 address => token address => is allowed\\n  mapping(address => bool) public workerExisted; // worker address => is existed\\n  mapping(address => bool) public isExemptWithdrawalFee;\\n\\n  ///////////////\\n  // Modifiers //\\n  ///////////////\\n  modifier collectManagementFee(address _vaultToken) {\\n    uint256 _lastCollectedFee = vaultInfos[_vaultToken].lastManagementFeeCollectedAt;\\n    if (block.timestamp > _lastCollectedFee) {\\n      uint256 _pendingFee = pendingManagementFee(_vaultToken);\\n      IAutomatedVaultERC20(_vaultToken).mint(managementFeeTreasury, _pendingFee);\\n      vaultInfos[_vaultToken].lastManagementFeeCollectedAt = uint40(block.timestamp);\\n    }\\n    _;\\n  }\\n\\n  modifier onlyExistedVault(address _vaultToken) {\\n    if (vaultInfos[_vaultToken].worker == address(0)) {\\n      revert AutomatedVaultManager_VaultNotExist(_vaultToken);\\n    }\\n    _;\\n  }\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _vaultTokenImplementation, address _managementFeeTreasury, address _withdrawalFeeTreasury)\\n    external\\n    initializer\\n  {\\n    if (\\n      _vaultTokenImplementation == address(0) || _managementFeeTreasury == address(0)\\n        || _withdrawalFeeTreasury == address(0)\\n    ) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n\\n    Ownable2StepUpgradeable.__Ownable2Step_init();\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n    vaultTokenImplementation = _vaultTokenImplementation;\\n    managementFeeTreasury = _managementFeeTreasury;\\n    withdrawalFeeTreasury = _withdrawalFeeTreasury;\\n  }\\n\\n  /// @notice Calculate pending management fee\\n  /// @dev Return as share amount\\n  /// @param _vaultToken an address of vault token\\n  /// @return _pendingFee an amount of share pending for minting as a form of management fee\\n  function pendingManagementFee(address _vaultToken) public view returns (uint256 _pendingFee) {\\n    uint256 _lastCollectedFee = vaultInfos[_vaultToken].lastManagementFeeCollectedAt;\\n\\n    if (block.timestamp > _lastCollectedFee) {\\n      unchecked {\\n        _pendingFee = (\\n          IAutomatedVaultERC20(_vaultToken).totalSupply() * vaultInfos[_vaultToken].managementFeePerSec\\n            * (block.timestamp - _lastCollectedFee)\\n        ) / 1e18;\\n      }\\n    }\\n  }\\n\\n  function deposit(address _depositFor, address _vaultToken, TokenAmount[] calldata _depositParams, uint256 _minReceive)\\n    external\\n    onlyExistedVault(_vaultToken)\\n    collectManagementFee(_vaultToken)\\n    nonReentrant\\n    returns (bytes memory _result)\\n  {\\n    VaultInfo memory _cachedVaultInfo = vaultInfos[_vaultToken];\\n\\n    if (_cachedVaultInfo.isDepositPaused) {\\n      revert AutomatedVaultManager_EmergencyPaused();\\n    }\\n\\n    _pullTokens(_vaultToken, _cachedVaultInfo.executor, _depositParams);\\n\\n    ///////////////////////////\\n    // Executor scope opened //\\n    ///////////////////////////\\n    EXECUTOR_IN_SCOPE = _cachedVaultInfo.executor;\\n    // Accrue interest and reinvest before execute to ensure fair interest and profit distribution\\n    IExecutor(_cachedVaultInfo.executor).onUpdate(_cachedVaultInfo.worker, _vaultToken);\\n\\n    (uint256 _totalEquityBefore,) =\\n      IVaultOracle(_cachedVaultInfo.vaultOracle).getEquityAndDebt(_vaultToken, _cachedVaultInfo.worker);\\n\\n    _result = IExecutor(_cachedVaultInfo.executor).onDeposit(_cachedVaultInfo.worker, _vaultToken);\\n    EXECUTOR_IN_SCOPE = address(0);\\n    ///////////////////////////\\n    // Executor scope closed //\\n    ///////////////////////////\\n\\n    uint256 _equityChanged;\\n    {\\n      (uint256 _totalEquityAfter, uint256 _debtAfter) =\\n        IVaultOracle(_cachedVaultInfo.vaultOracle).getEquityAndDebt(_vaultToken, _cachedVaultInfo.worker);\\n      if (_totalEquityAfter + _debtAfter > _cachedVaultInfo.compressedCapacity * CAPACITY_SCALE) {\\n        revert AutomatedVaultManager_ExceedCapacity();\\n      }\\n      _equityChanged = _totalEquityAfter - _totalEquityBefore;\\n    }\\n\\n    if (_equityChanged < _cachedVaultInfo.compressedMinimumDeposit * MINIMUM_DEPOSIT_SCALE) {\\n      revert AutomatedVaultManager_BelowMinimumDeposit();\\n    }\\n\\n    uint256 _shareReceived =\\n      _equityChanged.valueToShare(IAutomatedVaultERC20(_vaultToken).totalSupply(), _totalEquityBefore);\\n    if (_shareReceived < _minReceive) {\\n      revert AutomatedVaultManager_TooLittleReceived();\\n    }\\n    IAutomatedVaultERC20(_vaultToken).mint(_depositFor, _shareReceived);\\n\\n    emit LogDeposit(_vaultToken, _depositFor, _depositParams, _shareReceived, _equityChanged);\\n  }\\n\\n  function manage(address _vaultToken, bytes[] calldata _executorParams)\\n    external\\n    collectManagementFee(_vaultToken)\\n    nonReentrant\\n    returns (bytes[] memory _result)\\n  {\\n    // 0. Validate\\n    if (!isManager[_vaultToken][msg.sender]) {\\n      revert AutomatedVaultManager_Unauthorized();\\n    }\\n\\n    VaultInfo memory _cachedVaultInfo = vaultInfos[_vaultToken];\\n\\n    ///////////////////////////\\n    // Executor scope opened //\\n    ///////////////////////////\\n    EXECUTOR_IN_SCOPE = _cachedVaultInfo.executor;\\n    // 1. Update the vault\\n    // Accrue interest and reinvest before execute to ensure fair interest and profit distribution\\n    IExecutor(_cachedVaultInfo.executor).onUpdate(_cachedVaultInfo.worker, _vaultToken);\\n\\n    // 2. execute manage\\n    (uint256 _totalEquityBefore,) =\\n      IVaultOracle(_cachedVaultInfo.vaultOracle).getEquityAndDebt(_vaultToken, _cachedVaultInfo.worker);\\n\\n    // Set executor execution scope (worker, vault token) so that we don't have to pass them through multicall\\n    IExecutor(_cachedVaultInfo.executor).setExecutionScope(_cachedVaultInfo.worker, _vaultToken);\\n    _result = IExecutor(_cachedVaultInfo.executor).multicall(_executorParams);\\n    IExecutor(_cachedVaultInfo.executor).sweepToWorker();\\n    IExecutor(_cachedVaultInfo.executor).setExecutionScope(address(0), address(0));\\n\\n    EXECUTOR_IN_SCOPE = address(0);\\n    ///////////////////////////\\n    // Executor scope closed //\\n    ///////////////////////////\\n\\n    // 3. Check equity loss < threshold\\n    (uint256 _totalEquityAfter, uint256 _debtAfter) =\\n      IVaultOracle(_cachedVaultInfo.vaultOracle).getEquityAndDebt(_vaultToken, _cachedVaultInfo.worker);\\n\\n    // _totalEquityAfter  < _totalEquityBefore * _cachedVaultInfo.toleranceBps / MAX_BPS;\\n    if (_totalEquityAfter * MAX_BPS < _totalEquityBefore * _cachedVaultInfo.toleranceBps) {\\n      revert AutomatedVaultManager_TooMuchEquityLoss();\\n    }\\n\\n    // 4. Check leverage exceed max leverage\\n    // (debt + equity) / equity > max leverage\\n    // debt + equity = max leverage * equity\\n    // debt = (max leverage * equity) - equity\\n    // debt = (leverage - 1) * equity\\n    if (_debtAfter > (_cachedVaultInfo.maxLeverage - 1) * _totalEquityAfter) {\\n      revert AutomatedVaultManager_TooMuchLeverage();\\n    }\\n\\n    emit LogManage(_vaultToken, _executorParams, _totalEquityBefore, _totalEquityAfter);\\n  }\\n\\n  function withdraw(address _vaultToken, uint256 _sharesToWithdraw, TokenAmount[] calldata _minAmountOuts)\\n    external\\n    onlyExistedVault(_vaultToken)\\n    collectManagementFee(_vaultToken)\\n    nonReentrant\\n    returns (AutomatedVaultManager.TokenAmount[] memory _results)\\n  {\\n    VaultInfo memory _cachedVaultInfo = vaultInfos[_vaultToken];\\n\\n    if (_cachedVaultInfo.isWithdrawalPaused) {\\n      revert AutomatedVaultManager_EmergencyPaused();\\n    }\\n\\n    // Revert if withdraw shares more than balance\\n    if (_sharesToWithdraw > IAutomatedVaultERC20(_vaultToken).balanceOf(msg.sender)) {\\n      revert AutomatedVaultManager_WithdrawExceedBalance();\\n    }\\n\\n    uint256 _actualWithdrawAmount;\\n    // Safe to do unchecked because we already checked withdraw amount < balance and max bps won't overflow anyway\\n    unchecked {\\n      _actualWithdrawAmount = isExemptWithdrawalFee[msg.sender]\\n        ? _sharesToWithdraw\\n        : (_sharesToWithdraw * (MAX_BPS - _cachedVaultInfo.withdrawalFeeBps)) / MAX_BPS;\\n    }\\n\\n    ///////////////////////////\\n    // Executor scope opened //\\n    ///////////////////////////\\n    EXECUTOR_IN_SCOPE = _cachedVaultInfo.executor;\\n\\n    // Accrue interest and reinvest before execute to ensure fair interest and profit distribution\\n    IExecutor(_cachedVaultInfo.executor).onUpdate(_cachedVaultInfo.worker, _vaultToken);\\n\\n    (uint256 _totalEquityBefore,) =\\n      IVaultOracle(_cachedVaultInfo.vaultOracle).getEquityAndDebt(_vaultToken, _cachedVaultInfo.worker);\\n\\n    // Execute withdraw\\n    // Executor should send withdrawn funds back here to check slippage\\n    _results =\\n      IExecutor(_cachedVaultInfo.executor).onWithdraw(_cachedVaultInfo.worker, _vaultToken, _actualWithdrawAmount);\\n\\n    EXECUTOR_IN_SCOPE = address(0);\\n    ///////////////////////////\\n    // Executor scope closed //\\n    ///////////////////////////\\n\\n    uint256 _equityChanged;\\n    {\\n      (uint256 _totalEquityAfter,) =\\n        IVaultOracle(_cachedVaultInfo.vaultOracle).getEquityAndDebt(_vaultToken, _cachedVaultInfo.worker);\\n      _equityChanged = _totalEquityBefore - _totalEquityAfter;\\n    }\\n\\n    uint256 _withdrawalFee;\\n    // Safe to do unchecked because _actualWithdrawAmount < _sharesToWithdraw from above\\n    unchecked {\\n      _withdrawalFee = _sharesToWithdraw - _actualWithdrawAmount;\\n    }\\n\\n    // Burn shares per requested amount before transfer out\\n    IAutomatedVaultERC20(_vaultToken).burn(msg.sender, _sharesToWithdraw);\\n    // Mint withdrawal fee to withdrawal treasury\\n    if (_withdrawalFee != 0) {\\n      IAutomatedVaultERC20(_vaultToken).mint(withdrawalFeeTreasury, _withdrawalFee);\\n    }\\n    // Net shares changed would be `_actualWithdrawAmount`\\n\\n    // Transfer withdrawn funds to user\\n    // Tokens should be transferred from executor to here during `onWithdraw`\\n    {\\n      uint256 _len = _results.length;\\n      if (_minAmountOuts.length < _len) {\\n        revert AutomatedVaultManager_InvalidMinAmountOut();\\n      }\\n      address _token;\\n      uint256 _amount;\\n      for (uint256 _i; _i < _len;) {\\n        _token = _results[_i].token;\\n        _amount = _results[_i].amount;\\n\\n        // revert result token != min amount token\\n        if (_token != _minAmountOuts[_i].token) {\\n          revert AutomatedVaultManager_TokenMismatch();\\n        }\\n\\n        // Check slippage\\n        if (_amount < _minAmountOuts[_i].amount) {\\n          revert AutomatedVaultManager_TooLittleReceived();\\n        }\\n\\n        ERC20(_token).safeTransfer(msg.sender, _amount);\\n        unchecked {\\n          ++_i;\\n        }\\n      }\\n    }\\n\\n    // Assume `tx.origin` is user for tracking purpose\\n    emit LogWithdraw(_vaultToken, tx.origin, _sharesToWithdraw, _withdrawalFee, _equityChanged);\\n  }\\n\\n  /////////////////////\\n  // Admin functions //\\n  /////////////////////\\n\\n  struct OpenVaultParams {\\n    address worker;\\n    address vaultOracle;\\n    address executor;\\n    uint32 compressedMinimumDeposit;\\n    uint32 compressedCapacity;\\n    uint32 managementFeePerSec;\\n    uint16 withdrawalFeeBps;\\n    uint16 toleranceBps;\\n    uint8 maxLeverage;\\n  }\\n\\n  function openVault(string calldata _name, string calldata _symbol, OpenVaultParams calldata _params)\\n    external\\n    onlyOwner\\n    returns (address _vaultToken)\\n  {\\n    // Prevent duplicate worker between vaults\\n    if (workerExisted[_params.worker]) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n    // Validate parameters\\n    _validateToleranceBps(_params.toleranceBps);\\n    _validateMaxLeverage(_params.maxLeverage);\\n    _validateMinimumDeposit(_params.compressedMinimumDeposit);\\n    _validateManagementFeePerSec(_params.managementFeePerSec);\\n    _validateWithdrawalFeeBps(_params.withdrawalFeeBps);\\n    // Sanity check oracle\\n    BaseOracle(_params.vaultOracle).maxPriceAge();\\n    // Sanity check executor\\n    if (IExecutor(_params.executor).vaultManager() != address(this)) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n\\n    // Deploy vault token with ERC-1167 minimal proxy\\n    _vaultToken = ClonesUpgradeable.clone(vaultTokenImplementation);\\n    AutomatedVaultERC20(_vaultToken).initialize(_name, _symbol);\\n\\n    // Update states\\n    vaultInfos[_vaultToken] = VaultInfo({\\n      worker: _params.worker,\\n      vaultOracle: _params.vaultOracle,\\n      executor: _params.executor,\\n      compressedMinimumDeposit: _params.compressedMinimumDeposit,\\n      compressedCapacity: _params.compressedCapacity,\\n      isDepositPaused: false,\\n      withdrawalFeeBps: _params.withdrawalFeeBps,\\n      isWithdrawalPaused: false,\\n      managementFeePerSec: _params.managementFeePerSec,\\n      lastManagementFeeCollectedAt: uint40(block.timestamp),\\n      toleranceBps: _params.toleranceBps,\\n      maxLeverage: _params.maxLeverage\\n    });\\n    workerExisted[_params.worker] = true;\\n\\n    emit LogOpenVault(_vaultToken, _params);\\n  }\\n\\n  function setVaultTokenImplementation(address _implementation) external onlyOwner {\\n    emit LogSetVaultTokenImplementation(vaultTokenImplementation, _implementation);\\n    vaultTokenImplementation = _implementation;\\n  }\\n\\n  function setManagementFeePerSec(address _vaultToken, uint32 _managementFeePerSec)\\n    external\\n    onlyOwner\\n    onlyExistedVault(_vaultToken)\\n  {\\n    _validateManagementFeePerSec(_managementFeePerSec);\\n    vaultInfos[_vaultToken].managementFeePerSec = _managementFeePerSec;\\n\\n    emit LogSetManagementFeePerSec(_vaultToken, _managementFeePerSec);\\n  }\\n\\n  function setManagementFeeTreasury(address _managementFeeTreasury) external onlyOwner {\\n    if (_managementFeeTreasury == address(0)) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n    managementFeeTreasury = _managementFeeTreasury;\\n\\n    emit LogSetMangementFeeTreasury(_managementFeeTreasury);\\n  }\\n\\n  function setWithdrawalFeeTreasury(address _withdrawalFeeTreasury) external onlyOwner {\\n    if (_withdrawalFeeTreasury == address(0)) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n    withdrawalFeeTreasury = _withdrawalFeeTreasury;\\n    emit LogSetWithdrawalFeeTreasury(_withdrawalFeeTreasury);\\n  }\\n\\n  function setExemptWithdrawalFee(address _user, bool _isExempt) external onlyOwner {\\n    isExemptWithdrawalFee[_user] = _isExempt;\\n    emit LogSetExemptWithdrawalFee(_user, _isExempt);\\n  }\\n\\n  //////////////////////////////\\n  // Per vault config setters //\\n  //////////////////////////////\\n\\n  function setVaultManager(address _vaultToken, address _manager, bool _isOk) external onlyOwner {\\n    isManager[_vaultToken][_manager] = _isOk;\\n    emit LogSetVaultManager(_vaultToken, _manager, _isOk);\\n  }\\n\\n  function setAllowToken(address _vaultToken, address _token, bool _isAllowed)\\n    external\\n    onlyOwner\\n    onlyExistedVault(_vaultToken)\\n  {\\n    allowTokens[_vaultToken][_token] = _isAllowed;\\n\\n    emit LogSetAllowToken(_vaultToken, _token, _isAllowed);\\n  }\\n\\n  function setToleranceBps(address _vaultToken, uint16 _toleranceBps) external onlyOwner onlyExistedVault(_vaultToken) {\\n    _validateToleranceBps(_toleranceBps);\\n    vaultInfos[_vaultToken].toleranceBps = _toleranceBps;\\n\\n    emit LogSetToleranceBps(_vaultToken, _toleranceBps);\\n  }\\n\\n  function setMaxLeverage(address _vaultToken, uint8 _maxLeverage) external onlyOwner onlyExistedVault(_vaultToken) {\\n    _validateMaxLeverage(_maxLeverage);\\n    vaultInfos[_vaultToken].maxLeverage = _maxLeverage;\\n\\n    emit LogSetMaxLeverage(_vaultToken, _maxLeverage);\\n  }\\n\\n  function setMinimumDeposit(address _vaultToken, uint32 _compressedMinimumDeposit)\\n    external\\n    onlyOwner\\n    onlyExistedVault(_vaultToken)\\n  {\\n    _validateMinimumDeposit(_compressedMinimumDeposit);\\n    vaultInfos[_vaultToken].compressedMinimumDeposit = _compressedMinimumDeposit;\\n\\n    emit LogSetMinimumDeposit(_vaultToken, _compressedMinimumDeposit);\\n  }\\n\\n  function setWithdrawalFeeBps(address _vaultToken, uint16 _withdrawalFeeBps)\\n    external\\n    onlyOwner\\n    onlyExistedVault(_vaultToken)\\n  {\\n    _validateWithdrawalFeeBps(_withdrawalFeeBps);\\n    vaultInfos[_vaultToken].withdrawalFeeBps = _withdrawalFeeBps;\\n\\n    emit LogSetWithdrawalFeeBps(_vaultToken, _withdrawalFeeBps);\\n  }\\n\\n  function setCapacity(address _vaultToken, uint32 _compressedCapacity)\\n    external\\n    onlyOwner\\n    onlyExistedVault(_vaultToken)\\n  {\\n    vaultInfos[_vaultToken].compressedCapacity = _compressedCapacity;\\n    emit LogSetCapacity(_vaultToken, _compressedCapacity);\\n  }\\n\\n  function setIsDepositPaused(address[] calldata _vaultTokens, bool _isPaused) external onlyOwner {\\n    uint256 _len = _vaultTokens.length;\\n    for (uint256 _i; _i < _len;) {\\n      vaultInfos[_vaultTokens[_i]].isDepositPaused = _isPaused;\\n      emit LogSetIsDepositPaused(_vaultTokens[_i], _isPaused);\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  function setIsWithdrawPaused(address[] calldata _vaultTokens, bool _isPaused) external onlyOwner {\\n    uint256 _len = _vaultTokens.length;\\n    for (uint256 _i; _i < _len;) {\\n      vaultInfos[_vaultTokens[_i]].isWithdrawalPaused = _isPaused;\\n      emit LogSetIsWithdrawPaused(_vaultTokens[_i], _isPaused);\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  //////////////////////\\n  // Getter functions //\\n  //////////////////////\\n\\n  function getWorker(address _vaultToken) external view returns (address _worker) {\\n    _worker = vaultInfos[_vaultToken].worker;\\n  }\\n\\n  ///////////////////////\\n  // Private functions //\\n  ///////////////////////\\n\\n  function _pullTokens(address _vaultToken, address _destination, TokenAmount[] calldata _deposits) internal {\\n    uint256 _depositLength = _deposits.length;\\n    for (uint256 _i; _i < _depositLength;) {\\n      if (!allowTokens[_vaultToken][_deposits[_i].token]) {\\n        revert AutomatedVaultManager_TokenNotAllowed();\\n      }\\n      ERC20(_deposits[_i].token).safeTransferFrom(msg.sender, _destination, _deposits[_i].amount);\\n      unchecked {\\n        ++_i;\\n      }\\n    }\\n  }\\n\\n  /// @dev Valid value: withdrawalFeeBps <= 1000\\n  function _validateWithdrawalFeeBps(uint16 _withdrawalFeeBps) internal pure {\\n    if (_withdrawalFeeBps > 1000) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n  }\\n\\n  /// @dev Valid value range: 9500 <= toleranceBps <= 10000\\n  function _validateToleranceBps(uint16 _toleranceBps) internal pure {\\n    if (_toleranceBps > MAX_BPS || _toleranceBps < 9500) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n  }\\n\\n  /// @dev Valid value range: 1 <= maxLeverage <= 10\\n  function _validateMaxLeverage(uint8 _maxLeverage) internal pure {\\n    if (_maxLeverage > 10 || _maxLeverage < 1) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n  }\\n\\n  function _validateMinimumDeposit(uint32 _compressedMinimumDeposit) internal pure {\\n    if (_compressedMinimumDeposit == 0) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n  }\\n\\n  /// @dev Valid value range: 0 <= managementFeePerSec <= 10% per year\\n  function _validateManagementFeePerSec(uint32 _managementFeePerSec) internal pure {\\n    if (_managementFeePerSec > MAX_MANAGEMENT_FEE_PER_SEC) {\\n      revert AutomatedVaultManager_InvalidParams();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"src/workers/PancakeV3Worker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport { ERC20 } from \\\"@solmate/tokens/ERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"@solmate/utils/SafeTransferLib.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n// interfaces\\nimport { AutomatedVaultManager } from \\\"src/AutomatedVaultManager.sol\\\";\\nimport { IZapV3 } from \\\"src/interfaces/IZapV3.sol\\\";\\nimport { ICommonV3Pool } from \\\"src/interfaces/ICommonV3Pool.sol\\\";\\nimport { ICommonV3PositionManager } from \\\"src/interfaces/ICommonV3PositionManager.sol\\\";\\nimport { IPancakeV3Router } from \\\"src/interfaces/pancake-v3/IPancakeV3Router.sol\\\";\\nimport { IPancakeV3MasterChef } from \\\"src/interfaces/pancake-v3/IPancakeV3MasterChef.sol\\\";\\n\\n// libraries\\nimport { LibTickMath } from \\\"src/libraries/LibTickMath.sol\\\";\\nimport { MAX_BPS } from \\\"src/libraries/Constants.sol\\\";\\n\\ncontract PancakeV3Worker is Initializable, Ownable2StepUpgradeable, ReentrancyGuardUpgradeable {\\n  using SafeTransferLib for ERC20;\\n\\n  error PancakeV3Worker_Unauthorized();\\n  error PancakeV3Worker_PositionExist();\\n  error PancakeV3Worker_PositionNotExist();\\n  error PancakeV3Worker_InvalidParams();\\n\\n  ERC20 public token0;\\n  ERC20 public token1;\\n\\n  // packed slot\\n  ICommonV3Pool public pool;\\n  uint24 public poolFee;\\n  int24 public posTickLower;\\n  int24 public posTickUpper;\\n  bool public isToken0Base;\\n\\n  // packed slot\\n  address public performanceFeeBucket;\\n  uint16 public tradingPerformanceFeeBps;\\n  uint16 public rewardPerformanceFeeBps;\\n  uint40 public lastHarvest;\\n\\n  uint256 public nftTokenId;\\n\\n  IZapV3 public zapV3;\\n  ERC20 public cake;\\n  ICommonV3PositionManager public nftPositionManager;\\n  IPancakeV3Router public router;\\n  IPancakeV3MasterChef public masterChef;\\n  AutomatedVaultManager public vaultManager;\\n\\n  mapping(address => bytes) public cakeToTokenPath;\\n\\n  /// Modifier\\n  modifier onlyExecutorInScope() {\\n    if (msg.sender != vaultManager.EXECUTOR_IN_SCOPE()) {\\n      revert PancakeV3Worker_Unauthorized();\\n    }\\n    _;\\n  }\\n\\n  /// Events\\n  event LogOpenPosition(\\n    uint256 indexed _tokenId,\\n    address _caller,\\n    int24 _tickLower,\\n    int24 _tickUpper,\\n    uint256 _amount0Increased,\\n    uint256 _amount1Increased\\n  );\\n  event LogIncreasePosition(\\n    uint256 indexed _tokenId,\\n    address _caller,\\n    int24 _tickLower,\\n    int24 _tickUpper,\\n    uint256 _amount0Increased,\\n    uint256 _amount1Increased\\n  );\\n  event LogClosePosition(\\n    uint256 indexed _tokenId, address _caller, uint256 _amount0Out, uint256 _amount1Out, uint128 _liquidityOut\\n  );\\n  event LogDecreasePosition(\\n    uint256 indexed _tokenId, address _caller, uint256 _amount0Out, uint256 _amount1Out, uint128 _liquidityOut\\n  );\\n  event LogHarvest(\\n    uint256 _token0Earned,\\n    uint256 _token1Earned,\\n    uint16 _tradingPerformanceFeeBps,\\n    uint256 _cakeEarned,\\n    uint16 _rewardPerformanceFeeBps\\n  );\\n  event LogTransferToExecutor(address indexed _token, address _to, uint256 _amount);\\n  event LogSetTradingPerformanceFee(uint16 _prevTradingPerformanceFeeBps, uint16 _newTradingPerformanceFeeBps);\\n  event LogSetRewardPerformanceFee(uint16 _prevRewardPerformanceFeeBps, uint16 _newRewardPerformanceFeeBps);\\n  event LogSetPerformanceFeeBucket(address _prevPerformanceFeeBucket, address _newPerformanceFeeBucket);\\n  event LogSetCakeToTokenPath(address _toToken, bytes _path);\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  struct ConstructorParams {\\n    address vaultManager;\\n    address positionManager;\\n    address pool;\\n    bool isToken0Base;\\n    address router;\\n    address masterChef;\\n    address zapV3;\\n    address performanceFeeBucket;\\n    uint16 tradingPerformanceFeeBps;\\n    uint16 rewardPerformanceFeeBps;\\n    bytes cakeToToken0Path;\\n    bytes cakeToToken1Path;\\n  }\\n\\n  function initialize(ConstructorParams calldata _params) external initializer {\\n    Ownable2StepUpgradeable.__Ownable2Step_init();\\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n\\n    // Validate params\\n    // performance fee should not be more than 30%\\n    if (_params.tradingPerformanceFeeBps > 3000 || _params.rewardPerformanceFeeBps > 3000) {\\n      revert PancakeV3Worker_InvalidParams();\\n    }\\n    if (_params.performanceFeeBucket == address(0)) {\\n      revert PancakeV3Worker_InvalidParams();\\n    }\\n    // Sanity check\\n    AutomatedVaultManager(_params.vaultManager).vaultTokenImplementation();\\n\\n    vaultManager = AutomatedVaultManager(_params.vaultManager);\\n\\n    nftPositionManager = ICommonV3PositionManager(_params.positionManager);\\n    pool = ICommonV3Pool(_params.pool);\\n    isToken0Base = _params.isToken0Base;\\n    router = IPancakeV3Router(_params.router);\\n    masterChef = IPancakeV3MasterChef(_params.masterChef);\\n    poolFee = ICommonV3Pool(_params.pool).fee();\\n    token0 = ERC20(ICommonV3Pool(_params.pool).token0());\\n    token1 = ERC20(ICommonV3Pool(_params.pool).token1());\\n    cake = ERC20(IPancakeV3MasterChef(_params.masterChef).CAKE());\\n\\n    zapV3 = IZapV3(_params.zapV3);\\n\\n    tradingPerformanceFeeBps = _params.tradingPerformanceFeeBps;\\n    rewardPerformanceFeeBps = _params.rewardPerformanceFeeBps;\\n    performanceFeeBucket = _params.performanceFeeBucket;\\n\\n    cakeToTokenPath[address(token0)] = _params.cakeToToken0Path;\\n    cakeToTokenPath[address(token1)] = _params.cakeToToken1Path;\\n  }\\n\\n  /// @dev Can't open position for pool that doesn't have CAKE reward (masterChef pid == 0).\\n  function openPosition(int24 _tickLower, int24 _tickUpper, uint256 _amountIn0, uint256 _amountIn1)\\n    external\\n    nonReentrant\\n    onlyExecutorInScope\\n  {\\n    // Can't open position if already exist. Use `increasePosition` instead.\\n    if (nftTokenId != 0) {\\n      revert PancakeV3Worker_PositionExist();\\n    }\\n    {\\n      // Prevent open out-of-range position\\n      (, int24 _currTick,,,,,) = pool.slot0();\\n      if (_tickLower > _currTick || _currTick > _tickUpper) {\\n        revert PancakeV3Worker_InvalidParams();\\n      }\\n    }\\n\\n    // SLOAD\\n    ERC20 _token0 = token0;\\n    ERC20 _token1 = token1;\\n\\n    // Prepare optimal tokens for adding liquidity\\n    (uint256 _amount0Desired, uint256 _amount1Desired) = _prepareOptimalTokensForIncrease(\\n      address(_token0), address(_token1), _tickLower, _tickUpper, _amountIn0, _amountIn1\\n    );\\n\\n    // SLOAD\\n    ICommonV3PositionManager _nftPositionManager = nftPositionManager;\\n    // Mint new position and stake it with masterchef\\n    _token0.safeApprove(address(_nftPositionManager), _amount0Desired);\\n    _token1.safeApprove(address(_nftPositionManager), _amount1Desired);\\n    (uint256 _nftTokenId,, uint256 _amount0, uint256 _amount1) = _nftPositionManager.mint(\\n      ICommonV3PositionManager.MintParams({\\n        token0: address(_token0),\\n        token1: address(_token1),\\n        fee: poolFee,\\n        tickLower: _tickLower,\\n        tickUpper: _tickUpper,\\n        amount0Desired: _amount0Desired,\\n        amount1Desired: _amount1Desired,\\n        amount0Min: 0,\\n        amount1Min: 0,\\n        recipient: address(this),\\n        deadline: block.timestamp\\n      })\\n    );\\n\\n    // Update token id\\n    nftTokenId = _nftTokenId;\\n\\n    // Stake to PancakeMasterChefV3\\n    // NOTE: masterChef won't accept transfer from nft that associate with pool that doesn't have masterChef pid\\n    // aka no CAKE reward\\n    _nftPositionManager.safeTransferFrom(address(this), address(masterChef), _nftTokenId);\\n\\n    // Update worker ticks config\\n    posTickLower = _tickLower;\\n    posTickUpper = _tickUpper;\\n\\n    emit LogOpenPosition(_nftTokenId, msg.sender, _tickLower, _tickUpper, _amount0, _amount1);\\n  }\\n\\n  function increasePosition(uint256 _amountIn0, uint256 _amountIn1) external nonReentrant onlyExecutorInScope {\\n    // Can't increase position if position not exist. Use `openPosition` instead.\\n    if (nftTokenId == 0) {\\n      revert PancakeV3Worker_PositionNotExist();\\n    }\\n\\n    // SLOAD\\n    ERC20 _token0 = token0;\\n    ERC20 _token1 = token1;\\n    int24 _tickLower = posTickLower;\\n    int24 _tickUpper = posTickUpper;\\n\\n    // Prepare optimal tokens for adding liquidity\\n    (uint256 _amount0Desired, uint256 _amount1Desired) = _prepareOptimalTokensForIncrease(\\n      address(_token0), address(_token1), _tickLower, _tickUpper, _amountIn0, _amountIn1\\n    );\\n\\n    // Increase existing position liquidity\\n    // SLOAD\\n    IPancakeV3MasterChef _masterChef = masterChef;\\n    uint256 _nftTokenId = nftTokenId;\\n\\n    _token0.safeApprove(address(_masterChef), _amount0Desired);\\n    _token1.safeApprove(address(_masterChef), _amount1Desired);\\n    (, uint256 _amount0, uint256 _amount1) = _masterChef.increaseLiquidity(\\n      IPancakeV3MasterChef.IncreaseLiquidityParams({\\n        tokenId: _nftTokenId,\\n        amount0Desired: _amount0Desired,\\n        amount1Desired: _amount1Desired,\\n        amount0Min: 0,\\n        amount1Min: 0,\\n        deadline: block.timestamp\\n      })\\n    );\\n\\n    emit LogIncreasePosition(_nftTokenId, msg.sender, _tickLower, _tickUpper, _amount0, _amount1);\\n  }\\n\\n  function _prepareOptimalTokensForIncrease(\\n    address _token0,\\n    address _token1,\\n    int24 _tickLower,\\n    int24 _tickUpper,\\n    uint256 _amountIn0,\\n    uint256 _amountIn1\\n  ) internal returns (uint256 _amount0Desired, uint256 _amount1Desired) {\\n    // Revert if not enough balance\\n    if (ERC20(_token0).balanceOf(address(this)) < _amountIn0 || ERC20(_token1).balanceOf(address(this)) < _amountIn1) {\\n      revert PancakeV3Worker_InvalidParams();\\n    }\\n    (, int24 _currTick,,,,,) = pool.slot0();\\n    if (_tickLower <= _currTick && _currTick <= _tickUpper) {\\n      (_amount0Desired, _amount1Desired) = _prepareOptimalTokensForIncreaseInRange(\\n        address(_token0), address(_token1), _tickLower, _tickUpper, _amountIn0, _amountIn1\\n      );\\n    } else {\\n      (_amount0Desired, _amount1Desired) = _prepareOptimalTokensForIncreaseOutOfRange(\\n        address(_token0), address(_token1), _currTick, _tickLower, _tickUpper, _amountIn0, _amountIn1\\n      );\\n    }\\n  }\\n\\n  function _prepareOptimalTokensForIncreaseInRange(\\n    address _token0,\\n    address _token1,\\n    int24 _tickLower,\\n    int24 _tickUpper,\\n    uint256 _amountIn0,\\n    uint256 _amountIn1\\n  ) internal returns (uint256 _optimalAmount0, uint256 _optimalAmount1) {\\n    // Calculate zap in amount and direction.\\n    (uint256 _amountSwap, uint256 _minAmountOut, bool _zeroForOne) = zapV3.calc(\\n      IZapV3.CalcParams({\\n        pool: address(pool),\\n        amountIn0: _amountIn0,\\n        amountIn1: _amountIn1,\\n        tickLower: _tickLower,\\n        tickUpper: _tickUpper\\n      })\\n    );\\n\\n    // Find out tokenIn and tokenOut\\n    address _tokenIn;\\n    address _tokenOut;\\n    if (_zeroForOne) {\\n      _tokenIn = address(_token0);\\n      _tokenOut = address(_token1);\\n    } else {\\n      _tokenIn = address(_token1);\\n      _tokenOut = address(_token0);\\n    }\\n\\n    // Swap\\n    ERC20(_tokenIn).safeApprove(address(router), _amountSwap);\\n    uint256 _amountOut = router.exactInputSingle(\\n      IPancakeV3Router.ExactInputSingleParams({\\n        tokenIn: _tokenIn,\\n        tokenOut: _tokenOut,\\n        fee: poolFee,\\n        recipient: address(this),\\n        amountIn: _amountSwap,\\n        amountOutMinimum: _minAmountOut,\\n        sqrtPriceLimitX96: 0\\n      })\\n    );\\n\\n    if (_zeroForOne) {\\n      _optimalAmount0 = _amountIn0 - _amountSwap;\\n      _optimalAmount1 = _amountIn1 + _amountOut;\\n    } else {\\n      _optimalAmount0 = _amountIn0 + _amountOut;\\n      _optimalAmount1 = _amountIn1 - _amountSwap;\\n    }\\n  }\\n\\n  function _prepareOptimalTokensForIncreaseOutOfRange(\\n    address _token0,\\n    address _token1,\\n    int24 _currTick,\\n    int24 _tickLower,\\n    int24 _tickUpper,\\n    uint256 _amountIn0,\\n    uint256 _amountIn1\\n  ) internal returns (uint256 _optimalAmount0, uint256 _optimalAmount1) {\\n    // If out of upper range (currTick > tickUpper), we swap token0 for token1\\n    // and vice versa, to push price closer to range.\\n    // We only want to swap until price move back in range so\\n    // we will swap until price hit the first tick within range.\\n    if (_currTick > _tickUpper) {\\n      if (_amountIn0 > 0) {\\n        uint256 _token0Before = ERC20(_token0).balanceOf(address(this));\\n        // zero for one swap\\n        ERC20(_token0).safeApprove(address(router), _amountIn0);\\n        uint256 _amountOut = router.exactInputSingle(\\n          IPancakeV3Router.ExactInputSingleParams({\\n            tokenIn: _token0,\\n            tokenOut: _token1,\\n            fee: poolFee,\\n            recipient: address(this),\\n            amountIn: _amountIn0,\\n            amountOutMinimum: 0,\\n            sqrtPriceLimitX96: LibTickMath.getSqrtRatioAtTick(_tickUpper) - 1 // swap until passed upper tick\\n           })\\n        );\\n        // Update optimal amount\\n        _optimalAmount0 = _amountIn0 + ERC20(_token0).balanceOf(address(this)) - _token0Before;\\n        _optimalAmount1 = _amountIn1 + _amountOut;\\n      }\\n    } else {\\n      if (_amountIn1 > 0) {\\n        uint256 _token1Before = ERC20(_token1).balanceOf(address(this));\\n        // one for zero swap\\n        ERC20(_token1).safeApprove(address(router), _amountIn1);\\n        uint256 _amountOut = router.exactInputSingle(\\n          IPancakeV3Router.ExactInputSingleParams({\\n            tokenIn: _token1,\\n            tokenOut: _token0,\\n            fee: poolFee,\\n            recipient: address(this),\\n            amountIn: _amountIn1,\\n            amountOutMinimum: 0,\\n            sqrtPriceLimitX96: LibTickMath.getSqrtRatioAtTick(_tickLower) + 1 // swap until passed lower tick\\n           })\\n        );\\n        // Update optimal amount\\n        _optimalAmount0 = _amountIn0 + _amountOut;\\n        _optimalAmount1 = _amountIn1 + ERC20(_token1).balanceOf(address(this)) - _token1Before;\\n      }\\n    }\\n\\n    // Also prepare in range if tick is back in range after swap\\n    (, _currTick,,,,,) = pool.slot0();\\n    if (_tickLower <= _currTick && _currTick <= _tickUpper) {\\n      return _prepareOptimalTokensForIncreaseInRange(\\n        _token0, _token1, _tickLower, _tickUpper, _optimalAmount0, _optimalAmount1\\n      );\\n    }\\n  }\\n\\n  /// @dev Closing position (burning NFT) requires NFT to be empty (no tokens, rewards remain).\\n  /// Executor should handle claiming rewards before closing position.\\n  function closePosition() external nonReentrant onlyExecutorInScope {\\n    uint256 _prevNftTokenId = nftTokenId;\\n    if (_prevNftTokenId == 0) {\\n      revert PancakeV3Worker_PositionNotExist();\\n    }\\n\\n    // Reset nftTokenId\\n    nftTokenId = 0;\\n\\n    IPancakeV3MasterChef _masterChef = masterChef;\\n    IPancakeV3MasterChef.UserPositionInfo memory _positionInfo = _masterChef.userPositionInfos(_prevNftTokenId);\\n    (uint256 _amount0, uint256 _amount1) = _decreaseLiquidity(_prevNftTokenId, _masterChef, _positionInfo.liquidity);\\n    _masterChef.burn(_prevNftTokenId);\\n\\n    emit LogClosePosition(_prevNftTokenId, msg.sender, _amount0, _amount1, _positionInfo.liquidity);\\n  }\\n\\n  function decreasePosition(uint128 _liquidity)\\n    external\\n    nonReentrant\\n    onlyExecutorInScope\\n    returns (uint256 _amount0, uint256 _amount1)\\n  {\\n    uint256 _nftTokenId = nftTokenId;\\n    if (_nftTokenId == 0) {\\n      revert PancakeV3Worker_PositionNotExist();\\n    }\\n\\n    (_amount0, _amount1) = _decreaseLiquidity(_nftTokenId, masterChef, _liquidity);\\n  }\\n\\n  function _decreaseLiquidity(uint256 _nftTokenId, IPancakeV3MasterChef _masterChef, uint128 _liquidity)\\n    internal\\n    returns (uint256 _amount0, uint256 _amount1)\\n  {\\n    // claim all rewards accrued before removing liquidity from LP\\n    _harvest();\\n\\n    if (_liquidity != 0) {\\n      _masterChef.decreaseLiquidity(\\n        IPancakeV3MasterChef.DecreaseLiquidityParams({\\n          tokenId: _nftTokenId,\\n          liquidity: _liquidity,\\n          amount0Min: 0,\\n          amount1Min: 0,\\n          deadline: block.timestamp\\n        })\\n      );\\n      (_amount0, _amount1) = _masterChef.collect(\\n        IPancakeV3MasterChef.CollectParams({\\n          tokenId: _nftTokenId,\\n          recipient: address(this),\\n          amount0Max: type(uint128).max,\\n          amount1Max: type(uint128).max\\n        })\\n      );\\n      emit LogDecreasePosition(_nftTokenId, msg.sender, _amount0, _amount1, _liquidity);\\n    }\\n  }\\n\\n  /// @notice claim trading fee and harvest reward from masterchef.\\n  /// @dev This is a routine for update worker state from pending rewards.\\n  function harvest() external {\\n    _harvest();\\n  }\\n\\n  struct HarvestFeeLocalVars {\\n    uint256 fee0;\\n    uint256 fee1;\\n    uint256 cakeRewards;\\n    uint16 tradingPerformanceFeeBps;\\n    uint16 rewardPerformanceFeeBps;\\n  }\\n\\n  /**\\n   * @dev Perform the actual claim and harvest.\\n   * 1. claim trading fee and harvest reward\\n   * 2. collect performance fee based\\n   */\\n  function _harvest() internal {\\n    // Skip harvest if already done before in same block\\n    if (block.timestamp == lastHarvest) return;\\n    lastHarvest = uint40(block.timestamp);\\n\\n    uint256 _nftTokenId = nftTokenId;\\n    // If tokenId is 0, then nothing to harvest\\n    if (_nftTokenId == 0) return;\\n\\n    HarvestFeeLocalVars memory _vars;\\n\\n    // SLOADs\\n    address _performanceFeeBucket = performanceFeeBucket;\\n    ERC20 _token0 = token0;\\n    ERC20 _token1 = token1;\\n    ERC20 _cake = cake;\\n    IPancakeV3MasterChef _masterChef = masterChef;\\n\\n    // Handle trading fee\\n    (_vars.fee0, _vars.fee1) = _masterChef.collect(\\n      IPancakeV3MasterChef.CollectParams({\\n        tokenId: _nftTokenId,\\n        recipient: address(this),\\n        amount0Max: type(uint128).max,\\n        amount1Max: type(uint128).max\\n      })\\n    );\\n    // Collect performance fee on collected trading fee\\n    _vars.tradingPerformanceFeeBps = tradingPerformanceFeeBps;\\n    if (_vars.fee0 > 0) {\\n      // Safe to unchecked because fee always less than MAX_BPS\\n      unchecked {\\n        _token0.safeTransfer(_performanceFeeBucket, _vars.fee0 * _vars.tradingPerformanceFeeBps / MAX_BPS);\\n      }\\n    }\\n    if (_vars.fee1 > 0) {\\n      // Safe to unchecked because fee always less than MAX_BPS\\n      unchecked {\\n        _token1.safeTransfer(_performanceFeeBucket, _vars.fee1 * _vars.tradingPerformanceFeeBps / MAX_BPS);\\n      }\\n    }\\n\\n    // Handle CAKE rewards\\n    _vars.cakeRewards = _masterChef.harvest(_nftTokenId, address(this));\\n    if (_vars.cakeRewards > 0) {\\n      uint256 _cakePerformanceFee;\\n      // Collect CAKE performance fee\\n      // Safe to unchecked because fee always less than MAX_BPS\\n      unchecked {\\n        _vars.rewardPerformanceFeeBps = rewardPerformanceFeeBps;\\n        _cakePerformanceFee = _vars.cakeRewards * _vars.rewardPerformanceFeeBps / MAX_BPS;\\n        _cake.safeTransfer(_performanceFeeBucket, _cakePerformanceFee);\\n      }\\n\\n      // Sell CAKE for token0 or token1, if any\\n      // Find out need to sell CAKE to which side by checking currTick\\n      (, int24 _currTick,,,,,) = pool.slot0();\\n      address _tokenOut = address(_token0);\\n      if (_currTick - posTickLower > posTickUpper - _currTick) {\\n        // If currTick is closer to tickUpper, then we will sell CAKE for token1\\n        _tokenOut = address(_token1);\\n      }\\n\\n      if (_tokenOut != address(_cake)) {\\n        IPancakeV3Router _router = router;\\n        // Swap reward after fee to token0 or token1\\n        // Safe to unchecked because _cakePerformanceFee is always less than _vars.cakeRewards (see above)\\n        uint256 _swapAmount;\\n        unchecked {\\n          _swapAmount = _vars.cakeRewards - _cakePerformanceFee;\\n        }\\n        _cake.safeApprove(address(_router), _swapAmount);\\n        // Swap CAKE for token0 or token1 based on predefined v3 path\\n        _router.exactInput(\\n          IPancakeV3Router.ExactInputParams({\\n            path: cakeToTokenPath[_tokenOut],\\n            recipient: address(this),\\n            amountIn: _swapAmount,\\n            amountOutMinimum: 0\\n          })\\n        );\\n      }\\n    }\\n\\n    emit LogHarvest(\\n      _vars.fee0, _vars.fee1, _vars.tradingPerformanceFeeBps, _vars.cakeRewards, _vars.rewardPerformanceFeeBps\\n    );\\n  }\\n\\n  /// @notice Transfer undeployed token out\\n  /// @param _token Token to be transfered\\n  /// @param _amount The amount to transfer\\n  function transferToExecutor(address _token, uint256 _amount) external nonReentrant onlyExecutorInScope {\\n    if (_amount == 0) {\\n      revert PancakeV3Worker_InvalidParams();\\n    }\\n    // msg.sender is executor in scope\\n    ERC20(_token).safeTransfer(msg.sender, _amount);\\n    emit LogTransferToExecutor(_token, msg.sender, _amount);\\n  }\\n\\n  /// =================\\n  /// Admin functions\\n  /// =================\\n\\n  function setTradingPerformanceFee(uint16 _newTradingPerformanceFeeBps) external onlyOwner {\\n    // performance fee should not be more than 30%\\n    if (_newTradingPerformanceFeeBps > 3000) {\\n      revert PancakeV3Worker_InvalidParams();\\n    }\\n    emit LogSetTradingPerformanceFee(tradingPerformanceFeeBps, _newTradingPerformanceFeeBps);\\n    tradingPerformanceFeeBps = _newTradingPerformanceFeeBps;\\n  }\\n\\n  function setRewardPerformanceFee(uint16 _newRewardPerformanceFeeBps) external onlyOwner {\\n    // performance fee should not be more than 30%\\n    if (_newRewardPerformanceFeeBps > 3000) {\\n      revert PancakeV3Worker_InvalidParams();\\n    }\\n    emit LogSetRewardPerformanceFee(rewardPerformanceFeeBps, _newRewardPerformanceFeeBps);\\n    rewardPerformanceFeeBps = _newRewardPerformanceFeeBps;\\n  }\\n\\n  function setPerformanceFeeBucket(address _newPerformanceFeeBucket) external onlyOwner {\\n    if (_newPerformanceFeeBucket == address(0)) {\\n      revert PancakeV3Worker_InvalidParams();\\n    }\\n    emit LogSetPerformanceFeeBucket(performanceFeeBucket, _newPerformanceFeeBucket);\\n    performanceFeeBucket = _newPerformanceFeeBucket;\\n  }\\n\\n  function setCakeToTokenPath(address _toToken, bytes calldata _path) external onlyOwner {\\n    // Revert if invalid length or first token is not cake or last token is not _toToken\\n    if (\\n      _path.length < 43 || address(bytes20(_path[:20])) != address(cake)\\n        || address(bytes20(_path[_path.length - 20:])) != _toToken\\n    ) {\\n      revert PancakeV3Worker_InvalidParams();\\n    }\\n    cakeToTokenPath[_toToken] = _path;\\n    emit LogSetCakeToTokenPath(_toToken, _path);\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/AutomatedVaultERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\nimport { ERC20 } from \\\"@solmate/tokens/ERC20.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract AutomatedVaultERC20 is ERC20, Initializable {\\n  address public vaultManager;\\n\\n  error AutomatedVaultERC20_Unauthorized();\\n\\n  modifier onlyVaultManager() {\\n    if (msg.sender != vaultManager) revert AutomatedVaultERC20_Unauthorized();\\n    _;\\n  }\\n\\n  constructor() ERC20(\\\"\\\", \\\"\\\", 18) {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(string calldata _name, string calldata _symbol) external initializer {\\n    name = _name;\\n    symbol = _symbol;\\n    vaultManager = msg.sender;\\n  }\\n\\n  /// @notice Mint tokens. Only controller can call.\\n  /// @param _to Address to mint to.\\n  /// @param _amount Amount to mint.\\n  function mint(address _to, uint256 _amount) external onlyVaultManager {\\n    _mint(_to, _amount);\\n  }\\n\\n  /// @notice Burn tokens. Only controller can call.\\n  /// @param _from Address to burn from.\\n  /// @param _amount Amount to burn.\\n  function burn(address _from, uint256 _amount) external onlyVaultManager {\\n    _burn(_from, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/oracles/BaseOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport { SafeCastUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\n// interfaces\\nimport { IChainlinkAggregator } from \\\"src/interfaces/IChainlinkAggregator.sol\\\";\\n\\nabstract contract BaseOracle is Ownable2StepUpgradeable {\\n  /// Libraries\\n  using SafeCastUpgradeable for int256;\\n\\n  /// Errors\\n  error BaseOracle_PriceTooOld();\\n  error BaseOracle_InvalidPrice();\\n\\n  /// Events\\n  event LogSetMaxPriceAge(uint16 prevMaxPriceAge, uint16 maxPriceAge);\\n  event LogSetPriceFeedOf(address indexed token, address prevPriceFeed, address priceFeed);\\n\\n  /// States\\n  uint16 public maxPriceAge;\\n  mapping(address => IChainlinkAggregator) public priceFeedOf;\\n\\n  /// @notice Set price feed of a token.\\n  /// @param _token Token address.\\n  /// @param _newPriceFeed New price feed address.\\n  function setPriceFeedOf(address _token, address _newPriceFeed) external onlyOwner {\\n    // Sanity check\\n    IChainlinkAggregator(_newPriceFeed).latestRoundData();\\n\\n    emit LogSetPriceFeedOf(_token, address(priceFeedOf[_token]), _newPriceFeed);\\n    priceFeedOf[_token] = IChainlinkAggregator(_newPriceFeed);\\n  }\\n\\n  /// @notice Set max price age.\\n  /// @param _newMaxPriceAge Max price age in seconds.\\n  function setMaxPriceAge(uint16 _newMaxPriceAge) external onlyOwner {\\n    emit LogSetMaxPriceAge(maxPriceAge, _newMaxPriceAge);\\n    maxPriceAge = _newMaxPriceAge;\\n  }\\n\\n  /// @notice Fetch token price from price feed. Revert if price too old or negative.\\n  /// @param _token Token address.\\n  /// @return _price Price of the token in 18 decimals.\\n  function _safeGetTokenPriceE18(address _token) internal view returns (uint256 _price) {\\n    // SLOAD\\n    IChainlinkAggregator _priceFeed = priceFeedOf[_token];\\n    (, int256 _answer,, uint256 _updatedAt,) = _priceFeed.latestRoundData();\\n    // Safe to use unchecked since `block.timestamp` will at least equal to `_updatedAt` in the same block\\n    // even somehow it underflows it would revert anyway\\n    unchecked {\\n      if (block.timestamp - _updatedAt > maxPriceAge) {\\n        revert BaseOracle_PriceTooOld();\\n      }\\n    }\\n    if (_answer <= 0) {\\n      revert BaseOracle_InvalidPrice();\\n    }\\n    // Normalize to 18 decimals\\n    return _answer.toUint256() * (10 ** (18 - _priceFeed.decimals()));\\n  }\\n\\n  function getTokenPrice(address _token) external view returns (uint256 _price) {\\n    _price = _safeGetTokenPriceE18(_token);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\nimport { IMulticall } from \\\"src/interfaces/IMulticall.sol\\\";\\nimport { AutomatedVaultManager } from \\\"src/AutomatedVaultManager.sol\\\";\\n\\ninterface IExecutor is IMulticall {\\n  function vaultManager() external view returns (address);\\n\\n  function setExecutionScope(address _worker, address _vaultToken) external;\\n\\n  function onDeposit(address _worker, address _vaultToken) external returns (bytes memory _result);\\n\\n  function onWithdraw(address _worker, address _vaultToken, uint256 _sharesToWithdraw)\\n    external\\n    returns (AutomatedVaultManager.TokenAmount[] memory);\\n\\n  function onUpdate(address _worker, address _vaultToken) external returns (bytes memory _result);\\n\\n  function sweepToWorker() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVaultOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\ninterface IVaultOracle {\\n  function getEquityAndDebt(address _vaultToken, address _worker)\\n    external\\n    view\\n    returns (uint256 _equityUSD, uint256 _debtUSD);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAutomatedVaultERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"src/interfaces/IERC20.sol\\\";\\n\\ninterface IAutomatedVaultERC20 is IERC20 {\\n  function mint(address _to, uint256 _amount) external;\\n  function burn(address _from, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/LibShareUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\nimport { LibFullMath } from \\\"./LibFullMath.sol\\\";\\n\\nlibrary LibShareUtil {\\n  function shareToValue(uint256 _shareAmount, uint256 _totalValue, uint256 _totalShare) internal pure returns (uint256) {\\n    if (_totalShare == 0) return _shareAmount;\\n    return LibFullMath.mulDiv(_shareAmount, _totalValue, _totalShare);\\n  }\\n\\n  function valueToShare(uint256 _tokenAmount, uint256 _totalShare, uint256 _totalValue) internal pure returns (uint256) {\\n    if (_totalShare == 0) return _tokenAmount;\\n    return LibFullMath.mulDiv(_tokenAmount, _totalShare, _totalValue);\\n  }\\n\\n  function valueToShareRoundingUp(uint256 _tokenAmount, uint256 _totalShare, uint256 _totalValue)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 _shares = valueToShare(_tokenAmount, _totalShare, _totalValue);\\n    uint256 _shareValues = shareToValue(_shares, _totalValue, _totalShare);\\n    if (_shareValues + 1 == _tokenAmount) {\\n      _shares += 1;\\n    }\\n    return _shares;\\n  }\\n\\n  function shareToValueRoundingUp(uint256 _shareAmount, uint256 _totalValue, uint256 _totalShare)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    uint256 _values = shareToValue(_shareAmount, _totalValue, _totalShare);\\n    uint256 _valueShares = valueToShare(_values, _totalShare, _totalValue);\\n    if (_valueShares + 1 == _shareAmount) {\\n      _values += 1;\\n    }\\n    return _values;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\nuint256 constant MAX_BPS = 10_000;\\n\"\r\n    },\r\n    \"src/interfaces/IZapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\ninterface IZapV3 {\\n  struct CalcParams {\\n    address pool;\\n    uint256 amountIn0;\\n    uint256 amountIn1;\\n    int24 tickLower;\\n    int24 tickUpper;\\n  }\\n\\n  function calc(CalcParams calldata params)\\n    external\\n    returns (uint256 swapAmount, uint256 expectAmountOut, bool isZeroForOne);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ICommonV3PositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICommonV3PositionManager {\\n  struct MintParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    address recipient;\\n    uint256 deadline;\\n  }\\n\\n  function mint(MintParams calldata params)\\n    external\\n    payable\\n    returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n  function positions(uint256 tokenId)\\n    external\\n    view\\n    returns (\\n      uint96 nonce,\\n      address operator,\\n      address token0,\\n      address token1,\\n      uint24 fee,\\n      int24 tickLower,\\n      int24 tickUpper,\\n      uint128 liquidity,\\n      uint256 feeGrowthInside0LastX128,\\n      uint256 feeGrowthInside1LastX128,\\n      uint128 tokensOwed0,\\n      uint128 tokensOwed1\\n    );\\n\\n  struct CollectParams {\\n    uint256 tokenId;\\n    address recipient;\\n    uint128 amount0Max;\\n    uint128 amount1Max;\\n  }\\n\\n  function collect(CollectParams calldata params) external returns (uint128 amount0, uint128 amount1);\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pancake-v3/IPancakeV3Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via PancakeSwap V3\\ninterface IPancakeV3Router {\\n  struct ExactInputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n  /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n  /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n  }\\n\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n  /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\n  /// and swap the entire amount, enabling contracts to send tokens before calling this function.\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n  /// @return amountOut The amount of the received token\\n  function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n  struct ExactOutputSingleParams {\\n    address tokenIn;\\n    address tokenOut;\\n    uint24 fee;\\n    address recipient;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n  /// that may remain in the router after the swap.\\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n  struct ExactOutputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 amountOut;\\n    uint256 amountInMaximum;\\n  }\\n\\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n  /// that may remain in the router after the swap.\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n  /// @return amountIn The amount of the input token\\n  function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/pancake-v3/IPancakeV3MasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\ninterface IPancakeV3MasterChef {\\n  function CAKE() external view returns (address);\\n\\n  struct IncreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  function increaseLiquidity(IncreaseLiquidityParams memory params)\\n    external\\n    payable\\n    returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n  struct DecreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint128 liquidity;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  function decreaseLiquidity(DecreaseLiquidityParams memory params) external returns (uint256 amount0, uint256 amount1);\\n\\n  struct CollectParams {\\n    uint256 tokenId;\\n    address recipient;\\n    uint128 amount0Max;\\n    uint128 amount1Max;\\n  }\\n\\n  function collect(CollectParams calldata params) external returns (uint256 amount0, uint256 amount1);\\n\\n  function harvest(uint256 tokenId, address to) external returns (uint256);\\n\\n  function updateLiquidity(uint256 tokenId) external;\\n\\n  function withdraw(uint256 tokenId, address to) external returns (uint256);\\n\\n  function sweepToken(address token, uint256 amountMinimum, address to) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  struct UserPositionInfo {\\n    uint128 liquidity;\\n    uint128 boostLiquidity;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    uint256 rewardGrowthInside;\\n    uint256 reward;\\n    address user;\\n    uint256 pid;\\n    uint256 boostMultiplier;\\n  }\\n\\n  function userPositionInfos(uint256 tokenId) external view returns (UserPositionInfo memory);\\n\\n  function pendingCake(uint256 _tokenId) external view returns (uint256 reward);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IChainlinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IChainlinkAggregator {\\n  function decimals() external view returns (uint8);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL\\npragma solidity 0.8.19;\\n\\ninterface IMulticall {\\n  function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\n/// @dev Interface of the ERC20 standard as defined in the EIP.\\n/// @dev This includes the optional name, symbol, and decimals metadata.\\ninterface IERC20 {\\n  /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\\n  /// is the new allowance.\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /// @notice Returns the amount of tokens in existence.\\n  function totalSupply() external view returns (uint256);\\n\\n  /// @notice Returns the amount of tokens owned by `account`.\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /// @notice Moves `amount` tokens from the caller's account to `to`.\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /// @notice Returns the remaining number of tokens that `spender` is allowed\\n  /// to spend on behalf of `owner`\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\\n  /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\n  /// `amount` is then deducted from the caller's allowance.\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n  /// @notice Returns the name of the token.\\n  function name() external view returns (string memory);\\n\\n  /// @notice Returns the symbol of the token.\\n  function symbol() external view returns (string memory);\\n\\n  /// @notice Returns the decimals places of the token.\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/libraries/LibFullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\n/// @dev Edit by Alpaca Finance to make it compatible with Solidity 0.8.19\\n/// @dev Previous code is commented out, find previous by \\\"previous:\\\" keyword\\nlibrary LibFullMath {\\n  /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n  function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n    // previous: no unchecked\\n    unchecked {\\n      // 512-bit multiply [prod1 prod0] = a * b\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\n      // then use the Chinese Remainder Theorem to reconstruct\\n      // the 512 bit result. The result is stored in two 256\\n      // variables such that product = prod1 * 2**256 + prod0\\n      uint256 prod0; // Least significant 256 bits of the product\\n      uint256 prod1; // Most significant 256 bits of the product\\n      assembly {\\n        let mm := mulmod(a, b, not(0))\\n        prod0 := mul(a, b)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n      }\\n\\n      // Handle non-overflow cases, 256 by 256 division\\n      if (prod1 == 0) {\\n        require(denominator > 0);\\n        assembly {\\n          result := div(prod0, denominator)\\n        }\\n        return result;\\n      }\\n\\n      // Make sure the result is less than 2**256.\\n      // Also prevents denominator == 0\\n      require(denominator > prod1);\\n\\n      ///////////////////////////////////////////////\\n      // 512 by 256 division.\\n      ///////////////////////////////////////////////\\n\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\n      // Compute remainder using mulmod\\n      uint256 remainder;\\n      assembly {\\n        remainder := mulmod(a, b, denominator)\\n      }\\n      // Subtract 256 bit number from 512 bit number\\n      assembly {\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n      }\\n\\n      // Factor powers of two out of denominator\\n      // Compute largest power of two divisor of denominator.\\n      // Always >= 1.\\n      // previous: uint256 twos = -denominator & denominator;\\n      uint256 twos = denominator & (~denominator + 1);\\n      // Divide denominator by power of two\\n      assembly {\\n        denominator := div(denominator, twos)\\n      }\\n\\n      // Divide [prod1 prod0] by the factors of two\\n      assembly {\\n        prod0 := div(prod0, twos)\\n      }\\n      // Shift in bits from prod1 into prod0. For this we need\\n      // to flip `twos` such that it is 2**256 / twos.\\n      // If twos is zero, then it becomes one\\n      assembly {\\n        twos := add(div(sub(0, twos), twos), 1)\\n      }\\n      prod0 |= prod1 * twos;\\n\\n      // Invert denominator mod 2**256\\n      // Now that denominator is an odd number, it has an inverse\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n      // Compute the inverse by starting with a seed that is correct\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n      uint256 inv = (3 * denominator) ^ 2;\\n      // Now use Newton-Raphson iteration to improve the precision.\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\n      // arithmetic, doubling the correct bits in each step.\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n      // Because the division is now exact we can divide by multiplying\\n      // with the modular inverse of denominator. This will give us the\\n      // correct result modulo 2**256. Since the precoditions guarantee\\n      // that the outcome is less than 2**256, this is the final result.\\n      // We don't need to compute the high bits of the result and prod1\\n      // is no longer required.\\n\\n      result = prod0 * inv;\\n    }\\n    return result;\\n  }\\n\\n  /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n    result = mulDiv(a, b, denominator);\\n    // previous: no unchecked\\n    unchecked {\\n      if (mulmod(a, b, denominator) > 0) {\\n        require(result < type(uint256).max);\\n        result++;\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@alpaca-mm/=lib/alpaca-v2-money-market/solidity/contracts/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@solmate/=lib/solmate/src/\",\r\n      \"alpaca-v2-money-market/=lib/alpaca-v2-money-market/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/solmate:ds-test/=lib/solmate/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wNativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AVManagerV3Gateway_InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AVManagerV3Gateway_InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AVManagerV3Gateway_NotPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AVManagerV3Gateway_TooLittleReceived\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReceived\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReceived\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"_result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contract AutomatedVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"withdrawConvertAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareToWithdraw\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AutomatedVaultManager.TokenAmount[]\",\"name\":\"_minAmountOut\",\"type\":\"tuple[]\"}],\"name\":\"withdrawMinimize\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AutomatedVaultManager.TokenAmount[]\",\"name\":\"_result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AVManagerV3Gateway", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "0000000000000000000000002a9614504a12de8a85207199cde1860269411f71000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}