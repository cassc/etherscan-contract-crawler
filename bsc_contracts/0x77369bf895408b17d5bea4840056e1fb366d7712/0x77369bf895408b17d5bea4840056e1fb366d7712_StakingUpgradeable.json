{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\ninterface IERC20_EXTENDED {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/StakingUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\n\\r\\nenum EnumBusiness {\\r\\n    selfBusiness,\\r\\n    directBusiness,\\r\\n    teamBusiness\\r\\n}\\r\\n\\r\\nstruct StructTeam {\\r\\n    address teamAddress;\\r\\n    uint256 level;\\r\\n}\\r\\n\\r\\nstruct StructBusiness {\\r\\n    uint256 selfBusiness;\\r\\n    uint256 selfBusinessUSD;\\r\\n    uint256 directBusiness;\\r\\n    uint256 directBusinessUSD;\\r\\n    uint256 teamBusiness;\\r\\n    uint256 teamBusinessUSD;\\r\\n}\\r\\n\\r\\nstruct StructTotalRewards {\\r\\n    uint256 referralUSD;\\r\\n    uint256 referralDirectUSD;\\r\\n    uint256 referralToken;\\r\\n    uint256 referralDirectTokens;\\r\\n    uint256 roiReferralUSD;\\r\\n    uint256 roiReferralTokens;\\r\\n    uint256 additionalRewards;\\r\\n    uint256 additionRewardsUSD;\\r\\n    uint256 roiTotalUSD;\\r\\n    uint256 roiTotalToken;\\r\\n}\\r\\n\\r\\nstruct StructROIRewards {\\r\\n    uint256 roiUSD;\\r\\n    uint256 roiToken;\\r\\n    uint256 totalROIInUSD;\\r\\n    uint256 rewardClaimedTimeStamp;\\r\\n}\\r\\n\\r\\nstruct StructAdditinalRewardsLevels {\\r\\n    string name;\\r\\n    uint256 minBusinessUSD;\\r\\n    uint256 minBusinessTokens;\\r\\n    uint256 roiRateAddon;\\r\\n    uint256 oneTimeRewardUSD;\\r\\n    bool isOneTimeRewardPaid;\\r\\n}\\r\\n\\r\\nstruct StructAccount {\\r\\n    address userAddress;\\r\\n    uint256[] stakingIds;\\r\\n    address referrer;\\r\\n    address[] referee;\\r\\n    StructTeam[] team;\\r\\n    StructBusiness business;\\r\\n    StructAdditinalRewardsLevels additionalRewardsLevel;\\r\\n    StructTotalRewards rewards;\\r\\n    StructTotalRewards pendingRewards;\\r\\n}\\r\\n\\r\\nstruct StructStaking {\\r\\n    uint256 stakingId;\\r\\n    bool isActive;\\r\\n    address owner;\\r\\n    uint256 valueInTokens;\\r\\n    uint256 valueInUSD;\\r\\n    uint256 maxROIInUSD;\\r\\n    uint256 roiRateInUSD;\\r\\n    uint256 startTime;\\r\\n    uint256 duration;\\r\\n    StructROIRewards roiClaimed;\\r\\n}\\r\\n\\r\\ncontract StakingUpgradeable is\\r\\n    Initializable,\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    address[] private _stakers;\\r\\n    uint256 private _stakingsCount;\\r\\n    uint256 private _stakingDuration;\\r\\n\\r\\n    address[] private _supportedCoins;\\r\\n\\r\\n    bool private _isPayReferral;\\r\\n    uint256[] private _referralRates;\\r\\n\\r\\n    uint256 private _roiRateInUSD;\\r\\n\\r\\n    uint256 private _presaleRateInWei;\\r\\n    uint256 private _minContributionInUSD;\\r\\n    uint256 private _minClaimAmount;\\r\\n\\r\\n    address private _providerAddress;\\r\\n    uint256 private _providerFees;\\r\\n    address private _providerContract;\\r\\n\\r\\n    address private _tokenContract;\\r\\n\\r\\n    uint256 public totalTokensStaked;\\r\\n    uint256 public totalUSDRaised;\\r\\n\\r\\n    uint256 public totalROIClaimedTokens;\\r\\n    uint256 public totalROIClaimedUSD;\\r\\n\\r\\n    uint256 public totalReferralToken;\\r\\n    uint256 public totalReferralUSD;\\r\\n\\r\\n    address public adminFeesAddress;\\r\\n    uint256 public adminFees;\\r\\n\\r\\n    address[] private _adminsList;\\r\\n\\r\\n    mapping(address => bool) private _mappingSupportedCoins;\\r\\n    mapping(address => StructAccount) private _mappingAccounts;\\r\\n    mapping(uint256 => StructStaking) private _mappingStaking;\\r\\n    mapping(uint8 => StructAdditinalRewardsLevels)\\r\\n        private _mappingAdditionalRewards;\\r\\n\\r\\n    mapping(address => bool) private _mappingIsAdmin;\\r\\n\\r\\n    event UpdatedBusiness(EnumBusiness businessType, uint256 valueInUSD);\\r\\n\\r\\n    event Stake(\\r\\n        address userAddress,\\r\\n        uint256 valueUSD,\\r\\n        uint256 stakingId,\\r\\n        uint256 startTime,\\r\\n        address tokenContract\\r\\n    );\\r\\n\\r\\n    event ROIReward(address userAddress, uint256 valueUSD);\\r\\n    event ReferrerAdded(address referee, address referrer);\\r\\n    event TeamAdded(address referee, address referrer, address parent);\\r\\n    event ReferralPaidUSD(\\r\\n        address referrer,\\r\\n        uint256 valueInUSD,\\r\\n        address usdAddress\\r\\n    );\\r\\n    event ReferralPaidToken(\\r\\n        address referrer,\\r\\n        uint256 valueInToken,\\r\\n        address tokenAddress,\\r\\n        uint256 level\\r\\n    );\\r\\n\\r\\n    event ProviderFees(\\r\\n        address providerAddress,\\r\\n        address tokenAddress,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event AdminFees(address adminAddress, address tokenAddress, uint256 value);\\r\\n\\r\\n    event UpdatedReferrralRates(\\r\\n        uint256[] prevReferralRates,\\r\\n        uint256[] newReferralRates\\r\\n    );\\r\\n    event UpdatedROIReferrralRates(\\r\\n        uint256[] prevROIReferralRates,\\r\\n        uint256[] newROIReferralRates\\r\\n    );\\r\\n\\r\\n    event UpdatedMinContributionInUSD(uint256 prevValue, uint256 newValue);\\r\\n\\r\\n    event SupportedCurrencyAdded(address tokenContractAddress);\\r\\n    event SupportedCurrencyRemoved(address tokenContractAddress);\\r\\n\\r\\n    event AdditionalRewardsAdded(StructAdditinalRewardsLevels);\\r\\n    event IsPayReferral(bool referralStatus);\\r\\n\\r\\n    event AdminAdded(address adminAddress);\\r\\n    event AdminRemoved(address adminAddress);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(\\r\\n            _mappingIsAdmin[msg.sender] || msg.sender == owner(),\\r\\n            \\\"Only admin or owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function initialize() public initializer {\\r\\n        __Ownable_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _stakingDuration = 600 days;\\r\\n        _roiRateInUSD = 300;\\r\\n        _referralRates = [10, 3, 2, 1];\\r\\n        _minContributionInUSD = 100 * 1 ether;\\r\\n        _minClaimAmount = 50 * 1 ether;\\r\\n        _presaleRateInWei = 7200000000000000;\\r\\n\\r\\n        _tokenContract = 0xc304d378C5E2433489dFE0AA41930cbdB7b1c7e5;\\r\\n        _providerAddress = 0x7C771f4447b884A11d84b640f4f4c3862f53c014;\\r\\n        _providerFees = 5;\\r\\n        adminFees = 10;\\r\\n        _isPayReferral = true;\\r\\n\\r\\n        _mappingSupportedCoins[\\r\\n            0x55d398326f99059fF775485246999027B3197955\\r\\n        ] = true;\\r\\n        _supportedCoins.push(0x55d398326f99059fF775485246999027B3197955);\\r\\n    }\\r\\n\\r\\n    // function initialize() public initializer {\\r\\n    //     __Ownable_init();\\r\\n    //     __UUPSUpgradeable_init();\\r\\n\\r\\n    //     _stakingDuration = 600 days;\\r\\n    //     _roiRateInUSD = 300;\\r\\n    //     _referralRates = [10, 3, 2, 1];\\r\\n    //     _minContributionInUSD = 100 * 1 ether;\\r\\n    //     _minClaimAmount = 50 * 1 ether;\\r\\n    //     _presaleRateInWei = 7200000000000000;\\r\\n\\r\\n    //     _tokenContract = 0xa954CCFeC7c29E503617EA614A3cee9A02dC1177;\\r\\n    //     _providerAddress = 0x7C771f4447b884A11d84b640f4f4c3862f53c014;\\r\\n    //     _providerFees = 5;\\r\\n    //     adminFees = 10;\\r\\n    //     _isPayReferral = true;\\r\\n\\r\\n    //     _mappingSupportedCoins[0xfdf1ADA2D1E039A39fbD92397A6934430f30E9B5] = true;\\r\\n    //     _supportedCoins.push(0xfdf1ADA2D1E039A39fbD92397A6934430f30E9B5);\\r\\n    // }\\r\\n\\r\\n    function getPresaleRate() external view returns (uint256) {\\r\\n        return _presaleRateInWei;\\r\\n    }\\r\\n\\r\\n    function setPresaleRate(uint256 _rateInWei) external onlyOwner {\\r\\n        _presaleRateInWei = _rateInWei;\\r\\n    }\\r\\n\\r\\n    function isPayReferral() external view returns (bool referralStatus) {\\r\\n        referralStatus = _isPayReferral;\\r\\n        // roiReferralStatus = _isPayROIReferral;\\r\\n    }\\r\\n\\r\\n    function setIsPayReferral(bool _referralStatus) external onlyOwner {\\r\\n        _isPayReferral = _referralStatus;\\r\\n        // _isPayROIReferral = _roiReferralStatus;\\r\\n        emit IsPayReferral(_isPayReferral);\\r\\n    }\\r\\n\\r\\n    function getReferralRate() external view returns (uint256[] memory) {\\r\\n        return _referralRates;\\r\\n    }\\r\\n\\r\\n    function setReferralRates(\\r\\n        uint256[] calldata referralRates_\\r\\n    ) external onlyAdmin {\\r\\n        emit UpdatedReferrralRates(_referralRates, referralRates_);\\r\\n        _referralRates = referralRates_;\\r\\n    }\\r\\n\\r\\n    // function getROIRateReferral() external view returns (uint256[] memory) {\\r\\n    //     return _roiReferralRate;\\r\\n    // }\\r\\n\\r\\n    // function setROIRateReferral(\\r\\n    //     uint256[] calldata _roiReferralRate_\\r\\n    // ) external onlyOwner {\\r\\n    //     emit UpdatedROIReferrralRates(_roiReferralRate, _roiReferralRate_);\\r\\n    //     _roiReferralRate = _roiReferralRate_;\\r\\n    // }\\r\\n\\r\\n    function getMinContributionInUSD() external view returns (uint256) {\\r\\n        return _minContributionInUSD;\\r\\n    }\\r\\n\\r\\n    function setMinContributionUSD(uint256 _valueInWei) external onlyOwner {\\r\\n        emit UpdatedMinContributionInUSD(_minContributionInUSD, _valueInWei);\\r\\n        _minContributionInUSD = _valueInWei;\\r\\n    }\\r\\n\\r\\n    function getSupportedCoins() external view returns (address[] memory) {\\r\\n        return _supportedCoins;\\r\\n    }\\r\\n\\r\\n    function addSupportedCoin(\\r\\n        address _tokenContractAddress\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            !_mappingSupportedCoins[_tokenContractAddress],\\r\\n            \\\"Token already added.\\\"\\r\\n        );\\r\\n        _mappingSupportedCoins[_tokenContractAddress] = true;\\r\\n\\r\\n        _supportedCoins.push(_tokenContractAddress);\\r\\n        emit SupportedCurrencyAdded(_tokenContractAddress);\\r\\n    }\\r\\n\\r\\n    function removeSupportedCoin(\\r\\n        address _tokenContractAddress\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _mappingSupportedCoins[_tokenContractAddress],\\r\\n            \\\"Token already removed or not added.\\\"\\r\\n        );\\r\\n\\r\\n        _mappingSupportedCoins[_tokenContractAddress] = false;\\r\\n\\r\\n        address[] memory supportedCoins = _supportedCoins;\\r\\n\\r\\n        for (uint8 i; i < supportedCoins.length; ++i) {\\r\\n            if (supportedCoins[i] == _tokenContractAddress) {\\r\\n                _supportedCoins[i] = _supportedCoins[\\r\\n                    _supportedCoins.length - 1\\r\\n                ];\\r\\n                _supportedCoins.pop();\\r\\n                emit SupportedCurrencyRemoved(_tokenContractAddress);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isAdmin() external view returns (address[] memory) {\\r\\n        return _adminsList;\\r\\n    }\\r\\n\\r\\n    function addAdmin(address _adminAddress) external onlyAdmin {\\r\\n        require(!_mappingIsAdmin[_adminAddress], \\\"addAdmin(): Already admin.\\\");\\r\\n\\r\\n        _mappingIsAdmin[_adminAddress] = true;\\r\\n\\r\\n        _adminsList.push(_adminAddress);\\r\\n        emit AdminAdded(_adminAddress);\\r\\n    }\\r\\n\\r\\n    function removeAdmin(address _adminAddress) external onlyAdmin {\\r\\n        require(\\r\\n            _mappingIsAdmin[_adminAddress],\\r\\n            \\\"Token already removed or not added.\\\"\\r\\n        );\\r\\n\\r\\n        _mappingIsAdmin[_adminAddress] = false;\\r\\n\\r\\n        address[] memory adminsList = _adminsList;\\r\\n\\r\\n        for (uint8 i; i < adminsList.length; ++i) {\\r\\n            if (_adminsList[i] == _adminAddress) {\\r\\n                _adminsList[i] = _adminsList[_adminsList.length - 1];\\r\\n\\r\\n                _adminsList.pop();\\r\\n                emit AdminRemoved(_adminAddress);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAccount(\\r\\n        address _userAddress\\r\\n    ) external view returns (StructAccount memory) {\\r\\n        return _mappingAccounts[_userAddress];\\r\\n    }\\r\\n\\r\\n    function getAdditionalRewardsLevels(\\r\\n        uint8 _id\\r\\n    ) external view returns (StructAdditinalRewardsLevels memory) {\\r\\n        return _mappingAdditionalRewards[_id];\\r\\n    }\\r\\n\\r\\n    function setAdditionalRewardsLevels(\\r\\n        uint8[] calldata _id,\\r\\n        string[] calldata _name,\\r\\n        uint256[] calldata _minBusinessUSD,\\r\\n        uint256[] calldata _minBusinessTokens,\\r\\n        uint256[] calldata _roiRateAddon,\\r\\n        uint256[] calldata _oneTimeRewardDecimals\\r\\n    ) external onlyOwner {\\r\\n        for (uint8 i; i < _id.length; ++i) {\\r\\n            _mappingAdditionalRewards[i] = StructAdditinalRewardsLevels(\\r\\n                _name[i],\\r\\n                _minBusinessUSD[i],\\r\\n                _minBusinessTokens[i],\\r\\n                _roiRateAddon[i],\\r\\n                _oneTimeRewardDecimals[i] * 10 ** 18,\\r\\n                false\\r\\n            );\\r\\n\\r\\n            emit AdditionalRewardsAdded(_mappingAdditionalRewards[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getProviders()\\r\\n        external\\r\\n        view\\r\\n        returns (address provider, address providerContract)\\r\\n    {\\r\\n        provider = _providerAddress;\\r\\n        providerContract = _providerContract;\\r\\n    }\\r\\n\\r\\n    function _updateSelfAddress(\\r\\n        StructAccount storage _userAccount,\\r\\n        address _userAddress\\r\\n    ) private {\\r\\n        _userAccount.userAddress = _userAddress;\\r\\n    }\\r\\n\\r\\n    function _addReferrer(address _referee, address _referrer) private {\\r\\n        StructAccount storage userAccount = _mappingAccounts[_referee];\\r\\n        StructAccount storage firstReferrerAccount = _mappingAccounts[\\r\\n            _referrer\\r\\n        ];\\r\\n\\r\\n        //Check if user is not referrer\\r\\n\\r\\n        require(_referee != _referrer, \\\"Referee can't be its own upline.\\\");\\r\\n\\r\\n        // check if referee is not upline of referrer\\r\\n\\r\\n        require(\\r\\n            _referee != firstReferrerAccount.referrer,\\r\\n            \\\"Referee is upline referrer.\\\"\\r\\n        );\\r\\n\\r\\n        // update referrer\\r\\n\\r\\n        if (userAccount.referrer == address(0) && _referrer != address(0)) {\\r\\n            userAccount.referrer = _referrer;\\r\\n            emit ReferrerAdded(_referee, _referrer);\\r\\n\\r\\n            //Update referee in team\\r\\n\\r\\n            uint256[] memory levelRates = _referralRates;\\r\\n\\r\\n            for (uint8 i; i < levelRates.length; ++i) {\\r\\n                if (userAccount.referrer != address(0)) {\\r\\n                    StructAccount storage referrerAccount = _mappingAccounts[\\r\\n                        userAccount.referrer\\r\\n                    ];\\r\\n\\r\\n                    if (i == 0) {\\r\\n                        referrerAccount.referee.push(_referee);\\r\\n                    }\\r\\n\\r\\n                    referrerAccount.team.push(StructTeam(_referee, i + 1));\\r\\n                    emit TeamAdded(\\r\\n                        _referee,\\r\\n                        _referrer,\\r\\n                        referrerAccount.userAddress\\r\\n                    );\\r\\n\\r\\n                    userAccount = referrerAccount;\\r\\n                } else {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _distributeReferral(\\r\\n        address _referee,\\r\\n        uint256 _msgValue,\\r\\n        address _tokenAddress,\\r\\n        bool _payReferral\\r\\n    ) private {\\r\\n        StructAccount storage userAccount = _mappingAccounts[_referee];\\r\\n\\r\\n        uint256[] memory levelRates = _referralRates;\\r\\n        uint256 referralPaidUSD;\\r\\n\\r\\n        for (uint8 i; i < levelRates.length; i++) {\\r\\n            if (userAccount.referrer != address(0)) {\\r\\n                StructAccount storage referrerAccount = _mappingAccounts[\\r\\n                    userAccount.referrer\\r\\n                ];\\r\\n\\r\\n                uint256 referralRewardValue = (_msgValue * levelRates[i]) / 100;\\r\\n\\r\\n                if (referralRewardValue > 0) {\\r\\n                    referrerAccount.rewards.referralUSD += referralRewardValue;\\r\\n\\r\\n                    if (_payReferral) {\\r\\n                        IERC20Upgradeable(_tokenAddress).transfer(\\r\\n                            referrerAccount.userAddress,\\r\\n                            _weiToTokenDecimals(\\r\\n                                _tokenAddress,\\r\\n                                referralRewardValue\\r\\n                            )\\r\\n                        );\\r\\n                    }\\r\\n\\r\\n                    emit ReferralPaidToken(\\r\\n                        referrerAccount.userAddress,\\r\\n                        referralRewardValue,\\r\\n                        _tokenAddress,\\r\\n                        i + 1\\r\\n                    );\\r\\n\\r\\n                    totalReferralUSD += referralRewardValue;\\r\\n                }\\r\\n\\r\\n                if (i == 0) {\\r\\n                    referrerAccount.business.directBusinessUSD += _msgValue;\\r\\n                    referrerAccount\\r\\n                        .rewards\\r\\n                        .referralDirectUSD += referralRewardValue;\\r\\n                }\\r\\n\\r\\n                referrerAccount.business.teamBusinessUSD += _msgValue;\\r\\n\\r\\n                userAccount = referrerAccount;\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        totalReferralUSD += referralPaidUSD;\\r\\n    }\\r\\n\\r\\n    function _distributeProvidersRewards(\\r\\n        address _tokenAddress,\\r\\n        uint256 _value\\r\\n    ) private {\\r\\n        uint256 rewardValue = (_tokenToWei(_tokenAddress, _value) *\\r\\n            _providerFees) / 100;\\r\\n        if (_providerAddress != address(0)) {\\r\\n            IERC20Upgradeable(_tokenAddress).transfer(\\r\\n                _providerAddress,\\r\\n                rewardValue\\r\\n            );\\r\\n\\r\\n            emit ProviderFees(_providerAddress, _tokenAddress, rewardValue);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _stake(\\r\\n        address _referee,\\r\\n        address _referrer,\\r\\n        uint256 _valueInWei,\\r\\n        uint256 _valueInUSD,\\r\\n        uint256 _duration,\\r\\n        uint256 _roiRate,\\r\\n        uint256 _startTime\\r\\n    ) private returns (uint256 stakingId) {\\r\\n        StructAccount storage userAccount = _mappingAccounts[_referee];\\r\\n        StructAccount storage firstReferrerAccount = _mappingAccounts[\\r\\n            _referrer\\r\\n        ];\\r\\n\\r\\n        // update self address\\r\\n\\r\\n        if (userAccount.userAddress == address(0) && _referee != address(0)) {\\r\\n            _updateSelfAddress(userAccount, _referee);\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            firstReferrerAccount.userAddress == address(0) &&\\r\\n            _referrer != address(0)\\r\\n        ) {\\r\\n            _updateSelfAddress(firstReferrerAccount, _referrer);\\r\\n        }\\r\\n\\r\\n        // add referrer\\r\\n\\r\\n        if (userAccount.referrer == address(0) && _referrer != address(0)) {\\r\\n            _addReferrer(_referee, _referrer);\\r\\n        }\\r\\n\\r\\n        // check if user is already staked\\r\\n\\r\\n        if (userAccount.stakingIds.length == 0) {\\r\\n            _stakers.push(userAccount.userAddress);\\r\\n        }\\r\\n\\r\\n        //get staking id\\r\\n\\r\\n        stakingId = _stakingsCount + 1;\\r\\n        _stakingsCount++;\\r\\n\\r\\n        // update staking id in userAccount\\r\\n\\r\\n        userAccount.stakingIds.push(stakingId);\\r\\n\\r\\n        // get staking account\\r\\n\\r\\n        StructStaking storage stakingAccount = _mappingStaking[stakingId];\\r\\n\\r\\n        // update staking account\\r\\n\\r\\n        stakingAccount.stakingId = stakingId;\\r\\n        stakingAccount.isActive = true;\\r\\n        stakingAccount.owner = userAccount.userAddress;\\r\\n        stakingAccount.valueInTokens = _valueInWei;\\r\\n        stakingAccount.valueInUSD = _valueInUSD;\\r\\n        stakingAccount.maxROIInUSD = (_valueInUSD * _roiRate) / 100;\\r\\n        stakingAccount.roiRateInUSD = _roiRate;\\r\\n        stakingAccount.startTime = _startTime;\\r\\n        stakingAccount.duration = _duration;\\r\\n    }\\r\\n\\r\\n    function stakeInToken(\\r\\n        address _userAddress,\\r\\n        address _referrer,\\r\\n        uint256 _valueInWei,\\r\\n        address _tokenAddress\\r\\n    ) external {\\r\\n        uint256 _valueInTokens = _tokenToWei(_tokenAddress, _valueInWei);\\r\\n\\r\\n        require(\\r\\n            _mappingSupportedCoins[_tokenAddress],\\r\\n            \\\"Token is not supported\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            _valueInWei >= _minContributionInUSD,\\r\\n            \\\"Value less then min contribution\\\"\\r\\n        );\\r\\n\\r\\n        // transfer tokens to this contract\\r\\n\\r\\n        if (!_mappingIsAdmin[msg.sender]) {\\r\\n            IERC20Upgradeable(_tokenAddress).transferFrom(\\r\\n                _userAddress,\\r\\n                address(this),\\r\\n                _valueInTokens\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 tokensToStake = (_valueInWei * 1 ether) / _presaleRateInWei;\\r\\n\\r\\n        uint256 stakingId = _stake(\\r\\n            _userAddress,\\r\\n            _referrer,\\r\\n            tokensToStake,\\r\\n            _valueInWei,\\r\\n            _stakingDuration,\\r\\n            _roiRateInUSD,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        if (_isPayReferral) {\\r\\n            _distributeReferral(_userAddress, _valueInWei, _tokenAddress, true);\\r\\n        }\\r\\n\\r\\n        _distributeProvidersRewards(\\r\\n            _tokenAddress,\\r\\n            (_valueInWei * _providerFees) / 100\\r\\n        );\\r\\n\\r\\n        totalTokensStaked += tokensToStake;\\r\\n        totalUSDRaised += _valueInWei;\\r\\n\\r\\n        emit Stake(\\r\\n            _userAddress,\\r\\n            tokensToStake,\\r\\n            stakingId,\\r\\n            block.timestamp,\\r\\n            _tokenAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function stakeInTokenAdmin(\\r\\n        address[] calldata _userAddress,\\r\\n        address[] calldata _referrer,\\r\\n        uint256[] calldata _valueInDecimals,\\r\\n        uint256[] calldata _startTime,\\r\\n        address _tokenAddress\\r\\n    ) external onlyAdmin {\\r\\n        require(\\r\\n            _mappingSupportedCoins[_tokenAddress],\\r\\n            \\\"Token is not supported\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i; i < _userAddress.length; ++i) {\\r\\n            // uint256 _valueInTokens = _tokenToWei(_tokenAddress, _valueInWei[i]);\\r\\n            uint256 valueInWei = _valueInDecimals[i] * 10 ** 18;\\r\\n\\r\\n            // require(\\r\\n            //     valueInWei >= _minContributionInUSD,\\r\\n            //     \\\"Value less then min contribution\\\"\\r\\n            // );\\r\\n\\r\\n            // transfer tokens to this contract\\r\\n\\r\\n            // if (!_mappingIsAdmin[msg.sender]) {\\r\\n            //     IERC20Upgradeable(_tokenAddress).transferFrom(\\r\\n            //         _userAddress,\\r\\n            //         address(this),\\r\\n            //         _valueInTokens\\r\\n            //     );\\r\\n            // }\\r\\n\\r\\n            uint256 tokensToStake = (valueInWei * 1 ether) / _presaleRateInWei;\\r\\n\\r\\n            uint256 stakingId = _stake(\\r\\n                _userAddress[i],\\r\\n                _referrer[i],\\r\\n                tokensToStake,\\r\\n                valueInWei,\\r\\n                _stakingDuration,\\r\\n                _roiRateInUSD,\\r\\n                _startTime[i]\\r\\n            );\\r\\n\\r\\n            if (_isPayReferral) {\\r\\n                _distributeReferral(\\r\\n                    _userAddress[i],\\r\\n                    valueInWei,\\r\\n                    _tokenAddress,\\r\\n                    false\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // _distributeProvidersRewards(\\r\\n            //     _tokenAddress,\\r\\n            //     (_valueInWei * _providerFees) / 100\\r\\n            // );\\r\\n\\r\\n            totalTokensStaked += tokensToStake;\\r\\n            totalUSDRaised += valueInWei;\\r\\n\\r\\n            emit Stake(\\r\\n                _userAddress[i],\\r\\n                tokensToStake,\\r\\n                stakingId,\\r\\n                _startTime[i],\\r\\n                _tokenAddress\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getStakingRewardByIdInUSD(\\r\\n        uint256 _stakingId\\r\\n    ) private view returns (uint256 stakingRewardInUSD) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        StructStaking memory stakingAccount = _mappingStaking[_stakingId];\\r\\n        uint256 stakingTimePassed = currentTime - stakingAccount.startTime;\\r\\n        stakingRewardInUSD =\\r\\n            (stakingAccount.maxROIInUSD / stakingAccount.duration) *\\r\\n            _min(stakingTimePassed, stakingAccount.duration) -\\r\\n            stakingAccount.roiClaimed.totalROIInUSD;\\r\\n    }\\r\\n\\r\\n    function getStakingRewardByIdUSD(\\r\\n        uint256 _stakingId\\r\\n    ) external view returns (uint256) {\\r\\n        return _getStakingRewardByIdInUSD(_stakingId);\\r\\n    }\\r\\n\\r\\n    function getUserAllStakingsRewards(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint256 rewardInUSD, uint256 rewardInToken) {\\r\\n        StructAccount memory userAccount = _mappingAccounts[_userAddress];\\r\\n        uint256[] memory stakingIds = userAccount.stakingIds;\\r\\n\\r\\n        uint256 stakingIdslength = stakingIds.length;\\r\\n\\r\\n        for (uint256 i; i < stakingIdslength; ++i) {\\r\\n            StructStaking memory stakingAccount = _mappingStaking[\\r\\n                stakingIds[i]\\r\\n            ];\\r\\n            if (stakingAccount.isActive) {\\r\\n                rewardInUSD += _getStakingRewardByIdInUSD(\\r\\n                    stakingAccount.stakingId\\r\\n                );\\r\\n                rewardInToken += (rewardInUSD * 1 ether) / _presaleRateInWei;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAllStakingRewardsToBeRealesed(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint256 rewardInUSD) {\\r\\n        StructAccount memory userAccount = _mappingAccounts[_userAddress];\\r\\n        uint256[] memory stakingIds = userAccount.stakingIds;\\r\\n\\r\\n        uint256 stakingIdslength = stakingIds.length;\\r\\n\\r\\n        for (uint256 i; i < stakingIdslength; ++i) {\\r\\n            StructStaking memory stakingAccount = _mappingStaking[\\r\\n                stakingIds[i]\\r\\n            ];\\r\\n            if (stakingAccount.isActive) {\\r\\n                rewardInUSD +=\\r\\n                    stakingAccount.maxROIInUSD -\\r\\n                    stakingAccount.roiClaimed.roiUSD;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _claimStakingRewardById(\\r\\n        uint256 _stakingId,\\r\\n        address _msgSender\\r\\n    ) private returns (uint256 totalROIUSD, uint256 usdROI, uint256 tokenROI) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        totalROIUSD = _getStakingRewardByIdInUSD(_stakingId);\\r\\n        require(\\r\\n            totalROIUSD > 0,\\r\\n            \\\"_claimStakingRewardById(): No pending rewards.\\\"\\r\\n        );\\r\\n\\r\\n        tokenROI = (totalROIUSD * 1 ether) / _presaleRateInWei;\\r\\n        StructStaking storage stakingAccount = _mappingStaking[_stakingId];\\r\\n        require(\\r\\n            stakingAccount.owner == _msgSender,\\r\\n            \\\"You are not owner of this staking id.\\\"\\r\\n        );\\r\\n\\r\\n        StructAccount storage userAccount = _mappingAccounts[\\r\\n            stakingAccount.owner\\r\\n        ];\\r\\n\\r\\n        userAccount.rewards.roiTotalUSD += usdROI;\\r\\n        userAccount.rewards.roiTotalToken += tokenROI;\\r\\n\\r\\n        stakingAccount.roiClaimed.roiUSD += usdROI;\\r\\n        stakingAccount.roiClaimed.roiToken += tokenROI;\\r\\n        stakingAccount.roiClaimed.totalROIInUSD += totalROIUSD;\\r\\n        stakingAccount.roiClaimed.rewardClaimedTimeStamp = currentTime;\\r\\n\\r\\n        totalROIClaimedTokens += tokenROI;\\r\\n        totalROIClaimedUSD += usdROI;\\r\\n\\r\\n        emit ROIReward(_msgSender, totalROIUSD);\\r\\n    }\\r\\n\\r\\n    function claimStakingRewardById(\\r\\n        address _userAddress,\\r\\n        uint256 _stakingId\\r\\n    ) external {\\r\\n        (, , uint256 tokenROI) = _claimStakingRewardById(\\r\\n            _stakingId,\\r\\n            _userAddress\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            tokenROI >= _minClaimAmount,\\r\\n            \\\"claimStakingRewardById(): Reward less than min claim amount.\\\"\\r\\n        );\\r\\n\\r\\n        // IERC20Upgradeable(_usdContract).transfer(\\r\\n        //     msgSender,\\r\\n        //     _weiToTokenDecimals(_usdContract, (usdROI * 90) / 100)\\r\\n        // );\\r\\n\\r\\n        // _distributeProvidersRewards(_usdContract, (usdROI * 10) / 100);\\r\\n\\r\\n        IERC20Upgradeable(_tokenContract).transfer(\\r\\n            _userAddress,\\r\\n            _weiToTokenDecimals(_tokenContract, tokenROI)\\r\\n        );\\r\\n\\r\\n        emit ROIReward(_userAddress, tokenROI);\\r\\n\\r\\n        // _distributeProvidersRewards(_tokenContract, (tokenROI * 10) / 100);\\r\\n\\r\\n        //Check if eligible for additional rewards\\r\\n\\r\\n        //Pay Referral\\r\\n\\r\\n        // _distributeReferral(msgSender, (usdROI * 90 * 2) / 100, _usdContract);\\r\\n    }\\r\\n\\r\\n    // function getPendingReferral(\\r\\n    //     address _userAddress\\r\\n    // ) external view returns (StructPendingReferral memory) {\\r\\n    //     return _mappingPendingReward[_userAddress];\\r\\n    // }\\r\\n\\r\\n    // function claimPendingReferral(address _usdContract) external {\\r\\n    //     require(_mappingSupportedCoins[_usdContract], \\\"Token is not supported\\\");\\r\\n    //     address msgSender = msg.sender;\\r\\n    //     StructAccount storage userAccount = _mappingAccounts[msgSender];\\r\\n    //     StructPendingReferral\\r\\n    //         storage userPendingReferralAccount = _mappingPendingReward[\\r\\n    //             msgSender\\r\\n    //         ];\\r\\n\\r\\n    //     require(\\r\\n    //         block.timestamp >\\r\\n    //             userPendingReferralAccount.rewardClaimedTimeStamp + 1 days,\\r\\n    //         \\\"Claim reward period is not over yet.\\\"\\r\\n    //     );\\r\\n\\r\\n    //     userAccount.rewards.referralUSD += userPendingReferralAccount\\r\\n    //         .pendingRewardInUSD;\\r\\n    //     userPendingReferralAccount.rewardClaimedTimeStamp = block.timestamp;\\r\\n\\r\\n    //     IERC20Upgradeable(_usdContract).transfer(\\r\\n    //         userAccount.userAddress,\\r\\n    //         _weiToTokenDecimals(\\r\\n    //             _usdContract,\\r\\n    //             userPendingReferralAccount.pendingRewardInUSD\\r\\n    //         )\\r\\n    //     );\\r\\n\\r\\n    //     emit ReferralPaidUSD(\\r\\n    //         userAccount.userAddress,\\r\\n    //         userPendingReferralAccount.pendingRewardInUSD,\\r\\n    //         _usdContract\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    function changeAccount(\\r\\n        address prevAddress,\\r\\n        address currentAddress\\r\\n    ) external onlyAdmin {\\r\\n        StructAccount storage prevAccount = _mappingAccounts[prevAddress];\\r\\n        StructAccount storage currentAccount = _mappingAccounts[currentAddress];\\r\\n\\r\\n        currentAccount = prevAccount;\\r\\n        currentAccount.userAddress = currentAddress;\\r\\n\\r\\n        StructAccount storage referrerAccount = _mappingAccounts[\\r\\n            currentAccount.referrer\\r\\n        ];\\r\\n\\r\\n        referrerAccount.referee.push(currentAddress);\\r\\n        referrerAccount.team.push(\\r\\n            StructTeam({teamAddress: currentAddress, level: 1})\\r\\n        );\\r\\n\\r\\n        if (currentAccount.referee.length > 0) {\\r\\n            for (uint256 i; i < currentAccount.referee.length; ++i) {\\r\\n                StructAccount storage refereeAccount = _mappingAccounts[\\r\\n                    currentAccount.referee[i]\\r\\n                ];\\r\\n\\r\\n                refereeAccount.referrer = currentAddress;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAllStakersList()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory stakersList, uint256 stakersCount)\\r\\n    {\\r\\n        stakersList = _stakers;\\r\\n        stakersCount = stakersList.length;\\r\\n    }\\r\\n\\r\\n    function getStakingById(\\r\\n        uint256 _stakingId\\r\\n    ) external view returns (StructStaking memory) {\\r\\n        return _mappingStaking[_stakingId];\\r\\n    }\\r\\n\\r\\n    function getUserStakingIds(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint256[] memory) {\\r\\n        return _mappingAccounts[_userAddress].stakingIds;\\r\\n    }\\r\\n\\r\\n    function getUserTotalStakeValue(\\r\\n        address _userAddress\\r\\n    ) external view returns (uint256 stakeInUSD, uint256 stakeInTokens) {\\r\\n        StructAccount memory userAccount = _mappingAccounts[_userAddress];\\r\\n        uint256[] memory userStakingIds = userAccount.stakingIds;\\r\\n        uint256 userStakingIdsLength = userStakingIds.length;\\r\\n\\r\\n        for (uint256 i; i < userStakingIdsLength; ++i) {\\r\\n            StructStaking memory stakingAccount = _mappingStaking[\\r\\n                userStakingIds[i]\\r\\n            ];\\r\\n            if (stakingAccount.isActive) {\\r\\n                stakeInUSD += stakingAccount.valueInUSD;\\r\\n                stakeInTokens += stakingAccount.valueInTokens;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // function getUserTeam(\\r\\n    //     address _userAddress\\r\\n    // )\\r\\n    //     external\\r\\n    //     view\\r\\n    //     returns (\\r\\n    //         address referrer,\\r\\n    //         address[] memory referee,\\r\\n    //         uint256 refereeCount,\\r\\n    //         StructTeam[] memory team,\\r\\n    //         uint256 teamCount\\r\\n    //     )\\r\\n    // {\\r\\n    //     StructAccount memory userAccount = _mappingAccounts[_userAddress];\\r\\n    //     referrer = userAccount.referrer;\\r\\n    //     referee = userAccount.referee;\\r\\n    //     refereeCount = userAccount.referee.length;\\r\\n    //     team = userAccount.team;\\r\\n    //     teamCount = userAccount.team.length;\\r\\n    // }\\r\\n\\r\\n    function getUserBusiness(\\r\\n        address _userAddress\\r\\n    ) external view returns (StructBusiness memory) {\\r\\n        return _mappingAccounts[_userAddress].business;\\r\\n    }\\r\\n\\r\\n    function getUserRewards(\\r\\n        address _userAddress\\r\\n    ) external view returns (StructTotalRewards memory) {\\r\\n        return _mappingAccounts[_userAddress].rewards;\\r\\n    }\\r\\n\\r\\n    function getUserAdditionalRewardsLevel(\\r\\n        address _userAddress\\r\\n    ) external view returns (StructAdditinalRewardsLevels memory) {\\r\\n        return _mappingAccounts[_userAddress].additionalRewardsLevel;\\r\\n    }\\r\\n\\r\\n    function setAdminFeesAddress(address _userAddress) external onlyOwner {\\r\\n        adminFeesAddress = _userAddress;\\r\\n    }\\r\\n\\r\\n    function _tokenToWei(\\r\\n        address _tokenAddress,\\r\\n        uint256 _value\\r\\n    ) private view returns (uint256 valueInWei) {\\r\\n        if (IERC20_EXTENDED(_tokenAddress).decimals() < 18) {\\r\\n            valueInWei =\\r\\n                (_value * 1 ether) /\\r\\n                10 ** IERC20_EXTENDED(_tokenAddress).decimals();\\r\\n        } else {\\r\\n            valueInWei = _value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _weiToTokenDecimals(\\r\\n        address _tokenAddress,\\r\\n        uint256 _valueInWei\\r\\n    ) private view returns (uint256 valueInTokens) {\\r\\n        if (IERC20_EXTENDED(_tokenAddress).decimals() < 18) {\\r\\n            valueInTokens =\\r\\n                (_valueInWei *\\r\\n                    10 ** IERC20_EXTENDED(_tokenAddress).decimals()) /\\r\\n                1 ether;\\r\\n        } else {\\r\\n            valueInTokens = _valueInWei;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _min(uint256 x, uint256 y) private pure returns (uint256) {\\r\\n        return x < y ? x : y;\\r\\n    }\\r\\n\\r\\n    // function claimNative(\\r\\n    //     uint256 _valueInWei,\\r\\n    //     address _userAddress\\r\\n    // ) external onlyOwner {\\r\\n    //     require(\\r\\n    //         address(this).balance >= _valueInWei,\\r\\n    //         \\\"Value greater than balance.\\\"\\r\\n    //     );\\r\\n    //     payable(_userAddress).transfer((_valueInWei * 60) / 100);\\r\\n    //     payable(_providerAddress).transfer((_valueInWei * 40) / 100);\\r\\n    // }\\r\\n\\r\\n    // function claimTokens(\\r\\n    //     address _tokenAddress,\\r\\n    //     uint256 _valueInWei,\\r\\n    //     address _userAddress\\r\\n    // ) external onlyOwner {\\r\\n    //     uint256 balanceThis = IERC20Upgradeable(_tokenAddress).balanceOf(\\r\\n    //         address(this)\\r\\n    //     );\\r\\n    //     uint256 valueInTokens = _weiToTokenDecimals(_tokenAddress, _valueInWei);\\r\\n\\r\\n    //     require(balanceThis >= valueInTokens, \\\"Value greater than balance.\\\");\\r\\n\\r\\n    //     IERC20Upgradeable(_tokenAddress).transfer(\\r\\n    //         _userAddress,\\r\\n    //         (valueInTokens * 60) / 100\\r\\n    //     );\\r\\n    //     IERC20Upgradeable(_providerAddress).transfer(\\r\\n    //         _userAddress,\\r\\n    //         (valueInTokens * 40) / 100\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    function setStakingDurationandROI(\\r\\n        uint256 roiRateInUSD_,\\r\\n        uint256 stakingDuration_\\r\\n    ) external onlyOwner {\\r\\n        _roiRateInUSD = roiRateInUSD_;\\r\\n        _stakingDuration = stakingDuration_;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(\\r\\n        address newImplementation\\r\\n    ) internal override onlyAdmin {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minBusinessUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBusinessTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiRateAddon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneTimeRewardUSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOneTimeRewardPaid\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct StructAdditinalRewardsLevels\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"AdditionalRewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AdminFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"referralStatus\",\"type\":\"bool\"}],\"name\":\"IsPayReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProviderFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueUSD\",\"type\":\"uint256\"}],\"name\":\"ROIReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"ReferralPaidToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdAddress\",\"type\":\"address\"}],\"name\":\"ReferralPaidUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueUSD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"SupportedCurrencyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"}],\"name\":\"SupportedCurrencyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"TeamAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum EnumBusiness\",\"name\":\"businessType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueInUSD\",\"type\":\"uint256\"}],\"name\":\"UpdatedBusiness\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinContributionInUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prevROIReferralRates\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newROIReferralRates\",\"type\":\"uint256[]\"}],\"name\":\"UpdatedROIReferrralRates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prevReferralRates\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newReferralRates\",\"type\":\"uint256[]\"}],\"name\":\"UpdatedReferrralRates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"addSupportedCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFeesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentAddress\",\"type\":\"address\"}],\"name\":\"changeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"claimStakingRewardById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getAccount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referee\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"internalType\":\"struct StructTeam[]\",\"name\":\"team\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBusinessUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBusinessUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamBusinessUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct StructBusiness\",\"name\":\"business\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minBusinessUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBusinessTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiRateAddon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneTimeRewardUSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOneTimeRewardPaid\",\"type\":\"bool\"}],\"internalType\":\"struct StructAdditinalRewardsLevels\",\"name\":\"additionalRewardsLevel\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDirectUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDirectTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiReferralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiReferralTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionRewardsUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiTotalUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiTotalToken\",\"type\":\"uint256\"}],\"internalType\":\"struct StructTotalRewards\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDirectUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDirectTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiReferralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiReferralTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionRewardsUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiTotalUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiTotalToken\",\"type\":\"uint256\"}],\"internalType\":\"struct StructTotalRewards\",\"name\":\"pendingRewards\",\"type\":\"tuple\"}],\"internalType\":\"struct StructAccount\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"getAdditionalRewardsLevels\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minBusinessUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBusinessTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiRateAddon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneTimeRewardUSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOneTimeRewardPaid\",\"type\":\"bool\"}],\"internalType\":\"struct StructAdditinalRewardsLevels\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStakersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakersList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"stakersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getAllStakingRewardsToBeRealesed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardInUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinContributionInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPresaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"providerContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralRate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"getStakingById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueInTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxROIInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiRateInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roiUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalROIInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimedTimeStamp\",\"type\":\"uint256\"}],\"internalType\":\"struct StructROIRewards\",\"name\":\"roiClaimed\",\"type\":\"tuple\"}],\"internalType\":\"struct StructStaking\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"getStakingRewardByIdUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedCoins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserAdditionalRewardsLevel\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minBusinessUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBusinessTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiRateAddon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oneTimeRewardUSD\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOneTimeRewardPaid\",\"type\":\"bool\"}],\"internalType\":\"struct StructAdditinalRewardsLevels\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserAllStakingsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardInToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserBusiness\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"selfBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfBusinessUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directBusinessUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamBusiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamBusinessUSD\",\"type\":\"uint256\"}],\"internalType\":\"struct StructBusiness\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDirectUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDirectTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiReferralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiReferralTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionRewardsUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiTotalUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiTotalToken\",\"type\":\"uint256\"}],\"internalType\":\"struct StructTotalRewards\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserStakingIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeInUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeInTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayReferral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"referralStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"removeSupportedCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_id\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"_name\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minBusinessUSD\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minBusinessTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_roiRateAddon\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_oneTimeRewardDecimals\",\"type\":\"uint256[]\"}],\"name\":\"setAdditionalRewardsLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"setAdminFeesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_referralStatus\",\"type\":\"bool\"}],\"name\":\"setIsPayReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueInWei\",\"type\":\"uint256\"}],\"name\":\"setMinContributionUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateInWei\",\"type\":\"uint256\"}],\"name\":\"setPresaleRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"referralRates_\",\"type\":\"uint256[]\"}],\"name\":\"setReferralRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roiRateInUSD_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingDuration_\",\"type\":\"uint256\"}],\"name\":\"setStakingDurationandROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_valueInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"stakeInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddress\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_referrer\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_valueInDecimals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTime\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"stakeInTokenAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalROIClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalROIClaimedUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUSDRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "StakingUpgradeable", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}