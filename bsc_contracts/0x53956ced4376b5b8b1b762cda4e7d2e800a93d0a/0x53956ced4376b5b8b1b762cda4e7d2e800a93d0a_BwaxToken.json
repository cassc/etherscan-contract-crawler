{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BwaxToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {}\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\ncontract BwaxStaking is ERC20 {\\n    using Address for address;\\n    ERC20 public immutable _token;\\n    ERC20 public immutable _usdtToken;\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n\\n    address internal immutable dev;\\n    address internal immutable ops;\\n    \\n    // configuration\\n    uint internal constant MINSTK  = 25 ether;\\n    uint[] internal COMMISSIONS    = [500, 200, 100, 100]; // (5% to 9%) LQTYPROVIDER + STKING\\n    uint[] internal LQTYPROVDR     = [25 ether, 50 ether, 100 ether, 500 ether, 2500 ether, 5000 ether];\\n    uint[] internal LQTYRWARDS     = [16250, 17000, 17500, 16000, 16800, 24000];\\n    uint internal constant BRIO    = 4000; // Burn 40% each on sales\\n    uint internal constant PLRSTP  = 500 ether; // 2% for every 500 USDT\\n    uint8 internal constant PROPLR = 2; // 2% for every PLRSTP\\n    uint8 internal constant PROPCP = 20; // 40% CAP\\n    uint internal constant OPFEES  = 3000; // 30% ops\\n    uint internal constant CAP     = 3;\\n    uint internal constant TIMER   = 1 days;\\n    // uint internal constant TIMER   = 1 minutes;\\n    uint internal constant DPRCT   = 100;\\n    uint internal constant DIVDR   = 10000;\\n\\n    struct User{\\n        uint id;\\n        address sponsor;\\n        uint lastharvest; // last harvest\\n        uint refCount;\\n        Finances finances;\\n        LqtyProvider provider;\\n    }\\n\\n    struct Finances{\\n        uint avblbalance; // Available Balance\\n        uint activestake; // active stake\\n        uint totalstaked;\\n        uint tlearnings; // total earned\\n        uint tlharvested;\\n        uint commissions; \\n    }\\n\\n    struct LqtyProvider{\\n        uint8 currentplan; // prevent downgrade is activevolume > 0\\n        uint tlactivation; // total amount activated\\n        uint activevolume; // amount left to sell\\n        uint dailylimit;\\n        uint salesStart; // 24hrs after activation\\n        uint lastSale; // last sale\\n        uint tlsoldtoday;\\n        uint tlvolumesold; // total sales executed.\\n    }\\n\\n    struct TokenReward{\\n        uint actbalance;\\n        uint received;\\n        uint cleared;\\n        uint lastupdate;\\n    }\\n\\n    struct SmartStats{\\n        uint lastUserid;\\n        uint totalStaked;\\n        uint tokenEarned;\\n        uint totalActivation;\\n        uint dailyActivation;\\n        uint totalEarnings;\\n        uint totalCommiss;\\n        uint totalSold;\\n        uint totalWithdrawn;\\n        uint nextUpdate;\\n    }\\n\\n    mapping(address => User) public users;\\n\\n    mapping(address => TokenReward) public trewards;\\n\\n    SmartStats public stats;\\n\\n    event NewPlayer(address indexed _user, address _sponsor);\\n\\n    event NewDownline(address indexed _user, address _downline, uint8 _level);\\n\\n    event LiquidityProvided(address indexed _user, uint _amount, bool _standard);\\n\\n    event CommissionCredited(address indexed _user, uint _amount, uint8 _level, bool _standard);\\n\\n    event OperationFeesPaid(address indexed _user, uint _amount);\\n\\n    event TokenSold(address indexed _user, uint _tokens, uint _usdtValue);\\n\\n    event EarningsWithdrawn(address indexed _user, uint _amount);\\n\\n    constructor() ERC20(\\\"BwaxToken\\\", \\\"BWAX\\\"){\\n        ops = address(0x3DB25277b9BAa2D06CeE34c850A238B0f6E9F5eE);\\n        dev = msg.sender;\\n        _token = ERC20(address(this));\\n        _usdtToken = ERC20(address(0x55d398326f99059fF775485246999027B3197955)); \\n        // 0x55d398326f99059fF775485246999027B3197955 mainnet <= => test 0xC6Efc0f7AF6e0B3e413d8FdD339FAf4d9a6e2D8F\\n        stats.nextUpdate = block.timestamp + TIMER;\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \\n        // 0x10ED43C718714eb63d5aA57B78B54704E256024E main <= => test 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\\n        uniswapV2Router = _uniswapV2Router;\\n        stats.lastUserid++;\\n        users[dev].id = stats.lastUserid;\\n        users[dev].provider.currentplan = 5; \\n    }\\n\\n    // register user\\n    function register(address _user, address _sponsor) private{\\n        // must be active stakeer or active provider\\n        if(_sponsor == _user || _sponsor == address(0) || \\n        (users[_sponsor].finances.totalstaked == 0 && users[_sponsor].provider.tlactivation == 0))\\n            _sponsor = dev;\\n        \\n        stats.lastUserid++;\\n        users[_user].id = stats.lastUserid;\\n        users[_user].sponsor = _sponsor;\\n        users[_sponsor].refCount++;\\n    }\\n\\n    function trackActiveReward(address _user) private view returns(uint _liveBalance){\\n        uint _start = trewards[_user].lastupdate;\\n        uint _end   = block.timestamp;\\n        uint _diff  = _end - _start;\\n\\n        _liveBalance = _diff * (trewards[_user].actbalance * DPRCT / DIVDR) / TIMER;\\n\\n        _liveBalance = trewards[_user].cleared >= trewards[_user].received * CAP ? 0 : _liveBalance;\\n    }\\n\\n    function tActiveBalance(address _user, uint _amount) private view returns(uint _aBalance){\\n        _aBalance = trewards[_user].actbalance;\\n        if(_aBalance == 0) return _amount;\\n        uint _liveBalance = trackActiveReward(_user);\\n        _aBalance -= _liveBalance * _aBalance / (_aBalance * CAP);\\n        _aBalance += _amount;\\n    }\\n\\n    function earnTokenOnLqty(address _user, uint _amount) private {\\n        updateReward(_user);\\n        uint _activeBalance          = tActiveBalance(_user, _amount);\\n        TokenReward storage _ureward = trewards[_user];\\n        _ureward.received            = _amount;\\n        _ureward.actbalance          = _activeBalance;\\n        _ureward.lastupdate          = block.timestamp;\\n        stats.tokenEarned           += _amount;\\n    }\\n\\n    function updateReward(address _user) private {\\n        TokenReward storage _ureward = trewards[_user];\\n        uint _pending = trackActiveReward(_user);\\n        if(_pending > 0){\\n            uint _trcktivebalance = tActiveBalance(_user, 0);\\n            _ureward.lastupdate = block.timestamp;\\n            _ureward.actbalance = _trcktivebalance;\\n            _ureward.cleared += _pending;\\n            _balances[address(this)] -= _pending;\\n            _balances[_user] += _pending;\\n        }\\n    }\\n\\n    function activationVolume(uint _amount) private view returns(uint8 _volume, uint _limit){\\n        if(_amount >= LQTYPROVDR[0] && _amount < LQTYPROVDR[1]){\\n            _volume = 0; \\n            _limit = 1 ether;\\n        }\\n        if(_amount >= LQTYPROVDR[1] && _amount < LQTYPROVDR[2]){\\n            _volume = 1; \\n            _limit = 2.5 ether;\\n        }\\n        if(_amount >= LQTYPROVDR[2] && _amount < LQTYPROVDR[3]){\\n            _volume = 2; \\n            _limit = 5 ether;\\n        }\\n        if(_amount >= LQTYPROVDR[3] && _amount < LQTYPROVDR[4]){\\n            _volume = 3; \\n            _limit = 7 ether;\\n        }\\n        if(_amount >= LQTYPROVDR[4] && _amount < LQTYPROVDR[5]){\\n            _volume = 4; \\n            _limit = 50 ether;\\n        }\\n        if(_amount >= LQTYPROVDR[5]){\\n            _volume = 5; \\n            _limit = 125 ether;\\n        }\\n    }\\n\\n    function dispatchRewards(address _usr, uint _amount, bool _provider) private{\\n        // pay commissions\\n        uint _tcommission;\\n        address _sponsor = users[_usr].sponsor;\\n        if(_provider){\\n            for(uint8 _i = 0; _i < 4; _i++){\\n                uint _comm = _amount * COMMISSIONS[_i] / DIVDR;\\n                _tcommission += _comm;\\n            }\\n            for(uint8 i = 1; i < 5; i++) {\\n                uint _commission = _amount * COMMISSIONS[i - 1] / DIVDR;\\n                if(_sponsor == address(0)) break;\\n                // check user's qualifications\\n                if(users[_sponsor].provider.currentplan >= i && users[_sponsor].finances.tlearnings < users[_sponsor].finances.totalstaked * CAP){\\n                    users[_sponsor].finances.avblbalance += _commission;\\n                    users[_sponsor].finances.tlearnings += _commission;\\n                    users[_sponsor].finances.commissions += _commission;\\n                    stats.totalEarnings += _commission;\\n                    stats.totalCommiss += _commission;\\n                    _tcommission -= _commission;\\n                }\\n                _sponsor = users[_sponsor].sponsor;\\n            }\\n        }\\n        else{\\n            if(_sponsor == address(0)) _sponsor = dev;\\n            uint _commission = _amount * COMMISSIONS[0] / DIVDR;\\n            users[_sponsor].finances.avblbalance += _commission;\\n            users[_sponsor].finances.tlearnings += _commission;\\n            users[_sponsor].finances.commissions += _commission;\\n            stats.totalEarnings += _commission;\\n            stats.totalCommiss += _commission;\\n        }\\n\\n        // ops \\n        uint _ops = _amount * OPFEES / DIVDR;\\n\\n        _usdtToken.transfer(ops, _ops/2);\\n        _usdtToken.transfer(dev, (_ops/2 + _tcommission));\\n    }\\n\\n    function provideSmartLqty(address _usr, uint _amount) private{\\n        uint8 _currentPlan = users[_usr].provider.currentplan;\\n        if(users[_usr].provider.activevolume > 0){\\n            require(_amount >= LQTYPROVDR[_currentPlan], \\\"noDownGrade\\\");\\n        }\\n        (uint8 _planId, uint _limit) = activationVolume(_amount);\\n        // smartProviders\\n        User storage _user = users[_usr];\\n        if(_user.provider.tlactivation == 0) \\n            _user.provider.salesStart = block.timestamp + TIMER;\\n        _user.provider.tlactivation += _amount;\\n        _user.provider.activevolume += _amount * LQTYRWARDS[_planId] / DIVDR;\\n        _user.provider.dailylimit = _limit;\\n        if(_user.provider.currentplan != _planId) \\n            _user.provider.currentplan = _planId;\\n        // dispatch rewards\\n        dispatchRewards(_usr, _amount, true);\\n        stats.totalActivation += _amount;\\n        if(stats.nextUpdate <= block.timestamp) {\\n            stats.dailyActivation = _amount;\\n            stats.nextUpdate += TIMER ;\\n        }\\n        else{\\n            stats.dailyActivation += _amount;\\n        }\\n    }\\n\\n    function checkActiveLqty(address _usr, uint _amount) private returns(uint _active){\\n        _active = users[_usr].finances.activestake;\\n        if(_active == 0) return _amount;\\n        uint _dividend = checkDividend(_usr);\\n        uint _pctEarned = _dividend / (_active * CAP);\\n        uint _dif = _pctEarned * _active;\\n        _active -= _dif;\\n        _active += _amount;\\n        users[_usr].finances.avblbalance += _dividend;\\n        users[_usr].finances.tlearnings += _dividend;\\n        stats.totalEarnings += _dividend;\\n    }\\n\\n    function provideStandardLqty(address _usr, uint _amount) private{\\n        // staking\\n        User storage _user = users[_usr];\\n        _user.lastharvest = block.timestamp;\\n        _user.finances.activestake = checkActiveLqty(_usr, _amount);\\n        _user.finances.totalstaked += _amount;\\n        stats.totalStaked += _amount;\\n        // dispatch rewards\\n        dispatchRewards(_usr, _amount, false);\\n        // credit tokens\\n        uint _tokenAmount = _getTokenRate(_amount, address(_usdtToken), address(this));\\n        _tokenAmount     += _tokenAmount  *  OPFEES / DIVDR;\\n        if(balanceOf(address(this)) >= _tokenAmount){\\n            earnTokenOnLqty(_usr, _tokenAmount);\\n        }\\n    }\\n\\n    // provide liquidity\\n    function provideLiquidity(address _sponsor, uint _amount, bool _booster) public {\\n        // prevent contract calling \\n        require(!address(msg.sender).isContract(), \\\"NotAllowed\\\");\\n        if(users[msg.sender].id == 0 || users[msg.sender].sponsor == address(0)) \\n            register(msg.sender, _sponsor);\\n        require(_amount >= LQTYPROVDR[0], \\\"25MINM\\\");\\n        require(_usdtToken.transferFrom(msg.sender, address(this), _amount), \\\"TXfailed\\\");\\n        if(_booster) \\n            provideSmartLqty(msg.sender, _amount);\\n        else \\n            provideStandardLqty(msg.sender, _amount);\\n    }\\n\\n    // harvest reward\\n    function harvestReward() public {\\n        // prevent contract calling \\n        require(!address(msg.sender).isContract(), \\\"NotAllowed\\\");\\n        // most be staker\\n\\n        require(users[msg.sender].lastharvest + TIMER <= block.timestamp, \\\"24hrs\\\");\\n\\n        User storage _user = users[msg.sender];\\n\\n        require(_user.id != 0 && _user.finances.totalstaked > 0, \\\"NoStk\\\");\\n\\n        uint _amount = _user.finances.avblbalance;\\n\\n        uint _dividend = checkDividend(msg.sender);\\n\\n        if(_dividend > 0){\\n            _amount += _dividend; \\n        }\\n\\n        checkActiveLqty(msg.sender, 0); // actualize active stk\\n\\n        _user.finances.avblbalance = 0;\\n        _user.finances.tlharvested += _amount;\\n        _user.lastharvest = block.timestamp;\\n\\n        require(_amount < _usdtToken.balanceOf(address(this)), \\\"NoFnd\\\");\\n\\n        _usdtToken.transfer(msg.sender, _amount);\\n\\n        stats.totalWithdrawn += _amount;\\n    }\\n\\n    function checkDividends(address _user) public view returns(uint _div){\\n        _div = checkDividend(_user) + users[_user].finances.avblbalance;\\n    }\\n\\n    function checkDividend(address _user) private view returns(uint _div){\\n        uint _start = users[_user].lastharvest;\\n        uint _end = block.timestamp;\\n        uint _diff = _end - _start;\\n\\n        _div = _diff * (users[_user].finances.activestake * DPRCT / DIVDR) / TIMER; // check per seconds\\n\\n        _div = users[_user].finances.tlearnings >= users[_user].finances.totalstaked * CAP ? 0 : _div;\\n    }\\n\\n    function getTokenAmount(\\n        address _tokenA,\\n        address _tokenB,\\n        uint _amountIn\\n    ) private view returns (uint[] memory amounts) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenA;\\n        path[1] = _tokenB;\\n        amounts = uniswapV2Router.getAmountsOut(_amountIn, path);\\n        return amounts;\\n    }\\n\\n    function _getTokenRate(\\n        uint256 _amount,\\n        address _base,\\n        address _secondary\\n    ) private view returns (uint256 _tokens) {\\n        uint[] memory _estimates = getTokenAmount(\\n            address(_base),\\n            address(_secondary),\\n            _amount\\n        );\\n        return _estimates[1];\\n    }\\n\\n    function boosterTokenRate() public view returns(uint _value){\\n        _value = _getTokenRate(1 ether, address(this), address(_usdtToken)) * DPRCT; // fecth from panackageswap * 100x\\n    }\\n\\n    function _getPropeller() private view returns(uint8 _propeller){\\n        uint8 _target = uint8(stats.dailyActivation % PLRSTP) > 0 ? uint8(stats.dailyActivation % PLRSTP) : 0;\\n        _target       = _target > PROPCP ? PROPCP : _target;\\n        for(uint8 i = 0; i < _target; i++){\\n            _propeller += PROPLR;\\n        }\\n    }\\n\\n    function getTokenAmount_(uint _amount) public view returns(uint _tokenAmount){\\n        uint _tokenValue  = _getTokenRate(_amount, address(_usdtToken), address(this));\\n        _tokenAmount = _tokenValue / (DPRCT + _getPropeller());\\n    }\\n\\n    // sell on booster [receive amount in usdt] \\n    // to prevent issue with putting exact amount\\n    function sellToken(uint _amount) public {\\n        // prevent contract calling \\n        require(!address(msg.sender).isContract(), \\\"NotAllowed\\\");\\n        require(users[msg.sender].provider.salesStart <= block.timestamp, \\\"Wait24H\\\");\\n        require(_amount >= 0.5 ether, \\\"1USDT\\\"); // requires at least 0.5 usdt per order\\n        updateReward(msg.sender);\\n        // prevent contract calling \\n        require(!address(msg.sender).isContract(), \\\"NotAllowed\\\");\\n        User storage _user = users[msg.sender];\\n        // require active volume\\n        require(_user.provider.activevolume > 0, \\\"NoLqty\\\");\\n\\n        uint _tokenAmount = getTokenAmount_(_amount);\\n\\n        uint _limit       = _user.provider.dailylimit;\\n\\n        if(_usdtToken.balanceOf(address(this)) < _amount) return;\\n\\n        if(_user.provider.lastSale + TIMER < block.timestamp) {\\n            _user.provider.tlsoldtoday = 0;\\n        }\\n        \\n        if(_user.provider.salesStart + TIMER > block.timestamp){\\n            _limit -= _user.provider.tlsoldtoday;\\n        }\\n\\n        require(_amount <= _limit, \\\"ExceedLmt\\\");\\n\\n        require(balanceOf(msg.sender) >=  _tokenAmount, \\\"LowBalance\\\");\\n\\n        _transfer(msg.sender, address(this), _tokenAmount);\\n        // burn 40% of token sold\\n        _burn(address(this), (_tokenAmount * BRIO / DIVDR));\\n        stats.totalSold += _amount;\\n        _user.provider.activevolume -= _amount;\\n        _user.provider.tlsoldtoday += _amount;\\n        _user.provider.tlvolumesold += _amount;\\n\\n        _user.provider.lastSale = block.timestamp;\\n\\n        if(_user.provider.tlsoldtoday >= _user.provider.dailylimit){\\n            _user.provider.tlsoldtoday = 0;\\n            _user.provider.salesStart = block.timestamp + TIMER;\\n        }\\n\\n        require(_usdtToken.transfer(msg.sender, _amount), \\\"TXfailed\\\");\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        uint _balance = _balances[account];\\n        uint _breward = trackActiveReward(account);\\n        return _balance + _breward;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            updateReward(sender);\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n}\\n\\ncontract BwaxToken is Ownable, BwaxStaking {\\n    bool public limited;\\n    uint256 public maxHoldingAmount;\\n    uint256 public minHoldingAmount;\\n    address public uniswapV2Pair;\\n    mapping(address => bool) public blacklists;\\n\\n    constructor() {\\n        _mint(msg.sender, 10e31);\\n    }\\n\\n    function blacklist(address _address, bool _isBlacklisting) external onlyOwner {\\n        blacklists[_address] = _isBlacklisting;\\n    }\\n\\n    function setRule(bool _limited, address _uniswapV2Pair, uint256 _maxHoldingAmount, uint256 _minHoldingAmount) external onlyOwner {\\n        limited = _limited;\\n        uniswapV2Pair = _uniswapV2Pair;\\n        maxHoldingAmount = _maxHoldingAmount;\\n        minHoldingAmount = _minHoldingAmount;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) override internal virtual {\\n        require(!blacklists[to] && !blacklists[from], \\\"Blacklisted\\\");\\n\\n        if (uniswapV2Pair == address(0)) {\\n            require(from == owner() || to == owner(), \\\"trading is not started\\\");\\n            return;\\n        }\\n\\n        if (limited && from == uniswapV2Pair) {\\n            require(super.balanceOf(to) + amount <= maxHoldingAmount && super.balanceOf(to) + amount >= minHoldingAmount, \\\"Forbid\\\");\\n        }\\n    }\\n\\n    function burn(uint256 value) external {\\n        _burn(msg.sender, value);\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_standard\",\"type\":\"bool\"}],\"name\":\"CommissionCredited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EarningsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_standard\",\"type\":\"bool\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_downline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"NewDownline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"OperationFeesPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_usdtValue\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdtToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_div\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_booster\",\"type\":\"bool\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limited\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxHoldingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minHoldingAmount\",\"type\":\"uint256\"}],\"name\":\"setRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUserid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalActivation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyActivation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommiss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actbalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cleared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastupdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastharvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"avblbalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activestake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalstaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tlearnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tlharvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissions\",\"type\":\"uint256\"}],\"internalType\":\"struct BwaxStaking.Finances\",\"name\":\"finances\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"currentplan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"tlactivation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activevolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailylimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tlsoldtoday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tlvolumesold\",\"type\":\"uint256\"}],\"internalType\":\"struct BwaxStaking.LqtyProvider\",\"name\":\"provider\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BwaxToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}