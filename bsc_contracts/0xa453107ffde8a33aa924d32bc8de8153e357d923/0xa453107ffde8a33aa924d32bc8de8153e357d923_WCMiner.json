{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7; // solhint-disable-line\r\n\r\n/*\r\n*    ___       __   ________                _____ ______   ___  ________   _______   ________     \r\n*   |\\  \\     |\\  \\|\\   ____\\              |\\   _ \\  _   \\|\\  \\|\\   ___  \\|\\  ___ \\ |\\   __  \\    \r\n*   \\ \\  \\    \\ \\  \\ \\  \\___|  ____________\\ \\  \\\\\\__\\ \\  \\ \\  \\ \\  \\\\ \\  \\ \\   __/|\\ \\  \\|\\  \\   \r\n*    \\ \\  \\  __\\ \\  \\ \\  \\    |\\____________\\ \\  \\\\|__| \\  \\ \\  \\ \\  \\\\ \\  \\ \\  \\_|/_\\ \\   _  _\\  \r\n*     \\ \\  \\|\\__\\_\\  \\ \\  \\___\\|____________|\\ \\  \\    \\ \\  \\ \\  \\ \\  \\\\ \\  \\ \\  \\_|\\ \\ \\  \\\\  \\| \r\n*      \\ \\____________\\ \\_______\\             \\ \\__\\    \\ \\__\\ \\__\\ \\__\\\\ \\__\\ \\_______\\ \\__\\\\ _\\ \r\n*       \\|____________|\\|_______|              \\|__|     \\|__|\\|__|\\|__| \\|__|\\|_______|\\|__|\\|__|\r\n*                                                                                                 \r\n*\r\n*   [ Wolf Crypto Miner ]\r\n*   Website: https://WCMiner.finance\r\n*   Twitter: https://twitter.com/WolfOfCrypto885\r\n*   Discord: https://discord.gg/bBwPdV6q8U\r\n*   Telegram: https://t.me/+vyNxJgY6zwAzNmY8\r\n*\r\n*/\r\n\r\n\r\ncontract WCMiner {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public EGGS_TO_HATCH_1MINERS=2592000;//for final version should be seconds in a day\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    address public ceoAddress2;\r\n    mapping (address => address) public referrals;\r\n    mapping (address => uint256) public compoundTimes;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 totalWithdrawn;\r\n        uint256 miners;\r\n        uint256 claimedEggs;\r\n        uint256 lastHatch;\r\n        uint256 lastSell;\r\n        uint256 compoundCount;\r\n        address referrer;\r\n        uint256 referralEggRewards;\r\n    }\r\n\r\n    mapping (address => User) users;\r\n\r\n    uint256 public marketEggs;\r\n    constructor(address _ceo, address _ceo2) {\r\n        ceoAddress = _ceo;\r\n        ceoAddress2 = _ceo2;\r\n    }\r\n    function CompoundRewards(address ref) public {\r\n        require(initialized);\r\n        User storage user = users[msg.sender];\r\n        if (user.referrer == address(0)) {\r\n            if (ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n            if (ref == msg.sender || ref == address(0) || users[ref].miners == 0) {\r\n                user.referrer = ceoAddress;\r\n            } else {\r\n                user.referrer = ref;\r\n            }\r\n        }\r\n        \r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 newMiners = SafeMath.div(eggsUsed,EGGS_TO_HATCH_1MINERS);\r\n        newMiners = SafeMath.sub(newMiners, devFee(newMiners, 5));\r\n        user.miners = SafeMath.add(user.miners, newMiners);\r\n\r\n        if (SafeMath.sub(block.timestamp,users[msg.sender].lastHatch) > 3) {\r\n            uint256 eggsUsedValue = calculateEggSell(eggsUsed);\r\n            user.userDeposit = SafeMath.add(user.userDeposit, eggsUsedValue);\r\n        }\r\n\r\n        //send referral eggs\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            uint256 refRewards = SafeMath.div(SafeMath.mul(eggsUsed,12), 100);\r\n            users[upline].claimedEggs = SafeMath.add(users[upline].claimedEggs, refRewards);\r\n            users[upline].referralEggRewards = users[upline].referralEggRewards.add(calculateEggSell(refRewards));\r\n        }\r\n        \r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n        //boost market to nerf miners hoarding\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed, 5));\r\n    }\r\n    function ClaimRewards() public {\r\n        require(initialized);\r\n        User storage user = users[msg.sender];\r\n\r\n        // require(user.lastHatch + 1 days <= block.timestamp, \"You can withdraw after 24hours\");\r\n        \r\n        uint256 hasEggs=getMyEggs();\r\n        if (user.lastSell + 28 days <= block.timestamp) { // over 4weeks\r\n            hasEggs = SafeMath.div(SafeMath.mul(hasEggs, 1090), 1000);\r\n            user.compoundCount = 0;\r\n        } else if (user.lastSell + 21 days <= block.timestamp) { // 3weeks\r\n            hasEggs = SafeMath.div(SafeMath.mul(hasEggs, 1075), 1000);\r\n            user.compoundCount = 0;\r\n        } else if (user.lastSell + 14 days <= block.timestamp) { // 2weeks\r\n            hasEggs = SafeMath.div(SafeMath.mul(hasEggs, 1050), 1000);\r\n            user.compoundCount = 0;\r\n        } else if (user.lastSell + 7 days <= block.timestamp) { // 1weeks\r\n            hasEggs = SafeMath.div(SafeMath.mul(hasEggs, 1030), 1000);\r\n            user.compoundCount = 0;\r\n        }\r\n        \r\n        uint256 eggValue=calculateEggSell(hasEggs);\r\n        eggValue = min(eggValue, getBalance());\r\n        uint256 fee=devFee(eggValue, 7);\r\n        eggValue = SafeMath.sub(eggValue, fee);\r\n        uint256 fee2=fee/2;\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n        user.lastSell = block.timestamp;\r\n        user.totalWithdrawn = user.totalWithdrawn.add(eggValue);\r\n        marketEggs=SafeMath.add(marketEggs, hasEggs);\r\n        payable(ceoAddress).transfer(fee2);\r\n        payable(ceoAddress2).transfer(fee-fee2);\r\n        payable(msg.sender).transfer(eggValue);\r\n    }\r\n\r\n    function BuyWolfMiners(address ref) public payable {\r\n        require(initialized);\r\n        require(msg.value >= 1e16, \"Minimum Amount is 0.01BNB\");\r\n        User storage user = users[msg.sender];\r\n        user.initialDeposit = SafeMath.add(user.initialDeposit, msg.value);\r\n        user.userDeposit = SafeMath.add(user.userDeposit, msg.value);\r\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought, 2));\r\n        uint256 fee=devFee(msg.value, 2);\r\n        uint256 fee2=fee/2;\r\n        payable(ceoAddress).transfer(fee2);\r\n        payable(ceoAddress2).transfer(fee-fee2);\r\n        user.claimedEggs = SafeMath.add(user.claimedEggs, eggsBought);\r\n        user.lastHatch = block.timestamp;\r\n        CompoundRewards(ref);\r\n    }\r\n    function getAvailableEarnings() public view returns(uint256) {\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n        return eggValue;\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs,address(this).balance);\r\n    }\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketEggs);\r\n    }\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth,address(this).balance);\r\n    }\r\n    function devFee(uint256 amount, uint256 _percent) public pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount, _percent), 100);\r\n    }\r\n    function seedMarket() public payable{\r\n        require(marketEggs==0);\r\n        initialized=true;\r\n        marketEggs=259200000000;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n    function getMyMiners() public view returns(uint256){\r\n        return users[msg.sender].miners;\r\n    }\r\n    function getMyEggs() public view returns(uint256) {\r\n        return SafeMath.add(users[msg.sender].claimedEggs, getEggsSinceLastHatch(msg.sender));\r\n    }\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed = min(EGGS_TO_HATCH_1MINERS, SafeMath.sub(block.timestamp,users[adr].lastHatch));\r\n        return SafeMath.mul(secondsPassed, users[adr].miners);\r\n    }\r\n    function getUserInfo(address _account) public view returns(uint256 _initialDeposit, uint256 _userDeposit, uint256 _miners, \r\n            uint256 _claimedEggs, uint256 _lastHatch, uint256 _lastSell, address _referrer, uint256 _totalWithdrawn, \r\n            uint256 _referralEggRewards, uint256 _comopundCount) {\r\n        _initialDeposit = users[_account].initialDeposit;\r\n        _userDeposit = users[_account].userDeposit;\r\n        _miners = users[_account].miners;\r\n        _claimedEggs = users[_account].claimedEggs;\r\n        _lastHatch = users[_account].lastHatch;\r\n        _lastSell = users[_account].lastSell;\r\n        _referrer = users[_account].referrer;\r\n        _totalWithdrawn = users[_account].totalWithdrawn;\r\n        _referralEggRewards = users[_account].referralEggRewards;\r\n        _comopundCount = users[_account].compoundCount;\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ceo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ceo2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"BuyWolfMiners\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"CompoundRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HATCH_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compoundTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_comopundCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "WCMiner", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005886b6b942f8dab2488961f603a4be8c3015a1a90000000000000000000000001b368a88d8de72b1c37cea9b9747d9843bfb844d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://647208bb87d479076f09bec243aef7d6a55b4e5e86386637ed25e9b2544a7aaf"}