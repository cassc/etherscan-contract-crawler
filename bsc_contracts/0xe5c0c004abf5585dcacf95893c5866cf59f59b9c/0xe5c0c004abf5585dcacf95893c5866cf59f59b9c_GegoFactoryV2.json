{"SourceCode": "/***\r\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \r\n *    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\r\n *    \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\r\n *    \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\r\n *    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n *    \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \r\n *    \r\n * https://dego.finance\r\n                                  \r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 dego\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n// File: contracts/interface/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mint(address account, uint amount) external;\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/library/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by `tokenId`.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     *\r\n     *\r\n     * Requirements:\r\n     * - `from`, `to` cannot be zero.\r\n     * - `tokenId` must be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this\r\n     * NFT by either {approve} or {setApprovalForAll}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not `from`, it must be approved to move this NFT by\r\n     * either {approve} or {setApprovalForAll}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: contracts/interface/IGegoToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract IGegoToken is IERC721 {\r\n\r\n    struct GegoV1 {\r\n        uint256 id;\r\n        uint256 grade;\r\n        uint256 quality;\r\n        uint256 amount;\r\n        uint256 resId;\r\n        address author;\r\n        uint256 createdTime;\r\n        uint256 blockNum;\r\n    }\r\n\r\n\r\n    struct Gego {\r\n        uint256 id;\r\n        uint256 grade;\r\n        uint256 quality;\r\n        uint256 amount;\r\n        uint256 resBaseId;\r\n        uint256 tLevel;\r\n        uint256 ruleId;\r\n        uint256 nftType;\r\n        address author;\r\n        address erc20;\r\n        uint256 createdTime;\r\n        uint256 blockNum;\r\n    }\r\n    \r\n    function mint(address to, uint256 tokenId) external returns (bool) ;\r\n    function burn(uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/interface/IGegoFactoryV2.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IGegoFactoryV2 {\r\n\r\n\r\n    function getGego(uint256 tokenId)\r\n        external view\r\n        returns (\r\n            uint256 grade,\r\n            uint256 quality,\r\n            uint256 amount,\r\n            uint256 resBaseId,\r\n            uint256 tLevel,\r\n            uint256 ruleId,\r\n            uint256 nftType,\r\n            address author,\r\n            address erc20,\r\n            uint256 createdTime,\r\n            uint256 blockNum\r\n        );\r\n\r\n\r\n    function getGegoStruct(uint256 tokenId)\r\n        external view\r\n        returns (IGegoToken.Gego memory gego);\r\n\r\n    function burn(uint256 tokenId) external returns ( bool );\r\n    \r\n    function isRulerProxyContract(address proxy) external view returns ( bool );\r\n}\r\n\r\n// File: contracts/interface/IGegoRuleProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ninterface IGegoRuleProxy  {\r\n\r\n    struct Cost721Asset{\r\n        uint256 costErc721Id1;\r\n        uint256 costErc721Id2;\r\n        uint256 costErc721Id3;\r\n\r\n        address costErc721Origin;\r\n    }\r\n\r\n    struct MintParams{\r\n        address user;\r\n        uint256 amount;\r\n        uint256 ruleId;\r\n    }\r\n\r\n    function cost( MintParams calldata params, Cost721Asset calldata costSet1, Cost721Asset calldata costSet2 ) external returns (\r\n        uint256 mintAmount,\r\n        address mintErc20\r\n    ) ;\r\n\r\n    function destroy( address owner, IGegoToken.Gego calldata gego ) external ;\r\n\r\n    function generate( address user,uint256 ruleId ) external view returns ( IGegoToken.Gego memory gego );\r\n\r\n}\r\n\r\n// File: contracts/library/Governance.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Governance {\r\n\r\n    address public _governance;\r\n\r\n    constructor() public {\r\n        _governance = tx.origin;\r\n    }\r\n\r\n    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyGovernance {\r\n        require(msg.sender == _governance, \"not governance\");\r\n        _;\r\n    }\r\n\r\n    function setGovernance(address governance)  public  onlyGovernance\r\n    {\r\n        require(governance != address(0), \"new governance the zero address\");\r\n        emit GovernanceTransferred(_governance, governance);\r\n        _governance = governance;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/nft/GegoFactoryV2.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GegoFactoryV2 is Governance, IGegoFactoryV2 {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n\r\n    event GegoAdded(\r\n        uint256 indexed id,\r\n        uint256 grade,\r\n        uint256 quality,\r\n        uint256 amount,\r\n        uint256 resBaseId,\r\n        uint256 tLevel,\r\n        uint256 ruleId,\r\n        uint256 nftType,\r\n        address author,\r\n        address erc20,\r\n        uint256 createdTime,\r\n        uint256 blockNum\r\n    );\r\n\r\n    event GegoBurn(\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        address erc20\r\n    );\r\n\r\n    struct MintData{\r\n        uint256 amount;\r\n        uint256 resBaseId;\r\n        uint256 nftType;\r\n        uint256 ruleId;\r\n        uint256 tLevel;\r\n    }\r\n\r\n    struct MintExtraData {\r\n        uint256 gego_id;\r\n        uint256 grade;\r\n        uint256 quality;\r\n        address author;\r\n    }\r\n\r\n    event NFTReceived(address operator, address from, uint256 tokenId, bytes data);\r\n\r\n    // for minters\r\n    mapping(address => bool) public _minters;\r\n\r\n    mapping(uint256 => IGegoToken.Gego) public _gegoes;\r\n\r\n    mapping(uint256 => IGegoRuleProxy) public _ruleProxys;\r\n\r\n    mapping(address => bool) public _ruleProxyFlags;\r\n\r\n    uint256 public _maxGegoV1Id = 1000000;\r\n    uint256 public _gegoId = _maxGegoV1Id;\r\n\r\n\r\n    IGegoToken public _gegoToken = IGegoToken(0x0);\r\n\r\n    bool public _isUserStart = false;\r\n\r\n    constructor(address gegoToken) public {\r\n        _gegoToken = IGegoToken(gegoToken);\r\n    }\r\n\r\n    function setUserStart(bool start) public onlyGovernance {\r\n        _isUserStart = start;\r\n    }\r\n\r\n    function addMinter(address minter) public onlyGovernance {\r\n        _minters[minter] = true;\r\n    }\r\n\r\n    function removeMinter(address minter) public onlyGovernance {\r\n        _minters[minter] = false;\r\n    }\r\n\r\n\r\n    // only function for creating additional rewards from dust\r\n    function seize(IERC20 asset, address teamWallet) public onlyGovernance {\r\n        uint256 balance = asset.balanceOf(address(this));\r\n        asset.safeTransfer(teamWallet, balance);\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev add gego mint strategy address\r\n     * can't remove\r\n     */\r\n    function addGegoRuleProxy(uint256 nftType, address ruleProxy)  public  \r\n    onlyGovernance{\r\n        require(_ruleProxys[nftType] == IGegoRuleProxy(0x0), \"must null\");\r\n\r\n        _ruleProxys[nftType] = IGegoRuleProxy(ruleProxy);\r\n\r\n        _ruleProxyFlags[ruleProxy] = true;\r\n    }\r\n\r\n    function isRulerProxyContract(address proxy) external view returns ( bool ){\r\n        return _ruleProxyFlags[proxy];\r\n    }\r\n\r\n    /*\r\n     * @dev set gego contract address\r\n     */\r\n    function setGegoContract(address gego)  public  \r\n        onlyGovernance{\r\n        _gegoToken = IGegoToken(gego);\r\n    }\r\n\r\n    function setCurrentGegoId(uint256 id)  public  \r\n        onlyGovernance{\r\n        _gegoId = id;\r\n    }\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'GegoFactoryV2: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function getGego(uint256 tokenId)\r\n        external view\r\n        returns (\r\n            uint256 grade,\r\n            uint256 quality,\r\n            uint256 amount,\r\n            uint256 resBaseId,\r\n            uint256 tLevel,\r\n            uint256 ruleId,\r\n            uint256 nftType,\r\n            address author,\r\n            address erc20,\r\n            uint256 createdTime,\r\n            uint256 blockNum\r\n        )\r\n    {\r\n        IGegoToken.Gego storage gego = _gegoes[tokenId];\r\n        require(gego.id > 0, \"gego not exist\");\r\n        grade = gego.grade;\r\n        quality = gego.quality;\r\n        amount = gego.amount;\r\n        resBaseId = gego.resBaseId;\r\n        tLevel = gego.tLevel;\r\n        ruleId = gego.ruleId;\r\n        nftType = gego.nftType;\r\n        author = gego.author;\r\n        erc20 = gego.erc20;\r\n        createdTime = gego.createdTime;\r\n        blockNum = gego.blockNum;\r\n    }\r\n\r\n    function getGegoStruct(uint256 tokenId)\r\n        external view\r\n        returns (IGegoToken.Gego memory gego){\r\n            require(_gegoes[tokenId].id > 0, \"gego  not exist\");\r\n            gego=_gegoes[tokenId];\r\n        }\r\n\r\n\r\n    function setBaseResId(uint256 tokenId, uint256 resBaseId) external onlyGovernance {\r\n        require( _gegoes[tokenId].id > 0, \"gego not exist\");\r\n        _gegoes[tokenId].resBaseId = resBaseId;\r\n    }\r\n\r\n    function mint(MintData memory mintData, IGegoRuleProxy.Cost721Asset memory costSet1, IGegoRuleProxy.Cost721Asset memory costSet2 ) public \r\n        lock\r\n    {\r\n\r\n        address origin = msg.sender;\r\n\r\n        if(_minters[msg.sender] == false){\r\n            require(!origin.isContract(), \"call to non-contract\");\r\n        }\r\n\r\n        require(_isUserStart || _minters[msg.sender]  , \"can't mint\" );\r\n\r\n        require( _ruleProxys[mintData.nftType] != IGegoRuleProxy(0x0), \" invalid mint nftType !\" );\r\n\r\n        uint256 mintAmount;\r\n        address mintErc20;\r\n\r\n        IGegoRuleProxy.MintParams memory params;\r\n        params.user = msg.sender;\r\n        params.amount = mintData.amount;\r\n        params.ruleId = mintData.ruleId;\r\n\r\n        (mintAmount,mintErc20) = _ruleProxys[mintData.nftType].cost( params,costSet1,costSet2 );\r\n\r\n        IGegoToken.Gego memory gego = _ruleProxys[mintData.nftType].generate( msg.sender, mintData.ruleId );\r\n\r\n        uint256 gegoId = gego.id;\r\n        if(gegoId  == 0){\r\n            _gegoId++ ;\r\n            gegoId = _gegoId;\r\n        }\r\n        gego.id = gegoId;\r\n        gego.blockNum = gego.blockNum > 0 ? gego.blockNum:block.number;\r\n        gego.createdTime =  gego.createdTime > 0?gego.createdTime:block.timestamp ;\r\n\r\n        gego.amount = gego.amount>0?gego.amount:mintAmount;\r\n        gego.resBaseId = gego.resBaseId>0?gego.resBaseId:mintData.resBaseId;\r\n        gego.tLevel = gego.tLevel>0?gego.tLevel:mintData.tLevel;\r\n        gego.erc20 = gego.erc20==address(0x0)?mintErc20:gego.erc20;\r\n\r\n        gego.ruleId = mintData.ruleId;\r\n        gego.nftType = mintData.nftType;\r\n        gego.author = gego.author==address(0x0)?msg.sender:gego.author;\r\n\r\n        _gegoes[gegoId] = gego;\r\n\r\n        _gegoToken.mint(msg.sender, gegoId);\r\n\r\n        emit GegoAdded(\r\n            gego.id,\r\n            gego.grade,\r\n            gego.quality,\r\n            gego.amount,\r\n            gego.resBaseId,\r\n            gego.tLevel,\r\n            gego.ruleId,\r\n            gego.nftType,\r\n            gego.author,\r\n            gego.erc20,\r\n            gego.createdTime,\r\n            gego.blockNum\r\n        );\r\n\r\n    } \r\n\r\n\r\n    function gmMint(MintData memory mintData, MintExtraData memory extraData) public {\r\n        require(_minters[msg.sender]  , \"can't mint\");\r\n\r\n        IGegoRuleProxy.Cost721Asset memory costSet1;\r\n        IGegoRuleProxy.Cost721Asset memory costSet2;\r\n\r\n        IGegoRuleProxy.MintParams memory params;\r\n        params.user = msg.sender;\r\n        params.amount = mintData.amount;\r\n        params.ruleId = mintData.ruleId;\r\n\r\n        uint256 mintAmount;\r\n        address mintErc20;\r\n\r\n        (mintAmount,mintErc20) = _ruleProxys[mintData.nftType].cost( params,costSet1,costSet2 );\r\n      \r\n        uint256 gegoId = extraData.gego_id;\r\n        if(extraData.gego_id == 0){\r\n            _gegoId++ ;\r\n            gegoId = _gegoId;\r\n        }else{\r\n            if(gegoId > _gegoId){\r\n                _gegoId =  gegoId;\r\n            }\r\n        }\r\n\r\n        IGegoToken.Gego memory gego;\r\n        gego.id = gegoId;\r\n        gego.blockNum = block.number;\r\n        gego.createdTime =  block.timestamp ;\r\n        gego.grade = extraData.grade;\r\n        gego.quality = extraData.quality;\r\n        gego.amount = mintAmount;\r\n        gego.resBaseId = mintData.resBaseId;\r\n        gego.tLevel = mintData.tLevel;\r\n        gego.ruleId = mintData.ruleId;\r\n        gego.nftType = mintData.nftType;\r\n        gego.author = extraData.author;\r\n        gego.erc20 = mintErc20;\r\n\r\n        _gegoes[gegoId] = gego;\r\n\r\n        _gegoToken.mint(extraData.author, gegoId);\r\n\r\n        emit GegoAdded(\r\n            gego.id,\r\n            gego.grade,\r\n            gego.quality,\r\n            gego.amount,\r\n            gego.resBaseId,\r\n            gego.tLevel,\r\n            gego.ruleId,\r\n            gego.nftType,\r\n            gego.author,\r\n            gego.erc20,\r\n            gego.createdTime,\r\n            gego.blockNum\r\n        );\r\n    } \r\n\r\n\r\n    function burn(uint256 tokenId) external returns ( bool ) {\r\n      \r\n        IGegoToken.Gego memory gego = _gegoes[tokenId];\r\n        require(gego.id > 0, \"not exist\");\r\n\r\n        _gegoToken.safeTransferFrom(msg.sender, address(this), tokenId);\r\n        _gegoToken.burn(tokenId);\r\n\r\n        emit GegoBurn(gego.id, gego.amount, gego.erc20);\r\n\r\n        _ruleProxys[gego.nftType].destroy( msg.sender, gego );\r\n\r\n        _gegoes[tokenId].id = 0;\r\n\r\n        return true;\r\n    }\r\n\r\n    \r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4) {\r\n        //only receive the _nft staff\r\n        if(address(this) != operator) {\r\n            //invalid from nft\r\n            return 0;\r\n        }\r\n        //success\r\n        emit NFTReceived(operator, from, tokenId, data);\r\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_ruleProxys\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_isUserStart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_gegoes\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"grade\",\"type\":\"uint256\"},{\"name\":\"quality\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"resBaseId\",\"type\":\"uint256\"},{\"name\":\"tLevel\",\"type\":\"uint256\"},{\"name\":\"ruleId\",\"type\":\"uint256\"},{\"name\":\"nftType\",\"type\":\"uint256\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"createdTime\",\"type\":\"uint256\"},{\"name\":\"blockNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_ruleProxyFlags\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_maxGegoV1Id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"isRulerProxyContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"resBaseId\",\"type\":\"uint256\"},{\"name\":\"nftType\",\"type\":\"uint256\"},{\"name\":\"ruleId\",\"type\":\"uint256\"},{\"name\":\"tLevel\",\"type\":\"uint256\"}],\"name\":\"mintData\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"costErc721Id1\",\"type\":\"uint256\"},{\"name\":\"costErc721Id2\",\"type\":\"uint256\"},{\"name\":\"costErc721Id3\",\"type\":\"uint256\"},{\"name\":\"costErc721Origin\",\"type\":\"address\"}],\"name\":\"costSet1\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"costErc721Id1\",\"type\":\"uint256\"},{\"name\":\"costErc721Id2\",\"type\":\"uint256\"},{\"name\":\"costErc721Id3\",\"type\":\"uint256\"},{\"name\":\"costErc721Origin\",\"type\":\"address\"}],\"name\":\"costSet2\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGego\",\"outputs\":[{\"name\":\"grade\",\"type\":\"uint256\"},{\"name\":\"quality\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"resBaseId\",\"type\":\"uint256\"},{\"name\":\"tLevel\",\"type\":\"uint256\"},{\"name\":\"ruleId\",\"type\":\"uint256\"},{\"name\":\"nftType\",\"type\":\"uint256\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"createdTime\",\"type\":\"uint256\"},{\"name\":\"blockNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nftType\",\"type\":\"uint256\"},{\"name\":\"ruleProxy\",\"type\":\"address\"}],\"name\":\"addGegoRuleProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_gegoToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_gegoId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"resBaseId\",\"type\":\"uint256\"},{\"name\":\"nftType\",\"type\":\"uint256\"},{\"name\":\"ruleId\",\"type\":\"uint256\"},{\"name\":\"tLevel\",\"type\":\"uint256\"}],\"name\":\"mintData\",\"type\":\"tuple\"},{\"components\":[{\"name\":\"gego_id\",\"type\":\"uint256\"},{\"name\":\"grade\",\"type\":\"uint256\"},{\"name\":\"quality\",\"type\":\"uint256\"},{\"name\":\"author\",\"type\":\"address\"}],\"name\":\"extraData\",\"type\":\"tuple\"}],\"name\":\"gmMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"resBaseId\",\"type\":\"uint256\"}],\"name\":\"setBaseResId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setCurrentGegoId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"bool\"}],\"name\":\"setUserStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gego\",\"type\":\"address\"}],\"name\":\"setGegoContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"asset\",\"type\":\"address\"},{\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"seize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getGegoStruct\",\"outputs\":[{\"components\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"grade\",\"type\":\"uint256\"},{\"name\":\"quality\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"resBaseId\",\"type\":\"uint256\"},{\"name\":\"tLevel\",\"type\":\"uint256\"},{\"name\":\"ruleId\",\"type\":\"uint256\"},{\"name\":\"nftType\",\"type\":\"uint256\"},{\"name\":\"author\",\"type\":\"address\"},{\"name\":\"erc20\",\"type\":\"address\"},{\"name\":\"createdTime\",\"type\":\"uint256\"},{\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"gego\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"gegoToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grade\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"quality\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"resBaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tLevel\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ruleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"createdTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"GegoAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"GegoBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"NFTReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"}]", "ContractName": "GegoFactoryV2", "CompilerVersion": "v0.5.5+commit.47a71e8f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000036633b70eac3d1c98a20a6ecef6033d1077372f5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://54ecc4b885d33ba458d7bcc72514e94e6d42fc29a089b77aa9859e5c9eb3966d"}