{"SourceCode": "pragma solidity ^0.5.16;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IFireStore {\r\n    function buyAAddreTokenAdd(address _addr,uint256 _buyTokenAmount,uint256 _AllAmount) external;\r\n}\r\n\r\ninterface IFireBaseFunc {\r\n    function  autoSellToken() external;\r\n    function  autoBuySellToken() external;\r\n    function  autoSellSellToken() external;\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Manager is Context {\r\n  address public governance;\r\n  function setGovernance(address _governance) public {\r\n      require(msg.sender == governance, \"!governance\");\r\n      governance = _governance;\r\n  }\r\n\r\n    modifier isGover {\r\n         require(msg.sender == governance, \"!governance\");\r\n        _;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract FreeManager is Manager {\r\n   //\u6b63\u5f0f\u5730\u5740\r\n   address  public aFreeAddr=0xD3eFcF60afAB6D55E16514d844bDc77a33590d28;\r\n   address  public bFreeAddr=0x4e8C7c8fcaa761afA34266F7b17cAa26F8F05228;\r\n   address  public rewardAddr=0xa6375f9a7DcFcd82F6665EB4124B4247E8Cf3480;\r\n   address  public teamAddr=0xaC0580060db637A023fbc82D13D3c9c7f631f8a9;\r\n\r\n   address  public blackHoleAddr=0x000000000000000000000000000000000000dEaD;//\u9ed1\u6d1e\u5730\u5740\r\n\r\n   address  public usdtTokenAddr=0x55d398326f99059fF775485246999027B3197955;\r\n   \r\n   address  public swapTokenAddr=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n   address  public fireStoreAddr = address(0);\r\n   address  public fireBaseFuncAddr = address(0);\r\n\r\n\r\n   uint256  public sellRate2;\r\n   uint256  public buyInviteRate = 300;\r\n   uint256  public teamRate = 500;\r\n\r\n   mapping (address => uint256) public sellRateList;\r\n   mapping (address => uint256) public buyRateList;\r\n   mapping(address => bool) public nftWhites;\r\n\r\n  function setRewardAddr(address _address) public  isGover{     \r\n      rewardAddr = _address;\r\n  }\r\n\r\n  function setTeamAddr(address _address) public  isGover{     \r\n      teamAddr = _address;\r\n  }\r\n\r\n  function setAFreeAddr(address _address) public  isGover{     \r\n      aFreeAddr = _address;\r\n  }\r\n\r\n  function setSellRate2(uint256 _sellRate2) public  isGover{     \r\n      sellRate2 = _sellRate2;\r\n  }\r\n\r\n  function setBuyInviteRate(uint256 _buyInviteRate) public  isGover{     \r\n      buyInviteRate = _buyInviteRate;\r\n  }\r\n  \r\n\r\n  function setBFreeAddr(address _address) public  isGover{     \r\n      bFreeAddr = _address;\r\n  }\r\n\r\n  function setUsdtTokenAddr(address _address) public  isGover{     \r\n      usdtTokenAddr = _address;\r\n  }\r\n\r\n  function setFireStoreAddr(address _address) public  isGover{     \r\n      fireStoreAddr = _address;\r\n  }\r\n\r\n  function setFireBaseFuncAddr(address _address) public  isGover{     \r\n      fireBaseFuncAddr = _address;\r\n  }\r\n\r\n  function setSwapTokenAddr(address _address) public  isGover{     \r\n      swapTokenAddr = _address;\r\n  }\r\n\r\n\r\n  function setBlackHoleAddr(address _address) public  isGover{     \r\n      blackHoleAddr = _address;\r\n  }\r\n\r\n\r\n\r\n function setTeamRate(uint256 _lv) public  isGover{     \r\n      teamRate = _lv;\r\n  }\r\n\r\n \r\n function setSellRateList(address _address,uint256 _amount) public  isGover{     \r\n      sellRateList[_address] = _amount;\r\n  }\r\n\r\n  function getSellRateList(address _address) public view returns (uint256)  {\r\n     return  sellRateList[_address];\r\n  }\r\n\r\n function setBuyRateList(address _address,uint256 _amount) public  isGover{     \r\n      buyRateList[_address] = _amount;\r\n  }\r\n\r\n  function getBuyRateList(address _address) public view returns (uint256)  {\r\n     return  buyRateList[_address];\r\n  }\r\n\r\n  function addNftWhites(address _address) public isGover{\r\n      nftWhites[_address] = true;\r\n  }\r\n\r\n  function getNftWhites(address _address) public view returns (bool)  {\r\n     return  nftWhites[_address] ;\r\n  }\r\n\r\n  function removeNftWhites(address _address) public isGover{\r\n      nftWhites[_address] = false;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is FreeManager, IERC20 {\r\n    using SafeMath for uint;\r\n    mapping (address => uint256) public lockAccount;// lock account and lock end date\r\n    mapping (address => uint) private _balances;\r\n    \r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) public returns (bool) {\r\n        require(now>lockAccount[msg.sender], \"ERC20:  address lock\");\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        require(now>lockAccount[msg.sender], \"ERC20:  address lock\");\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\r\n        require(now>lockAccount[sender], \"ERC20:  address lock\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n\trequire(now>lockAccount[_msgSender()], \"ERC20:  address lock\");\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        require(now>lockAccount[_msgSender()], \"ERC20:  address lock\");\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n         uint256 tranAmount =  amount;\r\n        if(nftWhites[sender]==false && nftWhites[recipient]==false){\r\n\r\n           //buy token           \r\n            uint256 pBuyRate = buyRateList[sender];\r\n            if(pBuyRate>0){\r\n                tranAmount =  amount.mul(10000 -pBuyRate).div(10000);\r\n\r\n                uint freeAAmount  = amount.mul(pBuyRate - sellRate2).div(10000);\r\n                \r\n                IFireStore(fireStoreAddr).buyAAddreTokenAdd(\r\n                            recipient,freeAAmount,\r\n                            amount//.mul(buyInviteRate).div(10000)\r\n                            );\r\n\r\n                                \r\n                _balances[aFreeAddr] = _balances[aFreeAddr].add(freeAAmount);\r\n                emit Transfer(sender, aFreeAddr, freeAAmount);\r\n               \r\n                uint freeBAmount  = amount.mul(sellRate2).div(10000);\r\n                if(freeBAmount>0){                    \r\n                    // _balances[bFreeAddr] = _balances[bFreeAddr].add(freeBAmount);\r\n                    // emit Transfer(sender, bFreeAddr, freeBAmount);\r\n\r\n                    _balances[fireBaseFuncAddr] = _balances[fireBaseFuncAddr].add(freeBAmount);\r\n                    emit Transfer(sender, fireBaseFuncAddr, freeBAmount);\r\n                   //autoSellToken\r\n                    IFireBaseFunc(fireBaseFuncAddr).autoBuySellToken();\r\n                }\r\n\r\n            }\r\n\r\n           //sell token\r\n            uint256 pSellRate = sellRateList[recipient];\r\n            if(pBuyRate ==0 && pSellRate>0){\r\n                //tranAmount =  amount;//.mul(10000 -pSellRate).div(10000);\r\n                uint freeBAmount  = amount.mul(pSellRate).div(10000);\r\n\r\n                _balances[sender] = _balances[sender].sub(freeBAmount, \"ERC20: transfer amount exceeds balance\");\r\n                 //emit Transfer(sender, fireBaseFuncAddr, freeBAmount);\r\n                // _balances[bFreeAddr] = _balances[bFreeAddr].add(freeBAmount);\r\n                // emit Transfer(sender, bFreeAddr, freeBAmount);\r\n\r\n                _balances[fireBaseFuncAddr] = _balances[fireBaseFuncAddr].add(freeBAmount);\r\n                emit Transfer(sender, fireBaseFuncAddr, freeBAmount);\r\n                IFireBaseFunc(fireBaseFuncAddr).autoSellSellToken();\r\n            }\r\n        }\r\n        \r\n        _balances[recipient] = _balances[recipient].add(tranAmount);\r\n        \r\n        emit Transfer(sender, recipient, tranAmount);\r\n    }\r\n\r\n    function _mint(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n   function setLockAccount(address target, uint256 lockenddate) public  {\r\n\t\t require(msg.sender == governance, \"ERC20: Insufficient authority\");\r\n\t\tlockAccount[target] = lockenddate;\r\n     }\r\n\r\n\t/* The end time of the lock account is obtained */\r\n\tfunction lockAccountOf(address _owner) public  view returns (uint256 enddata) {\r\n        return lockAccount[_owner];\r\n    }\r\n}\r\n\r\ncontract MinterManager is ERC20 {\r\n    mapping (address => bool) public minters;\r\n//    mapping (address => uint256) public mintersAmount;\r\n\r\n//    modifier isMinter {\r\n//        require(minters[msg.sender], \"!minter\");\r\n//        _;\r\n//    }\r\n\r\n//   function mint(address account, uint256 amount)  public isMinter {\r\n//       require( mintersAmount[msg.sender]>=amount,\"minter not amount\");\r\n//       mintersAmount[msg.sender]=mintersAmount[msg.sender].sub(amount);\r\n//       _mint(account, amount);\r\n//   }\r\n  \r\n//   function burn(address account, uint256 amount) public isMinter {\r\n//       _burn(account, amount);\r\n//   }\r\n  \r\n  function setGovernance(address _governance) public isGover {\r\n      governance = _governance;\r\n  }\r\n  \r\n//   function addMinter(address _minter,uint256 amount) public  isGover{\r\n//       mintersAmount[_minter] = amount*(10**18);\r\n//       minters[_minter] = true;\r\n//   }\r\n\r\n//    function getMinterNum(address _minter) public view returns (uint256)  {\r\n//      return  mintersAmount[_minter] ;\r\n//   }\r\n\r\n//   function removeMinter(address _minter) public isGover{\r\n//       minters[_minter] = false;\r\n//   }\r\n}\r\n\r\ncontract ERC20Detailed is MinterManager {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract FireToken is ERC20, ERC20Detailed {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint;\r\n\r\n  constructor () public ERC20Detailed(\"Fire\", \"Fire\", 18) {\r\n      governance = msg.sender;\r\n      _mint(0xa6Ba3791FEBc20EF24A113b1DBdEbB5805eaCc1b, 1000000000*10**18);\r\n      minters[msg.sender] = true;\r\n  }\r\n\r\n  function init() public isGover {\r\n       setBuyInviteRate(300);\r\n       setAFreeAddr(0x93dF1b0fB5Ab0ED9DD801242C4eE701553e5A4Ca);\r\n       setBFreeAddr(0x5484C92d08cF158d17880A4BEA044f20e41D6Fe3);\r\n       addNftWhites(0x5484C92d08cF158d17880A4BEA044f20e41D6Fe3);\r\n       setSellRate2(1000);\r\n       setSellRateList(0x0a32Da95056C380D39679Af95678F33Cc2D5F82e, 1200);\r\n       setBuyRateList(0x0a32Da95056C380D39679Af95678F33Cc2D5F82e, 1500);\r\n  }\r\n\r\n  function init2(address _aAddr,address _bAddr,address _swapAddr) public isGover {\r\n       setAFreeAddr(_aAddr);\r\n       setBFreeAddr(_bAddr);\r\n       addNftWhites(_bAddr);\r\n       setSellRate2(1000);\r\n       setSellRateList(_swapAddr, 1200);\r\n       setBuyRateList(_swapAddr, 1500);\r\n  }\r\n  \r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"aFreeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addNftWhites\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bFreeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blackHoleAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyInviteRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyRateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fireBaseFuncAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fireStoreAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBuyRateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNftWhites\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSellRateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapAddr\",\"type\":\"address\"}],\"name\":\"init2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockAccountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"enddata\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftWhites\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeNftWhites\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellRate2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellRateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAFreeAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBFreeAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBlackHoleAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyInviteRate\",\"type\":\"uint256\"}],\"name\":\"setBuyInviteRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBuyRateList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFireBaseFuncAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setFireStoreAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockenddate\",\"type\":\"uint256\"}],\"name\":\"setLockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRewardAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellRate2\",\"type\":\"uint256\"}],\"name\":\"setSellRate2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSellRateList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSwapTokenAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTeamAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lv\",\"type\":\"uint256\"}],\"name\":\"setTeamRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setUsdtTokenAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdtTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FireToken", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://0dab86ba21e525864c21133f19555e0234dfe3c0fc7ddc57f4c7a3a02473244c"}