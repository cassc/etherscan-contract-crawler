{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.16;\r\n\r\nstruct GeneralDetails {\r\n    string _name;\r\n    string _symbol;\r\n    uint8 _decimals;\r\n    uint256 _totalSupply;\r\n    uint256 _totalStake;   \r\n    uint256 _activeStakers;\r\n    uint256 _totalRewardPaid;\r\n    bool _isPaused;\r\n    uint256 _swapOut;\r\n    uint256 _swapIn;\r\n    uint256 _burned; \r\n    \r\n    uint256 _marketingPool;\r\n    uint256 _stakePool;\r\n    uint256 _burnPool;\r\n    uint256 _protocolPool;\r\n    uint256 _lastMarketingPool;\r\n    uint256 _lastProtocolPool;\r\n    \r\n    address _validatorAdd;\r\n    string _validatorApi;\r\n    address _marketingAdd;\r\n    uint256 _maxTxLimit;        \r\n    uint256 _voteApproveRate;    \r\n    uint256 _propDuration;\r\n    uint256 _stakeTax;\r\n    uint256 _marketingTax;\r\n    uint256 _burnTax;\r\n    uint256 _protocolTax;\r\n    uint256 _propStakeAmount;  \r\n    uint256 _stakeLocktime;\r\n    uint256 _changeDate;\r\n    uint256 _baseChainId;\r\n}\r\n\r\nstruct UserDetails {\r\n    uint256 _balances;\r\n    uint256 voteStatus;\r\n    uint256 propStatus;\r\n    uint256 nonce;\r\n    uint256 stakeDate;\r\n    uint256 collateral;\r\n    uint256 tempReward;\r\n    uint256 stakePool;\r\n    uint256 rewardPaid;\r\n    bool _isTaxable;\r\n    address matcher;\r\n} \r\n\r\nstruct VoteData {\r\n    address account;\r\n    uint256 cycle;\r\n    uint256 startDate;\r\n    uint256 endDate;\r\n    uint256 value;\r\n    uint256 voteCount;\r\n    string info;\r\n    uint256 status;\r\n}\r\n\r\nabstract contract Context {\r\n    \r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    \r\n}\r\n\r\ninterface IPinkAntiBot {\r\n  function setTokenOwner(address owner) external;\r\n\r\n  function onPreTransferCheck(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) external;\r\n}\r\n\r\ninterface AFTS {\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    function transferMulti(address[] memory to, uint256[] memory amount) external returns (bool);  \r\n    \r\n    function transferMultiFrom(address sender, address[] memory to, uint256[] memory amount) external returns (bool);    \r\n\r\n\tfunction byToken(\r\n\t    bytes[] memory sig, \r\n\t    uint256[] memory details, //0-type,1-fees,2-method/swapNonce,3-chainID,4-swapFees\r\n\t    address[] memory accounts, //0-sender, 1-spender\r\n\t    address[] memory recipient, \r\n\t    uint256[] memory amount, //0-amount/collateral,1-method,2-otherSupply,3-otherStake,4-otherPool,5-otherStakers,6-otherPaid\r\n\t    string[] memory info, //0-config,1-url\r\n\t    bytes32 txid\r\n    ) external returns (bool);\r\n    \r\n    function stake(uint256[] memory info, bytes memory sig) external returns (bool);\r\n    \r\n    function propose(string memory config, string memory info, uint256 value, address account) external returns (bool);\r\n    \r\n    function vote(string memory config) external returns (bool);\r\n    \r\n    function burn(uint256 amount) external returns (bool);\r\n    \r\n    function swapOut(uint256 amount, uint256 swapNonce, uint256 chainId) external returns (bool);\r\n    \r\n    function swapIn(bytes32 txid, uint256 swapNonce, uint256 amount, uint256 fees, uint256 fromId, bytes memory sig) external returns (bool);   \r\n    \r\n    function protocolUpdate(uint256[] memory newConfig, address[2] memory account, string memory info, uint256 status) external returns (bool);\r\n\r\n    function setTax(address[] memory accounts, address[] memory matchers) external returns (bool);\r\n    \r\n    event Transfer(address indexed sender, address indexed recipient, uint256 value);\r\n\r\n    event Approval(address indexed approver, address indexed spender, uint256 value);\r\n    \r\n    event Tax(address indexed payer, uint256 stake, uint256 burn, uint256 marketing, uint256 protocol, uint256 total);\r\n    \r\n    event EventMethod(address indexed requester, string method);\r\n     \r\n    event Proposer(address indexed proposer, string indexed config, uint256 value, address account);\r\n    \r\n    event Voter(address indexed voter, string indexed config); \r\n    \r\n    event Protocol(address indexed validator, uint256[] newConfig, address[2] account, string info, uint256 status);\r\n    \r\n}\r\n\r\ncontract PENNY is Context, AFTS {\r\n    \r\n    IPinkAntiBot public pinkAntiBot;\r\n    \r\n    GeneralDetails _general;\r\n    \r\n    mapping(string =>  uint256) private _genConfig;\r\n    \r\n    mapping(address =>  UserDetails) public _user;\r\n    \r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    \r\n    mapping(address =>  mapping(bytes32 => bool)) public _swapIn;\r\n    \r\n    mapping(address =>  mapping(uint256 => uint256)) public _swapOut;\r\n    \r\n    mapping(address =>  mapping(uint256 =>  mapping(string =>  uint256))) public _userVote;\r\n    \r\n    mapping(uint256 =>  mapping(string =>  VoteData)) public _vote;\r\n    \r\n    mapping(string =>  uint256) public _voteCycle;\r\n    \r\n    constructor () {\r\n        _general._name = \"PENNY\";\r\n        _general._symbol = \"PENNY\";\r\n        _general._decimals = 18;\r\n        _general._marketingAdd = 0x6F3ba2ffDaA7cDA012fbCd407438B4007d850573;\r\n        _general._validatorAdd = 0x5193a37eCec93aA96041E38acB4DC76AfeFF5b60;\r\n        _general._validatorApi = \"https://validator.pennytoken.org/\";\r\n        _genConfig[\"maxTxLimit\"] = 1000;\r\n        _genConfig[\"voteApproveRate\"] = 51; \r\n        _genConfig[\"propDuration\"] = 2592000;\r\n        _genConfig[\"propStakeAmount\"] = 100000000000*1e18;\r\n        _genConfig[\"stakeLocktime\"] = 604800;\r\n        _genConfig[\"stakeTax\"] = 2 * 1e18;\r\n        _general._marketingTax = 1.5 * 1e18; \r\n        _genConfig[\"burnTax\"] = 2 * 1e18;\r\n        _genConfig[\"protocolTax\"] = 0.5 * 1e18;\r\n        _general._changeDate = block.timestamp;\r\n        _general._isPaused = false;\r\n        _general._baseChainId = 56;\r\n        \r\n        //initial transfer Penny v2\r\n        if(_general._baseChainId == 56){\r\n            _general._totalSupply = 50000000000000*1e18;\r\n            _transfer(address(0), _general._marketingAdd, 5000000000000*1e18, 0, address(0));\r\n            _transfer(address(0), 0xa24174E5B35b978026c78f773c40425C2CF741B2, 2500000000000*1e18, 0, address(0));\r\n            _transfer(address(0), 0x34c7936c916A82B89d1bA6897c8C01fB7aA0eDCd, 17500000000000*1e18, 0, address(0));\r\n            _transfer(address(0), 0xE0831D61e5E7b3fc543E25216D8983c8e59fae35, 5000000000000*1e18, 0, address(0));\r\n            _transfer(address(0), 0x4f18B00c9Ab136378D15d39cE98CBFd63DF1Ba4c, 5000000000000*1e18, 0, address(0));\r\n            _transfer(address(0), 0xC9DB9D0B8D4e232Be7a50f743aF2a3027B53320c, 2500000000000*1e18, 0, address(0)); \r\n            _transfer(address(0), 0xe7565364AB8A0feAfc6bE2E6626B0b69Dc218aec, 7500000000000*1e18, 0, address(0));\r\n            _transfer(address(0), 0x2B71cB2b59ae57CAdaCDE3B3FdC5DE9588bcc974, 5000000000000*1e18, 0, address(0));      \r\n        }\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _general._name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _general._symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint256) {\r\n        return _general._decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _general._totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _user[account]._balances;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function isPaused() public view virtual returns (bool) {\r\n        return _general._isPaused;\r\n    }   \r\n\r\n    function generalDetails() public view virtual returns(GeneralDetails memory){\r\n        GeneralDetails memory gendet = _general;\r\n        gendet._maxTxLimit = _genConfig[\"maxTxLimit\"];\r\n        gendet._voteApproveRate = _genConfig[\"voteApproveRate\"];\r\n        gendet._propDuration = _genConfig[\"propDuration\"];\r\n        gendet._stakeTax = _genConfig[\"stakeTax\"];\r\n        gendet._burnTax = _genConfig[\"burnTax\"];\r\n        gendet._protocolTax = _genConfig[\"protocolTax\"];\r\n        gendet._propStakeAmount = _genConfig[\"propStakeAmount\"];  \r\n        gendet._stakeLocktime = _genConfig[\"stakeLocktime\"];\r\n        return gendet;        \r\n    }\r\n\r\n    function voteAllDetails(string[11] memory config) public view virtual returns (VoteData[11] memory) {\r\n        VoteData[11] memory allvote;\r\n        for (uint8 g; g < config.length; g++) {\r\n            allvote[g] = _vote[_voteCycle[config[g]]][config[g]];\r\n        }\r\n        return allvote;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount, uint8 method, address spender) internal virtual {\r\n        require(!_general._isPaused, \"Contract is Paused\");\r\n        if(method > 0){\r\n            require(sender != address(0), \"from zero address\");\r\n            require(recipient != address(0), \"to zero address\");\r\n        }\r\n        if(method == 2){\r\n            require(_allowances[sender][spender] >= amount, \"Transfer amount exceeds allowance\");\r\n        } \r\n        if(sender != address(0)){\r\n            require(_user[sender]._balances >= amount, \"Transfer amount exceeds balance\");\r\n            _user[sender]._balances -= amount;\r\n            if(method == 2){\r\n                _approve(sender, spender, _allowances[sender][spender] - amount);\r\n            }\r\n        }\r\n        if(recipient != address(0)){\r\n            _user[recipient]._balances += amount;\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setTax(address[] memory accounts, address[] memory matchers) public virtual override returns (bool) {\r\n        require(_msgSender() == _general._validatorAdd, \"Only Validator Allowed\");        \r\n\t\trequire(accounts.length == matchers.length, \"array length not equal\");\r\n\t\tfor (uint8 i; i < accounts.length; i++) {\r\n\t\t    _user[accounts[i]]._isTaxable = _user[accounts[i]]._isTaxable ? false : true;\r\n            _user[accounts[i]].matcher = matchers[i];\r\n\t\t}         \r\n        return true;\r\n    }\r\n\r\n    function _debitTax(address sender, uint256 amount, address recipient) internal {\r\n        uint256 taxPercent = _genConfig[\"stakeTax\"] + _general._marketingTax + _genConfig[\"burnTax\"] + _genConfig[\"protocolTax\"];\r\n        bool taxable;\r\n        address account = recipient;\r\n        if(_user[sender]._isTaxable || _user[recipient]._isTaxable){\r\n            if(_user[sender]._isTaxable && recipient != _user[sender].matcher  && recipient != address(0)) {\r\n                taxable = true;\r\n            }\r\n            if(_user[recipient]._isTaxable && _user[recipient].matcher != address(0)){\r\n                taxable = true;\r\n                account = sender;\r\n            }\r\n        }\r\n        if(taxPercent > 0 && taxable) {\r\n            uint256 totalTax = (amount * taxPercent) / (100*1e18);\r\n            uint256 stakeTax = (totalTax * ((_genConfig[\"stakeTax\"] * 100) / taxPercent)) / 100;\r\n            uint256 marketingTax = (totalTax * ((_general._marketingTax * 100) / taxPercent)) / 100;\r\n            uint256 burnTax = (totalTax * ((_genConfig[\"burnTax\"] * 100) / taxPercent)) / 100;\r\n            uint256 protocolTax = (totalTax * ((_genConfig[\"protocolTax\"] * 100) / taxPercent)) / 100;\r\n            if(_user[account]._balances >= totalTax) {\r\n                _transfer(account, address(0), (stakeTax + burnTax), 0, address(0));\r\n                _transfer(account, _general._marketingAdd, marketingTax, 0, address(0));\r\n                _transfer(account, _general._validatorAdd, protocolTax + (totalTax - stakeTax - marketingTax - burnTax - protocolTax), 0, address(0));\r\n                _general._stakePool += stakeTax;\r\n                _general._marketingPool += marketingTax;\r\n                _general._burnPool += burnTax;\r\n                _general._protocolPool += protocolTax + (totalTax - stakeTax - marketingTax - burnTax - protocolTax);\r\n                _general._totalSupply -= (stakeTax + burnTax);\r\n                emit Tax(account, stakeTax, burnTax, marketingTax, protocolTax, totalTax);\r\n            }\r\n        }\r\n    } \r\n    \r\n    function _transferMulti(address sender, address[] memory to, uint256[] memory amount, uint8 method, address spender) internal virtual {\r\n\t\trequire(_genConfig[\"maxTxLimit\"] >= to.length, \"greater than _maxTxLimit\");        \r\n\t\trequire(to.length == amount.length, \"array length not equal\");\r\n\t\tuint256 sum_;\r\n        for (uint8 g; g < to.length; g++) {\r\n            require(to[g] != address(0), \"to zero address\");\r\n            sum_ += amount[g];            \r\n        }\r\n        if(method == 2){\r\n            require(_allowances[sender][spender] >= sum_, \"Transfer amount exceeds allowance\");\r\n        }   \r\n        require(_user[sender]._balances >= sum_, \"Transfer amount exceeds balance\");\r\n\t\tfor (uint8 i; i < to.length; i++) {\r\n\t\t    _transfer(sender, to[i], amount[i], method, spender);\r\n\t\t}        \r\n    }   \r\n    \r\n    function _approve(address sender, address spender, uint256 amount) internal virtual {\r\n        require(!_general._isPaused, \"Contract is Paused\");\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount, 1, address(0));\r\n        _debitTax(_msgSender(), amount, recipient);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount, 2, _msgSender());\r\n        _debitTax(sender, amount, recipient);\r\n        return true;\r\n    }\r\n\r\n\tfunction transferMulti(address[] memory to, uint256[] memory amount) public virtual override returns (bool) {\r\n\t\t_transferMulti(_msgSender(), to, amount, 1, address(0));\r\n        return true;\r\n\t}\r\n\t\r\n\tfunction transferMultiFrom(address sender, address[] memory to, uint256[] memory amount) public virtual override returns (bool) {\r\n\t\t_transferMulti(sender, to, amount, 2, _msgSender());\r\n        return true;\r\n\t} \r\n\t\r\n\tfunction byToken(\r\n\t    bytes[] memory sig, \r\n\t    uint256[] memory details, //0-type,1-fees,2-method/swapNonce,3-chainID,4-swapFees\r\n\t    address[] memory accounts, //0-sender, 1-spender\r\n\t    address[] memory recipient, \r\n\t    uint256[] memory amount, //0-amount/collateral,1-method,2-otherSupply,3-otherStake,4-otherPool,5-otherStakers,6-otherPaid\r\n\t    string[] memory info, //0-config,1-url\r\n\t    bytes32 txid\r\n    ) public virtual override returns (bool) {\r\n\t    require(_msgSender() == _general._validatorAdd, \"Only Validator Allowed\");\r\n        _sigValidate(sig[0], keccak256(abi.encodePacked(accounts[0], details[0], details[1], _user[accounts[0]].nonce + 1)), accounts[0]);\r\n\t    require(details[0] >= 0 && details[0] < 8, \"Invalid Type\");\r\n\t    _transfer(accounts[0], _general._validatorAdd, details[1], 0, address(0));\r\n\t    if(details[0] == 0){\r\n    \t    if(details[2] == 1){ \r\n    \t        _transfer(accounts[0], recipient[0], amount[0], 1, address(0));\r\n    \t    } else if(details[2] == 2){ \r\n                _transfer(accounts[0], recipient[0], amount[0], 2, accounts[1]); \r\n    \t    } else if(details[2] == 3){ \r\n    \t        _approve(accounts[0], accounts[1], amount[0]); \r\n    \t    } else if(details[2] == 4){ \r\n    \t        _transferMulti(accounts[0], recipient, amount, 1, address(0));\r\n    \t    } else if(details[2] == 5){ \r\n    \t        _transferMulti(accounts[0], recipient, amount, 2, accounts[1]);\r\n    \t    }\r\n\t    } else if(details[0] > 0 && details[0] < 4){ \r\n\t        _stakeProcess(accounts[0], amount, sig[1]);\r\n\t    } else if(details[0] == 4){\r\n\t        _propose(accounts[0], info[0], info[1], amount[0], recipient[0]);\r\n\t    } else if(details[0] == 5){\r\n\t        _voteProcess(accounts[0], info[0]);\r\n\t    } else if(details[0] == 6){\r\n\t        _tokenOut(accounts[0], amount[0], details[2], details[3]);\r\n\t    } else if(details[0] == 7){\r\n\t        _tokenIn(accounts[0], txid, details[2], amount[0], details[4], details[3], sig[1]);\r\n\t    }\r\n\t    _user[accounts[0]].nonce += 1;\r\n\t    return true;\r\n\t}\r\n        \r\n    function stake(uint256[] memory info, bytes memory sig) public virtual override returns (bool) { //info[] 0-collateral,1-method,2-otherSupply,3-otherStake,4-otherPool,5-otherStakers,6-otherPaid\r\n        _stakeProcess(_msgSender(), info, sig);\r\n        return true;\r\n    }  \r\n    \r\n    function _stakeProcess(address staker, uint256[] memory info, bytes memory sig) internal virtual {\r\n        uint256 tempReward;\r\n        require(!_general._isPaused, \"Contract is Paused\");\r\n        _sigValidate(sig, keccak256(abi.encodePacked(staker, info[0], info[2], info[3], info[4], info[5], info[6], block.chainid, _user[staker].nonce + 1, true)), _general._validatorAdd);\r\n        _user[staker].nonce += 1;         \r\n        require(staker != address(0), \"from zero address\");\r\n        require(info[1] >= 0 && info[1] < 4, \"Invalid Method\");\r\n        require((info[1] < 2)?info[0] > 0:info[0] == 0, \"Invalid Amount\");\r\n        if(_user[staker].collateral > 0){\r\n            if((_general._activeStakers + info[5]) > 1){\r\n                tempReward = (((_user[staker].collateral * 1e18) / (_general._totalStake + info[3])) * ((_general._stakePool + info[4]) - _user[staker].stakePool)) / 1e18;\r\n            } else {\r\n                if(((_general._stakePool + info[4]) - (_general._totalRewardPaid + info[6])) > 0){\r\n                    tempReward = (_general._stakePool + info[4]) - (_general._totalRewardPaid + info[6]);\r\n                }\r\n            }\r\n        }\r\n        if(info[1] < 2){\r\n            if(info[1] == 0){\r\n                require(!(_user[staker].collateral > 0), \"Already Staking\");\r\n            } else {\r\n                require(_user[staker].collateral > 0, \"Staking Inactive\");\r\n            }\r\n            _transfer(staker, address(0), info[0], 0, address(0));\r\n            _user[staker].stakeDate = block.timestamp;\r\n            _user[staker].stakePool = _general._stakePool + info[4];\r\n            _general._totalStake += info[0];\r\n            _user[staker].collateral += info[0];\r\n            _user[staker].voteStatus = 1;\r\n            if(_user[staker].collateral >= _genConfig[\"propStakeAmount\"]){\r\n                _user[staker].propStatus = 1;\r\n            }            \r\n            if(info[1] == 1){\r\n                _user[staker].tempReward += tempReward;\r\n            } else {\r\n               _general._activeStakers += 1;\r\n            }\r\n        } else {\r\n            require(_user[staker].collateral > 0, \"Staking Inactive\");\r\n            if(info[1] == 2){\r\n                require(block.timestamp >= (_user[staker].stakeDate + _genConfig[\"stakeLocktime\"]), \"Stake collateral claim date not reached\");\r\n                _transfer(address(0), staker, _user[staker].collateral, 0, address(0));\r\n                _general._totalStake -= _user[staker].collateral;\r\n                _user[staker].propStatus = 0;\r\n                _user[staker].voteStatus = 0;\r\n                _user[staker].collateral = 0;\r\n                _general._activeStakers -= 1;\r\n            }\r\n            _transfer(address(0), staker, tempReward + _user[staker].tempReward, 0, address(0));\r\n            _user[staker].stakePool = _general._stakePool + info[4];  \r\n            _user[staker].rewardPaid += tempReward + _user[staker].tempReward; \r\n            _general._totalSupply += tempReward + _user[staker].tempReward;  \r\n            _general._totalRewardPaid += tempReward + _user[staker].tempReward;  \r\n            _user[staker].tempReward = 0;\r\n        }\r\n        emit EventMethod(staker, \"Stake\");\r\n    }        \r\n\r\n    function propose(string memory config, string memory info, uint256 value, address account) public virtual override returns (bool) {\r\n        _propose(_msgSender(), config, info, value, account);\r\n        return true;\r\n    }\r\n    \r\n    function _propose(address sender, string memory config, string memory info, uint256 value, address account) internal {\r\n        require(_user[sender].propStatus == 1, \"Can't Propose\");\r\n        uint256 date = block.timestamp;\r\n        uint256 cycle = _voteCycle[config];\r\n        require((date - _vote[cycle][config].startDate) > _genConfig[\"propDuration\"], \"Old Active\");\r\n        _vote[cycle][config].status = 3;\r\n        _voteCycle[config] += 1;\r\n        cycle = _voteCycle[config];\r\n        _vote[cycle][config].cycle = _voteCycle[config];\r\n        _vote[cycle][config].startDate = date; \r\n        if(keccak256(bytes(config)) == keccak256(bytes(\"validatorAdd\"))){\r\n            _vote[cycle][config].account = account;\r\n        } else {\r\n            _vote[cycle][config].value = value; \r\n        }  \r\n        _vote[cycle][config].status = 1;\r\n        _vote[cycle][config].info = info;\r\n        emit Proposer(sender, config, value, account);        \r\n    }\r\n\r\n    function vote(string memory config) public virtual override returns (bool) {\r\n        _voteProcess(_msgSender(), config);\r\n        return true;\r\n    } \r\n    \r\n    function _voteProcess(address sender, string memory config) internal {\r\n        require(_user[sender].voteStatus == 1, \"Can't Vote\");\r\n        uint256 date = block.timestamp;\r\n        uint256 cycle = _voteCycle[config];\r\n        require(_vote[cycle][config].status == 1, \"Voting Finished\");\r\n        require(_userVote[sender][cycle][config] == 0, \"Already Voted\");\r\n        _userVote[sender][cycle][config] = 1;\r\n        _vote[cycle][config].voteCount += 1;\r\n        if(_vote[cycle][config].voteCount >= ((_general._activeStakers * _genConfig[\"voteApproveRate\"]) / 100)){\r\n            _vote[cycle][config].status = 2;\r\n            _vote[cycle][config].endDate = date;\r\n            _general._changeDate = date;\r\n            if(keccak256(bytes(config)) == keccak256(bytes(\"validatorAdd\"))){\r\n                _general._validatorAdd = _vote[cycle][config].account;\r\n                _general._validatorApi = _vote[cycle][config].info;\r\n            } else {\r\n                _genConfig[config] = _vote[_voteCycle[config]][config].value;\r\n            }           \r\n        }        \r\n        emit Voter(sender, config);        \r\n    }\r\n\r\n    function _splitSignature(bytes memory sig) internal pure returns (uint8, bytes32, bytes32) {\r\n        require(sig.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n       return (v, r, s);\r\n    }       \r\n   \r\n    function _sigValidate(bytes memory sig, bytes32 hash, address account) internal pure {\r\n        (uint8 v, bytes32 r, bytes32 s) = _splitSignature(sig);\r\n        require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)), v, r, s) == account, \"Not Authorized\");\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual override returns (bool) {\r\n        require(!_general._isPaused, \"Contract is Paused\");\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address sender, uint256 amount) internal {\r\n        _transfer(sender, address(0), amount, 0, address(0));\r\n        _general._burned += amount;\r\n        _general._totalSupply -= amount;\r\n        emit EventMethod(sender, \"Burn\");\r\n    }  \r\n    \r\n    function swapOut(uint256 amount, uint256 swapNonce, uint256 chainId) public virtual override returns (bool) {\r\n        require(!_general._isPaused, \"Contract is Paused\");\r\n        _tokenOut(_msgSender(), amount, swapNonce, chainId);     \r\n        return true;\r\n    }\r\n\r\n    function _tokenOut(address sender, uint256 amount, uint256 swapNonce, uint256 chainId) internal {\r\n        require(chainId > 0, \"Invalid ChainId\");\r\n        require(_swapOut[sender][swapNonce] == 0, \"Already Swapped Out\");\r\n        _transfer(sender, address(0), amount, 0, address(0));\r\n        _swapOut[sender][swapNonce] = chainId;\r\n        _general._swapOut += amount;\r\n        _general._totalSupply -= amount;\r\n        emit EventMethod(sender, \"Burn\");\r\n    }    \r\n   \r\n    function swapIn(bytes32 txid, uint256 swapNonce, uint256 amount, uint256 fees, uint256 fromId, bytes memory sig) public virtual override returns (bool) {\r\n        _tokenIn(_msgSender(), txid, swapNonce, amount, fees, fromId, sig);   \r\n        return true;\r\n    }  \r\n\r\n    function _tokenIn(address sender, bytes32 txid, uint256 swapNonce, uint256 amount, uint256 fees, uint256 fromId, bytes memory sig) internal {\r\n        require(!_general._isPaused, \"Contract is Paused\");\r\n        require(!_swapIn[sender][txid], \"Already Swapped\");\r\n        _sigValidate(sig, keccak256(abi.encodePacked(sender, txid, swapNonce, amount, fees, fromId, _general._baseChainId, true)), _general._validatorAdd);\r\n        _transfer(address(0), sender, amount - fees, 0, address(0));\r\n        _transfer(address(0), _general._validatorAdd, fees, 0, address(0));\r\n        _general._totalSupply += amount;\r\n        _swapIn[sender][txid] = true;\r\n        _general._swapIn += amount;\r\n        emit EventMethod(sender, \"Mint\");\r\n        emit EventMethod(_general._validatorAdd, \"Swap Fee\");\r\n    }    \r\n   \r\n    function protocolUpdate(uint256[] memory newConfig, address[2] memory account, string memory info, uint256 status) public virtual override returns (bool) {\r\n        require(_msgSender() == _general._validatorAdd, \"Only Validator Allowed\");\r\n        if(newConfig.length == 10){\r\n            _genConfig[\"maxTxLimit\"] = newConfig[0];\r\n            _genConfig[\"voteApproveRate\"] = newConfig[1]; \r\n            _genConfig[\"propDuration\"] = newConfig[2];\r\n            _genConfig[\"stakeTax\"] = newConfig[3];\r\n            _general._marketingTax = newConfig[4]; \r\n            _genConfig[\"burnTax\"] = newConfig[5];\r\n            _genConfig[\"protocolTax\"] = newConfig[6];\r\n            _genConfig[\"propStakeAmount\"] = newConfig[7]; \r\n            _genConfig[\"stakeLocktime\"] = newConfig[8];\r\n            _general._changeDate = newConfig[9];\r\n        }\r\n        if(account[0] != address(0)){\r\n           _general._validatorAdd = account[0];\r\n           _general._validatorApi = info;\r\n        }\r\n        if(account[1] != address(0)){\r\n            _general._marketingAdd = account[1];\r\n        }\r\n        if(status > 0){\r\n            _general._isPaused = (status == 1)?true:false;\r\n        }\r\n        emit Protocol(_msgSender(), newConfig, account, info, status);\r\n        return true;\r\n    } \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"}],\"name\":\"EventMethod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"config\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Proposer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newConfig\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[2]\",\"name\":\"account\",\"type\":\"address[2]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"Protocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Tax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"config\",\"type\":\"string\"}],\"name\":\"Voter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_swapIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_swapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balances\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"propStatus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tempReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPaid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isTaxable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_userVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_vote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_voteCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"sig\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"details\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"info\",\"type\":\"string[]\"},{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"byToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generalDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activeStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewardPaid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastMarketingPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastProtocolPool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_validatorAdd\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_validatorApi\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_marketingAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteApproveRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_propDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_propStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeLocktime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_changeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct GeneralDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkAntiBot\",\"outputs\":[{\"internalType\":\"contract IPinkAntiBot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"config\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newConfig\",\"type\":\"uint256[]\"},{\"internalType\":\"address[2]\",\"name\":\"account\",\"type\":\"address[2]\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"protocolUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"matchers\",\"type\":\"address[]\"}],\"name\":\"setTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"info\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"swapNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"swapIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"swapOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"config\",\"type\":\"string\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[11]\",\"name\":\"config\",\"type\":\"string[11]\"}],\"name\":\"voteAllDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"internalType\":\"struct VoteData[11]\",\"name\":\"\",\"type\":\"tuple[11]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PENNY", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9bf39e3d812a2c9552019dbacedd0b6fb0c0015563711050c438ca8e8a5e7607"}