{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.5.0;\r\n\r\ninterface IBEP20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract SOFT_PAY {\r\n    mapping(address => uint256) public users;\r\n    mapping(address => uint256) public investments;\r\n    mapping(uint256 => address) public idToAddress;\r\n  \t\r\n    event Multisended(uint256 value , address indexed sender);\r\n    event Airdropped(address indexed _userAddress, uint256 _amount);\r\n\tevent Registration(address indexed  investor, address indexed  referral,uint256 investment,uint256 investmentToken);\r\n\tevent Investment(string investorId,uint256 investment,address indexed investor,uint256 investmentToken);\r\n\tevent WithDraw(address indexed  investor,uint256 WithAmt);\r\n\tevent MemberPayment(address indexed  investor,uint256 WithAmt,uint netAmt);\r\n\tevent Payment(uint256 NetQty);\r\n    event TokenBuy(address user,uint256 tokenQty,uint256 tokenRate);\r\n\t\r\n    using SafeMath for uint256;\r\n    IBEP20 private USDT; \r\n    address public owner;\r\n    uint256 public usdToUsdtRatet=1*1e18;\r\n    uint public minimumBuy = 10*1e18;\r\n    uint public maximumBuy = 1000000*1e18 ;\r\n    uint public joinMinimumAmount = 20*1e18;\r\n    uint public lastUserId = 1000;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;  \r\n        USDT = IBEP20(0x55d398326f99059fF775485246999027B3197955);\r\n        users[owner] = 1;\r\n        idToAddress[1] = owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function newRegistration(address referral, uint256 investmentUSDT) public payable {\r\n        require(users[msg.sender] == 0, \"user exists\");\r\n        uint256 investmentToken=((investmentUSDT/usdToUsdtRatet)*1e18);  \r\n        require(investmentUSDT>=joinMinimumAmount,\"Invalid Joinging Amount\");\r\n\t\trequire(USDT.balanceOf(msg.sender)>=investmentUSDT, \"User have not enough Token\");\r\n\t\trequire(USDT.allowance(msg.sender,address(this))>=investmentUSDT,\"Approve Your Token First\");\r\n\t    USDT.transferFrom(msg.sender, address(this), investmentUSDT);\r\n\t\temit Registration(msg.sender, referral,investmentUSDT,investmentToken);\r\n        users[msg.sender] = lastUserId;\r\n        idToAddress[lastUserId] = msg.sender;\r\n        investments[msg.sender] = investmentToken;\r\n        lastUserId++;\r\n\t}\r\n\r\n\tfunction investment(string memory investor,uint investmentUSDT) public payable {\r\n        uint256 investmentToken=((investmentUSDT/usdToUsdtRatet)*1e18);  \r\n        require(investmentUSDT >= joinMinimumAmount, \"Invalid Joinging Amount\");\r\n\t\trequire(USDT.balanceOf(msg.sender) >= investmentUSDT, \"User dont have enough balance\");\r\n\t\trequire(USDT.allowance(msg.sender,address(this)) >= investmentUSDT,\"Approve Your Token First\");\r\n\t\tUSDT.transferFrom(msg.sender ,address(this),investmentUSDT);\r\n        investments[msg.sender] += investmentToken;\r\n\t\temit Investment(investor, investmentUSDT,msg.sender,investmentToken);\r\n\t}\r\n\r\n    function multisendBNB(address payable[]  calldata  _contributors, uint256[] calldata _balances) external payable {\r\n        uint256 total = msg.value;\r\n        for (uint256 i = 0; i < _contributors.length; i++) {\r\n            require(total >= _balances[i], \"Amount underflow\");\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n       \r\n    }\r\n    \r\n    function multisendToken(address payable[]  calldata  _contributors, uint256[] calldata _balances, uint256 totalQty, uint256[] calldata NetAmt) external payable {\r\n    \tuint256 total = totalQty;\r\n        for (uint256 i = 0; i < _contributors.length; i++) {\r\n            require(total >= _balances[i], \"Amount underflow\");\r\n            total = total.sub(_balances[i]);\r\n            USDT.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n\t\t\temit MemberPayment(  _contributors[i],_balances[i],NetAmt[i]);\r\n        }\r\n\t\temit Payment(totalQty);\r\n    }\r\n    \r\n\tfunction multisendWithdraw(address payable[]  calldata  _contributors, uint256[] calldata _balances) external onlyOwner payable {\r\n        for (uint i = 0; i < _contributors.length; i++) {\r\n            USDT.transfer(_contributors[i], _balances[i]);\r\n        }\r\n    }\r\n\r\n    function withdrawLostBNBFromBalance(address payable _sender) external onlyOwner {\r\n        _sender.transfer(address(this).balance);\r\n    }\r\n    \r\n  \r\n    function withdrawincomeUsdt(address payable _userAddress,uint256 WithAmt) external onlyOwner {\r\n        USDT.transferFrom(msg.sender,_userAddress, WithAmt);\r\n        emit WithDraw(_userAddress,WithAmt);\r\n    }\r\n     \r\n    function withdrawUsdt(uint256 QtyAmt) external onlyOwner {\r\n        USDT.transfer(owner,QtyAmt*1e18);\r\n\t}\r\n\r\n    function withdrawLostTokenFromBalance(uint256 QtyAmt, address token) external onlyOwner {\r\n        IBEP20(token).transfer(owner,QtyAmt*1e18);\r\n\t}\r\n\t\r\n    function setToken(address _newToken) external onlyOwner {\r\n        USDT = IBEP20(_newToken);\r\n    }\r\n\r\n    function setTokenRate(uint256 _joinMinimumAmount,uint256 _busdUsdtRate) external onlyOwner {\r\n        joinMinimumAmount = _joinMinimumAmount;\r\n        usdToUsdtRatet = _busdUsdtRate;\r\n    }\r\n\r\n    function setBuyToken(uint256 _minimumBuy,uint256 _maximumBuy) external onlyOwner {\r\n        minimumBuy=_minimumBuy;\r\n        maximumBuy=_maximumBuy;\r\n    }\r\n\r\n    function changeOwner(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentToken\",\"type\":\"uint256\"}],\"name\":\"Investment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netAmt\",\"type\":\"uint256\"}],\"name\":\"MemberPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NetQty\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentToken\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenRate\",\"type\":\"uint256\"}],\"name\":\"TokenBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"investor\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"investmentUSDT\",\"type\":\"uint256\"}],\"name\":\"investment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joinMinimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"NetAmt\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendWithdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investmentUSDT\",\"type\":\"uint256\"}],\"name\":\"newRegistration\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumBuy\",\"type\":\"uint256\"}],\"name\":\"setBuyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_joinMinimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_busdUsdtRate\",\"type\":\"uint256\"}],\"name\":\"setTokenRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdToUsdtRatet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"withdrawLostBNBFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"QtyAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawLostTokenFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"QtyAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawUsdt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawincomeUsdt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SOFT_PAY", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ec4e352a826b1ef6fdf204141b53a5fc49e28288c0d2af86614dd5c2841b2343"}