{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"AlgoVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"IShareToken.sol\\\";\\n\\nimport \\\"ContractGuard.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"Blacklistable.sol\\\";\\nimport \\\"Pausable.sol\\\";\\n\\nimport \\\"IAlgoVaultRouter.sol\\\";\\nimport \\\"IWrappedToken.sol\\\";\\nimport \\\"IAlgoVaultOracle.sol\\\";\\n\\ncontract AlgoVault is ContractGuard, ReentrancyGuard, Ownable, Blacklistable, Pausable {\\n\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    struct TokenInfo {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    uint256 public constant DIVISION_PRECISION = 1e6;\\n    uint256 public constant PRICE_PRECISION = 1e18;\\n\\n    mapping(address => mapping(address => uint256)) public stakeInfo;\\n    mapping(address => mapping(address => uint256)) public withdrawInfo;\\n\\n    mapping(address => uint256) public totalStakeRequest;\\n    mapping(address => uint256) public totalWithdrawRequest;\\n\\n    mapping(address => uint256) public minimumRequest;\\n\\n    address public share;\\n    address public wrappedToken = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address[] public baseTokenList;\\n    address[] public portfolioTokenList;\\n\\n\\n    uint256 public feeIn;\\n    uint256 public feeOut;\\n    uint256 public dailyFee;\\n    uint256 public instantWithdrawFee;\\n    uint256 public instantWithdrawFeeRatio;\\n    address public feeTo;\\n    uint256 public lastWithdrawTime;\\n\\n    address public sharePriceOracle;\\n\\n    uint256 public lockupStartTime;\\n    uint256 public lockupEndTime;\\n\\n    bool public initialized;\\n    mapping (address => bool) public isOperator;\\n\\n    event StakeRequest(address indexed user, address indexed token, uint256 amount);\\n    event WithdrawRequest(address indexed user, address indexed token, uint256 amount);\\n    event InstantWithdrawn(address indexed user, uint256 amount);\\n    event CancelStakeRequest(address indexed user, address indexed token, uint256 amount);\\n    event CancelWithdrawRequest(address indexed user, address indexed token, uint256 amount);\\n    event StakeRequestIgnored(address indexed ignored, uint256 at);\\n    event WithdrawRequestIgnored(address indexed ignored, uint256 at);\\n    event HandledStakeRequest(uint256 indexed at, address _address, address stakeTokens, uint256 baseTokenAmount, uint256 stakeShareAmount);\\n    event HandledWithdrawRequest(uint256 indexed at, address _address, address withdrawTokens, uint256 withdrawTokenAmount, uint256 shareTokenAmount);\\n    event WithdrawRequestRemoved(uint256 indexed at, address _address, address withdrawTokens, uint256 withdrawShareAmount);\\n    event FeeUpdated(uint256 indexed _feeIn, uint256 indexed _feeOut);\\n    event InstantWithdrawFeeUpdated(uint256 indexed _instantWithdrawFee);\\n    event InstantWithdrawFeeRatioUpdated(uint256 indexed _instantWithdrawFeeRatio);\\n    event DailyFeeUpdated(uint256 indexed _dailyFee);\\n    event FeeToUpdated(address indexed _feeTo);\\n    event OperatorUpdated(address indexed _operator, bool indexed _isActive);\\n    event MinimumRequestUpdated(address indexed token, uint256 _minimumRequest);\\n    event LockupTimeUpdated(uint256 indexed _lockupStartTime, uint256 indexed _lockupEndTime);\\n    event PortfolioTokenListUpdated(uint256 indexed at, address[] newPortfolioTokenList);\\n    event BaseTokenListUpdated(uint256 indexed at, address[] newBaseTokenList);\\n    event ShareTokenUpdated(address indexed newToken);\\n    event SharePriceOracleUpdated(address indexed newOracle);\\n    event GovernanceWithdrawFunds(address indexed executor, address indexed token, uint256 amount, address to);\\n    event GovernanceWithdrawFundsETH(address indexed executor, uint256 amount, address to);\\n    event DailyWithdrawn(address indexed executor, uint256 indexed time);\\n\\n    modifier onlyOperator() {\\n        require(isOperator[msg.sender] == true, \\\"caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(!initialized, \\\"already initialized\\\");\\n        _;\\n    }\\n\\n    modifier whenNotLockup() {\\n        require(getCurrentMinute() < lockupStartTime || getCurrentMinute() > lockupEndTime, \\\"contract lock up\\\");\\n        _;\\n    }\\n\\n    receive() payable external {}\\n    \\n    function initialize (\\n        address _share,\\n        uint256 _feeIn,\\n        uint256 _feeOut,\\n        uint256 _instantWithdrawFee,\\n        uint256 _instantWithdrawFeeRatio,\\n        uint256 _dailyFee,\\n        address _feeTo,\\n        uint256 _lockupStartTime,\\n        uint256 _lockupEndTime,\\n        uint256 _startTime\\n    ) public notInitialized {\\n        require(_share != address(0), \\\"share address can not be zero address\\\");\\n        require(_feeTo != address(0), \\\"feeTo address can not be zero address\\\");\\n        \\n        share = _share;\\n        feeIn = _feeIn;\\n        feeOut = _feeOut;\\n        instantWithdrawFee = _instantWithdrawFee;\\n        instantWithdrawFeeRatio = _instantWithdrawFeeRatio;\\n        dailyFee = _dailyFee;\\n        feeTo = _feeTo;\\n        lockupStartTime = _lockupStartTime;\\n        lockupEndTime = _lockupEndTime;\\n        isOperator[msg.sender] = true;\\n        lastWithdrawTime = _startTime;\\n\\n        initialized = true;\\n    }\\n\\n    function setFee(uint256 _feeIn, uint256 _feeOut) external onlyOperator {\\n        require(_feeIn <= 50000 && _feeOut <= 50000, \\\"fee: out of range\\\");\\n        feeIn = _feeIn;\\n        feeOut = _feeOut;\\n        emit FeeUpdated(_feeIn, _feeOut);\\n    }\\n\\n    function setInstantWithdrawFee(uint256 _instantWithdrawFee) external onlyOperator {\\n        require(_instantWithdrawFee <= 50000, \\\"instantWithdrawFee: out of range\\\");\\n        instantWithdrawFee = _instantWithdrawFee;\\n        emit InstantWithdrawFeeUpdated(_instantWithdrawFee);\\n    }\\n\\n    function setDailyFee(uint256 _dailyFee) external onlyOperator {\\n        require(_dailyFee <= 500, \\\"dailyFee: out of range\\\");\\n        dailyFee = _dailyFee;\\n        emit DailyFeeUpdated(_dailyFee);\\n    }\\n\\n    function setInstantWithdrawFeeRatio(uint256 _instantWithdrawFeeRatio) external onlyOperator {\\n        require(_instantWithdrawFeeRatio <= 1e6, \\\"dailyFee: out of range\\\");\\n        instantWithdrawFeeRatio = _instantWithdrawFeeRatio;\\n        emit InstantWithdrawFeeRatioUpdated(_instantWithdrawFeeRatio);\\n    }\\n\\n    function setFeeTo(address _feeTo) external onlyOperator {\\n        require(_feeTo != address(0), \\\"feeTo can not be zero address\\\");\\n        feeTo = _feeTo;\\n        emit FeeToUpdated(_feeTo);\\n    }\\n\\n    function setOperator(address _operator, bool _isActive) external onlyOwner {\\n        require(_operator != address(0), \\\"operator address can not be zero address\\\");\\n        isOperator[_operator] = _isActive;\\n        emit OperatorUpdated(_operator, _isActive);\\n    }\\n\\n    function setShareToken(address _share) external onlyOperator {\\n        require(_share != address(0), \\\"share token address can not be zero address\\\");\\n        share = _share;\\n        emit ShareTokenUpdated(_share);\\n    }\\n\\n    function setOracle(address _sharePriceOracle) external onlyOperator {\\n        require(_sharePriceOracle != address(0), \\\"sharePriceOracle address can not be zero address\\\");\\n        sharePriceOracle = _sharePriceOracle;\\n        emit SharePriceOracleUpdated(_sharePriceOracle);\\n    }\\n\\n    function pause() external onlyOperator {\\n        super._pause();\\n    }\\n\\n    function unpause() external onlyOperator {\\n        super._unpause();\\n    }\\n\\n    function setMinimumRequest(address token, uint256 _minimumRequest) external onlyOperator {\\n        minimumRequest[token] = _minimumRequest;\\n        emit MinimumRequestUpdated(token, _minimumRequest);\\n    }  \\n\\n    function setLockupTime(uint256 _lockupStartTime, uint256 _lockupEndTime) external onlyOperator {\\n        require(_lockupStartTime < 1440, \\\"lockup start time exceeds the limit.\\\");\\n        require(_lockupEndTime < 1440, \\\"lockup end time exceeds the limit.\\\");\\n        lockupStartTime = _lockupStartTime;\\n        lockupEndTime = _lockupEndTime;\\n        emit LockupTimeUpdated(_lockupStartTime, _lockupEndTime);\\n    }\\n\\n    function updatePortfolioTokenList(address[] memory newPortfolioTokenList) external onlyOperator {\\n        delete portfolioTokenList;\\n        uint256 length = newPortfolioTokenList.length;\\n        for (uint256 pid = 0; pid < length; pid++) {\\n            portfolioTokenList.push(newPortfolioTokenList[pid]);\\n        }\\n        emit PortfolioTokenListUpdated(block.number, newPortfolioTokenList);\\n    } \\n\\n    function updateBaseTokenList(address[] memory newBaseTokenList) external onlyOperator {\\n        delete baseTokenList;\\n        uint256 length = newBaseTokenList.length;\\n        for (uint256 pid = 0; pid < length; pid++) {\\n            baseTokenList.push(newBaseTokenList[pid]);\\n        }\\n        emit BaseTokenListUpdated(block.number, newBaseTokenList);\\n    } \\n\\n    function convertToWrappedToken() external payable {\\n        address user = msg.sender;\\n        uint256 amount = msg.value;\\n        IWrappedToken(wrappedToken).deposit{value:amount}();\\n        IERC20(wrappedToken).safeTransfer(user, amount);\\n    }\\n\\n    function convertToNativeToken(uint256 amount) external {\\n        require(amount != 0, \\\"amount can not be zero\\\");\\n        address user = msg.sender;\\n        IERC20(wrappedToken).transferFrom(user, address(this), amount);\\n        IWrappedToken(wrappedToken).withdraw(amount);\\n        Address.sendValue(payable(user), amount);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function shareTokenPrice(address baseToken) public view returns (uint256) {\\n        return IAlgoVaultOracle(sharePriceOracle).shareTokenPrice(baseToken);\\n    }\\n\\n    function checkPortfolioTokenList(address token) public view returns (bool) {\\n        uint length = portfolioTokenList.length;\\n        for (uint i = 0; i < length; i++) {\\n            if (token == portfolioTokenList[i])\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    function checkBaseTokenList(address token) public view returns (bool) {\\n        uint length = baseTokenList.length;\\n        for (uint i = 0; i < length; i++) {\\n            if (token == baseTokenList[i])\\n                return true;\\n        }\\n        return false;\\n    }\\n\\n    function getTokenBalance(address token) public view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function getAllPortfolioTokenBalance() public view returns (TokenInfo[] memory _balance) {\\n        uint256 length = portfolioTokenList.length;\\n        _balance = new TokenInfo[](length); // Allocate memory for the dynamic array\\n        for (uint256 pid = 0; pid < length; pid++) {\\n            address _token = portfolioTokenList[pid];\\n            _balance[pid].token = _token;\\n            _balance[pid].amount = getTokenBalance(_token);\\n        }\\n    }\\n\\n    function getTotalStakeRequest() public view returns (TokenInfo[] memory _totalStakeRequest) {\\n        uint256 length = baseTokenList.length;\\n        _totalStakeRequest = new TokenInfo[](length); // Allocate memory for the dynamic array\\n        for (uint256 pid = 0; pid < length; pid++) {\\n            address _token = baseTokenList[pid];\\n            _totalStakeRequest[pid].token = _token;\\n            _totalStakeRequest[pid].amount = totalStakeRequest[_token];\\n        }\\n    }\\n\\n    function getTotalWithdrawRequest() public view returns (TokenInfo[] memory _totalWithdrawRequest) {\\n        uint256 length = baseTokenList.length;\\n        _totalWithdrawRequest = new TokenInfo[](length); // Allocate memory for the dynamic array\\n        for (uint256 pid = 0; pid < length; pid++) {\\n            address _token = baseTokenList[pid];\\n            _totalWithdrawRequest[pid].token = _token;\\n            _totalWithdrawRequest[pid].amount = totalWithdrawRequest[_token];\\n        }\\n    }\\n\\n    // get portfolioTokenList\\n    function getAllPortfolioTokenList() public view returns (address[] memory) {\\n        return portfolioTokenList;\\n    }\\n    \\n    // get baseTokenList\\n    function getAllBaseTokenList() public view returns (address[] memory) {\\n        return baseTokenList;\\n    }\\n\\n    // get portfolio\\n    function getPortfolio() public view returns (TokenInfo[] memory _portfolio) {\\n        uint256 length = portfolioTokenList.length;\\n        _portfolio = new TokenInfo[](length); // Allocate memory for the dynamic array\\n        for (uint256 pid = 0; pid < length; pid++) {\\n            address _token = portfolioTokenList[pid];\\n            if (checkBaseTokenList(_token) == true) {\\n                _portfolio[pid].token = _token;\\n                _portfolio[pid].amount = getTokenBalance(_token) - totalStakeRequest[_token];\\n            } else {\\n                _portfolio[pid].token = _token;\\n                _portfolio[pid].amount = getTokenBalance(_token);\\n            }\\n        }\\n    }\\n\\n    // Get the timestamp of the current block and convert it to minutes\\n    function getCurrentMinute() public view returns (uint) {\\n        return (block.timestamp / 60) % 1440;\\n    }\\n\\n    function calculateShareTokenAmount(address baseToken, uint256 baseTokenAmount) public view returns (uint256) {\\n        require(baseTokenAmount != 0, \\\"base token amount can not be zero\\\");\\n        return baseTokenAmount * PRICE_PRECISION / shareTokenPrice(baseToken);\\n    }\\n\\n    function calculateBaseTokenAmount(address baseToken, uint256 shareTokenAmount) public view returns (uint256) {\\n        require(shareTokenAmount != 0, \\\"share token amount can not be zero\\\");\\n        return shareTokenAmount * shareTokenPrice(baseToken) / PRICE_PRECISION;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stakeRequest(address token, uint256 amount) external onlyOneBlock notBlacklisted(msg.sender) whenNotPaused whenNotLockup {\\n        require(amount >= minimumRequest[token], \\\"stake amount too low\\\");\\n        require(checkBaseTokenList(token) == true, \\\"token address is not in the baseTokenList\\\");\\n        if (feeIn > 0) {\\n            uint fee = amount * feeIn / DIVISION_PRECISION;\\n            amount = amount - fee;\\n            IERC20(token).safeTransferFrom(msg.sender, feeTo, fee);\\n        }\\n        stakeInfo[msg.sender][token] += amount;\\n        totalStakeRequest[token] += amount;\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        emit StakeRequest(msg.sender, token, amount);\\n    }\\n\\n    function withdrawRequest(address token, uint256 amount) external notBlacklisted(msg.sender) whenNotPaused whenNotLockup {\\n        require(amount != 0, \\\"withdraw request cannot be equal to 0\\\");\\n        require(checkBaseTokenList(token) == true, \\\"token address is not in the baseTokenList\\\");\\n        uint256 _balance = IERC20(share).balanceOf(msg.sender);\\n        require(amount <= _balance, \\\"withdraw amount exceeds the balance\\\");\\n        withdrawInfo[msg.sender][token] += amount;\\n        totalWithdrawRequest[token] += amount;\\n        IERC20(share).safeTransferFrom(msg.sender, address(this), amount);\\n        emit WithdrawRequest(msg.sender, token, amount);\\n    }\\n\\n\\n    function instantWithdraw(uint256 amount) external notBlacklisted(msg.sender) whenNotPaused whenNotLockup {\\n        require(amount != 0, \\\"withdraw request cannot be equal to 0\\\");\\n        uint256 _balance = IERC20(share).balanceOf(msg.sender);\\n        require(amount <= _balance, \\\"withdraw amount exceeds the balance\\\");\\n        uint256 shareTotalSupply = IERC20(share).totalSupply();\\n        uint256 shareRatio = amount * PRICE_PRECISION / shareTotalSupply;\\n        IShareToken(share).burn(msg.sender, amount);\\n        for (uint i = 0; i < portfolioTokenList.length; i++) {\\n            address token = portfolioTokenList[i];\\n            uint256 token_balance = getTokenBalance(token) - totalStakeRequest[token];\\n            uint256 withdrawAmount = token_balance * shareRatio / PRICE_PRECISION;\\n            if (withdrawAmount != 0) {\\n                if (instantWithdrawFee > 0) {\\n                    uint fee = withdrawAmount * instantWithdrawFee / DIVISION_PRECISION;\\n                    withdrawAmount = withdrawAmount - fee;\\n                    uint _fee = fee * instantWithdrawFeeRatio / DIVISION_PRECISION;\\n                    IERC20(token).safeTransfer(feeTo, _fee);\\n                }\\n                IERC20(token).safeTransfer(msg.sender, withdrawAmount);\\n            }\\n        }\\n        emit InstantWithdrawn(msg.sender, amount);\\n    }\\n\\n\\n    function cancelStakeRequest(address token) external onlyOneBlock notBlacklisted(msg.sender) whenNotPaused whenNotLockup {\\n        uint amount = stakeInfo[msg.sender][token];\\n        require(amount != 0, \\\"staked token amount can not be zero\\\");\\n        totalStakeRequest[token] -= amount;\\n        delete stakeInfo[msg.sender][token];\\n        IERC20(token).safeTransfer(msg.sender, amount);  \\n        emit CancelStakeRequest(msg.sender, token, amount);   \\n    }\\n\\n    function cancelWithdrawRequest(address token) external onlyOneBlock notBlacklisted(msg.sender) whenNotPaused whenNotLockup {\\n        uint amount = withdrawInfo[msg.sender][token];\\n        require(amount != 0, \\\"withdraw token amount can not be zero\\\");\\n        totalWithdrawRequest[token] -= amount;\\n        delete withdrawInfo[msg.sender][token];\\n        IERC20(share).safeTransfer(msg.sender, amount);\\n        emit CancelWithdrawRequest(msg.sender, token, amount);   \\n    }\\n\\n    function handleStakeRequest(address[] memory _address, address[] memory stakeTokens) external onlyOperator {\\n        require(_address.length == stakeTokens.length, \\\"array length mismatch\\\");\\n        for (uint i = 0; i < _address.length; i++) {\\n            address user = _address[i];\\n            address token = stakeTokens[i];\\n            uint256 baseTokenAmount = stakeInfo[user][token];\\n            if (baseTokenAmount == 0) { \\n                continue;\\n            }\\n            uint256 stakeShareAmount = calculateShareTokenAmount(token, baseTokenAmount);\\n            IShareToken(share).mint(user, stakeShareAmount);\\n            totalStakeRequest[token] -= baseTokenAmount;\\n            delete stakeInfo[user][token];\\n            emit HandledStakeRequest(block.number, user, token, baseTokenAmount, stakeShareAmount);\\n        }\\n    }\\n\\n    function handleWithdrawRequest(address[] memory _address, address[] memory withdrawTokens) external onlyOperator {\\n        require(_address.length == withdrawTokens.length, \\\"array length mismatch\\\");\\n        for (uint i = 0; i < _address.length; i++) {\\n            address user = _address[i];\\n            address token = withdrawTokens[i];\\n            uint256 shareTokenAmount = withdrawInfo[user][token];\\n            if (shareTokenAmount == 0) {\\n                continue;\\n            }\\n            uint256 withdrawTokenAmount = calculateBaseTokenAmount(token, shareTokenAmount);\\n            if (feeOut > 0) {\\n                uint fee = withdrawTokenAmount * feeOut / DIVISION_PRECISION;\\n                withdrawTokenAmount = withdrawTokenAmount - fee;\\n                IERC20(token).safeTransfer(feeTo, fee);\\n            }\\n            IShareToken(share).burn(address(this), shareTokenAmount);\\n            IERC20(token).safeTransfer(user, withdrawTokenAmount);\\n            totalWithdrawRequest[token] -= shareTokenAmount;\\n            delete withdrawInfo[user][token];\\n            emit HandledWithdrawRequest(block.number, user, token, withdrawTokenAmount, shareTokenAmount);\\n        }\\n    }\\n\\n    function removeWithdrawRequest(address[] memory _address, address[] memory tokens) external onlyOperator {\\n        require(_address.length == tokens.length, \\\"array length mismatch\\\");\\n        for (uint i = 0; i < _address.length; i++) {\\n            address user = _address[i];\\n            address token = tokens[i];\\n            uint withdrawShareAmount = withdrawInfo[user][token];\\n            IERC20(share).safeTransfer(user, withdrawShareAmount);\\n            totalWithdrawRequest[token] -= withdrawShareAmount;\\n            delete withdrawInfo[user][token];\\n            emit WithdrawRequestRemoved(block.number, user, token, withdrawShareAmount);\\n        }      \\n    }\\n\\n    function withdrawFunds(address _token, uint256 amount, address to) public onlyOperator {\\n        require(to != address(0), \\\"to address can not be zero address\\\");\\n        IERC20(_token).safeTransfer(to, amount);\\n        emit GovernanceWithdrawFunds(msg.sender, _token, amount, to);\\n    }\\n\\n    function withdrawFundsETH(uint256 amount, address to) public nonReentrant onlyOperator {\\n        require(to != address(0), \\\"to address can not be zero address\\\");\\n        Address.sendValue(payable(to), amount);\\n        emit GovernanceWithdrawFundsETH(msg.sender, amount, to);\\n    }\\n\\n    function dailyWithdraw() external nonReentrant onlyOperator {\\n        require(block.timestamp - lastWithdrawTime > 86400, \\\"can not withdraw\\\");\\n        uint epochs = (block.timestamp - lastWithdrawTime) / 86400;\\n        for (uint i = 0; i < portfolioTokenList.length; i++) {\\n            address token = portfolioTokenList[i];\\n            uint256 token_balance = getTokenBalance(token) - totalStakeRequest[token];\\n            if (token_balance != 0) {\\n                uint256 withdrawAmount = token_balance * dailyFee * epochs / DIVISION_PRECISION;  \\n                withdrawFunds(token, withdrawAmount, feeTo);\\n            }\\n        }\\n        lastWithdrawTime = block.timestamp;\\n        emit DailyWithdrawn(msg.sender, block.timestamp);\\n    }\\n\\n    function executeAction(\\n        address internalRouter,\\n        address externalRouter,\\n        address fromTokenAddress,\\n        address toTokenAddress,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyOperator {\\n        IERC20(fromTokenAddress).safeApprove(internalRouter, 0);\\n        IERC20(fromTokenAddress).safeApprove(internalRouter, amount);\\n        IAlgoVaultRouter(internalRouter).executeWithData(externalRouter, fromTokenAddress, toTokenAddress, amount, address(this), data, true);\\n    }\\n\\n    function batchExecuteActions(\\n        address[] memory internalRouter,\\n        address[] memory externalRouter,\\n        address[] memory fromTokenAddresses,\\n        address[] memory toTokenAddresses,\\n        uint256[] memory amounts,\\n        bytes[] memory data\\n    ) external onlyOperator {\\n        require(fromTokenAddresses.length == internalRouter.length, \\\"address array length mismatch\\\");\\n        require(fromTokenAddresses.length == externalRouter.length, \\\"address array length mismatch\\\");\\n        require(fromTokenAddresses.length == toTokenAddresses.length, \\\"address array length mismatch\\\");\\n        require(fromTokenAddresses.length == amounts.length, \\\"amount array length mismatch\\\");\\n        require(fromTokenAddresses.length == data.length, \\\"data array length mismatch\\\");\\n        for (uint i = 0; i < fromTokenAddresses.length; i++) {\\n            address _internalRouter = internalRouter[i];\\n            address _externalRouter = externalRouter[i];\\n            address fromTokenAddress = fromTokenAddresses[i];\\n            address toTokenAddress = toTokenAddresses[i];\\n            uint256 amount = amounts[i];\\n            bytes memory _data = data[i];\\n            executeAction(_internalRouter, _externalRouter, fromTokenAddress, toTokenAddress, amount, _data);\\n        }\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"IShareToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"IERC20.sol\\\";\\n\\ninterface IShareToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\"\r\n    },\r\n    \"ContractGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"Blacklistable.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"Ownable.sol\\\";\\n\\nabstract contract Blacklistable is Ownable {\\n    address internal _blacklister;\\n    mapping(address => bool) internal _blacklisted;\\n\\n    event Blacklisted(address indexed account);\\n    event UnBlacklisted(address indexed account);\\n    event BlacklisterChanged(address indexed newBlacklister);\\n\\n    /**\\n     * @notice Throw if called by any account other than the blacklister\\n     */\\n    modifier onlyBlacklister() {\\n        require(msg.sender == _blacklister, \\\"caller is not the blacklister\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Throw if argument account is blacklisted\\n     * @param account The address to check\\n     */\\n    modifier notBlacklisted(address account) {\\n        require(!_blacklisted[account], \\\"account is blacklisted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Blacklister address\\n     * @return Address\\n     */\\n    function blacklister() external view returns (address) {\\n        return _blacklister;\\n    }\\n\\n    /**\\n     * @notice Check whether a given account is blacklisted\\n     * @param account The address to check\\n     */\\n    function isBlacklisted(address account) external view returns (bool) {\\n        return _blacklisted[account];\\n    }\\n\\n    /**\\n     * @notice Add an account to blacklist\\n     * @param account The address to blacklist\\n     */\\n    function blacklist(address account) external onlyBlacklister {\\n        _blacklisted[account] = true;\\n        emit Blacklisted(account);\\n    }\\n\\n    /**\\n     * @notice Remove an account from blacklist\\n     * @param account The address to remove from the blacklist\\n     */\\n    function unBlacklist(address account) external onlyBlacklister {\\n        _blacklisted[account] = false;\\n        emit UnBlacklisted(account);\\n    }\\n\\n    /**\\n     * @notice Change the blacklister\\n     * @param newBlacklister new blacklister's address\\n     */\\n    function updateBlacklister(address newBlacklister) external onlyOwner {\\n        require(\\n            newBlacklister != address(0),\\n            \\\"new blacklister is the zero address\\\"\\n        );\\n        _blacklister = newBlacklister;\\n        emit BlacklisterChanged(_blacklister);\\n    }\\n}\"\r\n    },\r\n    \"Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool internal _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\"\r\n    },\r\n    \"IAlgoVaultRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IAlgoVaultRouter {\\n    function executeWithData(\\n        address externalRouter,\\n        address fromTokenAddress, \\n        address toTokenAddress, \\n        uint256 amount, \\n        address receiver,\\n        bytes memory data, \\n        bool restriction\\n    ) external;\\n}\"\r\n    },\r\n    \"IWrappedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"IERC20.sol\\\";\\n\\npragma solidity 0.8.13;\\n\\ninterface IWrappedToken is IERC20 {\\n    \\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\"\r\n    },\r\n    \"IAlgoVaultOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\ninterface IAlgoVaultOracle {\\n\\n    function shareTokenPrice(address token) external view returns (uint256);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"AlgoVault.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newBaseTokenList\",\"type\":\"address[]\"}],\"name\":\"BaseTokenListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"BlacklisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CancelStakeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CancelWithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_dailyFee\",\"type\":\"uint256\"}],\"name\":\"DailyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DailyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"FeeToUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_feeIn\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_feeOut\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"GovernanceWithdrawFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"GovernanceWithdrawFundsETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeTokens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeShareAmount\",\"type\":\"uint256\"}],\"name\":\"HandledStakeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawTokens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shareTokenAmount\",\"type\":\"uint256\"}],\"name\":\"HandledWithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_instantWithdrawFeeRatio\",\"type\":\"uint256\"}],\"name\":\"InstantWithdrawFeeRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_instantWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"InstantWithdrawFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InstantWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lockupStartTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lockupEndTime\",\"type\":\"uint256\"}],\"name\":\"LockupTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumRequest\",\"type\":\"uint256\"}],\"name\":\"MinimumRequestUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newPortfolioTokenList\",\"type\":\"address[]\"}],\"name\":\"PortfolioTokenListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"SharePriceOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"ShareTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ignored\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"StakeRequestIgnored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ignored\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequestIgnored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawTokens\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawShareAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequestRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DIVISION_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"baseTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"internalRouter\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"externalRouter\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"fromTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"toTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchExecuteActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareTokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateBaseTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateShareTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"cancelStakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"cancelWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkBaseTokenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkPortfolioTokenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertToNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convertToWrappedToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"internalRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"externalRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBaseTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPortfolioTokenBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AlgoVault.TokenInfo[]\",\"name\":\"_balance\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPortfolioTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMinute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPortfolio\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AlgoVault.TokenInfo[]\",\"name\":\"_portfolio\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakeRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AlgoVault.TokenInfo[]\",\"name\":\"_totalStakeRequest\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWithdrawRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AlgoVault.TokenInfo[]\",\"name\":\"_totalWithdrawRequest\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"stakeTokens\",\"type\":\"address[]\"}],\"name\":\"handleStakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"withdrawTokens\",\"type\":\"address[]\"}],\"name\":\"handleWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_instantWithdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_instantWithdrawFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockupStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"instantWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantWithdrawFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWithdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minimumRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"portfolioTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"removeWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyFee\",\"type\":\"uint256\"}],\"name\":\"setDailyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeOut\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_instantWithdrawFee\",\"type\":\"uint256\"}],\"name\":\"setInstantWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_instantWithdrawFeeRatio\",\"type\":\"uint256\"}],\"name\":\"setInstantWithdrawFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockupStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupEndTime\",\"type\":\"uint256\"}],\"name\":\"setLockupTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumRequest\",\"type\":\"uint256\"}],\"name\":\"setMinimumRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sharePriceOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"}],\"name\":\"setShareToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"}],\"name\":\"shareTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakeRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalWithdrawRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newBaseTokenList\",\"type\":\"address[]\"}],\"name\":\"updateBaseTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newPortfolioTokenList\",\"type\":\"address[]\"}],\"name\":\"updatePortfolioTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFundsETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AlgoVault", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}