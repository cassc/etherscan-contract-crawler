{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DecimalMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary MySafeMath {\\n    using SafeMath for uint256;\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = a.div(b);\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n}\\n\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant ONE = 10**18;\\n    uint256 internal constant ONE2 = 10**36;\\n\\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d) / (10**18);\\n    }\\n\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return MySafeMath.divCeil(target.mul(d), 10**18);\\n    }\\n\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(10**18).div(d);\\n    }\\n\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return MySafeMath.divCeil(target.mul(10**18), d);\\n    }\\n\\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\\n        return uint256(10**36).div(target);\\n    }\\n\\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\\n        return MySafeMath.divCeil(uint256(10**36), target);\\n    }\\n}\"\r\n    },\r\n    \"contracts/token/VBabyToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libraries/DecimalMath.sol\\\";\\n\\ncontract vBABYToken is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // ============ Storage(ERC20) ============\\n\\n    string public name = \\\"vBABY Membership Token\\\";\\n    string public symbol = \\\"vBABY\\\";\\n    uint8 public decimals = 18;\\n\\n    mapping(address => mapping(address => uint256)) internal _allowed;\\n\\n    // ============ Storage ============\\n\\n    address public _babyToken;\\n    address public _babyTeam;\\n    address public _babyReserve;\\n    address public _babyTreasury;\\n    bool public _canTransfer;\\n    address public constant hole = 0x000000000000000000000000000000000000dEaD;\\n\\n    // staking reward parameters\\n    uint256 public _babyPerBlock;\\n    uint256 public constant _superiorRatio = 10**17; // 0.1\\n    uint256 public constant _babyRatio = 100; // 100\\n    uint256 public _babyFeeBurnRatio = 30 * 10**16; //30%\\n    uint256 public _babyFeeReserveRatio = 20 * 10**16; //20%\\n    uint256 public _feeRatio = 10 * 10**16; //10%;\\n    // accounting\\n    uint112 public alpha = 10**18; // 1\\n    uint112 public _totalBlockDistribution;\\n    uint32 public _lastRewardBlock;\\n\\n    uint256 public _totalBlockReward;\\n    uint256 public _totalStakingPower;\\n    mapping(address => UserInfo) public userInfo;\\n\\n    uint256 public _superiorMinBABY = 100e18; //The superior must obtain the min BABY that should be pledged for invitation rewards\\n\\n    struct UserInfo {\\n        uint128 stakingPower;\\n        uint128 superiorSP;\\n        address superior;\\n        uint256 credit;\\n        uint256 creditDebt;\\n    }\\n\\n    // ============ Events ============\\n\\n    event MintVBABY(\\n        address user,\\n        address superior,\\n        uint256 mintBABY,\\n        uint256 totalStakingPower\\n    );\\n    event RedeemVBABY(\\n        address user,\\n        uint256 receiveBABY,\\n        uint256 burnBABY,\\n        uint256 feeBABY,\\n        uint256 reserveBABY,\\n        uint256 totalStakingPower\\n    );\\n    event DonateBABY(address user, uint256 donateBABY);\\n    event SetCanTransfer(bool allowed);\\n\\n    event PreDeposit(uint256 babyAmount);\\n    event ChangePerReward(uint256 babyPerBlock);\\n    event UpdateBABYFeeBurnRatio(uint256 babyFeeBurnRatio);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    // ============ Modifiers ============\\n\\n    modifier canTransfer() {\\n        require(_canTransfer, \\\"vBABYToken: not the allowed transfer\\\");\\n        _;\\n    }\\n\\n    modifier balanceEnough(address account, uint256 amount) {\\n        require(\\n            availableBalanceOf(account) >= amount,\\n            \\\"vBABYToken: available amount not enough\\\"\\n        );\\n        _;\\n    }\\n\\n    event TokenInfo(uint256 babyTokenSupply, uint256 babyBalanceInVBaby);\\n    event CurrentUserInfo(\\n        address user,\\n        uint128 stakingPower,\\n        uint128 superiorSP,\\n        address superior,\\n        uint256 credit,\\n        uint256 creditDebt\\n    );\\n\\n    function logTokenInfo(IERC20 token) internal {\\n        emit TokenInfo(token.totalSupply(), token.balanceOf(address(this)));\\n    }\\n\\n    function logCurrentUserInfo(address user) internal {\\n        UserInfo storage currentUser = userInfo[user];\\n        emit CurrentUserInfo(\\n            user,\\n            currentUser.stakingPower,\\n            currentUser.superiorSP,\\n            currentUser.superior,\\n            currentUser.credit,\\n            currentUser.creditDebt\\n        );\\n    }\\n\\n    // ============ Constructor ============\\n\\n    constructor(\\n        address babyToken,\\n        address babyTeam,\\n        address babyReserve,\\n        address babyTreasury\\n    ) {\\n        _babyToken = babyToken;\\n        _babyTeam = babyTeam;\\n        _babyReserve = babyReserve;\\n        _babyTreasury = babyTreasury;\\n        changePerReward(2 * 10**18);\\n    }\\n\\n    // ============ Ownable Functions ============`\\n\\n    function setCanTransfer(bool allowed) public onlyOwner {\\n        _canTransfer = allowed;\\n        emit SetCanTransfer(allowed);\\n    }\\n\\n    function changePerReward(uint256 babyPerBlock) public onlyOwner {\\n        _updateAlpha();\\n        _babyPerBlock = babyPerBlock;\\n        logTokenInfo(IERC20(_babyToken));\\n        emit ChangePerReward(babyPerBlock);\\n    }\\n\\n    function updateBABYFeeBurnRatio(uint256 babyFeeBurnRatio) public onlyOwner {\\n        _babyFeeBurnRatio = babyFeeBurnRatio;\\n        emit UpdateBABYFeeBurnRatio(_babyFeeBurnRatio);\\n    }\\n\\n    function updateBABYFeeReserveRatio(uint256 babyFeeReserve)\\n        public\\n        onlyOwner\\n    {\\n        _babyFeeReserveRatio = babyFeeReserve;\\n    }\\n\\n    function updateTeamAddress(address team) public onlyOwner {\\n        _babyTeam = team;\\n    }\\n\\n    function updateTreasuryAddress(address treasury) public onlyOwner {\\n        _babyTreasury = treasury;\\n    }\\n\\n    function updateReserveAddress(address newAddress) public onlyOwner {\\n        _babyReserve = newAddress;\\n    }\\n\\n    function setSuperiorMinBABY(uint256 val) public onlyOwner {\\n        _superiorMinBABY = val;\\n    }\\n\\n    function emergencyWithdraw() public onlyOwner {\\n        uint256 babyBalance = IERC20(_babyToken).balanceOf(address(this));\\n        IERC20(_babyToken).safeTransfer(owner(), babyBalance);\\n    }\\n\\n    // ============ Mint & Redeem & Donate ============\\n\\n    function mint(uint256 babyAmount, address superiorAddress) public {\\n        require(\\n            superiorAddress != address(0) && superiorAddress != msg.sender,\\n            \\\"vBABYToken: Superior INVALID\\\"\\n        );\\n        require(babyAmount >= 1e18, \\\"vBABYToken: must mint greater than 1\\\");\\n\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        if (user.superior == address(0)) {\\n            require(\\n                superiorAddress == _babyTeam ||\\n                    userInfo[superiorAddress].superior != address(0),\\n                \\\"vBABYToken: INVALID_SUPERIOR_ADDRESS\\\"\\n            );\\n            user.superior = superiorAddress;\\n        }\\n\\n        if (_superiorMinBABY > 0) {\\n            uint256 curBABY = babyBalanceOf(user.superior);\\n            if (curBABY < _superiorMinBABY) {\\n                user.superior = _babyTeam;\\n            }\\n        }\\n\\n        _updateAlpha();\\n\\n        IERC20(_babyToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            babyAmount\\n        );\\n\\n        uint256 newStakingPower = DecimalMath.divFloor(babyAmount, alpha);\\n\\n        _mint(user, newStakingPower);\\n\\n        logTokenInfo(IERC20(_babyToken));\\n        logCurrentUserInfo(msg.sender);\\n        logCurrentUserInfo(user.superior);\\n        emit MintVBABY(\\n            msg.sender,\\n            superiorAddress,\\n            babyAmount,\\n            _totalStakingPower\\n        );\\n    }\\n\\n    function redeem(uint256 vBabyAmount, bool all)\\n        public\\n        balanceEnough(msg.sender, vBabyAmount)\\n    {\\n        _updateAlpha();\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        uint256 babyAmount;\\n        uint256 stakingPower;\\n\\n        if (all) {\\n            stakingPower = uint256(user.stakingPower).sub(\\n                DecimalMath.divFloor(user.credit, alpha)\\n            );\\n            babyAmount = DecimalMath.mulFloor(stakingPower, alpha);\\n        } else {\\n            babyAmount = vBabyAmount.mul(_babyRatio);\\n            stakingPower = DecimalMath.divFloor(babyAmount, alpha);\\n        }\\n\\n        _redeem(user, stakingPower);\\n\\n        (\\n            uint256 babyReceive,\\n            uint256 burnBabyAmount,\\n            uint256 withdrawFeeAmount,\\n            uint256 reserveAmount\\n        ) = getWithdrawResult(babyAmount);\\n\\n        IERC20(_babyToken).safeTransfer(msg.sender, babyReceive);\\n\\n        if (burnBabyAmount > 0) {\\n            IERC20(_babyToken).safeTransfer(hole, burnBabyAmount);\\n        }\\n        if (reserveAmount > 0) {\\n            IERC20(_babyToken).safeTransfer(_babyReserve, reserveAmount);\\n        }\\n\\n        if (withdrawFeeAmount > 0) {\\n            alpha = uint112(\\n                uint256(alpha).add(\\n                    DecimalMath.divFloor(withdrawFeeAmount, _totalStakingPower)\\n                )\\n            );\\n        }\\n\\n        logTokenInfo(IERC20(_babyToken));\\n        logCurrentUserInfo(msg.sender);\\n        logCurrentUserInfo(user.superior);\\n        emit RedeemVBABY(\\n            msg.sender,\\n            babyReceive,\\n            burnBabyAmount,\\n            withdrawFeeAmount,\\n            reserveAmount,\\n            _totalStakingPower\\n        );\\n    }\\n\\n    function donate(uint256 babyAmount) public {\\n        IERC20(_babyToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            babyAmount\\n        );\\n\\n        alpha = uint112(\\n            uint256(alpha).add(\\n                DecimalMath.divFloor(babyAmount, _totalStakingPower)\\n            )\\n        );\\n        logTokenInfo(IERC20(_babyToken));\\n        emit DonateBABY(msg.sender, babyAmount);\\n    }\\n\\n    function totalSupply() public view returns (uint256 vBabySupply) {\\n        uint256 totalBaby = IERC20(_babyToken).balanceOf(address(this));\\n        (, uint256 curDistribution) = getLatestAlpha();\\n\\n        uint256 actualBaby = totalBaby.add(curDistribution);\\n        vBabySupply = actualBaby / _babyRatio;\\n    }\\n\\n    function balanceOf(address account)\\n        public\\n        view\\n        returns (uint256 vBabyAmount)\\n    {\\n        vBabyAmount = babyBalanceOf(account) / _babyRatio;\\n    }\\n\\n    function transfer(address to, uint256 vBabyAmount) public returns (bool) {\\n        _updateAlpha();\\n        _transfer(msg.sender, to, vBabyAmount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 vBabyAmount)\\n        public\\n        canTransfer\\n        returns (bool)\\n    {\\n        _allowed[msg.sender][spender] = vBabyAmount;\\n        emit Approval(msg.sender, spender, vBabyAmount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 vBabyAmount\\n    ) public returns (bool) {\\n        require(\\n            vBabyAmount <= _allowed[from][msg.sender],\\n            \\\"ALLOWANCE_NOT_ENOUGH\\\"\\n        );\\n        _updateAlpha();\\n        _transfer(from, to, vBabyAmount);\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(\\n            vBabyAmount\\n        );\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _allowed[owner][spender];\\n    }\\n\\n    // ============ Helper Functions ============\\n\\n    function getLatestAlpha()\\n        public\\n        view\\n        returns (uint256 newAlpha, uint256 curDistribution)\\n    {\\n        if (_lastRewardBlock == 0) {\\n            curDistribution = 0;\\n        } else {\\n            curDistribution = _babyPerBlock * (block.number - _lastRewardBlock);\\n        }\\n        if (_totalStakingPower > 0) {\\n            newAlpha = uint256(alpha).add(\\n                DecimalMath.divFloor(curDistribution, _totalStakingPower)\\n            );\\n        } else {\\n            newAlpha = alpha;\\n        }\\n    }\\n\\n    function availableBalanceOf(address account)\\n        public\\n        view\\n        returns (uint256 vBabyAmount)\\n    {\\n        vBabyAmount = balanceOf(account);\\n    }\\n\\n    function babyBalanceOf(address account)\\n        public\\n        view\\n        returns (uint256 babyAmount)\\n    {\\n        UserInfo memory user = userInfo[account];\\n        (uint256 newAlpha, ) = getLatestAlpha();\\n        uint256 nominalBaby = DecimalMath.mulFloor(\\n            uint256(user.stakingPower),\\n            newAlpha\\n        );\\n        if (nominalBaby > user.credit) {\\n            babyAmount = nominalBaby - user.credit;\\n        } else {\\n            babyAmount = 0;\\n        }\\n    }\\n\\n    function getWithdrawResult(uint256 babyAmount)\\n        public\\n        view\\n        returns (\\n            uint256 babyReceive,\\n            uint256 burnBabyAmount,\\n            uint256 withdrawFeeBabyAmount,\\n            uint256 reserveBabyAmount\\n        )\\n    {\\n        uint256 feeRatio = _feeRatio;\\n\\n        withdrawFeeBabyAmount = DecimalMath.mulFloor(babyAmount, feeRatio);\\n        babyReceive = babyAmount.sub(withdrawFeeBabyAmount);\\n\\n        burnBabyAmount = DecimalMath.mulFloor(\\n            withdrawFeeBabyAmount,\\n            _babyFeeBurnRatio\\n        );\\n        reserveBabyAmount = DecimalMath.mulFloor(\\n            withdrawFeeBabyAmount,\\n            _babyFeeReserveRatio\\n        );\\n\\n        withdrawFeeBabyAmount = withdrawFeeBabyAmount.sub(burnBabyAmount);\\n        withdrawFeeBabyAmount = withdrawFeeBabyAmount.sub(reserveBabyAmount);\\n    }\\n\\n    function setRatioValue(uint256 ratioFee) public onlyOwner {\\n        _feeRatio = ratioFee;\\n    }\\n\\n    function getSuperior(address account)\\n        public\\n        view\\n        returns (address superior)\\n    {\\n        return userInfo[account].superior;\\n    }\\n\\n    // ============ Internal Functions ============\\n\\n    function _updateAlpha() internal {\\n        (uint256 newAlpha, uint256 curDistribution) = getLatestAlpha();\\n        uint256 newTotalDistribution = curDistribution.add(\\n            _totalBlockDistribution\\n        );\\n        require(\\n            newAlpha <= uint112(-1) && newTotalDistribution <= uint112(-1),\\n            \\\"OVERFLOW\\\"\\n        );\\n        alpha = uint112(newAlpha);\\n        _totalBlockDistribution = uint112(newTotalDistribution);\\n        _lastRewardBlock = uint32(block.number);\\n\\n        if (curDistribution > 0) {\\n            IERC20(_babyToken).safeTransferFrom(\\n                _babyTreasury,\\n                address(this),\\n                curDistribution\\n            );\\n\\n            _totalBlockReward = _totalBlockReward.add(curDistribution);\\n            logTokenInfo(IERC20(_babyToken));\\n            emit PreDeposit(curDistribution);\\n        }\\n    }\\n\\n    function _mint(UserInfo storage to, uint256 stakingPower) internal {\\n        require(stakingPower <= uint128(-1), \\\"OVERFLOW\\\");\\n        UserInfo storage superior = userInfo[to.superior];\\n        uint256 superiorIncreSP = DecimalMath.mulFloor(\\n            stakingPower,\\n            _superiorRatio\\n        );\\n        uint256 superiorIncreCredit = DecimalMath.mulFloor(\\n            superiorIncreSP,\\n            alpha\\n        );\\n\\n        to.stakingPower = uint128(uint256(to.stakingPower).add(stakingPower));\\n        to.superiorSP = uint128(uint256(to.superiorSP).add(superiorIncreSP));\\n\\n        superior.stakingPower = uint128(\\n            uint256(superior.stakingPower).add(superiorIncreSP)\\n        );\\n        superior.credit = uint128(\\n            uint256(superior.credit).add(superiorIncreCredit)\\n        );\\n\\n        _totalStakingPower = _totalStakingPower.add(stakingPower).add(\\n            superiorIncreSP\\n        );\\n    }\\n\\n    function _redeem(UserInfo storage from, uint256 stakingPower) internal {\\n        from.stakingPower = uint128(\\n            uint256(from.stakingPower).sub(stakingPower)\\n        );\\n\\n        uint256 userCreditSP = DecimalMath.divFloor(from.credit, alpha);\\n        if (from.stakingPower > userCreditSP) {\\n            from.stakingPower = uint128(\\n                uint256(from.stakingPower).sub(userCreditSP)\\n            );\\n        } else {\\n            userCreditSP = from.stakingPower;\\n            from.stakingPower = 0;\\n        }\\n        from.creditDebt = from.creditDebt.add(from.credit);\\n        from.credit = 0;\\n\\n        // superior decrease sp = min(stakingPower*0.1, from.superiorSP)\\n        uint256 superiorDecreSP = DecimalMath.mulFloor(\\n            stakingPower,\\n            _superiorRatio\\n        );\\n        superiorDecreSP = from.superiorSP <= superiorDecreSP\\n            ? from.superiorSP\\n            : superiorDecreSP;\\n        from.superiorSP = uint128(\\n            uint256(from.superiorSP).sub(superiorDecreSP)\\n        );\\n        uint256 superiorDecreCredit = DecimalMath.mulFloor(\\n            superiorDecreSP,\\n            alpha\\n        );\\n\\n        UserInfo storage superior = userInfo[from.superior];\\n        if (superiorDecreCredit > superior.creditDebt) {\\n            uint256 dec = DecimalMath.divFloor(superior.creditDebt, alpha);\\n            superiorDecreSP = dec >= superiorDecreSP\\n                ? 0\\n                : superiorDecreSP.sub(dec);\\n            superiorDecreCredit = superiorDecreCredit.sub(superior.creditDebt);\\n            superior.creditDebt = 0;\\n        } else {\\n            superior.creditDebt = superior.creditDebt.sub(superiorDecreCredit);\\n            superiorDecreCredit = 0;\\n            superiorDecreSP = 0;\\n        }\\n        uint256 creditSP = DecimalMath.divFloor(superior.credit, alpha);\\n\\n        if (superiorDecreSP >= creditSP) {\\n            superior.credit = 0;\\n            superior.stakingPower = uint128(\\n                uint256(superior.stakingPower).sub(creditSP)\\n            );\\n        } else {\\n            superior.credit = uint128(\\n                uint256(superior.credit).sub(superiorDecreCredit)\\n            );\\n            superior.stakingPower = uint128(\\n                uint256(superior.stakingPower).sub(superiorDecreSP)\\n            );\\n        }\\n\\n        _totalStakingPower = _totalStakingPower\\n            .sub(stakingPower)\\n            .sub(superiorDecreSP)\\n            .sub(userCreditSP);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 vBabyAmount\\n    ) internal canTransfer balanceEnough(from, vBabyAmount) {\\n        require(from != address(0), \\\"transfer from the zero address\\\");\\n        require(to != address(0), \\\"transfer to the zero address\\\");\\n        require(from != to, \\\"transfer from same with to\\\");\\n\\n        uint256 stakingPower = DecimalMath.divFloor(\\n            vBabyAmount * _babyRatio,\\n            alpha\\n        );\\n\\n        UserInfo storage fromUser = userInfo[from];\\n        UserInfo storage toUser = userInfo[to];\\n\\n        _redeem(fromUser, stakingPower);\\n        _mint(toUser, stakingPower);\\n\\n        logTokenInfo(IERC20(_babyToken));\\n        logCurrentUserInfo(from);\\n        logCurrentUserInfo(fromUser.superior);\\n        logCurrentUserInfo(to);\\n        logCurrentUserInfo(toUser.superior);\\n        emit Transfer(from, to, vBabyAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vbaby/VBabyDonateSchedule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../token/VBabyToken.sol\\\";\\n\\ncontract VBabyDonateSchedule is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public vault;\\n    address public caller;\\n    uint256 public donationsPerDay;\\n    vBABYToken public vBaby;\\n    IERC20 public babyToken;\\n    bool public isPause;\\n    mapping(uint256 => bool) public isExecuted;\\n\\n    event NewDonations(uint256 oldValue, uint256 newValue);\\n    event NewVault(address oldVault, address newVault);\\n    event NewCaller(address oldCaller, address newCaller);\\n    event SwitchDonate(bool isPause);\\n    event DonateExecuted(uint256 value);\\n\\n    constructor(\\n        vBABYToken vBaby_,\\n        IERC20 babyToken_,\\n        address vault_,\\n        address caller_,\\n        uint256 donationsPerDay_\\n    ) {\\n        vBaby = vBaby_;\\n        babyToken = babyToken_;\\n        vault = vault_;\\n        caller = caller_;\\n        donationsPerDay = donationsPerDay_;\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        emit NewVault(vault, _vault);\\n        vault = _vault;\\n    }\\n\\n    function switchDonate() external onlyOwner {\\n        isPause = !isPause;\\n        emit SwitchDonate(isPause);\\n    }\\n\\n    function setCaller(address _caller) external onlyOwner {\\n        emit NewCaller(caller, _caller);\\n        caller = _caller;\\n    }\\n\\n    function setDonationsPerDay(uint256 _donationsPerDay) external onlyOwner {\\n        emit NewDonations(donationsPerDay, _donationsPerDay);\\n        donationsPerDay = _donationsPerDay;\\n    }\\n\\n    modifier onlyCaller() {\\n        require(msg.sender == caller, \\\"only the caller can do this action\\\");\\n        _;\\n    }\\n\\n    function execDonate() external onlyCaller {\\n        require(!isExecuted[block.timestamp.div(1 days)], \\\"executed today\\\");\\n        require(!isPause, \\\"task paused\\\");\\n        isExecuted[block.timestamp.div(1 days)] = true;\\n        babyToken.safeTransferFrom(vault, address(this), donationsPerDay);\\n        babyToken.approve(address(vBaby), donationsPerDay);\\n        vBaby.donate(donationsPerDay);\\n\\n        emit DonateExecuted(donationsPerDay);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract vBABYToken\",\"name\":\"vBaby_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"babyToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"donationsPerDay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DonateExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCaller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCaller\",\"type\":\"address\"}],\"name\":\"NewCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"NewDonations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"NewVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPause\",\"type\":\"bool\"}],\"name\":\"SwitchDonate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"babyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execDonate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"setCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_donationsPerDay\",\"type\":\"uint256\"}],\"name\":\"setDonationsPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchDonate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBaby\",\"outputs\":[{\"internalType\":\"contract vBABYToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VBabyDonateSchedule", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000005134427ca04fe0712b29fb50c4d573f63e5cb2200000000000000000000000053e562b9b7e5e94b81f10e96ee70ad06df3d26570000000000000000000000005bb4b2acdf3d9f188eb985c4b3610a5d6801e942000000000000000000000000c0a56aee755bd397235367008f7c2c4599768395000000000000000000000000000000000000000000000a968163f0a57b400000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}