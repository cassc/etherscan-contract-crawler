{"SourceCode": "// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/staking3years.sol\r\n\r\n\r\npragma solidity 0.8.13;\r\n\r\n\r\n\r\n\r\ncontract ThreeYearsStakingContract is Ownable, ReentrancyGuard {\r\n\r\n    address public constant STAKING_TOKEN_ADDRESS = 0x1d0Ac23F03870f768ca005c84cBb6FB82aa884fD; // galeon address\r\n    IERC20 private constant STAKING_TOKEN = IERC20(STAKING_TOKEN_ADDRESS);\r\n\r\n    uint public constant POOL_SIZE = 180 * 1e6 * 1e18;\r\n    uint public constant MAX_SUPPLY = 200 * 1e6 * 1e18;\r\n    uint public constant STAKING_DURATION = 1095 days; // 3 years\r\n    uint public constant MIN_APR = 30; // 30 % = 10000 * POOL_SIZE / MAX_SUPPLY / STAKING_YEARS_PERCENT\r\n    uint public constant MINIMUM_AMOUNT = 500 * 1e18; // TODO 500\r\n\r\n    uint private constant SECONDS_IN_YEAR = 60 * 60 * 24 * 365;\r\n    uint private constant STAKING_YEARS_PERCENT = 300;\r\n\r\n    mapping(address => uint[]) private userStakeIds;\r\n\r\n    mapping(uint => address) public stakingUser;\r\n    mapping(uint => uint) public stakingAmount;\r\n    mapping(uint => uint) public stakingEndDate;\r\n    mapping(uint => uint) public stakingLastClaim;\r\n\r\n    uint public stakesCount;\r\n    uint public totalSupply; // Doesn't decrease on unstake\r\n    uint public totalStaked; // Decreases on unstake\r\n    bool public stakingAllowed;\r\n    uint public lastUpdatePoolSizePercent;\r\n    uint public maxApr;\r\n    uint public percentAutoUpdatePool;\r\n\r\n    struct Struct {\r\n        uint timestamp;\r\n        uint apr;\r\n    }\r\n\r\n    struct Stake {\r\n        uint id;\r\n        uint amount;\r\n        uint endDate;\r\n        uint lastClaim;\r\n    }\r\n\r\n    struct Status {\r\n        bool stakingAllowed;\r\n        uint currentApr;\r\n        uint stakesCount;\r\n        uint totalSupply;\r\n    }\r\n\r\n    Struct[] public aprHistory;\r\n\r\n    mapping(address => bool) private stakerAddressList;\r\n\r\n    constructor() {\r\n        totalSupply = 0;\r\n        lastUpdatePoolSizePercent = 0;\r\n        stakingAllowed = false; // TODO false\r\n        maxApr = 500;\r\n        stakesCount = 0;\r\n        percentAutoUpdatePool = 5;\r\n        aprHistory.push(Struct(block.timestamp, maxApr));\r\n    }\r\n\r\n    event Staked(uint _amount, uint _totalSupply);\r\n    event ReStaked(uint _amount);\r\n    event Unstaked(uint _amount);\r\n    event Claimed(uint _claimed);\r\n    event StakingAllowed(bool _allow);\r\n    event AprUpdated(uint _lastupdate, uint _apr);\r\n    event AdjustMaxApr(uint _maxApr);\r\n    event AdjustpercentAutoUpdatePool(uint _percentAutoUpdatePool);\r\n    event UpdatedStaker(address _staker, bool _allowed);\r\n    event LastClaim(address _staker, uint _lastClaim);\r\n\r\n    function addStakerAddress(address _addr) external onlyOwner {\r\n        stakerAddressList[_addr] = true;\r\n        emit UpdatedStaker(_addr, true);\r\n    }\r\n\r\n    function delStakerAddress(address _addr) external onlyOwner {\r\n        stakerAddressList[_addr] = false;\r\n        emit UpdatedStaker(_addr, false);\r\n    }\r\n\r\n    function isStakerAddress(address check) public view returns(bool isIndeed) {\r\n        return stakerAddressList[check];\r\n    }\r\n\r\n    function adjustMaxApr(uint _maxApr) external onlyOwner {\r\n        maxApr = _maxApr;\r\n        emit AdjustMaxApr(maxApr);\r\n    }\r\n\r\n    function adjustpercentAutoUpdatePool(uint _percentAutoUpdatePool) external onlyOwner {\r\n        percentAutoUpdatePool = _percentAutoUpdatePool;\r\n        emit AdjustMaxApr(percentAutoUpdatePool);\r\n    }\r\n\r\n    function updateApr() external onlyOwner {\r\n        _updateApr();\r\n        lastUpdatePoolSizePercent = totalSupply * 100 / MAX_SUPPLY;\r\n    }\r\n\r\n    function allowStaking(bool _allow) external onlyOwner {\r\n        stakingAllowed = _allow;\r\n        emit StakingAllowed(_allow);\r\n    }\r\n\r\n    function stake(uint _amount) external {\r\n        _stake(_amount, msg.sender);\r\n    }\r\n\r\n    function stakeForSomeoneElse(uint _amount, address _user) external {\r\n        require(_user != address(0), \"0x address not allowed\");\r\n        require(isStakerAddress(msg.sender), \"Stakers allowed only\");\r\n        _stake(_amount, _user);\r\n    }\r\n\r\n    function recompound() external {\r\n        uint toClaim = getClaimableRewards(msg.sender);\r\n        require(toClaim >= MINIMUM_AMOUNT, \"Insuficient amount\");\r\n        _stake(toClaim, msg.sender);\r\n        _updateLastClaim();\r\n        emit ReStaked(toClaim);\r\n    }\r\n\r\n    function claim() external nonReentrant {\r\n        uint toClaim = getClaimableRewards(msg.sender);\r\n        require(toClaim > 0, \"Nothing to claim\");\r\n        require(STAKING_TOKEN.balanceOf(address(this)) > toClaim + totalStaked, \"Insuficient contract balance\");\r\n        require(STAKING_TOKEN.transfer(msg.sender, toClaim), \"Transfer failed\");\r\n        _updateLastClaim();\r\n        emit Claimed(toClaim);\r\n    }\r\n\r\n    function unstake() external nonReentrant returns(uint) {\r\n        uint toUnstake = 0;\r\n        uint i = 0;\r\n        uint stakeId;\r\n        uint toClaim = getClaimableRewards(msg.sender);\r\n        while (i < userStakeIds[msg.sender].length) {\r\n            stakeId = userStakeIds[msg.sender][i];\r\n            if (stakingEndDate[stakeId] < block.timestamp) {\r\n                toUnstake += stakingAmount[stakeId];\r\n                stakingAmount[stakeId] = 0;\r\n                userStakeIds[msg.sender][i] = userStakeIds[msg.sender][userStakeIds[msg.sender].length - 1];\r\n                userStakeIds[msg.sender].pop();\r\n            } else {\r\n                i++;\r\n            }\r\n        }\r\n        require(toUnstake > 0, \"Nothing to unstake\"); \r\n        require(STAKING_TOKEN.balanceOf(address(this)) > toUnstake + toClaim, \"Insuficient contract balance\");\r\n        require(STAKING_TOKEN.transfer(msg.sender, toUnstake + toClaim), \"Transfer failed\");\r\n        totalStaked -= toUnstake;\r\n        _updateLastClaim();\r\n        emit Unstaked(toUnstake);\r\n        emit Claimed(toClaim);\r\n        return toUnstake + toClaim;\r\n    }\r\n\r\n    function getUserStakesIds(address _user) external view returns (uint[] memory) {\r\n        return userStakeIds[_user];\r\n    }\r\n\r\n    function getUserStakes() external view returns (Stake[] memory) {\r\n        Stake[] memory stakes = new Stake[](userStakeIds[msg.sender].length);\r\n        uint stakeId;\r\n        for(uint i; i < userStakeIds[msg.sender].length; i++) {\r\n            stakeId = userStakeIds[msg.sender][i];\r\n            stakes[i] = Stake(stakeId, stakingAmount[stakeId], stakingEndDate[stakeId], stakingLastClaim[stakeId]);\r\n        }\r\n        return stakes;\r\n    }\r\n\r\n    function getCurrentApr() external view returns (uint) {\r\n        return aprHistory[aprHistory.length - 1].apr;\r\n    }\r\n\r\n    function getStatus() external view returns (Status memory) {\r\n        return Status(stakingAllowed,aprHistory[aprHistory.length - 1].apr,stakesCount,totalSupply);\r\n    }\r\n\r\n    function getClaimableRewards(address _user) public view returns (uint) {\r\n        uint reward = 0;\r\n        uint stakeId;\r\n        for (uint i = 0; i < userStakeIds[_user].length; i++) {\r\n            stakeId = userStakeIds[_user][i];\r\n            uint lastClaim = stakingLastClaim[stakeId];\r\n            uint endDate = stakingEndDate[stakeId];\r\n\r\n            uint until = block.timestamp;\r\n            if (endDate < block.timestamp) {\r\n                until = endDate;\r\n            }\r\n\r\n            uint j;\r\n            for (j = 1; j < aprHistory.length; j++) {\r\n                if (aprHistory[j].timestamp > lastClaim) {\r\n\r\n                    uint interval = aprHistory[j].timestamp - lastClaim;\r\n                    if (until < aprHistory[j].timestamp) {\r\n                        interval = until > lastClaim ? until - lastClaim : 0;\r\n                    }\r\n\r\n                    reward += stakingAmount[stakeId] * interval * aprHistory[j-1].apr / 100 / SECONDS_IN_YEAR;\r\n                    lastClaim = until < aprHistory[j].timestamp ? until : aprHistory[j].timestamp;\r\n                }\r\n            }\r\n\r\n            if (until > lastClaim) {\r\n                uint interval = until > lastClaim ? until - lastClaim : 0;\r\n                reward += stakingAmount[stakeId] * interval * aprHistory[aprHistory.length - 1].apr / 100 / SECONDS_IN_YEAR;\r\n            }\r\n        }\r\n        return reward;\r\n    }\r\n\r\n    function _updateLastClaim() internal {\r\n        for (uint i = 0; i < userStakeIds[msg.sender].length; i++) {\r\n            stakingLastClaim[userStakeIds[msg.sender][i]] = block.timestamp;\r\n        }\r\n        emit LastClaim(msg.sender,block.timestamp);\r\n    }\r\n\r\n    function _stake(uint _amount, address _user) internal nonReentrant {\r\n        require(stakingAllowed, \"Staking is not enabled\");\r\n        require(_amount >= MINIMUM_AMOUNT, \"Insuficient stake amount\");\r\n        require(totalSupply + _amount <= MAX_SUPPLY, \"Pool capacity exceeded\");\r\n        require(_amount <= STAKING_TOKEN.balanceOf(msg.sender), \"Insuficient balance\");\r\n        require(STAKING_TOKEN.transferFrom(msg.sender, address(this), _amount), \"TransferFrom failed\");\r\n        require(userStakeIds[_user].length < 100, \"User stakings limit exceeded\");\r\n\r\n        stakingUser[stakesCount] = _user;\r\n        stakingAmount[stakesCount] = _amount;\r\n        stakingEndDate[stakesCount] = block.timestamp + STAKING_DURATION;\r\n        stakingLastClaim[stakesCount] = block.timestamp;\r\n        userStakeIds[_user].push(stakesCount);\r\n        totalSupply += _amount;\r\n        totalStaked += _amount;\r\n        stakesCount += 1;\r\n        uint poolSizePercent = totalSupply * 100 / MAX_SUPPLY;\r\n        if (poolSizePercent > lastUpdatePoolSizePercent + percentAutoUpdatePool) {\r\n            _updateApr();\r\n            lastUpdatePoolSizePercent = poolSizePercent;\r\n        }\r\n        emit Staked(_amount, totalSupply);\r\n    }\r\n\r\n    function _updateApr() internal {\r\n        require(totalSupply > 0, \"0 division protection\");\r\n        uint apr = 10000 * POOL_SIZE / totalSupply / STAKING_YEARS_PERCENT;\r\n        if (apr < MIN_APR) {\r\n            apr = MIN_APR;\r\n        } else if (apr > maxApr) {\r\n            apr = maxApr;\r\n        }\r\n        aprHistory.push(Struct(block.timestamp, apr));\r\n        emit AprUpdated(block.timestamp, apr);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxApr\",\"type\":\"uint256\"}],\"name\":\"AdjustMaxApr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentAutoUpdatePool\",\"type\":\"uint256\"}],\"name\":\"AdjustpercentAutoUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastupdate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"AprUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimed\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lastClaim\",\"type\":\"uint256\"}],\"name\":\"LastClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ReStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"StakingAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"UpdatedStaker\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_APR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addStakerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxApr\",\"type\":\"uint256\"}],\"name\":\"adjustMaxApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentAutoUpdatePool\",\"type\":\"uint256\"}],\"name\":\"adjustpercentAutoUpdatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"allowStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aprHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"delStakerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"stakingAllowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentApr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ThreeYearsStakingContract.Status\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"internalType\":\"struct ThreeYearsStakingContract.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakesIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"check\",\"type\":\"address\"}],\"name\":\"isStakerAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isIndeed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatePoolSizePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentAutoUpdatePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakeForSomeoneElse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingLastClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateApr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ThreeYearsStakingContract", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bf08133cfc56d2b8ba24f3dce85c57c1f8d37ac05c2f1fc41a4156e0d8c5faad"}