{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// File: coif_contract_mainchain_audit_v05.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IDividendDistributor {\r\n    function setShare(\r\n        address _shareholder,\r\n        uint256 _amountNew,\r\n        bool _processPool1Active,\r\n        bool _processPool2Active,\r\n        uint256 _payoutPool1ShareholderCount,\r\n        uint256 _payoutPool2ShareholderCount\r\n        ) external;\r\n\r\n    function transferTokenFromPool2ToPool1(\r\n        address _pool1Token,\r\n        address _poolDistributorAddress,\r\n        address _pool1Wallet\r\n        ) external;\r\n\r\n    function processPool1(\r\n        uint256 _gas,\r\n        address _processPool1Token,\r\n        uint256 _payoutPool1CurrentTokenAmount,\r\n        uint256 _payoutPool1ShareholderCount,\r\n        address _poolDistributorAddress,\r\n        uint256 _payoutPool1DividendsPerShare\r\n        ) external;\r\n\r\n    function processPool2(\r\n        uint256 _gas,\r\n        uint256 _payoutPool2ShareholderCount,\r\n        address _poolDistributorAddress,\r\n        uint256 _payoutPool2DividendsPerShare\r\n        ) external;\r\n}\r\n\r\ncontract CommunityInvestmentFundContract is ERC20, Ownable {\r\n    ERC20 public constant WBNB = ERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); /* main chain */\r\n\r\n    uint256 public constant MAX_FEE = 15; //total max fee = 15%\r\n    uint256 public constant FEE_FACTOR = 100; //1% = 100 as fee; 0.01% = 1 as smallest fee\r\n    uint256 public constant FEE_FACTOR_PERCENT = 100*FEE_FACTOR; //10,000 for direct calculation of fee amount\r\n    uint8 private constant _decimals = 18;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public liquidityWallet;\r\n    address public marketingWallet = address(0x1cE17B3813d00BA4808D707a475749a039870226);\r\n    address public pool1Wallet = address(0x52769B308bB8FC78aFDBfa0bD345da8D85Eb31fA);\r\n    DividendDistributor internal poolDistributor;\r\n    address public poolDistributorAddress;\r\n    address public processPool1Token;\r\n\r\n    mapping (address => bool) private excludedFromFees;\r\n    mapping (address => bool) private excludedFromDividends;\r\n    mapping (address => bool) public canTransferBeforeTradingIsEnabled;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    bool public tradingIsEnabled = false;\r\n    bool public isOnlyTradeFee = true;\r\n\r\n    uint256 public payoutGas = 500000;\r\n    uint256 public swapFeeTokensMinAmount = 10000 * (10**18);\r\n    bool private feesSwapping;\r\n\r\n    uint256 public payoutPool1CurrentTokenAmount;\r\n    uint256 public processPool1StartTime;\r\n    bool public processPool1Trigger;\r\n    bool public processPool1Active;\r\n\r\n    uint256 public payoutPool2MinAmountWBNB = 5 * (10**18);\r\n    uint256 public payoutPool2Percent = 20;\r\n    uint256 public pool2BalanceWBNB;\r\n    uint256 public payoutPool2CurrentWBNB;\r\n    bool public isSaveParameterForPayout = true;\r\n    bool public processPool2Active;\r\n\r\n    uint256 public payoutPool1ShareholderCount;\r\n    uint256 public payoutPool2ShareholderCount;\r\n    uint256 public payoutPool1DividendsPerShare;\r\n    uint256 public payoutPool2DividendsPerShare;\r\n    uint256 public totalSharesAtCurrentPayoutPool1;\r\n    uint256 public totalSharesAtCurrentPayoutPool2;\r\n    //Buy fee complete: 0.10% + 0.20% + 0.49% + 0.20% = 0.99%\r\n    uint256 public buyLiquidityFee = 10; //0.10%\r\n    uint256 public buyMarketingFee = 20; //0.20%\r\n    uint256 public buyPool1Fee = 49; //0.49%\r\n    uint256 public buyPool2Fee = 20; //0.20%\r\n    uint256 public buyPool3Fee = 0; //0%\r\n    //Sell fee complete: 0.79% + 0.20% = 0.99%\r\n    uint256 public sellLiquidityFee = 0; //0%\r\n    uint256 public sellMarketingFee = 0; //0%\r\n    uint256 public sellPool1Fee = 79; //0.79%\r\n    uint256 public sellPool2Fee = 0; //0%\r\n    uint256 public sellPool3Fee = 20; //0.20%\r\n    //Transfer fee complete: 0%\r\n    uint256 public txLiquidityFee = 0; //0%\r\n    uint256 public txMarketingFee = 0; //0%\r\n    uint256 public txPool1Fee = 0; //0%\r\n    uint256 public txPool2Fee = 0; //0%\r\n    uint256 public txPool3Fee = 0; //0%\r\n    uint256 private collectedAmountLiquidityFee;\r\n    uint256 private collectedAmountMarketingFee;\r\n    uint256 private collectedAmountPool1Fee;\r\n    uint256 private collectedAmountPool2Fee;\r\n    uint256 private collectedAmountPool3Fee;\r\n    uint256 private collectedAmountPool3FeeOld;\r\n\r\n    event isExcludeFromDividends(address indexed account, bool isExcluded);\r\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n    event MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\r\n    event Pool1WalletUpdated(address indexed newPool1Wallet, address indexed oldPool1Wallet);\r\n    event SetSwapFeeTokensMinAmount(uint256 newSwapFeeTokensMinAmount);\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event updatedBuyFees(uint256 newBuyLiquidityFee, uint256 newBuyMarketingFee, uint256 newBuyPool1Fee, uint256 newBuyPool2Fee, uint256 newBuyPool3Fee);\r\n    event updatedSellFees(uint256 newSellLiquidityFee, uint256 newSellMarketingFee, uint256 newSellPool1Fee, uint256 newSellPool2Fee, uint256 newSellPool3Fee);\r\n    event updatedTxFees(uint256 newTxLiquidityFee, uint256 newTxMarketingFee, uint256 newTxPool1Fee, uint256 newTxPool2Fee, uint256 newTxPool3Fee);\r\n    event PayoutGasUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event PayoutPool2PercentUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event PayoutPool2MinAmountWBNBUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event triggeredPool1Payout(bool indexed newProcessPool1Trigger, address indexed newProcessPool1Token, uint256 indexed newProcessPool1StartTime);\r\n    event LaunchExecuted(bool newStatus);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n    constructor() ERC20(\"CommunityInvestmentFund\", \"COIF\"){\r\n        poolDistributor = new DividendDistributor();\r\n        poolDistributorAddress = address(poolDistributor);\r\n\r\n        liquidityWallet = owner();\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); /* main chain */\r\n\r\n        /*  _mint is an internal function in ERC20.sol that is only called here, and CANNOT be called ever again, _totalSupply = 100_000_000 * (10**_decimals) */\r\n        _mint(owner(), 100_000_000 * (10**_decimals));\r\n\r\n        approve(address(_uniswapV2Router), totalSupply());\r\n\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        approve(_uniswapV2Pair, totalSupply());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        excludedFromDividends[poolDistributorAddress] = true;\r\n        excludedFromDividends[address(_uniswapV2Pair)] = true;\r\n        excludedFromDividends[address(_uniswapV2Router)] = true;\r\n        excludedFromDividends[address(this)] = true;\r\n\r\n        excludeFromFees(liquidityWallet, true);\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(pool1Wallet, true);\r\n        excludeFromFees(poolDistributor.pool3Wallet(), true);\r\n        excludeFromFees(poolDistributor.ecosystemWallet(), true);\r\n        excludeFromFees(address(this), true);\r\n\r\n        canTransferBeforeTradingIsEnabled[owner()] = true;\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    modifier validateAddressNotZero(address _address) {\r\n        require(_address != address(0), \"Error: Address cannot be zero\");\r\n        _;\r\n    }\r\n\r\n    function setLiquidityWallet(address _newLiquidityWallet) public onlyOwner validateAddressNotZero(_newLiquidityWallet) {\r\n        require(_newLiquidityWallet != liquidityWallet, \"Error: The liquidityWallet is already this address\");\r\n        excludeFromFees(_newLiquidityWallet, true);\r\n        emit LiquidityWalletUpdated(_newLiquidityWallet, liquidityWallet);\r\n        liquidityWallet = _newLiquidityWallet;\r\n    }\r\n\r\n    function setMarketingWallet(address _newMarketingWallet) public onlyOwner validateAddressNotZero(_newMarketingWallet) {\r\n        require(_newMarketingWallet != marketingWallet, \"Error: The marketingWallet is already this address\");\r\n        excludeFromFees(_newMarketingWallet, true);\r\n        emit MarketingWalletUpdated(_newMarketingWallet, marketingWallet);\r\n        marketingWallet = _newMarketingWallet;\r\n    }\r\n\r\n    function setPool1Wallet(address _newPool1Wallet) public onlyOwner validateAddressNotZero(_newPool1Wallet) {\r\n        require(_newPool1Wallet != pool1Wallet, \"Error: The pool1Wallet is already this address\");\r\n        excludeFromFees(_newPool1Wallet, true);\r\n        emit Pool1WalletUpdated(_newPool1Wallet, pool1Wallet);\r\n        pool1Wallet = _newPool1Wallet;\r\n    }\r\n\r\n    function setPool3Wallet(address _newPool3Wallet) public onlyOwner validateAddressNotZero(_newPool3Wallet) {\r\n        poolDistributor.updatePool3Wallet(_newPool3Wallet);\r\n        excludeFromFees(_newPool3Wallet, true);\r\n    }\r\n\r\n    function setPool3BurnAddress(address _newPool3BurnAddress) public onlyOwner validateAddressNotZero(_newPool3BurnAddress) {\r\n        poolDistributor.updatePool3BurnAddress(_newPool3BurnAddress);\r\n    }\r\n\r\n    function setTeamWallet(address _newTeamWallet) public onlyOwner validateAddressNotZero(_newTeamWallet) {\r\n        poolDistributor.updateTeamWallet(_newTeamWallet);\r\n    }\r\n\r\n    function setLongTermGrowthWallet(address _newLongTermGrowthWallet) public onlyOwner validateAddressNotZero(_newLongTermGrowthWallet) {\r\n        poolDistributor.updateLongTermGrowthWallet(_newLongTermGrowthWallet);\r\n    }\r\n\r\n    function setEcosystemWallet(address _newEcosystemWallet) public onlyOwner validateAddressNotZero(_newEcosystemWallet) {\r\n        poolDistributor.updateEcosystemWallet(_newEcosystemWallet);\r\n    }\r\n\r\n    function setTeamLockAddress(address _newTeamLockAddress) public onlyOwner validateAddressNotZero(_newTeamLockAddress) {\r\n        poolDistributor.updateTeamLockAddress(_newTeamLockAddress);\r\n    }\r\n\r\n    function setLongTermGrowthLockAddress(address _newLongTermGrowthLockAddress) public onlyOwner validateAddressNotZero(_newLongTermGrowthLockAddress){\r\n        poolDistributor.updateLongTermGrowthLockAddress(_newLongTermGrowthLockAddress);\r\n    }\r\n\r\n    function setEcosystemLockAddress(address _newEcosystemLockAddress) public onlyOwner validateAddressNotZero(_newEcosystemLockAddress) {\r\n        poolDistributor.updateEcosystemLockAddress(_newEcosystemLockAddress);\r\n    }\r\n\r\n    function setSwapFeeTokensMinAmount(uint256 _swapMinAmount) public onlyOwner {\r\n        require(_swapMinAmount <= (10**18), \"Error: use the value without 10**18, e.g. 10000 for 10000 tokens\");\r\n        require(_swapMinAmount <= 100_000_000, \"Error: token amount exceeds total supply\");\r\n        swapFeeTokensMinAmount = _swapMinAmount * 10**18;\r\n        emit SetSwapFeeTokensMinAmount(swapFeeTokensMinAmount);\r\n    }\r\n\r\n    function updateUniswapV2Router(address _newAddress) public onlyOwner {\r\n        require(_newAddress != address(uniswapV2Router), \"Error: The router already has that address\");\r\n        emit UpdateUniswapV2Router(_newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(_newAddress);\r\n        excludeFromDividends(_newAddress,true);\r\n    }\r\n\r\n    function excludeFromFees(address _account, bool _excluded) public onlyOwner {\r\n        excludedFromFees[_account] = _excluded;\r\n        emit ExcludeFromFees(_account, _excluded);\r\n    }\r\n\r\n    function isExcludedFromFees(address _account) public view returns(bool) {\r\n        return excludedFromFees[_account];\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata _accounts, bool _excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < _accounts.length; i++) {\r\n            excludedFromFees[_accounts[i]] = _excluded;\r\n        }\r\n        emit ExcludeMultipleAccountsFromFees(_accounts, _excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address _pair, bool _value) public onlyOwner {\r\n        require(_pair != uniswapV2Pair, \"Error: The PancakeSwap V2 pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address _pair, bool _value) private {\r\n        require(automatedMarketMakerPairs[_pair] != _value, \"Error: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n\r\n        if(_value) {\r\n            excludeFromDividends(_pair,true);\r\n        }\r\n        emit SetAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n\r\n    function excludeFromDividends(address _account, bool _excluded) public onlyOwner {\r\n    \trequire(_account != address(this), \"Token contract is excluded from dividends, it cannot be changed\");\r\n        excludedFromDividends[_account] = _excluded;\r\n\r\n        if(_excluded){\r\n            poolDistributor.setShare(_account, 0, processPool1Active, processPool2Active, payoutPool1ShareholderCount, payoutPool2ShareholderCount);\r\n        }else{\r\n            poolDistributor.setShare(_account, balanceOf(_account), processPool1Active, processPool2Active, payoutPool1ShareholderCount, payoutPool2ShareholderCount);\r\n        }\r\n        emit isExcludeFromDividends(_account,_excluded);\r\n    }\r\n\r\n    function isExcludedFromDividends(address _account) public view returns(bool) {\r\n        return excludedFromDividends[_account];\r\n    }\r\n\r\n    function updateBuyFees(\r\n        uint256 _newBuyLiquidityFee,\r\n        uint256 _newBuyMarketingFee,\r\n        uint256 _newBuyPool1Fee,\r\n        uint256 _newBuyPool2Fee,\r\n        uint256 _newBuyPool3Fee) public onlyOwner {\r\n        require((_newBuyLiquidityFee + _newBuyMarketingFee + _newBuyPool1Fee + _newBuyPool2Fee + _newBuyPool3Fee) <= MAX_FEE * FEE_FACTOR, \"Error: new desired fee over max limit\");\r\n        buyLiquidityFee = _newBuyLiquidityFee;\r\n        buyMarketingFee = _newBuyMarketingFee;\r\n        buyPool1Fee = _newBuyPool1Fee;\r\n        buyPool2Fee = _newBuyPool2Fee;\r\n        buyPool3Fee = _newBuyPool3Fee;\r\n        emit updatedBuyFees(buyLiquidityFee, buyMarketingFee, buyPool1Fee, buyPool2Fee, buyPool3Fee);\r\n    }\r\n\r\n    function updateSellFees(\r\n        uint256 _newSellLiquidityFee,\r\n        uint256 _newSellMarketingFee,\r\n        uint256 _newSellPool1Fee,\r\n        uint256 _newSellPool2Fee,\r\n        uint256 _newSellPool3Fee) public onlyOwner {\r\n        require((_newSellLiquidityFee + _newSellMarketingFee + _newSellPool1Fee + _newSellPool2Fee + _newSellPool3Fee) <= MAX_FEE * FEE_FACTOR, \"Error: new desired fee over max limit\");\r\n        sellLiquidityFee = _newSellLiquidityFee;\r\n        sellMarketingFee = _newSellMarketingFee;\r\n        sellPool1Fee = _newSellPool1Fee;\r\n        sellPool2Fee = _newSellPool2Fee;\r\n        sellPool3Fee = _newSellPool3Fee;\r\n        emit updatedSellFees(sellLiquidityFee, sellMarketingFee, sellPool1Fee, sellPool2Fee, sellPool3Fee);\r\n    }\r\n\r\n    function updateTxFees(\r\n        uint256 _newTxLiquidityFee,\r\n        uint256 _newTxMarketingFee,\r\n        uint256 _newTxPool1Fee,\r\n        uint256 _newTxPool2Fee,\r\n        uint256 _newTxPool3Fee) public onlyOwner {\r\n        require((_newTxLiquidityFee + _newTxMarketingFee + _newTxPool1Fee + _newTxPool2Fee + _newTxPool3Fee) <= MAX_FEE * FEE_FACTOR, \"Error: new desired fee over max limit\");\r\n        txLiquidityFee = _newTxLiquidityFee;\r\n        txMarketingFee = _newTxMarketingFee;\r\n        txPool1Fee = _newTxPool1Fee;\r\n        txPool2Fee = _newTxPool2Fee;\r\n        txPool3Fee = _newTxPool3Fee;\r\n        emit updatedTxFees(txLiquidityFee, txMarketingFee, txPool1Fee, txPool2Fee, txPool3Fee);\r\n    }\r\n\r\n    function setTradeFeeStatus(bool _status) public onlyOwner {\r\n        require(isOnlyTradeFee != _status, \"Error: isOnlyTradeFee already has the value _status\");\r\n        isOnlyTradeFee = _status;\r\n    }\r\n\r\n    function setPayoutGas(uint256 _gas) public onlyOwner {\r\n        require(_gas < 750000, \"Error: gas must be under 750000\");\r\n        require(_gas != payoutGas, \"Error: Cannot update payoutGas to the same value\");\r\n        emit PayoutGasUpdated(_gas, payoutGas);\r\n        payoutGas = _gas;\r\n    }\r\n\r\n    function setPayoutPool2Percent(uint256 _payoutPool2Percent) public onlyOwner {\r\n        require(_payoutPool2Percent <= 100, \"Error: payoutPool2Percent has to be <= 100\");\r\n        require(payoutPool2Percent != _payoutPool2Percent, \"Error: Cannot update payoutPool2Percent to the same value\");\r\n        require(!processPool2Active, \"Error: process pool2 payout is active, wait till end\");\r\n        poolDistributor.updatePayoutPool2TimeNext();\r\n        emit PayoutPool2PercentUpdated(_payoutPool2Percent, payoutPool2Percent);\r\n        payoutPool2Percent = _payoutPool2Percent;\r\n    }\r\n\r\n    function setPayoutPool2MinAmountWBNB(uint256 _payoutPool2MinAmountWBNB) public onlyOwner {\r\n        require(_payoutPool2MinAmountWBNB <= (10**18), \"Error: use the value without 10**18, e.g. 5 for 5 BNB\");\r\n        require(!processPool2Active, \"Error: process pool2 payout is active, wait till end\");\r\n        poolDistributor.updatePayoutPool2TimeNext();\r\n        emit PayoutPool2MinAmountWBNBUpdated(_payoutPool2MinAmountWBNB, payoutPool2MinAmountWBNB / 10**18);\r\n        payoutPool2MinAmountWBNB = _payoutPool2MinAmountWBNB * 10**18;\r\n    }\r\n\r\n    function setMinimumBalanceForDividends(uint256 _newMinimumBalance) public onlyOwner {\r\n        require((!processPool1Active && !processPool2Active), \"Error: process pool1 payout or pool2 payout is active, wait till end\");\r\n        poolDistributor.updateMinimumTokenBalanceForDividends(_newMinimumBalance);\r\n    }\r\n\r\n    function setPayoutPool2FrequencySec(uint256 _newPayoutPool2FrequencySec) public onlyOwner {\r\n        require(!processPool2Active, \"Error: process pool2 payout is active, wait till end\");\r\n        poolDistributor.updatePayoutPool2FrequencySec(_newPayoutPool2FrequencySec);\r\n    }\r\n\r\n    function triggerPool1Payout(address _token, uint256 _startTime) public onlyOwner {\r\n        require(!processPool1Active, \"Pool 1 payout already active, wait till end\");\r\n        require(ERC20(_token).balanceOf(poolDistributorAddress)>0, \"First transfer tokens for payout from pool1 to poolDistributorAddress\");\r\n        processPool1Trigger = true;\r\n        processPool1Token = address(_token);\r\n        processPool1StartTime = _startTime;\r\n        emit triggeredPool1Payout(processPool1Trigger, processPool1Token, processPool1StartTime);\r\n    }\r\n\r\n    function getCurrentInfoAboutPool1() public view returns (\r\n        bool processPool1Trigger_,\r\n        bool processPool1Active_,\r\n        bool payoutPool1ProcessFinished_,\r\n        address processPool1Token_,\r\n        uint256 processPool1StartTime_,\r\n        uint256 payoutPool1CurrentTokenAmount_,\r\n        uint256 payoutPool1DividendsPerShare_,\r\n        uint256 totalSharesAtCurrentPayoutPool1_,\r\n        uint256 payoutPool1ShareholderCount_,\r\n        uint256 currentIndexPool1_ ) {\r\n        processPool1Trigger_ = processPool1Trigger;\r\n        processPool1Active_ = processPool1Active;\r\n        payoutPool1ProcessFinished_ = poolDistributor.payoutPool1ProcessFinished();\r\n        processPool1Token_ = processPool1Token;\r\n        processPool1StartTime_ = processPool1StartTime;\r\n        payoutPool1CurrentTokenAmount_ = payoutPool1CurrentTokenAmount;\r\n        payoutPool1DividendsPerShare_ = payoutPool1DividendsPerShare;\r\n        totalSharesAtCurrentPayoutPool1_ = totalSharesAtCurrentPayoutPool1;\r\n        payoutPool1ShareholderCount_ = payoutPool1ShareholderCount;\r\n        currentIndexPool1_ = poolDistributor.currentIndexPool1();\r\n    }\r\n\r\n    function getCurrentInfoAboutPool2() public view returns (\r\n        bool processPool2Active_,\r\n        bool payoutPool2ProcessFinished_,\r\n        bool isSaveParameterForPayout_,\r\n        uint256 payoutPool2MinAmountWBNB_,\r\n        uint256 pool2BalanceWBNB_,\r\n        uint256 payoutPool2CurrentWBNB_,\r\n        uint256 payoutPool2DividendsPerShare_,\r\n        uint256 totalSharesAtCurrentPayoutPool2_,\r\n        uint256 payoutPool2ShareholderCount_,\r\n        uint256 currentIndexPool2_,\r\n        uint256 payoutPool2Time_,\r\n        uint256 payoutPool2TimeNext_,\r\n        uint256 secondsUntilNextPayout_) {\r\n        processPool2Active_ = processPool2Active;\r\n        payoutPool2ProcessFinished_ = poolDistributor.payoutPool2ProcessFinished();\r\n        isSaveParameterForPayout_ = isSaveParameterForPayout;\r\n        payoutPool2MinAmountWBNB_ = payoutPool2MinAmountWBNB;\r\n        pool2BalanceWBNB_ = pool2BalanceWBNB;\r\n        payoutPool2CurrentWBNB_ = payoutPool2CurrentWBNB;\r\n        payoutPool2DividendsPerShare_ = payoutPool2DividendsPerShare;\r\n        totalSharesAtCurrentPayoutPool2_ = totalSharesAtCurrentPayoutPool2;\r\n        payoutPool2ShareholderCount_ = payoutPool2ShareholderCount;\r\n        currentIndexPool2_ = poolDistributor.currentIndexPool2();\r\n        (payoutPool2Time_, payoutPool2TimeNext_, secondsUntilNextPayout_) = poolDistributor.getInfoAboutPool2();\r\n    }\r\n\r\n    function getAccountDividendsInfoForPool2(address _account)\r\n        public view returns (\r\n            address account_,\r\n            int256 index_,\r\n            uint256 lastPayoutTimePool2_,\r\n            uint256 sharesAmount_,\r\n            uint256 sharesAmountExcludedPool2_,\r\n            uint256 withdrawnDividendsPool2WBNB_,\r\n            uint256 unpaidDividendsFromPool2_) {\r\n        require(!processPool2Active, \"Error: process pool2 payout is active, wait till end\");\r\n        return poolDistributor.getAccountInfoForPool2(_account, poolDistributorAddress);\r\n    }\r\n\r\n\tfunction getAccountDividendsInfoForPool2AtIndex(uint256 _index)\r\n        public view returns (\r\n            address account_,\r\n            int256 index_,\r\n            uint256 lastPayoutTimePool2_,\r\n            uint256 sharesAmount_,\r\n            uint256 sharesAmountExcludedPool2_,\r\n            uint256 withdrawnDividendsPool2WBNB_,\r\n            uint256 unpaidDividendsFromPool2_) {\r\n        require(!processPool2Active, \"Error: process pool2 payout is active, wait till end\");\r\n    \treturn poolDistributor.getAccountInfoForPool2AtIndex(_index, poolDistributorAddress);\r\n    }\r\n\r\n    function launch() public onlyOwner {\r\n  \t require(!tradingIsEnabled, \"Error: Lauch already executed and trading is already enabled\");\r\n\t  tradingIsEnabled = true;\r\n      emit LaunchExecuted(tradingIsEnabled);\r\n      poolDistributor.updatePayoutPool2TimeNext();\r\n  \t}\r\n\r\n    function setCanTransferBeforeTradingIsEnabled(address _wallet, bool _enabled) public onlyOwner {\r\n        excludeFromDividends(_wallet, _enabled);\r\n        excludeFromFees(_wallet, _enabled);\r\n        canTransferBeforeTradingIsEnabled[_wallet] = _enabled;\r\n    }\r\n\r\n    function transferERC20TokenFromPool2ToPool1(address _pool1Token) public onlyOwner {\r\n        poolDistributor.transferTokenFromPool2ToPool1(_pool1Token, poolDistributorAddress, pool1Wallet);\r\n    }\r\n\r\n    function transferERC20TokenFromContractAddressToPool1(address _tokenERC20) public onlyOwner {\r\n            ERC20 tokenERC20 = ERC20(_tokenERC20);\r\n            uint256 amount = tokenERC20.balanceOf(address(this));\r\n            tokenERC20.transfer(pool1Wallet, amount);\r\n    }\r\n\r\n    function transferBNBFromContractAddressToPool1() public onlyOwner {\r\n            address payable pool1WalletBNB = payable(pool1Wallet);\r\n            pool1WalletBNB.transfer(address(this).balance);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"Error: transfer from the zero address\");\r\n        require(to != address(0), \"Error: transfer to the zero address\");\r\n        require(amount > 0, \"Error: Transfer amount must be greater than zero\");\r\n\r\n        if(!tradingIsEnabled) {\r\n            require(canTransferBeforeTradingIsEnabled[from], \"Error: This account cannot send tokens until trading is enabled\");\r\n        }\r\n\r\n        if(\r\n            tradingIsEnabled &&\r\n            (balanceOf(address(this))>=swapFeeTokensMinAmount) &&\r\n            !feesSwapping &&\r\n            !automatedMarketMakerPairs[from] &&\r\n            !excludedFromFees[from] &&\r\n            !excludedFromFees[to]\r\n        ) {\r\n            feesSwapping = true;\r\n            distributeCollectedFees(\r\n                collectedAmountLiquidityFee,\r\n                collectedAmountMarketingFee,\r\n                collectedAmountPool1Fee,\r\n                collectedAmountPool2Fee,\r\n                collectedAmountPool3Fee\r\n            );\r\n            feesSwapping = false;\r\n        }\r\n\r\n        bool takeFee = tradingIsEnabled;\r\n        if(excludedFromFees[from] || excludedFromFees[to]) {\r\n            takeFee = false;\r\n        } else if(isOnlyTradeFee && !automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to]) {\r\n            takeFee = false;\r\n            } else if(automatedMarketMakerPairs[from] && (to == address(uniswapV2Router)) ) {\r\n                takeFee = false;\r\n            }\r\n\r\n        if(takeFee) {\r\n            uint256 liquidityFee;\r\n            uint256 marketingFee;\r\n            uint256 pool1Fee;\r\n            uint256 pool2Fee;\r\n            uint256 pool3Fee;\r\n            uint256 finalFee;\r\n            if (!automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to]) {\r\n                liquidityFee = (amount * txLiquidityFee) / FEE_FACTOR_PERCENT;\r\n                marketingFee = (amount * txMarketingFee) / FEE_FACTOR_PERCENT;\r\n                pool1Fee = (amount * txPool1Fee) / FEE_FACTOR_PERCENT;\r\n                pool2Fee = (amount * txPool2Fee) / FEE_FACTOR_PERCENT;\r\n                pool3Fee = (amount * txPool3Fee) / FEE_FACTOR_PERCENT;\r\n            } else {\r\n                bool isSell = automatedMarketMakerPairs[to] ? true : false;\r\n\r\n                liquidityFee = isSell ? (amount * sellLiquidityFee) / FEE_FACTOR_PERCENT : (amount * buyLiquidityFee) / FEE_FACTOR_PERCENT;\r\n                marketingFee = isSell ? (amount * sellMarketingFee) / FEE_FACTOR_PERCENT : (amount * buyMarketingFee) / FEE_FACTOR_PERCENT;\r\n                pool1Fee = isSell ? (amount * sellPool1Fee) / FEE_FACTOR_PERCENT : (amount * buyPool1Fee) / FEE_FACTOR_PERCENT;\r\n                pool2Fee = isSell ? (amount * sellPool2Fee) / FEE_FACTOR_PERCENT : (amount * buyPool2Fee) / FEE_FACTOR_PERCENT;\r\n                pool3Fee = isSell ? (amount * sellPool3Fee) / FEE_FACTOR_PERCENT : (amount * buyPool3Fee) / FEE_FACTOR_PERCENT;\r\n            }\r\n            finalFee = liquidityFee + marketingFee + pool1Fee + pool2Fee + pool3Fee;\r\n\r\n            collectedAmountLiquidityFee = collectedAmountLiquidityFee + liquidityFee;\r\n            collectedAmountMarketingFee = collectedAmountMarketingFee + marketingFee;\r\n            collectedAmountPool1Fee = collectedAmountPool1Fee + pool1Fee;\r\n            collectedAmountPool2Fee = collectedAmountPool2Fee + pool2Fee;\r\n            collectedAmountPool3Fee = collectedAmountPool3Fee + pool3Fee;\r\n            amount = amount - finalFee;\r\n            super._transfer(from, address(this), finalFee);\r\n        }\r\n        super._transfer(from, to, amount);\r\n\r\n        if(!excludedFromDividends[from]){ try poolDistributor.setShare(from, balanceOf(from), processPool1Active, processPool2Active, payoutPool1ShareholderCount, payoutPool2ShareholderCount) {} catch {} }\r\n        if(!excludedFromDividends[to]){ try poolDistributor.setShare(to, balanceOf(to), processPool1Active, processPool2Active, payoutPool1ShareholderCount, payoutPool2ShareholderCount) {} catch {} }\r\n\r\n        if (processPool2Active){\r\n            try poolDistributor.processPool2(payoutGas, payoutPool2ShareholderCount, poolDistributorAddress, payoutPool2DividendsPerShare) {} catch {}\r\n            if (poolDistributor.payoutPool2ProcessFinished()) {\r\n                isSaveParameterForPayout = true;\r\n                processPool2Active = false;\r\n            }\r\n        } else {\r\n            if (processPool1Active) {\r\n                try poolDistributor.processPool1(payoutGas,\r\n                                                processPool1Token,\r\n                                                payoutPool1CurrentTokenAmount,\r\n                                                payoutPool1ShareholderCount,\r\n                                                poolDistributorAddress,\r\n                                                payoutPool1DividendsPerShare) {} catch {}\r\n\r\n                if(poolDistributor.payoutPool1ProcessFinished()) {\r\n                    processPool1Active = false;\r\n                }\r\n            } else {\r\n                if (processPool1Trigger && (block.timestamp >= processPool1StartTime)) {\r\n                    payoutPool1ShareholderCount = poolDistributor.getNumberOfTokenHolders();\r\n                    payoutPool1CurrentTokenAmount = ERC20(processPool1Token).balanceOf(poolDistributorAddress);\r\n                    payoutPool1DividendsPerShare = (payoutPool1CurrentTokenAmount * poolDistributor.dividendsPerShareAccuracyFactor()) / poolDistributor.totalShares();\r\n                    totalSharesAtCurrentPayoutPool1 = poolDistributor.totalShares();\r\n                    processPool1Active = true;\r\n                    processPool1Trigger = false;\r\n                } else {\r\n                    if (block.timestamp > poolDistributor.payoutPool2TimeNext()){\r\n                        pool2BalanceWBNB = WBNB.balanceOf(poolDistributorAddress);\r\n                        if (((pool2BalanceWBNB) > payoutPool2MinAmountWBNB) && (isSaveParameterForPayout)){\r\n                            payoutPool2CurrentWBNB = (pool2BalanceWBNB * payoutPool2Percent) / 100;\r\n                            payoutPool2ShareholderCount = poolDistributor.getNumberOfTokenHolders();\r\n                            payoutPool2DividendsPerShare = (payoutPool2CurrentWBNB * poolDistributor.dividendsPerShareAccuracyFactor()) / poolDistributor.totalShares();\r\n                            totalSharesAtCurrentPayoutPool2 = poolDistributor.totalShares();\r\n                            isSaveParameterForPayout = false;\r\n                            processPool2Active = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function distributeCollectedFees(\r\n        uint256 _collectedAmountLiquidityFee,\r\n        uint256 _collectedAmountMarketingFee,\r\n        uint256 _collectedAmountPool1Fee,\r\n        uint256 _collectedAmountPool2Fee,\r\n        uint256 _collectedAmountPool3Fee\r\n        ) private {\r\n        uint256 _collectedAmountLiquidityFeeDist = _collectedAmountLiquidityFee;\r\n        uint256 _collectedAmountMarketingFeeDist = _collectedAmountMarketingFee;\r\n        uint256 _collectedAmountPool1FeeDist = _collectedAmountPool1Fee;\r\n        uint256 _collectedAmountPool2FeeDist = _collectedAmountPool2Fee;\r\n        uint256 _collectedAmountPool3FeeDist = _collectedAmountPool3Fee;\r\n\r\n        if(_collectedAmountLiquidityFeeDist > 0) {\r\n            swapAndLiquify(_collectedAmountLiquidityFeeDist);\r\n        }\r\n\r\n        if(_collectedAmountMarketingFeeDist > 0) {\r\n\r\n            swapAndSendFeeWBNB(_collectedAmountMarketingFeeDist, marketingWallet);\r\n        }\r\n\r\n        if(_collectedAmountPool1FeeDist > 0) {\r\n            swapAndSendFeeWBNB(_collectedAmountPool1FeeDist, pool1Wallet);\r\n        }\r\n\r\n        if(_collectedAmountPool2FeeDist > 0) {\r\n            swapAndSendFeeWBNB(_collectedAmountPool2FeeDist, poolDistributorAddress);\r\n        }\r\n\r\n        uint256 restTokens = balanceOf(address(this));\r\n        if(restTokens > 0) {\r\n            super._transfer(address(this), poolDistributor.pool3BurnAddress(), restTokens);\r\n            if(!excludedFromDividends[poolDistributor.pool3BurnAddress()]) {\r\n                try poolDistributor.setShare(poolDistributor.pool3BurnAddress(),\r\n                                            balanceOf(poolDistributor.pool3BurnAddress()),\r\n                                            processPool1Active,\r\n                                            processPool2Active,\r\n                                            payoutPool1ShareholderCount,\r\n                                            payoutPool2ShareholderCount) {} catch {}\r\n            }\r\n        }\r\n        collectedAmountLiquidityFee = 0;\r\n        collectedAmountMarketingFee = 0;\r\n        collectedAmountPool1Fee = 0;\r\n        collectedAmountPool2Fee = 0;\r\n        collectedAmountPool3FeeOld = _collectedAmountPool3FeeDist;\r\n        collectedAmountPool3Fee = 0;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 _tokens) private {\r\n        uint256 half = _tokens / 2;\r\n        uint256 otherHalf = _tokens - half;\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForBNB(half);\r\n\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 _tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndSendFeeWBNB(uint256 _tokenAmount, address _to) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0,\r\n            path,\r\n            _to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 _tokenAmount, uint256 _bnbAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n\r\n        (uint256 amountToken, uint256 amountETH, ) = uniswapV2Router.addLiquidityETH{value: _bnbAmount}(\r\n            address(this),\r\n            _tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n        require(amountToken > 0 && amountETH > 0, \"Failed to add liquidity\");\r\n    }\r\n\r\n    function getCollectedFeeAmounts() public view returns (\r\n        uint256 collectedAmountLiquidityFee_,\r\n        uint256 collectedAmountMarketingFee_,\r\n        uint256 collectedAmountPool1Fee_,\r\n        uint256 collectedAmountPool2Fee_,\r\n        uint256 collectedAmountPool3Fee_,\r\n        uint256 collectedAmountPool3FeeOld_) {\r\n        collectedAmountLiquidityFee_ = collectedAmountLiquidityFee;\r\n        collectedAmountMarketingFee_ = collectedAmountMarketingFee;\r\n        collectedAmountPool1Fee_ = collectedAmountPool1Fee;\r\n        collectedAmountPool2Fee_ = collectedAmountPool2Fee;\r\n        collectedAmountPool3Fee_ = collectedAmountPool3Fee;\r\n        collectedAmountPool3FeeOld_ = collectedAmountPool3FeeOld;\r\n    }\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor, Ownable {\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 amountExcludedBuyPool1;\r\n        uint256 amountExcludedBuyPool2;\r\n        uint256 withdrawnDividendsWBNB;\r\n    }\r\n\r\n    ERC20 public constant WBNB = ERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c); /* main chain */\r\n\r\n    address public pool3Wallet = address(0xfD92637A67cfCbd7eE0c79056325e3701123d5A2);\r\n    address public pool3BurnAddress;\r\n    address public teamWallet = address(0xbB33Fe9Ac99eEAB84cDb05598F08Db9990902f6F);\r\n    address public longTermGrowthWallet = address(0x01d8108FBACfa24245d088f5C69Cad994AC8989c);\r\n    address public ecosystemWallet = address(0xcccA0cF893B6305d2a480d4Dde146bA0ee017EAB);\r\n    address public teamLockAddress;\r\n    address public longTermGrowthLockAddress;\r\n    address public ecosystemLockAddress;\r\n\r\n    address[] internal shareholders;\r\n    address[] internal payoutPool1Tokens;\r\n    mapping (address => uint256) payoutPool1TokensIndexes;\r\n    mapping (address => uint256) payoutPool1TokensAmount;\r\n    mapping (address => Share) public shares;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) public shareholderPayoutTimePool1;\r\n    mapping (address => uint256) shareholderPayoutTimePool2;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public immutable dividendsPerShareAccuracyFactor;\r\n    uint256 public totalDistributedWBNB;\r\n    uint256 internal payoutPool2Time;\r\n    uint256 public payoutPool2TimeNext;\r\n    uint256 public payoutPool2FrequencySec;\r\n    bool public payoutPool1ProcessFinished = true;\r\n    bool public payoutPool2ProcessFinished = true;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n    uint256 public currentIndexPool1;\r\n    uint256 public currentIndexPool2;\r\n\r\n    event PayoutPool2FrequencySecUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event Pool3WalletUpdated(address indexed newPool3Wallet, address indexed oldPool3Wallet);\r\n    event Pool3BurnAddressUpdated(address indexed newPool3BurnAddress, address indexed oldPool3BurnAddress);\r\n    event TeamWalletUpdated(address indexed newTeamWallet, address indexed oldTeamWallet);\r\n    event LongTermGrowthWalletUpdated(address indexed newLongTermGrowthWallet, address indexed oldLongTermGrowthWallet);\r\n    event EcosystemWalletUpdated(address indexed newEcosystemWallet, address indexed oldEcosystemWallet);\r\n    event TeamLockAddressUpdated(address indexed newTeamLockAddress, address indexed oldTeamLockAddress);\r\n    event LongTermGrowthLockAddressUpdated(address indexed newLongTermGrowthLockAddress, address indexed oldLongTermGrowthLockAddress);\r\n    event EcosystemLockAddressUpdated(address indexed newEcosystemLockAddress, address indexed oldEcosystemLockAddress);\r\n\r\n    constructor() {\r\n        minimumTokenBalanceForDividends = 100 * (10**18);\r\n        payoutPool2FrequencySec = 2 weeks;\r\n        dividendsPerShareAccuracyFactor = 10**36;\r\n    }\r\n\r\n    function setShare(\r\n        address _shareholder,\r\n        uint256 _amountNew,\r\n        bool _processPool1Active,\r\n        bool _processPool2Active,\r\n        uint256 _payoutPool1ShareholderCount,\r\n        uint256 _payoutPool2ShareholderCount)\r\n        external override onlyOwner {\r\n        if(_amountNew >= minimumTokenBalanceForDividends){\r\n            if(shares[_shareholder].amount == 0) {\r\n                addShareholder(_shareholder);\r\n            }\r\n\r\n            if (_processPool1Active){\r\n                if (shareholderIndexes[_shareholder] < _payoutPool1ShareholderCount) {\r\n                    if (currentIndexPool1 < shareholderIndexes[_shareholder]) {\r\n                        if(shares[_shareholder].amount < _amountNew){\r\n                            shares[_shareholder].amountExcludedBuyPool1 = (_amountNew - shares[_shareholder].amount) + shares[_shareholder].amountExcludedBuyPool1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (_processPool2Active){\r\n                if (shareholderIndexes[_shareholder] < _payoutPool2ShareholderCount) {\r\n                    if (currentIndexPool2 < shareholderIndexes[_shareholder]) {\r\n                        if(shares[_shareholder].amount < _amountNew) {\r\n                            shares[_shareholder].amountExcludedBuyPool2 = (_amountNew - shares[_shareholder].amount) + shares[_shareholder].amountExcludedBuyPool2;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            totalShares = totalShares - shares[_shareholder].amount + _amountNew;\r\n            shares[_shareholder].amount = _amountNew;\r\n\r\n        } else {\r\n            if(shares[_shareholder].amount > 0) {\r\n                removeShareholder(_shareholder);\r\n                totalShares = totalShares - shares[_shareholder].amount;\r\n                shares[_shareholder].amount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addShareholder(address _shareholder) internal {\r\n        shareholderIndexes[_shareholder] = shareholders.length;\r\n        shareholders.push(_shareholder);\r\n    }\r\n\r\n    function removeShareholder(address _shareholder) internal {\r\n        shareholders[shareholderIndexes[_shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[_shareholder];\r\n        shareholders.pop();\r\n        delete shareholderIndexes[_shareholder];\r\n        shares[_shareholder].amountExcludedBuyPool1 = 0;\r\n        shares[_shareholder].amountExcludedBuyPool2 = 0;\r\n    }\r\n\r\n    function transferTokenFromPool2ToPool1(\r\n        address _pool1Token,\r\n        address _poolDistributorAddress,\r\n        address _pool1Wallet\r\n        ) external override onlyOwner {\r\n            ERC20 pool1TokenERC20 = ERC20(_pool1Token);\r\n            uint256 amount = pool1TokenERC20.balanceOf(_poolDistributorAddress);\r\n            pool1TokenERC20.transfer(_pool1Wallet, amount);\r\n    }\r\n\r\n    function processPool1(\r\n        uint256 _gas,\r\n        address _processPool1Token,\r\n        uint256 _payoutPool1CurrentTokenAmount,\r\n        uint256 _payoutPool1ShareholderCount,\r\n        address _poolDistributorAddress,\r\n        uint256 _payoutPool1DividendsPerShare\r\n        ) external override onlyOwner {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0) { return; }\r\n        if(_payoutPool1ShareholderCount < shareholderCount) {\r\n            shareholderCount = _payoutPool1ShareholderCount;\r\n        }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        ERC20 processPool1TokenERC20 = ERC20(_processPool1Token);\r\n\r\n        payoutPool1ProcessFinished = false;\r\n\r\n        while(gasUsed < _gas && iterations <= shareholderCount) {\r\n            if(currentIndexPool1 >= shareholderCount){\r\n                currentIndexPool1 = 0;\r\n                payoutPool1ProcessFinished = true;\r\n                if(payoutPool1TokensAmount[_processPool1Token] > 0) {\r\n                    if(_payoutPool1CurrentTokenAmount > processPool1TokenERC20.balanceOf(_poolDistributorAddress)) {\r\n                        payoutPool1TokensAmount[_processPool1Token] = payoutPool1TokensAmount[_processPool1Token] + (_payoutPool1CurrentTokenAmount - processPool1TokenERC20.balanceOf(_poolDistributorAddress));\r\n                    } else {\r\n                        payoutPool1TokensAmount[_processPool1Token] = payoutPool1TokensAmount[_processPool1Token] + _payoutPool1CurrentTokenAmount;\r\n                    }\r\n                } else {\r\n                    payoutPool1TokensIndexes[_processPool1Token] = payoutPool1Tokens.length;\r\n                    payoutPool1Tokens.push(_processPool1Token);\r\n\r\n                    if(_payoutPool1CurrentTokenAmount > processPool1TokenERC20.balanceOf(_poolDistributorAddress)) {\r\n                        payoutPool1TokensAmount[_processPool1Token] = _payoutPool1CurrentTokenAmount - processPool1TokenERC20.balanceOf(_poolDistributorAddress);\r\n                    } else {\r\n                        payoutPool1TokensAmount[_processPool1Token] = _payoutPool1CurrentTokenAmount;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            payoutDividendsPool1(\r\n                shareholders[currentIndexPool1],\r\n                _processPool1Token,\r\n                _poolDistributorAddress,\r\n                _payoutPool1DividendsPerShare\r\n                );\r\n\r\n            gasUsed = gasUsed + gasLeft - gasleft();\r\n            gasLeft = gasleft();\r\n            currentIndexPool1++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function processPool2(\r\n        uint256 _gas,\r\n        uint256 _payoutPool2ShareholderCount,\r\n        address _poolDistributorAddress,\r\n        uint256 _payoutPool2DividendsPerShare\r\n        ) external override onlyOwner {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0) { return; }\r\n        if(_payoutPool2ShareholderCount < shareholderCount) {\r\n            shareholderCount = _payoutPool2ShareholderCount;\r\n        }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        payoutPool2ProcessFinished = false;\r\n\r\n        while(gasUsed < _gas && iterations <= shareholderCount) {\r\n            if(currentIndexPool2 >= shareholderCount){\r\n                currentIndexPool2 = 0;\r\n                payoutPool2Time = block.timestamp;\r\n                payoutPool2TimeNext =  payoutPool2Time + payoutPool2FrequencySec;\r\n                payoutPool2ProcessFinished = true;\r\n                return;\r\n            }\r\n\r\n            payoutDividendsPool2(shareholders[currentIndexPool2], _poolDistributorAddress, _payoutPool2DividendsPerShare);\r\n\r\n            gasUsed = gasUsed + gasLeft - gasleft();\r\n            gasLeft = gasleft();\r\n            currentIndexPool2++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function payoutDividendsPool1(\r\n        address _shareholder,\r\n        address _processPool1Token,\r\n        address _poolDistributorAddress,\r\n        uint256 _payoutPool1DividendsPerShare\r\n        ) internal {\r\n\r\n        uint256 amount = 0;\r\n        ERC20 processPool1TokenERC20 = ERC20(_processPool1Token);\r\n        if(shares[_shareholder].amount == 0){ return; }\r\n        if(shares[_shareholder].amount <= shares[_shareholder].amountExcludedBuyPool1){\r\n            amount = 0;\r\n        }\r\n        else{\r\n            amount = (((shares[_shareholder].amount) - shares[_shareholder].amountExcludedBuyPool1) * _payoutPool1DividendsPerShare) / dividendsPerShareAccuracyFactor;\r\n            \r\n            if(amount > processPool1TokenERC20.balanceOf(_poolDistributorAddress)) {\r\n                amount = processPool1TokenERC20.balanceOf(_poolDistributorAddress);\r\n            }\r\n        }\r\n\r\n        if(amount > 0){\r\n            if (_shareholder==pool3BurnAddress) {\r\n                processPool1TokenERC20.transfer(pool3Wallet, amount);\r\n            }\r\n            else if (_shareholder==teamLockAddress) {\r\n                processPool1TokenERC20.transfer(teamWallet, amount);\r\n            }\r\n            else if (_shareholder==longTermGrowthLockAddress) {\r\n                processPool1TokenERC20.transfer(longTermGrowthWallet, amount);\r\n            }\r\n            else if (_shareholder==ecosystemLockAddress) {\r\n                processPool1TokenERC20.transfer(ecosystemWallet, amount);\r\n            }\r\n            else {\r\n                processPool1TokenERC20.transfer(_shareholder, amount);\r\n            }\r\n            shareholderPayoutTimePool1[_shareholder] = block.timestamp;\r\n        }\r\n        shares[_shareholder].amountExcludedBuyPool1 = 0;\r\n    }\r\n\r\n    function payoutDividendsPool2(\r\n        address _shareholder,\r\n        address _poolDistributorAddress,\r\n        uint256 _payoutPool2DividendsPerShare\r\n        ) internal {\r\n\r\n        uint256 amount = 0;\r\n        if(shares[_shareholder].amount == 0){ return; }\r\n        if(shares[_shareholder].amount <= shares[_shareholder].amountExcludedBuyPool2){\r\n            amount = 0;\r\n        }\r\n        else{\r\n            amount = (((shares[_shareholder].amount) - shares[_shareholder].amountExcludedBuyPool2) * _payoutPool2DividendsPerShare) / dividendsPerShareAccuracyFactor;\r\n\r\n            if(amount > WBNB.balanceOf(_poolDistributorAddress)) {\r\n                amount = WBNB.balanceOf(_poolDistributorAddress);\r\n            }\r\n        }\r\n\r\n        if(amount > 0){\r\n            totalDistributedWBNB = totalDistributedWBNB + amount;\r\n            if (_shareholder==pool3BurnAddress) {\r\n                WBNB.transfer(pool3Wallet, amount);\r\n            }\r\n            else if (_shareholder==teamLockAddress) {\r\n                WBNB.transfer(teamWallet, amount);\r\n            }\r\n            else if (_shareholder==longTermGrowthLockAddress) {\r\n                WBNB.transfer(longTermGrowthWallet, amount);\r\n            }\r\n            else if (_shareholder==ecosystemLockAddress) {\r\n                WBNB.transfer(ecosystemWallet, amount);\r\n            }\r\n            else {\r\n                WBNB.transfer(_shareholder, amount);\r\n            }\r\n            shareholderPayoutTimePool2[_shareholder] = block.timestamp;\r\n            shares[_shareholder].withdrawnDividendsWBNB = (shares[_shareholder].withdrawnDividendsWBNB) + amount;\r\n        }\r\n        shares[_shareholder].amountExcludedBuyPool2 = 0;\r\n    }\r\n\r\n    function getInfoAboutPool1AtIndex(uint256 _index) external view returns (\r\n        uint256 amountDifferentTokensPayoutsPool1_,\r\n        address tokenPayoutPool1_,\r\n        uint256 amountPayoutPool1_,\r\n        uint256 indexPayoutPool1_) {\r\n        tokenPayoutPool1_ = payoutPool1Tokens[_index];\r\n        require((payoutPool1TokensAmount[tokenPayoutPool1_] > 0), \"Error: no pool 1 payout with this token yet\");\r\n        amountDifferentTokensPayoutsPool1_ = payoutPool1Tokens.length;\r\n        amountPayoutPool1_ = payoutPool1TokensAmount[tokenPayoutPool1_];\r\n        indexPayoutPool1_ = _index;\r\n    }\r\n\r\n    function getInfoAboutPool1AtToken(address _processPool1Token) external view returns (\r\n        uint256 amountDifferentTokensPayoutsPool1_,\r\n        address tokenPayoutPool1_,\r\n        uint256 amountPayoutPool1_,\r\n        uint256 indexPayoutPool1_) {\r\n        require((payoutPool1TokensAmount[_processPool1Token] > 0), \"Error: no pool 1 payout with this token yet\");\r\n        amountDifferentTokensPayoutsPool1_ = payoutPool1Tokens.length;\r\n        tokenPayoutPool1_ = _processPool1Token;\r\n        amountPayoutPool1_ = payoutPool1TokensAmount[_processPool1Token];\r\n        indexPayoutPool1_ = payoutPool1TokensIndexes[_processPool1Token];\r\n    }\r\n\r\n    function getInfoAboutPool2() external view returns (\r\n            uint256 payoutPool2Time_,\r\n            uint256 payoutPool2TimeNext_,\r\n            uint256 secondsUntilNextPayout_) {\r\n            payoutPool2Time_ = payoutPool2Time;\r\n            payoutPool2TimeNext_ = payoutPool2TimeNext;\r\n            secondsUntilNextPayout_ = payoutPool2TimeNext_ > block.timestamp ?\r\n                                      payoutPool2TimeNext_ - block.timestamp :\r\n                                      0;\r\n    }\r\n\r\n    function getAccountInfoForPool2(address _accountAddress, address _poolDistributorAddress) public view returns (\r\n            address account_,\r\n            int256 index_,\r\n            uint256 lastPayoutTimePool2_,\r\n            uint256 sharesAmount_,\r\n            uint256 sharesAmountExcludedPool2_,\r\n            uint256 withdrawnDividendsPool2WBNB_,\r\n            uint256 unpaidDividendsFromPool2_) {\r\n        account_ = _accountAddress;\r\n        if(shares[_accountAddress].amount == 0) {\r\n            index_ = -1;\r\n        }\r\n        else {\r\n            index_ = int(shareholderIndexes[_accountAddress]);\r\n        }\r\n        lastPayoutTimePool2_ = shareholderPayoutTimePool2[_accountAddress];\r\n        sharesAmount_ = shares[_accountAddress].amount;\r\n        sharesAmountExcludedPool2_ = shares[_accountAddress].amountExcludedBuyPool2;\r\n        withdrawnDividendsPool2WBNB_ = shares[_accountAddress].withdrawnDividendsWBNB;\r\n        unpaidDividendsFromPool2_ = getUnpaidDividendsFromPool2(_accountAddress, _poolDistributorAddress);\r\n    }\r\n\r\n    function getAccountInfoForPool2AtIndex(uint256 _index, address _poolDistributorAddress) external view returns (\r\n            address account_,\r\n            int256 index_,\r\n            uint256 lastPayoutTimePool2_,\r\n            uint256 sharesAmount_,\r\n            uint256 sharesAmountExcludedPool2_,\r\n            uint256 withdrawnDividendsPool2WBNB_,\r\n            uint256 unpaidDividendsFromPool2_) {\r\n    \tif(_index >= (shareholders.length)) {\r\n            return (0x0000000000000000000000000000000000000000, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address _account = shareholders[_index];\r\n        return getAccountInfoForPool2(_account, _poolDistributorAddress);\r\n    }\r\n\r\n    function getUnpaidDividendsFromPool2(address _shareholder, address _poolDistributorAddress) public view returns (uint256) {\r\n        if(shares[_shareholder].amount == 0){ return 0; }\r\n        uint256 _divPerShare = ((WBNB.balanceOf(_poolDistributorAddress)) * dividendsPerShareAccuracyFactor) / totalShares;\r\n        return ((shares[_shareholder].amount) * _divPerShare) / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function updatePayoutPool2FrequencySec(uint256 _newPayoutPool2FrequencySec) external onlyOwner {\r\n        emit PayoutPool2FrequencySecUpdated(_newPayoutPool2FrequencySec, payoutPool2FrequencySec);\r\n        payoutPool2FrequencySec = _newPayoutPool2FrequencySec;\r\n        updatePayoutPool2TimeNext();\r\n    }\r\n\r\n    function updatePayoutPool2TimeNext() public onlyOwner {\r\n        payoutPool2TimeNext =  block.timestamp + payoutPool2FrequencySec;\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        require(_newMinimumBalance <= (10**18), \"Error: use the value without 10**18, e.g. 100 tokens\");\r\n        require(_newMinimumBalance <= 100_000_000, \"Error: token amount exceeds total supply\");\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * 10**18;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return shareholders.length;\r\n    }\r\n\r\n    function updatePool3Wallet(address _newPool3Wallet) external onlyOwner {\r\n        require(_newPool3Wallet != pool3Wallet, \"Error: The pool3Wallet is already this address\");\r\n        emit Pool3WalletUpdated(_newPool3Wallet, pool3Wallet);\r\n        pool3Wallet = _newPool3Wallet;\r\n    }\r\n\r\n    function updatePool3BurnAddress(address _newPool3BurnAddress) external onlyOwner {\r\n        require(_newPool3BurnAddress != pool3BurnAddress, \"Error: The pool3BurnAddress is already this address\");\r\n        emit Pool3BurnAddressUpdated(_newPool3BurnAddress, pool3BurnAddress);\r\n        pool3BurnAddress = _newPool3BurnAddress;\r\n    }\r\n\r\n    function updateTeamWallet(address _newTeamWallet) external onlyOwner {\r\n        require(_newTeamWallet != teamWallet, \"Error: The teamWallet is already this address\");\r\n        emit TeamWalletUpdated(_newTeamWallet, teamWallet);\r\n        teamWallet = _newTeamWallet;\r\n    }\r\n\r\n    function updateLongTermGrowthWallet(address _newLongTermGrowthWallet) external onlyOwner {\r\n        require(_newLongTermGrowthWallet != longTermGrowthWallet, \"Error: The longTermGrowthWallet is already this address\");\r\n        emit LongTermGrowthWalletUpdated(_newLongTermGrowthWallet, longTermGrowthWallet);\r\n        longTermGrowthWallet = _newLongTermGrowthWallet;\r\n    }\r\n\r\n    function updateEcosystemWallet(address _newEcosystemWallet) external onlyOwner {\r\n        require(_newEcosystemWallet != ecosystemWallet, \"Error: The ecosystemWallet is already this address\");\r\n        emit EcosystemWalletUpdated(_newEcosystemWallet, ecosystemWallet);\r\n        ecosystemWallet = _newEcosystemWallet;\r\n    }\r\n\r\n    function updateTeamLockAddress(address _newTeamLockAddress) external onlyOwner {\r\n        require(_newTeamLockAddress != teamLockAddress, \"Error: The teamLockAddress is already this address\");\r\n        emit TeamLockAddressUpdated(_newTeamLockAddress, teamLockAddress);\r\n        teamLockAddress = _newTeamLockAddress;\r\n    }\r\n\r\n    function updateLongTermGrowthLockAddress(address _newLongTermGrowthLockAddress) external onlyOwner {\r\n        require(_newLongTermGrowthLockAddress != longTermGrowthLockAddress, \"Error: The longTermGrowthLockAddress is already this address\");\r\n        emit LongTermGrowthLockAddressUpdated(_newLongTermGrowthLockAddress, longTermGrowthLockAddress);\r\n        longTermGrowthLockAddress = _newLongTermGrowthLockAddress;\r\n    }\r\n\r\n    function updateEcosystemLockAddress(address _newEcosystemLockAddress) external onlyOwner {\r\n        require(_newEcosystemLockAddress != ecosystemLockAddress, \"Error: The ecosystemLockAddress is already this address\");\r\n        emit EcosystemLockAddressUpdated(_newEcosystemLockAddress, ecosystemLockAddress);\r\n        ecosystemLockAddress = _newEcosystemLockAddress;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"LaunchExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"PayoutGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"PayoutPool2MinAmountWBNBUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"PayoutPool2PercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPool1Wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPool1Wallet\",\"type\":\"address\"}],\"name\":\"Pool1WalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFeeTokensMinAmount\",\"type\":\"uint256\"}],\"name\":\"SetSwapFeeTokensMinAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"isExcludeFromDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newProcessPool1Trigger\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProcessPool1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newProcessPool1StartTime\",\"type\":\"uint256\"}],\"name\":\"triggeredPool1Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyPool1Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyPool2Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyPool3Fee\",\"type\":\"uint256\"}],\"name\":\"updatedBuyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellPool1Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellPool2Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellPool3Fee\",\"type\":\"uint256\"}],\"name\":\"updatedSellFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxPool1Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxPool2Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTxPool3Fee\",\"type\":\"uint256\"}],\"name\":\"updatedTxFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FACTOR_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPool3Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canTransferBeforeTradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfoForPool2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"index_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayoutTimePool2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmountExcludedPool2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnDividendsPool2WBNB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unpaidDividendsFromPool2_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoForPool2AtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"index_\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastPayoutTimePool2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmountExcludedPool2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnDividendsPool2WBNB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unpaidDividendsFromPool2_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollectedFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collectedAmountLiquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectedAmountMarketingFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectedAmountPool1Fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectedAmountPool2Fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectedAmountPool3Fee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectedAmountPool3FeeOld_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentInfoAboutPool1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"processPool1Trigger_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"processPool1Active_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"payoutPool1ProcessFinished_\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"processPool1Token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"processPool1StartTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool1CurrentTokenAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool1DividendsPerShare_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSharesAtCurrentPayoutPool1_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool1ShareholderCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentIndexPool1_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentInfoAboutPool2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"processPool2Active_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"payoutPool2ProcessFinished_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSaveParameterForPayout_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool2MinAmountWBNB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pool2BalanceWBNB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool2CurrentWBNB_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool2DividendsPerShare_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSharesAtCurrentPayoutPool2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool2ShareholderCount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentIndexPool2_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool2Time_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPool2TimeNext_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsUntilNextPayout_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnlyTradeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaveParameterForPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool1CurrentTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool1DividendsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool1ShareholderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool2CurrentWBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool2DividendsPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool2MinAmountWBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool2Percent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool2ShareholderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool1Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool2BalanceWBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolDistributorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processPool1Active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processPool1StartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processPool1Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processPool1Trigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processPool2Active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPool1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPool2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPool3Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setCanTransferBeforeTradingIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newEcosystemLockAddress\",\"type\":\"address\"}],\"name\":\"setEcosystemLockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newEcosystemWallet\",\"type\":\"address\"}],\"name\":\"setEcosystemWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLiquidityWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLongTermGrowthLockAddress\",\"type\":\"address\"}],\"name\":\"setLongTermGrowthLockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLongTermGrowthWallet\",\"type\":\"address\"}],\"name\":\"setLongTermGrowthWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"setMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setPayoutGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPayoutPool2FrequencySec\",\"type\":\"uint256\"}],\"name\":\"setPayoutPool2FrequencySec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutPool2MinAmountWBNB\",\"type\":\"uint256\"}],\"name\":\"setPayoutPool2MinAmountWBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_payoutPool2Percent\",\"type\":\"uint256\"}],\"name\":\"setPayoutPool2Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPool1Wallet\",\"type\":\"address\"}],\"name\":\"setPool1Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPool3BurnAddress\",\"type\":\"address\"}],\"name\":\"setPool3BurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPool3Wallet\",\"type\":\"address\"}],\"name\":\"setPool3Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapMinAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapFeeTokensMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTeamLockAddress\",\"type\":\"address\"}],\"name\":\"setTeamLockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTeamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTradeFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeTokensMinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSharesAtCurrentPayoutPool1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSharesAtCurrentPayoutPool2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBNBFromContractAddressToPool1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenERC20\",\"type\":\"address\"}],\"name\":\"transferERC20TokenFromContractAddressToPool1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool1Token\",\"type\":\"address\"}],\"name\":\"transferERC20TokenFromPool2ToPool1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"triggerPool1Payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txPool1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txPool2Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txPool3Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBuyLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyPool1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyPool2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBuyPool3Fee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellPool1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellPool2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellPool3Fee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTxLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTxMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTxPool1Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTxPool2Fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTxPool3Fee\",\"type\":\"uint256\"}],\"name\":\"updateTxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CommunityInvestmentFundContract", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://84a72212a5b58b27b5458ea705296379aded2d56a5222451e3278d63b84d54a2"}