{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n// Import ERC20 interface for token transfers\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            uint256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            uint256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract PriceConsumerV3 {\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    function getLatestPrice() public view returns (uint) {\r\n        (, uint price, , , ) = priceFeed.latestRoundData();\r\n\r\n        return uint256(price);\r\n    }\r\n}\r\n\r\ncontract PresaleMetaWorld is PriceConsumerV3 {\r\n    address public owner;\r\n    IERC20 public MTW;\r\n    uint public totalRaisedBNB;\r\n    uint public totalRaisedUSDT;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    bool public CanBuy;\r\n    uint256 public rewardLimit;\r\n    uint8 public rewardPercentage = 10;\r\n\r\n    struct TokenDetails {\r\n        IERC20 tokenAddress;\r\n        uint256 price;\r\n        uint256 totalSold;\r\n    }\r\n\r\n    TokenDetails[] public tokenList;\r\n    mapping(address => address) public referrers;\r\n    mapping(address => uint256) public selfBuys;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    event TokenPriceUpdated(uint256 indexed tokenIndex, uint256 newPrice);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event TokensAddedToTokenList(address indexed tokenAddress, uint256 price);\r\n    event TokenRemovedFromTokenList(\r\n        address indexed tokenAddress,\r\n        uint256 tokenIndex\r\n    );\r\n    event TokensPurchased(\r\n        address indexed buyer,\r\n        uint256 tokenIndex,\r\n        uint256 amountBought,\r\n        uint256 priceInBNB\r\n    );\r\n    event EtherWithdrawn(address indexed owner, uint256 amount);\r\n    event TokensWithdrawn(\r\n        address indexed owner,\r\n        address indexed tokenAddress,\r\n        uint256 amount\r\n    );\r\n    event PresalePeriodUpdated(uint256 newStartTime, uint256 newEndTime);\r\n    event CanBuyStatusChanged(bool newCanBuyStatus);\r\n\r\n    constructor(uint256 _startTime, uint256 _endTime) {\r\n        owner = msg.sender;\r\n        CanBuy = true;\r\n        rewardLimit = 100000000000;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        priceFeed = AggregatorV3Interface(\r\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        );\r\n        tokenList.push(TokenDetails(IERC20(address(0)), 66, 0));\r\n        tokenList.push(\r\n            TokenDetails(\r\n                IERC20(0x55d398326f99059fF775485246999027B3197955),\r\n                66,\r\n                0\r\n            )\r\n        );\r\n        MTW = IERC20(0xAAeB74600F79718508606a8A84E9B151d77de01C);\r\n    }\r\n\r\n    // Function to update the price of a token (for the owner)\r\n    function updateTokenPrice(\r\n        uint256 _tokenIndex,\r\n        uint256 _price\r\n    ) external onlyOwner {\r\n        require(_tokenIndex < tokenList.length, \"Invalid token index\");\r\n        tokenList[_tokenIndex].price = _price;\r\n        emit TokenPriceUpdated(_tokenIndex, _price);\r\n    }\r\n\r\n    function updatePriceFeed(address _newPriceFeedAddress) external onlyOwner {\r\n        priceFeed = AggregatorV3Interface(_newPriceFeedAddress);\r\n    }\r\n\r\n    function setTokenForSaleAddress(\r\n        address _newTokenAddress\r\n    ) external onlyOwner {\r\n        MTW = IERC20(_newTokenAddress);\r\n    }\r\n\r\n    function setCanBuy(bool _canBuy) external onlyOwner {\r\n        CanBuy = _canBuy;\r\n        emit CanBuyStatusChanged(_canBuy);\r\n    }\r\n\r\n    function setrewardLimit(uint256 _rewardLimit) external onlyOwner {\r\n        rewardLimit = _rewardLimit;\r\n    }\r\n\r\n    function setrewardPercentage(uint8 _rewardPercentage) external onlyOwner {\r\n        rewardPercentage = _rewardPercentage;\r\n    }\r\n\r\n    function addTokenToTokenList(\r\n        IERC20 _tokenAddress,\r\n        uint256 _price\r\n    ) public onlyOwner {\r\n        TokenDetails memory newToken = TokenDetails({\r\n            tokenAddress: _tokenAddress,\r\n            price: _price,\r\n            totalSold: 0\r\n        });\r\n        tokenList.push(newToken);\r\n        emit TokensAddedToTokenList(address(_tokenAddress), _price);\r\n    }\r\n\r\n    function removeTokenFromTokenList(uint256 _tokenIndex) public onlyOwner {\r\n        require(_tokenIndex < tokenList.length, \"Invalid token index\");\r\n        address removedTokenAddress = address(\r\n            tokenList[_tokenIndex].tokenAddress\r\n        );\r\n        for (uint256 i = _tokenIndex; i < tokenList.length - 1; i++) {\r\n            tokenList[i] = tokenList[i + 1];\r\n        }\r\n        tokenList.pop();\r\n        emit TokenRemovedFromTokenList(removedTokenAddress, _tokenIndex);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"New owner address cannot be zero\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function buyTokens(\r\n        uint _tokenIndex,\r\n        uint256 _amount,\r\n        address referrer\r\n    ) external payable {\r\n        require(CanBuy, \"MTW: Can't buy token\");\r\n        require(_tokenIndex < tokenList.length, \"Invalid token index\");\r\n\r\n        uint256 tokenBought;\r\n\r\n        if (_tokenIndex == 0) {\r\n            tokenBought = calculateTokens(_tokenIndex, msg.value);\r\n            totalRaisedBNB += msg.value;\r\n        } else {\r\n            tokenBought = calculateTokens(_tokenIndex, _amount);\r\n            totalRaisedUSDT += _amount;\r\n            IERC20(tokenList[_tokenIndex].tokenAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _amount\r\n            );\r\n        }\r\n\r\n        selfBuys[msg.sender] += tokenBought;\r\n\r\n        uint256 remainingAllowance = tokenForSale();\r\n        require(\r\n            remainingAllowance >= tokenBought,\r\n            \"MTW: Not enough allowance for token sale\"\r\n        );\r\n        tokenList[_tokenIndex].totalSold += tokenBought;\r\n        MTW.transferFrom(owner, msg.sender, tokenBought);\r\n\r\n        emit TokensPurchased(\r\n            msg.sender,\r\n            _tokenIndex,\r\n            tokenBought,\r\n            tokenList[_tokenIndex].price\r\n        );\r\n\r\n        if (referrers[msg.sender] == address(0)) {\r\n            referrers[msg.sender] = referrer != address(0) ? referrer : owner;\r\n        }\r\n\r\n        if (\r\n            referrers[msg.sender] != address(0) &&\r\n            referrers[msg.sender] == referrer\r\n        ) {\r\n            uint checkValue = selfBuys[referrer];\r\n            if (checkValue >= rewardLimit) {\r\n                uint256 referralReward = (tokenBought * rewardPercentage) / 100;\r\n                MTW.transferFrom(owner, referrer, referralReward);\r\n            }\r\n        }\r\n    }\r\n\r\n    function calculateTokens(\r\n        uint256 _tokenIndex,\r\n        uint256 _amount\r\n    ) public view returns (uint256) {\r\n        require(_tokenIndex < tokenList.length, \"Invalid token index\");\r\n        uint256 tokenPrice = tokenList[_tokenIndex].price;\r\n        uint256 usdtPrice = getLatestPrice(); // Fetch USDT price from Chainlink\r\n        uint256 decimal = 10 ** MTW.decimals();\r\n        uint256 tokenAmount;\r\n\r\n        if (_tokenIndex == 0) {\r\n            uint256 bnbtousdt = _amount * usdtPrice;\r\n            tokenAmount = (bnbtousdt * tokenPrice * decimal) / (1 ether) / 1e8;\r\n        } else {\r\n            tokenAmount = (_amount * tokenPrice * decimal) / (1 ether);\r\n        }\r\n\r\n        return tokenAmount;\r\n    }\r\n\r\n    function withdrawEther(uint256 amount) external onlyOwner {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Insufficient balance in the contract\"\r\n        );\r\n        payable(owner).transfer(amount);\r\n        emit EtherWithdrawn(owner, amount);\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(tokenAddress != address(0), \"Token address cannot be zero\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(owner, amount);\r\n        emit TokensWithdrawn(owner, tokenAddress, amount);\r\n    }\r\n\r\n    function getTotalSoldTokens() external view returns (uint256) {\r\n        uint256 totalTokensSold = 0;\r\n        for (uint256 i = 0; i < tokenList.length; i++) {\r\n            totalTokensSold += tokenList[i].totalSold;\r\n        }\r\n        return totalTokensSold;\r\n    }\r\n\r\n    function setPresaleTimePeriod(\r\n        uint256 _newStartTime,\r\n        uint256 _newEndTime\r\n    ) external onlyOwner {\r\n        require(\r\n            _newStartTime > block.timestamp,\r\n            \"Start time must be in the future\"\r\n        );\r\n        require(\r\n            _newEndTime > block.timestamp,\r\n            \"End time must be in the future\"\r\n        );\r\n        require(\r\n            _newEndTime > _newStartTime,\r\n            \"End time must be after the start time\"\r\n        );\r\n\r\n        startTime = _newStartTime;\r\n        endTime = _newEndTime;\r\n        emit PresalePeriodUpdated(startTime, endTime);\r\n    }\r\n\r\n    function tokenForSale() public view returns (uint256) {\r\n        return MTW.allowance(owner, address(this));\r\n    }\r\n\r\n    function contractBalance(\r\n        address tokenAddress\r\n    ) external view returns (uint256) {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newCanBuyStatus\",\"type\":\"bool\"}],\"name\":\"CanBuyStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"}],\"name\":\"PresalePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"TokenRemovedFromTokenList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokensAddedToTokenList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInBNB\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CanBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MTW\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addTokenToTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSoldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"}],\"name\":\"removeTokenFromTokenList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selfBuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canBuy\",\"type\":\"bool\"}],\"name\":\"setCanBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"setPresaleTimePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenForSaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardLimit\",\"type\":\"uint256\"}],\"name\":\"setrewardLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardPercentage\",\"type\":\"uint8\"}],\"name\":\"setrewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPriceFeedAddress\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PresaleMetaWorld", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000654be8c000000000000000000000000000000000000000000000000000000000672e6dc0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5a9a7c40e598881d95685da658db45e9912383f04db7f24a809d04043b1d5b1"}