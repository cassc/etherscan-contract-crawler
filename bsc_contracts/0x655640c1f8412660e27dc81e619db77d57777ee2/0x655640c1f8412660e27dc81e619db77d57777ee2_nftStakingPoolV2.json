{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.7;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex;\r\n                // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n\r\n    function MinerList(address _address) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value : value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, 'e0');\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), 'e1');\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IERC721Enumerable {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function mintForMiner(address _to, uint256 _tokenId) external returns (bool, uint256);\r\n\r\n    function allPriceList(uint256 _tokenId) external view returns (uint256);\r\n\r\n    function canMintList(uint256 _tokenId) external view returns (bool);\r\n\r\n    function tokenIdPersistList(uint256 _tokenID) external view returns (bool);\r\n\r\n    function MinerList(address _address) external view returns (bool);\r\n}\r\n\r\n// interface Token is IERC20 {\r\n//     function mint(address _to, uint256 _amount) external returns (bool);\r\n\r\n//     function balanceOf(address account) external view returns (uint256);\r\n\r\n//     function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n//     function MinerList(address _address) external returns (bool);\r\n// }\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface swapRouter {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n}\r\n\r\ninterface MasterChefForErc20 {\r\n    function depositByProxy(address _user, uint256 _pid, uint256 _depositAmount) external;\r\n}\r\n\r\ninterface rewardOsPlus {\r\n    function refererAddressList(address _user) external view returns (address);\r\n\r\n    function addRewardList(address _user, uint256 _rewardAmount, uint256 _type) external;\r\n\r\n    function refererRate() external view returns (uint256);\r\n\r\n    function userRate() external view returns (uint256);\r\n}\r\n\r\ncontract nftStakingPoolV2 is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    struct poolInfo0 {\r\n        IERC20 rewardToken;\r\n        IERC721Enumerable stakingNftToken;\r\n    }\r\n\r\n    struct poolInfo1 {\r\n        bool useMintMode;\r\n        bool limitWithdrawTime;\r\n        bool limitGetRewardTime;\r\n        bool pool_status;\r\n    }\r\n\r\n    struct poolInfo2 {\r\n        uint256 rewardPerBlock;\r\n        uint256 lastRewardBlock;\r\n        uint256 accCakePerShare;\r\n        uint256 staking_stock_length;\r\n        uint256 reward_stock_length;\r\n        uint256 refererrate;\r\n        uint256 startBlock;\r\n        uint256 bonusEndBlock;\r\n    }\r\n\r\n    struct PoolInfoItem {\r\n        uint256 pid;\r\n        poolInfo0 tokensList;\r\n        poolInfo1 statusList;\r\n        poolInfo2 poolConfigList;\r\n    }\r\n\r\n    struct privateItem {\r\n        bool limitGetRewardTime;\r\n        uint256 reward_stock_length;\r\n        address referer;\r\n        uint256 refererrate;\r\n        uint256 getreward_time;\r\n    }\r\n\r\n    struct swapItem {\r\n        swapRouter routerAddress;\r\n        IERC20 usdtToken;\r\n        IERC20 pairAddress;\r\n        address[] swapErc20Path;\r\n        bool useAutoFarm;\r\n        MasterChefForErc20 farmAddress;\r\n        bool useRewardOsPlus;\r\n        rewardOsPlus rewardOsPlusAddress;\r\n    }\r\n\r\n    struct getInfoForUserItem {\r\n        PoolInfoItem poolinfo;\r\n        UserInfo userinfo;\r\n        IERC20 cot;\r\n        bool useRewardOsPlus;\r\n        rewardOsPlus rewardOsPlusAddress;\r\n        uint256 unlockTime;\r\n        uint256 stakingTime;\r\n        uint256 getRewardTime;\r\n        uint256 pendingAmount;\r\n        uint256 pendingCake;\r\n        uint256 allPendingReward;\r\n        uint256 stakingNumAll;\r\n        uint256 allreward;\r\n        uint256 lpBalance;\r\n        uint256[] tokenIdList;\r\n        bool useWhiteList;\r\n        bool isInWhiteList;\r\n    }\r\n\r\n    struct poolIdStructItem {\r\n        uint256 rewardPlusPoolId;\r\n        uint256 autoFarmPoolId;\r\n    }\r\n\r\n\r\n    swapItem public swapConfig;\r\n    poolIdStructItem public poolIdConfig;\r\n    IERC20 public cot;\r\n    address public devaddr;\r\n    uint256 public BONUS_MULTIPLIER = 1;\r\n    uint256 public poolLength = 0;\r\n    mapping(uint256 => PoolInfoItem) public poolInfo;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    bool public useWhiteList = false;\r\n    mapping(uint256 => mapping(address => uint256)) public staking_time;\r\n    mapping(uint256 => mapping(address => uint256)) public unlock_time;\r\n    mapping(uint256 => mapping(address => uint256)) public last_getreward_time;\r\n    mapping(uint256 => uint256) public stakingNumForPool;\r\n    mapping(uint256 => mapping(address => uint256)) public pending_list;\r\n    mapping(uint256 => mapping(address => uint256)) public allrewardList;\r\n    mapping(address => bool) public white_list;\r\n    mapping(uint256 => mapping(address => EnumerableSet.UintSet)) private userStakingTokenIdListSet;\r\n    mapping(IERC721Enumerable => mapping(uint256 => address)) public stakingNftOlderOwnerList;\r\n    mapping(IERC721Enumerable => mapping(address => EnumerableSet.UintSet)) private userStakingTokenIdListAllSet;\r\n\r\n\r\n    event safeCakeTransferEvent(IERC20 _rewardToken, address _to, uint256 _amount, uint256 cakeBalance);\r\n\r\n    constructor ()   {\r\n        setUseAutoFarmAndUseRewardPuls(false,false);\r\n    }\r\n\r\n    function setCot(IERC20 _cot) external onlyOwner {\r\n        cot = _cot;\r\n    }\r\n\r\n    function setSwapConfig(swapRouter _routerAddress, IERC20 _usdtToken, IERC20 _pairAddress, address[] calldata _swapErc20Path, bool _useAutoFarm, MasterChefForErc20 _farmAddress, bool _useRewardOsPlus, rewardOsPlus _rewardOsPlusAddress) external onlyOwner {\r\n        swapConfig = swapItem(_routerAddress, _usdtToken, _pairAddress, _swapErc20Path, _useAutoFarm, _farmAddress, _useRewardOsPlus, _rewardOsPlusAddress);\r\n    }\r\n\r\n    function setPoolIdConfig(uint256 _rewardPlusPoolId, uint256 _autoFarmPoolId) external onlyOwner {\r\n        poolIdConfig = poolIdStructItem(_rewardPlusPoolId, _autoFarmPoolId);\r\n    }\r\n\r\n    function setUseAutoFarmAndUseRewardPuls(bool _useAutoFarm, bool _useRewardOsPlus) public onlyOwner {\r\n        swapConfig.useAutoFarm = _useAutoFarm;\r\n        swapConfig.useRewardOsPlus = _useRewardOsPlus;\r\n    }\r\n\r\n    function setUseWhiteList(bool _useWhiteList) external onlyOwner {\r\n        useWhiteList = _useWhiteList;\r\n    }\r\n\r\n    function setWhiteList(address[] memory _address_list) external onlyOwner {\r\n        for (uint256 i = 0; i < _address_list.length; i++) {\r\n            white_list[_address_list[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeWhiteList(address[] memory _address_list) external onlyOwner {\r\n        for (uint256 i = 0; i < _address_list.length; i++) {\r\n            white_list[_address_list[i]] = false;\r\n        }\r\n    }\r\n\r\n    function updateMultiplier(uint256 multiplierNumber) external onlyOwner {\r\n        BONUS_MULTIPLIER = multiplierNumber;\r\n    }\r\n\r\n    function addPool(IERC20 _rewardToken, IERC721Enumerable _stakingNftToken, uint256 _rewardPerBlock, uint256 _startBlock, uint256 _bonusEndBlock, uint256 _daoRewardRate, bool _limitWithdrawTime, uint256 _staking_stock_length, bool _useMintMode) external onlyOwner {\r\n        uint256 lastRewardBlock = block.timestamp > _startBlock ? block.timestamp : _startBlock;\r\n        PoolInfoItem memory poolItem = (new PoolInfoItem[](1))[0];\r\n        poolItem.pid = poolLength;\r\n        poolItem.tokensList = poolInfo0({\r\n        rewardToken : _rewardToken,\r\n        stakingNftToken : _stakingNftToken\r\n        });\r\n        poolItem.statusList = poolInfo1({\r\n        useMintMode : _useMintMode,\r\n        limitGetRewardTime : false,\r\n        limitWithdrawTime : _limitWithdrawTime,\r\n        pool_status : true\r\n        });\r\n        poolItem.poolConfigList = poolInfo2({\r\n        rewardPerBlock : _rewardPerBlock,\r\n        lastRewardBlock : lastRewardBlock,\r\n        accCakePerShare : 0,\r\n        staking_stock_length : _staking_stock_length,\r\n        reward_stock_length : 0,\r\n        refererrate : _daoRewardRate,\r\n        startBlock : _startBlock,\r\n        bonusEndBlock : _bonusEndBlock\r\n        });\r\n        poolInfo[poolLength] = poolItem;\r\n        poolLength = poolLength.add(1);\r\n    }\r\n\r\n    function setPoolLimitWithdrawTime(uint256 _pid, bool _limitWithdrawTime, uint256 _staking_stock_length) external onlyOwner {\r\n        updatePool(_pid);\r\n        poolInfo[_pid].statusList.limitWithdrawTime = _limitWithdrawTime;\r\n        poolInfo[_pid].poolConfigList.staking_stock_length = _staking_stock_length;\r\n    }\r\n\r\n    function setPoolTimeLine(uint256 _pid, uint256 _startBlock, uint256 _bonusEndBlock) external onlyOwner {\r\n        updatePool(_pid);\r\n        poolInfo[_pid].poolConfigList.startBlock = _startBlock;\r\n        poolInfo[_pid].poolConfigList.bonusEndBlock = _bonusEndBlock;\r\n    }\r\n\r\n    function setPoolRewardTokenAndRewardPerBlock(uint256 _pid, IERC20 _rewardToken, uint256 _rewardPerBlock) external onlyOwner {\r\n        updatePool(_pid);\r\n        poolInfo[_pid].tokensList.rewardToken = _rewardToken;\r\n        poolInfo[_pid].poolConfigList.rewardPerBlock = _rewardPerBlock;\r\n\r\n    }\r\n\r\n    function setPoolLimitGetRewardTime(uint256 _pid, bool _limitGetRewardTime, uint256 _reward_stock_length) external onlyOwner {\r\n        updatePool(_pid);\r\n        poolInfo[_pid].statusList.limitGetRewardTime = _limitGetRewardTime;\r\n        poolInfo[_pid].poolConfigList.reward_stock_length = _reward_stock_length;\r\n    }\r\n\r\n    function setPoolStatus(uint256 _pid, bool _pool_status) external onlyOwner {\r\n        updatePool(_pid);\r\n        poolInfo[_pid].statusList.pool_status = _pool_status;\r\n    }\r\n\r\n    function setApprovedForSwapAndFarm(uint256 _amount) external onlyOwner {\r\n        require(address(cot) != address(0));\r\n        require(address(swapConfig.routerAddress) != address(0));\r\n        require(address(swapConfig.usdtToken) != address(0));\r\n        require(address(swapConfig.pairAddress) != address(0));\r\n        require(address(swapConfig.farmAddress) != address(0));\r\n        cot.approve(address(swapConfig.routerAddress), _amount);\r\n        swapConfig.usdtToken.approve(address(swapConfig.routerAddress), _amount);\r\n        swapConfig.pairAddress.approve(address(swapConfig.farmAddress), _amount);\r\n    }\r\n\r\n    function getMultiplier(uint256 _pid, uint256 _from, uint256 _to) public view returns (uint256) {\r\n        uint256 bonusEndBlock = poolInfo[_pid].poolConfigList.bonusEndBlock;\r\n        uint256 fromBlock = poolInfo[_pid].poolConfigList.startBlock;\r\n        if (!poolInfo[_pid].statusList.pool_status || block.timestamp < fromBlock) {\r\n            return 0;\r\n        }\r\n        if (_to <= bonusEndBlock) {\r\n            return _to - _from;\r\n        } else if (_from >= bonusEndBlock) {\r\n            return 0;\r\n        } else {\r\n            return bonusEndBlock - _from;\r\n        }\r\n    }\r\n\r\n    function pendingCake(uint256 _pid, address _user) public view returns (uint256) {\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accCakePerShare = pool.poolConfigList.accCakePerShare;\r\n        uint256 lpSupply = stakingNumForPool[_pid];\r\n        if (block.timestamp > pool.poolConfigList.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(_pid, pool.poolConfigList.lastRewardBlock, block.timestamp);\r\n            uint256 cakeReward = multiplier.mul(pool.poolConfigList.rewardPerBlock);\r\n            accCakePerShare = accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        if (block.timestamp <= pool.poolConfigList.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = stakingNumForPool[_pid];\r\n        if (lpSupply == 0) {\r\n            pool.poolConfigList.lastRewardBlock = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(_pid, pool.poolConfigList.lastRewardBlock, block.timestamp);\r\n        uint256 cakeReward = multiplier.mul(pool.poolConfigList.rewardPerBlock);\r\n        if (pool.statusList.useMintMode && pool.tokensList.rewardToken.MinerList(address(this))) {\r\n            try pool.tokensList.rewardToken.mint(address(this), cakeReward){} catch {}\r\n        }\r\n        pool.poolConfigList.accCakePerShare = pool.poolConfigList.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n        pool.poolConfigList.lastRewardBlock = block.timestamp;\r\n    }\r\n\r\n    function massUpdatePools() public {\r\n        for (uint256 pid = 0; pid < poolLength; pid++) {\r\n            if (poolInfo[pid].statusList.pool_status) {\r\n                updatePool(pid);\r\n            }\r\n        }\r\n    }\r\n\r\n    function deposit(uint256 _pid, uint256[] memory _tokenIdList) external nonReentrant {\r\n        address _user = msg.sender;\r\n        updatePool(_pid);\r\n        require(poolInfo[_pid].statusList.pool_status, \"e001\");\r\n        require(block.timestamp >= poolInfo[_pid].poolConfigList.startBlock, \"e002\");\r\n        require(block.timestamp <= poolInfo[_pid].poolConfigList.bonusEndBlock, \"e003\");\r\n\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                pending_list[_pid][_user] = pending_list[_pid][_user].add(pending);\r\n            }\r\n        }\r\n        uint256 _depositAmount = _tokenIdList.length;\r\n        if (_depositAmount > 0) {\r\n            for (uint256 i = 0; i < _depositAmount; i++) {\r\n                pool.tokensList.stakingNftToken.transferFrom(_user, address(this), _tokenIdList[i]);\r\n                userStakingTokenIdListAllSet[pool.tokensList.stakingNftToken][_user].add(_tokenIdList[i]);\r\n                userStakingTokenIdListSet[_pid][_user].add(_tokenIdList[i]);\r\n                stakingNftOlderOwnerList[pool.tokensList.stakingNftToken][_tokenIdList[i]] = _user;\r\n            }\r\n            stakingNumForPool[_pid] = stakingNumForPool[_pid].add(_depositAmount);\r\n            uint256 oldStaking = user.amount;\r\n            uint256 newStaking = user.amount.add(_depositAmount);\r\n            user.amount = user.amount.add(_depositAmount);\r\n            uint256 oldUnlockTime;\r\n            uint256 newUnlockTime;\r\n            if (unlock_time[_pid][_user] == 0) {\r\n                oldUnlockTime = block.timestamp.add(pool.poolConfigList.staking_stock_length);\r\n            } else {\r\n                oldUnlockTime = unlock_time[_pid][_user];\r\n            }\r\n            if (oldUnlockTime >= block.timestamp) {\r\n                newUnlockTime = oldStaking.mul(oldUnlockTime.sub(block.timestamp)).add(_depositAmount.mul(pool.poolConfigList.staking_stock_length)).div(newStaking);\r\n            } else {\r\n                newUnlockTime = _depositAmount.mul(pool.poolConfigList.staking_stock_length).div(newStaking);\r\n            }\r\n            unlock_time[_pid][_user] = block.timestamp.add(newUnlockTime);\r\n            staking_time[_pid][_user] = block.timestamp;\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12);\r\n    }\r\n\r\n    function withdraw(uint256 _pid, uint256[] memory _tokenIdList) external nonReentrant {\r\n        address _user = msg.sender;\r\n        updatePool(_pid);\r\n        if (poolInfo[_pid].statusList.limitWithdrawTime) {\r\n            if (!useWhiteList) {\r\n                require(block.timestamp > unlock_time[_pid][msg.sender], \"e004\");\r\n            } else {\r\n                if (!white_list[msg.sender]) {\r\n                    require(block.timestamp > unlock_time[_pid][msg.sender], \"e005\");\r\n                }\r\n            }\r\n        }\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 pending = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            pending_list[_pid][_user] = pending_list[_pid][_user].add(pending);\r\n        }\r\n        uint256 _withdrawAmount = _tokenIdList.length;\r\n        for (uint256 i = 0; i < _withdrawAmount; i++) {\r\n            uint256 _tokenId = _tokenIdList[i];\r\n            require(stakingNftOlderOwnerList[pool.tokensList.stakingNftToken][_tokenId] == _user, \"e006\");\r\n            userStakingTokenIdListSet[_pid][_user].remove(_tokenId);\r\n            stakingNftOlderOwnerList[pool.tokensList.stakingNftToken][_tokenId] = address(0);\r\n            pool.tokensList.stakingNftToken.transferFrom(address(this), _user, _tokenId);\r\n            userStakingTokenIdListAllSet[pool.tokensList.stakingNftToken][_user].remove(_tokenIdList[i]);\r\n        }\r\n        user.amount = user.amount.sub(_withdrawAmount);\r\n        stakingNumForPool[_pid] = stakingNumForPool[_pid].sub(_withdrawAmount);\r\n        user.rewardDebt = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12);\r\n    }\r\n\r\n    function swapAndDepositFarm(uint256 _pid, address _user, uint256 _allAmount) internal {\r\n        address referer = swapConfig.rewardOsPlusAddress.refererAddressList(_user);\r\n        uint256 refererrate = poolInfo[_pid].poolConfigList.refererrate;\r\n        uint256 rewardAmount = _allAmount.mul(refererrate).div(100);\r\n        uint256 userAmount = _allAmount.sub(rewardAmount);\r\n        if (swapConfig.useRewardOsPlus) {\r\n            swapConfig.rewardOsPlusAddress.addRewardList(_user, rewardAmount, poolIdConfig.rewardPlusPoolId);\r\n        }\r\n        allrewardList[_pid][_user] = allrewardList[_pid][_user].add(userAmount);\r\n        if (cot.balanceOf(address(this)) < _allAmount) {\r\n            return;\r\n        }\r\n        uint256 halfAmount = _allAmount.mul(50).div(100);\r\n        uint256 anotherHalfAmount = _allAmount.sub(halfAmount);\r\n\r\n        (uint256[] memory amounts) = swapConfig.routerAddress.swapExactTokensForTokens(halfAmount, 0, swapConfig.swapErc20Path, address(this), block.timestamp);\r\n        (,,uint256 lpAmount) = swapConfig.routerAddress.addLiquidity(address(swapConfig.usdtToken), address(cot), amounts[1], anotherHalfAmount, 0, 0, address(this), block.timestamp);\r\n        \r\n        uint256 userLpAmount = lpAmount.mul(swapConfig.rewardOsPlusAddress.userRate()).div(100);\r\n        uint256 rewardLpAmount = lpAmount.sub(userLpAmount);\r\n        swapConfig.farmAddress.depositByProxy(_user, poolIdConfig.autoFarmPoolId, rewardLpAmount);\r\n        if (swapConfig.useRewardOsPlus && referer != address(0)) {\r\n            swapConfig.farmAddress.depositByProxy(referer, poolIdConfig.autoFarmPoolId, userLpAmount);\r\n        } else {\r\n            swapConfig.pairAddress.safeTransfer(address(1), userLpAmount);\r\n        }\r\n    }\r\n\r\n    function sendreward(privateItem memory x, uint256 _pid, IERC20 rewardToken, address _user, uint256 allAmount) private {\r\n        uint256 rewardAmount = allAmount.mul(x.refererrate).div(100);\r\n        uint256 leftAmount = allAmount.sub(rewardAmount);\r\n        allrewardList[_pid][_user] = allrewardList[_pid][_user].add(leftAmount);\r\n        safeTokenTransfer(rewardToken, _user, leftAmount);\r\n        if (swapConfig.useRewardOsPlus) {\r\n            if (x.referer == address(0)) {\r\n                safeTokenTransfer(rewardToken, address(1), rewardAmount);\r\n            } else {\r\n                uint256 rewardAmountForUser = rewardAmount.mul(swapConfig.rewardOsPlusAddress.userRate()).div(100);\r\n                uint256 rewardAmountForReferer = rewardAmount.sub(rewardAmountForUser);\r\n                safeTokenTransfer(rewardToken, _user, rewardAmountForUser);\r\n                safeTokenTransfer(rewardToken, x.referer, rewardAmountForReferer);\r\n            }\r\n            if (rewardToken == cot) {\r\n                swapConfig.rewardOsPlusAddress.addRewardList(msg.sender, rewardAmount, poolIdConfig.rewardPlusPoolId);\r\n            }\r\n        } else {\r\n            safeTokenTransfer(rewardToken, address(1), rewardAmount);\r\n        }\r\n    }\r\n\r\n    function _getReward(uint256 _pid, address _user) private {\r\n        updatePool(_pid);\r\n        PoolInfoItem storage pool = poolInfo[_pid];\r\n        IERC20 rewardToken = pool.tokensList.rewardToken;\r\n        address referer;\r\n        if (address(swapConfig.rewardOsPlusAddress) == address(0)) {\r\n            referer = address(0);\r\n        } else {\r\n           referer =  swapConfig.rewardOsPlusAddress.refererAddressList(msg.sender);\r\n        }\r\n        privateItem memory x = privateItem(pool.statusList.limitGetRewardTime, pool.poolConfigList.reward_stock_length, referer, pool.poolConfigList.refererrate, last_getreward_time[_pid][_user]);\r\n        if (x.getreward_time == 0) {\r\n            x.getreward_time = staking_time[_pid][_user];\r\n        }\r\n\r\n        if (x.limitGetRewardTime) {\r\n            if (!useWhiteList) {\r\n                require(block.timestamp > x.getreward_time.add(x.reward_stock_length), \"e007\");\r\n            } else {\r\n                if (!white_list[_user]) {\r\n                    require(block.timestamp > x.getreward_time.add(x.reward_stock_length), \"e008\");\r\n                }\r\n            }\r\n        }\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n            pending_list[_pid][_user] = pending_list[_pid][_user].add(pending);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.poolConfigList.accCakePerShare).div(1e12);\r\n        if (pending_list[_pid][_user] > 0) {\r\n            uint256 allAmount = pending_list[_pid][_user];\r\n            if (!swapConfig.useAutoFarm) {\r\n                sendreward(x, _pid, rewardToken, _user, allAmount);\r\n            } else {\r\n                swapAndDepositFarm(_pid, _user, allAmount);\r\n            }\r\n            pending_list[_pid][_user] = 0;\r\n        }\r\n        last_getreward_time[_pid][_user] = block.timestamp;\r\n    }\r\n\r\n    function getReward(uint256 _pid) external nonReentrant {\r\n        _getReward(_pid, msg.sender);\r\n    }\r\n\r\n    function massGetReward() external nonReentrant {\r\n        address _user = msg.sender;\r\n        for (uint256 _pid = 0; _pid < poolLength; _pid++) {\r\n            if (userInfo[_pid][_user].amount > 0 || pending_list[_pid][_user] > 0) {\r\n                _getReward(_pid, msg.sender);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getErc20Token(IERC20 _token, uint256 _amount) external onlyOwner {\r\n        safeTokenTransfer(_token, msg.sender, _amount);\r\n    }\r\n\r\n    function safeTokenTransfer(IERC20 _rewardToekn, address _to, uint256 _amount) internal {\r\n        uint256 cakeBalance = _rewardToekn.balanceOf(address(this));\r\n        if (_amount > cakeBalance) {\r\n            _rewardToekn.transfer(_to, cakeBalance);\r\n        } else {\r\n            _rewardToekn.transfer(_to, _amount);\r\n        }\r\n        emit safeCakeTransferEvent(_rewardToekn, _to, _amount, cakeBalance);\r\n    }\r\n\r\n    function getInfoForUser(uint256 _pid, address _user) public view returns (getInfoForUserItem memory getInfoForUserInfo) {\r\n        getInfoForUserInfo.poolinfo = poolInfo[_pid];\r\n        getInfoForUserInfo.userinfo = userInfo[_pid][_user];\r\n        getInfoForUserInfo.cot = cot;\r\n        getInfoForUserInfo.useRewardOsPlus = swapConfig.useRewardOsPlus;\r\n        getInfoForUserInfo.rewardOsPlusAddress = swapConfig.rewardOsPlusAddress;\r\n        getInfoForUserInfo.unlockTime = unlock_time[_pid][_user];\r\n        getInfoForUserInfo.stakingTime = staking_time[_pid][_user];\r\n        getInfoForUserInfo.getRewardTime = last_getreward_time[_pid][_user];\r\n        getInfoForUserInfo.pendingAmount = pending_list[_pid][_user];\r\n        uint256 pending = pendingCake(_pid, _user);\r\n        getInfoForUserInfo.pendingCake = pending;\r\n        getInfoForUserInfo.allPendingReward = pending_list[_pid][_user].add(pending);\r\n        getInfoForUserInfo.stakingNumAll = stakingNumForPool[_pid];\r\n        getInfoForUserInfo.allreward = allrewardList[_pid][_user];\r\n        getInfoForUserInfo.lpBalance = poolInfo[_pid].tokensList.stakingNftToken.balanceOf(_user);\r\n        getInfoForUserInfo.tokenIdList = userStakingTokenIdListSet[_pid][_user].values();\r\n        getInfoForUserInfo.useWhiteList = useWhiteList;\r\n        getInfoForUserInfo.isInWhiteList = white_list[_user];\r\n    }\r\n\r\n    function MassGetInfoForUser(address _user) external view returns (getInfoForUserItem[] memory getInfoForUserInfoList) {\r\n        getInfoForUserInfoList = new getInfoForUserItem[](poolLength);\r\n        for (uint256 i = 0; i < poolLength; i++) {\r\n            getInfoForUserInfoList[i] = getInfoForUser(i, _user);\r\n        }\r\n    }\r\n\r\n    function getUserStakingTokenForPoolIdListSet(IERC721Enumerable _stakingNftToken, address _user) external view returns (uint256[] memory, uint256) {\r\n        return (userStakingTokenIdListAllSet[_stakingNftToken][_user].values(), userStakingTokenIdListAllSet[_stakingNftToken][_user].length());\r\n    }\r\n\r\n    function getConfig() external view returns (poolIdStructItem memory poolIdConfig_, swapItem memory swapConfig_) {\r\n        poolIdConfig_ = poolIdConfig;\r\n        swapConfig_ = swapConfig;\r\n    }\r\n\r\n    function isContract(address _address) public view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_address)\r\n        }\r\n        return size > 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cakeBalance\",\"type\":\"uint256\"}],\"name\":\"safeCakeTransferEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"MassGetInfoForUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"stakingNftToken\",\"type\":\"address\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo0\",\"name\":\"tokensList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"useMintMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitGetRewardTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pool_status\",\"type\":\"bool\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo1\",\"name\":\"statusList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo2\",\"name\":\"poolConfigList\",\"type\":\"tuple\"}],\"internalType\":\"struct nftStakingPoolV2.PoolInfoItem\",\"name\":\"poolinfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct nftStakingPoolV2.UserInfo\",\"name\":\"userinfo\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"cot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useRewardOsPlus\",\"type\":\"bool\"},{\"internalType\":\"contract rewardOsPlus\",\"name\":\"rewardOsPlusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingCake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allPendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingNumAll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"useWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInWhiteList\",\"type\":\"bool\"}],\"internalType\":\"struct nftStakingPoolV2.getInfoForUserItem[]\",\"name\":\"getInfoForUserInfoList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_stakingNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useMintMode\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allrewardList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cot\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPlusPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoFarmPoolId\",\"type\":\"uint256\"}],\"internalType\":\"struct nftStakingPoolV2.poolIdStructItem\",\"name\":\"poolIdConfig_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract swapRouter\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapErc20Path\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"useAutoFarm\",\"type\":\"bool\"},{\"internalType\":\"contract MasterChefForErc20\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useRewardOsPlus\",\"type\":\"bool\"},{\"internalType\":\"contract rewardOsPlus\",\"name\":\"rewardOsPlusAddress\",\"type\":\"address\"}],\"internalType\":\"struct nftStakingPoolV2.swapItem\",\"name\":\"swapConfig_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getErc20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getInfoForUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"stakingNftToken\",\"type\":\"address\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo0\",\"name\":\"tokensList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"useMintMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitGetRewardTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pool_status\",\"type\":\"bool\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo1\",\"name\":\"statusList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo2\",\"name\":\"poolConfigList\",\"type\":\"tuple\"}],\"internalType\":\"struct nftStakingPoolV2.PoolInfoItem\",\"name\":\"poolinfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct nftStakingPoolV2.UserInfo\",\"name\":\"userinfo\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"cot\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useRewardOsPlus\",\"type\":\"bool\"},{\"internalType\":\"contract rewardOsPlus\",\"name\":\"rewardOsPlusAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingCake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allPendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingNumAll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allreward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"useWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isInWhiteList\",\"type\":\"bool\"}],\"internalType\":\"struct nftStakingPoolV2.getInfoForUserItem\",\"name\":\"getInfoForUserInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_stakingNftToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakingTokenForPoolIdListSet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_getreward_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massGetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pending_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIdConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPlusPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"autoFarmPoolId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"stakingNftToken\",\"type\":\"address\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo0\",\"name\":\"tokensList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"useMintMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitGetRewardTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"pool_status\",\"type\":\"bool\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo1\",\"name\":\"statusList\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staking_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward_stock_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct nftStakingPoolV2.poolInfo2\",\"name\":\"poolConfigList\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address_list\",\"type\":\"address[]\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setApprovedForSwapAndFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_cot\",\"type\":\"address\"}],\"name\":\"setCot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPlusPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoFarmPoolId\",\"type\":\"uint256\"}],\"name\":\"setPoolIdConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_limitGetRewardTime\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_reward_stock_length\",\"type\":\"uint256\"}],\"name\":\"setPoolLimitGetRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_staking_stock_length\",\"type\":\"uint256\"}],\"name\":\"setPoolLimitWithdrawTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolRewardTokenAndRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_pool_status\",\"type\":\"bool\"}],\"name\":\"setPoolStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolTimeLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract swapRouter\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_swapErc20Path\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_useAutoFarm\",\"type\":\"bool\"},{\"internalType\":\"contract MasterChefForErc20\",\"name\":\"_farmAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useRewardOsPlus\",\"type\":\"bool\"},{\"internalType\":\"contract rewardOsPlus\",\"name\":\"_rewardOsPlusAddress\",\"type\":\"address\"}],\"name\":\"setSwapConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useAutoFarm\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_useRewardOsPlus\",\"type\":\"bool\"}],\"name\":\"setUseAutoFarmAndUseRewardPuls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useWhiteList\",\"type\":\"bool\"}],\"name\":\"setUseWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address_list\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingNftOlderOwnerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingNumForPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staking_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapConfig\",\"outputs\":[{\"internalType\":\"contract swapRouter\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useAutoFarm\",\"type\":\"bool\"},{\"internalType\":\"contract MasterChefForErc20\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useRewardOsPlus\",\"type\":\"bool\"},{\"internalType\":\"contract rewardOsPlus\",\"name\":\"rewardOsPlusAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlock_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"white_list\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "nftStakingPoolV2", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://72e6447d80b4fe840f31cd27b6d37e96f19e98e2fcef0f520fc465d03889f300"}