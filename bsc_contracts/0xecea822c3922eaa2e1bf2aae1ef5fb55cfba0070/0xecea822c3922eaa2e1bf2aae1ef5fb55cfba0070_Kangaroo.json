{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7; // solhint-disable-line\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address who) external view returns (uint256 balance);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool trans1);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool trans);\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        returns (bool hello);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Kangaroo {\r\n    //uint256 EGGS_PER_MINERS_PER_SECOND=1;\r\n    address KROO = 0x6E1e697168fA4C43bf8f5D8872443eFc4CfF0799;\r\n    uint256 public KROO_TO_MINE_1MINERS = 3888000; //for final version should be seconds in a day\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public initialized = false;\r\n    address public ceoAddress;\r\n    address public ceoAddress2;\r\n    mapping(address => uint256) public hatcheryMiners;\r\n    mapping(address => uint256) public claimedKROO;\r\n    mapping(address => uint256) public lastMined;\r\n    mapping(address => address) public referrals;\r\n    mapping(address => uint256) public userInvested;\r\n    mapping(address => uint256) public latestInvestmentTime;\r\n    mapping(address => uint256) public extractedReward;\r\n\r\n    uint256 public marketKROO;\r\n\r\n    constructor() public {\r\n        ceoAddress = msg.sender;\r\n        ceoAddress2 = address(0x7456cECA4fBE88329d1A1D2a06c0B5cce6B0e4D6);\r\n    }\r\n\r\n    function mineKROO(address ref) public {\r\n        require(initialized);\r\n        if (ref == msg.sender) {\r\n            ref = address(0);\r\n        }\r\n        if (\r\n            referrals[msg.sender] == address(0) &&\r\n            referrals[msg.sender] != msg.sender\r\n        ) {\r\n            referrals[msg.sender] = ref;\r\n        }\r\n        uint256 minersUsed = getMiners();\r\n        uint256 newMiners = SafeMath.div(minersUsed, KROO_TO_MINE_1MINERS);\r\n        hatcheryMiners[msg.sender] = SafeMath.add(\r\n            hatcheryMiners[msg.sender],\r\n            newMiners\r\n        );\r\n        claimedKROO[msg.sender] = 0;\r\n        lastMined[msg.sender] = block.timestamp;\r\n\r\n        //send referral eggs\r\n        claimedKROO[referrals[msg.sender]] = SafeMath.add(\r\n            claimedKROO[referrals[msg.sender]],\r\n            SafeMath.div(minersUsed, 3)\r\n        );\r\n\r\n        //boost market to nerf miners hoarding\r\n        marketKROO = SafeMath.add(marketKROO, SafeMath.div(minersUsed, 5));\r\n    }\r\n\r\n    function sellMiners() public {\r\n        require(initialized);\r\n        uint256 hasMiners = getMiners();\r\n        require(hasMiners > 0, \"You dont have any eggs\");\r\n        uint256 minerValue = calculateMinerSell(hasMiners);\r\n        require(minerValue > 0, \"Egg has no value\");\r\n        require(\r\n            (extractedReward[msg.sender] + minerValue) <=\r\n                (SafeMath.div(userInvested[msg.sender], 2) +\r\n                    userInvested[msg.sender]),\r\n            \"You cant extract more then 50% of profit\"\r\n        );\r\n        uint256 fee = devFee(minerValue);\r\n        uint256 fee2 = fee / 2;\r\n        claimedKROO[msg.sender] = 0;\r\n        lastMined[msg.sender] = block.timestamp;\r\n        extractedReward[msg.sender] = SafeMath.add(\r\n            extractedReward[msg.sender],\r\n            minerValue\r\n        );\r\n        latestInvestmentTime[msg.sender] = block.timestamp;\r\n        marketKROO = SafeMath.add(marketKROO, hasMiners);\r\n        ERC20(KROO).transfer(ceoAddress, fee2);\r\n        ERC20(KROO).transfer(ceoAddress2, fee - fee2);\r\n        ERC20(KROO).transfer(\r\n            address(msg.sender),\r\n            SafeMath.sub(minerValue, fee)\r\n        );\r\n    }\r\n\r\n    function buyMiners(address ref, uint256 amount) public {\r\n        require(initialized);\r\n        userInvested[msg.sender] = SafeMath.add(\r\n            userInvested[msg.sender],\r\n            amount\r\n        );\r\n        latestInvestmentTime[msg.sender] = block.timestamp;\r\n        ERC20(KROO).transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 balance = ERC20(KROO).balanceOf(address(this));\r\n        uint256 minersBought = calculateMinerBuy(\r\n            amount,\r\n            SafeMath.sub(balance, amount)\r\n        );\r\n        minersBought = SafeMath.sub(minersBought, devFee(minersBought));\r\n        uint256 fee = devFee(amount);\r\n        uint256 fee2 = fee / 2;\r\n        ERC20(KROO).transfer(ceoAddress, fee2);\r\n        ERC20(KROO).transfer(ceoAddress2, fee - fee2);\r\n        claimedKROO[msg.sender] = SafeMath.add(\r\n            claimedKROO[msg.sender],\r\n            minersBought\r\n        );\r\n        mineKROO(ref);\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) public view returns (uint256) {\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(\r\n                    PSNH,\r\n                    SafeMath.div(\r\n                        SafeMath.add(\r\n                            SafeMath.mul(PSN, rs),\r\n                            SafeMath.mul(PSNH, rt)\r\n                        ),\r\n                        rt\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function calculateMinerSell(uint256 miners) public view returns (uint256) {\r\n        return\r\n            calculateTrade(\r\n                miners,\r\n                marketKROO,\r\n                ERC20(KROO).balanceOf(address(this))\r\n            );\r\n    }\r\n\r\n    function calculateMinerBuy(uint256 eth, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eth, contractBalance, marketKROO);\r\n    }\r\n\r\n    function calculateMinerBuySimple(uint256 eth)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateMinerBuy(eth, ERC20(KROO).balanceOf(address(this)));\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 3), 100);\r\n    }\r\n\r\n    function seedMarket(uint256 amount) public {\r\n        ERC20(KROO).transferFrom(address(msg.sender), address(this), amount);\r\n        require(marketKROO == 0);\r\n        initialized = true;\r\n        marketKROO = 388800000000;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return ERC20(KROO).balanceOf(address(this));\r\n    }\r\n\r\n    function getMyMiners() public view returns (uint256) {\r\n        return hatcheryMiners[msg.sender];\r\n    }\r\n\r\n    function getMiners() public view returns (uint256) {\r\n        return\r\n            SafeMath.add(\r\n                claimedKROO[msg.sender],\r\n                getMinersSincelastMined(msg.sender)\r\n            );\r\n    }\r\n\r\n    function getMinersSincelastMined(address adr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 secondsPassed = min(\r\n            KROO_TO_MINE_1MINERS,\r\n            SafeMath.sub(block.timestamp, lastMined[adr])\r\n        );\r\n        return SafeMath.mul(secondsPassed, hatcheryMiners[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"KROO_TO_MINE_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyMiners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateMinerBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateMinerBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"}],\"name\":\"calculateMinerSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedKROO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"extractedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMinersSincelastMined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestInvestmentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketKROO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"mineKROO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMiners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Kangaroo", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d5c839f260b2c632261c8e90f194b25c2f599af425fc293693c3bdb09e0ee974"}