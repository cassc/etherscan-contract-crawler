{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/PaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/finance/PaymentSplitter.sol\\\";\\n\\ncontract Payments is PaymentSplitter {\\n  constructor(address[] memory _payees, uint256[] memory _shares) payable PaymentSplitter(_payees, _shares) {}\\n}\\n\"\r\n    },\r\n    \"./contracts/Card.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IJUNK.sol\\\";\\nimport \\\"./interfaces/ICard.sol\\\";\\nimport \\\"./interfaces/IHarvester.sol\\\";\\n\\ncontract Card is ICard, AccessControl, ReentrancyGuard {\\n  /** CONSTANTS **/\\n\\n  bytes32 public constant DAO = keccak256(\\\"DAO\\\");\\n  bytes32 public constant HARVESTER = keccak256(\\\"Harvester\\\");\\n\\n  // Maximum number of cards an account can own. Here to prevent gas block limit issues\\n  uint256 public constant MAXIMUM_JUNK_PER_ACCOUNT = 100;\\n\\n  // Minimum and maximum lengths of a card name\\n  uint256 public constant MINIMUM_CARD_NAME_LENGTH = 1;\\n  uint256 public constant MAXIMUM_CARD_NAME_LENGTH = 50;\\n\\n  /** SEMI-CONSTANTS **/\\n\\n  address public junk;\\n  address public harvester;\\n  uint256 public cardPrice;\\n  uint256 public cardInterval;\\n  uint256 public cardRewardPerPeriod;\\n  bool public isCardCreationPaused;\\n  bool public isCashoutPaused;\\n\\n  // Fuel\\n  // When fuel is empty, need to spend refuelCost tokens to reset the fuel to fuelCapacity\\n  uint256 public refuelCost;\\n  uint256 public fuelCapacity = 10;\\n\\n  /** VARIABLES **/\\n\\n  address[] public holders;\\n  mapping(address => uint256) public holderIndex;\\n  uint256 public numberOfHolders = 0;\\n  mapping(address => CardEntity[]) public cardsOfUser;\\n  uint256 public override totalCardsCreated = 0;\\n  mapping(address => uint256) public fuel;\\n\\n  /** EVENTS **/\\n\\n  event CardEntityCreated(address account, string cardName, uint256 creationTime);\\n  event CardEntityTransferred(address sender, address recipient, uint256 cardIndex, uint256 transferTime);\\n  event CardEntityDeleted(address account, uint256 cardIndex, uint256 deletionTime);\\n  event CardClaimed(address account, uint256 amount, uint256 claimTime);\\n\\n  /** CONSTRUCTOR **/\\n\\n  constructor(CardConstructor memory _cardConstructor) {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    grantRole(DAO, msg.sender);\\n    grantRole(HARVESTER, _cardConstructor._harvester);\\n\\n    junk = _cardConstructor._junk;\\n    harvester = _cardConstructor._harvester;\\n    cardPrice = _cardConstructor._cardPrice;\\n    cardInterval = _cardConstructor._cardInterval;\\n    cardRewardPerPeriod = _cardConstructor._cardRewardPerPeriod;\\n    refuelCost = _cardConstructor._refuelCost;\\n  }\\n\\n  /** MAIN METHODS ***/\\n\\n  receive() external payable {}\\n\\n  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens\\n  function createCardWithTokens(\\n    address _account,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external virtual override onlyRole(HARVESTER) {\\n    require(cardPrice > 0, \\\"Cannot create a card with a card price of 0\\\");\\n    require(!isCardCreationPaused, \\\"Card creation is paused until further notice\\\");\\n\\n    // Transfer tokens and swap if needed\\n    _processCardsTokensFromCardCreation(_account, cardPrice, false, _args); // isRefuel: false\\n\\n    // Create the card\\n    _createCard(_account, _cardName, _args);\\n  }\\n\\n  // This function is called when a card is created by fusing other cards. Does nothing unless overriden\\n  function createCardFromFusion(\\n    address,\\n    string calldata,\\n    bytes32[] calldata\\n  ) external virtual override onlyRole(HARVESTER) {\\n    revert(\\\"This type of card cannot be obtained through fusion\\\");\\n  }\\n\\n  // Claims rewards from all cards\\n  function cashoutAll(address _account) external virtual override onlyRole(HARVESTER) {\\n    // Iterate over memory data\\n    CardEntity[] memory cardsArray = cardsOfUser[_account];\\n    uint256 rewardAvailable = 0;\\n    for (uint256 i = 0; i < cardsArray.length; i++) {\\n      if (block.timestamp - cardsArray[i].lastClaimTime > cardInterval) {\\n        rewardAvailable += _calcCardRewardAvailable(_account, cardsArray[i]);\\n        // Update storage data\\n        cardsOfUser[_account][i].lastClaimTime = _getNewLastClaimTime(_account, cardsArray[i].lastClaimTime);\\n      }\\n    }\\n\\n    if (rewardAvailable > 0) _cashout(_account, rewardAvailable);\\n  }\\n\\n  // Claims rewards from one card\\n  function cashoutCard(address _account, uint256 _cardIndex) external virtual override onlyRole(HARVESTER) {\\n    CardEntity storage card = cardsOfUser[_account][_cardIndex];\\n\\n    uint256 rewardAvailable = _getCardRewardAvailable(_account, cardsOfUser[_account][_cardIndex]);\\n    require(rewardAvailable > 0, \\\"Nothing to cash out\\\");\\n\\n    // Update storage data\\n    card.lastClaimTime = _getNewLastClaimTime(_account, card.lastClaimTime);\\n\\n    _cashout(_account, rewardAvailable);\\n  }\\n\\n  // Refill fuel to allow next cashouts\\n  function refuel(address _account, bytes32[] memory _args) external virtual override onlyRole(HARVESTER) {\\n    // Transfer tokens and swap if needed\\n    _processCardsTokensFromCardCreation(_account, refuelCost, true, _args); // isRefuel: true\\n\\n    // Refill\\n    fuel[_account] = fuelCapacity;\\n  }\\n\\n  // Transfers a card to another address\\n  function transferCard(\\n    address _sender,\\n    address _recipient,\\n    uint256 _cardIndex\\n  ) external virtual override onlyRole(HARVESTER) {\\n    _transferCard(_sender, _recipient, _cardIndex);\\n  }\\n\\n  // Deletes a card\\n  function deleteCard(address _account, uint256 _cardIndex) external virtual override onlyRole(HARVESTER) {\\n    _deleteCard(_account, _cardIndex);\\n  }\\n\\n  // Deletes the last card of an account\\n  function deleteLastCard(address _account) external virtual override onlyRole(HARVESTER) {\\n    _deleteLastCard(_account);\\n  }\\n\\n  /** INTERNAL METHODS **/\\n\\n  // Peforms a safety check, then returns the amount of rewards available for a card\\n  function _getCardRewardAvailable(address _account, CardEntity memory _card) internal view virtual returns (uint256) {\\n    if (block.timestamp - _card.lastClaimTime > cardInterval) {\\n      return _calcCardRewardAvailable(_account, _card);\\n    }\\n    return 0;\\n  }\\n\\n  // Returns the amount of rewards available for a card\\n  function _calcCardRewardAvailable(address _account, CardEntity memory _card) internal view virtual returns (uint256) {\\n    require(cardInterval > 0, \\\"The card interval of this card type is 0\\\");\\n\\n    // Get reward divider\\n    uint256 divider = IHarvester(harvester).divideRewardsForUser(_account);\\n    if (divider == 0) divider = 100;\\n\\n    // If rewards accumulate for this user\\n    if (IHarvester(harvester).rewardsAccumulateForUser(_account)) {\\n      // ((now - last claim time) / interval) * reward per period\\n      return (((block.timestamp - _card.lastClaimTime) / cardInterval) * cardRewardPerPeriod * 100) / divider;\\n    }\\n\\n    // If rewards do not accumulate for this user (default)\\n    return (cardRewardPerPeriod * 100) / divider;\\n  }\\n\\n  // Creates a card. Must be called by functions that do important security checks\\n  function _createCard(\\n    address _account,\\n    string memory _cardName,\\n    bytes32[] memory // This will be used for custom card types\\n  ) internal virtual {\\n    require(cardsOfUser[_account].length < MAXIMUM_JUNK_PER_ACCOUNT, \\\"Maximum number of cards reached for this account\\\");\\n\\n    uint256 cardNameLength = bytes(_cardName).length;\\n\\n    require(cardNameLength >= MINIMUM_CARD_NAME_LENGTH && cardNameLength <= MAXIMUM_CARD_NAME_LENGTH, \\\"Card name length is invalid\\\");\\n\\n    // If this is the first card the user creates, add them to the list of holders\\n    if (cardsOfUser[_account].length == 0) {\\n      holderIndex[_account] = holders.length;\\n      holders.push(_account);\\n      numberOfHolders++;\\n    }\\n\\n    // Create the card in storage\\n    cardsOfUser[_account].push(CardEntity({cardName: _cardName, creationTime: block.timestamp, lastClaimTime: block.timestamp - cardInterval}));\\n    totalCardsCreated++;\\n\\n    // Refuel\\n    fuel[_account] = fuelCapacity;\\n\\n    emit CardEntityCreated(_account, _cardName, block.timestamp);\\n  }\\n\\n  // Handles a transfer of \\\"_amount\\\" JUNK tokens to the contract when creating a card, collects fees and swaps to BNB if appropriate\\n  function _processCardsTokensFromCardCreation(\\n    address _account,\\n    uint256 _amount,\\n    bool,\\n    bytes32[] memory // This will be used for custom card types\\n  ) internal virtual {\\n    // Safety checks\\n    require(IERC20(junk).balanceOf(_account) >= _amount, \\\"JUNK balance too low\\\");\\n    require(_amount > 0, \\\"Cannot transfer 0 JUNK tokens\\\");\\n\\n    // Transfer JUNK tokens from \\\"_account\\\" to the Harvester contract\\n    // This is done so the user does not have to approve this contract to spend their JUNK tokens\\n    IHarvester(harvester).initiateJUNKTransfer(_account, harvester, _amount);\\n  }\\n\\n  // Processes a cashout and handles related fees\\n  function _cashout(address _account, uint256 _amount) internal virtual {\\n    require(!isCashoutPaused, \\\"Cashouts are paused until further notice\\\");\\n    require(_amount > 0, \\\"Cannot cashout 0 JUNK\\\");\\n    require(fuel[_account] > 0, \\\"Out of fuel\\\");\\n\\n    // Lower fuel\\n    fuel[_account]--;\\n\\n    // Mark the tokens as claimed\\n    IJUNK(junk).setClaimedTokens(_account, IJUNK(junk).claimedTokens(_account) + _amount);\\n\\n    // Transfer the JUNK tokens to the user\\n    IERC20(junk).transferFrom(harvester, _account, _amount);\\n\\n    emit CardClaimed(_account, _amount, block.timestamp);\\n  }\\n\\n  // Calculates the new last claim time to set when claiming rewards\\n  function _getNewLastClaimTime(address _account, uint256 _currentLastClaim) internal virtual returns (uint256) {\\n    // If rewards accumulate for this user\\n    if (IHarvester(harvester).rewardsAccumulateForUser(_account)) {\\n      return block.timestamp - ((block.timestamp - _currentLastClaim) % cardInterval);\\n    }\\n\\n    // If rewards do not accumulate for this user (default)\\n    return block.timestamp;\\n  }\\n\\n  // Transfers a card\\n  function _transferCard(\\n    address _sender,\\n    address _recipient,\\n    uint256 _cardIndex\\n  ) internal virtual {\\n    require(_sender != _recipient, \\\"Sender and recipient are the same address\\\");\\n\\n    // If this is the first card the user acquires, add them to the list of holders\\n    if (cardsOfUser[_recipient].length == 0) {\\n      holderIndex[_recipient] = holders.length;\\n      holders.push(_recipient);\\n      numberOfHolders++;\\n    }\\n\\n    CardEntity memory cardToDelete = cardsOfUser[_sender][_cardIndex];\\n\\n    // Delete the card for the sender\\n    _deleteCard(_sender, _cardIndex);\\n\\n    // Create a new card for the recipient\\n    cardsOfUser[_recipient].push(cardToDelete);\\n    totalCardsCreated++;\\n\\n    emit CardEntityCreated(_recipient, cardToDelete.cardName, block.timestamp);\\n    emit CardEntityTransferred(_sender, _recipient, _cardIndex, block.timestamp);\\n    // CardEntityDeleted is emitted in _deleteCard()\\n  }\\n\\n  // Deletes a card\\n  function _deleteCard(address _account, uint256 _cardIndex) internal virtual {\\n    require(cardsOfUser[_account].length > _cardIndex, \\\"No card to delete\\\");\\n\\n    cardsOfUser[_account][_cardIndex] = cardsOfUser[_account][cardsOfUser[_account].length - 1];\\n\\n    totalCardsCreated--;\\n\\n    cardsOfUser[_account].pop();\\n\\n    // If this was the last card of the user, remove them from the list of holders\\n    if (cardsOfUser[_account].length == 0) {\\n      address lastHolder = holders[holders.length - 1];\\n      uint256 indexOfHolderToDelete = holderIndex[_account];\\n\\n      holders[indexOfHolderToDelete] = lastHolder;\\n      holderIndex[lastHolder] = indexOfHolderToDelete;\\n      holderIndex[_account] = 0;\\n\\n      holders.pop();\\n      numberOfHolders--;\\n    }\\n\\n    emit CardEntityDeleted(_account, _cardIndex, block.timestamp);\\n  }\\n\\n  // Deletes the last card of an account\\n  function _deleteLastCard(address _account) internal virtual {\\n    require(cardsOfUser[_account].length > 0, \\\"No card to delete\\\");\\n\\n    totalCardsCreated--;\\n\\n    cardsOfUser[_account].pop();\\n\\n    // If this was the last card of the user, remove them from the list of holders\\n    if (cardsOfUser[_account].length == 0) {\\n      address lastHolder = holders[holders.length - 1];\\n      uint256 indexOfHolderToDelete = holderIndex[_account];\\n\\n      holders[indexOfHolderToDelete] = lastHolder;\\n      holderIndex[lastHolder] = indexOfHolderToDelete;\\n      holderIndex[_account] = 0;\\n\\n      holders.pop();\\n      numberOfHolders--;\\n    }\\n\\n    emit CardEntityDeleted(_account, cardsOfUser[_account].length, block.timestamp);\\n  }\\n\\n  /** VIEW METHODS **/\\n\\n  // Returns the amount of cards of an user\\n  function getAmountOfCardsOfUser(address _account) external view returns (uint256) {\\n    return cardsOfUser[_account].length;\\n  }\\n\\n  // Returns the amount of rewards available for a given account (all cards combined)\\n  function getAccountRewardAvailable(address _account) external view override returns (uint256) {\\n    CardEntity[] memory cardsArray = cardsOfUser[_account];\\n    uint256 rewardAvailable = 0;\\n    for (uint256 i = 0; i < cardsArray.length; i++) {\\n      if (block.timestamp - cardsArray[i].lastClaimTime > cardInterval) {\\n        rewardAvailable += _calcCardRewardAvailable(_account, cardsArray[i]);\\n      }\\n    }\\n    return rewardAvailable;\\n  }\\n\\n  // Returns the amount of rewards available for a given account (for each card)\\n  function getAccountRewardAvailableAsArray(address _account) external view override returns (uint256[] memory) {\\n    CardEntity[] memory cardsArray = cardsOfUser[_account];\\n    uint256 numberOfCards = cardsArray.length;\\n    uint256[] memory rewardsAvailable = new uint256[](numberOfCards);\\n\\n    for (uint256 i = 0; i < numberOfCards; i++) {\\n      if (block.timestamp - cardsArray[i].lastClaimTime > cardInterval) {\\n        rewardsAvailable[i] = _calcCardRewardAvailable(_account, cardsArray[i]);\\n      } else {\\n        rewardsAvailable[i] = 0;\\n      }\\n    }\\n    return rewardsAvailable;\\n  }\\n\\n  // Returns the amount of rewards available for a given account and a given card index\\n  function getCardRewardAvailable(address _account, uint256 _cardIndex) external view override returns (uint256) {\\n    return _getCardRewardAvailable(_account, cardsOfUser[_account][_cardIndex]);\\n  }\\n\\n  // Returns the card that corresponds to a particular account and card index\\n  function getCard(address _account, uint256 _cardIndex) external view override returns (CardEntity memory) {\\n    return cardsOfUser[_account][_cardIndex];\\n  }\\n\\n  // Returns the amount of cards an account has\\n  function getCardCount(address _account) external view override returns (uint256) {\\n    return cardsOfUser[_account].length;\\n  }\\n\\n  // Returns the names of all the cards of an account\\n  function getAccountCardNames(address _account) external view override returns (string[] memory) {\\n    CardEntity[] memory cardsArray = cardsOfUser[_account];\\n    uint256 numberOfCards = cardsArray.length;\\n    string[] memory cardNames = new string[](numberOfCards);\\n\\n    for (uint256 i = 0; i < numberOfCards; i++) {\\n      cardNames[i] = cardsArray[i].cardName;\\n    }\\n\\n    return cardNames;\\n  }\\n\\n  // Returns the card name that corresponds to a particular account and card index\\n  function getCardName(address _account, uint256 _cardIndex) external view override returns (string memory) {\\n    return cardsOfUser[_account][_cardIndex].cardName;\\n  }\\n\\n  // Returns the creation times of all the cards of an account\\n  function getAccountCreationTimes(address _account) external view override returns (uint256[] memory) {\\n    CardEntity[] memory cardsArray = cardsOfUser[_account];\\n    uint256 numberOfCards = cardsArray.length;\\n    uint256[] memory creationTimes = new uint256[](numberOfCards);\\n\\n    for (uint256 i = 0; i < numberOfCards; i++) {\\n      creationTimes[i] = cardsArray[i].creationTime;\\n    }\\n\\n    return creationTimes;\\n  }\\n\\n  // Returns the creation time that corresponds to a particular account and card index\\n  function getCardCreationTime(address _account, uint256 _cardIndex) external view override returns (uint256) {\\n    return cardsOfUser[_account][_cardIndex].creationTime;\\n  }\\n\\n  // Returns the last claiming times of all the cards of an account\\n  function getAccountLastClaimTimes(address _account) external view override returns (uint256[] memory) {\\n    CardEntity[] memory cardsArray = cardsOfUser[_account];\\n    uint256 numberOfCards = cardsArray.length;\\n    uint256[] memory lastClaimTimes = new uint256[](numberOfCards);\\n\\n    for (uint256 i = 0; i < numberOfCards; i++) {\\n      lastClaimTimes[i] = cardsArray[i].lastClaimTime;\\n    }\\n\\n    return lastClaimTimes;\\n  }\\n\\n  // Returns the last claiming time that corresponds to a particular account and card index\\n  function getCardLastClaimTime(address _account, uint256 _cardIndex) external view override returns (uint256) {\\n    return cardsOfUser[_account][_cardIndex].lastClaimTime;\\n  }\\n\\n  /** DAO METHODS **/\\n\\n  // Directly create a card for an account. Called via the harvester\\n  function createCardDao(\\n    address _account,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external override onlyRole(HARVESTER) {\\n    _createCard(_account, _cardName, _args);\\n  }\\n\\n  // Transfers a card to another address\\n  function transferCardDao(\\n    address _sender,\\n    address _recipient,\\n    uint256 _cardIndex\\n  ) external virtual onlyRole(DAO) {\\n    _transferCard(_sender, _recipient, _cardIndex);\\n  }\\n\\n  // Deletes a card\\n  function deleteCardDao(address _account, uint256 _cardIndex) external virtual onlyRole(DAO) {\\n    _deleteCard(_account, _cardIndex);\\n  }\\n\\n  // Deletes the last card of an account\\n  function deleteLastCardDao(address _account) external virtual onlyRole(DAO) {\\n    _deleteLastCard(_account);\\n  }\\n\\n  // Withdraw BNB from the contract\\n  function withdraw(uint256 _amount) external virtual onlyRole(DAO) {\\n    payable(msg.sender).transfer(_amount);\\n  }\\n\\n  // Withdraw ERC20 from the contract\\n  function withdrawERC20(address _erc20, uint256 _amount) external virtual onlyRole(DAO) {\\n    IERC20(_erc20).transfer(msg.sender, _amount);\\n  }\\n\\n  /** SETTERS **/\\n\\n  function setJunkToken(address _junk) external virtual onlyRole(DAO) {\\n    junk = _junk;\\n  }\\n\\n  function setHarvester(address _harvester) external virtual onlyRole(DAO) {\\n    revokeRole(HARVESTER, harvester);\\n    grantRole(HARVESTER, _harvester);\\n    harvester = _harvester;\\n  }\\n\\n  function setCardPrice(uint256 _cardPrice) external virtual onlyRole(DAO) {\\n    cardPrice = _cardPrice;\\n  }\\n\\n  function setCardInterval(uint256 _cardInterval) external virtual onlyRole(DAO) {\\n    cardInterval = _cardInterval;\\n  }\\n\\n  function setCardRewardPerPeriod(uint256 _cardRewardPerPeriod) external virtual onlyRole(DAO) {\\n    cardRewardPerPeriod = _cardRewardPerPeriod;\\n  }\\n\\n  function setIsCardCreationPaused(bool _isCardCreationPaused) external virtual onlyRole(DAO) {\\n    isCardCreationPaused = _isCardCreationPaused;\\n  }\\n\\n  function setIsCashoutPaused(bool _isCashoutPaused) external virtual onlyRole(DAO) {\\n    isCashoutPaused = _isCashoutPaused;\\n  }\\n\\n  function setRefuelCost(uint256 _refuelCost) external virtual onlyRole(DAO) {\\n    refuelCost = _refuelCost;\\n  }\\n\\n  function setFuelCapacity(uint256 _fuelCapacity) external virtual onlyRole(DAO) {\\n    fuelCapacity = _fuelCapacity;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IJUNK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IJUNK {\\n  function claimedTokens(address _account) external view returns (uint256);\\n\\n  function setClaimedTokens(address _account, uint256 _amount) external;\\n\\n  function grantCardRole(address _card) external;\\n\\n  function revokeCardRole(address _card) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/ICard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ICard {\\n  struct CardEntity {\\n    string cardName;\\n    uint256 creationTime;\\n    uint256 lastClaimTime;\\n  }\\n\\n  // Here to avoid stack too deep errors\\n  struct CardConstructor {\\n    address _junk;\\n    address _harvester;\\n    uint256 _cardPrice;\\n    uint256 _cardInterval;\\n    uint256 _cardRewardPerPeriod;\\n    uint256 _refuelCost;\\n  }\\n\\n  function totalCardsCreated() external view returns (uint256);\\n\\n  function createCardWithTokens(\\n    address _account,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external;\\n\\n  function createCardFromFusion(\\n    address _account,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external;\\n\\n  function createCardDao(\\n    address _account,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external;\\n\\n  function cashoutAll(address _account) external;\\n\\n  function cashoutCard(address _account, uint256 _cardIndex) external;\\n\\n  function refuel(address _account, bytes32[] memory _args) external;\\n\\n  function transferCard(\\n    address _oldAccount,\\n    address _newAccount,\\n    uint256 _cardIndex\\n  ) external;\\n\\n  function deleteCard(address _account, uint256 _cardIndex) external;\\n\\n  function deleteLastCard(address _account) external;\\n\\n  function getAccountRewardAvailable(address _account) external view returns (uint256);\\n\\n  function getAccountRewardAvailableAsArray(address _account) external view returns (uint256[] memory);\\n\\n  function getCardRewardAvailable(address _account, uint256 _cardIndex) external view returns (uint256);\\n\\n  function getCard(address _account, uint256 _cardIndex) external view returns (CardEntity memory);\\n\\n  function getCardCount(address _account) external view returns (uint256);\\n\\n  function getAccountCardNames(address _account) external view returns (string[] memory);\\n\\n  function getCardName(address _account, uint256 _cardIndex) external view returns (string memory);\\n\\n  function getAccountCreationTimes(address _account) external view returns (uint256[] memory);\\n\\n  function getCardCreationTime(address _account, uint256 _cardIndex) external view returns (uint256);\\n\\n  function getAccountLastClaimTimes(address _account) external view returns (uint256[] memory);\\n\\n  function getCardLastClaimTime(address _account, uint256 _cardIndex) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IHarvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./ICard.sol\\\";\\n\\ninterface IHarvester {\\n  function cardTypes(uint256 _index) external returns (ICard);\\n\\n  function numberOfCardsByTypeByUser(address _account, uint256 _cardType) external view returns (uint256);\\n\\n  function rewardsAccumulateForUser(address _account) external view returns (bool);\\n  function divideRewardsForUser(address _account) external view returns (uint256);\\n\\n  function initiateJUNKTransfer(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) external;\\n\\n  function setRewardsAccumulateForUser(address _account, bool _rewardsAccumulate) external;\\n\\n  function setDivideRewardsForUser(address _account, uint256 _divider) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/JUNK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IJUNK.sol\\\";\\n\\ncontract JUNK is IJUNK, ERC20, AccessControl, ReentrancyGuard {\\n  /** CONSTANTS **/\\n\\n  bytes32 public constant DAO = keccak256(\\\"DAO\\\");\\n  bytes32 public constant HARVESTER = keccak256(\\\"Harvester\\\");\\n  bytes32 public constant CARD = keccak256(\\\"Card\\\");\\n\\n  /** SEMI-CONSTANTS **/\\n\\n  IUniswapV2Router02 public pancakeRouter;\\n  address public harvester;\\n\\n  address public dao;\\n  uint256 public initialSupply = 20_000_000e18;\\n  address public pancakeJunkBnbPair;\\n  address payable private feeSafe; // The safe that stores the BNB made from the fees\\n  uint256 public minimumSafeFeeBalanceToSwap = 100e18; // JUNK balance required to perform a swap\\n  uint256 public minimumLiquidityFeeBalanceToSwap = 100e18; // JUNK balance required to add liquidity\\n  bool public swapEnabled = true;\\n\\n  // Buying and selling fees\\n  uint256 public buyingFee = 0; // (/1000)\\n  uint256 public sellingFeeClaimed = 100; // (/1000)\\n  uint256 public sellingFeeNonClaimed = 500; // (/1000)\\n\\n  // Part (/1000) of the fees that will be sent to the safe fee. The rest will be sent to the liquidity fee\\n  uint256 public safeFeePercentage = 900;\\n  // Not needed because safeFeePercentage + liquidityFeePercentage = 1000\\n  // uint256 public liquidityFeePercentage = 100;\\n\\n  /** VARIABLES **/\\n\\n  mapping(address => bool) private _blacklist;\\n  mapping(address => bool) private _exemptFromFees;\\n  mapping(address => uint256) public override claimedTokens;\\n  mapping(address => bool) public automatedMarketMakerPairs;\\n\\n  uint256 public safeFeeBalance = 0; // JUNK balance accumulated from fee safe fees\\n  uint256 public liquidityFeeBalance = 0; // JUNK balance accumulated from liquidity fees\\n\\n  // Swapping booleans. Here to avoid having two swaps in the same block\\n  bool private swapping = false;\\n  bool private swapLiquify = false;\\n\\n  /** EVENTS **/\\n\\n  event SwappedSafeFeeBalance(uint256 amount);\\n  event AddedLiquidity(uint256 junkAmount, uint256 bnbAmount);\\n\\n  /** CONSTRUCTOR **/\\n\\n  constructor(address _pancakeRouter, address payable _feeSafe) ERC20(\\\"HumanJunk\\\", \\\"JUNK\\\") {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    grantRole(DAO, msg.sender);\\n\\n    feeSafe = _feeSafe;\\n    _mint(msg.sender, initialSupply);\\n    pancakeRouter = IUniswapV2Router02(_pancakeRouter);\\n    pancakeJunkBnbPair = IUniswapV2Factory(pancakeRouter.factory()).createPair(\\n      address(this),\\n      pancakeRouter.WETH()\\n    );\\n\\n    // Exempt some addresses from fees\\n    _exemptFromFees[msg.sender] = true;\\n    _exemptFromFees[address(this)] = true;\\n    _exemptFromFees[address(0)] = true;\\n\\n    _setAutomatedMarketMakerPair(address(pancakeJunkBnbPair), true);\\n  }\\n\\n  /** MAIN METHODS **/\\n\\n  receive() external payable {}\\n\\n  // Transfers claimed tokens from an address to another, allowing the recipient to sell without exposing themselves to high fees\\n  function transferClaimedTokens(address _recipient, uint256 _amount) external nonReentrant {\\n    // Safety checks\\n    _beforeTokenTransfer(msg.sender, _recipient, _amount);\\n    require(claimedTokens[msg.sender] >= _amount, \\\"Not enough claimed tokens to send\\\");\\n    require(!automatedMarketMakerPairs[_recipient], \\\"Cannot transfer claimed tokens to an AMM pair\\\");\\n\\n    // Transfer the claimed tokens\\n    claimedTokens[msg.sender] -= _amount;\\n    claimedTokens[_recipient] += _amount;\\n    _transfer(msg.sender, _recipient, _amount);\\n  }\\n\\n  /** INTERNAL METHODS **/\\n\\n  // Overrides ERC20 to implement the blacklist\\n  function _beforeTokenTransfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal virtual override(ERC20) {\\n    require(!isBlacklisted(_from), \\\"Token transfer refused. Sender is blacklisted\\\");\\n    require(!isBlacklisted(_to), \\\"Token transfer refused. Recipient is blacklisted\\\");\\n    super._beforeTokenTransfer(_from, _to, _amount);\\n  }\\n\\n  // Transfers JUNK from _from to _to, collects relevant fees, and performs a swap if needed\\n  function _transfer(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) internal override {\\n    require(_from != address(0), \\\"Cannot transfer from the zero address\\\");\\n    require(_amount > 0, \\\"Cannot transfer 0 tokens\\\");\\n    uint256 fees = 0;\\n\\n    // Only take fees on buys / sells, do not take on wallet transfers\\n    if (!_exemptFromFees[_from] && !_exemptFromFees[_to]) {\\n      // On sell\\n      if (automatedMarketMakerPairs[_to]) {\\n        // Calculate fees, distinguishing between claimed tokens and non-claimed tokens\\n        uint256 claimedTokensToSell = (_amount <= claimedTokens[_from]) ? _amount : claimedTokens[_from];\\n        uint256 nonClaimedTokensToSell = _amount - claimedTokensToSell;\\n\\n        if (sellingFeeClaimed > 0) fees += (claimedTokensToSell * sellingFeeClaimed) / 1000;\\n        if (sellingFeeNonClaimed > 0) fees += (nonClaimedTokensToSell * sellingFeeNonClaimed) / 1000;\\n\\n        // Update the value of \\\"claimedTokens\\\" for this account\\n        claimedTokens[_from] -= claimedTokensToSell;\\n      }\\n      // On buy\\n      else if (automatedMarketMakerPairs[_from] && buyingFee > 0) {\\n        fees = (_amount * buyingFee) / 1000;\\n      }\\n\\n      // Send fees to the JUNK contract\\n      if (fees > 0) {\\n        // Send the JUNK tokens to the contract\\n        super._transfer(_from, address(this), fees);\\n\\n        // Keep track of the JUNK tokens that were sent\\n        uint256 safeFees = (fees * safeFeePercentage) / 1000;\\n        safeFeeBalance += safeFees;\\n        liquidityFeeBalance += fees - safeFees;\\n      }\\n\\n      _amount -= fees;\\n    }\\n\\n    // Swapping logic\\n    if (swapEnabled) {\\n      // If the one of the fee balances is above a certain amount, swap it for BNB and transfer it to the fee safe\\n      // Do not do both in one transaction\\n      if (!swapping && !swapLiquify && safeFeeBalance > minimumSafeFeeBalanceToSwap) {\\n        // Forbid swapping safe fees\\n        swapping = true;\\n\\n        // Perform the swap\\n        _swapSafeFeeBalance();\\n\\n        // Allow swapping again\\n        swapping = false;\\n      } else if (!swapping && !swapLiquify && liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap) {\\n        // Forbid swapping liquidity fees\\n        swapLiquify = true;\\n\\n        // Perform the swap\\n        _liquify();\\n\\n        // Allow swapping again\\n        swapLiquify = false;\\n      }\\n    }\\n\\n    super._transfer(_from, _to, _amount);\\n  }\\n\\n  // Swaps safe fee balance for BNB and sends it to the fee safe\\n  function _swapSafeFeeBalance() internal {\\n    require(safeFeeBalance > minimumSafeFeeBalanceToSwap, \\\"Not enough JUNK tokens to swap for safe fee\\\");\\n\\n    uint256 oldBalance = address(this).balance;\\n\\n    // Swap\\n    _swapJunkForBnb(safeFeeBalance);\\n\\n    // Update safeFeeBalance\\n    safeFeeBalance = 0;\\n\\n    // Send BNB to fee safe\\n    uint256 toSend = address(this).balance - oldBalance;\\n    feeSafe.transfer(toSend);\\n\\n    emit SwappedSafeFeeBalance(toSend);\\n  }\\n\\n  // Swaps \\\"_junkAmount\\\" JUNK for BNB\\n  function _swapJunkForBnb(uint256 _junkAmount) internal {\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = pancakeRouter.WETH();\\n\\n    _approve(address(this), address(pancakeRouter), _junkAmount);\\n\\n    pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      _junkAmount,\\n      0, // accept any amount of BNB\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  // Swaps liquidity fee balance for BNB and adds it to the JUNK / BNB pool\\n  function _liquify() internal {\\n    require(\\n      liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap,\\n      \\\"Not enough JUNK tokens to swap for adding liquidity\\\"\\n    );\\n\\n    uint256 oldBalance = address(this).balance;\\n\\n    // Sell half of the JUNK for BNB\\n    uint256 lowerHalf = liquidityFeeBalance / 2;\\n    uint256 upperHalf = liquidityFeeBalance - lowerHalf;\\n\\n    // Swap\\n    _swapJunkForBnb(lowerHalf);\\n\\n    // Update liquidityFeeBalance\\n    liquidityFeeBalance = 0;\\n\\n    // Add liquidity\\n    _addLiquidity(upperHalf, address(this).balance - oldBalance);\\n  }\\n\\n  // Adds liquidity to the JUNK / BNB pair on Pancakeswap\\n  function _addLiquidity(uint256 _junkAmount, uint256 _bnbAmount) internal {\\n    // Approve token transfer to cover all possible scenarios\\n    _approve(address(this), address(pancakeRouter), _junkAmount);\\n\\n    // Add the liquidity\\n    pancakeRouter.addLiquidityETH{value: _bnbAmount}(\\n      address(this),\\n      _junkAmount,\\n      0, // Slippage is unavoidable\\n      0, // Slippage is unavoidable\\n      address(0),\\n      block.timestamp\\n    );\\n\\n    emit AddedLiquidity(_junkAmount, _bnbAmount);\\n  }\\n\\n  // Marks an address as an automated market pair / removes that mark\\n  function _setAutomatedMarketMakerPair(address _pair, bool _value) internal {\\n    automatedMarketMakerPairs[_pair] = _value;\\n  }\\n\\n  /** VIEW METHODS **/\\n\\n  // Returns true if \\\"_user\\\" is blacklisted, false instead\\n  function isBlacklisted(address _user) public view returns (bool) {\\n    return _blacklist[_user];\\n  }\\n\\n  /** DAO METHODS **/\\n\\n  // Mint new JUNK tokens to the given address\\n  function mintDAO(address _to, uint256 _amount) public onlyRole(DAO) {\\n    _mint(_to, _amount);\\n  }\\n\\n  // Burns JUNK tokens from a given address\\n  function burnDAO(address _from, uint256 _amount) public onlyRole(DAO) {\\n    _burn(_from, _amount);\\n  }\\n\\n  // Withdraws an amount of BNB stored on the contract\\n  function withdrawDAO(uint256 _amount) external onlyRole(DAO) {\\n    payable(msg.sender).transfer(_amount);\\n  }\\n\\n  // Withdraws an amount of ERC20 tokens stored on the contract\\n  function withdrawERC20DAO(address _erc20, uint256 _amount) external onlyRole(DAO) {\\n    IERC20(_erc20).transfer(msg.sender, _amount);\\n  }\\n\\n  // Manually swaps the safe fees\\n  function manualSafeFeeSwapDAO() external onlyRole(DAO) {\\n    // Forbid swapping safe fees\\n    swapping = true;\\n\\n    // Perform the swap\\n    _swapSafeFeeBalance();\\n\\n    // Allow swapping again\\n    swapping = false;\\n  }\\n\\n  // Manually adds liquidity\\n  function manualLiquifyDAO() external onlyRole(DAO) {\\n    // Forbid swapping liquidity fees\\n    swapLiquify = true;\\n\\n    // Perform the swap\\n    _liquify();\\n\\n    // Allow swapping again\\n    swapLiquify = false;\\n  }\\n\\n  // Gives the CARD role to an address so it can call the \\\"setClaimedTokens()\\\" method\\n  function grantCardRoleDAO(address _card) external onlyRole(DAO) {\\n    grantRole(CARD, _card);\\n\\n    // Exempt from fees\\n    _exemptFromFees[_card] = true;\\n  }\\n\\n  // Removes the CARD role from an address so it cannot call the \\\"setClaimedTokens()\\\" method\\n  function revokeCardRoleDAO(address _card) external onlyRole(DAO) {\\n    revokeRole(CARD, _card);\\n\\n    // Revoke exemption from fees\\n    _exemptFromFees[_card] = false;\\n  }\\n\\n  /** HARVESTER METHODS **/\\n\\n  // Gives the CARD role to an address so it can call the \\\"setClaimedTokens()\\\" method\\n  function grantCardRole(address _card) external override onlyRole(HARVESTER) {\\n    grantRole(CARD, _card);\\n\\n    // Exempt from fees\\n    _exemptFromFees[_card] = true;\\n  }\\n\\n  // Removes the CARD role from an address so it cannot call the \\\"setClaimedTokens()\\\" method\\n  function revokeCardRole(address _card) external override onlyRole(HARVESTER) {\\n    revokeRole(CARD, _card);\\n  }\\n\\n  /** SETTERS **/\\n\\n  function changeDAO(address _dao) external onlyRole(DAO) {\\n    revokeRole(DAO, dao);\\n    grantRole(DAO, _dao);\\n    dao = _dao;\\n  }\\n\\n  function revokeDAO(address _DaoToRevoke) external onlyRole(DAO) {\\n    revokeRole(DAO, _DaoToRevoke);\\n  }\\n\\n  function blacklistDAO(address _user, bool _state) external onlyRole(DAO) {\\n    _blacklist[_user] = _state;\\n  }\\n\\n  function setFeeSafeDAO(address payable _feeSafe) external onlyRole(DAO) {\\n    feeSafe = _feeSafe;\\n  }\\n\\n  function setAutomatedMarketMakerPairDAO(address _pair, bool _value) external onlyRole(DAO) {\\n    require(\\n      _pair != pancakeJunkBnbPair,\\n      \\\"The JUNK / BNB pair cannot be removed from automatedMarketMakerPairs\\\"\\n    );\\n    _setAutomatedMarketMakerPair(_pair, _value);\\n  }\\n\\n  function excludeFromFeesDAO(address _account, bool _state) external onlyRole(DAO) {\\n    _exemptFromFees[_account] = _state;\\n  }\\n\\n  function setMinimumSafeFeeBalanceToSwapDAO(uint256 _minimumSafeFeeBalanceToSwap) external onlyRole(DAO) {\\n    minimumSafeFeeBalanceToSwap = _minimumSafeFeeBalanceToSwap;\\n  }\\n\\n  function setMinimumLiquidityFeeBalanceToSwapDAO(uint256 _minimumLiquidityFeeBalanceToSwap)\\n    external\\n    onlyRole(DAO)\\n  {\\n    minimumLiquidityFeeBalanceToSwap = _minimumLiquidityFeeBalanceToSwap;\\n  }\\n\\n  function enableSwappingDAO() external onlyRole(DAO) {\\n    swapEnabled = true;\\n  }\\n\\n  function stopSwappingDAO() external onlyRole(DAO) {\\n    swapEnabled = false;\\n  }\\n\\n  function setBuyingFeeDAO(uint256 _buyingFee) external onlyRole(DAO) {\\n    buyingFee = _buyingFee;\\n  }\\n\\n  function setSellingFeeClaimedDAO(uint256 _sellingFeeClaimed) external onlyRole(DAO) {\\n    sellingFeeClaimed = _sellingFeeClaimed;\\n  }\\n\\n  function setSellingFeeNonClaimedDAO(uint256 _sellingFeeNonClaimed) external onlyRole(DAO) {\\n    sellingFeeNonClaimed = _sellingFeeNonClaimed;\\n  }\\n\\n  function setSafeFeePercentageDAO(uint256 _safeFeePercentage) external onlyRole(DAO) {\\n    safeFeePercentage = _safeFeePercentage;\\n  }\\n\\n  function setHarvesterDAO(address _harvester) external onlyRole(DAO) {\\n    revokeRole(HARVESTER, harvester);\\n    revokeRole(DEFAULT_ADMIN_ROLE, harvester);\\n    grantRole(HARVESTER, _harvester);\\n    grantRole(DEFAULT_ADMIN_ROLE, _harvester);\\n\\n    harvester = _harvester;\\n  }\\n\\n  function setClaimedTokens(address _account, uint256 _amount) external override onlyRole(CARD) {\\n    claimedTokens[_account] = _amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Uniswap V2\\npragma solidity 0.8.4;\\n\\ninterface IUniswapV2Router02 {\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n}\\n\"\r\n    },\r\n    \"./contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Uniswap V2\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/AutomationCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./OnePerAccountNoRewardCard.sol\\\";\\n\\n// This card cannot be transferred, but can be deleted as it is necessary if you want to stop automatizing your rewards\\n// This card implements fees\\n// Only one AutomationCard should be held at a time\\n\\ncontract AutomationCard is OnePerAccountNoRewardCard {\\n  uint256[] public otherAutomationCardsIndexes;\\n  uint256 public divider; // /100\\n\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe,\\n    uint256 _divider // /100\\n  )\\n    OnePerAccountNoRewardCard(\\n      _cardConstructor,\\n      _pancakeRouter,\\n      _feeSafe\\n    )\\n  {\\n    divider = _divider; // /100\\n  }\\n\\n  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens\\n  function _createCard(\\n    address _account,\\n    string memory _cardName,\\n    bytes32[] memory _args\\n  ) internal override onlyRole(HARVESTER) {\\n    // The user can only join one team at a time\\n    for (uint256 i = 0; i < otherAutomationCardsIndexes.length; i++) {\\n      require(\\n        IHarvester(harvester).numberOfCardsByTypeByUser(_account, otherAutomationCardsIndexes[i]) == 0,\\n        \\\"You can only have one automation card\\\"\\n      );\\n    }\\n\\n    // Enable the automation\\n    IHarvester(harvester).setRewardsAccumulateForUser(_account, true);\\n    IHarvester(harvester).setDivideRewardsForUser(_account, divider);\\n\\n    super._createCard(_account, _cardName, _args);\\n  }\\n\\n  // Transfers a card\\n  function _transferCard(\\n    address,\\n    address,\\n    uint256\\n  ) internal pure override {\\n    revert(\\\"This card cannot be transferred\\\");\\n  }\\n\\n  // Deletes a card\\n  function _deleteCard(address _account, uint256 _cardIndex) internal override {\\n    // Disable the automation\\n    _disableAutomation(_account);\\n\\n    super._deleteCard(_account, _cardIndex);\\n  }\\n\\n  // Deletes the last card of an account\\n  function _deleteLastCard(address _account) internal override {\\n    // Disable the automation\\n    _disableAutomation(_account);\\n\\n    super._deleteLastCard(_account);\\n  }\\n\\n  // Disables the automation for an account\\n  function _disableAutomation(address _account) internal {\\n    IHarvester(harvester).setRewardsAccumulateForUser(_account, false);\\n    IHarvester(harvester).setDivideRewardsForUser(_account, 0);\\n  }\\n\\n  function setOtherAutomationCardsIndexes(uint256[] calldata _otherAutomationCardsIndexes)\\n    external\\n    onlyRole(DAO)\\n  {\\n    otherAutomationCardsIndexes = _otherAutomationCardsIndexes;\\n  }\\n\\n  function setDivider(uint256 _divider) external onlyRole(DAO) {\\n    divider = _divider;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/OnePerAccountNoRewardCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./NoRewardCard.sol\\\";\\n\\n//import hardhat console.log\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n// An account can only have one card of this type\\n// This card does not yield any rewards\\n// This card implements fees\\n\\ncontract OnePerAccountNoRewardCard is NoRewardCard {\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe\\n  ) NoRewardCard(_cardConstructor, _pancakeRouter, _feeSafe) {}\\n\\n  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens\\n  function _createCard(\\n    address _account,\\n    string memory _cardName,\\n    bytes32[] memory _args\\n  ) internal virtual override onlyRole(HARVESTER) {\\n    require(cardsOfUser[_account].length == 0, \\\"You already have a card of this type\\\");\\n\\n    super._createCard(_account, _cardName, _args);\\n  }\\n\\n  // Transfers a card\\n  function _transferCard(\\n    address _sender,\\n    address _recipient,\\n    uint256 _cardIndex\\n  ) internal virtual override {\\n    require(cardsOfUser[_recipient].length == 0, \\\"The recipient already has a card of this type\\\");\\n\\n    super._transferCard(_sender, _recipient, _cardIndex);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/NoRewardCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./CardWithFees.sol\\\";\\n\\n// This card does not yield any rewards\\n// This card implements fees\\n\\ncontract NoRewardCard is CardWithFees {\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe\\n  ) CardWithFees(_cardConstructor, _pancakeRouter, _feeSafe) {}\\n\\n  // Processes a cashout and handles related fees\\n  function _cashout(address, uint256) internal virtual override {\\n    revert(\\\"This card does not yield any rewards\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/CardWithFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../Card.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../interfaces/IJUNK.sol\\\";\\nimport \\\"../interfaces/IHarvester.sol\\\";\\n\\ncontract CardWithFees is Card {\\n  /** SEMI-CONSTANTS **/\\n\\n  IUniswapV2Router02 public pancakeRouter;\\n  mapping(address => bool) private _exemptFromFees;\\n  address payable private feeSafe; // The safe that stores the BNB made from the fees\\n\\n  // Fees\\n  uint256 public createCardFee = 625; // Fee collected when creating a card (/1000)\\n  uint256 public liquidityFee = 200; // Fee used when creating a card to add liquidity in the JUNK / BNB pool (/1000)\\n  uint256 public cashoutFee = 100; // Fee collected when cashing out JUNK tokens from cards (/1000)\\n  uint256 public refuelFee = 1000; // Percentage of the refueling cost that goes to the marketing wallet\\n\\n  uint256 public minimumCardCreationFeeBalanceToSwap = 1e18; // JUNK balance required to perform a swap\\n  uint256 public minimumLiquidityFeeBalanceToSwap = 1e18; // JUNK balance required to add liquidity\\n\\n  // Swapping booleans. Here to avoid having two swaps in the same block\\n  bool private swapping = false;\\n  bool private swapLiquify = false;\\n\\n  /** VARIABLES **/\\n\\n  uint256 public cardCreationFeeBalance = 0; // JUNK balance accumulated from card creation fees + cashout fees\\n  uint256 public liquidityFeeBalance = 0; // JUNK balance accumulated from liquidity fees\\n\\n  /** EVENTS **/\\n\\n  event SwappedCardCreationFeeBalance(uint256 amount);\\n  event AddedLiquidity(uint256 cardsAmount, uint256 bnbAmount);\\n\\n  /** CONSTRUCTOR **/\\n\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe\\n  ) Card(_cardConstructor) {\\n    feeSafe = _feeSafe;\\n    pancakeRouter = IUniswapV2Router02(_pancakeRouter);\\n    _exemptFromFees[msg.sender] = true;\\n  }\\n\\n  /** INTERNAL METHODS **/\\n\\n  // Handles a transfer of \\\"_amount\\\" JUNK to the contract when creating a card, collects fees and swaps to BNB if appropriate\\n  function _processCardsTokensFromCardCreation(\\n    address _account,\\n    uint256 _amount,\\n    bool _isRefuel,\\n    bytes32[] memory // This will be used for custom card types\\n  ) internal virtual override {\\n    // Safety checks\\n    require(IERC20(junk).balanceOf(_account) >= _amount, \\\"JUNK balance too low\\\");\\n    require(_amount > 0, \\\"Cannot transfer 0 JUNK tokens\\\");\\n\\n    uint256 createCardAmount = (_amount * (_isRefuel ? refuelFee : createCardFee)) / 1000;\\n    uint256 liquidityFeeAmount = _isRefuel ? 0 : (_amount * liquidityFee) / 1000;\\n    uint256 feeAmount = createCardAmount + liquidityFeeAmount;\\n    uint256 harvesterAmount = _amount - feeAmount;\\n\\n    // Card creation fee\\n    cardCreationFeeBalance += createCardAmount;\\n\\n    // Liquidity fee\\n    liquidityFeeBalance += liquidityFeeAmount;\\n\\n    // Transfer feeAmount JUNK tokens from \\\"_account\\\" to this address\\n    if (feeAmount > 0) IHarvester(harvester).initiateJUNKTransfer(_account, address(this), feeAmount);\\n\\n    // Transfer the remaining JUNK tokens from \\\"_account\\\" to the Harvester contract\\n    if (harvesterAmount > 0) IHarvester(harvester).initiateJUNKTransfer(_account, harvester, harvesterAmount);\\n\\n    // If the one of the fee balances is above a certain amount, swap it for BNB and transfer it to the fee safe\\n    // Do not do both in one transaction\\n    if (!swapping && !swapLiquify && cardCreationFeeBalance > minimumCardCreationFeeBalanceToSwap) {\\n      // Forbid swapping card creation fees\\n      swapping = true;\\n\\n      // Perform the swap\\n      _swapCardCreationFeeBalance();\\n\\n      // Allow swapping again\\n      swapping = false;\\n    } else if (!swapping && !swapLiquify && liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap) {\\n      // Forbid swapping liquidity fees\\n      swapLiquify = true;\\n\\n      // Perform the swap\\n      _liquify();\\n\\n      // Allow swapping again\\n      swapLiquify = false;\\n    }\\n  }\\n\\n  // Swaps \\\"_amount\\\" JUNK tokens for BNB\\n  function _swapJunkForBnb(uint256 _junkAmount) internal virtual {\\n    address[] memory path = new address[](2);\\n    path[0] = address(junk);\\n    path[1] = pancakeRouter.WETH();\\n\\n    IERC20(junk).approve(address(pancakeRouter), _junkAmount);\\n\\n    pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      _junkAmount,\\n      0, // accept any amount of BNB\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  // Processes a cashout and handles related fees\\n  function _cashout(address _account, uint256 _amount) internal virtual override {\\n    require(!isCashoutPaused, \\\"Cashouts are paused until further notice\\\");\\n    require(_amount > 0, \\\"Cannot cashout 0 JUNK\\\");\\n    require(fuel[_account] > 0, \\\"Out of fuel\\\");\\n\\n    // Lower fuel\\n    fuel[_account]--;\\n\\n    if (_exemptFromFees[_account]) {\\n      // Transfer the JUNK tokens to the user\\n      IERC20(junk).transferFrom(harvester, _account, _amount);\\n    } else {\\n      // Cashout fee\\n      uint256 fee = (_amount * cashoutFee) / 1000;\\n\\n      // Transfer the cashout fee to this address\\n      IHarvester(harvester).initiateJUNKTransfer(_account, address(this), fee);\\n      cardCreationFeeBalance += fee;\\n\\n      // If the fee balance is above a certain amount, swap it for BNB and transfer it to the fee safe\\n      if (cardCreationFeeBalance > minimumCardCreationFeeBalanceToSwap) _swapCardCreationFeeBalance();\\n\\n      uint256 amountAfterFee = _amount - fee;\\n\\n      // Mark the tokens as claimed\\n      IJUNK(junk).setClaimedTokens(_account, IJUNK(junk).claimedTokens(_account) + amountAfterFee);\\n\\n      // Transfer the JUNK tokens to the user\\n      IERC20(junk).transferFrom(harvester, _account, amountAfterFee);\\n    }\\n\\n    emit CardClaimed(_account, _amount, block.timestamp);\\n  }\\n\\n  // Adds liquidity to the JUNK / BNB pair on Pancakeswap\\n  function _addLiquidity(uint256 _junkAmount, uint256 _bnbAmount) internal virtual {\\n    // Approve token transfer to cover all possible scenarios\\n    IERC20(junk).approve(address(pancakeRouter), _junkAmount);\\n\\n    // Add the liquidity\\n    pancakeRouter.addLiquidityETH{value: _bnbAmount}(\\n      address(junk),\\n      _junkAmount,\\n      0, // Slippage is unavoidable\\n      0, // Slippage is unavoidable\\n      address(0),\\n      block.timestamp\\n    );\\n\\n    emit AddedLiquidity(_junkAmount, _bnbAmount);\\n  }\\n\\n  // Swaps card creation fee balance for BNB and sends it to the fee safe\\n  function _swapCardCreationFeeBalance() internal virtual {\\n    require(cardCreationFeeBalance > minimumCardCreationFeeBalanceToSwap, \\\"Not enough JUNK tokens to swap for card creation fee\\\");\\n\\n    uint256 oldBalance = address(this).balance;\\n\\n    // Swap\\n    _swapJunkForBnb(cardCreationFeeBalance);\\n\\n    // Update cardCreationFeeBalance\\n    cardCreationFeeBalance = 0;\\n\\n    // Send BNB to fee safe\\n    uint256 toSend = address(this).balance - oldBalance;\\n    feeSafe.transfer(toSend);\\n\\n    emit SwappedCardCreationFeeBalance(toSend);\\n  }\\n\\n  // Swaps liquidity fee balance for BNB and adds it to the JUNK / BNB pool\\n  function _liquify() internal virtual {\\n    require(liquidityFeeBalance > minimumLiquidityFeeBalanceToSwap, \\\"Not enough JUNK tokens to swap for adding liquidity\\\");\\n\\n    uint256 oldBalance = address(this).balance;\\n\\n    // Sell half of the JUNK for BNB\\n    uint256 lowerHalf = liquidityFeeBalance / 2;\\n    uint256 upperHalf = liquidityFeeBalance - lowerHalf;\\n\\n    // Swap\\n    _swapJunkForBnb(lowerHalf);\\n\\n    // Update liquidityFeeBalance\\n    liquidityFeeBalance = 0;\\n\\n    // Add liquidity\\n    _addLiquidity(upperHalf, address(this).balance - oldBalance);\\n  }\\n\\n  /** DAO METHODS **/\\n\\n  // Exempt an address from fees\\n  function exemptAddressFromFees(address _address) external virtual onlyRole(DAO) {\\n    _exemptFromFees[_address] = true;\\n  }\\n\\n  // Include an address in fees\\n  function includeAddressInFees(address _address) external virtual onlyRole(DAO) {\\n    _exemptFromFees[_address] = false;\\n  }\\n\\n  // Manually swaps the card creation fees\\n  function manualCardCreationSwap() external virtual onlyRole(DAO) {\\n    // Forbid swapping card creation fees\\n    swapping = true;\\n\\n    // Perform the swap\\n    _swapCardCreationFeeBalance();\\n\\n    // Allow swapping again\\n    swapping = false;\\n  }\\n\\n  // Manually adds liquidity\\n  function manualLiquify() external virtual onlyRole(DAO) {\\n    // Forbid swapping liquidity fees\\n    swapLiquify = true;\\n\\n    // Perform the swap\\n    _liquify();\\n\\n    // Allow swapping again\\n    swapLiquify = false;\\n  }\\n\\n  /** SETTERS **/\\n\\n  function setPancakeRouter(address _pancakeRouter) external virtual onlyRole(DAO) {\\n    pancakeRouter = IUniswapV2Router02(_pancakeRouter);\\n  }\\n\\n  function setFeeSafe(address payable _feeSafe) external virtual onlyRole(DAO) {\\n    feeSafe = _feeSafe;\\n  }\\n\\n  function setMinimumCardCreationFeeBalanceToSwap(uint256 _minimumCardCreationFeeBalanceToSwap) external virtual onlyRole(DAO) {\\n    minimumCardCreationFeeBalanceToSwap = _minimumCardCreationFeeBalanceToSwap;\\n  }\\n\\n  function setMinimumLiquidityFeeBalanceToSwap(uint256 _minimumLiquidityFeeBalanceToSwap) external virtual onlyRole(DAO) {\\n    minimumLiquidityFeeBalanceToSwap = _minimumLiquidityFeeBalanceToSwap;\\n  }\\n\\n  function setCreateCardFee(uint256 _createCardFee) external virtual onlyRole(DAO) {\\n    createCardFee = _createCardFee;\\n  }\\n\\n  function setLiquidityFee(uint256 _liquidityFee) external virtual onlyRole(DAO) {\\n    liquidityFee = _liquidityFee;\\n  }\\n\\n  function setCashoutFee(uint256 _cashoutFee) external virtual onlyRole(DAO) {\\n    cashoutFee = _cashoutFee;\\n  }\\n\\n  function setRefuelFee(uint256 _refuelFee) external virtual onlyRole(DAO) {\\n    refuelFee = _refuelFee;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/EmptyTerrainCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./CardWithFees.sol\\\";\\n\\n// This card cannot be transferred, but can be deleted as it is necessary when combining cards\\n// This card implements fees\\n// This card can only be created once per account\\n\\ncontract EmptyTerrainCard is CardWithFees {\\n  mapping(address => bool) public hasMinted;\\n\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe\\n  ) CardWithFees(_cardConstructor, _pancakeRouter, _feeSafe) {}\\n\\n   function _createCard(\\n    address _account,\\n    string memory _cardName,\\n    bytes32[] memory _args // This will be used for custom card types\\n  ) internal override {\\n    require(!hasMinted[_account], \\\"This account has already minted an empty terrain card\\\");\\n    hasMinted[_account] = true;\\n\\n    super._createCard(_account, _cardName, _args);\\n  }\\n\\n  // Transfers a card\\n  function _transferCard(\\n    address,\\n    address,\\n    uint256\\n  ) internal pure override {\\n    revert(\\\"This card cannot be transferred\\\");\\n  }\\n\\n  // Change the name of your terrain\\n  function _changeName(string calldata _cardName) external {\\n    uint256 cardNameLength = bytes(_cardName).length;\\n    require(\\n      cardNameLength >= MINIMUM_CARD_NAME_LENGTH && cardNameLength <= MAXIMUM_CARD_NAME_LENGTH,\\n      \\\"Card name length is invalid\\\"\\n    );\\n\\n    require(cardsOfUser[msg.sender].length > 0, \\\"No card to rename\\\");\\n\\n    cardsOfUser[msg.sender][0].cardName = _cardName;\\n  }\\n\\n\\n  function setHasMinted(address _address, bool _hasMinted) external onlyRole(DAO) {\\n    hasMinted[_address] = _hasMinted;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/FusedCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./CardWithFees.sol\\\";\\n\\ncontract FusedCard is CardWithFees {\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe\\n  ) CardWithFees(_cardConstructor, _pancakeRouter, _feeSafe) {}\\n\\n  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens\\n  function createCardWithTokens(\\n    address,\\n    string calldata,\\n    bytes32[] calldata\\n  ) external view virtual override onlyRole(HARVESTER) {\\n    revert(\\\"This type of card cannot be created with tokens\\\");\\n  }\\n\\n  // This function is called when a card is created by fusing other cards\\n  function createCardFromFusion(\\n    address _account,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external virtual override onlyRole(HARVESTER) {\\n    // Create the card\\n    _createCard(_account, _cardName, _args);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/BasicCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../Card.sol\\\";\\n\\ncontract BasicCard is Card {\\n  constructor(CardConstructor memory _cardConstructor) Card(_cardConstructor) {}\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/TeamCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./OnePerAccountNoRewardCard.sol\\\";\\n\\n// This card cannot be transferred or deleted. Its name is also fixed in its constructor\\n// Whether this card can be minted or not depends on the number of team cards that were minted for this team and the others\\n// This card can only be minted once per account\\n// Three team cards must be minted before all other cards during deployment\\n// This card does not yield any rewards\\n// This card implements fees\\n// This card can only be created if the user also owns a specific card\\n\\ncontract TeamCard is OnePerAccountNoRewardCard {\\n  string public cardTitle;\\n  uint256 public mintThreshold = 400; // 400/1000 = 40%. This means up to 40% of team card holders can have this specific card\\n  uint256[] public otherTeamsIndexes;\\n  uint256[] public cardsToOwn; // Owning at least one card in this list is required in order to purchase this TeamCard\\n\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe,\\n    string memory _cardTitle,\\n    uint256[] memory _otherTeamsIndexes,\\n    uint256[] memory _cardsToOwn\\n  ) OnePerAccountNoRewardCard(_cardConstructor, _pancakeRouter, _feeSafe) {\\n    cardTitle = _cardTitle;\\n    otherTeamsIndexes = _otherTeamsIndexes;\\n    cardsToOwn = _cardsToOwn;\\n  }\\n\\n  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens\\n  function _createCard(\\n    address _account,\\n    string memory, // This parameter is ignored and replaced with card title\\n    bytes32[] memory _args\\n  ) internal override onlyRole(HARVESTER) {\\n    // The user can only join one team at a time\\n    for (uint256 i = 0; i < otherTeamsIndexes.length; i++) {\\n      require(IHarvester(harvester).numberOfCardsByTypeByUser(_account, otherTeamsIndexes[i]) == 0, \\\"You can only be part of one team\\\");\\n    }\\n\\n    // The user should own at least one of the cards in cardsToOwn, unless it is empty\\n    bool ownsCard = cardsToOwn.length == 0;\\n\\n    for (uint256 i = 0; i < cardsToOwn.length; i++) {\\n      if (IHarvester(harvester).numberOfCardsByTypeByUser(_account, cardsToOwn[i]) > 0) {\\n        ownsCard = true;\\n        break;\\n      }\\n    }\\n\\n    require(ownsCard, \\\"Missing card in cardsToOwn\\\");\\n\\n    // Check if this card can be minted or not\\n    uint256 numberOfMembersFromAllTeams = totalCardsCreated;\\n    numberOfMembersFromAllTeams += IHarvester(harvester).cardTypes(otherTeamsIndexes[0]).totalCardsCreated();\\n    numberOfMembersFromAllTeams += IHarvester(harvester).cardTypes(otherTeamsIndexes[1]).totalCardsCreated();\\n\\n    require(totalCardsCreated <= ((numberOfMembersFromAllTeams * mintThreshold) / 1000), \\\"This team has too many members\\\");\\n\\n    super._createCard(_account, cardTitle, _args);\\n  }\\n\\n  // Transfers a card\\n  function _transferCard(\\n    address,\\n    address,\\n    uint256\\n  ) internal pure override {\\n    revert(\\\"This card cannot be transferred\\\");\\n  }\\n\\n  // Deletes a card\\n  function _deleteCard(address, uint256) internal pure override {\\n    revert(\\\"This card cannot be deleted\\\");\\n  }\\n\\n  // Deletes the last card of an account\\n  function _deleteLastCard(address) internal pure override {\\n    revert(\\\"This card cannot be deleted\\\");\\n  }\\n\\n  function setCardTitle(string memory _cardTitle) external onlyRole(DAO) {\\n    cardTitle = _cardTitle;\\n  }\\n\\n  function setMintThreshold(uint256 _mintThreshold) external onlyRole(DAO) {\\n    mintThreshold = _mintThreshold;\\n  }\\n\\n  function setOtherTeamsIndexes(uint256[] memory _otherTeamsIndexes) external onlyRole(DAO) {\\n    otherTeamsIndexes = _otherTeamsIndexes;\\n  }\\n\\n  function setCardsToOwn(uint256[] memory _cardsToOwn) external onlyRole(DAO) {\\n    cardsToOwn = _cardsToOwn;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/BuildingCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./NoRewardCard.sol\\\";\\n\\n// This card does not yield any rewards\\n// This card implements fees\\n\\ncontract BuildingCard is NoRewardCard {\\n  uint256 public maxSupply;\\n\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe,\\n    uint256 _maxSupply\\n  ) NoRewardCard(_cardConstructor, _pancakeRouter, _feeSafe) {\\n    maxSupply = _maxSupply;\\n  }\\n\\n  /** INTERNAL METHODS **/\\n\\n  function _createCard(\\n    address _account,\\n    string memory _cardName,\\n    bytes32[] memory _args // This will be used for custom card types\\n  ) internal override {\\n    require(totalCardsCreated < maxSupply, \\\"Max supply reached\\\");\\n\\n    super._createCard(_account, _cardName, _args);\\n  }\\n\\n  /** DAO METHODS **/\\n\\n  function setMaxSupply(uint256 _maxSupply) external onlyRole(DAO) {\\n    maxSupply = _maxSupply;\\n  }\\n\\n  function increaseMaxSupply(uint256 _increase) external onlyRole(DAO) {\\n    maxSupply += _increase;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/LimitedSupplyCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./CardWithFees.sol\\\";\\n\\n// TODO: This is wrong. The overriden function should be _createCard\\n\\ncontract LimitedSupplyCard is CardWithFees {\\n  uint256 public constant SUPPLY = 10;\\n\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe\\n  ) CardWithFees(_cardConstructor, _pancakeRouter, _feeSafe) {}\\n\\n\\n  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens\\n  function createCardWithTokens(\\n    address _account,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external virtual override onlyRole(HARVESTER) {\\n    require(cardPrice > 0, \\\"Cannot create a card with a card price of 0\\\");\\n    require(totalCardsCreated < SUPPLY, \\\"Sold out\\\");\\n\\n    // Transfer tokens and swap if needed\\n    _processCardsTokensFromCardCreation(_account, cardPrice, false, _args); // isRefuel: false\\n\\n    // Create the card\\n    _createCard(_account, _cardName, _args);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/cards/TerrainCard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./FusedCard.sol\\\";\\n\\n// This card cannot be transferred, but can be deleted as it is necessary when combining cards\\n// This card implements fees\\n// This card can only created via fusion\\n// If the required cards array is not empty, this card can only be created if the user has at least one of them\\n\\ncontract TerrainCard is FusedCard {\\n  uint256[] public requiredCards;\\n\\n  // Severity of the catastrophe that happened. Represents the total number of times the user will need to claim before he starts getting rewards again\\n  mapping(address => uint256) public severity;\\n\\n  // Number of times the user has to cashout to fix his terrain. Goes down by one every time he cashes out\\n  mapping(address => uint256) public workLeft;\\n\\n  // We don't want to use random numbers to avoid any unnecessary complexity\\n  // Instead, we try triggering a catastrophe type once, then we move on to the next\\n  mapping(address => uint256) public nextCatastropheToAttempt;\\n\\n  // Risk of a catastrophe occurring\\n  uint256 public catastropheRisk; // /1000\\n\\n  // Range of possible severities\\n  uint256[] public severities;\\n\\n  // Reward divider when a catastrophe occurred\\n  uint256 public catastropheDivider; // /100\\n\\n  // Used for random number generation\\n  uint256 private randNonce = 0;\\n\\n  constructor(\\n    CardConstructor memory _cardConstructor,\\n    address _pancakeRouter,\\n    address payable _feeSafe,\\n    uint256[] memory _requiredCards,\\n    uint256 _catastropheRisk, // /1000\\n    uint256[] memory _severities,\\n    uint256 _catastropheDivider // /100\\n  ) FusedCard(_cardConstructor, _pancakeRouter, _feeSafe) {\\n    requiredCards = _requiredCards;\\n    catastropheRisk = _catastropheRisk; // //1000\\n    severities = _severities;\\n    catastropheDivider = _catastropheDivider; // /100\\n  }\\n\\n  /** INTERNAL METHODS **/\\n\\n  function _createCard(\\n    address _account,\\n    string memory _cardName,\\n    bytes32[] memory _args // This will be used for custom card types\\n  ) internal override {\\n    // The user should own at least one of the required cards\\n    bool hasRequiredCard = requiredCards.length == 0; // If the required card array is empty, we skip this check\\n\\n    for (uint256 i = 0; i < requiredCards.length; i++) {\\n      if (IHarvester(harvester).cardTypes(requiredCards[i]).getCardCount(_account) > 0) {\\n        hasRequiredCard = true;\\n        break;\\n      }\\n    }\\n\\n    require(hasRequiredCard, \\\"User is missing required card\\\");\\n\\n    super._createCard(_account, _cardName, _args);\\n  }\\n\\n  // Transfers a card\\n  function _transferCard(\\n    address,\\n    address,\\n    uint256\\n  ) internal pure override {\\n    revert(\\\"This card cannot be transferred\\\");\\n  }\\n\\n  // Deletes a card\\n  function _deleteCard(address _account, uint256 _cardIndex) internal override {\\n    require(workLeft[_account] == 0, \\\"Cannot delete: catastrophe ongoing\\\");\\n\\n    super._deleteCard(_account, _cardIndex);\\n  }\\n\\n  // Processes a cashout and handles related fees\\n  function _cashout(address _account, uint256 _amount) internal override {\\n    // Take the first card\\n    CardEntity storage card = cardsOfUser[_account][0];\\n\\n    // A catastrophe is in progress\\n    if (workLeft[_account] > 0) {\\n      // Diminish the amount of work to do\\n      workLeft[_account]--;\\n\\n      // Once we reach 0 workLeft, set severity to 0\\n      if (workLeft[_account] == 0) severity[_account] = 0;\\n\\n      // Cashout a part of the amount\\n      super._cashout(_account, (_amount * 100) / catastropheDivider);\\n    }\\n    // Attempt a catastrophe\\n    else if (_generateRandomNumber(1000, _account) < catastropheRisk) {\\n      // Random number check was successful: trigger a catastrophe\\n      severity[_account] = severities[nextCatastropheToAttempt[_account]];\\n      workLeft[_account] = severity[_account];\\n\\n      // Put rewardAvailable to 0\\n      card.lastClaimTime = _getNewLastClaimTime(_account, card.lastClaimTime);\\n    }\\n    // No catastrophe occurred\\n    else {\\n      if (severities.length > 0) {\\n        // Try the next catastrophe next time (if catastrophes can occur to begin with)\\n        if (nextCatastropheToAttempt[_account] >= severities.length - 1) nextCatastropheToAttempt[_account] = 0;\\n        else nextCatastropheToAttempt[_account]++;\\n      }\\n\\n      // Leave the rest to CardWithFees\\n      super._cashout(_account, _amount);\\n    }\\n  }\\n\\n  // Generates a pseudo-random number between 0 and _max\\n  function _generateRandomNumber(uint256 _max, address _account) internal returns (uint256) {\\n    uint256 cheems = uint256(keccak256(abi.encodePacked(block.timestamp, _account, ++randNonce))) % _max;\\n    return cheems;\\n  }\\n\\n  // Change the name of your terrain\\n  function _changeName(string calldata _cardName) external {\\n    uint256 cardNameLength = bytes(_cardName).length;\\n    require(cardNameLength >= MINIMUM_CARD_NAME_LENGTH && cardNameLength <= MAXIMUM_CARD_NAME_LENGTH, \\\"Card name length is invalid\\\");\\n\\n    require(cardsOfUser[msg.sender].length > 0, \\\"No card to rename\\\");\\n\\n    cardsOfUser[msg.sender][0].cardName = _cardName;\\n  }\\n\\n  /** DAO METHODS **/\\n\\n  function setRequiredCards(uint256[] calldata _requiredCards) external onlyRole(DAO) {\\n    requiredCards = _requiredCards;\\n  }\\n\\n  function setCatastropheRisk(uint256 _catastropheRisk) external onlyRole(DAO) {\\n    catastropheRisk = _catastropheRisk;\\n  }\\n\\n  function setSeverities(uint256[] memory _severities) external onlyRole(DAO) {\\n    severities = _severities;\\n  }\\n\\n  function setCatastropheDivider(uint256 _catastropheDivider) external onlyRole(DAO) {\\n    catastropheDivider = _catastropheDivider;\\n  }\\n\\n  function setRandNonce(uint256 _randNonce) external onlyRole(DAO) {\\n    randNonce = _randNonce;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/Harvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IJUNK.sol\\\";\\nimport \\\"./interfaces/ICard.sol\\\";\\nimport \\\"./interfaces/IHarvester.sol\\\";\\n\\ncontract Harvester is IHarvester, AccessControl, ReentrancyGuard {\\n  bytes32 public constant DAO = keccak256(\\\"DAO\\\");\\n  bytes32 public constant CARD = keccak256(\\\"CARD\\\");\\n  uint256 public constant MAX_UINT256 = 2**256 - 1;\\n\\n  address public junk;\\n  ICard[] public override cardTypes;\\n  mapping(uint256 => bool) public isCardTypeDisabled;\\n  mapping(address => uint256[]) public cardTypesByUser;\\n  mapping(address => mapping(uint256 => uint256)) public override numberOfCardsByTypeByUser;\\n\\n  // Each possible combination of cards is represented by an ID for quicker access,\\n  // linked to an array of numbers (cardTypes) representing the cards that need to be combined.\\n  // The last card in the array is the card that will be obtained as a result of the combination\\n  uint256 public numberOfCardCombinations = 0;\\n  mapping(uint256 => uint256[]) public cardCombinations;\\n\\n  mapping(address => bool) public override rewardsAccumulateForUser;\\n  // Set this to a value lower than 100 to multiply the rewards\\n  // 100 --> x1 / 200 --> x0.5 / 50 --> x2\\n  mapping(address => uint256) public override divideRewardsForUser; // /100\\n\\n  string constant DISABLED_CARD_TYPE_MESSAGE = \\\"This card type is disabled\\\";\\n\\n  /** CONSTRUCTOR **/\\n\\n  constructor(address _junk) {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    grantRole(DAO, msg.sender);\\n\\n    junk = _junk;\\n  }\\n\\n  /** MAIN METHODS **/\\n\\n  receive() external payable {}\\n\\n  // Standard function for creating a card - requires the sender to pay a certain amount of JUNK tokens\\n  function createCardWithTokens(\\n    uint256 _cardType,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external nonReentrant {\\n    // Safety checks\\n    require(_cardType < cardTypes.length, \\\"Trying to create a card of a type that does not exist\\\");\\n    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);\\n\\n    cardTypes[_cardType].createCardWithTokens(msg.sender, _cardName, _args);\\n\\n    _incrementCardsCountForUser(msg.sender, _cardType);\\n  }\\n\\n  // Claims rewards from all cards\\n  function cashoutAll() external nonReentrant {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[msg.sender];\\n\\n    for (uint256 i = 0; i < cardTypesOfUser.length; i++) {\\n      if (!isCardTypeDisabled[cardTypesOfUser[i]]) cardTypes[cardTypesOfUser[i]].cashoutAll(msg.sender);\\n    }\\n  }\\n\\n  // Claims rewards from one card type\\n  function cashoutCardType(uint256 _cardType) external nonReentrant {\\n    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);\\n    cardTypes[_cardType].cashoutAll(msg.sender);\\n  }\\n\\n  // Claims rewards from one card\\n  function cashoutCard(uint256 _cardType, uint256 _cardIndex) external nonReentrant {\\n    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);\\n    cardTypes[_cardType].cashoutCard(msg.sender, _cardIndex);\\n  }\\n\\n  // Refill fuel to allow next cashouts\\n  function refuel(uint256 _cardType, bytes32[] memory _args) external nonReentrant {\\n    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);\\n    cardTypes[_cardType].refuel(msg.sender, _args);\\n  }\\n\\n  // Transfers a card to another address\\n  function transferCard(\\n    uint256 _cardType,\\n    address _newAccount,\\n    uint256 _cardIndex\\n  ) external nonReentrant {\\n    _transferCard(_cardType, msg.sender, _newAccount, _cardIndex);\\n  }\\n\\n  // Deletes a card\\n  function deleteCard(uint256 _cardType, uint256 _cardIndex) external nonReentrant {\\n    _deleteCard(_cardType, msg.sender, _cardIndex);\\n  }\\n\\n  // Combines 2+ cards together to make a new card. The old cards are lost in the process\\n  function fuseCards(\\n    uint256 _cardCombination,\\n    string calldata _newCardName,\\n    bytes32[] calldata _args\\n  ) external nonReentrant {\\n    _fuseCards(msg.sender, _cardCombination, _newCardName, _args);\\n  }\\n\\n  /** INTERNAL METHODS **/\\n\\n  function _incrementCardsCountForUser(address _account, uint256 _cardType) internal {\\n    // Update cardTypesByUser if needed\\n    if (numberOfCardsByTypeByUser[_account][_cardType] == 0) cardTypesByUser[_account].push(_cardType);\\n\\n    // Increment the card count for this user\\n    numberOfCardsByTypeByUser[_account][_cardType]++;\\n  }\\n\\n  function _decrementCardsCountForUser(address _account, uint256 _cardType) internal {\\n    // Decrement the card count for this user\\n    numberOfCardsByTypeByUser[_account][_cardType]--;\\n\\n    // Update cardTypesByUser if needed\\n    if (numberOfCardsByTypeByUser[_account][_cardType] == 0) {\\n      // Iterate over memory data\\n      uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n      for (uint256 i = 0; i < cardTypesOfUser.length; i++) {\\n        if (cardTypesOfUser[i] == _cardType) {\\n          // Delete this card type from cardTypesOfUser and exit\\n          uint256 lastCardTypeIndex = cardTypesOfUser.length - 1;\\n          cardTypesByUser[_account][i] = cardTypesOfUser[lastCardTypeIndex];\\n          cardTypesByUser[_account].pop();\\n          break;\\n        }\\n      }\\n    }\\n  }\\n\\n  // Transfers a card to another address\\n  function _transferCard(\\n    uint256 _cardType,\\n    address _sender,\\n    address _recipient,\\n    uint256 _cardIndex\\n  ) internal {\\n    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);\\n\\n    // Transfer the card on the Card contract\\n    cardTypes[_cardType].transferCard(_sender, _recipient, _cardIndex);\\n\\n    // Update card count\\n    _incrementCardsCountForUser(_recipient, _cardType);\\n    _decrementCardsCountForUser(_sender, _cardType);\\n  }\\n\\n  // Deletes a card\\n  function _deleteCard(\\n    uint256 _cardType,\\n    address _account,\\n    uint256 _cardIndex\\n  ) internal {\\n    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);\\n\\n    // Delete the card on the relevant Card contract\\n    cardTypes[_cardType].deleteCard(_account, _cardIndex);\\n\\n    // Update card count\\n    _decrementCardsCountForUser(_account, _cardType);\\n  }\\n\\n  // Combines 2+ cards together to make a new card. The old cards are lost in the process\\n  function _fuseCards(\\n    address _account,\\n    uint256 _cardCombination,\\n    string calldata _newCardName,\\n    bytes32[] calldata _args\\n  ) internal {\\n    // Iterate over memory data\\n    uint256[] memory cardsOfCombination = cardCombinations[_cardCombination];\\n    require(_cardCombination < numberOfCardCombinations, \\\"Trying to use a combination that does not exist\\\");\\n\\n    // Delete the fused cards (all cards in the \\\"cardsOfCombination\\\" array, except the last one)\\n    uint256 i;\\n    for (i = 0; i < cardsOfCombination.length - 1; i++) {\\n      require(!isCardTypeDisabled[cardsOfCombination[i]], DISABLED_CARD_TYPE_MESSAGE);\\n\\n      // Delete the last card on the relevant Card contract\\n      cardTypes[cardsOfCombination[i]].deleteLastCard(_account);\\n\\n      // Update card count\\n      _decrementCardsCountForUser(_account, cardsOfCombination[i]);\\n    }\\n\\n    // Send the new card to \\\"_account\\\"\\n    cardTypes[cardsOfCombination[i]].createCardFromFusion(_account, _newCardName, _args);\\n    _incrementCardsCountForUser(_account, cardsOfCombination[i]);\\n  }\\n\\n  // Creates a new card type\\n  function _createNewCardType(address _newCardTypeAddress) internal {\\n    // Approve this card type to spend JUNK tokens\\n    IERC20(junk).approve(_newCardTypeAddress, MAX_UINT256);\\n\\n    // Store the new card type\\n    cardTypes.push(ICard(_newCardTypeAddress));\\n\\n    // Give the new card type the CARD role\\n    IJUNK(junk).grantCardRole(_newCardTypeAddress);\\n    grantRole(CARD, _newCardTypeAddress);\\n  }\\n\\n  /** VIEW METHODS **/\\n\\n  // Returns the total number of cards, including all accounts and card types\\n  function getTotalCardsCreated() external view returns (uint256) {\\n    uint256 total = 0;\\n    for (uint256 i = 0; i < cardTypes.length; i++) {\\n      total += cardTypes[i].totalCardsCreated();\\n    }\\n\\n    return total;\\n  }\\n\\n  // Returns the card types an user owns\\n  function getAccountCardTypes(address _account) external view returns (uint256[] memory) {\\n    return cardTypesByUser[_account];\\n  }\\n\\n  // Returns the card types an user owns (for each card)\\n  function getAccountCardTypesAsArray(address _account) external view returns (uint256[] memory) {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n    // Determine the result array size\\n    uint256 retSize = 0;\\n    uint256 i;\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];\\n    }\\n\\n    uint256 k = 0;\\n    uint256[] memory accountCardTypesAsArray = new uint256[](retSize);\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      for (uint256 j = 0; j < numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]]; j++) {\\n        accountCardTypesAsArray[k] = cardTypesOfUser[i];\\n        k++;\\n      }\\n    }\\n\\n    return accountCardTypesAsArray;\\n  }\\n\\n  // Returns the card indexes an user owns (for each card). This is useful for calling the \\\"cashoutCard()\\\" function\\n  function getAccountCardIndexesAsArray(address _account) external view returns (uint256[] memory) {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n    // Determine the result array size\\n    uint256 retSize = 0;\\n    uint256 i;\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];\\n    }\\n\\n    uint256 k = 0;\\n    uint256[] memory accountCardIndexesAsArray = new uint256[](retSize);\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      for (uint256 j = 0; j < numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]]; j++) {\\n        accountCardIndexesAsArray[k] = j;\\n        k++;\\n      }\\n    }\\n\\n    return accountCardIndexesAsArray;\\n  }\\n\\n  // Returns the amount of rewards available for a given account (all cards combined)\\n  function getAccountRewardAvailable(address _account) external view returns (uint256) {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n    uint256 accountRewardAvailable = 0;\\n    for (uint256 i = 0; i < cardTypesOfUser.length; i++) {\\n      // This will only add rewards to accountRewardAvailable if getAccountRewardAvailable does not revert\\n      try cardTypes[cardTypesOfUser[i]].getAccountRewardAvailable(_account) returns (uint256 rewardToAdd) {\\n        accountRewardAvailable += rewardToAdd;\\n      } catch {}\\n    }\\n\\n    return accountRewardAvailable;\\n  }\\n\\n  // Returns the amount of rewards available for a given account (for each card)\\n  function getAccountRewardAvailableAsArray(address _account) external view returns (uint256[] memory) {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n    // Determine the result array size\\n    uint256 retSize = 0;\\n    uint256 i;\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];\\n    }\\n\\n    uint256 k = 0;\\n    uint256[] memory accountRewardAvailableAsArray = new uint256[](retSize);\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      uint256[] memory accountRewardAvailableAsArrayOfType = new uint256[](0);\\n\\n      // This will only initiate accountRewardAvailableAsArrayOfType if getAccountRewardAvailableAsArray does not revert\\n      try cardTypes[cardTypesOfUser[i]].getAccountRewardAvailableAsArray(_account) returns (uint256[] memory _accountRewardAvailableAsArrayOfType) {\\n        accountRewardAvailableAsArrayOfType = _accountRewardAvailableAsArrayOfType;\\n      } catch {}\\n\\n      for (uint256 j = 0; j < accountRewardAvailableAsArrayOfType.length; j++) {\\n        accountRewardAvailableAsArray[k] = accountRewardAvailableAsArrayOfType[j];\\n        k++;\\n      }\\n    }\\n\\n    return accountRewardAvailableAsArray;\\n  }\\n\\n  // Returns the amount of cards an account has\\n  function getCardCount(address _account) external view returns (uint256) {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n    uint256 cardCount = 0;\\n    for (uint256 i = 0; i < cardTypesOfUser.length; i++) {\\n      cardCount += cardTypes[cardTypesOfUser[i]].getCardCount(_account);\\n    }\\n\\n    return cardCount;\\n  }\\n\\n  // Returns the names of all the cards of an account\\n  function getAccountCardNames(address _account) external view returns (string[] memory) {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n    // Determine the result array size\\n    uint256 retSize = 0;\\n    uint256 i;\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];\\n    }\\n\\n    uint256 k = 0;\\n    string[] memory accountCardNames = new string[](retSize);\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      string[] memory accountCardNamesOfType = cardTypes[cardTypesOfUser[i]].getAccountCardNames(_account);\\n\\n      for (uint256 j = 0; j < accountCardNamesOfType.length; j++) {\\n        accountCardNames[k] = accountCardNamesOfType[j];\\n        k++;\\n      }\\n    }\\n\\n    return accountCardNames;\\n  }\\n\\n  // Returns the creation times of all the cards of an account\\n  function getAccountCreationTimes(address _account) external view returns (uint256[] memory) {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n    // Determine the result array size\\n    uint256 retSize = 0;\\n    uint256 i;\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];\\n    }\\n\\n    uint256 k = 0;\\n    uint256[] memory accountCreationTimes = new uint256[](retSize);\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      uint256[] memory accountCreationTimesOfType = cardTypes[cardTypesOfUser[i]].getAccountCreationTimes(_account);\\n\\n      for (uint256 j = 0; j < accountCreationTimesOfType.length; j++) {\\n        accountCreationTimes[k] = accountCreationTimesOfType[j];\\n        k++;\\n      }\\n    }\\n\\n    return accountCreationTimes;\\n  }\\n\\n  // Returns the last claiming times of all the cards of an account\\n  function getAccountLastClaimTimes(address _account) external view returns (uint256[] memory) {\\n    // Iterate over memory data\\n    uint256[] memory cardTypesOfUser = cardTypesByUser[_account];\\n\\n    // Determine the result array size\\n    uint256 retSize = 0;\\n    uint256 i;\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      retSize += numberOfCardsByTypeByUser[_account][cardTypesOfUser[i]];\\n    }\\n\\n    uint256 k = 0;\\n    uint256[] memory accountLastClaimTimes = new uint256[](retSize);\\n    for (i = 0; i < cardTypesOfUser.length; i++) {\\n      uint256[] memory accountLastClaimTimesOfType = cardTypes[cardTypesOfUser[i]].getAccountLastClaimTimes(_account);\\n\\n      for (uint256 j = 0; j < accountLastClaimTimesOfType.length; j++) {\\n        accountLastClaimTimes[k] = accountLastClaimTimesOfType[j];\\n        k++;\\n      }\\n    }\\n\\n    return accountLastClaimTimes;\\n  }\\n\\n  // For a given card type, returns the amount of rewards available for a given account (all cards combined)\\n  function getAccountRewardAvailableByType(uint256 _cardType, address _account) external view returns (uint256) {\\n    return cardTypes[_cardType].getAccountRewardAvailable(_account);\\n  }\\n\\n  // For a given card type, returns the amount of rewards available for a given account (for each card)\\n  function getAccountRewardAvailableAsArrayByType(uint256 _cardType, address _account) external view returns (uint256[] memory) {\\n    return cardTypes[_cardType].getAccountRewardAvailableAsArray(_account);\\n  }\\n\\n  // For a given card type, returns the amount of rewards available for a given account and a given card index\\n  function getCardRewardAvailableByType(\\n    uint256 _cardType,\\n    address _account,\\n    uint256 _cardIndex\\n  ) external view returns (uint256) {\\n    return cardTypes[_cardType].getCardRewardAvailable(_account, _cardIndex);\\n  }\\n\\n  // For a given card type, returns the card that corresponds to a particular account and card index\\n  function getCardByType(\\n    uint256 _cardType,\\n    address _account,\\n    uint256 _cardIndex\\n  ) external view returns (ICard.CardEntity memory) {\\n    return cardTypes[_cardType].getCard(_account, _cardIndex);\\n  }\\n\\n  // For a given card type, returns the amount of cards an account has\\n  function getCardCountByType(uint256 _cardType, address _account) external view returns (uint256) {\\n    return cardTypes[_cardType].getCardCount(_account);\\n  }\\n\\n  // For a given card type, returns the names of all the cards of an account\\n  function getAccountCardNamesByType(uint256 _cardType, address _account) external view returns (string[] memory) {\\n    return cardTypes[_cardType].getAccountCardNames(_account);\\n  }\\n\\n  // For a given card type, returns the card name that corresponds to a particular account and card index\\n  function getCardNameByType(\\n    uint256 _cardType,\\n    address _account,\\n    uint256 _cardIndex\\n  ) external view returns (string memory) {\\n    return cardTypes[_cardType].getCardName(_account, _cardIndex);\\n  }\\n\\n  // For a given card type, returns the creation times of all the cards of an account\\n  function getAccountCreationTimesByType(uint256 _cardType, address _account) external view returns (uint256[] memory) {\\n    return cardTypes[_cardType].getAccountCreationTimes(_account);\\n  }\\n\\n  // For a given card type, returns the creation time that corresponds to a particular account and card index\\n  function getCardCreationTimeByType(\\n    uint256 _cardType,\\n    address _account,\\n    uint256 _cardIndex\\n  ) external view returns (uint256) {\\n    return cardTypes[_cardType].getCardCreationTime(_account, _cardIndex);\\n  }\\n\\n  // For a given card type, returns the last claiming times of all the cards of an account\\n  function getAccountLastClaimTimesByType(uint256 _cardType, address _account) external view returns (uint256[] memory) {\\n    return cardTypes[_cardType].getAccountLastClaimTimes(_account);\\n  }\\n\\n  // For a given card type, returns the last claiming time that corresponds to a particular account and card index\\n  function getCardLastClaimTimeByType(\\n    uint256 _cardType,\\n    address _account,\\n    uint256 _cardIndex\\n  ) external view returns (uint256) {\\n    return cardTypes[_cardType].getCardLastClaimTime(_account, _cardIndex);\\n  }\\n\\n  /** DAO METHODS **/\\n\\n  // Create a new card type\\n  function createNewCardTypeDao(address _newCardTypeAddress) external onlyRole(DAO) {\\n    _createNewCardType(_newCardTypeAddress);\\n  }\\n\\n  // Update an existing card type\\n  // Warning: this will affect all cards holders in this contract\\n  function updateCardType(uint256 _cardType, address _newCardTypeAddress) external onlyRole(DAO) {\\n    require(_cardType < cardTypes.length, \\\"Trying to update a card type that does not exist\\\");\\n\\n    // Approve the new card type to spend JUNK tokens and prevent the old one from doing so\\n    IERC20(junk).approve(_newCardTypeAddress, MAX_UINT256);\\n    IERC20(junk).approve(address(cardTypes[_cardType]), 0);\\n\\n    // Store the new card type\\n    cardTypes[_cardType] = ICard(_newCardTypeAddress);\\n  }\\n\\n  // !! This function is dangerous. Card types should not be updated as cardTypesByUser won't be\\n  // !! Only use this to delete a card type added by mistake. Prefer using updateCardType\\n  // Delete a card type\\n  function deleteCardType(uint256 _cardType) external onlyRole(DAO) {\\n    require(_cardType < cardTypes.length, \\\"Trying to remove a card type that does not exist\\\");\\n\\n    // Prevent this card type from spending JUNK tokens\\n    IERC20(junk).approve(address(cardTypes[_cardType]), 0);\\n\\n    // Keep the last card type\\n    uint256 lastCardTypeIndex = cardTypes.length - 1;\\n    cardTypes[_cardType] = cardTypes[lastCardTypeIndex];\\n\\n    // Delete the given card type\\n    delete cardTypes[lastCardTypeIndex];\\n  }\\n\\n  // Enables a card type\\n  // Card types are enabled by default, so this is only used when a card has been disabled manually\\n  function enableCardType(uint256 _cardType) external onlyRole(DAO) {\\n    address cardTypeAddress = address(cardTypes[_cardType]);\\n\\n    // Approve this card to spend JUNK tokens\\n    IERC20(junk).approve(cardTypeAddress, MAX_UINT256);\\n\\n    // Mark this cardType as enabled\\n    isCardTypeDisabled[_cardType] = false;\\n\\n    // Add the CARD role to the cardType\\n    IJUNK(junk).grantCardRole(cardTypeAddress);\\n    grantRole(CARD, cardTypeAddress);\\n  }\\n\\n  // Disables a card type\\n  function disableCardType(uint256 _cardType) external onlyRole(DAO) {\\n    address cardTypeAddress = address(cardTypes[_cardType]);\\n\\n    // Prevent this card type from spending JUNK tokens\\n    IERC20(junk).approve(cardTypeAddress, 0);\\n\\n    // Mark this cardType as disabled\\n    isCardTypeDisabled[_cardType] = true;\\n\\n    // Remove the CARD role from the cardType\\n    IJUNK(junk).revokeCardRole(cardTypeAddress);\\n    revokeRole(CARD, cardTypeAddress);\\n  }\\n\\n  // Create a new card combination\\n  function createNewCardCombination(uint256[] calldata _cardCombination) external onlyRole(DAO) {\\n    cardCombinations[numberOfCardCombinations] = _cardCombination;\\n    numberOfCardCombinations++;\\n  }\\n\\n  // Update an existing card combination\\n  function updateCardCombination(uint256 _cardCombination, uint256[] calldata _newCardCombination) external onlyRole(DAO) {\\n    require(_cardCombination < numberOfCardCombinations, \\\"Trying to update a card combination that does not exist\\\");\\n\\n    cardCombinations[_cardCombination] = _newCardCombination;\\n  }\\n\\n  // Delete a card combination\\n  function deleteCardCombination(uint256 _cardCombination) external onlyRole(DAO) {\\n    require(_cardCombination < numberOfCardCombinations, \\\"Trying to remove a card combination that does not exist\\\");\\n\\n    numberOfCardCombinations--;\\n\\n    // Keep the last card combination\\n    cardCombinations[_cardCombination] = cardCombinations[numberOfCardCombinations];\\n\\n    // Delete the given card combination\\n    delete cardCombinations[numberOfCardCombinations];\\n  }\\n\\n  // Creates a card\\n  function createCardDao(\\n    uint256 _cardType,\\n    string calldata _cardName,\\n    address _account,\\n    bytes32[] calldata _args\\n  ) external onlyRole(DAO) {\\n    // Safety checks\\n    require(_cardType < cardTypes.length, \\\"Trying to create a card of a type that does not exist\\\");\\n    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);\\n\\n    cardTypes[_cardType].createCardDao(_account, _cardName, _args);\\n\\n    _incrementCardsCountForUser(_account, _cardType);\\n  }\\n\\n  // Transfers a card to another address\\n  function transferCardDao(\\n    uint256 _cardType,\\n    address _sender,\\n    address _recipient,\\n    uint256 _cardIndex\\n  ) external onlyRole(DAO) {\\n    _transferCard(_cardType, _sender, _recipient, _cardIndex);\\n  }\\n\\n  // Deletes a card\\n  function deleteCardDao(\\n    uint256 _cardType,\\n    address _account,\\n    uint256 _cardIndex\\n  ) external onlyRole(DAO) {\\n    _deleteCard(_cardType, _account, _cardIndex);\\n  }\\n\\n  // Combines 2+ cards together to make a new card. The old cards are lost in the process\\n  function fuseCardsDao(\\n    address _account,\\n    uint256 _cardCombination,\\n    string calldata _newCardName,\\n    bytes32[] calldata _args\\n  ) external onlyRole(DAO) {\\n    _fuseCards(_account, _cardCombination, _newCardName, _args);\\n  }\\n\\n  // Directly create cards in batch for \\\"_accounts\\\", all with the same names and custom arguments\\n  function airdropCards(\\n    address[] calldata _accounts,\\n    uint256 _cardType,\\n    string calldata _cardName,\\n    bytes32[] calldata _args\\n  ) external onlyRole(DAO) {\\n    // Safety checks\\n    require(_cardType < cardTypes.length, \\\"Trying to create a card of a type that does not exist\\\");\\n    require(!isCardTypeDisabled[_cardType], DISABLED_CARD_TYPE_MESSAGE);\\n\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      cardTypes[_cardType].createCardDao(_accounts[i], _cardName, _args);\\n      _incrementCardsCountForUser(_accounts[i], _cardType);\\n    }\\n  }\\n\\n  // Directly create cards in batch for \\\"_accounts\\\", all with their own names and custom arguments\\n  function airdropCustomCards(\\n    address[] calldata _accounts,\\n    uint256[] calldata _cardTypes,\\n    string[] calldata _cardNames,\\n    bytes32[][] calldata _argsArray\\n  ) external onlyRole(DAO) {\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      // Safety checks\\n      require(_cardTypes[i] < cardTypes.length, \\\"Trying to create a card of a type that does not exist\\\");\\n      require(!isCardTypeDisabled[_cardTypes[i]], DISABLED_CARD_TYPE_MESSAGE);\\n\\n      cardTypes[_cardTypes[i]].createCardDao(_accounts[i], _cardNames[i], _argsArray[i]);\\n      _incrementCardsCountForUser(_accounts[i], _cardTypes[i]);\\n    }\\n  }\\n\\n  // Gives the CARD role to an address so it can call the \\\"setClaimedTokens()\\\" method among other CARD methods\\n  function grantCardRoleDAO(address _card) external onlyRole(DAO) {\\n    grantRole(CARD, _card);\\n  }\\n\\n  function incrementCardsCountForUserDao(address _account, uint256 _cardType) external onlyRole(DAO) {\\n    _incrementCardsCountForUser(_account, _cardType);\\n  }\\n\\n  function decrementCardsCountForUserDao(address _account, uint256 _cardType) external onlyRole(DAO) {\\n    _decrementCardsCountForUser(_account, _cardType);\\n  }\\n\\n  function setJunk(address _junk) external onlyRole(DAO) {\\n    junk = _junk;\\n  }\\n\\n  function setRewardsAccumulateForUserDao(address _account, bool _rewardsAccumulate) external onlyRole(DAO) {\\n    rewardsAccumulateForUser[_account] = _rewardsAccumulate;\\n  }\\n\\n  function setDivideRewardsForUserDao(address _account, uint256 _divider) external onlyRole(DAO) {\\n    divideRewardsForUser[_account] = _divider;\\n  }\\n\\n  // Withdraw BNB from the contract\\n  function withdraw(uint256 _amount) external onlyRole(DAO) {\\n    payable(msg.sender).transfer(_amount);\\n  }\\n\\n  // Withdraw ERC20 from the contract\\n  function withdrawERC20(address _erc20, uint256 _amount) external onlyRole(DAO) {\\n    IERC20(_erc20).transfer(msg.sender, _amount);\\n  }\\n\\n  /** CARD METHODS **/\\n\\n  // Call to ERC20's \\\"transferFrom()\\\" from this contract and not the Card contract\\n  // If that call was done in Card.sol, then the user would have to approve every type of Card\\n  function initiateJUNKTransfer(\\n    address _sender,\\n    address _recipient,\\n    uint256 _amount\\n  ) external override onlyRole(CARD) {\\n    IERC20(junk).transferFrom(_sender, _recipient, _amount);\\n  }\\n\\n  function setRewardsAccumulateForUser(address _account, bool _rewardsAccumulate) external override onlyRole(CARD) {\\n    rewardsAccumulateForUser[_account] = _rewardsAccumulate;\\n  }\\n\\n  function setDivideRewardsForUser(address _account, uint256 _divider) external override onlyRole(CARD) {\\n    divideRewardsForUser[_account] = _divider;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/finance/VestingWallet.sol\\\";\\n\\ncontract Vesting is VestingWallet {\\n  constructor(\\n    address beneficiaryAddress,\\n    uint64 startTimestamp,\\n    uint64 durationSeconds\\n  ) payable VestingWallet(beneficiaryAddress, startTimestamp, durationSeconds) {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/finance/PaymentSplitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @title PaymentSplitter\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\n *\\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\\n * an amount proportional to the percentage of total shares they were assigned.\\n *\\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\\n * function.\\n *\\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\\n * to run tests before sending real value to this contract.\\n */\\ncontract PaymentSplitter is Context {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address to, uint256 amount);\\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    uint256 private _totalShares;\\n    uint256 private _totalReleased;\\n\\n    mapping(address => uint256) private _shares;\\n    mapping(address => uint256) private _released;\\n    address[] private _payees;\\n\\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\\n        require(payees.length == shares_.length, \\\"PaymentSplitter: payees and shares length mismatch\\\");\\n        require(payees.length > 0, \\\"PaymentSplitter: no payees\\\");\\n\\n        for (uint256 i = 0; i < payees.length; i++) {\\n            _addPayee(payees[i], shares_[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\\n     * reliability of the events, and not the actual splitting of Ether.\\n     *\\n     * To learn more about this see the Solidity documentation for\\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\\n     * functions].\\n     */\\n    receive() external payable virtual {\\n        emit PaymentReceived(_msgSender(), msg.value);\\n    }\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    function totalShares() public view returns (uint256) {\\n        return _totalShares;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of Ether already released.\\n     */\\n    function totalReleased() public view returns (uint256) {\\n        return _totalReleased;\\n    }\\n\\n    /**\\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\\n     * contract.\\n     */\\n    function totalReleased(IERC20 token) public view returns (uint256) {\\n        return _erc20TotalReleased[token];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        return _shares[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of Ether already released to a payee.\\n     */\\n    function released(address account) public view returns (uint256) {\\n        return _released[account];\\n    }\\n\\n    /**\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\n     * IERC20 contract.\\n     */\\n    function released(IERC20 token, address account) public view returns (uint256) {\\n        return _erc20Released[token][account];\\n    }\\n\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    function payee(uint256 index) public view returns (address) {\\n        return _payees[index];\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address payable account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = address(this).balance + totalReleased();\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _released[account] += payment;\\n        _totalReleased += payment;\\n\\n        Address.sendValue(account, payment);\\n        emit PaymentReleased(account, payment);\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\\n     * contract.\\n     */\\n    function release(IERC20 token, address account) public virtual {\\n        require(_shares[account] > 0, \\\"PaymentSplitter: account has no shares\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\\n        uint256 payment = _pendingPayment(account, totalReceived, released(token, account));\\n\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\n\\n        _erc20Released[token][account] += payment;\\n        _erc20TotalReleased[token] += payment;\\n\\n        SafeERC20.safeTransfer(token, account, payment);\\n        emit ERC20PaymentReleased(token, account, payment);\\n    }\\n\\n    /**\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\n     * already released amounts.\\n     */\\n    function _pendingPayment(\\n        address account,\\n        uint256 totalReceived,\\n        uint256 alreadyReleased\\n    ) private view returns (uint256) {\\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param shares_ The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 shares_) private {\\n        require(account != address(0), \\\"PaymentSplitter: account is the zero address\\\");\\n        require(shares_ > 0, \\\"PaymentSplitter: shares are 0\\\");\\n        require(_shares[account] == 0, \\\"PaymentSplitter: account already has shares\\\");\\n\\n        _payees.push(account);\\n        _shares[account] = shares_;\\n        _totalShares = _totalShares + shares_;\\n        emit PayeeAdded(account, shares_);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/finance/VestingWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (finance/VestingWallet.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/math/Math.sol\\\";\\n\\n/**\\n * @title VestingWallet\\n * @dev This contract handles the vesting of Eth and ERC20 tokens for a given beneficiary. Custody of multiple tokens\\n * can be given to this contract, which will release the token to the beneficiary following a given vesting schedule.\\n * The vesting schedule is customizable through the {vestedAmount} function.\\n *\\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\\n * be immediately releasable.\\n */\\ncontract VestingWallet is Context {\\n    event EtherReleased(uint256 amount);\\n    event ERC20Released(address indexed token, uint256 amount);\\n\\n    uint256 private _released;\\n    mapping(address => uint256) private _erc20Released;\\n    address private immutable _beneficiary;\\n    uint64 private immutable _start;\\n    uint64 private immutable _duration;\\n\\n    /**\\n     * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\\n     */\\n    constructor(\\n        address beneficiaryAddress,\\n        uint64 startTimestamp,\\n        uint64 durationSeconds\\n    ) {\\n        require(beneficiaryAddress != address(0), \\\"VestingWallet: beneficiary is zero address\\\");\\n        _beneficiary = beneficiaryAddress;\\n        _start = startTimestamp;\\n        _duration = durationSeconds;\\n    }\\n\\n    /**\\n     * @dev The contract should be able to receive Eth.\\n     */\\n    receive() external payable virtual {}\\n\\n    /**\\n     * @dev Getter for the beneficiary address.\\n     */\\n    function beneficiary() public view virtual returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    /**\\n     * @dev Getter for the start timestamp.\\n     */\\n    function start() public view virtual returns (uint256) {\\n        return _start;\\n    }\\n\\n    /**\\n     * @dev Getter for the vesting duration.\\n     */\\n    function duration() public view virtual returns (uint256) {\\n        return _duration;\\n    }\\n\\n    /**\\n     * @dev Amount of eth already released\\n     */\\n    function released() public view virtual returns (uint256) {\\n        return _released;\\n    }\\n\\n    /**\\n     * @dev Amount of token already released\\n     */\\n    function released(address token) public view virtual returns (uint256) {\\n        return _erc20Released[token];\\n    }\\n\\n    /**\\n     * @dev Release the native token (ether) that have already vested.\\n     *\\n     * Emits a {TokensReleased} event.\\n     */\\n    function release() public virtual {\\n        uint256 releasable = vestedAmount(uint64(block.timestamp)) - released();\\n        _released += releasable;\\n        emit EtherReleased(releasable);\\n        Address.sendValue(payable(beneficiary()), releasable);\\n    }\\n\\n    /**\\n     * @dev Release the tokens that have already vested.\\n     *\\n     * Emits a {TokensReleased} event.\\n     */\\n    function release(address token) public virtual {\\n        uint256 releasable = vestedAmount(token, uint64(block.timestamp)) - released(token);\\n        _erc20Released[token] += releasable;\\n        emit ERC20Released(token, releasable);\\n        SafeERC20.safeTransfer(IERC20(token), beneficiary(), releasable);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of ether that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(address(this).balance + released(), timestamp);\\n    }\\n\\n    /**\\n     * @dev Calculates the amount of tokens that has already vested. Default implementation is a linear vesting curve.\\n     */\\n    function vestedAmount(address token, uint64 timestamp) public view virtual returns (uint256) {\\n        return _vestingSchedule(IERC20(token).balanceOf(address(this)) + released(token), timestamp);\\n    }\\n\\n    /**\\n     * @dev Virtual implementation of the vesting formula. This returns the amout vested, as a function of time, for\\n     * an asset given its total historical allocation.\\n     */\\n    function _vestingSchedule(uint256 totalAllocation, uint64 timestamp) internal view virtual returns (uint256) {\\n        if (timestamp < start()) {\\n            return 0;\\n        } else if (timestamp > start() + duration()) {\\n            return totalAllocation;\\n        } else {\\n            return (totalAllocation * (timestamp - start())) / duration();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeSafe\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"junkAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"AddedLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwappedSafeFeeBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CARD\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARVESTER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"blacklistDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"changeDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwappingDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"excludeFromFeesDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_card\",\"type\":\"address\"}],\"name\":\"grantCardRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_card\",\"type\":\"address\"}],\"name\":\"grantCardRoleDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvester\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualLiquifyDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSafeFeeSwapDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumLiquidityFeeBalanceToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumSafeFeeBalanceToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeJunkBnbPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_card\",\"type\":\"address\"}],\"name\":\"revokeCardRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_card\",\"type\":\"address\"}],\"name\":\"revokeCardRoleDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DaoToRevoke\",\"type\":\"address\"}],\"name\":\"revokeDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingFeeClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingFeeNonClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPairDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyingFeeDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setClaimedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeSafe\",\"type\":\"address\"}],\"name\":\"setFeeSafeDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"setHarvesterDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumLiquidityFeeBalanceToSwap\",\"type\":\"uint256\"}],\"name\":\"setMinimumLiquidityFeeBalanceToSwapDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumSafeFeeBalanceToSwap\",\"type\":\"uint256\"}],\"name\":\"setMinimumSafeFeeBalanceToSwapDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_safeFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSafeFeePercentageDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellingFeeClaimed\",\"type\":\"uint256\"}],\"name\":\"setSellingFeeClaimedDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellingFeeNonClaimed\",\"type\":\"uint256\"}],\"name\":\"setSellingFeeNonClaimedDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopSwappingDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferClaimedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20DAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "JUNK", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000347db82ef6982fa052d2c74bf53ddcafec180ee8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab24b0d12aa5b23b9c74f6c9e18e2720806f9b1b917ad969794f1944bfd97158"}