{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Ledgity.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./libraries/ReflectToken.sol\\\";\\nimport \\\"./libraries/Percent.sol\\\";\\nimport \\\"./libraries/Set.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/ILedgity.sol\\\";\\nimport \\\"./interfaces/IReserve.sol\\\";\\nimport \\\"./interfaces/ILedgityPriceOracle.sol\\\";\\n\\n// SPDX-License-Identifier: Unlicensed\\ncontract Ledgity is ILedgity, ReflectToken {\\n    using SafeMath for uint256;\\n    using Percent for Percent.Percent;\\n    using Set for Set.AddressSet;\\n\\n    uint256 public constant initialTotalSupply = 2760000000 * 10**18;\\n\\n    uint256 public numTokensToSwap;\\n    bool public inSwapAndLiquify;\\n    enum FeeDestination {\\n        Liquify,\\n        Collect\\n    }\\n    FeeDestination public feeDestination = FeeDestination.Liquify;\\n    Percent.Percent public sellAccumulationFee = Percent.encode(6, 100);\\n    Percent.Percent public initialSellAccumulationFee = sellAccumulationFee;\\n    Percent.Percent public sellAtSmallPriceAccumulationFee = Percent.encode(6 + 15, 100);\\n    Percent.Percent public initialSellAtSmallPriceAccumulationFee = sellAtSmallPriceAccumulationFee;\\n    Percent.Percent public sellReflectionFee = Percent.encode(4, 100);\\n    Percent.Percent public initialSellReflectionFee = sellReflectionFee;\\n    Percent.Percent public buyAccumulationFee = Percent.encode(4, 100);\\n    Percent.Percent public initialBuyAccumulationFee = buyAccumulationFee;\\n    Set.AddressSet private _dexes;\\n    Set.AddressSet private _excludedFromDexFee;\\n\\n    Set.AddressSet private _excludedFromLimits;\\n    mapping(address => uint256) public soldPerPeriod;\\n    mapping(address => uint256) public firstSellAt;\\n    Percent.Percent public maxTransactionSizePercent = Percent.encode(5, 10000);\\n\\n    IUniswapV2Pair public uniswapV2Pair;\\n    IReserve public reserve;\\n    ILedgityPriceOracle public priceOracle;\\n    uint256 public initialPrice;\\n\\n    constructor() public ReflectToken(\\\"Ledgity\\\", \\\"LTY\\\", initialTotalSupply) {\\n        numTokensToSwap = totalSupply().mul(15).div(10000);\\n        setIsExcludedFromDexFee(owner(), true);\\n        setIsExcludedFromDexFee(address(this), true);\\n        setIsExcludedFromLimits(owner(), true);\\n        setIsExcludedFromLimits(address(this), true);\\n        excludeAccount(address(this));\\n    }\\n\\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    function initializeReserve(address reserveAddress) external onlyOwner {\\n        reserve = IReserve(reserveAddress);\\n        setIsExcludedFromDexFee(address(reserve), true);\\n        setIsExcludedFromLimits(address(reserve), true);\\n        excludeAccount(address(reserve));\\n        uniswapV2Pair = reserve.uniswapV2Pair();\\n        setDex(address(uniswapV2Pair), true);\\n    }\\n\\n    function initializePriceOracle(address priceOracleAddress) external onlyOwner {\\n        priceOracle = ILedgityPriceOracle(priceOracleAddress);\\n    }\\n\\n    function totalBurn() external view returns (uint256) {\\n        return initialTotalSupply - totalSupply();\\n    }\\n\\n    function setDex(address target, bool dex) public onlyOwner {\\n        if (dex) {\\n            _dexes.add(target);\\n            if (!isExcluded(target)) {\\n                excludeAccount(target);\\n            }\\n        } else {\\n            _dexes.remove(target);\\n            if (isExcluded(target)) {\\n                includeAccount(target);\\n            }\\n        }\\n    }\\n\\n    function setInitialPrice(uint256 _initialPrice) external onlyOwner {\\n        initialPrice = _initialPrice;\\n    }\\n\\n    function setFeeDestination(FeeDestination fd) public onlyOwner {\\n        feeDestination = fd;\\n    }\\n\\n    function setIsExcludedFromDexFee(address account, bool isExcluded) public onlyOwner {\\n        if (isExcluded) {\\n            _excludedFromDexFee.add(account);\\n        } else {\\n            _excludedFromDexFee.remove(account);\\n        }\\n    }\\n\\n    function setIsExcludedFromLimits(address account, bool isExcluded) public onlyOwner {\\n        if (isExcluded) {\\n            _excludedFromLimits.add(account);\\n        } else {\\n            _excludedFromLimits.remove(account);\\n        }\\n    }\\n\\n    function setNumTokensToSwap(uint256 _numTokensToSwap) external onlyOwner {\\n        numTokensToSwap = _numTokensToSwap;\\n    }\\n\\n    function setMaxTransactionSizePercent(uint128 numerator, uint128 denominator) external onlyOwner {\\n        maxTransactionSizePercent = Percent.encode(numerator, denominator);\\n    }\\n\\n    function setSellAccumulationFee(uint128 numerator, uint128 denominator) external onlyOwner {\\n        sellAccumulationFee = Percent.encode(numerator, denominator);\\n        require(sellAccumulationFee.lte(initialSellAccumulationFee), \\\"Ledgity: fee too high\\\");\\n    }\\n\\n    function setSellAtSmallPriceAccumulationFee(uint128 numerator, uint128 denominator) external onlyOwner {\\n        sellAtSmallPriceAccumulationFee = Percent.encode(numerator, denominator);\\n        require(sellAtSmallPriceAccumulationFee.lte(initialSellAtSmallPriceAccumulationFee), \\\"Ledgity: fee too high\\\");\\n    }\\n\\n    function setSellReflectionFee(uint128 numerator, uint128 denominator) external onlyOwner {\\n        sellReflectionFee = Percent.encode(numerator, denominator);\\n        require(sellReflectionFee.lte(initialSellReflectionFee), \\\"Ledgity: fee too high\\\");\\n    }\\n\\n    function setBuyAccumulationFee(uint128 numerator, uint128 denominator) external onlyOwner {\\n        buyAccumulationFee = Percent.encode(numerator, denominator);\\n        require(buyAccumulationFee.lte(initialBuyAccumulationFee), \\\"Ledgity: fee too high\\\");\\n    }\\n\\n    function burn(uint256 amount) external override returns (bool) {\\n        _burn(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    function getDexes() external view returns (address[] memory) {\\n        return _dexes.values;\\n    }\\n\\n    function getExcludedFromDexFee() external view returns (address[] memory) {\\n        return _excludedFromDexFee.values;\\n    }\\n\\n    function getExcludedFromLimits() external view returns (address[] memory) {\\n        return _excludedFromLimits.values;\\n    }\\n\\n    function isDex(address account) public view returns (bool) {\\n        return _dexes.has(account);\\n    }\\n\\n    function isExcludedFromDexFee(address account) public view returns (bool) {\\n        return _excludedFromDexFee.has(account);\\n    }\\n\\n    function isExcludedFromLimits(address account) public view returns (bool) {\\n        return _excludedFromLimits.has(account);\\n    }\\n\\n    function _calculateReflectionFee(address sender, address recipient, uint256 amount) internal override view returns (uint256) {\\n        if (isDex(recipient) && !isExcludedFromDexFee(sender)) {\\n            return sellReflectionFee.mul(amount);\\n        }\\n        return 0;\\n    }\\n\\n    function _calculateAccumulationFee(address sender, address recipient, uint256 amount) internal override view returns (uint256) {\\n        if (isDex(sender) && !isExcludedFromDexFee(recipient)) {\\n            return buyAccumulationFee.mul(amount);\\n        }\\n        if (isDex(recipient) && !isExcludedFromDexFee(sender)) {\\n            if (_getPrice() >= initialPrice.mul(10)) {\\n                return sellAccumulationFee.mul(amount);\\n            } else {\\n                return sellAtSmallPriceAccumulationFee.mul(amount);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function _swapAndLiquifyOrCollect(uint256 contractTokenBalance) private lockTheSwap {\\n        _transfer(address(this), address(reserve), contractTokenBalance);\\n        if (feeDestination == FeeDestination.Liquify) {\\n            reserve.swapAndLiquify(contractTokenBalance);\\n        } else if (feeDestination == FeeDestination.Collect) {\\n            reserve.swapAndCollect(contractTokenBalance);\\n        } else {\\n            revert(\\\"Ledgity: invalid feeDestination\\\");\\n        }\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\n        if (!isExcludedFromLimits(sender) && isDex(recipient)) {\\n            uint256 _sold;\\n            if (block.timestamp.sub(firstSellAt[sender]) > 10 minutes) {\\n                // _sold = 0;  // is already 0\\n                firstSellAt[sender] = block.timestamp;\\n            } else {\\n                _sold = soldPerPeriod[sender];\\n            }\\n            _sold = _sold.add(amount);\\n            require(_sold <= maxTransactionSize());\\n            soldPerPeriod[sender] = _sold;\\n        }\\n\\n        if (address(priceOracle) != address(0)) {\\n            priceOracle.tryUpdate();\\n        }\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        uint256 _numTokensToSwap = numTokensToSwap;\\n        if (\\n            contractTokenBalance >= _numTokensToSwap &&\\n            !inSwapAndLiquify &&\\n            sender != address(uniswapV2Pair)\\n        ) {\\n            if (contractTokenBalance > _numTokensToSwap) {\\n                contractTokenBalance = _numTokensToSwap;\\n            }\\n            _swapAndLiquifyOrCollect(contractTokenBalance);\\n        }\\n\\n        super._transfer(sender, recipient, amount);\\n    }\\n\\n    function _getPrice() private view returns (uint256) {\\n        if (address(priceOracle) == address(0)) {\\n            return 0;\\n        }\\n        return priceOracle.consult(address(this), 1e18);\\n    }\\n\\n    function maxTransactionSize() public view returns (uint256) {\\n        return maxTransactionSizePercent.mul(totalSupply());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/ReflectToken.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract ReflectToken is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    mapping (address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    uint8 private constant _decimals = 18;\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor (string memory name_, string memory symbol_, uint256 tTotal_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _tTotal = tTotal_;\\n        uint256 MAX = type(uint256).max;\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        _rOwned[_msgSender()] = _rTotal;\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    /**\\n     * @dev Amount of tokens to be charged as a reflection fee. Must be in range 0..amount.\\n     */\\n    function _calculateReflectionFee(address sender, address recipient, uint256 amount) internal virtual view returns (uint256);\\n\\n    /**\\n     * @dev Amount of tokens to be charged and stored in this contract. Must be in range 0..amount.\\n     */\\n    function _calculateAccumulationFee(address sender, address recipient, uint256 amount) internal virtual view returns (uint256);\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ReflectToken: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ReflectToken: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    function getExcluded() external view returns (address[] memory) {\\n        return _excluded;\\n    }\\n\\n    function isExcluded(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function reflect(uint256 tAmount) external {\\n        address sender = _msgSender();\\n        require(!_isExcluded[sender], \\\"ReflectToken: excluded addresses cannot call this function\\\");\\n        (uint256 rAmount,,,,,,) = _getValues(sender, address(0), tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rTotal = _rTotal.sub(rAmount);\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\\n        require(tAmount <= _tTotal, \\\"ReflectToken: amount must be less than supply\\\");\\n        address sender = _msgSender();\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,,,) = _getValues(sender, address(0), tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,,,) = _getValues(sender, address(0), tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"ReflectToken: amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function excludeAccount(address account) public onlyOwner() {\\n        require(!_isExcluded[account], \\\"ReflectToken: account is already excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeAccount(address account) public onlyOwner() {\\n        require(_isExcluded[account], \\\"ReflectToken: account is already included\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ReflectToken: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ReflectToken: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _burn(address from, uint256 tAmount) internal {\\n        uint256 rAmount = tAmount.mul(_getRate());\\n        _rOwned[from] = _rOwned[from].sub(rAmount, \\\"ReflectToken: burn amount is more than the balance\\\");\\n        if (_isExcluded[from]) {\\n            _tOwned[from] = _tOwned[from].sub(tAmount, \\\"ReflectToken: burn amount is more than the balance\\\");\\n        }\\n\\t\\t_rTotal = _rTotal.sub(rAmount);\\n\\t\\t_tTotal = _tTotal.sub(tAmount);\\n        emit Transfer(_msgSender(), address(0), tAmount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 tAmount) internal virtual {\\n        require(sender != address(0), \\\"ReflectToken: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ReflectToken: transfer to the zero address\\\");\\n        require(tAmount > 0, \\\"ReflectToken: transfer amount must be greater than zero\\\");\\n\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rAccumulation, uint256 tTransferAmount, uint256 tFee, uint256 tAccumulation) = _getValues(sender, recipient, tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        if (_isExcluded[sender]) {\\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        }\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        if (_isExcluded[recipient]) {\\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        }\\n        if (tFee != 0) {\\n            _reflectFee(rFee, tFee);\\n        }\\n        if (tAccumulation != 0) {\\n            _accumulateFee(rAccumulation, tAccumulation);\\n        }\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n\\n    function _accumulateFee(uint256 rAccumulation, uint256 tAccumulation) private {\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rAccumulation);\\n        if(_isExcluded[address(this)]) {\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tAccumulation);\\n        }\\n    }\\n\\n    function _getValues(address sender, address recipient, uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tAccumulation) = _getTValues(sender, recipient, tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rAccumulation) = _getRValues(tAmount, tFee, tAccumulation);\\n        return (rAmount, rTransferAmount, rFee, rAccumulation, tTransferAmount, tFee, tAccumulation);\\n    }\\n\\n    function _getTValues(address sender, address recipient, uint256 tAmount) private view returns (uint256, uint256, uint256) {\\n        uint256 tFee = _calculateReflectionFee(sender, recipient, tAmount);\\n        uint256 tAccumulation = _calculateAccumulationFee(sender, recipient, tAmount);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tAccumulation);\\n        return (tTransferAmount, tFee, tAccumulation);\\n    }\\n\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tAccumulation) private view returns (uint256, uint256, uint256, uint256) {\\n        uint256 currentRate = _getRate();\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rAccumulation = tAccumulation.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rAccumulation);\\n        return (rAmount, rTransferAmount, rFee, rAccumulation);\\n    }\\n\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        uint256 len = _excluded.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address account = _excluded[i];\\n            uint256 rBalance = _rOwned[account];\\n            uint256 tBalance = _tOwned[account];\\n            if (rBalance > rSupply || tBalance > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(rBalance);\\n            tSupply = tSupply.sub(tBalance);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Percent.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\nlibrary Percent {\\n    using SafeMath for uint256;\\n\\n    struct Percent {\\n        uint128 numerator;\\n        uint128 denominator;\\n    }\\n\\n    function encode(uint128 numerator, uint128 denominator) internal pure returns (Percent memory) {\\n        require(numerator <= denominator, \\\"Percent: invalid percentage\\\");\\n        return Percent(numerator, denominator);\\n    }\\n\\n    function mul(Percent memory self, uint256 value) internal pure returns (uint256) {\\n        return value.mul(uint256(self.numerator)).div(uint256(self.denominator));\\n    }\\n\\n    function lte(Percent memory self, Percent memory other) internal pure returns (bool) {\\n        return uint256(self.numerator).mul(other.denominator) <= uint256(other.numerator).mul(self.denominator);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Set.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\n\\nlibrary Set {\\n    /// @title Set data structure\\n    /// @dev Supports `add`, `remove` and `has` methods. Use `values` property to iterate over values. Do not edit properties directly.\\n    struct AddressSet {\\n        address[] values;\\n        mapping(address => uint256) _valueIndexPlusOne;\\n    }\\n\\n    /// @dev Adds a value to the set.\\n    /// @return `true` if the value was successfully added; `false` if the value was already in the set.\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        if (set._valueIndexPlusOne[value] != 0) {\\n            return false;\\n        }\\n\\t\\tset.values.push(value);\\n\\t\\tset._valueIndexPlusOne[value] = set.values.length;  // length == last_index + 1\\n        return true;\\n    }\\n\\n    /// @dev Removes a value from the set.\\n    /// @return `true` if value was successfully removed; `false` if the value was not in the set.\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        if (set._valueIndexPlusOne[value] == 0) {\\n            return false;\\n        }\\n        uint256 valueToRemoveIndexPlusOne = set._valueIndexPlusOne[value];\\n        uint256 lastValueIndex = set.values.length - 1;\\n\\n        // Swap indices\\n        set._valueIndexPlusOne[set.values[lastValueIndex]] = valueToRemoveIndexPlusOne;\\n        delete set._valueIndexPlusOne[value];\\n\\n        // Move the last value to the deleted spot\\n        set.values[valueToRemoveIndexPlusOne - 1] = set.values[lastValueIndex];\\n\\n        // Delete the duplicated last value\\n        set.values.pop();\\n        return true;\\n    }\\n\\n    /// @dev Checks if a value is in the set.\\n    /// @return `true` if the value is in the set; `false` if the value is not in the set.\\n    function has(AddressSet storage set, address value) internal view returns (bool) {\\n        return set._valueIndexPlusOne[value] != 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILedgity.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\ninterface ILedgity is IERC20 {\\n    function burn(uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReserve.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\n\\ninterface IReserve {\\n    function uniswapV2Pair() external returns (IUniswapV2Pair);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function swapAndCollect(uint256 tokenAmount) external;\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function swapAndLiquify(uint256 tokenAmount) external;\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function buyAndBurn(uint256 usdcAmount) external;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event BuyAndBurn(uint256 tokenAmount, uint256 usdcAmount);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event SwapAndCollect(uint256 tokenAmount, uint256 usdcAmount);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event SwapAndLiquify(\\n        uint256 tokenSwapped,\\n        uint256 usdcReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILedgityPriceOracle.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface ILedgityPriceOracle {\\n    /**\\n     * @dev Update average price.\\n     * @return `true` if update successful; `false` if period has not yet elapsed.\\n     */\\n    function tryUpdate() external returns (bool);\\n\\n    /**\\n     * @dev Update average price. Reverts if period has not yet elapsed.\\n     */\\n    function update() external;\\n\\n    /**\\n     * @dev Returns the price of tokens.\\n     */\\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\nimport \\\"./Context.sol\\\";\\n\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () public {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.12;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDestination\",\"outputs\":[{\"internalType\":\"enum Ledgity.FeeDestination\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstSellAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDexes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcluded\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedFromDexFee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcludedFromLimits\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBuyAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellAtSmallPriceAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellReflectionFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceOracleAddress\",\"type\":\"address\"}],\"name\":\"initializePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reserveAddress\",\"type\":\"address\"}],\"name\":\"initializeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isDex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDexFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionSizePercent\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract ILedgityPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAtSmallPriceAccumulationFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReflectionFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setBuyAccumulationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"dex\",\"type\":\"bool\"}],\"name\":\"setDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Ledgity.FeeDestination\",\"name\":\"fd\",\"type\":\"uint8\"}],\"name\":\"setFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialPrice\",\"type\":\"uint256\"}],\"name\":\"setInitialPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromDexFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setMaxTransactionSizePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensToSwap\",\"type\":\"uint256\"}],\"name\":\"setNumTokensToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setSellAccumulationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setSellAtSmallPriceAccumulationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"numerator\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"denominator\",\"type\":\"uint128\"}],\"name\":\"setSellReflectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"soldPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Ledgity", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}