{"SourceCode": "/*\r\nOVERLORD - The World's First NFT-Integrated Mobile RPG\r\n\r\nWebsite: https://overlord.world\r\nAnnouncements: https://t.me/OverlordAnn\r\nTelegram: https://t.me/overlordbsc\r\nTwitter: https://twitter.com/overlordbsc\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"add: +\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"sub: -\");\r\n    }\r\n\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"mul: *\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"div: /\");\r\n    }\r\n\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        return mod(a, b, \"mod: %\");\r\n    }\r\n\r\n    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// y = f(x)\r\n\r\n// 5 = f(10)\r\n// 185 = f(365)\r\n//y = A^x - X\r\n//y = 1.87255 + 0.2985466*x + 0.001419838*x^2\r\n\r\n\r\ninterface SavingInterface {\r\n    function votingPowerOf(address acc, uint256 until) external view returns(uint256);\r\n}\r\n\r\ncontract LORDSaving is Ownable, SavingInterface {\r\n    using SafeMath for uint256;\r\n    IERC20 public LORD;\r\n\r\n    bool isClosed = false;\r\n\r\n    // quadratic reward curve constants\r\n    // a + b*x + c*x^2\r\n    uint256 public A = 187255; // 1.87255\r\n    uint256 public B = 29854;  // 0.2985466*x\r\n    uint256 public C = 141;    // 0.001419838*x^2\r\n\r\n    uint256 public maxDays = 365;\r\n    uint256 public minDays = 10;\r\n\r\n    uint256 public totalSaved = 0;\r\n    uint256 public totalRewards = 0;\r\n\r\n    uint256 public earlyExit = 0;\r\n\r\n    struct SaveInfo {\r\n        uint256 reward;\r\n        uint256 initial;\r\n        uint256 payday;\r\n        uint256 startday;\r\n    }\r\n\r\n    mapping (address=>SaveInfo) public saves;\r\n\r\n    constructor(address _LORD) public {\r\n        LORD = IERC20(_LORD);\r\n    }\r\n\r\n    function deposit(uint256 _amount, uint256 _days) public {\r\n        require(_days > minDays, \"less than minimum saving period\");\r\n        require(_days < maxDays, \"more than maximum saving period\");\r\n        require(saves[msg.sender].payday == 0, \"already saved\");\r\n        require(_amount > 100, \"amount to small\");\r\n        require(!isClosed, \"saving is closed\");\r\n\r\n        // calculate reward\r\n        uint256 _reward = calculateReward(_amount, _days);\r\n\r\n        // contract must have funds to keep this commitment\r\n        require(LORD.balanceOf(address(this)) > totalOwedValue().add(_reward).add(_amount), \"insufficient contract bal\");\r\n\r\n        require(LORD.transferFrom(msg.sender, address(this), _amount), \"transfer failed\");\r\n\r\n        saves[msg.sender].payday = block.timestamp.add(_days * (1 days));\r\n        saves[msg.sender].reward = _reward;\r\n        saves[msg.sender].startday = block.timestamp;\r\n        saves[msg.sender].initial = _amount;\r\n\r\n        // update stats\r\n        totalSaved = totalSaved.add(_amount);\r\n        totalRewards = totalRewards.add(_reward);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(owedBalance(msg.sender) > 0, \"nothing to withdraw\");\r\n        require(block.timestamp > saves[msg.sender].payday.sub(earlyExit), \"too early\");\r\n\r\n        uint256 owed = saves[msg.sender].reward.add(saves[msg.sender].initial);\r\n\r\n        // update stats\r\n        totalSaved = totalSaved.sub(saves[msg.sender].initial);\r\n        totalRewards = totalRewards.sub(saves[msg.sender].reward);\r\n\r\n        saves[msg.sender].initial = 0;\r\n        saves[msg.sender].reward = 0;\r\n        saves[msg.sender].payday = 0;\r\n        saves[msg.sender].startday = 0;\r\n\r\n        require(LORD.transfer(msg.sender, owed), \"transfer failed\");\r\n    }\r\n\r\n    function calculateReward(uint256 _amount, uint256 _days) public view returns (uint256) {\r\n        uint256 _multiplier = _quadraticRewardCurveY(_days);\r\n        uint256 _AY = _amount.mul(_multiplier);\r\n        return _AY.div(10000000);\r\n\r\n    }\r\n\r\n    // a + b*x + c*x^2\r\n    function _quadraticRewardCurveY(uint256 _x) public view returns (uint256) {\r\n        uint256 _bx = _x.mul(B);\r\n        uint256 _x2 = _x.mul(_x);\r\n        uint256 _cx2 = C.mul(_x2);\r\n        return A.add(_bx).add(_cx2);\r\n    }\r\n\r\n    // helpers:\r\n    function totalOwedValue() public view returns (uint256) {\r\n        return totalSaved.add(totalRewards);\r\n    }\r\n\r\n    function owedBalance(address acc) public view returns(uint256) {\r\n        return saves[acc].initial.add(saves[acc].reward);\r\n    }\r\n\r\n    function votingPowerOf(address acc, uint256 until) external override view returns(uint256) {\r\n        if (saves[acc].payday > until) {\r\n            return 0;\r\n        }\r\n\r\n        return owedBalance(acc);\r\n    }\r\n\r\n    // owner functions:\r\n    function setLimits(uint256 _minDays, uint256 _maxDays) public onlyOwner {\r\n        minDays = _minDays;\r\n        maxDays = _maxDays;\r\n    }\r\n\r\n    function setCurve(uint256 _A, uint256 _B, uint256 _C) public onlyOwner {\r\n        A = _A;\r\n        B = _B;\r\n        C = _C;\r\n    }\r\n\r\n    function setEarlyExit(uint256 _earlyExit) public onlyOwner {\r\n        require(_earlyExit < 2880000, \"too big\");\r\n        close(true);\r\n        earlyExit = _earlyExit;\r\n    }\r\n\r\n    function close(bool closed) public onlyOwner {\r\n        isClosed = closed;\r\n    }\r\n\r\n    function ownerRewithdraw(uint256 _amount) public onlyOwner {\r\n        require(_amount < LORD.balanceOf(address(this)).sub(totalOwedValue()), \"cannot withdraw owed funds\");\r\n        LORD.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function flushBNB() public onlyOwner {\r\n        uint256 bal = address(this).balance.sub(1);\r\n        msg.sender.transfer(bal);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LORD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"B\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"C\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LORD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_x\",\"type\":\"uint256\"}],\"name\":\"_quadraticRewardCurveY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"closed\",\"type\":\"bool\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flushBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"owedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerRewithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"saves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startday\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_C\",\"type\":\"uint256\"}],\"name\":\"setCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earlyExit\",\"type\":\"uint256\"}],\"name\":\"setEarlyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDays\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOwedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSaved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"votingPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LORDSaving", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002daf1a83aa348afbcbc73f63bb5ee3154d9f5776", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9f41c6e86921fcf7750529c31aeb983ee91c826ce6ba721219e8c7a767aaf4ab"}