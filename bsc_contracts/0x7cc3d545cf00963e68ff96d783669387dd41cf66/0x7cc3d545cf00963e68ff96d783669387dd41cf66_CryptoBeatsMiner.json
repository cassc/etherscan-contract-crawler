{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BonusHander/IBonusHander.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IBonusHander {\\n\\n    struct NFT_Data {\\n        address owner;\\n        uint id;\\n        uint getType;\\n        bool used;\\n    }\\n\\n    function getMyPercent(address _user, uint _myDivider) external view returns(uint);\\n\\n    function bonusByType(uint _type) external view returns(uint);\\n\\n    function getNFTaddress() external view returns(address);\\n\\n    function useMybonus(address _user) external returns (uint _percent, uint _divider);\\n\\n    function getMyBonus(address _user) external view returns (uint _percent, uint _divider);\\n\\n    function getNftData(uint _id) external view returns (NFT_Data memory);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/cryptoBeatsMiner/CryptoBeatsMiner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../BonusHander/IBonusHander.sol\\\";\\nimport \\\"./IVaultV5.sol\\\";\\nimport \\\"./IVaultReceiver.sol\\\";\\nimport \\\"./IbnbBeatsV5.sol\\\";\\n\\ncontract CryptoBeatsMiner is Ownable, Pausable, ReentrancyGuard, IbnbBeatsV5, IVaultReceiver {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    IERC20 public TOKEN;\\n    IERC20 public SWAP_TOKEN;\\n    IVaultV5 public vault;\\n    IBonusHander public bonusHander;\\n\\n    uint private constant BEATS_TO_HATCH_1MINERS = 1080000; //for final version should be seconds in a day\\n    uint private constant PSN = 10000;\\n    uint private constant PSNH = 5000;\\n    uint public constant PERCENTS_DIVIDER = 10_000; // 100% = 10000, 10% = 1000, 1% = 100, 0.1% = 10, 0.01% = 1\\n    uint public constant MAX_WITHDRAW = 20000;\\n    // MUTIPLIER_BASE = 6000 = 60%\\n    uint public constant MUTIPLIER_BASE = 6000;\\n    uint public constant MAX_BONUS = 1500;\\n\\n    uint public constant REFERRER_PERCENTS_LENGTH = 1;\\n    uint public constant FEE_ARRAY_LENGTH = 4;\\n    uint[REFERRER_PERCENTS_LENGTH] public REFERRER_PERCENTS = [\\n        2000 //1 level\\n    ];\\n\\n    uint public marketBeats;\\n    uint private players;\\n    uint public flatFee;\\n    uint public devFeeFlat;\\n    uint public constant MAX_FLAT_FEE = 0.0094 ether;\\n\\n    uint public initDate;\\n\\n    mapping(address => User) public users;\\n\\n    mapping(address => UserWithdrawData) public userWithdrawData;\\n    mapping(uint => address) public userWithdrawDataIndex;\\n    uint public userWithdrawDataLength;\\n\\n    uint public totalInvested;\\n    uint public constant TIME_STEP = 1 days;\\n\\n    address public devWallet;\\n    address public tWallet;\\n    address public oWallet;\\n    address public mWallet;\\n    address public defWAllet;\\n\\n    uint public constant DEV_FEE = 100;\\n    uint public constant TWALLET_FEE = 100;\\n    uint public constant OWALLET_FEE = 100;\\n    uint public constant MWALLET_FEE = 300;\\n\\n    uint public constant BNB_TO_PREMIUM1 = 1_000 ether;\\n    uint public constant BNB_TO_PREMIUM2 = 2_000 ether;\\n    uint public constant BNB_TO_PREMIUM3 = 3_000 ether;\\n\\n    EnumerableSet.AddressSet internal premiumUsers1;\\n    EnumerableSet.AddressSet internal premiumUsers2;\\n    EnumerableSet.AddressSet internal premiumUsers3;\\n\\n    uint public constant premium1Bonus = 1000;\\n    uint public constant premium2Bonus = 2000;\\n    uint public constant premium3Bonus = 3000;\\n    // 1:40\\n    uint public constant CONVERTION_RATE = 40;\\n    bool public isSwapEnabled = true;\\n\\n    event TotalWithdraw(address indexed user, uint amount);\\n\\n    constructor(\\n        address _token,\\n        address _swapToken,\\n        address _bonusHander,\\n        address _vault,\\n        address _dev,\\n        address _tWallet,\\n        address _oWallet,\\n        address _mWallet,\\n        address _defWallet\\n    ) Ownable(_dev) {\\n        TOKEN = IERC20(_token);\\n        SWAP_TOKEN = IERC20(_swapToken);\\n        bonusHander = IBonusHander(_bonusHander);\\n        require(\\n            bonusHander.bonusByType(1) != 0,\\n            \\\"CryptoBeatsMiner: bonusHander error\\\"\\n        );\\n        vault = IVaultV5(_vault);\\n        vault.getBalance();\\n        require(Ownable(_vault).owner() == msg.sender, \\\"CryptoBeatsMiner: vault error\\\");\\n        devWallet = _dev;\\n        tWallet = _tWallet;\\n        oWallet = _oWallet;\\n        mWallet = _mWallet;\\n        defWAllet = _defWallet;\\n        marketBeats = 108000000000;\\n        flatFee = 0.0047 ether;\\n        devFeeFlat = 1_000;\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n        initDate = block.timestamp;\\n    }\\n\\n    function setSwapEnabled(bool _isSwapEnabled) external onlyOwner {\\n        isSwapEnabled = _isSwapEnabled;\\n    }\\n\\n    function setDevFee(uint256 _newDevFee) external onlyOwner {\\n        require(_newDevFee <= PERCENTS_DIVIDER, \\\"Max dev fee\\\");\\n        devFeeFlat = _newDevFee;\\n    }\\n\\n    function setFlatFee(uint256 _flatFee) external onlyOwner {\\n        require(_flatFee <= MAX_FLAT_FEE, \\\"Max flat fee\\\");\\n        flatFee = _flatFee;\\n    }\\n\\n    function secondsFromInit() public view returns (uint) {\\n        if (initDate == 0) {\\n            return 0;\\n        }\\n        return block.timestamp - initDate;\\n    }\\n\\n    function getVault() external view override returns (address) {\\n        return address(vault);\\n    }\\n\\n    function daysFromInit() external view returns (uint) {\\n        return secondsFromInit() / TIME_STEP;\\n    }\\n\\n    modifier checkUser_() {\\n        require(checkUser(msg.sender), \\\"try again later 1\\\");\\n        _;\\n    }\\n\\n    modifier enoughFee() {\\n        require(msg.value >= flatFee, \\\"Flat fee\\\");\\n        _;\\n    }\\n\\n    function checkUser(address _user) public view returns (bool) {\\n        uint check = block.timestamp - users[_user].checkpoint;\\n        if (check > TIME_STEP) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getDateForSelling(address adr) external view returns (uint) {\\n        return users[adr].checkpoint + TIME_STEP;\\n    }\\n\\n    function reInvest() external payable checkUser_ nonReentrant whenNotPaused {\\n        _payFee();\\n        calculateReinvest();\\n    }\\n\\n    function hatchBeats(uint beatsUsed, User storage user) private {\\n        uint newMiners = beatsUsed / BEATS_TO_HATCH_1MINERS;\\n        user.hatcheryMiners += newMiners;\\n        delete user.claimedBeats;\\n        user.lastHatch = block.timestamp;\\n        user.checkpoint = block.timestamp;\\n        //boost market to nerf miners hoarding\\n        marketBeats += beatsUsed / 5;\\n    }\\n\\n    function calculateMyBeats(\\n        address adr\\n    ) public view returns (uint hasBeats, uint beatValue, uint beats) {\\n        uint beats_ = getMyBeats(adr);\\n        uint hasBeats_ = beats_; // beats for reinvest\\n        uint beatValue_; // beat value for withdraw\\n        (uint multiplier, uint divider) = getMyBonus(adr);\\n        beatValue_ = calculateBeatSell((hasBeats_ * multiplier) / divider);\\n        hasBeats_ -= (hasBeats_ * multiplier) / divider;\\n        uint remain = getUserRemainProfit(adr);\\n        if (remain == 0) {\\n            beatValue_ = 0;\\n        } else if (remain < beatValue_) {\\n            beatValue_ = remain;\\n        }\\n\\n        hasBeats = hasBeats_;\\n        beatValue = beatValue_;\\n        beats = calculateBeatSell(beats_); // beats total value\\n    }\\n\\n    function sell() external payable checkUser_ nonReentrant whenNotPaused {\\n        _payFee();\\n        (uint hasBeats, uint beatValue, ) = calculateMyBeats(msg.sender);\\n        require(beatValue > 0, \\\"No beats to sell\\\");\\n        (uint fee, FeeStruct[FEE_ARRAY_LENGTH] memory feeStruct) = withdrawFee(\\n            beatValue\\n        );\\n        require((beatValue - fee) > 0, \\\"Amount don't allowed\\\");\\n        User storage user = users[msg.sender];\\n        // uint beatsUsed = hasBeats;\\n        uint newMiners = hasBeats / BEATS_TO_HATCH_1MINERS;\\n        user.hatcheryMiners += newMiners;\\n        delete user.claimedBeats;\\n        user.lastHatch = block.timestamp;\\n        user.checkpoint = block.timestamp;\\n\\n        marketBeats += hasBeats;\\n        user.withdraw += beatValue;\\n        uint userWithdraw = beatValue;\\n        if (userWithdrawData[msg.sender].user == address(0)) {\\n            userWithdrawDataIndex[userWithdrawDataLength] = msg.sender;\\n            userWithdrawDataLength += 1;\\n            userWithdrawData[msg.sender].user = msg.sender;\\n        }\\n        userWithdrawData[msg.sender].amount += userWithdraw;\\n        userWithdrawData[msg.sender].referrer = user.referrer;\\n        premiumUsersHandle(user, getInvestSumReinvest(msg.sender));\\n        payFees(feeStruct);\\n        if (getUserRemainProfit(msg.sender) == 0) {\\n            delete users[msg.sender].claimedBeats;\\n            delete users[msg.sender].hatcheryMiners;\\n        }\\n        transferHandler(payable(msg.sender), beatValue - fee);\\n        emit TotalWithdraw(msg.sender, user.withdraw);\\n    }\\n\\n    function premiumUsersHandle(User storage user, uint userWithdraw) private {\\n        if (\\n            userWithdraw >= BNB_TO_PREMIUM3 &&\\n            !premiumUsers3.contains(msg.sender)\\n        ) {\\n            premiumUsers3.add(msg.sender);\\n            if (user.premiumBonus < premium3Bonus) {\\n                user.premiumBonus = premium3Bonus;\\n            }\\n        } else if (\\n            userWithdraw >= BNB_TO_PREMIUM2 &&\\n            !premiumUsers2.contains(msg.sender)\\n        ) {\\n            premiumUsers2.add(msg.sender);\\n            if (user.premiumBonus < premium2Bonus) {\\n                user.premiumBonus = premium2Bonus;\\n            }\\n        } else if (\\n            userWithdraw >= BNB_TO_PREMIUM1 &&\\n            !premiumUsers1.contains(msg.sender)\\n        ) {\\n            premiumUsers1.add(msg.sender);\\n            if (user.premiumBonus < premium1Bonus) {\\n                user.premiumBonus = premium1Bonus;\\n            }\\n        }\\n    }\\n\\n    function calculateReinvest() private {\\n        (uint hasBeats, uint beatValue, ) = calculateMyBeats(msg.sender);\\n        User storage user = users[msg.sender];\\n        uint beatsUsed = hasBeats;\\n        uint newMiners = beatsUsed / BEATS_TO_HATCH_1MINERS;\\n        user.hatcheryMiners += newMiners;\\n        delete user.claimedBeats;\\n        user.lastHatch = block.timestamp;\\n        user.checkpoint = block.timestamp;\\n\\n        marketBeats += hasBeats;\\n        user.reinvest += beatValue;\\n        premiumUsersHandle(user, getInvestSumReinvest(msg.sender));\\n        buyHandler(users[msg.sender].referrals, beatValue, false, false);\\n    }\\n\\n    function beatsRewards(address adr) external view returns (uint) {\\n        uint hasBeats = getMyBeats(adr);\\n        uint beatValue = calculateBeatSell(hasBeats);\\n        return beatValue;\\n    }\\n\\n    function referrerCommission(\\n        uint _amount,\\n        uint level\\n    ) private view returns (uint) {\\n        return (_amount * REFERRER_PERCENTS[level]) / PERCENTS_DIVIDER;\\n    }\\n\\n    function buy(\\n        address ref,\\n        uint amount,\\n        bool _useBonus\\n    ) external payable nonReentrant whenNotPaused {\\n        _payFee();\\n        TOKEN.transferFrom(msg.sender, address(this), amount);\\n        buyHandler(ref, amount, true, _useBonus);\\n    }\\n\\n    function SwapAndBuy(\\n        address ref,\\n        uint amount,\\n        bool _useBonus\\n    ) external payable nonReentrant whenNotPaused {\\n        require(isSwapEnabled, \\\"Swap disabled\\\");\\n        _payFee();\\n        // SWAP_TOKEN.approve(address(vault), amount);\\n        // vault.deposit(SWAP_TOKEN, amount);\\n        SWAP_TOKEN.transferFrom(msg.sender, address(vault), amount);\\n        require(TOKEN.balanceOf(address(vault)) >= amount, \\\"Vault founds\\\");\\n        vault.safeTransferToken(TOKEN, address(this), amount * CONVERTION_RATE);\\n        buyHandler(ref, amount, true, _useBonus);\\n    }\\n\\n    function buyHandler(address ref, uint investAmout, bool payFee, bool _useBonus) private {\\n        User storage user = users[msg.sender];\\n        if (user.referrals == address(0) && msg.sender != defWAllet) {\\n            if (\\n                ref == msg.sender ||\\n                users[ref].referrals == msg.sender ||\\n                msg.sender == users[ref].referrals\\n            ) {\\n                user.referrals = defWAllet;\\n            } else {\\n                user.referrals = ref;\\n            }\\n            if (user.referrals != msg.sender && user.referrals != address(0)) {\\n                address upline = user.referrals;\\n                address old = msg.sender;\\n                for (uint i = 0; i < REFERRER_PERCENTS_LENGTH; i++) {\\n                    if (\\n                        upline != address(0) &&\\n                        upline != old &&\\n                        users[upline].referrals != old\\n                    ) {\\n                        users[upline].referrer[i] += 1;\\n                        old = upline;\\n                        upline = users[upline].referrals;\\n                    } else break;\\n                }\\n            }\\n        }\\n\\n        uint beatsBought = calculateBeatBuy(\\n            investAmout,\\n            getBalance() - investAmout\\n        );\\n        (uint beatsFee, ) = devFee(beatsBought);\\n        beatsBought = beatsBought - beatsFee;\\n        if (payFee) {\\n            (, FeeStruct[FEE_ARRAY_LENGTH] memory feeStruct) = devFee(\\n                investAmout\\n            );\\n            payFees(feeStruct);\\n        }\\n\\n        if (user.invest == 0) {\\n            user.checkpoint = block.timestamp;\\n            players = players + 1;\\n        }\\n\\n        uint _invest = investAmout;\\n        if (_useBonus) {\\n            (uint multiplier, uint divider) = bonusHander.useMybonus(msg.sender);\\n            uint _investBonus = (investAmout * multiplier) / divider;\\n            uint maxInvest = (investAmout * MAX_BONUS) / PERCENTS_DIVIDER;\\n            uint boughtBonus = (beatsBought * multiplier) / PERCENTS_DIVIDER;\\n            if (_investBonus > maxInvest) {\\n                _investBonus = maxInvest;\\n            }\\n            if (boughtBonus > maxInvest) {\\n                boughtBonus = maxInvest;\\n            }\\n            _invest += _investBonus;\\n            beatsBought += boughtBonus;\\n        }\\n        user.invest += _invest;\\n        user.claimedBeats += beatsBought;\\n        hatchBeats(getMyBeats(msg.sender), user);\\n        payCommision(user, investAmout);\\n        totalInvested += investAmout;\\n    }\\n\\n    function payCommision(User storage user, uint investAmout) private {\\n        if (user.referrals != msg.sender && user.referrals != address(0)) {\\n            address upline = user.referrals;\\n            address old = msg.sender;\\n            if (upline == address(0)) {\\n                upline = defWAllet;\\n            }\\n            for (uint i = 0; i < REFERRER_PERCENTS_LENGTH; i++) {\\n                if (\\n                    (upline != address(0) &&\\n                        upline != old &&\\n                        users[upline].referrals != old) || upline == defWAllet\\n                ) {\\n                    uint amountReferrer = referrerCommission(investAmout, i);\\n                    users[upline].amountBNBReferrer =\\n                        users[upline].amountBNBReferrer +\\n                        amountReferrer;\\n\\n                    users[upline].totalRefDeposits =\\n                        users[upline].totalRefDeposits +\\n                        investAmout;\\n\\n                    transferHandler(payable(upline), amountReferrer);\\n                    upline = users[upline].referrals;\\n                    old = user.referrals;\\n                    if (upline == address(0)) {\\n                        upline = defWAllet;\\n                    }\\n                } else break;\\n            }\\n        }\\n    }\\n\\n    function calculateTrade(\\n        uint rt,\\n        uint rs,\\n        uint bs\\n    ) private pure returns (uint) {\\n        uint a = PSN * bs;\\n        uint b = PSNH;\\n\\n        uint c = PSN * rs;\\n        uint d = PSNH * rt;\\n\\n        uint h = (c + d) / rt;\\n        return a / (b + h);\\n    }\\n\\n    function calculateBeatSell(uint beats) private view returns (uint) {\\n        uint _cal = calculateTrade(beats, marketBeats, getBalance());\\n        return _cal;\\n    }\\n\\n    function calculateBeatBuy(\\n        uint eth,\\n        uint contractBalance\\n    ) public view returns (uint) {\\n        return calculateTrade(eth, contractBalance, marketBeats);\\n    }\\n\\n    function calculateBeatBuySimple(uint eth) external view returns (uint) {\\n        return calculateBeatBuy(eth, getBalance());\\n    }\\n\\n    function devFee(\\n        uint _amount\\n    )\\n        private\\n        view\\n        returns (uint _totalFee, FeeStruct[FEE_ARRAY_LENGTH] memory _feeStruct)\\n    {\\n        uint dFee = (_amount * DEV_FEE) / PERCENTS_DIVIDER;\\n        uint tFee = (_amount * TWALLET_FEE) / PERCENTS_DIVIDER;\\n        uint oFee = (_amount * OWALLET_FEE) / PERCENTS_DIVIDER;\\n        uint mFee = (_amount * MWALLET_FEE) / PERCENTS_DIVIDER;\\n\\n        _feeStruct[0] = FeeStruct(devWallet, dFee);\\n        _feeStruct[1] = FeeStruct(tWallet, tFee);\\n        _feeStruct[2] = FeeStruct(oWallet, oFee);\\n        _feeStruct[3] = FeeStruct(mWallet, mFee);\\n\\n        _totalFee = dFee + tFee;\\n        _totalFee += oFee;\\n        _totalFee += mFee;\\n\\n        return (_totalFee, _feeStruct);\\n    }\\n\\n    function withdrawFee(\\n        uint _amount\\n    )\\n        private\\n        view\\n        returns (uint _totalFee, FeeStruct[FEE_ARRAY_LENGTH] memory _feeStruct)\\n    {\\n        return devFee(_amount);\\n    }\\n\\n    function getBalance() public view returns (uint) {\\n        return TOKEN.balanceOf(address(this));\\n    }\\n\\n    function getMyMiners(address adr) external view returns (uint) {\\n        User memory user = users[adr];\\n        return user.hatcheryMiners;\\n    }\\n\\n    function getPlayers() external view returns (uint) {\\n        return players;\\n    }\\n\\n    function getMyBeats(address adr) public view returns (uint) {\\n        User memory user = users[adr];\\n        return user.claimedBeats + getBeatsSinceLastHatch(adr);\\n    }\\n\\n    function getBeatsSinceLastHatch(address adr) public view returns (uint) {\\n        User memory user = users[adr];\\n        uint secondsPassed = min(\\n            BEATS_TO_HATCH_1MINERS,\\n            block.timestamp - user.lastHatch\\n        );\\n        return secondsPassed * user.hatcheryMiners;\\n    }\\n\\n    function min(uint a, uint b) private pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function getSellStars(\\n        address user_\\n    ) external view returns (uint beatValue) {\\n        uint hasBeats = getMyBeats(user_);\\n        beatValue = calculateBeatSell(hasBeats);\\n    }\\n\\n    function getPublicData()\\n        external\\n        view\\n        returns (uint _totalInvest, uint _balance)\\n    {\\n        _totalInvest = totalInvested;\\n        _balance = getBalance();\\n    }\\n\\n    function userData(\\n        address user_\\n    )\\n        external\\n        view\\n        returns (\\n            uint lastHatch_,\\n            uint rewards_,\\n            uint amountAvailableReinvest_,\\n            uint availableWithdraw_,\\n            uint beatsMiners_,\\n            address referrals_,\\n            uint[REFERRER_PERCENTS_LENGTH] memory referrer,\\n            uint checkpoint,\\n            uint referrerBNB,\\n            uint referrerBEATS,\\n            uint totalRefDeposits\\n        )\\n    {\\n        User memory user = users[user_];\\n        (, uint beatValue, uint beats) = calculateMyBeats(user_);\\n        // (, amountAvailableReinvest_,) = calculateMyBeats(user_);\\n        amountAvailableReinvest_ = beatValue;\\n        lastHatch_ = user.lastHatch;\\n        referrals_ = user.referrals;\\n        rewards_ = beats;\\n        availableWithdraw_ = beatValue;\\n        beatsMiners_ = getBeatsSinceLastHatch(user_);\\n        referrer = user.referrer;\\n        checkpoint = user.checkpoint;\\n        referrerBNB = user.amountBNBReferrer;\\n        referrerBEATS = user.amountBEATSReferrer;\\n        totalRefDeposits = user.totalRefDeposits;\\n    }\\n\\n    function premiumUsers(uint level) external view returns (address[] memory) {\\n        if (level == 1) {\\n            return premiumUsers1.values();\\n        } else if (level == 2) {\\n            return premiumUsers2.values();\\n        } else if (level == 3) {\\n            return premiumUsers3.values();\\n        } else {\\n            return new address[](0);\\n        }\\n    }\\n\\n    function getPremiumUsersLength(uint level) external view returns (uint) {\\n        if (level == 1) {\\n            return premiumUsers1.length();\\n        } else if (level == 2) {\\n            return premiumUsers2.length();\\n        } else if (level == 3) {\\n            return premiumUsers3.length();\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getPremiumUsersAt(\\n        uint level,\\n        uint index\\n    ) external view returns (address) {\\n        if (level == 1) {\\n            return premiumUsers1.at(index);\\n        } else if (level == 2) {\\n            return premiumUsers2.at(index);\\n        } else if (level == 3) {\\n            return premiumUsers3.at(index);\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function payFees(FeeStruct[FEE_ARRAY_LENGTH] memory _fees) internal {\\n        for (uint i = 0; i < _fees.length; i++) {\\n            if (_fees[i].amount > 0) {\\n                // payable(_fees[i].wallet).transfer(_fees[i].amount);\\n                transferHandler(payable(_fees[i].wallet), _fees[i].amount);\\n            }\\n        }\\n    }\\n\\n    function getDate() external view returns (uint) {\\n        return block.timestamp;\\n    }\\n\\n    function getMyBonus(\\n        address adr\\n    ) public view returns (uint multiplier, uint divider) {\\n        divider = PERCENTS_DIVIDER;\\n\\n        multiplier = MUTIPLIER_BASE + getMyPremiumBonus(adr);\\n\\n        if (multiplier > divider) {\\n            multiplier = divider;\\n        }\\n    }\\n\\n    function transferHandler(address adr, uint amount) private {\\n        if (amount > getBalance()) {\\n            amount = getBalance();\\n        }\\n        if(adr == defWAllet) {\\n            uint toDev = (amount * 15) / 100;\\n            TOKEN.transfer(adr, amount - toDev);\\n            TOKEN.transfer(devWallet, toDev);\\n        } else {\\n            TOKEN.transfer(adr, amount);\\n        }\\n    }\\n\\n    function getUserWithdrawData()\\n        external\\n        view\\n        returns (UserWithdrawData[] memory)\\n    {\\n        UserWithdrawData[] memory result = new UserWithdrawData[](\\n            userWithdrawDataLength\\n        );\\n        for (uint i = 0; i < userWithdrawDataLength; i++) {\\n            result[i] = userWithdrawData[userWithdrawDataIndex[i]];\\n        }\\n        return result;\\n    }\\n\\n    function UserWithdrawDataRange(\\n        uint limit,\\n        uint offset\\n    ) external view returns (UserWithdrawData[] memory) {\\n        UserWithdrawData[] memory result = new UserWithdrawData[](limit);\\n        for (uint i = 0; i < limit; i++) {\\n            result[i] = userWithdrawData[userWithdrawDataIndex[i + offset]];\\n        }\\n        return result;\\n    }\\n\\n    function getInvestSumReinvest(address adr) public view returns (uint) {\\n        return users[adr].withdraw + users[adr].reinvest;\\n    }\\n\\n    function getUserRemainProfit(address _user) public view returns (uint) {\\n        User memory user = users[_user];\\n        uint userWithdraw = user.withdraw;\\n        uint userInvest = user.invest;\\n        uint maxWithdraw = (userInvest * MAX_WITHDRAW) / PERCENTS_DIVIDER;\\n        if (userWithdraw >= maxWithdraw) {\\n            return 0;\\n        }\\n        return maxWithdraw - userWithdraw;\\n    }\\n\\n    function _payFee() internal enoughFee {\\n        if (flatFee > 0) {\\n            uint256 devFeeAmount = (msg.value * devFeeFlat) / PERCENTS_DIVIDER;\\n            uint256 feeAmount = msg.value - devFeeAmount;\\n            payable(oWallet).transfer(feeAmount);\\n            payable(devWallet).transfer(devFeeAmount);\\n        }\\n    }\\n\\n    function getMyPremiumBonus(address adr) public view returns (uint) {\\n        uint beats_ = getMyBeats(adr);\\n        uint beatValue_ = calculateBeatSell((beats_ * MUTIPLIER_BASE) / PERCENTS_DIVIDER);\\n        uint userWithdraw = getInvestSumReinvest(adr);\\n        uint bonusPercent;\\n        beatValue_ += userWithdraw;\\n\\n        if (beatValue_ >= BNB_TO_PREMIUM3) {\\n            bonusPercent = premium3Bonus;\\n        } else if (beatValue_ >= BNB_TO_PREMIUM2) {\\n            bonusPercent = premium2Bonus;\\n        } else if (beatValue_ >= BNB_TO_PREMIUM1) {\\n            bonusPercent = premium1Bonus;\\n        }\\n\\n        if (users[adr].premiumBonus > bonusPercent) {\\n            bonusPercent = users[adr].premiumBonus;\\n        }\\n        return bonusPercent;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/cryptoBeatsMiner/IbnbBeatsV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IbnbBeatsV5 {\\n\\n    struct FeeStruct {\\n        address wallet;\\n        uint amount;\\n    }\\n\\n    struct User {\\n        uint invest;\\n        uint withdraw;\\n        uint reinvest;\\n        uint hatcheryMiners;\\n        uint claimedBeats;\\n        uint lastHatch;\\n        uint checkpoint;\\n        address referrals;\\n        uint[1] referrer;\\n        uint amountBNBReferrer;\\n        uint amountBEATSReferrer;\\n        uint totalRefDeposits;\\n        uint premiumBonus;\\n    }\\n\\n    struct UserWithdrawData {\\n        address user;\\n        uint amount;\\n        uint[1] referrer;\\n    }\\n\\n    function buy(address ref, uint amount, bool _useBonus) external payable;\\n\\n    function SwapAndBuy(address ref, uint amount, bool _useBonus)  external payable;\\n\\n    function sell() external payable;\\n\\n    function reInvest() external payable;\\n\\n    function flatFee() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/cryptoBeatsMiner/IVaultReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IVaultReceiver {\\n    function getVault() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/cryptoBeatsMiner/IVaultV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVaultV5 {\\n    function safeTransferToken(IERC20 from, address to, uint amount) external;\\n\\n    function safeTransfer(address _to, uint _value) external;\\n\\n    function getTokenAddressBalance(address token) external view returns (uint);\\n\\n    function getTokenBalance(IERC20 token) external view returns (uint);\\n\\n    function getBalance() external view returns (uint);\\n\\n    function safeTransferAdmin(address from, address to, uint amount) external;\\n\\n    function safeTransferAdmin(address _to, uint _value) external;\\n\\n    function deposit(IERC20 from, uint amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusHander\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TotalWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNB_TO_PREMIUM1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BNB_TO_PREMIUM2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BNB_TO_PREMIUM3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONVERTION_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ARRAY_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FLAT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUTIPLIER_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MWALLET_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWALLET_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRER_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRER_PERCENTS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useBonus\",\"type\":\"bool\"}],\"name\":\"SwapAndBuy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TWALLET_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"UserWithdrawDataRange\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[1]\",\"name\":\"referrer\",\"type\":\"uint256[1]\"}],\"internalType\":\"struct IbnbBeatsV5.UserWithdrawData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"beatsRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusHander\",\"outputs\":[{\"internalType\":\"contract IBonusHander\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useBonus\",\"type\":\"bool\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateBeatBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateBeatBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"calculateMyBeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hasBeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beatValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beats\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysFromInit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defWAllet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeFlat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBeatsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getDateForSelling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getInvestSumReinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyBeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divider\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyPremiumBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPremiumUsersAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getPremiumUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getSellStars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beatValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRemainProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserWithdrawData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[1]\",\"name\":\"referrer\",\"type\":\"uint256[1]\"}],\"internalType\":\"struct IbnbBeatsV5.UserWithdrawData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketBeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premium1Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premium2Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premium3Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"premiumUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reInvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsFromInit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDevFee\",\"type\":\"uint256\"}],\"name\":\"setDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flatFee\",\"type\":\"uint256\"}],\"name\":\"setFlatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastHatch_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAvailableReinvest_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableWithdraw_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beatsMiners_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals_\",\"type\":\"address\"},{\"internalType\":\"uint256[1]\",\"name\":\"referrer\",\"type\":\"uint256[1]\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerBEATS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWithdrawData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userWithdrawDataIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userWithdrawDataLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatcheryMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedBeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBNBReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBEATSReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVaultV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CryptoBeatsMiner", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000c215e3c09a718962b3daba5147ed5a9991d51b5200000000000000000000000083d3c2d1a55687498df6800c5f173ec6a755608900000000000000000000000090e097fc972cf43de71b944804cef03c14d3719c00000000000000000000000029aab5e1235d59a87a82c4740921e8a94a262ae5000000000000000000000000f833fc31264ce78d44720593611cbc91a3d2da70000000000000000000000000ac0e786497337195af2440352d86d0633f12b6e10000000000000000000000002bbfb635171c0e1caabdacb69130fbdb197c39c1000000000000000000000000c119fe1d4c50a13ff93691c711fa9584389c37b70000000000000000000000004c94b011d5126fe53a240e24535349168e6936b1", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}