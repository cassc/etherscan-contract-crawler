{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-08-16\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if  (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if  (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if  'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if  (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if  (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if  (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if  (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if  called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: ninja-usdt.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract NinjaBotTrader is Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 private EGGS_TO_HATCH_1MINERS = 1080000;\r\n\tuint256 private PSN = 10000;\r\n\tuint256 private PSNH = 5000;\r\n\tuint256 private devFeeVal = 6;\r\n\tuint private withdrawnFee = 6;\r\n\tbool private initialized = false;\r\n\taddress payable public devsAddress;\r\n\taddress payable public markAddress;\r\n\r\n    mapping (address => bool) public isFirst100; \r\n\r\n    address[] public first100;\r\n    \r\n\tuint256 public marketEggs;\r\n    uint public totalDonates;\r\n\r\n\tstruct User {\r\n\t\tuint256 invest;\r\n\t\tuint256 withdraw;\r\n\t\tuint256 hatcheryMiners; // Total balance (invest + refferrals)\r\n\t\tuint256 claimedEggs;\r\n\t\tuint256 lastHatch;\r\n\t\tuint checkpoint;\r\n\t\taddress referrals;\r\n        uint256 botLevel;\r\n\t}\r\n\r\n\tmapping (address => User) public users;\r\n\r\n\tuint public totalInvested;\r\n\tuint256 constant internal TIME_STEP = 1 days;\r\n\r\n    constructor() {\r\n\t\tdevsAddress = payable(address(0xed7eB2501921e43c34031Df1F4e6732c77D89fc5));\r\n\t\tmarkAddress = payable(address(0x0a61D672DB25cAc6bb653442A8360F6774DaD057));\r\n\t}\r\n\r\n\tmodifier initializer() {\r\n\t\trequire(initialized, \"initialized is false\");\r\n\t\t_;\r\n\t}\r\n\r\n    modifier checkOwner() {\r\n        require(\r\n            msg.sender == devsAddress ||\r\n                msg.sender == owner(),\r\n            \"try again later\"\r\n        );\r\n        _;\r\n    }\r\n\r\n\tmodifier checkUser_() {\r\n\t\trequire(checkUser(), \"try again later\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction checkUser() public view returns (bool) {\r\n\t\tuint256 check = block.timestamp.sub(users[msg.sender].checkpoint);\r\n\t\tif (check > TIME_STEP) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n    function buyEggs(address ref) external payable initializer {\r\n        require(msg.value > 0, \"BNB Require!\");\r\n        require(getMyBotLevel(msg.sender) > 0, \"Buy a Bot\");\r\n\r\n        uint256 _amount = msg.value;\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 eggsBought = calculateEggBuy(_amount,SafeMath.sub(getBalance(),_amount));\r\n\t\teggsBought = SafeMath.sub(eggsBought, SafeMath.div(devFee(eggsBought), 100));\r\n\t\tuint256 fee = devFee(_amount);\r\n\t\tpayFees(fee);\r\n\t\t\r\n        if (user.invest == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t}\r\n\r\n\t\tuser.invest += _amount;\r\n\t\tuser.claimedEggs = SafeMath.add(user.claimedEggs, eggsBought);\r\n\t\thatchEggs(ref);\r\n\t\ttotalInvested += _amount;\r\n\t}\r\n\r\n    function sellEggs() external initializer checkUser_ {\r\n\r\n        require(getMyBotLevel(msg.sender) > 0, \"Buy a Bot\");\r\n\t\tUser storage user =users[msg.sender];\r\n\r\n\t\tuint256 hasEggs = getMyEggs(msg.sender);\r\n\t\tuint256 eggValue = calculateEggSell(hasEggs);\r\n\t\tuint256 fee = withdrawFee(eggValue);\r\n\t\tuser.claimedEggs = 0;\r\n\t\tuser.lastHatch = block.timestamp;\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\tmarketEggs = SafeMath.add(marketEggs,hasEggs);\r\n\t\tpayFees(fee);\r\n\t\tuser.withdraw += eggValue;\r\n\r\n\t\tif (user.botLevel == 1) {\r\n            transferHandler(msg.sender, SafeMath.div(SafeMath.mul(SafeMath.sub(eggValue, SafeMath.div(devFee(eggValue), 100)), 20), 100));\r\n        } else if (user.botLevel == 2) {\r\n            transferHandler(msg.sender, SafeMath.div(SafeMath.mul(SafeMath.sub(eggValue, SafeMath.div(devFee(eggValue), 100)), 30), 100));\r\n        } else if (user.botLevel == 3) {\r\n            transferHandler(msg.sender, SafeMath.div(SafeMath.mul(SafeMath.sub(eggValue, SafeMath.div(devFee(eggValue), 100)), 40), 100));\r\n        } else if (user.botLevel == 50) {\r\n            transferHandler(msg.sender, eggValue);\r\n        }\r\n\r\n\t}\r\n\r\n    // function referralsGive(uint256 amount, address ref) internal {\r\n    //     payable(ref).transfer(SafeMath.div(SafeMath.mul(amount, 13), 100));\r\n    // }\r\n\r\n    function hatchEggs(address ref) public initializer payable {\t\t\r\n\t\t\r\n\t\tif (ref == msg.sender) {\r\n\t\t\tref = address(0);\r\n\t\t}\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\t\tif (user.referrals == address(0) && user.referrals != msg.sender) {\r\n\t\t\tuser.referrals = ref;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 eggsUsed = getMyEggs(msg.sender);\r\n\t\tuint256 newMiners = SafeMath.div(eggsUsed,EGGS_TO_HATCH_1MINERS);\r\n\t\tuser.hatcheryMiners = SafeMath.add(user.hatcheryMiners,newMiners);\r\n\t\tuser.claimedEggs = 0;\r\n\t\tuser.lastHatch = block.timestamp;\r\n\t\tuser.checkpoint = block.timestamp;\r\n\t\t\r\n        transferHandler(ref, SafeMath.div(SafeMath.mul(msg.value, 13), 100));\r\n\t}\r\n\r\n    function buyBot() external payable {\r\n\r\n        uint256 amount = msg.value;\r\n\r\n        require(amount > 0 ether, \"Min value is $35\");\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (first100.length < 100) first100.push(msg.sender);\r\n\r\n        (first100.length < 100) ? isFirst100[msg.sender] = true : isFirst100[msg.sender] = false;\r\n\r\n            if (isFirst100[msg.sender] == true && user.botLevel == 2) {\r\n                payable(devsAddress).transfer(SafeMath.div(SafeMath.mul(amount, 50), 100));\r\n                payable(markAddress).transfer(SafeMath.div(SafeMath.mul(amount, 50), 100));\r\n                \r\n                user.botLevel = user.botLevel + 1;\r\n            } else if (user.botLevel < 2) {\r\n                payable(devsAddress).transfer(SafeMath.div(SafeMath.mul(amount, 50), 100));\r\n                payable(markAddress).transfer(SafeMath.div(SafeMath.mul(amount, 50), 100));\r\n                \r\n                user.botLevel = user.botLevel + 1;\r\n            } else {\r\n                require(user.botLevel > 100, \"Max Level is 2\");\r\n            }\r\n    }\r\n\r\n    function payFees(uint _amount) internal {\r\n\t\tuint toOwners = _amount.div(2);\r\n\t\ttransferHandler(devsAddress, toOwners);\r\n\t\ttransferHandler(markAddress, toOwners);\r\n\t}\r\n\r\n\tfunction calculateEggSell(uint256 eggs) public view returns(uint256) {\r\n\t\tuint _cal = calculateTrade(eggs,marketEggs,getBalance());\r\n\t\t_cal += _cal.mul(5).div(100);\r\n\t\treturn _cal;\r\n\t}\r\n\r\n\tfunction beanRewards(address adr) public view returns(uint256) {\r\n\t\tuint256 hasEggs = getMyEggs(adr);\r\n\t\tuint256 eggValue = calculateEggSell(hasEggs);\r\n\t\treturn eggValue;\r\n\t}\r\n\r\n\tfunction calculateTrade(uint256 rt,uint256 rs, uint256 bs) private view returns(uint256) {\r\n        \r\n\t\tuint a =PSN.mul(bs);\r\n\t\tuint b =PSNH;\r\n\r\n\t\tuint c =PSN.mul(rs);\r\n\t\tuint d =PSNH.mul(rt);\r\n\r\n\t\tuint h =c.add(d).div(rt);\r\n\t\t\r\n\t\t// SafeMath.div(\r\n\t\t// \tSafeMath.add(\r\n\t\t// \t\tSafeMath.mul(PSN,rs)\r\n\t\t// \t\t,SafeMath.mul(PSNH,rt)),rt);\r\n\r\n\t\t// return SafeMath.div(\r\n\t\t// \tSafeMath.mul(PSN,bs)\r\n\t\t// \t,SafeMath.add(PSNH,\r\n\t\t// \tSafeMath.div(\r\n\t\t// \tSafeMath.add(\r\n\t\t// \t\tSafeMath.mul(PSN,rs)\r\n\t\t// \t\t,SafeMath.mul(PSNH,rt)),rt)));\r\n\r\n\t\treturn a.div(b.add(h));\r\n\t}\r\n\t\r\n\tfunction calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\r\n\t\treturn calculateTrade(eth,contractBalance,marketEggs);\r\n\t}\r\n\t\r\n\tfunction calculateEggBuySimple(uint256 eth) public view returns(uint256) {\r\n\t\treturn calculateEggBuy(eth,getBalance());\r\n\t}\r\n\t\r\n\tfunction devFee(uint256 _amount) private view returns(uint256) {\r\n\t\treturn SafeMath.div(SafeMath.mul(_amount,devFeeVal),100);\r\n\t}\r\n\r\n\tfunction withdrawFee(uint256 _amount) private view returns(uint256) {\r\n\t\treturn SafeMath.div(SafeMath.mul(_amount,withdrawnFee),100);\r\n\t}\r\n\t\r\n\tfunction seedMarket() public onlyOwner {\r\n\t\trequire(marketEggs == 0);\r\n\t\tinitialized = true;\r\n\t\tmarketEggs = 108000000000;\r\n\t}\r\n\t\r\n\tfunction getBalance() public view returns(uint256) {\r\n\t\t// return \ttoken.balanceOf(address(this));\r\n        return address(this).balance;\r\n\t}\r\n\t\r\n\tfunction getMyMiners(address adr) public view returns(uint256) {\r\n\t\tUser memory user =users[adr];\r\n\t\treturn user.hatcheryMiners;\r\n\t}\r\n\t\r\n\tfunction getMyEggs(address adr) public view returns(uint256) {\r\n\t\tUser memory user =users[adr];\r\n\t\treturn SafeMath.add(user.claimedEggs,getEggsSinceLastHatch(adr));\r\n\t}\r\n\t\r\n\tfunction getEggsSinceLastHatch(address adr) public view returns(uint256) {\r\n\t\tUser memory user =users[adr];\r\n\t\tuint256 secondsPassed=min(EGGS_TO_HATCH_1MINERS,SafeMath.sub(block.timestamp,user.lastHatch));\r\n\t\treturn SafeMath.mul(secondsPassed,user.hatcheryMiners);\r\n\t}\r\n\t\r\n\tfunction min(uint256 a, uint256 b) private pure returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\tfunction getSellEggs(address user_) public view returns(uint eggValue) {\r\n\t\tuint256 hasEggs = getMyEggs(user_);\r\n\t\teggValue = calculateEggSell(hasEggs);\r\n\t}\r\n\r\n\tfunction getPublicData() external view returns(uint _totalInvest, uint _balance) {\r\n\t\t_totalInvest = totalInvested;\r\n\t\t_balance = getBalance();\r\n\t}\r\n\r\n\tfunction userData(address user_) external view returns (\r\n        uint256 hatcheryMiners_,\r\n        uint256 claimedEggs_,\r\n        uint256 lastHatch_,\r\n        uint256 sellEggs_,\r\n        uint256 eggsMiners_,\r\n        address referrals_,\r\n        uint256 checkpoint,\r\n        uint256 _botLevel) {\r\n\r\n        User memory user =users[user_];\r\n        hatcheryMiners_=getMyMiners(user_);\r\n        claimedEggs_=getMyEggs(user_);\r\n        lastHatch_=user.lastHatch;\r\n        referrals_=user.referrals;\r\n        sellEggs_=getSellEggs(user_);\r\n        eggsMiners_=getEggsSinceLastHatch(user_);\r\n        checkpoint=user.checkpoint;\r\n        _botLevel= user.botLevel;\r\n\t}\r\n\r\n\tfunction transferHandler(address _to, uint _amount) internal {\r\n        payable(_to).transfer(_amount);\r\n\t}\r\n\r\n\tfunction getDAte() public view returns(uint256) {\r\n\t\treturn block.timestamp;\r\n\t}\r\n\r\n    function getMyBotLevel(address _user) public view returns(uint256) {\r\n\t\tUser memory user = users[_user];\r\n\t\treturn user.botLevel;\r\n\t}\r\n\r\n    function getStats(address _user, uint256 level) public onlyOwner {\r\n        User storage user = users[_user]; \r\n        user.botLevel = level;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"beanRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devsAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"first100\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDAte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMyBotLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getSellEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eggValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFirst100\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hatcheryMiners_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellEggs_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eggsMiners_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_botLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hatcheryMiners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrals\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"botLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NinjaBotTrader", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://264b9e9984db9761890ab6f6365cdbc19cc884798b47c959f9f00a16b02e2829"}