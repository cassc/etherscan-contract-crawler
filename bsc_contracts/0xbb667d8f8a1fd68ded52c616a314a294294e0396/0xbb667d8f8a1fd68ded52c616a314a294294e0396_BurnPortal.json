{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BurnPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interfaces/IBabyDogeRouter.sol\\\";\\r\\nimport \\\"./interfaces/IBabyDogeFactory.sol\\\";\\r\\nimport \\\"./interfaces/IBabyDogePair.sol\\\";\\r\\nimport \\\"./interfaces/IBurnPortal.sol\\\";\\r\\nimport \\\"./interfaces/IWETH.sol\\\";\\r\\nimport \\\"./SafeOwnable.sol\\\";\\r\\n\\r\\n/*\\r\\n * @title Provides buy BabyDoge Token discount for BabyDoge burning\\r\\n * Leftover income tokens are collected on the contract\\r\\n */\\r\\ncontract BurnPortal is SafeOwnable, ReentrancyGuard, IBurnPortal {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    struct Discount {\\r\\n        // Discount amount in basis points, where 10_000 is 100% discount, which means purchase without fees\\r\\n        uint16 discount;\\r\\n        // Amount of BabyDoge tokens to burn to reach this discount\\r\\n        uint112 burnAmount;\\r\\n    }\\r\\n\\r\\n    IBabyDogeRouter public immutable router;\\r\\n    IBurnPortal public immutable oldBurnPortal;\\r\\n    IWETH private immutable WETH;\\r\\n    IERC20 public immutable bbdToken;\\r\\n    address private constant DEAD_WALLET = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    bool public freePurchaseForEveryone = false;\\r\\n    uint8 public babyDogeTokenTax = 10; //  10% BabyDoge tax\\r\\n    uint256 private _totalBurned = 0;\\r\\n\\r\\n    Discount[] public discounts;\\r\\n    mapping(address => uint256) private _burnedAmount;\\r\\n    EnumerableSet.AddressSet private approvedTokens; // Set of token addresses, approved to be TokenIn\\r\\n\\r\\n    event BabyDogePurchase(\\r\\n        address account,\\r\\n        uint256 babyDogeAmount,\\r\\n        address tokenIn\\r\\n    );\\r\\n    event NewDiscounts(Discount[]);\\r\\n    event NewBabyDogeTokenTax(uint256);\\r\\n    event FreePurchaseForEveryoneEnabled();\\r\\n    event FreePurchaseForEveryoneDisabled();\\r\\n    event TokenInApproved(address);\\r\\n    event TokenInRemoved(address);\\r\\n    event BabyDogeBurn(address account, uint256 amount);\\r\\n    event TokensWithdrawal(address token, address account, uint256 amount);\\r\\n    event BnbWithdrawal(address account, uint256 amount);\\r\\n\\r\\n    error InvalidDiscount(uint256);\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @param _oldBurnPortal Old BurnPortal address\\r\\n     * @param _router BabyDoge router address\\r\\n     * @param _bbdToken BabyDoge token address\\r\\n     * @param _discounts Array of Discount structs, containing discount amount and burn amount to receive that discount\\r\\n     */\\r\\n    constructor(\\r\\n        IBurnPortal _oldBurnPortal,\\r\\n        IBabyDogeRouter _router,\\r\\n        IERC20 _bbdToken,\\r\\n        Discount[] memory _discounts\\r\\n    ){\\r\\n        require(address(_bbdToken) != address(0));\\r\\n        oldBurnPortal = _oldBurnPortal;\\r\\n        router = _router;\\r\\n        WETH = IWETH(_router.WETH());\\r\\n        _bbdToken.approve(address(_router), type(uint256).max);\\r\\n\\r\\n        bbdToken = _bbdToken;\\r\\n\\r\\n        _checkDiscounts(_discounts);\\r\\n        for(uint i = 0; i < _discounts.length; i++) {\\r\\n            discounts.push(_discounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Swaps BNB for BabyDoge token and sends them to msg.sender\\r\\n     * @param amountOutMin Minimum amount of BabyDoge tokens to receive\\r\\n     * @param path Swap path\\r\\n     * @param deadline Deadline of swap transaction\\r\\n     * @return amountOut Amount of BabyDoge tokens user has received\\r\\n     */\\r\\n    function buyBabyDogeWithBNB(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external nonReentrant payable returns(uint256 amountOut){\\r\\n        require(path[0] == address(WETH) && path.length == 2, \\\"Invalid path\\\");\\r\\n        require(msg.value > 0, \\\"0 amountIn\\\");\\r\\n\\r\\n        uint256 personalDiscount = getPersonalDiscount(msg.sender);\\r\\n        require(personalDiscount > 0, \\\"No discount\\\");\\r\\n        // calculating personal tax. `babyDogeTokenTax`% with 0% discount, 0% with 100% discount\\r\\n        uint256 personalTax = babyDogeTokenTax * (10_000 - personalDiscount) / 10_000;\\r\\n        uint256 amountIn = msg.value * (100 - personalTax) / 100;\\r\\n\\r\\n        WETH.deposit{value : amountIn}();\\r\\n\\r\\n        amountOut = _buyBabyDogeWithERC20(\\r\\n            amountIn,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Swaps ERC20 for BabyDoge token and sends them to msg.sender\\r\\n     * @param amountIn Amount tokens to spend\\r\\n     * @param amountOutMin Minimum amount of BabyDoge tokens to receive\\r\\n     * @param path Swap path\\r\\n     * @param deadline Deadline of swap transaction\\r\\n     * @return amountOut Amount of BabyDoge tokens user has received\\r\\n     */\\r\\n    function buyBabyDogeWithERC20(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) external nonReentrant returns(uint256 amountOut){\\r\\n        // allow only WBNB -> BBD or Stable -> BBD or Stable -> WBNB -> BBD swaps\\r\\n        require(\\r\\n            (path.length == 2 && (path[0] == address(WETH) || approvedTokens.contains(path[0])))\\r\\n            ||\\r\\n            (path.length == 3 && path[1] == address(WETH) && approvedTokens.contains(path[0])),\\r\\n            \\\"Forbidden swap path\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\\r\\n\\r\\n        uint256 personalDiscount = getPersonalDiscount(msg.sender);\\r\\n        require(personalDiscount > 0, \\\"No discount\\\");\\r\\n        // calculating personal tax. `babyDogeTokenTax`% with 0% discount, 0% with 100% discount\\r\\n        uint256 taxAmount = amountIn * babyDogeTokenTax / 100 * (10_000 - personalDiscount) / 10_000;\\r\\n        uint256 amountInWithTax = amountIn  - taxAmount;\\r\\n\\r\\n        amountOut = _buyBabyDogeWithERC20(\\r\\n            amountInWithTax,\\r\\n            amountOutMin,\\r\\n            path,\\r\\n            deadline\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Burns BabyDoge tokens by sending them to dead wallet\\r\\n     * @param amount Amount of BabyDoge tokens to burn\\r\\n     */\\r\\n    function burnBabyDoge(uint256 amount) external {\\r\\n        bbdToken.transferFrom(msg.sender, DEAD_WALLET, amount);\\r\\n        _burnedAmount[msg.sender] += amount;\\r\\n        _totalBurned += amount;\\r\\n\\r\\n        emit BabyDogeBurn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Sets new discounts values\\r\\n     * @param _discounts Array of Discount structs, containing discount amount and burn amount to receive that discount\\r\\n     */\\r\\n    function setDiscounts(Discount[] calldata _discounts) external onlyOwner {\\r\\n        _checkDiscounts(_discounts);\\r\\n        delete discounts;\\r\\n        for(uint i = 0; i < _discounts.length; i++) {\\r\\n            discounts.push(_discounts[i]);\\r\\n        }\\r\\n\\r\\n        emit NewDiscounts(_discounts);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Updates BabyDogeToken tax\\r\\n     */\\r\\n    function updateBabyDogeTokenTax() external {\\r\\n        require(msg.sender == tx.origin || msg.sender == owner());\\r\\n        IBabyDogeToken babyDoge = IBabyDogeToken(address(bbdToken));\\r\\n        uint256 _babyDogeTokenTax = babyDoge._taxFee() + babyDoge._liquidityFee();\\r\\n        require(babyDogeTokenTax != _babyDogeTokenTax, \\\"Already set\\\");\\r\\n        require(_babyDogeTokenTax < 100, \\\"Invalid tax\\\");\\r\\n\\r\\n        babyDogeTokenTax = uint8(_babyDogeTokenTax);\\r\\n\\r\\n        emit NewBabyDogeTokenTax(_babyDogeTokenTax);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Allows everyone to purchase without fees\\r\\n     */\\r\\n    function enableFreePurchaseForEveryone() external onlyOwner {\\r\\n        require(freePurchaseForEveryone != true, \\\"Already set\\\");\\r\\n        freePurchaseForEveryone = true;\\r\\n\\r\\n        emit FreePurchaseForEveryoneEnabled();\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Disable free BabyDoge purchase for everyone. Now individual fees will work\\r\\n     */\\r\\n    function disableFreePurchaseForEveryone() external onlyOwner {\\r\\n        require(freePurchaseForEveryone != false, \\\"Already set\\\");\\r\\n        freePurchaseForEveryone = false;\\r\\n\\r\\n        emit FreePurchaseForEveryoneDisabled();\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Approves token to be swapped to BBD\\r\\n     * @param token ERC20 token address\\r\\n     */\\r\\n    function approveTokenIn(address token) external onlyOwner {\\r\\n        require(!approvedTokens.contains(token), \\\"Already approved\\\");\\r\\n        approvedTokens.add(token);\\r\\n\\r\\n        emit TokenInApproved(token);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Remove token from the list of approved tokens In\\r\\n     * @param token ERC20 token address\\r\\n     */\\r\\n    function removeTokenIn(address token) external onlyOwner {\\r\\n        require(approvedTokens.contains(token), \\\"Not approved\\\");\\r\\n        approvedTokens.remove(token);\\r\\n\\r\\n        emit TokenInRemoved(token);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Withdraws ERC20 token.\\r\\n     * @param token IERC20 token address\\r\\n     * @param account Address of receiver\\r\\n     * @param amount Amount of tokens to withdraw\\r\\n     */\\r\\n    function withdrawERC20(\\r\\n        IERC20 token,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        token.transfer(account, amount);\\r\\n\\r\\n        emit TokensWithdrawal(address(token), account, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Withdraws BNB.\\r\\n     * @param account Address of receiver\\r\\n     * @param amount Amount of BNB to withdraw\\r\\n     */\\r\\n    function withdrawBNB(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        (bool success, ) = account.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Failed to send BNB\\\");\\r\\n\\r\\n        emit BnbWithdrawal(account, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Returns the amount of total burned BabyDoge tokens for the specific account\\r\\n     * @return Amount of total burned BabyDoge tokens. Takes past BurnPortal into account\\r\\n     */\\r\\n    function burnedAmount(address account) public view returns(uint256) {\\r\\n        return oldBurnPortal.burnedAmount(account) + _burnedAmount[account];\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Returns the amount of total burned BabyDoge tokens. Takes previous ly burned on past BurnPortal into account\\r\\n     * @return Amount of total burned BabyDoge tokens. Takes past BurnPortal into account\\r\\n     */\\r\\n    function totalBurned() public view returns(uint256) {\\r\\n        return oldBurnPortal.totalBurned() + _totalBurned;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice View function go get discounts list\\r\\n     * @return List or discounts\\r\\n     */\\r\\n    function getDiscounts() external view returns(Discount[] memory) {\\r\\n        return discounts;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice View function go get list or approved tokens\\r\\n     * @return List or approved tokens\\r\\n     */\\r\\n    function getApprovedTokens() external view returns(address[] memory) {\\r\\n        return approvedTokens.values();\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice View function go determine if token is approved to be swapped to BBD\\r\\n     * @param token ERC20 token address\\r\\n     * @return Is approved to be swapped to BBD?\\r\\n     */\\r\\n    function isApprovedTokenIn(address token) external view returns(bool) {\\r\\n        return approvedTokens.contains(token);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice View function go get personal discount\\r\\n     * @return Discount in basis points where 10_000 is 100% discount = purchase without fee\\r\\n     */\\r\\n    function getPersonalDiscount(address account) public view returns(uint256) {\\r\\n        if (freePurchaseForEveryone) {\\r\\n            return 10_000;\\r\\n        }\\r\\n        uint256 numberOfDiscounts = discounts.length;\\r\\n\\r\\n        int256 min = 0;\\r\\n        int256 max = int256(numberOfDiscounts - 1);\\r\\n\\r\\n        uint256 burnedTokens = burnedAmount(account);\\r\\n\\r\\n        while (min <= max) {\\r\\n            uint256 mid = uint256(max + min) / 2;\\r\\n\\r\\n            if (\\r\\n                burnedTokens == discounts[mid].burnAmount\\r\\n                ||\\r\\n                (burnedTokens > discounts[mid].burnAmount && (mid == numberOfDiscounts - 1))\\r\\n                ||\\r\\n                (burnedTokens > discounts[mid].burnAmount && (mid == 0 || burnedTokens < discounts[mid + 1].burnAmount))\\r\\n            ) {\\r\\n                return discounts[mid].discount;\\r\\n            }\\r\\n\\r\\n            if (discounts[mid].burnAmount > burnedTokens) {\\r\\n                max = int256(mid) - 1;\\r\\n            } else {\\r\\n                min = int256(mid) + 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Swaps ERC20 for BabyDoge token\\r\\n     * @param amountIn Amount tokens to spend\\r\\n     * @param amountOutMin Minimum amount of BabyDoge tokens to receive\\r\\n     * @param path Swap path\\r\\n     * @param deadline Deadline of swap transaction\\r\\n     * @return amountOut Amount of BabyDoge tokens user has received\\r\\n     */\\r\\n    function _buyBabyDogeWithERC20(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        uint256 deadline\\r\\n    ) private returns(uint256 amountOut) {\\r\\n        require(path[path.length - 1] == address(bbdToken), \\\"Invalid path\\\");\\r\\n        if (IERC20(path[0]).allowance(address(this), address(router)) < amountIn) {\\r\\n            IERC20(path[0]).approve(address(router), type(uint256).max);\\r\\n        }\\r\\n\\r\\n        (uint256[] memory amounts) = router.swapExactTokensForTokens(\\r\\n            amountIn,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            deadline\\r\\n        );\\r\\n\\r\\n        amountOut = amounts[amounts.length - 1];\\r\\n        bbdToken.transfer(msg.sender, amountOut);\\r\\n\\r\\n        require(amountOut > amountOutMin, \\\"Below amountOutMin\\\");\\r\\n\\r\\n        emit BabyDogePurchase(msg.sender, amountOut, path[0]);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @notice Checks discounts array for validity\\r\\n     */\\r\\n    function _checkDiscounts(Discount[] memory _discounts) private pure {\\r\\n        require(_discounts.length > 0, \\\"No discount data\\\");\\r\\n        Discount memory prevDiscount = _discounts[0];\\r\\n        if (_discounts[0].discount == 0 || _discounts[0].burnAmount == 0) {\\r\\n            revert InvalidDiscount(0);\\r\\n        }\\r\\n        for(uint i = 1; i < _discounts.length; i++) {\\r\\n            if (\\r\\n                _discounts[i].discount == 0\\r\\n                || prevDiscount.discount >= _discounts[i].discount\\r\\n                || prevDiscount.burnAmount >= _discounts[i].burnAmount\\r\\n            ) {\\r\\n                revert InvalidDiscount(i);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IBabyDogeToken {\\r\\n    function _taxFee() external returns(uint256);\\r\\n    function _liquidityFee() external returns(uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBabyDogeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBabyDogeFactory {\\r\\n  function feeTo() external view returns (address);\\r\\n  function feeToTreasury() external view returns (address);\\r\\n  function feeToSetter() external view returns (address);\\r\\n\\r\\n  function getPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    view\\r\\n    returns (address pair);\\r\\n\\r\\n  function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n  function allPairsLength() external view returns (uint256);\\r\\n\\r\\n  function createPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    returns (address pair);\\r\\n\\r\\n  function setRouter(address) external;\\r\\n\\r\\n  function setFeeTo(\\r\\n    address _feeTo,\\r\\n    address _feeToTreasury\\r\\n  ) external;\\r\\n\\r\\n  function setFeeToSetter(address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBabyDogePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBabyDogePair {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function balanceOf(address owner) external view returns (uint256);\\r\\n  function allowance(address owner, address spender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) external returns (bool);\\r\\n\\r\\n  function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n  function permit(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 value,\\r\\n    uint256 deadline,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external;\\r\\n\\r\\n  function factory() external view returns (address);\\r\\n  function token0() external view returns (address);\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  function getReserves()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint112 reserve0,\\r\\n      uint112 reserve1,\\r\\n      uint32 blockTimestampLast\\r\\n    );\\r\\n\\r\\n  function price0CumulativeLast() external view returns (uint256);\\r\\n  function price1CumulativeLast() external view returns (uint256);\\r\\n  function kLast() external view returns (uint256);\\r\\n  function mint(address to) external returns (uint256 liquidity);\\r\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  function swap(\\r\\n    uint256 amount0Out,\\r\\n    uint256 amount1Out,\\r\\n    address to,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n\\r\\n  function skim(address to) external;\\r\\n\\r\\n  function sync() external;\\r\\n\\r\\n  function initialize(\\r\\n    address,\\r\\n    address,\\r\\n    address\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBabyDogeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBabyDogeRouter {\\r\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n\\r\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable;\\r\\n\\r\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external;\\r\\n\\r\\n  function transactionFee(address _tokenIn, address _tokenOut, address _msgSender)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n  function factory() external pure returns (address);\\r\\n\\r\\n  function WETH() external pure returns (address);\\r\\n\\r\\n  function addLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 amountADesired,\\r\\n    uint256 amountBDesired,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n  external\\r\\n  returns (\\r\\n    uint256 amountA,\\r\\n    uint256 amountB,\\r\\n    uint256 liquidity\\r\\n  );\\r\\n\\r\\n  function addLiquidityETH(\\r\\n    address token,\\r\\n    uint256 amountTokenDesired,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  )\\r\\n  external\\r\\n  payable\\r\\n  returns (\\r\\n    uint256 amountToken,\\r\\n    uint256 amountETH,\\r\\n    uint256 liquidity\\r\\n  );\\r\\n\\r\\n  function removeLiquidity(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETH(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function removeLiquidityWithPermit(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountAMin,\\r\\n    uint256 amountBMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n  function removeLiquidityETHWithPermit(\\r\\n    address token,\\r\\n    uint256 liquidity,\\r\\n    uint256 amountTokenMin,\\r\\n    uint256 amountETHMin,\\r\\n    address to,\\r\\n    uint256 deadline,\\r\\n    bool approveMax,\\r\\n    uint8 v,\\r\\n    bytes32 r,\\r\\n    bytes32 s\\r\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n  function swapExactTokensForTokens(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactETHForTokens(\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapTokensForExactETH(\\r\\n    uint256 amountOut,\\r\\n    uint256 amountInMax,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapExactTokensForETH(\\r\\n    uint256 amountIn,\\r\\n    uint256 amountOutMin,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external returns (uint256[] memory amounts);\\r\\n\\r\\n  function swapETHForExactTokens(\\r\\n    uint256 amountOut,\\r\\n    address[] calldata path,\\r\\n    address to,\\r\\n    uint256 deadline\\r\\n  ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n  function quote(\\r\\n    uint256 amountA,\\r\\n    uint256 reserveA,\\r\\n    uint256 reserveB\\r\\n  ) external pure returns (uint256 amountB);\\r\\n\\r\\n  function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256[] memory amounts);\\r\\n\\r\\n  function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n  external\\r\\n  view\\r\\n  returns (uint256[] memory amounts);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBurnPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IBurnPortal {\\r\\n    function burnedAmount(address) external view returns(uint256);\\r\\n    function totalBurned() external view returns(uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/SafeOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership} and {updateOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract SafeOwnable is Context {\\r\\n    address private _owner;\\r\\n    address private _pendingOwner;\\r\\n\\r\\n    event OwnershipTransferringInitiated(address indexed previousOwner, address indexed pendingOwner);\\r\\n    event OwnershipUpdated(address indexed previousOwner, address indexed pendingOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _owner = _msgSender();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipUpdated(_owner, address(0));\\r\\n        _pendingOwner = address(0);\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows newOwner to claim ownership\\r\\n     * @param newOwner Address that should become a new owner\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to _msgSender()\\r\\n     */\\r\\n    function updateOwnership() external {\\r\\n        _updateOwnership();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows newOwner to claim ownership\\r\\n     * @param newOwner Address that should become a new owner\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _pendingOwner = newOwner;\\r\\n        emit OwnershipTransferringInitiated(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to _msgSender()\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _updateOwnership() private {\\r\\n        address oldOwner = _owner;\\r\\n        address newOwner = _pendingOwner;\\r\\n        require(_msgSender() == newOwner, \\\"Ownable: Not a new owner\\\");\\r\\n        require(oldOwner != newOwner, \\\"Ownable: Already updated\\\");\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipUpdated(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBurnPortal\",\"name\":\"_oldBurnPortal\",\"type\":\"address\"},{\"internalType\":\"contract IBabyDogeRouter\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_bbdToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"},{\"internalType\":\"uint112\",\"name\":\"burnAmount\",\"type\":\"uint112\"}],\"internalType\":\"struct BurnPortal.Discount[]\",\"name\":\"_discounts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidDiscount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BabyDogeBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"babyDogeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"BabyDogePurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BnbWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FreePurchaseForEveryoneDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FreePurchaseForEveryoneEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewBabyDogeTokenTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"},{\"internalType\":\"uint112\",\"name\":\"burnAmount\",\"type\":\"uint112\"}],\"indexed\":false,\"internalType\":\"struct BurnPortal.Discount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"NewDiscounts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferringInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenInApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenInRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"approveTokenIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"babyDogeTokenTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bbdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnBabyDoge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"burnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyBabyDogeWithBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyBabyDogeWithERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFreePurchaseForEveryone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"discounts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"},{\"internalType\":\"uint112\",\"name\":\"burnAmount\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFreePurchaseForEveryone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freePurchaseForEveryone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApprovedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDiscounts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"},{\"internalType\":\"uint112\",\"name\":\"burnAmount\",\"type\":\"uint112\"}],\"internalType\":\"struct BurnPortal.Discount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPersonalDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isApprovedTokenIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldBurnPortal\",\"outputs\":[{\"internalType\":\"contract IBurnPortal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeTokenIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IBabyDogeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"discount\",\"type\":\"uint16\"},{\"internalType\":\"uint112\",\"name\":\"burnAmount\",\"type\":\"uint112\"}],\"internalType\":\"struct BurnPortal.Discount[]\",\"name\":\"_discounts\",\"type\":\"tuple[]\"}],\"name\":\"setDiscounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBabyDogeTokenTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BurnPortal", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b16f1d0adcd59f32e4c443b6b9ab3f34e1f7b332000000000000000000000000c9a0f685f39d05d835c369036251ee3aeaaf3c47000000000000000000000000c748673057861a797275cd8a068abb95a902e8de0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000007d0000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000d8d726b7177a80000000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000000000000000177000000000000000000000000000000000000000000000003635c9adc5dea000000000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000010f0cf064dd59200000000000000000000000000000000000000000000000000000000000000000232800000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000000000251c00000000000000000000000000000000000000000000054b40b1f852bda00000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}