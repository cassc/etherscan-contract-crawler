{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-11-10\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2022-10-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2022-10-10\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2022-10-01\r\n*/\r\n\r\n/**\r\n *Submitted for verification at polygonscan.com on 2022-09-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-07-02\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-06-30\r\n*/\r\n\r\npragma solidity ^ 0.8.0;\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 value) external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n   \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n  \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n  \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n   \r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n   \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract WORLDFINANCIALTECHNOLOGY {\r\n    using SafeMath for uint256;\r\n    event Multisended(uint256 value , address indexed sender);\r\n    event WithDraw(address indexed  investor,uint256 WithAmt);\r\n    event MemberPayment(address indexed  investor,uint netAmt,uint256 Withid);\r\n    event Invest(string userwallet,uint256 amountbuy);\r\n    event Reinvest(string user,uint256 amountBuy);\r\n    event Registration(string user,string referrer,uint256 indexed userId,uint256 referrerId);\r\n    event Payment(uint256 NetQty);\r\n\t\r\n\r\n    struct User {\r\n        uint256 id;\r\n        address referrer;\r\n        uint256 partnersCount;\r\n        uint256 levelIncome;\r\n        uint256 totalBuy;\r\n        uint256 sponcerIncome;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public idToAddress;\r\n    mapping(uint8=>uint8) public refPercent;\r\n    IBEP20 private BUSD; \r\n    uint256 public lastUserId;\r\n    uint256 public ttlbuy;\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(address ownerAddress,IBEP20 _BUSD) {\r\n        owner = ownerAddress; \r\n        BUSD = _BUSD;\r\n        lastUserId = 1;\r\n        users[owner].id = lastUserId;\r\n        users[owner].referrer = address(0);\r\n        users[owner].partnersCount = uint256(0);\r\n        idToAddress[users[owner].id] = owner;\r\n        lastUserId= lastUserId.add(1);     \r\n    }\r\n    \r\n    function registration(address userAddress, address referrerAddress,string memory uaddr, string memory refadr) private {\r\n        require(!isUserExists(userAddress), \"User Exists!\");\r\n        require(isUserExists(referrerAddress), \"Referrer not Exists!\");\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract!\");\r\n        users[userAddress].id = lastUserId; \r\n        idToAddress[users[userAddress].id] = userAddress;       \r\n        users[userAddress].referrer = referrerAddress;\r\n        users[userAddress].partnersCount = 0;\r\n        lastUserId= lastUserId.add(1);\r\n        users[referrerAddress].partnersCount++;\r\n        emit Registration(uaddr,refadr,users[userAddress].id,users[referrerAddress].id);\r\n    }\r\n  \r\n\r\n   function registration(uint256 _amount,string memory addr,address refadd,string memory refaddr ) external {\r\n        require(!isUserExists(msg.sender), \"User Exists!\");\r\n        require(_amount==30,\"invalid package\");\r\n    \tuint256 tot_amt = (_amount*1e18);   \r\n        require(BUSD.balanceOf(msg.sender) >= tot_amt,\"Low BUSD Balance\");\r\n        require(BUSD.allowance(msg.sender,address(this)) >= tot_amt,\"Invalid allowance \");\r\n        registration(msg.sender,refadd,addr,refaddr);\r\n        BUSD.transferFrom(msg.sender, owner, tot_amt);\r\n        ttlbuy = ttlbuy.add(_amount);\r\n        emit Invest(addr,_amount);\r\n\t}\r\n\r\n    function upgrade(uint256 _amount,string memory addr) external {\r\n        require(_amount>=30,\"invalid package\");\r\n    \tuint256 tot_amt = (_amount*1e18);   \r\n        require(BUSD.balanceOf(msg.sender) >= tot_amt,\"Low BUSD Balance\");\r\n        require(BUSD.allowance(msg.sender,address(this)) >= tot_amt,\"Invalid allowance \");\r\n        BUSD.transferFrom(msg.sender, owner, tot_amt);\r\n        ttlbuy = ttlbuy.add(_amount);\r\n        emit Reinvest(addr,_amount);\r\n\t}\r\n    \r\n    function multisendToken(address payable[]  memory  _contributors, uint256[] memory _balances, uint256 totalQty,uint256[] memory WithId,IBEP20 _TKN) public payable {\r\n    \tuint256 total = totalQty;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total.sub(_balances[i]);\r\n            _TKN.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n\t\t\t      emit MemberPayment(_contributors[i],_balances[i],WithId[i]);\r\n        }\r\n\t\temit Payment(totalQty);\r\n        \r\n    }\r\n\r\n    function withdrawToken(IBEP20 _token ,uint256 _amount) external onlyOwner {\r\n        _token.transfer(owner,_amount);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external onlyOwner {\r\n        payable(owner).transfer(_amount);\r\n    }\r\n\t\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_BUSD\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"userwallet\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountbuy\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Withid\",\"type\":\"uint256\"}],\"name\":\"MemberPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NetQty\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"user\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referrer\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"user\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBuy\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"WithId\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"multisendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"refPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"refadd\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"refaddr\",\"type\":\"string\"}],\"name\":\"registration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ttlbuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sponcerIncome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WORLDFINANCIALTECHNOLOGY", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000536b201be6dad5383d8619c21c46fa3fafb41511000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3e25b34c12e1cf84a120d6be20890f081b4f9f19aca8425930711c9ff6787e2f"}