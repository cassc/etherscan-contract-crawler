{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/Mar3Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INonfungiblePositionManager {\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n}\\n\\ncontract Mar3StakingStaging is Ownable, Pausable {\\n    using Counters for Counters.Counter;\\n    Counters.Counter public poolIdCount;\\n\\n    uint256 public constant DENOMINATOR = 10000;\\n    uint256 public constant ONE_YEAR_IN_DAYS = 360;\\n    uint256 public constant ONE_DAY_IN_SECONDS = 86400;\\n    uint256 public constant MINIMUM_DEPOSIT_AMOUNT = 1000 ether;\\n\\n    address public signer;\\n\\n    mapping(address => bool) public adminList;\\n    mapping(uint256 => Pool) public pools;\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfos;\\n\\n    enum PoolStatus {\\n        NOT_STARTED,\\n        STARTED,\\n        FINISHED,\\n        PAUSED\\n    }\\n\\n    struct Pool {\\n        uint256 poolId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 apy;\\n        uint256 duration;\\n        uint256 capacity;\\n        address depositTokenAddress;\\n        address earnTokenAddress;\\n        uint256 totalTokenDeposited;\\n        uint256 totalValueLocked;\\n        uint256 totalExpectedTokenEarned;\\n        uint256 totalTokenEarned;\\n        bool isPaused;\\n        bool isLpPool;\\n    }\\n\\n    struct UserInfo {\\n        uint256 totalTokenDeposited;\\n        uint256 totalExpectedTokenEarned;\\n        uint256 totalTokenEarned;\\n        Deposit[] deposits;\\n    }\\n\\n    struct Deposit {\\n        uint256 depositAmount;\\n        uint256 expectedEarnAmount;\\n        uint256 unstakeTime;\\n        uint256 tokenId;\\n        uint256 createdAt;\\n        uint256 unstakedAt;\\n    }\\n\\n    event Staked(\\n        address indexed user,\\n        uint256 poolId,\\n        uint256 depositAmount,\\n        uint256 expectedEarnAmount,\\n        uint256 duration,\\n        uint256 unstakeTime\\n    );\\n    event LpStaked(\\n        address indexed user,\\n        uint256 poolId,\\n        uint256 depositAmount,\\n        uint256 expectedEarnAmount,\\n        uint256 duration,\\n        uint256 unstakeTime,\\n        uint256 tokenId\\n    );\\n    event Unstaked(\\n        address indexed user,\\n        uint256 poolId,\\n        uint256 depositIndex,\\n        uint256 depositAmount,\\n        uint256 earnAmount\\n    );\\n    event LpUnstaked(\\n        address indexed user,\\n        uint256 poolId,\\n        uint256 depositIndex,\\n        uint256 depositAmount,\\n        uint256 earnAmount,\\n        uint256 tokenId\\n    );\\n    event PoolCreated(\\n        uint256 poolId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 apy,\\n        uint256 duration,\\n        uint256 capacity,\\n        address indexed depositTokenAddress,\\n        address indexed earnTokenAddress,\\n        bool isLpPool\\n    );\\n    event PoolUpdated(\\n        uint256 poolId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 apy,\\n        uint256 duration,\\n        uint256 capacity,\\n        address indexed depositTokenAddress,\\n        address indexed earnTokenAddress,\\n        bool isLpPool\\n    );\\n    event PoolPaused(uint256 poolId);\\n    event PoolUnpaused(uint256 poolId);\\n\\n    constructor() {\\n        poolIdCount.increment();\\n    }\\n\\n    function stake(\\n        uint256 poolId,\\n        uint256 depositAmount\\n    ) external whenNotPaused {\\n        Pool storage pool = pools[poolId];\\n        PoolStatus poolStatus = getPoolStatus(poolId);\\n\\n        require(!pool.isLpPool, \\\"Wrong pool\\\");\\n        require(poolStatus == PoolStatus.STARTED, \\\"Cannot stake\\\");\\n        require(\\n            depositAmount >= MINIMUM_DEPOSIT_AMOUNT &&\\n                depositAmount % 1 ether == 0,\\n            \\\"Invalid deposit amount\\\"\\n        );\\n        require(\\n            pool.totalTokenDeposited + depositAmount <= pool.capacity,\\n            \\\"Capacity reached\\\"\\n        );\\n\\n        UserInfo storage userInfo = userInfos[poolId][_msgSender()];\\n\\n        IERC20(pool.depositTokenAddress).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            depositAmount\\n        );\\n\\n        uint256 expectedEarnAmount = calculateEarnAmount(poolId, depositAmount);\\n        uint256 unstakeTime = calculateUnstakeTime(poolId);\\n\\n        pool.totalValueLocked += depositAmount;\\n        pool.totalTokenDeposited += depositAmount;\\n        pool.totalExpectedTokenEarned += expectedEarnAmount;\\n        userInfo.totalTokenDeposited += depositAmount;\\n        userInfo.totalExpectedTokenEarned += expectedEarnAmount;\\n        userInfo.deposits.push(\\n            Deposit(\\n                depositAmount,\\n                expectedEarnAmount,\\n                unstakeTime,\\n                0,\\n                block.timestamp,\\n                0\\n            )\\n        );\\n\\n        emit Staked(\\n            _msgSender(),\\n            poolId,\\n            depositAmount,\\n            expectedEarnAmount,\\n            pool.duration,\\n            unstakeTime\\n        );\\n    }\\n\\n    function stakeLp(\\n        uint256 poolId,\\n        uint256 depositAmount,\\n        uint256 tokenId,\\n        uint256 expiredAt,\\n        bytes memory signature\\n    ) external whenNotPaused {\\n        Pool storage pool = pools[poolId];\\n        PoolStatus poolStatus = getPoolStatus(poolId);\\n\\n        require(pool.isLpPool, \\\"Wrong pool\\\");\\n        require(poolStatus == PoolStatus.STARTED, \\\"Cannot stake\\\");\\n        require(\\n            depositAmount >= MINIMUM_DEPOSIT_AMOUNT &&\\n                depositAmount % 1 ether == 0,\\n            \\\"Invalid deposit amount\\\"\\n        );\\n        require(\\n            pool.totalTokenDeposited + depositAmount <= pool.capacity,\\n            \\\"Capacity reached\\\"\\n        );\\n        require(expiredAt > block.timestamp, \\\"Request expired\\\");\\n        require(\\n            _checkOwner(pool.depositTokenAddress, _msgSender(), tokenId),\\n            \\\"Not owner\\\"\\n        );\\n        require(\\n            _checkApproved(pool.depositTokenAddress, _msgSender(), tokenId),\\n            \\\"Not approved\\\"\\n        );\\n\\n        (, , , , , , , uint128 liquidity, , , , ) = INonfungiblePositionManager(\\n            pool.depositTokenAddress\\n        ).positions(tokenId);\\n\\n        require(\\n            recoverSigner(\\n                getEthSignedMessageHash(\\n                    getMessageHash(\\n                        poolId,\\n                        depositAmount,\\n                        tokenId,\\n                        liquidity,\\n                        expiredAt\\n                    )\\n                ),\\n                signature\\n            ) == signer,\\n            \\\"Signature is wrong\\\"\\n        );\\n\\n        UserInfo storage userInfo = userInfos[poolId][_msgSender()];\\n\\n        IERC721(pool.depositTokenAddress).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            tokenId\\n        );\\n\\n        uint256 expectedEarnAmount = calculateEarnAmount(poolId, depositAmount);\\n        uint256 unstakeTime = calculateUnstakeTime(poolId);\\n\\n        pool.totalTokenDeposited += depositAmount;\\n        pool.totalValueLocked += depositAmount;\\n        pool.totalExpectedTokenEarned += expectedEarnAmount;\\n        userInfo.totalTokenDeposited += depositAmount;\\n        userInfo.totalExpectedTokenEarned += expectedEarnAmount;\\n        userInfo.deposits.push(\\n            Deposit(\\n                depositAmount,\\n                expectedEarnAmount,\\n                unstakeTime,\\n                tokenId,\\n                block.timestamp,\\n                0\\n            )\\n        );\\n\\n        emit LpStaked(\\n            _msgSender(),\\n            poolId,\\n            depositAmount,\\n            expectedEarnAmount,\\n            pool.duration,\\n            unstakeTime,\\n            tokenId\\n        );\\n    }\\n\\n    function unstake(uint256 poolId, uint256 depositIndex) external {\\n        Pool storage pool = pools[poolId];\\n        UserInfo storage userInfo = userInfos[poolId][_msgSender()];\\n\\n        require(!pool.isLpPool, \\\"Wrong pool\\\");\\n        require(pool.depositTokenAddress != address(0), \\\"Invalid pool\\\");\\n        require(\\n            userInfo.deposits.length > depositIndex,\\n            \\\"Invalid deposit index\\\"\\n        );\\n\\n        Deposit storage deposit = userInfo.deposits[depositIndex];\\n\\n        require(deposit.unstakedAt == 0, \\\"Unstaked\\\");\\n        require(deposit.unstakeTime <= block.timestamp, \\\"Locked\\\");\\n\\n        deposit.unstakedAt = block.timestamp;\\n\\n        pool.totalValueLocked -= deposit.depositAmount;\\n        pool.totalExpectedTokenEarned -= deposit.expectedEarnAmount;\\n        pool.totalTokenEarned += deposit.expectedEarnAmount;\\n        userInfo.totalExpectedTokenEarned -= deposit.expectedEarnAmount;\\n        userInfo.totalTokenEarned += deposit.expectedEarnAmount;\\n\\n        require(\\n            IERC20(pool.depositTokenAddress).balanceOf(address(this)) >=\\n                deposit.depositAmount &&\\n                IERC20(pool.earnTokenAddress).balanceOf(address(this)) >=\\n                deposit.expectedEarnAmount,\\n            \\\"Low balance\\\"\\n        );\\n\\n        IERC20(pool.depositTokenAddress).transfer(\\n            _msgSender(),\\n            deposit.depositAmount\\n        );\\n        IERC20(pool.earnTokenAddress).transfer(\\n            _msgSender(),\\n            deposit.expectedEarnAmount\\n        );\\n\\n        emit Unstaked(\\n            _msgSender(),\\n            poolId,\\n            depositIndex,\\n            deposit.depositAmount,\\n            deposit.expectedEarnAmount\\n        );\\n    }\\n\\n    function unstakeLp(uint256 poolId, uint256 depositIndex) external {\\n        Pool storage pool = pools[poolId];\\n        UserInfo storage userInfo = userInfos[poolId][_msgSender()];\\n\\n        require(pool.isLpPool, \\\"Wrong pool\\\");\\n        require(pool.depositTokenAddress != address(0), \\\"Invalid pool\\\");\\n        require(\\n            userInfo.deposits.length > depositIndex,\\n            \\\"Invalid deposit index\\\"\\n        );\\n\\n        Deposit storage deposit = userInfo.deposits[depositIndex];\\n\\n        require(deposit.unstakedAt == 0, \\\"Unstaked\\\");\\n        require(deposit.unstakeTime <= block.timestamp, \\\"Locked\\\");\\n\\n        deposit.unstakedAt = block.timestamp;\\n\\n        pool.totalValueLocked -= deposit.depositAmount;\\n        pool.totalExpectedTokenEarned -= deposit.expectedEarnAmount;\\n        pool.totalTokenEarned += deposit.expectedEarnAmount;\\n        userInfo.totalExpectedTokenEarned -= deposit.expectedEarnAmount;\\n        userInfo.totalTokenEarned += deposit.expectedEarnAmount;\\n\\n        require(\\n            IERC20(pool.earnTokenAddress).balanceOf(address(this)) >=\\n                deposit.expectedEarnAmount,\\n            \\\"Low balance\\\"\\n        );\\n\\n        IERC721(pool.depositTokenAddress).transferFrom(\\n            address(this),\\n            _msgSender(),\\n            deposit.tokenId\\n        );\\n        IERC20(pool.earnTokenAddress).transfer(\\n            _msgSender(),\\n            deposit.expectedEarnAmount\\n        );\\n\\n        emit LpUnstaked(\\n            _msgSender(),\\n            poolId,\\n            depositIndex,\\n            deposit.depositAmount,\\n            deposit.expectedEarnAmount,\\n            deposit.tokenId\\n        );\\n    }\\n\\n    function calculateEarnAmount(\\n        uint256 poolId,\\n        uint256 depositAmount\\n    ) public view returns (uint256 expectedEarnAmount) {\\n        Pool memory pool = pools[poolId];\\n\\n        require(pool.depositTokenAddress != address(0), \\\"Invalid pool\\\");\\n\\n        expectedEarnAmount =\\n            (depositAmount * pool.apy * pool.duration) /\\n            (ONE_YEAR_IN_DAYS * DENOMINATOR);\\n    }\\n\\n    function calculateUnstakeTime(\\n        uint256 poolId\\n    ) public view returns (uint256 unstakeTime) {\\n        Pool memory pool = pools[poolId];\\n\\n        require(pool.depositTokenAddress != address(0), \\\"Invalid pool\\\");\\n\\n        unstakeTime = block.timestamp + pool.duration * ONE_DAY_IN_SECONDS;\\n    }\\n\\n    function getPoolInfo(\\n        uint256 poolId\\n    ) public view returns (Pool memory pool) {\\n        pool = pools[poolId];\\n\\n        require(pool.depositTokenAddress != address(0), \\\"Invalid pool\\\");\\n    }\\n\\n    function getPoolStatus(\\n        uint256 poolId\\n    ) public view returns (PoolStatus poolStatus) {\\n        Pool memory pool = pools[poolId];\\n\\n        require(pool.depositTokenAddress != address(0), \\\"Invalid pool\\\");\\n\\n        if (pool.isPaused) return PoolStatus.PAUSED;\\n        if (\\n            pool.endTime <= block.timestamp ||\\n            pool.totalTokenDeposited >= pool.capacity\\n        ) return PoolStatus.FINISHED;\\n        if (pool.startTime <= block.timestamp && pool.endTime > block.timestamp)\\n            return PoolStatus.STARTED;\\n\\n        return PoolStatus.NOT_STARTED;\\n    }\\n\\n    function getUserInfo(\\n        address userAddress,\\n        uint256 poolId\\n    ) public view returns (UserInfo memory userInfo) {\\n        userInfo = userInfos[poolId][userAddress];\\n    }\\n\\n    function getTotalTokenEarned()\\n        public\\n        view\\n        returns (uint256 totalTokenEarned, uint256 totalExpectedTokenEarned)\\n    {\\n        for (uint256 i = 1; i < poolIdCount.current(); i++) {\\n            totalExpectedTokenEarned += pools[i].totalExpectedTokenEarned;\\n            totalTokenEarned += pools[i].totalTokenEarned;\\n        }\\n    }\\n\\n    function getTotalValueLocked()\\n        public\\n        view\\n        returns (uint256 totalValueLocked)\\n    {\\n        for (uint256 i = 1; i < poolIdCount.current(); i++) {\\n            totalValueLocked += pools[i].totalValueLocked;\\n        }\\n    }\\n\\n    function getUserTotalTokenEarned(\\n        address userAddress\\n    )\\n        public\\n        view\\n        returns (uint256 totalTokenEarned, uint256 totalExpectedTokenEarned)\\n    {\\n        for (uint256 i = 1; i < poolIdCount.current(); i++) {\\n            totalExpectedTokenEarned += userInfos[i][userAddress]\\n                .totalExpectedTokenEarned;\\n            totalTokenEarned += userInfos[i][userAddress].totalTokenEarned;\\n        }\\n    }\\n\\n    function _checkOwner(\\n        address tokenAddress,\\n        address sender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        return IERC721(tokenAddress).ownerOf(tokenId) == sender;\\n    }\\n\\n    function _checkApproved(\\n        address tokenAddress,\\n        address sender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        return\\n            IERC721(tokenAddress).isApprovedForAll(sender, address(this)) ||\\n            IERC721(tokenAddress).getApproved(tokenId) == address(this);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(adminList[_msgSender()], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    function createPool(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 apy,\\n        uint256 duration,\\n        uint256 capacity,\\n        address depositTokenAddress,\\n        address earnTokenAddress,\\n        bool isLpPool\\n    ) external onlyAdmin whenNotPaused {\\n        uint256 poolId = poolIdCount.current();\\n        Pool storage pool = pools[poolId];\\n\\n        require(startTime < endTime, \\\"Invalid end time\\\");\\n        require(startTime > block.timestamp, \\\"Invalid start time\\\");\\n        require(duration > 0, \\\"Invalid duration\\\");\\n        require(capacity > 0, \\\"Invalid capacity\\\");\\n        require(\\n            depositTokenAddress != address(0),\\n            \\\"Invalid deposit token address\\\"\\n        );\\n        require(earnTokenAddress != address(0), \\\"Invalid earn token address\\\");\\n\\n        pool.poolId = poolId;\\n        pool.startTime = startTime;\\n        pool.endTime = endTime;\\n        pool.apy = apy;\\n        pool.duration = duration;\\n        pool.capacity = capacity;\\n        pool.depositTokenAddress = depositTokenAddress;\\n        pool.earnTokenAddress = earnTokenAddress;\\n        pool.totalTokenDeposited = 0;\\n        pool.totalValueLocked = 0;\\n        pool.totalExpectedTokenEarned = 0;\\n        pool.totalTokenEarned = 0;\\n        pool.isPaused = false;\\n        pool.isLpPool = isLpPool;\\n\\n        poolIdCount.increment();\\n\\n        emit PoolCreated(\\n            poolId,\\n            startTime,\\n            endTime,\\n            apy,\\n            duration,\\n            capacity,\\n            depositTokenAddress,\\n            earnTokenAddress,\\n            isLpPool\\n        );\\n    }\\n\\n    function updatePool(\\n        uint256 poolId,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 apy,\\n        uint256 duration,\\n        uint256 capacity,\\n        address depositTokenAddress,\\n        address earnTokenAddress,\\n        bool isLpPool\\n    ) external onlyAdmin {\\n        Pool storage pool = pools[poolId];\\n        PoolStatus poolStatus = getPoolStatus(poolId);\\n\\n        require(\\n            poolStatus != PoolStatus.PAUSED &&\\n                poolStatus != PoolStatus.FINISHED,\\n            \\\"Invalid pool status\\\"\\n        );\\n        require(startTime < endTime, \\\"Invalid end time\\\");\\n        require(startTime > block.timestamp, \\\"Invalid start time\\\");\\n        require(duration > 0, \\\"Invalid duration\\\");\\n        require(capacity > 0, \\\"Invalid capacity\\\");\\n        require(\\n            depositTokenAddress != address(0),\\n            \\\"Invalid deposit token address\\\"\\n        );\\n        require(earnTokenAddress != address(0), \\\"Invalid earn token address\\\");\\n\\n        pool.startTime = startTime;\\n        pool.endTime = endTime;\\n        pool.apy = apy;\\n        pool.duration = duration;\\n        pool.capacity = capacity;\\n        pool.depositTokenAddress = depositTokenAddress;\\n        pool.earnTokenAddress = earnTokenAddress;\\n        pool.isLpPool = isLpPool;\\n\\n        emit PoolUpdated(\\n            poolId,\\n            startTime,\\n            endTime,\\n            apy,\\n            duration,\\n            capacity,\\n            depositTokenAddress,\\n            earnTokenAddress,\\n            isLpPool\\n        );\\n    }\\n\\n    function pausePool(uint256 poolId) external onlyAdmin whenNotPaused {\\n        Pool storage pool = pools[poolId];\\n\\n        require(pool.depositTokenAddress != address(0), \\\"Invalid pool\\\");\\n        require(!pool.isPaused, \\\"Cannot pause\\\");\\n\\n        pool.isPaused = true;\\n\\n        emit PoolPaused(poolId);\\n    }\\n\\n    function unpausePool(uint256 poolId) external onlyAdmin whenNotPaused {\\n        Pool storage pool = pools[poolId];\\n\\n        require(pool.depositTokenAddress != address(0), \\\"Invalid pool\\\");\\n        require(pool.isPaused, \\\"Cannot unpause\\\");\\n\\n        pool.isPaused = false;\\n\\n        emit PoolUnpaused(poolId);\\n    }\\n\\n    function setAdmins(\\n        address[] calldata users,\\n        bool remove\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < users.length; i++) {\\n            adminList[users[i]] = !remove;\\n        }\\n    }\\n\\n    function setSigner(address _signer) external onlyOwner {\\n        require(_signer != address(0), \\\"Invalid signer\\\");\\n\\n        signer = _signer;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function emergencyTokenWithdraw(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IERC20(token).transfer(recipient, amount);\\n    }\\n\\n    function recoverSigner(\\n        bytes32 _ethSignedMessageHash,\\n        bytes memory _signature\\n    ) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\\n\\n        return ecrecover(_ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function getMessageHash(\\n        uint256 poolId,\\n        uint256 depositAmount,\\n        uint256 tokenId,\\n        uint128 liquidity,\\n        uint256 expiredAt\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    poolId,\\n                    depositAmount,\\n                    tokenId,\\n                    liquidity,\\n                    expiredAt\\n                )\\n            );\\n    }\\n\\n    function getEthSignedMessageHash(\\n        bytes32 _messageHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n\\n    function splitSignature(\\n        bytes memory sig\\n    ) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(sig.length == 65, \\\"invalid signature length\\\");\\n\\n        assembly {\\n            /*\\n            First 32 bytes stores the length of the signature\\n\\n            add(sig, 32) = pointer of sig + 32\\n            effectively, skips first 32 bytes of signature\\n\\n            mload(p) loads next 32 bytes starting at the memory address p into memory\\n            */\\n\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        // implicitly return (r, s, v)\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedEarnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LpStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LpUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"earnTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLpPool\",\"type\":\"bool\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"earnTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLpPool\",\"type\":\"bool\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedEarnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnAmount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_DAY_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR_IN_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"calculateEarnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedEarnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"calculateUnstakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earnTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpPool\",\"type\":\"bool\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyTokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earnTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExpectedTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLpPool\",\"type\":\"bool\"}],\"internalType\":\"struct Mar3StakingStaging.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolStatus\",\"outputs\":[{\"internalType\":\"enum Mar3StakingStaging.PoolStatus\",\"name\":\"poolStatus\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokenEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExpectedTokenEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExpectedTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenEarned\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedEarnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Mar3StakingStaging.Deposit[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Mar3StakingStaging.UserInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalTokenEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExpectedTokenEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earnTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExpectedTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLpPool\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"remove\",\"type\":\"bool\"}],\"name\":\"setAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"stakeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"unstakeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"earnTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpPool\",\"type\":\"bool\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokenDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExpectedTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Mar3StakingStaging", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}