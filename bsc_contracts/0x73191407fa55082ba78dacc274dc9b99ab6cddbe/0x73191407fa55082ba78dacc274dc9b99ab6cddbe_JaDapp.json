{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/4_jadapp.sol\r\n\r\n\r\npragma solidity 0.8.23; \r\n\r\n\r\n\r\n\r\ninterface IPancakeRouter02 {\r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint[] memory amounts);\r\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\r\n    function getAmountsIn(uint256 amountOut, address[] memory path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20Detailed is IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IWDRIP {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function deposit(uint256 dripAmount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract JaDapp is ReentrancyGuard, Ownable {\r\n\r\n    struct User {\r\n        uint256 depositedUSDT;\r\n        uint256 claimedUSDT;\r\n        uint256 compoundedUSDT;\r\n        uint256 lastClaimUSDTBlock;\r\n        uint256 claimedDrip;\r\n        uint256 lastClaimDripBlock;\r\n        uint256 referralBonus;\r\n        address referrer;\r\n    }\r\n\r\n    IPancakeRouter02 public immutable pancakeRouter;\r\n    IERC20Detailed public immutable usdtToken;\r\n    IERC20Detailed public immutable dripToken;\r\n    IERC20Detailed public immutable btcToken;\r\n    IERC20Detailed public immutable ethToken;\r\n    IERC20Detailed public immutable busdToken;\r\n    IERC20Detailed public immutable wDripToken;\r\n    IWDRIP public immutable wDripTokenInterface;\r\n\r\n    uint256 public constant SLIPPAGE_DRIP_TRADES = 1150;\r\n    uint256 public constant SLIPPAGE_OTHER_TRADES = 100;\r\n\r\n    mapping(address => User) public users;\r\n    uint256 public totalDepositedUSDT;\r\n\r\n    uint256 public constant TOTAL_CLAIMABLE_PERCENT = 20000;\r\n    uint256 public constant REFERRAL_BONUS_PERCENT = 250;\r\n    uint256 public constant USDT_DAILY_PERCENT = 50;\r\n    uint256 public constant PERCENT_DENOMINATOR = 10000;\r\n    uint256 public constant BLOCKS_PER_DAY = 28000;\r\n    uint256 public constant HARD_CAP = 200000 * 1e18;\r\n    uint256 public lastAdminSwapBlock;\r\n    uint256 public OWNER_REWARD_BLOCK;\r\n    address public ownerAddress;\r\n    uint8 public depositLock;\r\n\r\n    event Deposited(address indexed user, uint256 amount, address indexed referrer);\r\n    event ClaimedUSDT(address indexed user, uint256 amount);\r\n    event CompoundedUSDT(address indexed user, uint256 amount);\r\n    event ClaimedDrip(address indexed user, uint256 amount);\r\n    event ClaimedwDrip(address indexed user, uint256 amount);\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        usdtToken = IERC20Detailed(0x55d398326f99059fF775485246999027B3197955);\r\n        dripToken = IERC20Detailed(0x20f663CEa80FaCE82ACDFA3aAE6862d246cE0333);\r\n        btcToken = IERC20Detailed(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);\r\n        ethToken = IERC20Detailed(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);\r\n        busdToken = IERC20Detailed(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n        wDripToken = IERC20Detailed(0xF30224eB7104aca47235beb3362E331Ece70616A);\r\n        wDripTokenInterface = IWDRIP(0xF30224eB7104aca47235beb3362E331Ece70616A);\r\n\r\n        OWNER_REWARD_BLOCK = block.number + (BLOCKS_PER_DAY * 365);\r\n        ownerAddress = msg.sender;\r\n        users[ownerAddress].depositedUSDT = 10000 * 1e18;\r\n        lastAdminSwapBlock = block.number;\r\n        depositLock = 0;\r\n    }\r\n\r\n// Public Writable Functions\r\n\r\n    function deposit(uint256 _amount, address _referrer) external nonReentrant {\r\n        User storage user = users[msg.sender];\r\n        require(user.claimedUSDT < HARD_CAP, \"Hard cap reached.\");\r\n        require(depositLock == 0, \"New depostis are currently locked\");\r\n        require(_amount > 0, \"Amount must be greater than zero.\");\r\n        require(_referrer != msg.sender, \"Referrer cannot be self.\");\r\n        require(usdtToken.transferFrom(msg.sender, address(this), _amount), \"Transfer failed\");\r\n        _handleNewDeposit(_amount, _referrer, user);\r\n        _swapAndDistribute(_amount);\r\n        user.lastClaimDripBlock = block.number;\r\n        emit Deposited(msg.sender, _amount, _referrer);\r\n    }\r\n\r\n    function claimUSDT() external nonReentrant {\r\n        if(msg.sender == ownerAddress){\r\n            require(block.number > OWNER_REWARD_BLOCK, \"Owner cooldown still active.\");\r\n        }\r\n        User storage user = users[msg.sender];\r\n        require(user.depositedUSDT > 0, \"No deposit made by user.\");\r\n        uint256 claimableAmount = _calculateClaimableUSDT(user);\r\n        require(claimableAmount > 0, \"No claimable USDT available.\");\r\n        require(user.claimedUSDT + claimableAmount <= ((user.depositedUSDT + user.referralBonus + user.compoundedUSDT) * TOTAL_CLAIMABLE_PERCENT) / PERCENT_DENOMINATOR, \"Claim limit reached.\");\r\n        require(user.claimedUSDT + claimableAmount <= HARD_CAP, \"Hard cap reached.\");\r\n        if (user.claimedUSDT > user.depositedUSDT) {\r\n            uint256 dripAmount = (claimableAmount * 5) / 100;\r\n            claimableAmount -= dripAmount;\r\n            _swapUSDTForToken(dripAmount, dripToken);\r\n        }\r\n        user.claimedUSDT += claimableAmount;\r\n        user.lastClaimUSDTBlock = block.number;\r\n        uint256 usdtBalanceContract = usdtToken.balanceOf(address(this));\r\n        if(claimableAmount > usdtBalanceContract){\r\n            uint256 tokensToSwap = claimableAmount - usdtBalanceContract;\r\n            _swapTokensForUSDT(tokensToSwap);\r\n        }\r\n        require(usdtToken.transfer(msg.sender, claimableAmount), \"Transfer failed\");\r\n        emit ClaimedUSDT(msg.sender, claimableAmount);\r\n    }\r\n\r\n    function compoundUSDT() external nonReentrant {\r\n        User storage user = users[msg.sender];\r\n        uint256 claimableAmount = _calculateClaimableUSDT(user);\r\n        require(user.claimedUSDT + claimableAmount <= ((user.depositedUSDT + user.referralBonus + user.compoundedUSDT) * TOTAL_CLAIMABLE_PERCENT) / PERCENT_DENOMINATOR, \"Compounding exceeds 200% limit.\");\r\n        require(user.claimedUSDT + claimableAmount < HARD_CAP, \"Hard cap reached.\");\r\n        user.lastClaimUSDTBlock = block.number;\r\n        totalDepositedUSDT += claimableAmount;\r\n        user.compoundedUSDT += claimableAmount;\r\n        emit CompoundedUSDT(msg.sender, claimableAmount);\r\n    }\r\n\r\n    function claimDrip(bool _wrapped) external nonReentrant {\r\n        require(msg.sender != ownerAddress, \"Owner cannot claim Drip or wDrip\");\r\n        User storage user = users[msg.sender];\r\n        require(user.depositedUSDT > 0, \"No deposit made by user.\");\r\n        uint256 claimableDrip = _calculateClaimableDrip(user);\r\n        require(claimableDrip > 0, \"No claimable DRIP available.\");\r\n        user.lastClaimDripBlock = block.number;\r\n        user.claimedDrip += claimableDrip;\r\n        if (user.claimedUSDT > (user.depositedUSDT + user.compoundedUSDT + user.referralBonus)) {\r\n            uint256 amountToBurn = claimableDrip / 2;\r\n            claimableDrip -= amountToBurn;\r\n            require(dripToken.transfer(address(0), amountToBurn), \"Burn failed\");\r\n        }\r\n        if(_wrapped == false){\r\n            require(dripToken.transfer(msg.sender, claimableDrip), \"Transfer failed\");\r\n            emit ClaimedDrip(msg.sender, claimableDrip);\r\n        }else if(_wrapped == true){\r\n            uint256 wDripBalBefore = wDripTokenInterface.balanceOf(address(this));\r\n            dripToken.approve(address(wDripToken),claimableDrip);\r\n            wDripTokenInterface.deposit(claimableDrip);\r\n            uint256 wDripBalAfter = wDripTokenInterface.balanceOf(address(this));\r\n            uint256 claimablewDrip = wDripBalAfter - wDripBalBefore;\r\n            require(wDripTokenInterface.transfer(msg.sender, claimablewDrip), \"Transfer failed\");\r\n            emit ClaimedwDrip(msg.sender, claimablewDrip);\r\n        }\r\n    }\r\n\r\n// Public Read Functions\r\n\r\n    function getUserStats(address _user) external view returns (uint256 depositedUSDT,uint256 myTotalUSDT, uint256 claimedUSDT,uint256 compoundedUSDT,uint256 lastClaimUSDTBlock,uint256 claimableUSDT,uint256 claimedDrip,uint256 lastClaimDripBlock,uint256 claimableDrip,uint256 referralBonus, address referrer) {\r\n        User storage user = users[_user];\r\n        depositedUSDT = user.depositedUSDT;\r\n        myTotalUSDT = user.depositedUSDT + user.referralBonus + user.compoundedUSDT;\r\n        claimedUSDT = user.claimedUSDT;\r\n        compoundedUSDT = user.compoundedUSDT;\r\n        lastClaimUSDTBlock = user.lastClaimUSDTBlock;\r\n        claimableUSDT = _calculateClaimableUSDT(user);\r\n        claimedDrip = user.claimedDrip;\r\n        lastClaimDripBlock = user.lastClaimDripBlock;\r\n        claimableDrip = _calculateClaimableDrip(user);\r\n        referralBonus = user.referralBonus;\r\n        referrer = user.referrer;\r\n    }\r\n\r\n    function getContractStats() external view returns (uint256 totalUSDTDeposited, uint256 totalUSDTBalance, uint256 totalDripBalance, uint256 totalwDripBalance, uint256 totalBTCTokenBalance, uint256 totalETHTokenBalance) {\r\n        totalUSDTDeposited = totalDepositedUSDT;\r\n        totalUSDTBalance = usdtToken.balanceOf(address(this));\r\n        totalwDripBalance = wDripToken.balanceOf(address(this));\r\n        totalDripBalance = dripToken.balanceOf(address(this));\r\n        totalBTCTokenBalance = btcToken.balanceOf(address(this));\r\n        totalETHTokenBalance = ethToken.balanceOf(address(this));\r\n    }\r\n\r\n    function blocksUntilNextAdminSwap() public view returns(uint256 _remaining, uint256 _since, uint256 _next){\r\n        require((lastAdminSwapBlock + (BLOCKS_PER_DAY * 90) < block.number), \"Admin can swap now\");\r\n        _since = block.number - lastAdminSwapBlock;\r\n        _next = lastAdminSwapBlock + (BLOCKS_PER_DAY * 90);\r\n        _remaining = _next - block.number;\r\n    }\r\n\r\n    function checkUserStatus(address _user) public view returns(bool deposited, bool claimedCapPercentage, bool claimedHardCap, bool positiveInfluence){\r\n        User storage user = users[_user];\r\n        if(user.depositedUSDT > 0){\r\n            deposited = true;\r\n        } else {\r\n            deposited = false;\r\n        }\r\n        uint256 totalUSDT = ((user.depositedUSDT + user.referralBonus + user.compoundedUSDT) * TOTAL_CLAIMABLE_PERCENT) / PERCENT_DENOMINATOR;\r\n        if(user.claimedUSDT > totalUSDT){\r\n            claimedCapPercentage = true;\r\n        } else {\r\n            claimedCapPercentage = false;\r\n        }\r\n        if(user.claimedUSDT > HARD_CAP){\r\n            claimedHardCap = true;\r\n        } else { \r\n            claimedHardCap = false;\r\n        }\r\n        if(user.depositedUSDT > user.claimedUSDT){\r\n            positiveInfluence = true;\r\n        } else {\r\n            positiveInfluence = false;\r\n        }\r\n    }\r\n\r\n    function checkDepositLock() external view returns (uint8 _depositLock){\r\n        _depositLock = depositLock;\r\n    }\r\n\r\n// Admin Helper Functions\r\n\r\n    function withdrawToken(IERC20Detailed token, uint256 amount) external onlyOwner {\r\n        require(token != usdtToken && token != dripToken && token != btcToken && token != ethToken && token != wDripToken,\"Cannot withdraw core tokens\");\r\n        require(token.transfer(owner(), amount), \"Transfer failed\");\r\n    }\r\n\r\n    function adminSwapPercentage(uint256 _percentage) external onlyOwner {\r\n        require(block.number > (lastAdminSwapBlock + (BLOCKS_PER_DAY * 90)), \"Cannot swap yet.\");\r\n        require(_percentage > 0, \"Percentage too low\");\r\n        require(_percentage < 25, \"Percentage above 25%\");\r\n        lastAdminSwapBlock = block.number;\r\n        _swapSmallPercentageOfTokensForUSDT(_percentage);\r\n    }\r\n\r\n    function adminSwapPercentageForDrip(uint256 _percentage) external onlyOwner {\r\n        require(block.number > (lastAdminSwapBlock + (BLOCKS_PER_DAY * 90)), \"Cannot swap yet.\");\r\n        require(_percentage > 0, \"Percentage too low\");\r\n        require(_percentage < 25, \"Percentage above 25%\");\r\n        uint256 usdtBalBefore = usdtToken.balanceOf(address(this));\r\n        lastAdminSwapBlock = block.number;\r\n        _swapSmallPercentageOfTokensForUSDT(_percentage);\r\n        uint256 usdtBalAfter = usdtToken.balanceOf(address(this));\r\n        uint256 usdtBalDifference = usdtBalAfter - usdtBalBefore;\r\n        _swapUSDTForToken(usdtBalDifference, dripToken);\r\n    }\r\n\r\n    function toggleDepositLock() external onlyOwner {\r\n        depositLock = 1 - depositLock;\r\n    }\r\n\r\n// Private Helper Functions\r\n\r\n    function _calculateClaimableUSDT(User storage user) private view returns (uint256) {\r\n        if (totalDepositedUSDT == 0) {\r\n            return 0;\r\n        }\r\n        if (user.claimedUSDT >= HARD_CAP) {\r\n            return 0;\r\n        }\r\n        uint256 blocksPassed = block.number - user.lastClaimUSDTBlock;\r\n        if (blocksPassed > 0) {\r\n            uint256 onePercentOfDeposit = ((user.depositedUSDT + user.referralBonus + user.compoundedUSDT) * USDT_DAILY_PERCENT) / PERCENT_DENOMINATOR;\r\n            uint256 userRewards = (onePercentOfDeposit * blocksPassed) / BLOCKS_PER_DAY;\r\n            return userRewards;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _calculateClaimableDrip(User storage user) private view returns (uint256) {\r\n        if (totalDepositedUSDT == 0) {\r\n            return 0;\r\n        }\r\n        if (user.claimedUSDT > HARD_CAP){\r\n            return 0;\r\n        }\r\n        if (user.claimedUSDT > ((user.depositedUSDT + user.compoundedUSDT + user.referralBonus) * 2)){\r\n            return 0;\r\n        }\r\n\r\n        uint256 dripPoolToday = dripToken.balanceOf(address(this)) / 100;\r\n        uint256 blocksToReward = block.number - user.lastClaimDripBlock;\r\n        uint256 dripPoolPerBlock = (dripPoolToday * blocksToReward) / BLOCKS_PER_DAY;\r\n        uint256 userRewards = (dripPoolPerBlock * user.depositedUSDT + user.referralBonus) / totalDepositedUSDT;\r\n        return userRewards;\r\n    }\r\n\r\n    function _swapTokensForUSDT(uint256 _amountUSDT) private {\r\n        uint256 halfAmount_A = _amountUSDT / 2;\r\n        uint256 halfAmount_B = _amountUSDT - halfAmount_A;\r\n        uint256 btcToSwap = _getusdtValue(halfAmount_A, btcToken);\r\n        uint256 ethToSwap = _getusdtValue(halfAmount_B, ethToken);\r\n        _swapTokenForUSDT(btcToSwap, btcToken);\r\n        _swapTokenForUSDT(ethToSwap, ethToken);\r\n    }\r\n\r\n    function _getusdtValue(uint256 _amountToken, IERC20Detailed _token) private view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(_token);\r\n        path[1] = address(usdtToken);\r\n        uint256[] memory amountsOut = pancakeRouter.getAmountsIn(_amountToken, path);\r\n        return amountsOut[0];\r\n    }\r\n\r\n    function _swapTokenForUSDT(uint256 _amountToken, IERC20Detailed _token) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(_token);\r\n        path[1] = address(usdtToken);\r\n        uint256 slippageTolerance = _token == dripToken ? SLIPPAGE_DRIP_TRADES : SLIPPAGE_OTHER_TRADES;\r\n        uint256[] memory amountsOut = pancakeRouter.getAmountsOut(_amountToken, path);\r\n        uint256 amountOutMin = amountsOut[1] * (PERCENT_DENOMINATOR - slippageTolerance) / PERCENT_DENOMINATOR;\r\n        _token.approve(address(pancakeRouter), _amountToken);\r\n        pancakeRouter.swapExactTokensForTokens(_amountToken, amountOutMin, path, address(this), block.timestamp + 60);\r\n    }\r\n\r\n    function _swapAndDistribute(uint256 _amount) private {\r\n        uint256 halfUSDT = _amount / 2;\r\n        uint256 quarterUSDT_A = (_amount - halfUSDT) / 2;\r\n        uint256 quarterUSDT_B = (_amount - halfUSDT) - quarterUSDT_A;\r\n        _swapUSDTForToken(halfUSDT, dripToken);\r\n        _swapUSDTForToken(quarterUSDT_A, btcToken);\r\n        _swapUSDTForToken(quarterUSDT_B, ethToken);\r\n    }\r\n\r\n    function _swapUSDTForToken(uint256 _amountUSDT, IERC20Detailed _token) private {\r\n        address[] memory path;\r\n        if (_token == dripToken) {\r\n            path = new address[](3);\r\n            path[0] = address(usdtToken);\r\n            path[1] = address(busdToken);\r\n            path[2] = address(_token);\r\n        } else {\r\n            path = new address[](2);\r\n            path[0] = address(usdtToken);\r\n            path[1] = address(_token);\r\n        }\r\n        uint256 slippageTolerance = _token == dripToken ? SLIPPAGE_DRIP_TRADES : SLIPPAGE_OTHER_TRADES;\r\n        uint256[] memory amountsOut = pancakeRouter.getAmountsOut(_amountUSDT, path);\r\n        uint256 amountOutMin = amountsOut[amountsOut.length - 1] * (PERCENT_DENOMINATOR - slippageTolerance) / PERCENT_DENOMINATOR;\r\n        usdtToken.approve(address(pancakeRouter), _amountUSDT);\r\n        pancakeRouter.swapExactTokensForTokens(_amountUSDT, amountOutMin, path, address(this), block.timestamp + 60);\r\n    }\r\n\r\n    function _handleNewDeposit(uint256 _amount, address _referrer, User storage user) private {\r\n        if (_referrer != address(0) && user.referrer == address(0)) {\r\n            user.referrer = _referrer;\r\n        } else {\r\n            user.referrer = address(0);\r\n        }\r\n        user.depositedUSDT += _amount;\r\n        user.lastClaimUSDTBlock = block.number;\r\n        totalDepositedUSDT += _amount;\r\n        if (user.referrer != address(0)) {\r\n            uint256 referralBonus = (_amount * REFERRAL_BONUS_PERCENT) / PERCENT_DENOMINATOR;\r\n            if(users[_referrer].lastClaimUSDTBlock == 0){\r\n                users[_referrer].lastClaimUSDTBlock = block.number;\r\n            }\r\n            if(users[_referrer].lastClaimDripBlock == 0){\r\n                users[_referrer].lastClaimDripBlock = block.number;\r\n            }\r\n            users[_referrer].referralBonus += referralBonus;\r\n            totalDepositedUSDT += referralBonus;\r\n        }\r\n    }\r\n\r\n    function _swapSmallPercentageOfTokensForUSDT(uint256 percentage) private {\r\n        require(percentage > 0, \"Percentage must be greater than 0\");\r\n        require(percentage <= 100, \"Percentage must not exceed 100\");\r\n        uint256 btcBalance = btcToken.balanceOf(address(this));\r\n        uint256 ethBalance = ethToken.balanceOf(address(this));\r\n        uint256 btcToSwap = (btcBalance * percentage) / 100;\r\n        uint256 ethToSwap = (ethBalance * percentage) / 100;\r\n        if (btcToSwap > 0) {\r\n            _swapTokenForUSDT(btcToSwap, btcToken);\r\n        }\r\n        if (ethToSwap > 0) {\r\n            _swapTokenForUSDT(ethToSwap, ethToken);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedDrip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedwDrip\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompoundedUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_REWARD_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_BONUS_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_DRIP_TRADES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_OTHER_TRADES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_CLAIMABLE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_DAILY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"adminSwapPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"adminSwapPercentageForDrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksUntilNextAdminSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_next\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcToken\",\"outputs\":[{\"internalType\":\"contract IERC20Detailed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20Detailed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkDepositLock\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_depositLock\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkUserStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"deposited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimedCapPercentage\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimedHardCap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positiveInfluence\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_wrapped\",\"type\":\"bool\"}],\"name\":\"claimDrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLock\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dripToken\",\"outputs\":[{\"internalType\":\"contract IERC20Detailed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToken\",\"outputs\":[{\"internalType\":\"contract IERC20Detailed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUSDTDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUSDTBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDripBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalwDripBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBTCTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalETHTokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"myTotalUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimUSDTBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDrip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimDripBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableDrip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralBonus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAdminSwapBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDepositLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20Detailed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundedUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimUSDTBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDrip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimDripBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralBonus\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wDripToken\",\"outputs\":[{\"internalType\":\"contract IERC20Detailed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wDripTokenInterface\",\"outputs\":[{\"internalType\":\"contract IWDRIP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Detailed\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JaDapp", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "4000", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ca8a485ed6bd43ac2e36dbceca481baa697458de1cc66adff9ad3bb18ced5ba"}