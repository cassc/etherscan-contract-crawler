{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin-4/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin-4/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin-4/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin-4/contracts/token/ERC20/ERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin-4/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin-4/contracts/utils/Address.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin-4/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/BIFI/interfaces/common/IUniswapRouterETH.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IUniswapRouterETH {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn, \r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, \r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    \r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/BIFI/interfaces/common/IWrappedNative.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IWrappedNative {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n// File: contracts/BIFI/interfaces/curve/ICurveSwap.sol\r\n\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface ICurveSwap {\r\n    function remove_liquidity_one_coin(uint256 token_amount, int128 i, uint256 min_amount) external;\r\n    function calc_withdraw_one_coin(uint256 tokenAmount, int128 i) external view returns (uint256);\r\n    function coins(uint256 arg0) external view returns (address);\r\n\r\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable;\r\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount, bool _use_underlying) external;\r\n    function add_liquidity(address _pool, uint256[2] memory amounts, uint256 min_mint_amount) external;\r\n\r\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external payable;\r\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount, bool _use_underlying) external;\r\n    function add_liquidity(address _pool, uint256[3] memory amounts, uint256 min_mint_amount) external;\r\n\r\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external payable;\r\n    function add_liquidity(address _pool, uint256[4] memory amounts, uint256 min_mint_amount) external;\r\n\r\n    function add_liquidity(uint256[5] memory amounts, uint256 min_mint_amount) external payable;\r\n\r\n    function get_dy(int128 i, int128 j, uint256 dx) external view returns (uint256);\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\r\n}\r\n\r\n// File: contracts/BIFI/strategies/Ellipsis/IDotDot.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDotDotLpDepositor {\r\n    struct Amounts {\r\n        uint256 epx;\r\n        uint256 ddd;\r\n    }\r\n\r\n    struct ExtraReward {\r\n        address token;\r\n        uint256 amount;\r\n    }\r\n\r\n    function depositTokens(address pool) external view returns (address);\r\n    function userBalances(address user, address pool) external view returns (uint256);\r\n\r\n    function deposit(address _user, address _token, uint256 _amount) external;\r\n    function withdraw(address _receiver, address _token, uint256 _amount) external;\r\n\r\n    function claimable(address _user, address[] calldata _tokens) external view returns (Amounts[] memory);\r\n    function claimableExtraRewards(address user, address pool) external view returns (ExtraReward[] memory);\r\n    function claim(address _receiver, address[] calldata _tokens, uint256 _maxBondAmount) external;\r\n    function claimExtraRewards(address _receiver, address pool) external;\r\n}\r\n\r\ninterface IDotDotBondedFeeDistributor {\r\n    function claimable(address _user, address[] calldata _tokens) external view returns (uint256[] memory amounts);\r\n    function claim(address _user, address[] calldata _tokens) external returns (uint256[] memory claimedAmounts);\r\n\r\n    function bondedBalance(address _user) external view returns (uint256);\r\n    function unbondableBalance(address _user) external view returns (uint256);\r\n    function streamingBalances(address _user) external view returns (uint256 _claimable, uint256 _total);\r\n\r\n    function initiateUnbondingStream(uint256 _amount) external returns (bool);\r\n    function withdrawUnbondedTokens(address _receiver) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin-4/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin-4/contracts/security/Pausable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/BIFI/interfaces/common/IFeeConfig.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFeeConfig {\r\n    struct FeeCategory {\r\n        uint256 total;\r\n        uint256 beefy;\r\n        uint256 call;\r\n        uint256 strategist;\r\n        string label;\r\n        bool active;\r\n    }\r\n    function getFees(address strategy) external view returns (FeeCategory memory);\r\n    function stratFeeId(address strategy) external view returns (uint256);\r\n    function setStratFeeId(uint256 feeId) external;\r\n}\r\n\r\n// File: contracts/BIFI/strategies/Common/StratFeeManager.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract StratFeeManager is Ownable, Pausable {\r\n\r\n    struct CommonAddresses {\r\n        address vault;\r\n        address unirouter;\r\n        address keeper;\r\n        address strategist;\r\n        address beefyFeeRecipient;\r\n        address beefyFeeConfig;\r\n    }\r\n\r\n    // common addresses for the strategy\r\n    address public vault;\r\n    address public unirouter;\r\n    address public keeper;\r\n    address public strategist;\r\n    address public beefyFeeRecipient;\r\n    IFeeConfig public beefyFeeConfig;\r\n\r\n    uint256 constant DIVISOR = 1 ether;\r\n    uint256 constant public WITHDRAWAL_FEE_CAP = 50;\r\n    uint256 constant public WITHDRAWAL_MAX = 10000;\r\n    uint256 public withdrawalFee = 10;\r\n\r\n    event SetStratFeeId(uint256 feeId);\r\n    event SetWithdrawalFee(uint256 withdrawalFee);\r\n    event SetVault(address vault);\r\n    event SetUnirouter(address unirouter);\r\n    event SetKeeper(address keeper);\r\n    event SetStrategist(address strategist);\r\n    event SetBeefyFeeRecipient(address beefyFeeRecipient);\r\n    event SetBeefyFeeConfig(address beefyFeeConfig);\r\n\r\n    constructor(\r\n        CommonAddresses memory _commonAddresses\r\n    ) {\r\n        vault = _commonAddresses.vault;\r\n        unirouter = _commonAddresses.unirouter;\r\n        keeper = _commonAddresses.keeper;\r\n        strategist = _commonAddresses.strategist;\r\n        beefyFeeRecipient = _commonAddresses.beefyFeeRecipient;\r\n        beefyFeeConfig = IFeeConfig(_commonAddresses.beefyFeeConfig);\r\n    }\r\n\r\n    // checks that caller is either owner or keeper.\r\n    modifier onlyManager() {\r\n        require(msg.sender == owner() || msg.sender == keeper, \"!manager\");\r\n        _;\r\n    }\r\n\r\n    // fetch fees from config contract\r\n    function getFees() public view returns (IFeeConfig.FeeCategory memory) {\r\n        return beefyFeeConfig.getFees(address(this));\r\n    }\r\n\r\n    function getStratFeeId() external view returns (uint256) {\r\n        return beefyFeeConfig.stratFeeId(address(this));\r\n    }\r\n\r\n    function setStratFeeId(uint256 _feeId) external onlyManager {\r\n        beefyFeeConfig.setStratFeeId(_feeId);\r\n        emit SetStratFeeId(_feeId);\r\n    }\r\n\r\n    // adjust withdrawal fee\r\n    function setWithdrawalFee(uint256 _fee) public onlyManager {\r\n        require(_fee <= WITHDRAWAL_FEE_CAP, \"!cap\");\r\n        withdrawalFee = _fee;\r\n        emit SetWithdrawalFee(_fee);\r\n    }\r\n\r\n    // set new vault (only for strategy upgrades)\r\n    function setVault(address _vault) external onlyOwner {\r\n        vault = _vault;\r\n        emit SetVault(_vault);\r\n    }\r\n\r\n    // set new unirouter\r\n    function setUnirouter(address _unirouter) external onlyOwner {\r\n        unirouter = _unirouter;\r\n        emit SetUnirouter(_unirouter);\r\n    }\r\n\r\n    // set new keeper to manage strat\r\n    function setKeeper(address _keeper) external onlyManager {\r\n        keeper = _keeper;\r\n        emit SetKeeper(_keeper);\r\n    }\r\n\r\n    // set new strategist address to receive strat fees\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        strategist = _strategist;\r\n        emit SetStrategist(_strategist);\r\n    }\r\n\r\n    // set new beefy fee address to receive beefy fees\r\n    function setBeefyFeeRecipient(address _beefyFeeRecipient) external onlyOwner {\r\n        beefyFeeRecipient = _beefyFeeRecipient;\r\n        emit SetBeefyFeeRecipient(_beefyFeeRecipient);\r\n    }\r\n\r\n    // set new fee config address to fetch fees\r\n    function setBeefyFeeConfig(address _beefyFeeConfig) external onlyOwner {\r\n        beefyFeeConfig = IFeeConfig(_beefyFeeConfig);\r\n        emit SetBeefyFeeConfig(_beefyFeeConfig);\r\n    }\r\n\r\n    function beforeDeposit() external virtual {}\r\n}\r\n\r\n// File: contracts/BIFI/utils/IGasPrice.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IGasPrice {\r\n    function maxGasPrice() external returns (uint);\r\n}\r\n\r\n// File: contracts/BIFI/utils/GasFeeThrottler.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract GasFeeThrottler {\r\n\r\n    bool public shouldGasThrottle = true;\r\n\r\n    address public gasprice = address(0xA43509661141F254F54D9A326E8Ec851A0b95307);\r\n\r\n    modifier gasThrottle() {\r\n        if (shouldGasThrottle && Address.isContract(gasprice)) {\r\n            require(tx.gasprice <= IGasPrice(gasprice).maxGasPrice(), \"gas is too high!\");\r\n        }\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts/BIFI/strategies/Ellipsis/StrategyDotDotEllipsis.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StrategyDotDotEllipsis is StratFeeManager, GasFeeThrottler {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Tokens used\r\n    address public epx = 0xAf41054C1487b0e5E2B9250C0332eCBCe6CE9d71;\r\n    address public depx = 0x772F317ec695ce20290b56466b3f48501ba81352;\r\n    address public ddd = 0x84c97300a190676a19D1E13115629A11f8482Bd1;\r\n    address public native = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\r\n    // Third party contracts\r\n    IDotDotLpDepositor public lpDepositor = IDotDotLpDepositor(0x8189F0afdBf8fE6a9e13c69bA35528ac6abeB1af);\r\n    IDotDotBondedFeeDistributor public feeDistributor = IDotDotBondedFeeDistributor(0xd4F7b4BC46e6e499D35335D270fd094979D815A0);\r\n    address public depxEpxSwap = 0x45859D71D4caFb93694eD43a5ecE05776Fc2465d;\r\n    address public epxBnbSwap = 0xE014A89c9788dAfdE603a13F2f01390610382471;\r\n\r\n    address public want; // ellipsis lpToken\r\n    address public receiptToken; // receipt token minted/burned by LpDepositor lpDepositor.depositTokens(want)\r\n    address public pool; // swap pool (lpToken minter)\r\n    address public metaPool; // pool to deposit into metaPool, can be 0x0\r\n    address public depositToken;\r\n    uint public poolSize;\r\n    uint public depositIndex;\r\n\r\n    // Routes\r\n    address[] public dddToNativeRoute = [ddd, native];\r\n    address[] public nativeToDepositRoute;\r\n\r\n    struct Reward {\r\n        address token;\r\n        address router; // uniswap router\r\n        address[] toNativeRoute; // uniswap route\r\n        uint minAmount; // minimum amount to be swapped to native\r\n    }\r\n\r\n    Reward[] public rewards;\r\n\r\n    // claim EPX as bonded dEPX to receive 3x DDD\r\n    bool public claimAsBondedEpx = true;\r\n\r\n    // if depositToken should be sent as unwrapped native\r\n    bool public depositNative;\r\n\r\n    bool public harvestOnDeposit;\r\n    uint256 public lastHarvest;\r\n\r\n    event StratHarvest(address indexed harvester, uint256 wantHarvested, uint256 tvl);\r\n    event Deposit(uint256 tvl);\r\n    event Withdraw(uint256 tvl);\r\n    event ChargedFees(uint256 callFees, uint256 beefyFees, uint256 strategistFees);\r\n\r\n    constructor(\r\n        address _want,\r\n        address _pool,\r\n        address _metaPool,\r\n        uint _poolSize,\r\n        uint _depositIndex,\r\n        address[] memory _nativeToDepositRoute,\r\n        CommonAddresses memory _commonAddresses\r\n    ) StratFeeManager(_commonAddresses) {\r\n        want = _want;\r\n        pool = _pool;\r\n        metaPool = _metaPool;\r\n        poolSize = _poolSize;\r\n        depositIndex = _depositIndex;\r\n\r\n        receiptToken = lpDepositor.depositTokens(want);\r\n\r\n        require(_nativeToDepositRoute[0] == native, '_nativeToDepositRoute[0] != native');\r\n        depositToken = _nativeToDepositRoute[_nativeToDepositRoute.length - 1];\r\n        nativeToDepositRoute = _nativeToDepositRoute;\r\n\r\n        harvestOnDeposit = true;\r\n        withdrawalFee = 0;\r\n\r\n        _giveAllowances();\r\n    }\r\n\r\n    // puts the funds to work\r\n    function deposit() public whenNotPaused {\r\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\r\n\r\n        if (wantBal > 0) {\r\n            lpDepositor.deposit(address(this), want, wantBal);\r\n            emit Deposit(balanceOf());\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == vault, \"!vault\");\r\n\r\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\r\n\r\n        if (wantBal < _amount) {\r\n            lpDepositor.withdraw(address(this), want, _amount - wantBal);\r\n            wantBal = IERC20(want).balanceOf(address(this));\r\n        }\r\n\r\n        if (wantBal > _amount) {\r\n            wantBal = _amount;\r\n        }\r\n\r\n        if (tx.origin != owner() && !paused()) {\r\n            uint256 withdrawalFeeAmount = wantBal * withdrawalFee / WITHDRAWAL_MAX;\r\n            wantBal = wantBal - withdrawalFeeAmount;\r\n        }\r\n\r\n        IERC20(want).safeTransfer(vault, wantBal);\r\n\r\n        emit Withdraw(balanceOf());\r\n    }\r\n\r\n    function beforeDeposit() external override {\r\n        if (harvestOnDeposit) {\r\n            require(msg.sender == vault, \"!vault\");\r\n            _harvest(tx.origin);\r\n        }\r\n    }\r\n\r\n    function harvest() external gasThrottle virtual {\r\n        _harvest(tx.origin);\r\n    }\r\n\r\n    function harvest(address callFeeRecipient) external gasThrottle virtual {\r\n        _harvest(callFeeRecipient);\r\n    }\r\n\r\n    function managerHarvest() external onlyManager {\r\n        _harvest(tx.origin);\r\n    }\r\n\r\n    // compounds earnings and charges performance fee\r\n    function _harvest(address callFeeRecipient) internal whenNotPaused {\r\n        claimRewards();\r\n        swapRewardsToNative();\r\n        uint256 nativeBal = IERC20(native).balanceOf(address(this));\r\n        if (nativeBal > 0) {\r\n            chargeFees(callFeeRecipient);\r\n            addLiquidity();\r\n            uint256 wantHarvested = balanceOfWant();\r\n            deposit();\r\n            lastHarvest = block.timestamp;\r\n            emit StratHarvest(msg.sender, wantHarvested, balanceOf());\r\n        }\r\n    }\r\n\r\n    function claimRewards() internal {\r\n        // epx + ddd\r\n        address[] memory wants = new address[](1);\r\n        wants[0] = want;\r\n        IDotDotLpDepositor.Amounts[] memory amounts = lpDepositor.claimable(address(this), wants);\r\n        uint claimableEpx = amounts[0].epx;\r\n        uint bondedAmount = claimAsBondedEpx && claimableEpx > 0 ? type(uint).max : 0;\r\n        lpDepositor.claim(address(this), wants, bondedAmount);\r\n\r\n        // extras\r\n        if (rewards.length > 0) {\r\n            lpDepositor.claimExtraRewards(address(this), want);\r\n        }\r\n\r\n        // bonded fees\r\n        if (claimAsBondedEpx) {\r\n            address[] memory tokens = new address[](2);\r\n            tokens[0] = epx;\r\n            tokens[1] = ddd;\r\n            // epx + ddd\r\n            feeDistributor.claim(address(this), tokens);\r\n            // dEpx\r\n            (uint claimable, uint total) = feeDistributor.streamingBalances(address(this));\r\n            if (claimable > 0) {\r\n                feeDistributor.withdrawUnbondedTokens(address(this));\r\n            }\r\n            // start streaming dEpx if unbondable > currently streaming as stream will reset\r\n            uint unbondableBal = feeDistributor.unbondableBalance(address(this));\r\n            if (unbondableBal > total - claimable) {\r\n                feeDistributor.initiateUnbondingStream(unbondableBal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapRewardsToNative() internal {\r\n        // ddd\r\n        uint bal = IERC20(ddd).balanceOf(address(this));\r\n        if (bal > 0) {\r\n            IUniswapRouterETH(unirouter).swapExactTokensForTokens(bal, 0, dddToNativeRoute, address(this), block.timestamp);\r\n        }\r\n        // dEpx to epx\r\n        bal = IERC20(depx).balanceOf(address(this));\r\n        if (bal > 0) {\r\n            ICurveSwap(depxEpxSwap).exchange(0, 1, bal, 0);\r\n        }\r\n        // epx\r\n        bal = IERC20(epx).balanceOf(address(this));\r\n        if (bal > 0) {\r\n            ICurveSwap(epxBnbSwap).exchange(0, 1, bal, 0);\r\n        }\r\n        // extras\r\n        for (uint i; i < rewards.length; i++) {\r\n            bal = IERC20(rewards[i].token).balanceOf(address(this));\r\n            if (bal >= rewards[i].minAmount) {\r\n                IUniswapRouterETH(rewards[i].router).swapExactTokensForTokens(bal, 0, rewards[i].toNativeRoute, address(this), block.timestamp);\r\n            }\r\n        }\r\n        // wrap native, could be sent from ellipsis bnb swap pools\r\n        uint256 nativeBal = address(this).balance;\r\n        if (nativeBal > 0) {\r\n            IWrappedNative(native).deposit{value: nativeBal}();\r\n        }\r\n    }\r\n\r\n    // performance fees\r\n    function chargeFees(address callFeeRecipient) internal {\r\n        IFeeConfig.FeeCategory memory fees = getFees();\r\n        uint256 nativeFeeBal = IERC20(native).balanceOf(address(this)) * fees.total / DIVISOR;\r\n\r\n        uint256 callFeeAmount = nativeFeeBal * fees.call / DIVISOR;\r\n        IERC20(native).safeTransfer(callFeeRecipient, callFeeAmount);\r\n\r\n        uint256 beefyFeeAmount = nativeFeeBal * fees.beefy / DIVISOR;\r\n        IERC20(native).safeTransfer(beefyFeeRecipient, beefyFeeAmount);\r\n\r\n        uint256 strategistFeeAmount = nativeFeeBal * fees.strategist / DIVISOR;\r\n        IERC20(native).safeTransfer(strategist, strategistFeeAmount);\r\n\r\n        emit ChargedFees(callFeeAmount, beefyFeeAmount, strategistFeeAmount);\r\n    }\r\n\r\n    // Adds liquidity to AMM and gets more LP tokens.\r\n    function addLiquidity() internal {\r\n        uint256 depositBal;\r\n        uint256 depositNativeAmount;\r\n        uint256 nativeBal = IERC20(native).balanceOf(address(this));\r\n        if (depositToken != native) {\r\n            IUniswapRouterETH(unirouter).swapExactTokensForTokens(nativeBal, 0, nativeToDepositRoute, address(this), block.timestamp);\r\n            depositBal = IERC20(depositToken).balanceOf(address(this));\r\n        } else {\r\n            depositBal = nativeBal;\r\n            if (depositNative) {\r\n                depositNativeAmount = nativeBal;\r\n                IWrappedNative(native).withdraw(depositNativeAmount);\r\n            }\r\n        }\r\n\r\n        if (poolSize == 2) {\r\n            uint256[2] memory amounts;\r\n            amounts[depositIndex] = depositBal;\r\n            ICurveSwap(pool).add_liquidity{value: depositNativeAmount}(amounts, 0);\r\n        } else if (poolSize == 3) {\r\n            uint256[3] memory amounts;\r\n            amounts[depositIndex] = depositBal;\r\n            if (metaPool != address(0)) ICurveSwap(metaPool).add_liquidity(pool, amounts, 0);\r\n            else ICurveSwap(pool).add_liquidity(amounts, 0);\r\n        } else if (poolSize == 4) {\r\n            uint256[4] memory amounts;\r\n            amounts[depositIndex] = depositBal;\r\n            if (metaPool != address(0)) ICurveSwap(metaPool).add_liquidity(pool, amounts, 0);\r\n            else ICurveSwap(pool).add_liquidity(amounts, 0);\r\n        } else if (poolSize == 5) {\r\n            uint256[5] memory amounts;\r\n            amounts[depositIndex] = depositBal;\r\n            ICurveSwap(pool).add_liquidity(amounts, 0);\r\n        }\r\n    }\r\n\r\n    function addRewardToken(address _router, address[] memory _rewardToNativeRoute, uint _minAmount) external onlyOwner {\r\n        address token = _rewardToNativeRoute[0];\r\n        require(token != want, \"!want\");\r\n        require(token != native, \"!native\");\r\n        require(token != epx, \"!epx\");\r\n        require(token != ddd, \"!ddd\");\r\n        require(token != receiptToken, \"!receipt\");\r\n\r\n        rewards.push(Reward(token, _router, _rewardToNativeRoute, _minAmount));\r\n        IERC20(token).safeApprove(_router, 0);\r\n        IERC20(token).safeApprove(_router, type(uint).max);\r\n    }\r\n\r\n    function resetRewardTokens() external onlyManager {\r\n        delete rewards;\r\n    }\r\n\r\n    // claim additional trading fees for bonding EPX, usually too small amounts to include in rewards by default\r\n    function claimFeeDistributor(address[] calldata _tokens) external onlyManager {\r\n        feeDistributor.claim(address(this), _tokens);\r\n    }\r\n\r\n    // claim EPX as bonded dEPX to receive 3x DDD\r\n    function setClaimAsBondedEpx(bool _bond) external onlyManager {\r\n        claimAsBondedEpx = _bond;\r\n    }\r\n\r\n    function bondedEpx() external view returns (uint bonded, uint unbondable, uint claimable, uint totalStreaming) {\r\n        bonded = feeDistributor.bondedBalance(address(this));\r\n        unbondable = feeDistributor.unbondableBalance(address(this));\r\n        (claimable, totalStreaming) = feeDistributor.streamingBalances(address(this));\r\n    }\r\n\r\n    // calculate the total underlaying 'want' held by the strat.\r\n    function balanceOf() public view returns (uint256) {\r\n        return balanceOfWant() + balanceOfPool();\r\n    }\r\n\r\n    // it calculates how much 'want' this contract holds.\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    // it calculates how much 'want' the strategy has working in the farm.\r\n    function balanceOfPool() public view returns (uint256) {\r\n        return lpDepositor.userBalances(address(this), want);\r\n    }\r\n\r\n    function nativeToDeposit() external view returns (address[] memory) {\r\n        return nativeToDepositRoute;\r\n    }\r\n\r\n    function rewardToNative() external view returns (address[] memory) {\r\n        return rewards[0].toNativeRoute;\r\n    }\r\n\r\n    function rewardsLength() external view returns (uint) {\r\n        return rewards.length;\r\n    }\r\n\r\n    function rewardToNative(uint i) external view returns (address[] memory) {\r\n        return rewards[i].toNativeRoute;\r\n    }\r\n\r\n    function setDepositNative(bool _depositNative) external onlyOwner {\r\n        depositNative = _depositNative;\r\n    }\r\n\r\n    function setHarvestOnDeposit(bool _harvestOnDeposit) external onlyManager {\r\n        harvestOnDeposit = _harvestOnDeposit;\r\n        if (harvestOnDeposit) {\r\n            setWithdrawalFee(0);\r\n        } else {\r\n            setWithdrawalFee(10);\r\n        }\r\n    }\r\n\r\n    // returns rewards unharvested\r\n    function rewardsAvailable() public view returns (uint256, uint256) {\r\n        address[] memory tokens = new address[](1);\r\n        tokens[0] = want;\r\n        IDotDotLpDepositor.Amounts[] memory amounts = lpDepositor.claimable(address(this), tokens);\r\n        return (amounts[0].epx, amounts[0].ddd);\r\n    }\r\n\r\n    function rewardsBondedAvailable() public view returns (uint256, uint256) {\r\n        address[] memory tokens = new address[](2);\r\n        tokens[0] = epx;\r\n        tokens[1] = ddd;\r\n        uint256[] memory amounts = feeDistributor.claimable(address(this), tokens);\r\n        return (amounts[0], amounts[1]);\r\n    }\r\n\r\n    // native reward amount for calling harvest\r\n    function callReward() public view returns (uint256) {\r\n        (uint epxBal, uint dddBal) = rewardsAvailable();\r\n\r\n        uint256 nativeOut;\r\n        if (claimAsBondedEpx) {\r\n            (uint epxFeeBal, uint dddFeeBal) = rewardsBondedAvailable();\r\n            epxBal = epxFeeBal;\r\n            // 3x DDD\r\n            dddBal = dddBal * 3 + dddFeeBal;\r\n            uint256[] memory amountOut = IUniswapRouterETH(unirouter).getAmountsOut(dddBal, dddToNativeRoute);\r\n            nativeOut = nativeOut + amountOut[amountOut.length - 1];\r\n            // dEPX to EPX\r\n            (uint256 claimable,) = feeDistributor.streamingBalances(address(this));\r\n            if (claimable > 0) {\r\n                epxBal = epxBal + ICurveSwap(depxEpxSwap).get_dy(0, 1, claimable);\r\n            }\r\n            if (epxBal > 0) {\r\n                nativeOut = nativeOut + ICurveSwap(epxBnbSwap).get_dy(0, 1, epxBal);\r\n            }\r\n        } else {\r\n            // ddd\r\n            uint256[] memory amountOut = IUniswapRouterETH(unirouter).getAmountsOut(dddBal, dddToNativeRoute);\r\n            nativeOut = nativeOut + amountOut[amountOut.length - 1];\r\n            // epx\r\n            nativeOut = nativeOut + ICurveSwap(epxBnbSwap).get_dy(0, 1, epxBal);\r\n        }\r\n\r\n        // extra rewards\r\n        IDotDotLpDepositor.ExtraReward[] memory extras = lpDepositor.claimableExtraRewards(address(this), want);\r\n        for (uint i; i < extras.length; i++) {\r\n            for (uint j; j < rewards.length; j++) {\r\n                if (extras[i].token == rewards[j].token) {\r\n                    uint amount = extras[i].amount;\r\n                    if (amount >= rewards[j].minAmount) {\r\n                        uint256[] memory amountOut = IUniswapRouterETH(rewards[j].router).getAmountsOut(amount, rewards[j].toNativeRoute);\r\n                        nativeOut = nativeOut + amountOut[amountOut.length - 1];\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        IFeeConfig.FeeCategory memory fees = getFees();\r\n        return nativeOut * fees.total / DIVISOR * fees.call / DIVISOR;\r\n    }\r\n\r\n    function setShouldGasThrottle(bool _shouldGasThrottle) external onlyManager {\r\n        shouldGasThrottle = _shouldGasThrottle;\r\n    }\r\n\r\n    // called as part of strat migration. Sends all the available funds back to the vault.\r\n    function retireStrat() external {\r\n        require(msg.sender == vault, \"!vault\");\r\n\r\n        lpDepositor.withdraw(address(this), want, balanceOfPool());\r\n\r\n        uint256 wantBal = IERC20(want).balanceOf(address(this));\r\n        IERC20(want).transfer(vault, wantBal);\r\n    }\r\n\r\n    // pauses deposits and withdraws all funds from third party systems.\r\n    function panic() public onlyManager {\r\n        pause();\r\n        lpDepositor.withdraw(address(this), want, balanceOfPool());\r\n    }\r\n\r\n    function pause() public onlyManager {\r\n        _pause();\r\n        _removeAllowances();\r\n    }\r\n\r\n    function unpause() external onlyManager {\r\n        _unpause();\r\n        _giveAllowances();\r\n        deposit();\r\n    }\r\n\r\n    function _giveAllowances() internal {\r\n        IERC20(want).safeApprove(address(lpDepositor), type(uint).max);\r\n        IERC20(native).safeApprove(unirouter, type(uint).max);\r\n        IERC20(ddd).safeApprove(unirouter, type(uint).max);\r\n        IERC20(epx).safeApprove(epxBnbSwap, type(uint).max);\r\n        IERC20(depx).safeApprove(depxEpxSwap, type(uint).max);\r\n        if (metaPool != address(0)) {\r\n            IERC20(depositToken).safeApprove(metaPool, type(uint).max);\r\n        } else {\r\n            IERC20(depositToken).safeApprove(pool, type(uint).max);\r\n        }\r\n    }\r\n\r\n    function _removeAllowances() internal {\r\n        IERC20(want).safeApprove(address(lpDepositor), 0);\r\n        IERC20(native).safeApprove(unirouter, 0);\r\n        IERC20(ddd).safeApprove(unirouter, 0);\r\n        IERC20(epx).safeApprove(epxBnbSwap, 0);\r\n        IERC20(depx).safeApprove(depxEpxSwap, 0);\r\n        if (metaPool != address(0)) {\r\n            IERC20(depositToken).safeApprove(metaPool, 0);\r\n        } else {\r\n            IERC20(depositToken).safeApprove(pool, 0);\r\n        }\r\n    }\r\n\r\n    receive () external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metaPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositIndex\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_nativeToDepositRoute\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unirouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beefyFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beefyFeeConfig\",\"type\":\"address\"}],\"internalType\":\"struct StratFeeManager.CommonAddresses\",\"name\":\"_commonAddresses\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beefyFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategistFees\",\"type\":\"uint256\"}],\"name\":\"ChargedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beefyFeeConfig\",\"type\":\"address\"}],\"name\":\"SetBeefyFeeConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beefyFeeRecipient\",\"type\":\"address\"}],\"name\":\"SetBeefyFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"SetKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeId\",\"type\":\"uint256\"}],\"name\":\"SetStratFeeId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"SetStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unirouter\",\"type\":\"address\"}],\"name\":\"SetUnirouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"SetVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"harvester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"StratHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_FEE_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardToNativeRoute\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beefyFeeConfig\",\"outputs\":[{\"internalType\":\"contract IFeeConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beefyFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondedEpx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bonded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unbondable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStreaming\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAsBondedEpx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dddToNativeRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depxEpxSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epxBnbSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"contract IDotDotBondedFeeDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasprice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beefy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"call\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategist\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct IFeeConfig.FeeCategory\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStratFeeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"callFeeRecipient\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestOnDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpDepositor\",\"outputs\":[{\"internalType\":\"contract IDotDotLpDepositor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"native\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToDeposit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nativeToDepositRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToNative\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"rewardToNative\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsBondedAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beefyFeeConfig\",\"type\":\"address\"}],\"name\":\"setBeefyFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beefyFeeRecipient\",\"type\":\"address\"}],\"name\":\"setBeefyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bond\",\"type\":\"bool\"}],\"name\":\"setClaimAsBondedEpx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_depositNative\",\"type\":\"bool\"}],\"name\":\"setDepositNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_harvestOnDeposit\",\"type\":\"bool\"}],\"name\":\"setHarvestOnDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldGasThrottle\",\"type\":\"bool\"}],\"name\":\"setShouldGasThrottle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeId\",\"type\":\"uint256\"}],\"name\":\"setStratFeeId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"name\":\"setUnirouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldGasThrottle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unirouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StrategyDotDotEllipsis", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005c73804fedd39f3388e03f4aa1fe06a1c0e60c8e000000000000000000000000fd4afeac39da03a05f61844095a75c4fb7d766da000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000018000000000000000000000000056ec6031dc969cfa035f6d65e65d8595d5660fb400000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000004fed5491693007f0cd49f4614ffc38ab6a04b619000000000000000000000000982f264ce97365864181df65df4931c593a515ad000000000000000000000000ab4e8665e7b0e6d83b65b8ff6521e347ca93e4f800000000000000000000000097f86f2dc863d98e423e288938df257d1b6e15530000000000000000000000000000000000000000000000000000000000000001000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bef070e3e1fa775d7f45d0456b48f3eec079a2eb3db528ffa91331f4965e4438"}