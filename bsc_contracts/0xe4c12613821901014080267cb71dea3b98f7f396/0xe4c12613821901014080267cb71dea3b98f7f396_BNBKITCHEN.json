{"SourceCode": "//The BNB.kitchen smart-contract provides the opportunity to invest any amount of BNB (from 0.05 BNB) in the contract\r\npragma solidity 0.5.8;\r\n\r\ncontract BNBKITCHEN {\r\n\tusing SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n\tuint256 constant public INVEST_MIN_AMOUNT = 0.05 ether; \r\n\tuint256[] public REFERRAL_PERCENTS = [50, 30, 20];\r\n\tuint256 constant public PROJECT_FEE = 80;\r\n\tuint256 constant public DEVELOPER_FEE = 20;\r\n\tuint256 constant public PERCENTS_DIVIDER= 1000;\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\t\r\n\tuint256 constant public MAX_HOLD_PERCENT = 15;\r\n\r\n    uint256[] public PLAN1_PERCENTS = [75,81,87,96,105,117,131,150,175,210,262,350,525,1050];\r\n    uint256[] public PLAN2_PERCENTS = [78,82,87,92,97,103,110,118,127,137,150,165,183,206,236,275,330,412,550,825,1650];\r\n    uint256[] public PLAN3_PERCENTS = [71,74,77,80,83,87,91,95,100,105,111,117,125,133,143,154,166,182,200,222,250,285,333,400,500,666,1000,2000];\r\n\r\n    uint256 public MAX_DAYS1 = 13;\r\n    uint256 public MAX_DAYS2 = 20;\r\n    uint256 public MAX_DAYS3 = 27;\r\n    \r\n\t\r\n\tuint256 public totalStaked;\r\n\tuint256 public totalRefBonus;\r\n\tuint256 public totalUsers;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 percent;\r\n\t\tuint256 amount;\r\n\t\tuint256 profit;\r\n\t\tuint256 start;\r\n\t\tuint256 finish;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\tuint256 checkpoint;\r\n\t\tuint256 holdBonusCheckpoint;\r\n\t\taddress payable referrer;\r\n\t\tuint256 referrals;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 withdrawn;\r\n\t}\r\n\r\n\tmapping (address => User) internal users;\r\n\r\n\tuint256 public startUNIX;\r\n\taddress payable private commissionWallet;\r\n\taddress payable private developerWallet;\r\n\t\r\n\t\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\r\n\tconstructor(address payable wallet, address payable _developer) public {\r\n\t\trequire(!isContract(wallet));\r\n\t\tcommissionWallet = wallet;\r\n\t\tdeveloperWallet = _developer;\r\n        startUNIX = block.timestamp.add(365 days);\r\n\r\n        plans.push(Plan(14, 75)); // 7.5% per day for 14 days\r\n        plans.push(Plan(21, 78)); // 7.6% per day for 21 days\r\n        plans.push(Plan(28, 71)); // 7.1% per day for 28 days\r\n\t\tplans.push(Plan(14, 80)); // 8% per day for 14 days (at the end, compounding)\r\n        plans.push(Plan(21, 75)); // 7.5% per day for 21 days (at the end, compounding)\r\n        plans.push(Plan(28, 70)); // 7% per day for 28 days (at the end, compounding)\r\n\r\n\r\n\t}\r\n\r\n    function launch() public {\r\n        require(msg.sender == developerWallet);\r\n\t\tstartUNIX = block.timestamp;\r\n\t\t\r\n        \r\n    } \r\n\r\n\r\n    function invest(address payable referrer,uint8 plan) public payable {\r\n        _invest(referrer, plan, msg.sender, msg.value);\r\n           \r\n    }\r\n\r\n\r\n\tfunction _invest(address payable referrer, uint8 plan, address payable sender, uint256 value) private {\r\n\t\trequire(value >= INVEST_MIN_AMOUNT);\r\n        require(plan < 6, \"Invalid plan\");\r\n        require(startUNIX < block.timestamp, \"contract hasn`t started yet\");\r\n\t\t\r\n\r\n\t\tuint256 fee = value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n\t\tcommissionWallet.transfer(fee);\r\n\t\tuint256 developerFee = value.mul(DEVELOPER_FEE).div(PERCENTS_DIVIDER);\r\n\t\tdeveloperWallet.transfer(developerFee);\r\n\t\t\r\n\t\tUser storage user = users[sender];\r\n\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != sender) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 3; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].referrals = users[upline].referrals.add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t\t\tif (user.referrer != address(0)) {\r\n\t\t\t\t\tuint256 _refBonus = 0;\r\n\t\t\t\t\taddress payable upline = user.referrer;\r\n\t\t\t\t\tfor (uint256 i = 0; i < 3; i++) {\r\n\t\t\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\t\t\tuint256 amount = value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n                            upline.transfer(amount);\r\n\t\t\t\t\t\t\t_refBonus = _refBonus.add(amount);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\temit RefBonus(upline, sender, i, amount);\r\n\t\t\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t\t\t} else break;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttotalRefBonus = totalRefBonus.add(_refBonus);\r\n\r\n\t\t\t\t}\r\n\t\t\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\tuser.checkpoint = block.timestamp;\r\n\t\t\tuser.holdBonusCheckpoint = block.timestamp;\r\n\t\t\temit Newbie(sender);\r\n\t\t}\r\n\r\n\t\t\r\n\r\n\t\t(uint256 percent, uint256 profit, uint256 finish) = getResult(plan, value);\r\n\t\t\r\n\t\tuser.deposits.push(Deposit(plan, percent, value, profit, block.timestamp, finish));\r\n\r\n\t\ttotalStaked = totalStaked.add(value);\r\n        totalUsers = totalUsers.add(1);\r\n\t\t\r\n\t\temit NewDeposit(sender, plan, percent, value, profit, block.timestamp, finish);\r\n\t}\r\n\r\n    function withdraw() public {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n        require(totalAmount > 0, \"User has no dividends\");\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        \r\n        if (msg.sender == commissionWallet) {\r\n            require(contractBalance > 0, \"Contract balance is zero\");\r\n            commissionWallet.transfer(contractBalance);\r\n        } else {\r\n            if (contractBalance < totalAmount) {\r\n                totalAmount = contractBalance;\r\n            }\r\n            user.checkpoint = block.timestamp;\r\n            user.holdBonusCheckpoint = block.timestamp;\r\n            user.withdrawn = user.withdrawn.add(totalAmount);\r\n            msg.sender.transfer(totalAmount);\r\n            emit Withdrawn(msg.sender, totalAmount);\r\n        }\r\n    }\r\n\r\n\r\n\t\r\n    \r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn address(this).balance;\r\n\t}\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent) {\r\n\t\ttime = getTimeForDeposit(plan);\r\n\t\tpercent = getPercent(plan);\r\n\t}\r\n\r\n    \r\n\r\n\tfunction getPercent(uint8 plan) public view returns (uint256) {\r\n\r\n            uint256 daysPassed = block.timestamp.sub(startUNIX).div(TIME_STEP);\r\n\r\n            if(plan > 2) {\r\n                return plans[plan].percent;\r\n            } else {\r\n\r\n                if(plan == 0) {\r\n                    if(daysPassed > MAX_DAYS1) {\r\n                        daysPassed = MAX_DAYS1;\r\n                    }\r\n\r\n                    return PLAN1_PERCENTS[daysPassed];\r\n                }\r\n\r\n                if(plan == 1) {\r\n                    if(daysPassed > MAX_DAYS2) {\r\n                        daysPassed = MAX_DAYS2;\r\n                    }\r\n\r\n                    return PLAN2_PERCENTS[daysPassed];\r\n                }\r\n\r\n                if(plan == 2) {\r\n                   if(daysPassed > MAX_DAYS3) {\r\n                        daysPassed = MAX_DAYS3;\r\n                    }\r\n\r\n                    return PLAN3_PERCENTS[daysPassed];\r\n \r\n                }\r\n            }\r\n\r\n            \r\n\t    \r\n\t\t\t\r\n\t\t\r\n    }\r\n\r\n    function getTimeForDeposit(uint8 plan) public view returns(uint256){\r\n\r\n        uint256 daysPassed = block.timestamp.sub(startUNIX).div(TIME_STEP);\r\n        uint256 time;\r\n\r\n        if(daysPassed >= plans[plan].time) {\r\n            time = 1;\r\n        } else {\r\n            time = plans[plan].time.sub(daysPassed);\r\n        }\r\n\r\n        return time;\r\n    }\r\n\r\n\tfunction getResult(uint8 plan, uint256 deposit) public view returns (uint256 percent, uint256 profit, uint256 finish) {\r\n\t\tpercent = getPercent(plan);\r\n\r\n        \r\n        uint256 time = getTimeForDeposit(plan);\r\n        \r\n\t\r\n\t\tif (plan < 3) {\r\n\t\t\tprofit = deposit.mul(percent).div(PERCENTS_DIVIDER).mul(time);\r\n\t\t} else if (plan < 6) {\r\n\t\t\tfor (uint256 i = 0; i < plans[plan].time; i++) {\r\n\t\t\t\tprofit = profit.add((deposit.add(profit)).mul(percent).div(PERCENTS_DIVIDER));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfinish = block.timestamp.add(time.mul(TIME_STEP));\r\n\t}\r\n\t\r\n\t function getUserPercentRate(address userAddress) public view returns (uint) {\r\n        User storage user = users[userAddress];\r\n\r\n        uint256 timeMultiplier = block.timestamp.sub(user.holdBonusCheckpoint).div(TIME_STEP).div(2); // +0.1% per 2 days\r\n            if (timeMultiplier > MAX_HOLD_PERCENT) {\r\n                timeMultiplier = MAX_HOLD_PERCENT;\r\n            }\r\n\r\n         return timeMultiplier;\r\n    }\r\n    \r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\t\t\r\n\t\tuint256 holdBonus = getUserPercentRate(userAddress);\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\r\n\t\t\tif (user.checkpoint < user.deposits[i].finish) {\r\n\t\t\t\tif (user.deposits[i].plan < 3) {\r\n\t\t\t\t\r\n\t\t\t\t\tuint256 share = user.deposits[i].amount.mul(user.deposits[i].percent.add(holdBonus)).div(PERCENTS_DIVIDER);\r\n\t\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoint ? user.deposits[i].start : user.checkpoint;\r\n\t\t\t\t\tuint256 to = user.deposits[i].finish < block.timestamp ? user.deposits[i].finish : block.timestamp;\r\n\t\t\t\t\tif (from < to) {\r\n\t\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(block.timestamp > user.deposits[i].finish) {\r\n\t\t\t\t\t\ttotalAmount = totalAmount.add(user.deposits[i].profit);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n       \r\n\t\treturn totalAmount;\r\n\t}\r\n\r\n    function getContractInfo() public view returns(uint256, uint256, uint256) {\r\n        return(totalStaked, totalRefBonus, totalUsers);\r\n    }\r\n\r\n\tfunction getUserWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoint;\r\n\t}\r\n    \r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t} \r\n\r\n\tfunction getUserDownlineCount(address userAddress) public view returns(uint256) {\r\n\t\treturn (users[userAddress].referrals);\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256 amount) {\r\n\t\t\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 profit, uint256 start, uint256 finish) {\r\n\t    User storage user = users[userAddress];\r\n\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = user.deposits[index].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tprofit = user.deposits[index].profit;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].finish;\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    \r\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PLAN1_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PLAN3_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DAYS1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getTimeForDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_HOLD_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DAYS2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PLAN2_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"name\":\"plan\",\"type\":\"uint8\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"profit\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"finish\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startUNIX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEVELOPER_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DAYS3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"_developer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"}]", "ContractName": "BNBKITCHEN", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000548b2d7b6f9692b9c90cfd8c6cc68ec8a17f3d0700000000000000000000000043350fe793e50ebb5cbd3be988d692063d5ffb3d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://3c91554e5e40a8b9607d500e0b5eda8da0fb2416cd3679dbf7206b42bf220a74"}