{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-06\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-07-07\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-05-19\r\n*/\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.19;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\ninterface IAlphaNFT{\r\n    function getLines(address _addr) external view returns(uint);\r\n}\r\n\r\ninterface IERC721 {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor (){\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Factory {\r\n  function getPair(address token0, address token1) external returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\nfunction swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    \r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract AlphaVaultContract is Ownable, ReentrancyGuard{\r\n    //using SafeMath for uint256;\r\n    //using SafeBEP20 for IERC20;\r\n    IERC20 public token;\r\n    IERC20 public BUSD;\r\n    IERC721 public NFT;\r\n    //contract information\r\n    string private _name = \"Alpha Vault\";\r\n    string private _symbol = \"ALPHAVault\";\r\n    uint8 private _decimals = 18;\r\n    uint public rewardTimeInMinute = 1440;\r\n    uint public roundRobinMax = 15;\r\n\r\n    //fees settings\r\n    uint256 referralFee = 50;\r\n    uint256 totalDepositFee = 10;\r\n    uint256 totalSellFee = 12;\r\n    uint256 totalCompoundFee = 10;\r\n    uint256 totalWithdrawFee = 12;\r\n    uint256 totalAirdropFee = 10;\r\n\r\n    \r\n    //fee address\r\n    address public vaultGasAddress = 0xCa5C49f3C20D187BdC3D1EC16ce99b76CaFf880b;//alpha Sigma multisig\r\n    address public dasAddress= 0x9224CAe52E0d36cd5875947d148a60443E70E56A;//Decentralize Account System Wallet\r\n    address public sigmaAddress=0xF423860A73FD17DeF9a3029F84a79E7b226121a7;//Team multisigWallet //0xF423860A73FD17DeF9a3029F84a79E7b226121a7//0x319366e8d08b9DA18ac7103bb8cbC722C066335b\r\n    address public rewardPoolAddress = 0x303eB2Fa35E1d1FdFCe8d7CCA6d671516f73f555; //reward nft Wallet\r\n    address public liqWallet=  0xAAa6a5afF2D6FA6D26d4Ba18D76a4d9F3AC75AeA; // liquidity wallet\r\n    address public topWallet = 0x70092C16193c37152b279c862923f192c0c35eaB; // top wallet\r\n    //deposit and withdraw variable settings\r\n    uint256 public defaultROI = 150;\r\n    uint256 public vaultMax = 10;\r\n    uint256 public jailLimit = 10;\r\n    uint256 public maxSell = 200 ether;\r\n    uint256 public maxBuy = 1000 ether;\r\n    uint256 public minBuy = 10 ether;\r\n    uint256 public vGasPrice =  20 * 10 ** 16;\r\n    uint256 public slippage = 0;\r\n\r\n    uint256 _investmentCount; //counting the number of time investment occur\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // mainnet 0x10ED43C718714eb63d5aA57B78B54704E256024E//0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n    \r\n    //mapping processes\r\n    mapping (address => uint) public unClaimedAirdrop;\r\n    mapping (uint => uint) public unClaimedReward;\r\n    mapping(address => bool) public vaultWhitelist;\r\n    mapping(address => address) private upline;\r\n    mapping(address => uint256) public initialVaultID;\r\n    mapping(uint256 => uint256) public vaultGas;\r\n\r\n\r\n    mapping(uint256 => uint256) public isCompoundCount;//vaultNum\r\n    mapping(address => uint256) public vaultNum;\r\n    mapping(uint256 => uint256) public vaultCompounded;\r\n    mapping(uint256 => uint256) public vaultClaimed;\r\n    mapping(address => uint256) public totalVaultDeposited;\r\n    mapping(uint256 => uint256) public AR;\r\n    mapping(uint256 => bool) public ARJail;\r\n    mapping(address=>mapping(uint256=>address)) public downlineReferrals;\r\n    mapping(address=>uint) private uplineBonus;\r\n    mapping(address=>uint) private airdropsSent;\r\n    mapping(address=>uint) private airdropsReceived;\r\n    mapping(uint=>uint) private vaultGasUnclaim;\r\n    mapping(uint=>uint) private vaultGasClaim;\r\n    //\r\n\r\n    mapping(uint256 => uint256) public todayRewardClaimed;\r\n    mapping(address => uint256) public todaySell;\r\n    mapping(address => uint256) private lastSell;\r\n    mapping (address => bool) public presaleAddress;\r\n    mapping (address => address) public oldReferer;\r\n    \r\n    struct Invest{\r\n    uint256 id;\r\n    address investors;\r\n    uint256 initialDeposit;\r\n    uint256 amountTokenInvested;\r\n    uint256 currentROI;\r\n    uint256 vestedDate;\r\n    uint256 lastTimeCompound;\r\n    uint256 timePaidVaultGas;\r\n    uint256 pendingEarn;\r\n    uint256 totalTokenEarned;\r\n    bool releaseStatus;\r\n    bool expires;\r\n    }\r\n    struct Downlines{\r\n        uint stakeId;\r\n        address uplineAddress;\r\n        address downlineAddress;\r\n        uint256 position;\r\n    }\r\n    Invest[] public allInvestment;\r\n    Downlines[] public downline;\r\n\r\n    //log events\r\n    event LogTokenBulkSent(address token, address from, uint256 total);\r\n    event LogTokenApproval(address token, uint256 total);\r\n    event investmentReport(address investorAddress, uint256 amount, uint256 currentROI, uint256 investmentDate);\r\n    event claimInvestment(address from, address to, uint256 totalEarned, uint256 ctime); \r\n    event compoundInvestment(address from, uint256 amountCompounded, uint256 ctime); \r\n    event SomeoneWasFeelingGenerous(address investor, uint256 totalAirdropAmount);\r\n    event roundRobin(address _upline, address _downline, uint256 amount);\r\n    event AirdropsSent(address[] airdroppees, uint256[] amounts);\r\n    event VaultAirdrop(uint[] airdropVault, uint256[] amounts);\r\n    modifier onlyPresaleContract(){\r\n        require(presaleAddress[msg.sender]==true, \"You can't use this function\");\r\n        _;\r\n    }\r\n    constructor(){\r\n        token = IERC20(0x5d75675E9DA82524B5DfBe3439Fe3a6E29f2b967);//0xB7EbEC4b254ec40bE26368bdC011D28B6d80a916;//0x42C47bDEe5Ff82FAc177402eFfc1306362491c83\r\n        BUSD = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);//0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814 //0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\r\n        NFT = IERC721(0x303eB2Fa35E1d1FdFCe8d7CCA6d671516f73f555);\r\n        rewardPoolAddress = 0x303eB2Fa35E1d1FdFCe8d7CCA6d671516f73f555;\r\n        uint ctime = block.timestamp;\r\n        uint256 amt = 90 ether;\r\n        uint256 sh = 10 ether;\r\n        allInvestment.push(Invest(0, topWallet, amt, amt, 150, ctime, ctime, ctime, 0, 0, false,false ));\r\n        uplineBonus[topWallet] += sh;\r\n        upline[topWallet] = topWallet;\r\n        downline.push(Downlines(0,topWallet,topWallet,0));\r\n        isCompoundCount[0] = 0;\r\n        vaultNum[topWallet] += 1;\r\n        AR[0] = 5;\r\n        _investmentCount++;\r\n        initialVaultID[topWallet] = 0;\r\n        vaultWhitelist[topWallet] = true;\r\n        setPresaleAddress(0x7192A45367C6d82d2aA1486BfC06B3C6297dF4b0,true);\r\n        emit investmentReport(topWallet, amt, sh, ctime);\r\n    }\r\n\r\n    //function to return values\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function getAirdropPrice() public  view returns (uint){\r\n        return vGasPrice;\r\n    }\r\n\r\n    function getVaultGasInfo(uint _id) public view returns (uint, uint, uint){\r\n        return(vaultGas[_id],vaultGasUnclaim[_id], vaultGasClaim[_id]);\r\n    }\r\n\r\n    function getUpline(address _addr) public view returns (address) {\r\n        return upline[_addr];\r\n    }\r\n\r\n    function getCurrentTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getAllInvestmentRecord() public view returns(Invest[] memory){\r\n        return allInvestment;\r\n    }\r\n\r\n    function getVaultUpline() public view returns(Downlines[] memory){\r\n        return downline;\r\n    }\r\n\r\n    function getPendingEarn(uint256 _id) public view returns (uint256) {\r\n        return allInvestment[_id].pendingEarn;\r\n    }\r\n\r\n    function getTotalCompoundedAndClaim(uint256 _id) public view returns (uint256, uint256, uint256, bool, uint256, uint256) {\r\n        return (vaultCompounded[_id], vaultClaimed[_id], AR[_id], ARJail[_id], unClaimedReward[_id], vaultGas[_id]);\r\n    }\r\n\r\n    function getAirdropsSentAndRecieved(address _addr) public view returns (uint256, uint256, uint256, uint256, uint) {\r\n        return (airdropsSent[_addr], airdropsReceived[_addr], uplineBonus[_addr], unClaimedAirdrop[_addr], totalVaultDeposited[_addr]);\r\n    }\r\n\r\n    function getDays(uint256 firstDate, uint256 secondDate) private view returns(uint256){\r\n        return (firstDate - secondDate) / (60 * rewardTimeInMinute);\r\n    }\r\n\r\n    function getTodaySell(address _addr) public view returns (uint){\r\n        return todaySell[_addr];\r\n    }    \r\n\r\n    function getNFTBalance(address _addr) public view returns (uint){\r\n        return NFT.balanceOf(_addr);\r\n    }\r\n\r\n    function getNFTLines(address _addr) public view returns (uint){\r\n        return IAlphaNFT(address(NFT)).getLines(_addr);\r\n    }\r\n\r\n    function getProfit(uint256 _id) private view returns(uint256) {\r\n        uint256 ctime = block.timestamp;\r\n        address investor = allInvestment[_id].investors;\r\n        uint totalStake = allInvestment[_id].amountTokenInvested;\r\n        uint256 dailyROI = allInvestment[_id].currentROI;\r\n        uint256 vestedDate = allInvestment[_id].vestedDate;\r\n        uint256 daysInvested = getDays(ctime, vestedDate);\r\n        uint256 getIDays = getDays(ctime,allInvestment[_id].lastTimeCompound);\r\n        uint256 qualifyForLast = getDays(allInvestment[_id].lastTimeCompound, vestedDate);\r\n        if(daysInvested > 365 && vaultWhitelist[investor] == false){\r\n            \r\n            if(qualifyForLast < 365){\r\n                return (((dailyROI * totalStake) / 100) / 100);\r\n            }\r\n            else{\r\n                return 0;\r\n            }\r\n            \r\n        }\r\n        else{\r\n            if(getIDays >= 1){\r\n            return (((dailyROI * totalStake) / 100) / 100);\r\n            }\r\n            else{\r\n            return 0;\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function setSlippage(uint _slippage) public  onlyOwner{\r\n        slippage = _slippage;\r\n    }\r\n\r\n    //admins functions start\r\n    function setForkRefer(address[] memory sender, address[] memory referer) public onlyOwner{\r\n        require(sender.length==referer.length,\"Length not match!\");\r\n        for (uint i = 0; i < sender.length; i++){\r\n            oldReferer[sender[i]] = referer[i];\r\n        }\r\n    }\r\n\r\n    function setPresaleAddress(address _addr, bool _flag) public  onlyOwner{\r\n        presaleAddress[_addr] = _flag;\r\n    }\r\n\r\n    function vaultSettings(uint256 _rewardTimeInMinute, uint256 _roundRobinMax, uint256 _vaultMax, uint256 _vGasPrice, uint256 _jailLimit, uint256 _maxSell, uint256 _maxBuy, uint256 _minBuy) external onlyOwner{\r\n        rewardTimeInMinute = _rewardTimeInMinute;\r\n        roundRobinMax = _roundRobinMax;\r\n        vaultMax = _vaultMax;\r\n        jailLimit = _jailLimit;\r\n        maxSell = _maxSell;\r\n        maxBuy = _maxBuy;\r\n        minBuy = _minBuy;\r\n        vGasPrice = _vGasPrice;\r\n    }\r\n\r\n    function updateTokenAddress(address _token, address _nft) public onlyOwner{\r\n        token = IERC20(_token);\r\n        NFT = IERC721(_nft);\r\n        rewardPoolAddress = _nft;\r\n    }\r\n    \r\n    function addWhiteList(address _uddr, bool _status) external onlyOwner{\r\n        if(vaultWhitelist[_uddr] != _status){\r\n        vaultWhitelist[_uddr] = _status;\r\n        }\r\n    }\r\n\r\n    function updateFeeAddr(address _dasAddress, address _sigmaAddress, address _topWallet, address _liqWallet, address _vaultGasAddress) external onlyOwner{\r\n        dasAddress = _dasAddress;\r\n        sigmaAddress = _sigmaAddress;\r\n        topWallet = _topWallet;\r\n        liqWallet = _liqWallet;\r\n        vaultGasAddress = _vaultGasAddress;\r\n    }\r\n    \r\n    function vaultsAirdrop(uint[] memory vaults, uint256[] memory amounts, uint256 sendAmount) external nonReentrant onlyOwner{\r\n        address investor = msg.sender;\r\n        require(vaults.length == amounts.length, \"length no valid\");\r\n        require(vaults.length <= 250, \"250 is the maximum to airdrop\");\r\n\r\n        for(uint i = 0; i < vaults.length; i++){\r\n            uint256 amount = amounts[i];\r\n            uint256 vaultId = vaults[i];\r\n            address investors = allInvestment[vaultId].investors;\r\n            airdropsReceived[investors] += amount;\r\n            unClaimedAirdrop[investors] += amount;\r\n        }\r\n\r\n        airdropsSent[msg.sender] += sendAmount;\r\n        token.transferFrom(investor,address(this),sendAmount);\r\n    \r\n        emit SomeoneWasFeelingGenerous(msg.sender, sendAmount);\r\n        emit VaultAirdrop(vaults, amounts);\r\n     }\r\n    \r\n    //admin functions end\r\n\r\n    //users function and processes\r\n    function computeDownline(uint _id, address _ref) private {\r\n        uint i = 0;\r\n        address currentUpLine;\r\n        address oldDownline = _ref;\r\n        while(i <= roundRobinMax){\r\n           // oldDownline = _ref;\r\n            currentUpLine = upline[oldDownline];\r\n            if(currentUpLine == address(0) || oldDownline == topWallet){\r\n                break;\r\n            }\r\n            downline.push(Downlines(_id,currentUpLine,_ref,i));\r\n            downlineReferrals[_ref][i] = currentUpLine;  \r\n            oldDownline =  currentUpLine;  \r\n            i++;       \r\n        }\r\n        \r\n    }\r\n\r\n    function roundRobinSystem(uint _id, address _downline, uint256 pos, uint256 _share) private{\r\n        //uint i = 0;\r\n        address currentUpLine = downlineReferrals[_downline][pos];\r\n       \r\n        if(currentUpLine == address(0)){\r\n            currentUpLine = topWallet;\r\n        }\r\n        uint vid = initialVaultID[currentUpLine];\r\n        uint checkday = getDays(block.timestamp, allInvestment[vid].vestedDate);\r\n        uint nftBalance = getNFTLines(currentUpLine); //NFT.balanceOf(currentUpLine);\r\n        \r\n        if(((checkday > 365) && vaultWhitelist[currentUpLine] == false) || (nftBalance == 0)){\r\n            currentUpLine = topWallet;\r\n            vid = initialVaultID[currentUpLine];\r\n        }\r\n        if(nftBalance != 0){\r\n            if((nftBalance - 1) < pos){\r\n            currentUpLine = topWallet;\r\n            vid = initialVaultID[currentUpLine];\r\n            }\r\n        }\r\n\r\n        if(vid < 1){\r\n            currentUpLine = topWallet;\r\n            vid = initialVaultID[currentUpLine];\r\n        }\r\n        \r\n        if(pos==roundRobinMax){\r\n            isCompoundCount[_id]=0;\r\n        }\r\n        else{\r\n            isCompoundCount[_id]++;\r\n        }\r\n        unClaimedReward[vid] += _share;\r\n        uplineBonus[currentUpLine] += _share;\r\n        emit roundRobin(currentUpLine, _downline, _share);\r\n\r\n    }\r\n\r\n    function proxyRoundRobinSystem(uint _id, address _downline, uint256 pos, uint256 _share) internal{\r\n        //uint i = 0;\r\n        address currentUpLine = upline[_downline];\r\n        \r\n        if(currentUpLine == address(0)){\r\n            currentUpLine = topWallet;\r\n        }\r\n        uint nftBalance = getNFTLines(currentUpLine); //NFT.balanceOf(currentUpLine);\r\n        \r\n        if(nftBalance == 0){\r\n            currentUpLine = topWallet;\r\n        }\r\n        \r\n        if(nftBalance != 0){\r\n            if((nftBalance - 1) < pos){\r\n            currentUpLine = topWallet;\r\n            }\r\n        }\r\n\r\n        if(pos==roundRobinMax){\r\n            isCompoundCount[_id]=0;\r\n        }\r\n        else{\r\n            isCompoundCount[_id]++;\r\n        }\r\n        unClaimedAirdrop[currentUpLine] += _share;\r\n        airdropsReceived[currentUpLine] += _share;\r\n        emit roundRobin(currentUpLine, _downline, _share);\r\n        \r\n    } \r\n     \r\n\r\n    function airdrop(address[] memory airdroppees, uint256[] memory amounts, uint256 sendAmount) external nonReentrant{\r\n        address investor = msg.sender;\r\n        require(airdroppees.length == amounts.length, \"length no valid\");\r\n        require(airdroppees.length <= 250, \"250 is the maximum to airdrop\");\r\n\r\n        uint256 getShare = (totalAirdropFee * sendAmount) / 100;\r\n        uint256 amountToCharge = sendAmount - getShare;\r\n        token.transferFrom(investor,address(this),sendAmount);\r\n        distributeAirdropFee(sendAmount);\r\n        uint256 amtSent = 0 ; \r\n        for(uint i = 0; i < airdroppees.length; i++){\r\n            uint256 amount = amounts[i];\r\n            address airdroppee = airdroppees[i];\r\n            if(airdroppee == msg.sender) continue;\r\n            uint vid = initialVaultID[airdroppee];\r\n            \r\n            uint256 rBal = amountToCharge - amtSent;\r\n            if(rBal <= amount){\r\n                amount = rBal;\r\n            }\r\n            amtSent += amount;\r\n            if(vid > 0){\r\n                unClaimedAirdrop[airdroppee] += amount;\r\n                airdropsReceived[airdroppee] += amount;\r\n            }\r\n            else{\r\n            allInvestment[0].amountTokenInvested += amount;\r\n            allInvestment[vid].initialDeposit += amount;\r\n            airdropsReceived[topWallet] += amount;\r\n            }\r\n            if(amtSent > sendAmount){\r\n                break;\r\n            }\r\n        }\r\n        airdropsSent[msg.sender] += sendAmount;\r\n        \r\n        emit SomeoneWasFeelingGenerous(msg.sender, sendAmount);\r\n        emit AirdropsSent(airdroppees, amounts);\r\n    }\r\n\r\n    function changeROI(uint _id, uint256 _compoundShare) private{\r\n        uint256 newRoi = allInvestment[_id].currentROI;\r\n        uint256 currentEarning = (vaultClaimed[_id] + _compoundShare) / allInvestment[_id].initialDeposit;\r\n        if(currentEarning >=1 && newRoi==150){\r\n            newRoi = 100;\r\n        }\r\n        else if(currentEarning >=2 && newRoi==100){\r\n            newRoi = 50;\r\n        }\r\n        allInvestment[_id].currentROI = newRoi;\r\n    }\r\n\r\n    function computeClaim(uint sid, uint _amount) private {\r\n        vaultClaimed[sid] += _amount;  \r\n        if(AR[sid] > 1 ){\r\n            AR[sid] -= 2;\r\n        }\r\n        else{\r\n            if(allInvestment[sid].currentROI==50){\r\n                allInvestment[sid].currentROI = 25;\r\n            }\r\n            else if(allInvestment[sid].currentROI > 50){\r\n            allInvestment[sid].currentROI = 50;\r\n            }\r\n            ARJail[sid] = true;\r\n            AR[sid] = 0;\r\n        }\r\n          \r\n    }\r\n\r\n    function distributeBuyDepositFee(uint256 amount) private {\r\n            uint256 balance = amount;\r\n            //uint256 ref = (50 * balance) / 1000;\r\n            uint256 sigma = (25 * balance) / 1000;\r\n            uint256 das = (35 * balance) / 1000;\r\n            uint256 nftReward = (20 * balance) / 1000;\r\n            BUSD.transfer(dasAddress, das);\r\n            BUSD.transfer(sigmaAddress, sigma);\r\n            BUSD.transfer(rewardPoolAddress, nftReward);\r\n            \r\n    }\r\n\r\n    function distributeDepositFee(uint256 amount) private {\r\n            uint256 balance = amount;\r\n            uint256 sigma = (20 * balance) / 1000;\r\n            callSwap(sigma, sigmaAddress);\r\n    }\r\n\r\n    function distributeSellFee(uint256 amount) private {\r\n            uint256 balance = amount;\r\n            uint256 liq = (20 * balance) / 1000;\r\n            uint256 sigma = (15 * balance) / 1000;\r\n            uint256 nftReward = (15 * balance) / 1000;\r\n            token.transfer(liqWallet, liq);\r\n            callSwap(sigma, sigmaAddress);\r\n            callSwap(nftReward, rewardPoolAddress);\r\n    }\r\n\r\n    function distributeAirdropFee(uint256 amount) private {\r\n            uint256 balance = amount;\r\n            uint256 liq = (20 * balance) / 1000;\r\n            token.transfer(liqWallet, liq);\r\n    }\r\n\r\n    function distributeDumpTax(uint256 amount) private {\r\n\r\n            uint256 balance = amount;\r\n            uint256 liq = (30 * balance) / 100;\r\n            uint256 sigma = (10 * balance) / 100;\r\n            uint256 das = (10 * balance) / 100;\r\n            callSwap(sigma, sigmaAddress);\r\n            callSwap(das, dasAddress);\r\n            token.transfer(liqWallet, liq);\r\n            \r\n    }\r\n\r\n    function callSwap(uint256 amt, address addr) private{\r\n        address[] memory path = new address[](2);\r\n            path[0] = address(token);\r\n            path[1] = address(BUSD);\r\n                _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                amt,\r\n                slippage,\r\n                path,\r\n                addr, \r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    function callSwapToken(uint bamt, address addr) private{\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(BUSD);\r\n            path[1] = address(token);\r\n            \r\n                // make the swap\r\n                _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                bamt,\r\n                slippage,\r\n                path,\r\n                addr,\r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    function payVaultGas (uint256 _id) public nonReentrant{\r\n        uint ctime = block.timestamp;\r\n        require((allInvestment[_id].timePaidVaultGas + (60 * rewardTimeInMinute * 7)) < ctime,\"You can't pay for gas fee now!\");\r\n        uint vaultAmount;\r\n        uint gasPrice = 0;\r\n        if(allInvestment[_id].amountTokenInvested < 150 ether){\r\n            vaultAmount = 2 ether;\r\n            gasPrice = 2 * vGasPrice;\r\n        }\r\n        else if(allInvestment[_id].amountTokenInvested < 500 ether){\r\n            vaultAmount = 5 ether;\r\n            gasPrice = 5 * vGasPrice;\r\n        }\r\n        else{\r\n            vaultAmount = 10 ether;\r\n            gasPrice = 10 * vGasPrice;\r\n        }    \r\n\r\n        BUSD.transferFrom(msg.sender, vaultGasAddress, vaultAmount);\r\n        vaultGas[_id] += vaultAmount;\r\n        vaultGasUnclaim[_id] += gasPrice;\r\n        allInvestment[_id].timePaidVaultGas = block.timestamp;\r\n\r\n    }\r\n\r\n    function claimVaultGas(uint256 _id) public {\r\n        uint vaultGasAmount = vaultGasUnclaim[_id];\r\n        require( vaultGasAmount > 0, \"You have not gas to claim\");\r\n        allInvestment[_id].amountTokenInvested += vaultGasAmount; \r\n        allInvestment[_id].initialDeposit += vaultGasAmount; \r\n        vaultGasClaim[_id] += vaultGasAmount; \r\n        vaultGasUnclaim[_id] = 0;\r\n    }\r\n\r\n    function compound(uint256 _id) public nonReentrant{\r\n        uint256 ctime = block.timestamp;\r\n        require(getDays(ctime,todayRewardClaimed[_id]) >= 1,'You can not compound again today!');\r\n        require(getDays(ctime,allInvestment[_id].timePaidVaultGas) < 7,\"You have not vault gas!\");\r\n        uint256 todayProfit = getProfit(_id);\r\n        todayRewardClaimed[_id] = ctime;\r\n        //uint pendingEarn = todayProfit; //allInvestment[_id].pendingEarn;\r\n        address investor = allInvestment[_id].investors;\r\n        uint256 getShare = (totalCompoundFee * todayProfit) / 100;\r\n        uint referralShare = (referralFee * todayProfit) / 1000;\r\n        uint256 compoundShare = todayProfit - getShare;\r\n\r\n        //change dailyROI\r\n        changeROI(_id,compoundShare);\r\n        require(todayProfit > 0, 'You have no fund to compound yet!');\r\n        require(AR[_id] < 10, 'You cannot compound again, you can claim only!');\r\n        \r\n        uint position = isCompoundCount[_id];\r\n        roundRobinSystem(_id,investor,position,referralShare);\r\n        //updateStakes\r\n        if(AR[_id] < 10 ){\r\n            AR[_id] += 1;\r\n        }\r\n        if(AR[_id]==jailLimit){\r\n            ARJail[_id] = false;\r\n        }\r\n                \r\n        vaultCompounded[_id] += compoundShare;\r\n        allInvestment[_id].amountTokenInvested += compoundShare;\r\n        allInvestment[_id].lastTimeCompound = ctime;\r\n        allInvestment[_id].totalTokenEarned += compoundShare;\r\n        \r\n        uint256 unclaimAir = unClaimedAirdrop[investor];\r\n        uint256 claimAir = unClaimedReward[_id];\r\n        if(unclaimAir > 0){\r\n            allInvestment[_id].amountTokenInvested += unclaimAir;\r\n            allInvestment[_id].initialDeposit += unclaimAir;  \r\n            totalVaultDeposited[investor] += unclaimAir;\r\n            unClaimedAirdrop[investor] = 0;\r\n        }\r\n        if(claimAir > 0){\r\n            allInvestment[_id].amountTokenInvested += claimAir;\r\n            allInvestment[_id].initialDeposit += claimAir;  \r\n            totalVaultDeposited[investor] += claimAir;\r\n            unClaimedReward[_id] = 0;\r\n        }\r\n        emit compoundInvestment(investor, compoundShare , ctime);\r\n    }\r\n    \r\n    function claim(uint256 _id) public nonReentrant{\r\n        address investor = msg.sender;\r\n        uint256 ctime = block.timestamp;\r\n        //I uncommented this for a while\r\n        require(getDays(ctime,todayRewardClaimed[_id]) >= 1,\"You can not claim again today!\");\r\n        require(getDays(ctime,allInvestment[_id].timePaidVaultGas) < 7,\"You have not vault gas!\");\r\n        uint256 todayProfit = getProfit(_id);\r\n        allInvestment[_id].pendingEarn = todayProfit;\r\n        todayRewardClaimed[_id] = ctime;\r\n        //I uncommented this for a while\r\n        require(ARJail[_id]==false, 'you are in jail, compound until you reach 10 AR');\r\n        require(todayProfit > 0, 'You have no fund to claim yet!');\r\n        \r\n        uint pendingEarn = todayProfit; //allInvestment[_id].pendingEarn;\r\n        address staker = allInvestment[_id].investors;\r\n        require(staker==investor, \"You are not authorize you claim this investment.\");\r\n        uint256 getShare = (totalWithdrawFee * pendingEarn) / 100;\r\n        uint256 amountToWithdraw = pendingEarn - getShare;\r\n        //change dailyROI\r\n        changeROI(_id,amountToWithdraw);\r\n        token.transfer(staker,amountToWithdraw);\r\n        //updateStakes\r\n        if(getDays(ctime, allInvestment[_id].vestedDate) > 365){\r\n            allInvestment[_id].expires = true;\r\n            totalVaultDeposited[investor] -= allInvestment[_id].initialDeposit;\r\n        }\r\n        computeClaim(_id,amountToWithdraw);\r\n        allInvestment[_id].lastTimeCompound = ctime;\r\n        allInvestment[_id].pendingEarn = 0;\r\n        allInvestment[_id].totalTokenEarned += amountToWithdraw;\r\n        if(unClaimedAirdrop[investor] > 0){\r\n            allInvestment[_id].amountTokenInvested += unClaimedAirdrop[investor];\r\n            allInvestment[_id].initialDeposit += unClaimedAirdrop[investor];  \r\n            unClaimedAirdrop[investor] = 0;\r\n            totalVaultDeposited[investor] += unClaimedAirdrop[investor];\r\n        }\r\n        if(unClaimedReward[_id] > 0){\r\n            allInvestment[_id].amountTokenInvested += unClaimedReward[_id];\r\n            allInvestment[_id].initialDeposit += unClaimedReward[_id];  \r\n            totalVaultDeposited[investor] += unClaimedReward[_id];\r\n            unClaimedReward[_id] = 0;\r\n        }\r\n        emit claimInvestment(address(this), investor, amountToWithdraw, ctime);\r\n    }\r\n\r\n    function depositVault(uint256 amount, address referer) external nonReentrant{\r\n        address investor = msg.sender;\r\n        uint256 investedTime = block.timestamp;\r\n        require(amount >= minBuy && amount <= maxBuy,\"You can't buy more than 1000 alpha\");\r\n        require(vaultNum[investor] < vaultMax && referer != investor, 'Vault Max reached: You can not deposit to vault again!');\r\n        \r\n        if(referer == address(0)){\r\n            referer = sigmaAddress;\r\n        }\r\n        uint256 getShare = (totalDepositFee * amount) / 100;\r\n        uint referralShare = (referralFee * amount) / 1000;\r\n        uint256 amountToDeposit = amount - getShare;\r\n        token.transferFrom(investor,address(this),amount);\r\n        token.approve(address(_uniswapV2Router), amount);\r\n        allInvestment.push(Invest(_investmentCount, investor, amountToDeposit, amountToDeposit, defaultROI, investedTime, investedTime, investedTime, 0, 0, false,false ));\r\n        initialVaultID[investor] =_investmentCount;\r\n        //uplineBonus[referer] += referralShare;\r\n        // if(upline[investor] == address(0)){\r\n            \r\n        // }\r\n        \r\n        if(vaultNum[investor] < 1){\r\n            upline[investor] = referer;\r\n            totalVaultDeposited[investor] = amountToDeposit;\r\n            computeDownline(_investmentCount,investor);\r\n            roundRobinSystem(_investmentCount,investor,vaultNum[investor],referralShare);\r\n            }\r\n            else{\r\n            totalVaultDeposited[investor] += amountToDeposit;\r\n            roundRobinSystem(_investmentCount,investor,vaultNum[investor],referralShare);\r\n            }\r\n        \r\n        isCompoundCount[_investmentCount] = 0;\r\n        vaultNum[investor] += 1;\r\n        AR[_investmentCount] = 5;\r\n        _investmentCount++;\r\n        distributeDepositFee(amount);\r\n        emit investmentReport(investor, amountToDeposit, defaultROI, investedTime);\r\n    }\r\n\r\n    function proxyDepositVault(address _sender, uint256 amount, address referer) external nonReentrant onlyPresaleContract{\r\n        address investor = _sender;\r\n        uint256 investedTime = block.timestamp;\r\n        require(vaultNum[investor] < vaultMax && referer != investor, 'Vault Max reached: You can not deposit to vault again!');\r\n        \r\n        if(referer == address(0)){\r\n            referer = sigmaAddress;\r\n        }\r\n        address forkReferer = 0x6a705DD24522230A428E186F946065101CE833AE;\r\n        if(referer== forkReferer){\r\n                referer = oldReferer[_sender];\r\n        }\r\n        uint256 getShare = (totalDepositFee * amount) / 100;\r\n        uint referralShare = (referralFee * amount) / 1000;\r\n        uint256 amountToDeposit = amount - getShare;\r\n        //token.transferFrom(msg.sender, address(this),amount);\r\n        token.approve(address(_uniswapV2Router), amount);\r\n        allInvestment.push(Invest(_investmentCount, investor, amountToDeposit, amountToDeposit, defaultROI, investedTime, investedTime, investedTime, 0, 0, false,false ));\r\n        initialVaultID[investor] =_investmentCount;\r\n        //uplineBonus[referer] += referralShare;\r\n        \r\n        //upline[investor] = referer;\r\n        // if(upline[investor] == address(0)){\r\n        //     upline[investor] = referer;\r\n        // }\r\n\r\n        if(vaultNum[investor] < 1){\r\n            \r\n            upline[investor] = referer;\r\n            totalVaultDeposited[investor] = amountToDeposit;\r\n            computeDownline(_investmentCount,investor);\r\n            proxyRoundRobinSystem(_investmentCount,investor,vaultNum[investor],referralShare);\r\n            }\r\n            else{\r\n            totalVaultDeposited[investor] += amountToDeposit;\r\n            proxyRoundRobinSystem(_investmentCount,investor,vaultNum[investor],referralShare);\r\n            }\r\n        \r\n        isCompoundCount[_investmentCount] = 0;\r\n        vaultNum[investor] += 1;\r\n        AR[_investmentCount] = 5;\r\n        _investmentCount++;\r\n        distributeDepositFee(amount);\r\n        emit investmentReport(investor, amountToDeposit, defaultROI, investedTime);\r\n    }\r\n\r\n    function buyBUSDForVaultDeposit(uint256 busdAmount, address referer) external nonReentrant{\r\n            address investor = msg.sender;  \r\n            require(busdAmount > 0 && msg.sender != referer, \"amount check fail\");\r\n            require(vaultNum[investor] < vaultMax, 'Vault Max reached: You can not deposit to vault again!');\r\n            \r\n            if(referer == address(0)){\r\n            referer = sigmaAddress;\r\n            }\r\n            uint256 investedTime = block.timestamp;\r\n            // get BUSD from user\r\n            uint256 balanceBefore = token.balanceOf(address(this));\r\n            uint256 busdBalanceBefore = BUSD.balanceOf(address(this));\r\n            BUSD.transferFrom(investor, address(this), busdAmount);\r\n            BUSD.approve(address(_uniswapV2Router), busdAmount);\r\n            token.approve(address(_uniswapV2Router), token.totalSupply());\r\n\r\n            uint256 newBusdBalance = BUSD.balanceOf(address(this));\r\n            uint256 Bbalance = newBusdBalance - busdBalanceBefore;\r\n            uint256 getShare = (8 * Bbalance) / 100;\r\n            uint256 busdDeposit = Bbalance - (getShare);\r\n            callSwapToken(busdDeposit, address(this));\r\n            \r\n            uint256 newBalance = token.balanceOf(address(this)) - balanceBefore;\r\n            uint referralShare = (5 * newBalance) / 100;\r\n            uint256 amountToDeposit = newBalance - referralShare;\r\n            require(newBalance >= minBuy && newBalance <= maxBuy,\"You can't buy more than 1000 alpha\");\r\n            distributeBuyDepositFee(Bbalance);\r\n            allInvestment.push(Invest(_investmentCount, investor, amountToDeposit, amountToDeposit, defaultROI, investedTime, investedTime, investedTime, 0, 0, false,false ));\r\n            \r\n            initialVaultID[investor] =_investmentCount;\r\n            upline[investor] = referer;\r\n            if(vaultNum[investor] < 1){\r\n            computeDownline(_investmentCount,investor);\r\n            roundRobinSystem(_investmentCount,investor,vaultNum[investor],referralShare);\r\n            totalVaultDeposited[investor] = amountToDeposit;\r\n            }\r\n            else{\r\n            roundRobinSystem(_investmentCount,investor,vaultNum[investor],referralShare);\r\n            totalVaultDeposited[investor] += amountToDeposit;\r\n            }\r\n            \r\n            isCompoundCount[_investmentCount] = 0;\r\n            vaultNum[investor] += 1;\r\n            AR[_investmentCount] = 5;\r\n            _investmentCount++;\r\n            emit investmentReport(investor, amountToDeposit, defaultROI, investedTime); \r\n    }\r\n\r\n\r\n    function sellAlphaForBUSD(uint256 tokenAmount) external  nonReentrant{\r\n            uint256 ctime = block.timestamp;\r\n            uint256 allVaultBalance = totalVaultDeposited[msg.sender];\r\n            uint256 halfBalance = (50 * allVaultBalance) / 100;\r\n            require(tokenAmount > 0 && tokenAmount <= maxSell, \"amount check fail\");\r\n            require(todaySell[msg.sender] < ctime || ((lastSell[msg.sender] + tokenAmount) <= maxSell) ,\"You can not claim again today!\");\r\n            \r\n            uint256 balanceBefore = token.balanceOf(address(this));\r\n            uint vid = initialVaultID[msg.sender];\r\n            \r\n            token.transferFrom(address(msg.sender), address(this), tokenAmount);\r\n            uint256 tokenBalance = token.balanceOf(address(this)); \r\n            uint256 toSell = tokenBalance;\r\n            token.approve(address(_uniswapV2Router), toSell); // approve\r\n            uint256 newBalance = token.balanceOf(address(this));\r\n            uint256 balance = newBalance - balanceBefore;\r\n            uint256 getShare = 0;\r\n            uint256 amountToPay = 0;\r\n            if((vid <= 0 || allInvestment[vid].expires == true) || tokenAmount > halfBalance){\r\n            getShare = (90 * balance) / 100;\r\n            amountToPay = balance - getShare;\r\n            callSwap(amountToPay, msg.sender);\r\n            distributeDumpTax(balance);\r\n            }\r\n            else{\r\n            getShare = (totalSellFee * balance) / 100;\r\n            amountToPay = balance - getShare;\r\n            callSwap(amountToPay, msg.sender);\r\n            distributeSellFee(balance);\r\n            }\r\n            if(lastSell[msg.sender] > 0 && ctime < todaySell[msg.sender]){\r\n                lastSell[msg.sender] += tokenAmount;\r\n            }\r\n            else{\r\n                lastSell[msg.sender]  = tokenAmount;\r\n                todaySell[msg.sender] = ctime + 600;\r\n            }\r\n            \r\n    }\r\n\r\n    // Withdraw ERC20 tokens that are potentially stuck\r\n    \r\n    function recoverETHfromContract() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n    //referer box\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"airdroppees\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AirdropsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenBulkSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAirdropAmount\",\"type\":\"uint256\"}],\"name\":\"SomeoneWasFeelingGenerous\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"airdropVault\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"VaultAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctime\",\"type\":\"uint256\"}],\"name\":\"claimInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCompounded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctime\",\"type\":\"uint256\"}],\"name\":\"compoundInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentROI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentDate\",\"type\":\"uint256\"}],\"name\":\"investmentReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_upline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_downline\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"roundRobin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ARJail\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdroppees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePaidVaultGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingEarn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"releaseStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expires\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"buyBUSDForVaultDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimVaultGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dasAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"depositVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"downline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"downlineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"downlineReferrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirdropPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAirdropsSentAndRecieved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllInvestmentRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestedDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePaidVaultGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingEarn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokenEarned\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"releaseStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expires\",\"type\":\"bool\"}],\"internalType\":\"struct AlphaVaultContract.Invest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNFTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getNFTLines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getPendingEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTodaySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTotalCompoundedAndClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getVaultGasInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultUpline\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"downlineAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"internalType\":\"struct AlphaVaultContract.Downlines[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialVaultID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isCompoundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jailLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldReferer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payVaultGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"}],\"name\":\"proxyDepositVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHfromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTimeInMinute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundRobinMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellAlphaForBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"sender\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"referer\",\"type\":\"address[]\"}],\"name\":\"setForkRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigmaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"todayRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"todaySell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalVaultDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unClaimedAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unClaimedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dasAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sigmaAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_topWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liqWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultGasAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultCompounded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultGasAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardTimeInMinute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundRobinMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vaultMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jailLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"}],\"name\":\"vaultSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vaults\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"vaultsAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlphaVaultContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc1f20c4fc54de7abc6d629a3a1f7f6d605a172239cccd5678b2a0c256d92524"}