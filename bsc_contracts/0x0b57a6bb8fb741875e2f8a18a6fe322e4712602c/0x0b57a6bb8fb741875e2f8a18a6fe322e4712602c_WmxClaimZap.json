{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WmxClaimZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport {WmxMath} from \\\"./WmxMath.sol\\\";\\nimport {IWmxLocker, IWomDepositorWrapper, IWomSwapDepositor} from \\\"./Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IExtraRewards {\\n    function getReward(address _account, address _token) external;\\n}\\n\\ninterface IBasicRewards {\\n    function getReward(address _account, bool _lockWmx) external;\\n\\n    function getReward(address _account) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function stakeFor(address, uint256) external;\\n}\\n\\n/**\\n * @title   ClaimZap\\n * @author  ConvexFinance -> AuraFinance -> WombexFinance\\n * @notice  Claim zap to bundle various reward claims\\n * @dev     Claims from all pools, and stakes wmxWom and WMX if wanted.\\n *          v2:\\n *           - change exchange to use curve pool\\n *           - add getReward(address,token) type\\n *           - add option to lock wmx\\n *           - add option use all funds in wallet\\n */\\ncontract WmxClaimZap {\\n    using SafeERC20 for IERC20;\\n    using WmxMath for uint256;\\n\\n    address public immutable wom;\\n    address public immutable wmx;\\n    address public immutable womWmx;\\n    address public immutable womDepositor;\\n    address public immutable wmxWomRewards;\\n    address public immutable extraRewardsDistributor;\\n    address public immutable womSwapDepositor;\\n    address public immutable locker;\\n    address public immutable owner;\\n\\n    enum Options {\\n        ClaimWmxWom, //1\\n        ClaimLockedWmx, //2\\n        ClaimLockedWmxStake, //4\\n        LockWomDeposit, //8\\n        UseAllWalletFunds, //16\\n        LockWmx, //32\\n        LockWmxRewards, //64\\n        StakeWmxWom, //128\\n        WomSwapDeposit //256\\n}\\n\\n    /**\\n     * @param _wom                      WOM token\\n     * @param _wmx                      WMX token\\n     * @param _wmxWom                   wmxWom token\\n     * @param _womDepositor             womDepositor\\n     * @param _wmxWomRewards            wmxWomRewards\\n     * @param _extraRewardsDistributor  ExtraRewardsDistributor\\n     * @param _locker                   vlWMX\\n     */\\n    constructor(\\n        address _wom,\\n        address _wmx,\\n        address _wmxWom,\\n        address _womDepositor,\\n        address _wmxWomRewards,\\n        address _extraRewardsDistributor,\\n        address _womSwapDepositor,\\n        address _locker,\\n        address _owner\\n    ) {\\n        wom = _wom;\\n        wmx = _wmx;\\n        womWmx = _wmxWom;\\n        womDepositor = _womDepositor;\\n        wmxWomRewards = _wmxWomRewards;\\n        extraRewardsDistributor = _extraRewardsDistributor;\\n        womSwapDepositor = _womSwapDepositor;\\n        locker = _locker;\\n        owner = _owner;\\n        _setApprovals();\\n    }\\n\\n    function getName() external pure returns (string memory) {\\n        return \\\"ClaimZap V3.0\\\";\\n    }\\n\\n    /**\\n     * @notice Approve spending of:\\n     *          wom     -> womDepositor\\n     *          wmxWom  -> wmxWomRewards\\n     *          wmx     -> Locker\\n     */\\n    function setApprovals() external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        _setApprovals();\\n    }\\n\\n    function _setApprovals() internal {\\n        IERC20(wom).safeApprove(womDepositor, 0);\\n        IERC20(wom).safeApprove(womDepositor, type(uint256).max);\\n\\n        IERC20(wom).safeApprove(womSwapDepositor, 0);\\n        IERC20(wom).safeApprove(womSwapDepositor, type(uint256).max);\\n\\n        IERC20(womWmx).safeApprove(wmxWomRewards, 0);\\n        IERC20(womWmx).safeApprove(wmxWomRewards, type(uint256).max);\\n\\n        IERC20(wmx).safeApprove(locker, 0);\\n        IERC20(wmx).safeApprove(locker, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Use bitmask to check if option flag is set\\n     */\\n    function _checkOption(uint256 _mask, Options _flag) internal pure returns (bool) {\\n        return (_mask & (1 << uint256(_flag))) != 0;\\n    }\\n\\n    /**\\n     * @notice Claim all the rewards\\n     * @param rewardContracts       Array of addresses for LP token rewards\\n     * @param extraRewardTokens  Array of addresses for extra rewards\\n     * @param tokenRewardContracts  Array of addresses for token rewards e.g vlWmxExtraRewardDistribution\\n     * @param tokenRewardPids       Array of token staking ids to use with tokenRewardContracts\\n     * @param depositWomMaxAmount   The max amount of WOM to deposit if converting to womWmx\\n     * @param wmxWomMinOutAmount    The min amount out for wom:wmxWom swaps if swapping. Set this to zero if you\\n     *                              want to use WomDepositor instead of balancer swap\\n     * @param depositWmxMaxAmount   The max amount of WMX to deposit if locking WMX\\n     * @param options               Claim options\\n     */\\n    function claimRewards(\\n        address[] calldata rewardContracts,\\n        address[] calldata extraRewardTokens,\\n        address[] calldata tokenRewardContracts,\\n        uint256[] calldata tokenRewardPids,\\n        uint256 depositWomMaxAmount,\\n        uint256 wmxWomMinOutAmount,\\n        uint256 depositWmxMaxAmount,\\n        uint256 options\\n    ) external {\\n        require(tokenRewardContracts.length == tokenRewardPids.length, \\\"!parity\\\");\\n\\n        uint256 womBalance = IERC20(wom).balanceOf(msg.sender);\\n        uint256 wmxBalance = IERC20(wmx).balanceOf(msg.sender);\\n\\n        //claim from main curve LP pools\\n        for (uint256 i = 0; i < rewardContracts.length; i++) {\\n            IBasicRewards(rewardContracts[i]).getReward(msg.sender, _checkOption(options, Options.LockWmxRewards));\\n        }\\n        //claim from extra rewards\\n        for (uint256 i = 0; i < extraRewardTokens.length; i++) {\\n            IExtraRewards(extraRewardsDistributor).getReward(msg.sender, extraRewardTokens[i]);\\n        }\\n        //claim from multi reward token contract\\n        for (uint256 i = 0; i < tokenRewardContracts.length; i++) {\\n            IBasicRewards(tokenRewardContracts[i]).depositFor(tokenRewardPids[i], 0, msg.sender);\\n        }\\n\\n        // claim others/deposit/lock/stake\\n        _claimExtras(depositWomMaxAmount, wmxWomMinOutAmount, depositWmxMaxAmount, womBalance, wmxBalance, options);\\n    }\\n\\n    /**\\n     * @notice  Claim additional rewards from:\\n     *          - wmxWomRewards\\n     *          - wmxLocker\\n     * @param depositWomMaxAmount see claimRewards\\n     * @param wmxWomMinOutAmount  see claimRewards\\n     * @param depositWmxMaxAmount see claimRewards\\n     * @param removeWomBalance    womBalance to ignore and not redeposit (starting Wom balance)\\n     * @param removeWmxBalance    wmxBalance to ignore and not redeposit (starting Wmx balance)\\n     * @param options             see claimRewards\\n     */\\n    // prettier-ignore\\n    function _claimExtras( // solhint-disable-line\\n        uint256 depositWomMaxAmount,\\n        uint256 wmxWomMinOutAmount,\\n        uint256 depositWmxMaxAmount,\\n        uint256 removeWomBalance,\\n        uint256 removeWmxBalance,\\n        uint256 options\\n    ) internal {\\n        //claim from wmxWom rewards\\n        if (_checkOption(options, Options.ClaimWmxWom)) {\\n            IBasicRewards(wmxWomRewards).getReward(msg.sender, _checkOption(options, Options.LockWmxRewards));\\n        }\\n\\n        //claim from locker\\n        if (_checkOption(options, Options.ClaimLockedWmx)) {\\n            IWmxLocker(locker).getReward(msg.sender, _checkOption(options, Options.ClaimLockedWmxStake));\\n        }\\n\\n        //reset remove balances if we want to also stake/lock funds already in our wallet\\n        if (_checkOption(options, Options.UseAllWalletFunds)) {\\n            removeWomBalance = 0;\\n            removeWmxBalance = 0;\\n        }\\n\\n        //lock upto given amount of wom and stake\\n        if (depositWomMaxAmount > 0) {\\n            uint256 womBalance = IERC20(wom).balanceOf(msg.sender).sub(removeWomBalance);\\n            womBalance = WmxMath.min(womBalance, depositWomMaxAmount);\\n\\n            if (womBalance > 0) {\\n                //pull wom\\n                IERC20(wom).safeTransferFrom(msg.sender, address(this), womBalance);\\n                //deposit\\n                if (_checkOption(options, Options.WomSwapDeposit)) {\\n                    IWomSwapDepositor(womSwapDepositor).deposit(\\n                        womBalance,\\n                        address(0),\\n                        wmxWomMinOutAmount,\\n                        type(uint256).max\\n                    );\\n                } else {\\n                    IWomDepositorWrapper(womDepositor).deposit(\\n                        womBalance,\\n                        wmxWomMinOutAmount,\\n                        _checkOption(options, Options.LockWomDeposit),\\n                        address(0)\\n                    );\\n                }\\n\\n                uint256 wmxWomBalance = IERC20(womWmx).balanceOf(address(this));\\n                if (_checkOption(options, Options.StakeWmxWom)) {\\n                    //stake for msg.sender\\n                    IBasicRewards(wmxWomRewards).stakeFor(msg.sender, wmxWomBalance);\\n                } else {\\n                    IERC20(womWmx).safeTransfer(msg.sender, wmxWomBalance);\\n                }\\n            }\\n        }\\n\\n        //stake up to given amount of wmx\\n        if (depositWmxMaxAmount > 0 && _checkOption(options, Options.LockWmx)) {\\n            uint256 wmxBalance = IERC20(wmx).balanceOf(msg.sender).sub(removeWmxBalance);\\n            wmxBalance = WmxMath.min(wmxBalance, depositWmxMaxAmount);\\n            if (wmxBalance > 0) {\\n                //pull wmx\\n                IERC20(wmx).safeTransferFrom(msg.sender, address(this), wmxBalance);\\n                IWmxLocker(locker).lock(msg.sender, wmxBalance);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WmxMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/// @notice A library for performing overflow-/underflow-safe math,\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\nlibrary WmxMath {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        c = a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    function to224(uint256 a) internal pure returns (uint224 c) {\\n        require(a <= type(uint224).max, \\\"WmxMath: uint224 Overflow\\\");\\n        c = uint224(a);\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"WmxMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to112(uint256 a) internal pure returns (uint112 c) {\\n        require(a <= type(uint112).max, \\\"WmxMath: uint112 Overflow\\\");\\n        c = uint112(a);\\n    }\\n\\n    function to96(uint256 a) internal pure returns (uint96 c) {\\n        require(a <= type(uint96).max, \\\"WmxMath: uint96 Overflow\\\");\\n        c = uint96(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"WmxMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\nlibrary WmxMath32 {\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint112.\\nlibrary WmxMath112 {\\n    function add(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a + b;\\n    }\\n\\n    function sub(uint112 a, uint112 b) internal pure returns (uint112 c) {\\n        c = a - b;\\n    }\\n}\\n\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\\nlibrary WmxMath224 {\\n    function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\\n        c = a + b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWomDepositor {\\n    function deposit(uint256 _amount, address _stakeAddress) external returns (bool);\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\\ninterface IWmxLocker {\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function checkpointEpoch() external;\\n\\n    function epochCount() external view returns (uint256);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function getReward(address _account) external;\\n\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n}\\n\\ninterface IExtraRewardsDistributor {\\n    function addReward(address _token, uint256 _amount) external;\\n}\\n\\ninterface IWomDepositorWrapper {\\n    function getMinOut(uint256, uint256) external view returns (uint256);\\n\\n    function deposit(\\n        uint256,\\n        uint256,\\n        bool,\\n        address _stakeAddress\\n    ) external;\\n}\\n\\ninterface IRewards{\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function withdraw(uint256 assets, address receiver, address owner) external;\\n    function exit(address) external;\\n    function getReward(address) external;\\n    function queueNewRewards(address, uint256) external;\\n    function notifyRewardAmount(uint256) external;\\n    function addExtraReward(address) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function rewardToken() external view returns(address);\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface ITokenMinter{\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n    function setOperator(address) external;\\n}\\n\\ninterface IStaker{\\n    function deposit(address, address) external returns (bool);\\n    function withdraw(address) external returns (uint256);\\n    function withdrawLp(address, address, uint256) external returns (bool);\\n    function withdrawAllLp(address, address) external returns (bool);\\n    function lock(uint256 _lockDays) external;\\n    function releaseLock(uint256 _slot) external returns(bool);\\n    function claimCrv(address, uint256) external returns (address[] memory tokens, uint256[] memory balances);\\n    function balanceOfPool(address, address) external view returns (uint256);\\n    function operator() external view returns (address);\\n    function depositor() external view returns (address);\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\n    function setVote(bytes32 hash, bool valid) external;\\n    function setDepositor(address _depositor) external;\\n    function setOwner(address _owner) external;\\n}\\n\\ninterface IPool {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\\ninterface IMasterWombatV2 {\\n    function getAssetPid(address) external view returns(uint256);\\n}\\n\\ninterface IBooster {\\n    function owner() external view returns (address);\\n    function poolLength() external view returns (uint256);\\n    function poolInfo(uint256 _pid) external view returns(address lptoken, address token, address gauge, address crvRewards, bool shutdown);\\n    function depositFor(uint256 _pid, uint256 _amount, bool _stake, address _receiver) external returns (bool);\\n    function earmarkRewards(uint256 _pid) external returns(bool);\\n    function setOwner(address _owner) external;\\n}\\n\\ninterface ISwapRouter {\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n}\\n\\ninterface IWomSwapDepositor {\\n    function deposit(uint256 _amount, address _stakeAddress, uint256 _minAmountOut, uint256 _deadline) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmxWom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_womDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wmxWomRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_extraRewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_womSwapDepositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardContracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"extraRewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenRewardContracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRewardPids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"depositWomMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wmxWomMinOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositWmxMaxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"options\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmxWomRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"womDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"womSwapDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"womWmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WmxClaimZap", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000ad6742a35fb341a9cc6ad674738dd8da98b94fb1000000000000000000000000a75d9ca2a0a1d547409d82e1b06618ec284a2ced0000000000000000000000000415023846ff1c6016c4d9621de12b24b2402979000000000000000000000000356dd045d05adc218306ddfb1d2e310959a2515100000000000000000000000011f64ff090dbeb1b0630caa90a8dfbb70f45db5f000000000000000000000000a30243610844ca7f3fe99292e2be2954df64b554000000000000000000000000508bb9eea13c83b4320cea88f12ff3c798f61aff000000000000000000000000d4e596c0d5ad06724f4980ff9b73438feb1504ee00000000000000000000000035d32110d9a6f02d403061c851618756b3bc597f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}