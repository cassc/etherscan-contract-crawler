{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function waiveOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IBscPrice {\r\n    function getTokenUsdtPrice(address _token) external view returns (uint256);\r\n}\r\n\r\ncontract BHC is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private _name = \"Bounty Coins\";\r\n    string private _symbol = \"BHC\";\r\n    uint8 private _decimals = 18;\r\n    //\u5c0f\u62f3\u5934\u5e01\r\n    address public fistToken = 0xf595cb23d3Fe93Db4657c69193Ee7692B3367CC1;\r\n    //\u4ef7\u683c\u5730\u5740\r\n    address public bscPriceAddress = 0xb44BD3a21656f7Bea10eC63A6F3f63BA5Fb5365A;\r\n    //\u57fa\u91d1\u4f1a\u5730\u5740\r\n    address public fundingWalletAddress =\r\n        0xc59A43fB75b580fdfCf916EC0fd8D6F203D55a5B;\r\n    //\u8de8\u94fe\u4ea4\u6613\u5730\u5740\r\n    address public crossChainWalletAddress =\r\n        0xBDf8788EC3cc5c55019A7eFca3Ff21671EB806E8;\r\n    //\u9500\u6bc1\u5730\u5740\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    // \u8d4f\u91d1\u6c60\u5730\u5740\r\n    address public prizePoolWalletAddress =\r\n        0x0CbbF34834AC95443ffB9Bf600970818d27CC57d;\r\n    //Dao\u5730\u5740\r\n    address public daoWalletAddress =\r\n        0x4C78c1D756E594f195D0Eb3002CE0C071783AC11;\r\n    //fist\u5206\u7ea2\u5730\u5740\r\n    address public fistBonusAddress = 0x08cafF757Be225833e991910b0b7606a7F7f1eD4;\r\n\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    //\u4ea4\u6613\u4e0d\u9650\u5236\r\n    mapping(address => bool) public isTxLimitExempt;\r\n    //\u662f\u5426lp\u5730\u5740\r\n    mapping(address => bool) public isMarketPair;\r\n\r\n    //\u9500\u6bc1\u624b\u7eed\u8d39\r\n    uint256 public _destroyFee = 20;\r\n    //fist\u603b\u624b\u7eed\u8d39\r\n    uint256 public _fistBounsFee = 30;\r\n    //\u63a8\u5e7f\u624b\u7eed\u8d39\r\n    uint256[6] public _marketingShares;\r\n    //\u8584\u997c\u4ea4\u6613\u603b\u624b\u7eed\u8d39\r\n    uint256 public _totalTaxIfPancakeTrading;\r\n    //\u666e\u901a\u4ea4\u6613\u624b\u7eed\u8d39\r\n    uint256 public _totalTaxIfTrading = 20;\r\n    //\u63a8\u5e7f\u5206\u7ea2\u624b\u7eed\u8d39\r\n    uint256 public _totalMarketingShareFee;\r\n    //\u53d1\u884c\u91cf\r\n    uint256 private _totalSupply = 10000000000 * 10**_decimals;\r\n    address public uniswapPair;\r\n    IUniswapRouter uniswapV2Router;\r\n    //\u7528\u6237\u5c42\u7ea7\u5173\u7cfb\r\n    mapping(address => address) public referers;\r\n    //\u7ed1\u5b9a\u5173\u7cfb\u9650\u5236\r\n    uint256 relationUsdtLimit = 3 * 1e18;\r\n    bool inSwapAndLiquify;\r\n    bool public relationSwitch = true;\r\n    mapping(address => bool) public operators;\r\n    mapping(uint256 => bool) public releaseStatus;\r\n    //\u6bcf\u65e5\u91ca\u653e\u6570\u91cf\r\n    uint256 public dayReleaseAmount;\r\n    uint256 constant baseTime = 1646928000;\r\n    //\u91ca\u653e\u7ed3\u675f\u65f6\u95f4\r\n    uint256 public relaseEndTime;\r\n    //\u91ca\u653e\u5b58\u5728\u9886\u5bfc\u4eba\r\n    mapping(address => bool) public existRefer;\r\n    bool public liquifyEnable = true;\r\n\r\n    constructor() {\r\n        uniswapV2Router = IUniswapRouter(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        uniswapPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            0x55d398326f99059fF775485246999027B3197955\r\n        );\r\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\r\n\r\n        _marketingShares = [20, 10, 5, 5, 5, 5];\r\n        _refreshPancakeTradeFee();\r\n\r\n        uint256 currentTime = getCurrentTime();\r\n        relaseEndTime = currentTime.add(1 days * 360);\r\n        uint256 foundingRelase = _totalSupply.mul(8).div(100).mul(70).div(100);\r\n        dayReleaseAmount = foundingRelase.div(360);\r\n        releaseStatus[currentTime] = true;\r\n        _balances[address(this)] = foundingRelase;\r\n        _balances[fundingWalletAddress] = _totalSupply\r\n            .mul(8)\r\n            .div(100)\r\n            .mul(30)\r\n            .div(100);\r\n\r\n        _balances[prizePoolWalletAddress] = _totalSupply.mul(70).div(100);\r\n        _balances[crossChainWalletAddress] = _totalSupply.mul(20).div(100);\r\n        _balances[daoWalletAddress] = _totalSupply.mul(2).div(100);\r\n\r\n        isMarketPair[address(uniswapPair)] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n        //\u6dfb\u52a0\u767d\u540d\u5355\r\n        isTxLimitExempt[fundingWalletAddress] = true;\r\n        isTxLimitExempt[crossChainWalletAddress] = true;\r\n        isTxLimitExempt[prizePoolWalletAddress] = true;\r\n        isTxLimitExempt[daoWalletAddress] = true;\r\n        isTxLimitExempt[fistBonusAddress] = true;\r\n\r\n        emit Transfer(\r\n            address(0),\r\n            fundingWalletAddress,\r\n            _balances[fundingWalletAddress]\r\n        );\r\n\r\n        emit Transfer(\r\n            address(0),\r\n            crossChainWalletAddress,\r\n            _balances[crossChainWalletAddress]\r\n        );\r\n        emit Transfer(\r\n            address(0),\r\n            prizePoolWalletAddress,\r\n            _balances[prizePoolWalletAddress]\r\n        );\r\n        emit Transfer(\r\n            address(0),\r\n            daoWalletAddress,\r\n            _balances[daoWalletAddress]\r\n        );\r\n    }\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier onlyFactory() {\r\n        require(operators[msg.sender], \"BHC: only facotry can operator\");\r\n        _;\r\n    }\r\n\r\n    function setLiquifyEnable(bool newValue) public onlyOwner {\r\n        liquifyEnable = newValue;\r\n    }\r\n\r\n    function setRelationSwitch(bool newValue) public onlyOwner {\r\n        relationSwitch = newValue;\r\n    }\r\n\r\n    function setFundingWalletAddress(address newValue) public onlyOwner {\r\n        fundingWalletAddress = payable(newValue);\r\n    }\r\n\r\n    function setCrossChainWalletAddress(address newValue) public onlyOwner {\r\n        crossChainWalletAddress = payable(newValue);\r\n    }\r\n\r\n    function setPrizePoolWalletAddress(address newValue) public onlyOwner {\r\n        prizePoolWalletAddress = payable(newValue);\r\n    }\r\n\r\n    function setDaoWalletAddress(address newValue) public onlyOwner {\r\n        daoWalletAddress = payable(newValue);\r\n    }\r\n\r\n    function setRelationUsdtLimit(uint256 newValue) public onlyOwner {\r\n        relationUsdtLimit = newValue.mul(1e18);\r\n    }\r\n\r\n    function setPancakeTradeFee(uint256 destroyFee, uint256 fistBounsFee)\r\n        public\r\n        onlyOwner\r\n    {\r\n        _destroyFee = destroyFee;\r\n        _fistBounsFee = fistBounsFee;\r\n        _refreshPancakeTradeFee();\r\n    }\r\n\r\n    function setMarketingShares(\r\n        uint256[] memory levelIds,\r\n        uint256[] memory shareFees\r\n    ) public onlyOwner {\r\n        require(levelIds.length == shareFees.length);\r\n        for (uint256 i = 0; i < levelIds.length; i++) {\r\n            _marketingShares[levelIds[i]] = shareFees[i];\r\n        }\r\n        _refreshPancakeTradeFee();\r\n    }\r\n\r\n    function _refreshPancakeTradeFee() internal {\r\n        _totalTaxIfPancakeTrading = 0;\r\n        _totalMarketingShareFee = 0;\r\n        _totalTaxIfPancakeTrading = _destroyFee.add(_fistBounsFee);\r\n        for (uint256 i = 0; i < _marketingShares.length; i++) {\r\n            _totalTaxIfPancakeTrading = _totalTaxIfPancakeTrading.add(\r\n                _marketingShares[i]\r\n            );\r\n            _totalMarketingShareFee = _totalMarketingShareFee.add(\r\n                _marketingShares[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function setTranferDestroyFee(uint256 newValue) public onlyOwner {\r\n        _totalTaxIfTrading = newValue;\r\n    }\r\n\r\n    event SwapTokensForToken(uint256 amountIn, address[] path);\r\n    event BindRelation(\r\n        address indexed user,\r\n        address indexed leader,\r\n        uint256 timestamp\r\n    );\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function setOperator(address user, bool newValue) public onlyOwner {\r\n        operators[user] = newValue;\r\n    }\r\n\r\n    function getCurrentTime() internal view returns (uint256) {\r\n        uint256 base = block.timestamp.sub(baseTime).div(1 days);\r\n        return base.mul(1 days).add(baseTime);\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool newValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        isMarketPair[account] = newValue;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(deadAddress));\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount)\r\n        private\r\n    {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _relaseFounding();\r\n        if (inSwapAndLiquify) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        if (isTxLimitExempt[sender] || isTxLimitExempt[recipient]) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        uint256 finalAmount = takeFee(sender, recipient, amount);\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _relaseFounding() internal {\r\n        uint256 currentTime = getCurrentTime();\r\n        if (currentTime > relaseEndTime || _balances[address(this)] < dayReleaseAmount) {\r\n            return;\r\n        }\r\n        if (!releaseStatus[currentTime]) {\r\n            releaseStatus[currentTime] = true;\r\n            _balances[address(this)] = _balances[address(this)].sub(\r\n                dayReleaseAmount\r\n            );\r\n            _balances[fundingWalletAddress] = _balances[fundingWalletAddress]\r\n                .add(dayReleaseAmount);\r\n            emit Transfer(\r\n                address(this),\r\n                fundingWalletAddress,\r\n                dayReleaseAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n        bool isPancakeTrading = false;\r\n        if (isMarketPair[sender] || isMarketPair[recipient]) {\r\n            isPancakeTrading = true;\r\n            feeAmount = amount.mul(_totalTaxIfPancakeTrading).div(1000);\r\n        } else {\r\n            feeAmount = amount.mul(_totalTaxIfTrading).div(1000);\r\n        }\r\n        if (feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        if (isPancakeTrading) {\r\n            //\u9500\u6bc1\r\n            _destroy(amount, _destroyFee);\r\n            if (isMarketPair[recipient] && liquifyEnable) {\r\n                // \u5151\u6362fist\u5956\u91d1\r\n                _swapFistBounus(amount);\r\n            } else if (isMarketPair[sender] && liquifyEnable) {\r\n                uint256 fistBounds = amount.mul(_fistBounsFee).div(1000);\r\n                if (fistBounds > 0) {\r\n                    _balances[address(this)] = _balances[address(this)].sub(\r\n                        fistBounds\r\n                    );\r\n                    _balances[fistBonusAddress] = _balances[fistBonusAddress]\r\n                        .add(fistBounds);\r\n                    emit Transfer(address(this), fistBonusAddress, fistBounds);\r\n                }\r\n            }\r\n            //\u63a8\u5e7f\u5206\u7ea2\r\n            _distributionShares(recipient, amount);\r\n        } else {\r\n            //\u9500\u6bc1\r\n            _destroy(amount, _totalTaxIfTrading);\r\n            //\u7ed1\u5b9a\u5c42\u7ea7\u5173\u7cfb\r\n            _bindRelation(sender, recipient, amount);\r\n        }\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    //\u9500\u6bc1\r\n    function _destroy(uint256 amount, uint256 _destroyFeeRate) internal {\r\n        uint256 feeAmount = amount.mul(_destroyFeeRate).div(1000);\r\n        if (feeAmount > 0) {\r\n            _balances[deadAddress] = _balances[deadAddress].add(feeAmount);\r\n            _balances[address(this)] = _balances[address(this)].sub(feeAmount);\r\n            emit Transfer(address(this), deadAddress, feeAmount);\r\n        }\r\n    }\r\n\r\n    //fist\u5e01\u5206\u7ea2\r\n    function _swapFistBounus(uint256 amount) internal {\r\n        uint256 feeAmount = amount.mul(_fistBounsFee).div(1000);\r\n        if (feeAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].sub(feeAmount);\r\n            swapTokensForToken(feeAmount, fistBonusAddress);\r\n        }\r\n    }\r\n\r\n    function _bindRelation(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        if (\r\n            !relationSwitch ||\r\n            isMarketPair[sender] ||\r\n            isMarketPair[recipient] ||\r\n            sender == recipient ||\r\n            isTxLimitExempt[sender] ||\r\n            existRefer[recipient]\r\n        ) {\r\n            return;\r\n        }\r\n        if (referers[recipient] == address(0)) {\r\n            uint256 tokenPrice = IBscPrice(bscPriceAddress).getTokenUsdtPrice(\r\n                address(this)\r\n            );\r\n            uint256 transferUsdtAmount = tokenPrice.mul(amount);\r\n            if (transferUsdtAmount >= relationUsdtLimit) {\r\n                referers[recipient] = sender;\r\n                if (!existRefer[sender]) {\r\n                    existRefer[sender] = true;\r\n                }\r\n                emit BindRelation(recipient, sender, block.timestamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function getRefers(address sender, uint256 _high)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        address _leader = sender;\r\n        for (uint256 i = 0; i <= _high; i++) {\r\n            _leader = referers[_leader];\r\n            if (_leader == address(0)) {\r\n                break;\r\n            }\r\n        }\r\n        return _leader;\r\n    }\r\n\r\n    //\u63a8\u5e7f\u5206\u7ea2\r\n    function _distributionShares(address recipient, uint256 amount) internal {\r\n        uint256 feeAmount = amount.mul(_totalMarketingShareFee).div(1000);\r\n        if (feeAmount == 0) {\r\n            return;\r\n        }\r\n        _balances[address(this)] = _balances[address(this)].sub(feeAmount);\r\n        bool _leaderExist = true;\r\n        for (uint256 i = 0; i < _marketingShares.length; i++) {\r\n            uint256 _shareRate = _marketingShares[i];\r\n            if (_shareRate == 0) {\r\n                continue;\r\n            }\r\n            uint256 shareFee = amount.mul(_shareRate).div(1000);\r\n            address leader = address(0);\r\n            if (_leaderExist) {\r\n                leader = getRefers(recipient, i);\r\n                if (leader == address(0)) {\r\n                    _leaderExist = false;\r\n                }\r\n            }\r\n            if (!_leaderExist) {\r\n                _balances[deadAddress] = _balances[deadAddress].add(shareFee);\r\n                emit Transfer(address(this), deadAddress, shareFee);\r\n            } else {\r\n                _balances[leader] = _balances[leader].add(shareFee);\r\n                emit Transfer(address(this), leader, shareFee);\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapTokensForToken(uint256 tokenAmount, address to) internal {\r\n        address[] memory path = new address[](4);\r\n        path[0] = address(this);\r\n        path[1] = 0x55d398326f99059fF775485246999027B3197955;\r\n        path[2] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[3] = fistToken;\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of token\r\n            path,\r\n            to, // The contract\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForToken(tokenAmount, path);\r\n    }\r\n\r\n    function devoteDestroy(address user, uint256 amount)\r\n        public\r\n        onlyFactory\r\n        returns (bool)\r\n    {\r\n        require(_balances[user] >= amount, \"BHC: destroy Insufficient balance\");\r\n        _balances[user] = _balances[user].sub(amount);\r\n        _balances[deadAddress] = _balances[deadAddress].add(amount);\r\n        emit Transfer(user, deadAddress, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BindRelation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_destroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fistBounsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_marketingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalMarketingShareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxIfPancakeTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalTaxIfTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bscPriceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossChainWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayReleaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devoteDestroy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"existRefer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fistBonusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fistToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_high\",\"type\":\"uint256\"}],\"name\":\"getRefers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relaseEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relationSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releaseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setCrossChainWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setDaoWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setFundingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setLiquifyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"levelIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shareFees\",\"type\":\"uint256[]\"}],\"name\":\"setMarketingShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fistBounsFee\",\"type\":\"uint256\"}],\"name\":\"setPancakeTradeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setPrizePoolWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setRelationSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRelationUsdtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTranferDestroyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BHC", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d83ac30d90f6849518dd9d377ab73e8ee2b3404fc4f36761bf7135ee37b538a9"}