{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-09-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint balance);\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint tokenId) external;\r\n    function transferFrom(address from, address to, uint tokenId) external;\r\n    function approve(address to, uint tokenId) external;\r\n    function getApproved(uint tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint tokenId) external view returns (string memory);\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint temp = value;\r\n        uint digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n    {\r\n        return\r\n        interfaceId == type(IERC721).interfaceId ||\r\n        interfaceId == type(IERC721Metadata).interfaceId ||\r\n        super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n    {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n        bytes(baseURI).length > 0\r\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n        : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    virtual\r\n    override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _exists(uint tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint tokenId)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner ||\r\n        getApproved(tokenId) == spender ||\r\n        ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _safeMint(address to, uint tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(uint tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ERC721.ownerOf(tokenId) == from,\r\n            \"ERC721: transfer of token that is not own\"\r\n        );\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n            IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint);\r\n    function tokenOfOwnerByIndex(address owner, uint index) external view returns (uint tokenId);\r\n    function tokenByIndex(uint index) external view returns (uint);\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint => uint)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint => uint) private _ownedTokensIndex;\r\n\r\n    // The current index of the token\r\n    uint currentIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(IERC165, ERC721)\r\n    returns (bool)\r\n    {\r\n        return\r\n        interfaceId == type(IERC721Enumerable).interfaceId ||\r\n        super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint index)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n    {\r\n        require(\r\n            index < ERC721.balanceOf(owner),\r\n            \"ERC721Enumerable: owner index out of bounds\"\r\n        );\r\n        return _ownedTokens[owner][uint(index)];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint) {\r\n        return currentIndex;\r\n    }\r\n\r\n    function tokenByIndex(uint index)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n    {\r\n        require(\r\n            index < currentIndex,\r\n            \"ERC721Enumerable: global index out of bounds\"\r\n        );\r\n        return index;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) internal virtual override {\r\n        require (to != address(0), \"Token not burnable\");\r\n\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            currentIndex++;\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n\r\n        if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint tokenId) private {\r\n        uint length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint tokenId)\r\n    private\r\n    {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint lastTokenIndex = uint(ERC721.balanceOf(from) - 1);\r\n        uint tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n}\r\n\r\nlibrary Convertible {\r\n    function convertAddressToString(address sender) internal pure returns (string memory) {\r\n        return toString(abi.encodePacked(sender));\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function toString(bytes memory data) public pure returns(string memory) {\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint i = 0; i < data.length; i++) {\r\n            str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];\r\n            str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n    \r\n    function sliceString(uint256 begin, uint256 end, string memory text) internal pure returns (string memory) {\r\n        bytes memory a = new bytes(end-begin+1);\r\n        for(uint i=0;i<=end-begin;i++){\r\n            a[i] = bytes(text)[i+begin-1];\r\n        }\r\n        return string(a);    \r\n    }\r\n    \r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n    \r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    \r\n    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    /// @dev Converts a numeric string to it's unsigned integer representation.\r\n    /// @param v The string to be converted.\r\n    function bytesToUInt(bytes32 v) pure internal returns (uint256 ret) {\r\n        if (v == 0x0) {\r\n            revert();\r\n        }\r\n\r\n        uint digit;\r\n\r\n        for (uint i = 0; i < 32; i++) {\r\n            digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n            if (digit == 0) {\r\n                break;\r\n            }\r\n            else if (digit < 48 || digit > 57) {\r\n               revert();\r\n            }\r\n            ret *= 10;\r\n            ret += (digit - 48);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Coin98 Staking Contract\r\n * The main Token used for staking is Coin98 (C98)\r\n * Each staking in the Contract will have an NFT ID with a prefix + 12 random numbers\r\n * The Default locked time after staking is based on locked_time (E.g 15 days)\r\n * The Default floating_rate is the profit when a user does not meet the condition in any package and wants to withdraw soon\r\n * Example 9898 1234 5678 9101\r\n * Naming will be free at the first time when first inititiating a staking. After that, will charge a naming_fee will be charged each time the staking name is changed\r\n */\r\ncontract Coin98Stake is ERC721Enumerable, Ownable {\r\n    using SafeERC20 for IBEP20;\r\n    using SafeMath for uint256;\r\n    using Counters for Counters.Counter;\r\n    \r\n    uint256 private Percent = 10000;\r\n    uint256 yearTimestamp = 31104000;\r\n    \r\n    string public baseTokenURI;\r\n    Counters.Counter private _tokenIdTracker;\r\n\r\n    // Meta information\r\n    struct MetaInfo {\r\n        uint256 total_staked; // Total Meta staked amount\r\n        uint256 max_staked; // Max Meta staked amount\r\n        uint256 naming_fee; // The Fee charged when changing the Staking name\r\n        uint256 id_fee; // The Fee charged when user wants to customize NFT ID\r\n        uint256 locked_time; // The Lock time after tokens are deposited\r\n        uint256 pending_time; // The Pending time after over staked time\r\n        uint256 floating_rate; // Floating rate\r\n        string name_prefix; // Prefix first for Name\r\n        string nft_prefix; // Prefix first for NFT ID\r\n    }\r\n    \r\n    // Package information\r\n    struct PackageInfo {\r\n        address meta; // Meta token address\r\n        uint256 min; // Min package amount\r\n        uint256 max; // Max package amount\r\n        uint256 time; // Package time\r\n        uint256 rate; // Package rate\r\n    }\r\n    \r\n    // Stake information\r\n    struct StakeInfo {\r\n        bool pending_flag; // Flag for checking pending_time\r\n        bool flag; // Flag for check staked status\r\n        string name; // Staking name\r\n        uint256 amount; // Staking amount\r\n        uint256 time; // Staking time\r\n        string packageID; // Package ID\r\n        \r\n        bool isCustomID; // Flag for checking the custom ID\r\n        address meta; // Meta token address\r\n        uint256 package_time; // Package time\r\n        uint256 pending_time; // Pending time\r\n        uint256 rate; // Package rate\r\n\r\n        // Saved Informations after unstaked        \r\n        uint256 unstaked_time; // Unstaked Time\r\n        uint256 claim_pending_time; // Claim Pending Time\r\n        uint256 earn_staked; // Earn Staked\r\n\r\n        // Read Informations\r\n        uint256 id; // NFT ID\r\n        uint256 est_staked; // Estimated Staked\r\n    }\r\n\r\n   // Map the meta address for each Meta information\r\n    mapping(address => MetaInfo) public MetaInfos;\r\n    // Map the package id for each information\r\n    mapping(string => PackageInfo) public PackageInfos;\r\n    // Map the stakeId for each information\r\n    mapping(uint256 => StakeInfo) private StakeInfos;\r\n    \r\n    // emit event when a user starts staking\r\n    event _stake(uint256 id,bool isCustomID);\r\n    // emit event when a user renames an NFT\r\n    event _renaming(uint256 id,string name);\r\n    // emit event when a user unstakes\r\n    event _unstake(uint256 id,uint256 amount, uint256 time);\r\n    // emit event when a user claim pending\r\n    event _claim(uint256 id,uint256 amount, uint256 time);\r\n\r\n    constructor(string memory baseURI) ERC721(\"Coin98 Staking Certificate\", \"C98SC\"){\r\n        setBaseURI(baseURI);\r\n    }\r\n\r\n    /**\r\n     * @dev Register a new meta for the package register in\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `token` the meta staked token.\r\n     * - `max` the maximum staked amount in meta.\r\n     * - `naming_fee` the fee charged when changing an NFT's name.\r\n     * - `id_fee` the fee charged when customizing an NFT's ID.\r\n     * - `lockedTime` the lock time after depositing tokens\r\n     * - `pending_time` the pending time after over staked time\r\n     * - `floatingRate` the default rate when a user does not meet the package rate condition.\r\n     * - `name_prefix` the prefix first for name NFT\r\n     * - `nft_prefix` the prefix first for NFT ID\r\n     */\r\n    function registerMeta(\r\n        address _token,\r\n        uint256 _max_staked,\r\n        uint256 _naming_fee,\r\n        uint256 _id_fee,\r\n        uint256 _locked_time,\r\n        uint256 _pending_time,\r\n        uint256 _floating_rate,\r\n        string memory _name_prefix,\r\n        string memory _nft_prefix\r\n    )\r\n        public\r\n        onlyOwner()\r\n    {\r\n        uint256 nameSize = bytes(_name_prefix).length;\r\n        require(nameSize <= 5, \"C98Stake: Name prefix size error\");\r\n        uint256 nftPrefixSize = bytes(_nft_prefix).length;\r\n        require(nftPrefixSize == 4, \"C98Stake: NFT prefix size error\");\r\n\r\n        MetaInfo storage metaInfo = MetaInfos[_token];\r\n\r\n        metaInfo.floating_rate = _floating_rate;\r\n        metaInfo.max_staked = _max_staked;\r\n        metaInfo.naming_fee = _naming_fee;\r\n        metaInfo.id_fee = _id_fee;\r\n        metaInfo.pending_time = _pending_time;\r\n        metaInfo.locked_time = _locked_time;\r\n        metaInfo.name_prefix = _name_prefix;\r\n        metaInfo.nft_prefix = _nft_prefix;\r\n    }\r\n\r\n    function validMeta(address _token) internal view returns (bool isValid){\r\n        return MetaInfos[_token].max_staked > 0;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check validate package condition\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `package` must be existed.\r\n     * - `min` must be larger than zero and less than max.\r\n     * - `max` must be larger than zero and larger than min.\r\n     */\r\n    function validPackage(string memory _package) internal view returns (bool isValid){\r\n        PackageInfo memory pkInfo = PackageInfos[_package];\r\n        \r\n        return pkInfo.min > 0 && pkInfo.max > 0 && pkInfo.min < pkInfo.max;\r\n    }\r\n    \r\n    function validPackageCondition(uint256 _min, uint256 _max, uint256 _time, uint256 _rate, address _meta) internal view{\r\n        require(_min>0 && _max >0 && _min < _max , \"C98Stake: Wrong numeric format\");\r\n        MetaInfo memory metaInfo = MetaInfos[_meta];\r\n\r\n        require(_time > metaInfo.locked_time && _rate > metaInfo.floating_rate,\"C98Stake: Lower than minimum time & rate\");\r\n    }\r\n\r\n    /**\r\n     * @dev Register a new package for the user to stake in\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `package` must not be existed.\r\n     * - `meta` the meta staked token.\r\n     * - `min` must be larger than zero and less than max.\r\n     * - `max` must be larger than zero and larger than min.\r\n     * - `time` in staking the user needs to meet before can get `rate` staked.\r\n     * - `rate` profit if the user can meet the package time condition.\r\n     */\r\n    function register(\r\n        string memory _package,\r\n        address _meta,\r\n        uint256 _min,\r\n        uint256 _max,\r\n        uint256 _time,\r\n        uint256 _rate\r\n    )\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(!validPackage(_package), \"C98Stake: Package already existed\");\r\n        require(validMeta(_meta),\"C98Stake: Unregistered Meta\");\r\n        validPackageCondition(_min,_max,_time,_rate,_meta);\r\n\r\n        PackageInfo storage pkInfo = PackageInfos[_package];\r\n\r\n        pkInfo.meta = _meta;\r\n        pkInfo.min = _min;\r\n        pkInfo.max = _max;\r\n        pkInfo.time = _time;\r\n        pkInfo.rate = _rate;\r\n    }\r\n    \r\n    /**\r\n     * @dev UnRegister existed package\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `package` must be existed.\r\n    */\r\n    function unRegister(\r\n        string memory _package\r\n    )\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(validPackage(_package), \"C98Stake: Package not found\");\r\n        delete PackageInfos[_package];\r\n    }\r\n\r\n    /**\r\n     * @dev Configure variable for existed package\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `package` must be existed.\r\n     * - `min` must be larger than zero and less than max.\r\n     * - `max` must be larger than zero and larger than min.\r\n     * - `time` in staking a user needs to meet before can get `rate` staked.\r\n     * - `rate` profit if the user can meet the package time condition.\r\n     */\r\n    function configurePackage(\r\n        string memory _package,\r\n        uint256 _min,\r\n        uint256 _max,\r\n        uint256 _time,\r\n        uint256 _rate\r\n    )\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(validPackage(_package), \"C98Stake: Package not found\");\r\n        PackageInfo storage pkInfo = PackageInfos[_package];\r\n\r\n        validPackageCondition(_min,_max,_time,_rate,pkInfo.meta);\r\n\r\n        pkInfo.min = _min;\r\n        pkInfo.max = _max;\r\n        pkInfo.time = _time;\r\n        pkInfo.rate = _rate;\r\n    }\r\n    \r\n    /**\r\n     * @dev Return `profit` staked by NFT ID\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must be existed.\r\n     * -  if the `timeStaked` does not meet the`locked_time` condition or the user has already unstaked, the result will return to zero.\r\n     * -  if the `timeStaked` does not meet the package time condition, the rate will be based on the `floating_rate`\r\n     */\r\n    function getStakedByTokenId(uint256 _tokenId) private view returns (uint256) {\r\n        StakeInfo memory stakeInfo = StakeInfos[_tokenId];\r\n        MetaInfo memory metaInfo = MetaInfos[stakeInfo.meta];\r\n\r\n        uint256 current = block.timestamp;\r\n        uint256 timeStaked = current - stakeInfo.time;\r\n        \r\n        if(!stakeInfo.flag || (timeStaked < metaInfo.locked_time)){\r\n            return 0;\r\n        } else {\r\n            uint256 calRate = timeStaked < stakeInfo.package_time ? metaInfo.floating_rate: stakeInfo.rate;\r\n            \r\n            uint256 amountProfitBySeconds = stakeInfo.amount.div(Percent).div(yearTimestamp).mul(calRate);\r\n            return amountProfitBySeconds.mul(timeStaked);\r\n        }\r\n    }\r\n\r\n    function validateCustomName(string memory name, string memory name_prefix, address user) private pure returns (bool){\r\n        uint256 nameSize = bytes(name).length;\r\n        uint256 prefixNameSize = bytes(name_prefix).length;\r\n        if(prefixNameSize == 0){\r\n            return Convertible.compareStrings(Convertible.sliceString(1,10, Convertible.convertAddressToString(user)), name);\r\n        }\r\n        return Convertible.compareStrings(Convertible.sliceString(1,prefixNameSize,name), name_prefix) && nameSize == 10;\r\n    }\r\n    \r\n    /**\r\n     * @dev Staking an `amount` in the registered package and returning an NFT to msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `amount` must be larger than zero.\r\n     * - `name` charge `naming_fee` when user wants to customize the name ( if following C98 Rule Ref ID not charging `naming_fee` ).\r\n     * - `package` registered package ID\r\n     * - `customID` The custom NFT ID is optional for user and will be charged in `id_fee`. If input 0 the system will make a random ID.\r\n     * Emits a {_stake} event.\r\n     */\r\n    function stake(uint256 _amount, string memory _name, string memory _package, uint256 _customID) public {\r\n        require(validPackage(_package), \"C98Stake: Package not found\");\r\n        \r\n        PackageInfo memory pkInfo = PackageInfos[_package];\r\n        // Check the validity of the package min, max & the amount of transferFrom\r\n        require(_amount >= pkInfo.min && _amount < pkInfo.max , \"C98Stake: Wrong min max format\");\r\n        MetaInfo storage metaInfo = MetaInfos[pkInfo.meta];\r\n        IBEP20 metaToken = IBEP20(pkInfo.meta);\r\n\r\n        uint256 totalStakedFinal = metaInfo.total_staked.add(_amount);\r\n        require(totalStakedFinal <= metaInfo.max_staked, \"C98Stake: Maximum number of staked\");\r\n    \r\n        bool _isCustomID = _customID != 0;\r\n        //Validate the custom name if basing on C98 Ref ID Rule, it will be free of change\r\n        uint256 nameSize = bytes(_name).length;\r\n\r\n        bool _isNotCustomname = validateCustomName(_name, metaInfo.name_prefix, msg.sender);\r\n        \r\n        if(!_isNotCustomname){\r\n            require(nameSize <= 20 && nameSize > 0,\"C98Stake: Not meet name condition\");\r\n        }\r\n        \r\n        uint256 payAmount =  _amount.add(_isCustomID ? metaInfo.id_fee : 0 ).add(_isNotCustomname ? 0 : metaInfo.naming_fee);\r\n        metaToken.safeTransferFrom(msg.sender, address(this), payAmount);\r\n        \r\n        string memory randomID;\r\n        \r\n        if (_isCustomID){\r\n            randomID = Convertible.uint2str(_customID);\r\n        } else {\r\n            string memory randomConvert = Convertible.uint2str(uint256(keccak256(abi.encodePacked(totalToken().add(1),_amount,block.timestamp,metaInfo.nft_prefix))));\r\n            randomID = Convertible.sliceString(10,21,randomConvert);\r\n        }\r\n        \r\n        // Random string after prefix is fixed at 12\r\n        require(bytes(randomID).length == 12);\r\n        \r\n        // Token ID start with nft_prefix\r\n        uint256 nftPackageId = Convertible.bytesToUInt(Convertible.stringToBytes32(string(abi.encodePacked(metaInfo.nft_prefix,randomID))));\r\n        \r\n        require(!_exists(nftPackageId), \"ERC721: token already minted\");\r\n        \r\n        // Storage stake information\r\n        StakeInfo storage stakeInfo = StakeInfos[nftPackageId];\r\n        stakeInfo.flag = true;\r\n        stakeInfo.amount = _amount;\r\n        stakeInfo.time = block.timestamp;\r\n        stakeInfo.packageID = _package;\r\n        stakeInfo.meta = pkInfo.meta;\r\n        \r\n        stakeInfo.name = _name;\r\n        stakeInfo.isCustomID = _isCustomID;\r\n        \r\n        stakeInfo.pending_flag = false;\r\n        stakeInfo.pending_time = metaInfo.pending_time;\r\n        stakeInfo.package_time = pkInfo.time;\r\n        stakeInfo.rate = pkInfo.rate;\r\n        \r\n        metaInfo.total_staked = totalStakedFinal;\r\n        _mintAnElement(msg.sender, nftPackageId, _isCustomID);\r\n    }\r\n    \r\n    /**\r\n     * @dev Renaming the existed NFT and charging `naming_fee`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must be existed.\r\n     * - `name` must be existed.\r\n     * Emits a {_renaming} event.\r\n     */\r\n    function renaming (uint256 _tokenId,string memory _name) public {\r\n        StakeInfo storage stakeInfo = StakeInfos[_tokenId];\r\n        MetaInfo memory metaInfo = MetaInfos[stakeInfo.meta];\r\n        IBEP20 metaToken = IBEP20(stakeInfo.meta);\r\n\r\n        require(ownerOf(_tokenId) == msg.sender, \"C98Stake: Not meet owner condition\");\r\n        metaToken.safeTransferFrom(msg.sender, address(this), metaInfo.naming_fee);\r\n        uint256 nameSize = bytes(_name).length;\r\n        require(nameSize <= 20 && nameSize > 0,\"C98Stake: Not meet name condition\");\r\n        \r\n        stakeInfo.name = _name;\r\n        emit _renaming(_tokenId, _name);\r\n    }\r\n    \r\n    /**\r\n     * @dev Unstake the `amount` in NFT and get the profit following the previous conditions.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must be existed.\r\n     * Emits a {_unstake} event.\r\n     */\r\n    function unstake(uint256 _tokenId) public {\r\n        StakeInfo storage stakeInfo = StakeInfos[_tokenId];\r\n        MetaInfo storage metaInfo = MetaInfos[stakeInfo.meta];\r\n\r\n        uint256 _profit = getStakedByTokenId(_tokenId);\r\n        require(_profit > 0, \"C98Stake: Not meet unstake condition\");\r\n        require(ownerOf(_tokenId) == msg.sender, \"C98Stake: Not meet owner condition\");\r\n        \r\n        IBEP20 metaToken = IBEP20(stakeInfo.meta);\r\n         \r\n        uint256 _profitTotal = _profit.add(stakeInfo.amount);\r\n          \r\n        require(metaToken.balanceOf(address(this)) >= _profitTotal);\r\n        stakeInfo.flag = false;\r\n        metaInfo.total_staked = metaInfo.total_staked.sub(stakeInfo.amount);\r\n        \r\n        if(stakeInfo.pending_time == 0){\r\n          metaToken.safeTransfer(msg.sender, _profitTotal);\r\n        } else {\r\n            stakeInfo.pending_flag = true;\r\n        }\r\n        \r\n        stakeInfo.unstaked_time = block.timestamp;\r\n        stakeInfo.earn_staked  = _profitTotal;\r\n        \r\n        emit _unstake(_tokenId, _profitTotal, stakeInfo.time);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim Pending the `amount` in NFT and get the earn_staked after unstake and wait for pending_time.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must be existed and already unstaked.\r\n     * Emits a {_claim} event.\r\n     */\r\n    function claimPending(uint256 _tokenId) public {\r\n        StakeInfo storage stakeInfo = StakeInfos[_tokenId];\r\n\r\n        require(stakeInfo.pending_flag, \"C98Stake: Not meet claim pending condition\");\r\n        require(ownerOf(_tokenId) == msg.sender, \"C98Stake: Not meet owner condition\");\r\n\r\n        IBEP20 metaToken = IBEP20(stakeInfo.meta);\r\n\r\n        require(metaToken.balanceOf(address(this)) >= stakeInfo.earn_staked,\"C98Stake: Not enough pool\");\r\n\r\n        stakeInfo.pending_flag = false;\r\n        metaToken.safeTransfer(msg.sender, stakeInfo.earn_staked);\r\n        \r\n        stakeInfo.claim_pending_time = block.timestamp;\r\n        \r\n        emit _claim(_tokenId, stakeInfo.earn_staked, stakeInfo.time);\r\n    }\r\n    \r\n    function _mintAnElement(address _to, uint256 _tokenId, bool _isCustomID) private {\r\n        _tokenIdTracker.increment();\r\n        _safeMint(_to, _tokenId);\r\n        emit _stake(_tokenId, _isCustomID);\r\n    }\r\n    \r\n    /**\r\n     * @dev The Owner withdraws any tokens for emergency case\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `amount` must be larger than zero.\r\n     */\r\n    function withdraw(uint256 _amount, IBEP20 _token) public onlyOwner {\r\n        require(_amount > 0);\r\n        require(_token.balanceOf(address(this)) >= _amount);\r\n        _token.safeTransfer(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get info Staked by NFT ID\r\n     */\r\n    function getStakedInfo(uint256 tokenId) external view returns (StakeInfo memory) {\r\n        StakeInfo memory stakeInfo = StakeInfos[tokenId];\r\n        stakeInfo.est_staked = getStakedByTokenId(tokenId);\r\n        stakeInfo.id = tokenId;\r\n        return stakeInfo;\r\n    }\r\n\r\n    /**\r\n     * @dev Get list NFT staked by address\r\n     */\r\n    function walletOfOwner(address _owner) external view returns (StakeInfo[] memory) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        StakeInfo[]memory addressStaked = new StakeInfo[](tokenCount);\r\n        \r\n        for (uint256 i = 0; i < tokenCount; i++) {\r\n            uint256 tokenIndex = tokenOfOwnerByIndex(_owner, i);\r\n            StakeInfo memory stakeInfoIndex = StakeInfos[tokenIndex];\r\n            stakeInfoIndex.est_staked = getStakedByTokenId(tokenIndex);\r\n            stakeInfoIndex.id = tokenIndex;\r\n            addressStaked[i] = stakeInfoIndex;\r\n        }\r\n    \r\n        return addressStaked;\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseTokenURI;\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI) public onlyOwner {\r\n        baseTokenURI = baseURI;\r\n    }\r\n\r\n    function totalToken() public view returns (uint256) {\r\n        return _tokenIdTracker.current();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"_claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"_renaming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCustomID\",\"type\":\"bool\"}],\"name\":\"_stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"_unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MetaInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total_staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"naming_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floating_rate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nft_prefix\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"PackageInfos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"meta\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_package\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"configurePackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"pending_flag\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"packageID\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isCustomID\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"meta\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"package_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstaked_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claim_pending_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earn_staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"est_staked\",\"type\":\"uint256\"}],\"internalType\":\"struct Coin98Stake.StakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_package\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_meta\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_max_staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_naming_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_locked_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pending_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floating_rate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name_prefix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_nft_prefix\",\"type\":\"string\"}],\"name\":\"registerMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"renaming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_package\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_customID\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_package\",\"type\":\"string\"}],\"name\":\"unRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"pending_flag\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"packageID\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isCustomID\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"meta\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"package_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstaked_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claim_pending_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earn_staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"est_staked\",\"type\":\"uint256\"}],\"internalType\":\"struct Coin98Stake.StakeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Coin98Stake", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002268747470733a2f2f66696c652e636f696e39382e636f6d2f7374616b652f6273632f000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ca05c3bde03b925bc04535ed54850ae55a9794372ac46626a7998f29f6001e71"}