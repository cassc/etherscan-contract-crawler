{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n/*\r\nIron Dogecoin is the new heroic version of Dogecoin. \r\nIt will kill zeros with his superpower! WOOF!\r\n\r\n5% BuybackFee\r\n5% Marketing and Development\r\n\r\nIronDogecoin: https://t.me/IronDogecoin\r\nIrondoge.org\r\nhttps://twitter.com/irondogee?s=11\r\n*/\r\n\r\n\r\npragma solidity ^0.8.3;\r\n\r\n\r\ninterface IBEP20 {\t\r\n    /**\t\r\n     * @dev Returns the amount of tokens in existence.\t\r\n     */\t\r\n    function totalSupply() external view returns (uint256);\t\r\n    /**\t\r\n     * @dev Returns the amount of tokens owned by `account`.\t\r\n     */\t\r\n    function balanceOf(address account) external view returns (uint256);\t\r\n    /**\t\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * Emits a {Transfer} event.\t\r\n     */\t\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\t\r\n    /**\t\r\n     * @dev Returns the remaining number of tokens that `spender` will be\t\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\t\r\n     * zero by default.\t\r\n     *\t\r\n     * This value changes when {approve} or {transferFrom} are called.\t\r\n     */\t\r\n    function allowance(address owner, address spender) external view returns (uint256);\t\r\n    /**\t\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\t\r\n     * that someone may use both the old and the new allowance by unfortunate\t\r\n     * transaction ordering. One possible solution to mitigate this race\t\r\n     * condition is to first reduce the spender's allowance to 0 and set the\t\r\n     * desired value afterwards:\t\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\t\r\n     *\t\r\n     * Emits an {Approval} event.\t\r\n     */\t\r\n    function approve(address spender, uint256 amount) external returns (bool);\t\r\n    /**\t\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\t\r\n     * allowance mechanism. `amount` is then deducted from the caller's\t\r\n     * allowance.\t\r\n     *\t\r\n     * Returns a boolean value indicating whether the operation succeeded.\t\r\n     *\t\r\n     * Emits a {Transfer} event.\t\r\n     */\t\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\t\r\n    /**\t\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\t\r\n     * another (`to`).\t\r\n     *\t\r\n     * Note that `value` may be zero.\t\r\n     */\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\r\n    /**\t\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\t\r\n     * a call to {approve}. `value` is the new allowance.\t\r\n     */\t\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\t\r\n}\t\r\n// CAUTION\t\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\t\r\n// because it relies on the compiler's built in overflow checks.\t\r\n/**\t\r\n * @dev Wrappers over Solidity's arithmetic operations.\t\r\n *\t\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\t\r\n * now has built in overflow checking.\t\r\n */\t\r\nlibrary SafeMath {\t\r\n    /**\t\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\t\r\n     *\t\r\n     * _Available since v3.4._\t\r\n     */\t\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\t\r\n        unchecked {\t\r\n            uint256 c = a + b;\t\r\n            if (c < a) return (false, 0);\t\r\n            return (true, c);\t\r\n        }\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\t\r\n     *\t\r\n     * _Available since v3.4._\t\r\n     */\t\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\t\r\n        unchecked {\t\r\n            if (b > a) return (false, 0);\t\r\n            return (true, a - b);\t\r\n        }\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\t\r\n     *\t\r\n     * _Available since v3.4._\t\r\n     */\t\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\t\r\n        unchecked {\t\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\t\r\n            // benefit is lost if 'b' is also tested.\t\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\t\r\n            if (a == 0) return (true, 0);\t\r\n            uint256 c = a * b;\t\r\n            if (c / a != b) return (false, 0);\t\r\n            return (true, c);\t\r\n        }\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\t\r\n     *\t\r\n     * _Available since v3.4._\t\r\n     */\t\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\t\r\n        unchecked {\t\r\n            if (b == 0) return (false, 0);\t\r\n            return (true, a / b);\t\r\n        }\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\t\r\n     *\t\r\n     * _Available since v3.4._\t\r\n     */\t\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\t\r\n        unchecked {\t\r\n            if (b == 0) return (false, 0);\t\r\n            return (true, a % b);\t\r\n        }\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the addition of two unsigned integers, reverting on\t\r\n     * overflow.\t\r\n     *\t\r\n     * Counterpart to Solidity's `+` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Addition cannot overflow.\t\r\n     */\t\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return a + b;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\t\r\n     * overflow (when the result is negative).\t\r\n     *\t\r\n     * Counterpart to Solidity's `-` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Subtraction cannot overflow.\t\r\n     */\t\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return a - b;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\t\r\n     * overflow.\t\r\n     *\t\r\n     * Counterpart to Solidity's `*` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Multiplication cannot overflow.\t\r\n     */\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return a * b;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\t\r\n     * division by zero. The result is rounded towards zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `/` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return a / b;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\r\n     * reverting when dividing by zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\t\r\n        return a % b;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\t\r\n     * overflow (when the result is negative).\t\r\n     *\t\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\t\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\t\r\n     *\t\r\n     * Counterpart to Solidity's `-` operator.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - Subtraction cannot overflow.\t\r\n     */\t\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        unchecked {\t\r\n            require(b <= a, errorMessage);\t\r\n            return a - b;\t\r\n        }\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\t\r\n     * division by zero. The result is rounded towards zero.\t\r\n     *\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\t\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\t\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        unchecked {\t\r\n            require(b > 0, errorMessage);\t\r\n            return a / b;\t\r\n        }\t\r\n    }\t\r\n    /**\t\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\t\r\n     * reverting with custom message when dividing by zero.\t\r\n     *\t\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\t\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\t\r\n     *\t\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\t\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\t\r\n     * invalid opcode to revert (consuming all remaining gas).\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - The divisor cannot be zero.\t\r\n     */\t\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\t\r\n        unchecked {\t\r\n            require(b > 0, errorMessage);\t\r\n            return a % b;\t\r\n        }\t\r\n    }\t\r\n}\t\r\n/*\t\r\n * @dev Provides information about the current execution context, including the\t\r\n * sender of the transaction and its data. While these are generally available\t\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\t\r\n * manner, since when dealing with meta-transactions the account sending and\t\r\n * paying for execution may not be the actual sender (as far as an application\t\r\n * is concerned).\t\r\n *\t\r\n * This contract is only required for intermediate, library-like contracts.\t\r\n */\t\r\nabstract contract Context {\t\r\n    function _msgSender() internal view virtual returns (address) {\t\r\n        return msg.sender;\t\r\n    }\t\r\n    \r\n    function _msgData() internal view virtual returns (bytes calldata) {\t\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\t\r\n        return msg.data;\t\r\n    }\t\r\n}\t\r\n/**\t\r\n * @dev Collection of functions related to the address type\t\r\n */\t\r\nlibrary Address {\t\r\n    /**\t\r\n     * @dev Returns true if `account` is a contract.\t\r\n     *\t\r\n     * [IMPORTANT]\t\r\n     * ====\t\r\n     * It is unsafe to assume that an address for which this function returns\t\r\n     * false is an externally-owned account (EOA) and not a contract.\t\r\n     *\t\r\n     * Among others, `isContract` will return false for the following\t\r\n     * types of addresses:\t\r\n     *\t\r\n     *  - an externally-owned account\t\r\n     *  - a contract in construction\t\r\n     *  - an address where a contract will be created\t\r\n     *  - an address where a contract lived, but was destroyed\t\r\n     * ====\t\r\n     */\t\r\n    function isContract(address account) internal view returns (bool) {\t\r\n        // This method relies on extcodesize, which returns 0 for contracts in\t\r\n        // construction, since the code is only stored at the end of the\t\r\n        // constructor execution.\t\r\n        uint256 size;\t\r\n        // solhint-disable-next-line no-inline-assembly\t\r\n        assembly { size := extcodesize(account) }\t\r\n        return size > 0;\t\r\n    }\t\r\n    /**\t\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\t\r\n     * `recipient`, forwarding all available gas and reverting on errors.\t\r\n     *\t\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\t\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\t\r\n     * imposed by `transfer`, making them unable to receive funds via\t\r\n     * `transfer`. {sendValue} removes this limitation.\t\r\n     *\t\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\t\r\n     *\t\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\t\r\n     * taken to not create reentrancy vulnerabilities. Consider using\t\r\n     * {ReentrancyGuard} or the\t\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\t\r\n     */\t\r\n    function sendValue(address payable recipient, uint256 amount) internal {\t\r\n        require(address(this).balance >= amount, \"Insufficient balance\");\t\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\t\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\t\r\n        require(success, \"Unable to send value, recipient may have reverted\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Performs a Solidity function call using a low level `call`. A\t\r\n     * plain`call` is an unsafe replacement for a function call: use this\t\r\n     * function instead.\t\r\n     *\t\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\t\r\n     * function (like regular Solidity function calls).\t\r\n     *\t\r\n     * Returns the raw returned data. To convert to the expected return value,\t\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - `target` must be a contract.\t\r\n     * - calling `target` with `data` must not revert.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\t\r\n      return functionCall(target, data, \"Low-level call failed\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\t\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\t\r\n        return functionCallWithValue(target, data, 0, errorMessage);\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\r\n     * but also transferring `value` wei to `target`.\t\r\n     *\t\r\n     * Requirements:\t\r\n     *\t\r\n     * - the calling contract must have an BNB balance of at least `value`.\t\r\n     * - the called Solidity function must be `payable`.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\t\r\n        return functionCallWithValue(target, data, value, \"Low-level call with value failed\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\t\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\t\r\n     *\t\r\n     * _Available since v3.1._\t\r\n     */\t\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\t\r\n        require(address(this).balance >= value, \"Insufficient balance for call\");\t\r\n        require(isContract(target), \"Call to non-contract\");\t\r\n        // solhint-disable-next-line avoid-low-level-calls\t\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\t\r\n        return _verifyCallResult(success, returndata, errorMessage);\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\r\n     * but performing a static call.\t\r\n     *\t\r\n     * _Available since v3.3._\t\r\n     */\t\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\t\r\n        return functionStaticCall(target, data, \"Low-level static call failed\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\t\r\n     * but performing a static call.\t\r\n     *\t\r\n     * _Available since v3.3._\t\r\n     */\t\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\t\r\n        require(isContract(target), \"Static call to non-contract\");\t\r\n        // solhint-disable-next-line avoid-low-level-calls\t\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\t\r\n        return _verifyCallResult(success, returndata, errorMessage);\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\t\r\n     * but performing a delegate call.\t\r\n     *\t\r\n     * _Available since v3.4._\t\r\n     */\t\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\t\r\n        return functionDelegateCall(target, data, \"Low-level delegate call failed\");\t\r\n    }\t\r\n    /**\t\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\t\r\n     * but performing a delegate call.\t\r\n     *\t\r\n     * _Available since v3.4._\t\r\n     */\t\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\t\r\n        require(isContract(target), \"Delegate call to non-contract\");\t\r\n        // solhint-disable-next-line avoid-low-level-calls\t\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\t\r\n        return _verifyCallResult(success, returndata, errorMessage);\t\r\n    }\t\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\t\r\n        if (success) {\t\r\n            return returndata;\t\r\n        } else {\t\r\n            // Look for revert reason and bubble it up if present\t\r\n            if (returndata.length > 0) {\t\r\n                // The easiest way to bubble the revert reason is using memory via assembly\t\r\n                // solhint-disable-next-line no-inline-assembly\t\r\n                assembly {\t\r\n                    let returndata_size := mload(returndata)\t\r\n                    revert(add(32, returndata), returndata_size)\t\r\n                }\t\r\n            } else {\t\r\n                revert(errorMessage);\t\r\n            }\t\r\n        }\t\r\n    }\t\r\n}\t\r\n/**\t\r\n * @dev Contract module which provides a basic access control mechanism, where\t\r\n * there is an account (an owner) that can be granted exclusive access to\t\r\n * specific functions.\t\r\n *\t\r\n * By default, the owner account will be the one that deploys the contract. This\t\r\n * can later be changed with {transferOwnership}.\t\r\n *\t\r\n * This module is used through inheritance. It will make available the modifier\t\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\t\r\n * the owner.\t\r\n */\t\r\nabstract contract Ownable is Context {\t\r\n    address private _owner;\t\r\n    address private _previousOwner;\t\t\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\t\r\n    /**\t\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\t\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    /**\r\n     * Function modifier to require caller to be authorized\r\n     */\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n    \r\n    /**\r\n     * Authorize address. Owner only\r\n     */\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Remove address' authorization. Owner only\r\n     */\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * @dev Returns the address of the previous owner.\r\n     */\r\n    function previousowner() internal view virtual returns (address) {\r\n        return _previousOwner;\r\n    }\r\n    \r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _previousOwner = _owner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Create(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function create(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract IronDogecoin is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isSniper;\r\n    mapping (address => uint256) private _transactionBlockLog;\r\n\r\n\r\n\r\n    uint256 public snipersCaught = 0;\r\n    bool public sniperProtection = true;\r\n    bool public gasLimitActive = true;\r\n    uint256 public swapAndLiquifyCount = 0;\r\n    uint256 public launchedAt = 0;\r\n    uint256 public gasPriceLimit;\r\n    bool public sameBlockActive = true;\r\n    mapping (address => uint256) private lastTrade;\r\n\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    \r\n    uint256 private startingSupply = 1000000000;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000 * 10 ** 18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tmarketingFeeTotal;\r\n    \r\n    address constant private _routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address payable private _marketingWallet = payable(0xD59dD66846A556c5E94A058c5F119C800D43c5ed);\r\n    address payable private _buybackWallet = payable(0x5451998B2eaF9c7Bb3F36aBd6DE657100aECd38B);\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n    string private _name = \"Iron Dogecoin\";\r\n    string private _symbol = \"IRONDOGE\";\r\n    uint8 private _decimals = 18;\r\n    \r\n    uint256 public _marketingFee = 5;\r\n    uint256 private _previousmarketingFee = _marketingFee;\r\n    uint256 public maxMarketingFee = 5;\r\n\r\n    uint256 public _buybackFee = 5;\r\n    uint256 private _previousbuybackFee = _buybackFee;\r\n    uint256 public maxBuybackFee = 5;\r\n\r\n    uint256 public _liquidityFee = 0;\r\n    uint256 private _previousLiquidityFee = _liquidityFee;\r\n    uint256 public maxLiquidityFee = 2;\r\n\r\n    uint256 public _totalFee = 10;\r\n\r\n    uint256 private maxWalletPercent = 2;\r\n    //uint256 private maxWalletPercent = 1;\r\n    uint256 private maxWalletDivisor = 100;\r\n    uint256 private _maxWalletSize = (_tTotal * maxWalletPercent) / maxWalletDivisor;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapEnabled = true;\r\n    bool public hasLiquidityBeenAdded = false;\r\n    bool public tradingEnabled = false;\r\n    \r\n    uint256 public _maxTxAmount = 20000000 * 10 ** 18;\r\n    uint256 private minTokensBeforeSwap = 10000 * 10 ** 18;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        authorizations[owner()] = true;\r\n        // real router\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n        \r\n        //exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n        \r\n    }\r\n    \r\n    //New Pancakeswap router version?\r\n    //No problem, just change it!\r\n    function setRouterAddress(address newRouter) public onlyOwner() {\r\n       //Thank you FreezyEx\r\n        IUniswapV2Router02 _newuniswapV2Router = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_newuniswapV2Router.factory()).createPair(address(this), _newuniswapV2Router.WETH());\r\n        uniswapV2Router = _newuniswapV2Router;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFrom(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function totalBNBCollected() public view returns (uint256) {\r\n        return _tmarketingFeeTotal;\r\n    }\r\n    \r\n    function minTokensBeforeSwapAmount() public view returns (uint256) {\r\n        return minTokensBeforeSwap;\r\n    }\r\n    \r\n    function tokenFrom(uint256 rAmount) private view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total \");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n    \r\n    function setFees( uint256 buybackFee, uint256 marketingFee, uint256 liquidityFee) external onlyOwner {\r\n      require(  liquidityFee <= maxLiquidityFee\r\n                && marketingFee <= maxMarketingFee && buybackFee <= maxBuybackFee);  \r\n      _buybackFee = buybackFee;\r\n      _marketingFee = marketingFee;\r\n      _liquidityFee = liquidityFee;\r\n     _totalFee = _liquidityFee.add(_buybackFee).add(_marketingFee);\r\n\r\n    }  \r\n   \r\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\r\n    uint256 check = (_tTotal * percent) / divisor;\r\n    require(check >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\r\n       _maxTxAmount = check;\r\n    }\r\n    \r\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\r\n        uint256 check = (_tTotal * percent) / divisor;\r\n        require(check >= (_tTotal / 1000), \"Max Wallet amt must be above 0.1% of total supply.\");\r\n        _maxWalletSize = check;\r\n    }\r\n    \r\n    function setbuybackWallet(address payable buybackWallet) external onlyOwner {\r\n        _buybackWallet = payable(buybackWallet);\r\n    }\r\n    \r\n    function setMarketingWallet(address payable marketingWallet) external onlyOwner {\r\n        _marketingWallet = payable(marketingWallet);\r\n    }\r\n    \r\n    function setminTokensBeforeSwap(uint256 _minTokensBeforeSwap) external onlyOwner() {\r\n        minTokensBeforeSwap = _minTokensBeforeSwap;\r\n    }\r\n    \r\n    function setSwapContractEnabled(bool _enabled) public onlyOwner {\r\n        swapEnabled = _enabled;\r\n        emit SwapEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n    \r\n    function TransferTomarketingWallet(uint256 amount) private {\r\n        _marketingWallet.transfer(amount);\r\n    }\r\n    \r\n    function TransferTobuybackWallet(uint256 amount) private {\r\n        _buybackWallet.transfer(amount);\r\n    }\r\n\r\n     //to recieve BNB from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\t\r\n        (uint256 tTransferAmount, uint256 tLiquidity) = _getTValues(tAmount);\t\r\n        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(tAmount, tLiquidity, _getRate());\t\r\n        return (rAmount, rTransferAmount, tTransferAmount, tLiquidity);\t\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\t\r\n        uint256 tLiquidity = calculatemarketingFee(tAmount);\t\r\n        uint256 tTransferAmount = tAmount.sub(tLiquidity);\t\r\n        return (tTransferAmount, tLiquidity);\t\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256) {\t\r\n        uint256 rAmount = tAmount.mul(currentRate);\t\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\t\r\n        uint256 rTransferAmount = rAmount.sub(rLiquidity);\r\n        return (rAmount, rTransferAmount);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\r\n    function calculatemarketingFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_marketingFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateBuybackFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_buybackFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function getTotalFee() public view returns (uint256) {\r\n        return _totalFee;\r\n    }\r\n    \r\n    function setmarketingWallet(address payable marketingWallet) public onlyOwner {\r\n        _marketingWallet = marketingWallet;\r\n    }\r\n    \r\n    function removeAllFee() public {\r\n        if(_liquidityFee == 0 && _marketingFee == 0 && _buybackFee == 0 ) return;\r\n       \r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousmarketingFee = _marketingFee;\r\n        _previousbuybackFee = _buybackFee;\r\n\r\n        _liquidityFee = 0;\r\n        _buybackFee = 0;\r\n        _marketingFee = 0;\r\n        _totalFee = _liquidityFee.add(_buybackFee).add(_marketingFee);\r\n    }\r\n\r\n\r\n    function restoreAllFee() public {\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _marketingFee = _previousmarketingFee;\r\n        _buybackFee = _previousbuybackFee;\r\n        _totalFee = _liquidityFee.add(_buybackFee).add(_marketingFee);\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if( from != owner() && to != owner() && to != address(0) && from != address(this) && to != address(this)) {\r\n           require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n           if(isExcludedFromFee(from))\r\n           require(tradingEnabled, 'Trading is currently disabled');\r\n         \r\n         if( to != uniswapV2Pair && to != _routerAddress) {\r\n           require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n          }\r\n        } \r\n        // is the token balance of this contract address over the min number of\r\n        // tokens that we need to initiate a swap + liquidity lock?\r\n        // also, don't get caught in a circular liquidity event.\r\n        // also, don't swap & liquify if sender is uniswap pair.\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapEnabled\r\n        ) {\r\n            contractTokenBalance = minTokensBeforeSwap;\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n        \r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        \r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        // swap tokens for BNB\r\n\r\n        uint256 toLiquify = contractTokenBalance.mul(_liquidityFee).div(_totalFee).div(2);\r\n        uint256 toSwapForEth = contractTokenBalance - toLiquify;\r\n        uint256 balanceBefore = address(this).balance;\r\n        swapTokensForEth(toSwapForEth); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n        _tmarketingFeeTotal = _tmarketingFeeTotal.add(address(this).balance);\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        uint256 totalBNBFee = _totalFee.sub(_liquidityFee.div(2));\r\n        uint256 amountBNBLiquidity = amountBNB.mul(_liquidityFee).div(totalBNBFee).div(2);\r\n        uint256 amountBNBMarketing = amountBNB.mul(_marketingFee).div(totalBNBFee);\r\n        uint256 amountBNBBuyback = amountBNB.mul(_buybackFee).div(totalBNBFee);\r\n\r\n        if (toLiquify > 0)\r\n         addLiquidity(toLiquify ,amountBNBLiquidity);\r\n        TransferTomarketingWallet(amountBNBMarketing);\r\n        TransferTobuybackWallet(amountBNBBuyback);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> wBNB\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function buyTokens(uint256 amount, address to) internal lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function triggerManualBuyback() external payable authorized lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = msg.sender;\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(sniperProtection) {\r\n          // if sender is a sniper address, reject the sell.\r\n          if(isSniper(sender)) {\r\n            revert('Sniper rejected.');\r\n          }\r\n    \r\n          // check if this is the liquidity adding tx to startup.\r\n          if(!hasLiquidityBeenAdded) {\r\n            _checkLiquidityAdd(sender, recipient);\r\n          } else {\r\n            if(\r\n              launchedAt > 0\r\n                && sender == uniswapV2Pair\r\n                && sender != owner()\r\n                && recipient != owner()\r\n                && _isExcludedFromFee[sender]\r\n            ) {\r\n              if(block.number - launchedAt < 3) {\r\n                _isSniper[recipient] = true;\r\n                snipersCaught++;\r\n              }\r\n            }\r\n            \r\n            if (_transactionBlockLog[recipient] == block.number) {\r\n                _isSniper[recipient] = true;\r\n                snipersCaught++;\r\n            }\r\n          }\r\n          checkpairisnotsniper();\r\n        }\r\n        \r\n        _transactionBlockLog[recipient] =block.number;\r\n        \r\n        if(sender != owner() && recipient != owner() && !_isExcludedFromFee[sender]){\r\n            require(tradingEnabled ,\"Trading not open yet\");\r\n            if (gasLimitActive) {\r\n            require(tx.gasprice <= gasPriceLimit, \"Gas price exceeds limit.\");\r\n            }\r\n            if (sameBlockActive) {\r\n                if (sender == uniswapV2Pair){\r\n                    require(lastTrade[recipient] != block.number);\r\n                    lastTrade[recipient] = block.number;\r\n                } else {\r\n                    require(lastTrade[sender] != block.number);\r\n                    lastTrade[sender] = block.number;\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee) {\r\n            restoreAllFee();\r\n        }\r\n    }\r\n    \r\n    function checkpairisnotsniper() internal {\r\n        if (isSniper(uniswapV2Pair))\r\n        _isSniper[uniswapV2Pair] = false;\r\n    }\r\n    \r\n    function isSniper(address account) public view returns(bool) {\r\n        return _isSniper[account];\r\n    }\r\n    \r\n    function _checkLiquidityAdd(address from, address to) private {\r\n        // if liquidity is added by the _liquidityholders set trading enables to true and start the anti sniper timer\r\n        require(!hasLiquidityBeenAdded, 'Liquidity already added and marked.');\r\n    \r\n        if(_isExcludedFromFee[from] && to == uniswapV2Pair) {\r\n          hasLiquidityBeenAdded = true;\r\n          tradingEnabled = true;\r\n          launchedAt = block.number;\r\n        }\r\n    }\r\n    \r\n    function removeSniper(address account) external onlyOwner { \r\n        require(_isSniper[account], 'Account is not a recorded sniper.');\r\n        _isSniper[account] = false;\r\n    }\r\n\r\n    function launch() public onlyOwner {\r\n        launchedAt = block.number;\r\n        hasLiquidityBeenAdded = true;\r\n        tradingEnabled = true;\r\n    }\r\n    \r\n    function setSniperProtection(bool enabled) public onlyOwner {\r\n        sniperProtection = enabled;\r\n    }\r\n    \r\n    function setProtectionSettings(bool antiSnipe, bool antiGas, bool antiBlock) external onlyOwner {\r\n        sniperProtection = antiSnipe;\r\n        gasLimitActive = antiGas;\r\n        sameBlockActive = antiBlock;\r\n    }\r\n    \r\n    function setGasPriceLimit(uint256 gas) external onlyOwner {\r\n        require(gas >= 75);\r\n        gasPriceLimit = gas * 1 gwei;\r\n    }\r\n    \r\n    function transferForeignToken(address _token, address _to) public onlyOwner returns(bool _sent){\r\n        require(_token != address(this), \"Can't let you take all native token\");\r\n        uint256 _contractBalance = IBEP20(_token).balanceOf(address(this));\r\n        _sent = IBEP20(_token).transfer(_to, _contractBalance);\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasLimitActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasLiquidityBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreAllFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sameBlockActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"antiGas\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"antiBlock\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSniperProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapContractEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buybackWallet\",\"type\":\"address\"}],\"name\":\"setbuybackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"setmarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setminTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sniperProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBNBCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerManualBuyback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "IronDogecoin", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b64bdf11321bc6054d8c115137a92178acd86addff36621790a16d04adc1a032"}