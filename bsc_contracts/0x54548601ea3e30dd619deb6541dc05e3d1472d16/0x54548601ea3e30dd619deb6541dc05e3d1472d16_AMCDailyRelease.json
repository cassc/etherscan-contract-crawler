{"SourceCode": "// File: @openzeppelin/contracts@4.8.1/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.8.1/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.8.1/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: AMC_DailyRelease.sol\r\n\r\n\r\npragma solidity 0.8.18;\r\n\r\n\r\n\r\ncontract AMCDailyRelease is Ownable {\r\n    // AMC contract address\r\n    address private constant AMC_TOKEN_ADDRESS =\r\n        0x299142a6370e1912156E53fBD4f25D7ba49DdcC5;\r\n\r\n    IERC20 private AMCToken;\r\n\r\n    struct User {\r\n        bool authorized;\r\n    }\r\n\r\n    // Authorized user lists\r\n    mapping(address => User) private authorizedUsers;\r\n\r\n    address[] private authorizedUserAddresses;\r\n\r\n    uint256 private lastReleaseTime;\r\n\r\n    // Interval between each execution\r\n    uint256 private constant RELEASE_INTERVAL = 1 days;\r\n\r\n    // Only authorized user can call releaseAMC()\r\n    modifier onlyAuthorized() {\r\n        require(authorizedUsers[msg.sender].authorized, \"Unauthorized user\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        AMCToken = IERC20(AMC_TOKEN_ADDRESS);\r\n    }\r\n\r\n    // The event of Release\r\n    event dailyRelease(\r\n        address indexed sender,\r\n        address[] recipients,\r\n        uint256[] amounts\r\n    );\r\n\r\n    // Distribute a fixed number of AMCs to 3 addresses at regular intervals each day\r\n    function releaseAMC() external onlyAuthorized {\r\n        require(\r\n            block.timestamp > lastReleaseTime + RELEASE_INTERVAL,\r\n            \"Release can only be executed once per day\"\r\n        );\r\n        lastReleaseTime = block.timestamp - 30;\r\n\r\n        require(\r\n            AMCToken.balanceOf(address(this)) >= 100000 * 10**18,\r\n            \"Insufficient AMC balance\"\r\n        );\r\n\r\n        address[] memory recipients = new address[](3);\r\n        uint256[] memory amounts = new uint256[](3);\r\n\r\n        recipients[0] = 0x5cbcd0896043a488d8df5138c2038f4A8Cc9d6f5;\r\n        amounts[0] = 60000 * 10**18;\r\n\r\n        recipients[1] = 0xd67E358163285789Ea10E5c1004Cfc4FfE1D3986;\r\n        amounts[1] = 30000 * 10**18;\r\n\r\n        recipients[2] = 0x93f08719e39915aCD1c3bceEDFE02733bdDad50C;\r\n        amounts[2] = 10000 * 10**18;\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            require(\r\n                AMCToken.transfer(recipients[i], amounts[i]),\r\n                \"AMC transfer failed\"\r\n            );\r\n        }\r\n\r\n        emit dailyRelease(msg.sender, recipients, amounts);\r\n    }\r\n\r\n    function extractAMC(uint256 amount) external onlyOwner {\r\n        require(\r\n            AMCToken.balanceOf(address(this)) >= amount * 10**18,\r\n            \"Insufficient AMC balance\"\r\n        );\r\n        AMCToken.transfer(owner(), amount * 10**18);\r\n    }\r\n\r\n    // Cannot be renounceOwnership()\r\n    function renounceOwnership() public view override onlyOwner {\r\n        revert(\"Ownership cannot be renounced\");\r\n    }\r\n\r\n    // Cannot be transferOwnership()\r\n    function transferOwnership(address) public view override onlyOwner {\r\n        revert(\"Ownership cannot be transferred\");\r\n    }\r\n\r\n    function authorize_user(address approve_address) external onlyOwner {\r\n        require(\r\n            !authorizedUsers[approve_address].authorized,\r\n            \"User is already authorized\"\r\n        );\r\n        authorizedUsers[approve_address].authorized = true;\r\n        authorizedUserAddresses.push(approve_address);\r\n    }\r\n\r\n    function revoke_user(address revoke_address) external onlyOwner {\r\n        require(\r\n            authorizedUsers[revoke_address].authorized,\r\n            \"User is not authorized\"\r\n        );\r\n        authorizedUsers[revoke_address].authorized = false;\r\n        removeAuthorizedUser(revoke_address);\r\n    }\r\n\r\n    function removeAuthorizedUser(address userAddress) private {\r\n        for (uint256 i = 0; i < authorizedUserAddresses.length; i++) {\r\n            if (authorizedUserAddresses[i] == userAddress) {\r\n                if (i != authorizedUserAddresses.length - 1) {\r\n                    authorizedUserAddresses[i] = authorizedUserAddresses[\r\n                        authorizedUserAddresses.length - 1\r\n                    ];\r\n                }\r\n                authorizedUserAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAuthorizedUsers()\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (address[] memory)\r\n    {\r\n        return authorizedUserAddresses;\r\n    }\r\n\r\n    function setLastDistributionTimeToMidnight() external onlyOwner {\r\n        lastReleaseTime = block.timestamp - (block.timestamp % 1 days);\r\n    }\r\n\r\n    function getLastReleaseTime() external view onlyOwner returns (uint256) {\r\n        return lastReleaseTime;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"dailyRelease\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approve_address\",\"type\":\"address\"}],\"name\":\"authorize_user\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"extractAMC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAMC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoke_address\",\"type\":\"address\"}],\"name\":\"revoke_user\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLastDistributionTimeToMidnight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AMCDailyRelease", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://603c02d7c1f581ff1641d54f736245d6696c480b02be5cba991050f95a8a8ad5"}