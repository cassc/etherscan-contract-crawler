{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n \r\npragma solidity 0.8.17;\r\n \r\n// Ownership smart contract\r\nabstract contract Ownable {\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(msg.sender);\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n \r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n \r\ninterface ISenje {\r\n    function transferOwnership(address newOwner) external;\r\n    function changeSigner(address _signer, bool _status) external;\r\n}\r\n \r\n \r\ninterface IERC20 {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\r\n    function balanceOf(address who) external returns (uint);\r\n}\r\n \r\ninterface IERC20_USDT {\r\n    function transfer(address _to, uint256 _amount) external;\r\n    function transferFrom(address _from, address _to, uint _value) external;\r\n    function balanceOf(address who) external returns (uint);\r\n}\r\n \r\n \r\ncontract TokenDistribution is Ownable {\r\n    address private busdToken;\r\n    address public developerWallet;\r\n \r\n    uint256 public devPercent = 250; //1000 = 1%\r\n \r\n    address public senjeBridge;\r\n \r\n    constructor(address _busdTokenAddress, address _developerWallet, address _senjeBridge) {\r\n        busdToken = _busdTokenAddress;\r\n        developerWallet = _developerWallet;\r\n        senjeBridge = _senjeBridge;\r\n    }\r\n \r\n \r\n    function setDevPercent(uint256 _percent) external onlyOwner{\r\n        require(_percent <= 50000, \"Developer percent cannot be more than 50%\");\r\n        devPercent = _percent;\r\n    }\r\n \r\n    function setDevWallet(address _wallet) external onlyOwner {\r\n        require(_wallet != address(0), \"Wallet address should not be address(0)\");\r\n        developerWallet = _wallet;\r\n    }\r\n \r\n    function masterTransferOwnership(address _newOwner) external onlyOwner{\r\n        ISenje(senjeBridge).transferOwnership(_newOwner);\r\n    }\r\n \r\n    function masterChangeSigner(address _newSigner, bool _status) external onlyOwner{\r\n        ISenje(senjeBridge).changeSigner(_newSigner, _status);\r\n    }\r\n \r\n \r\n    function claim() public {\r\n        uint256 contractBalanceBUSD = IERC20(busdToken).balanceOf(address(this));\r\n        uint256 contractBalance = address(this).balance;\r\n \r\n        require(contractBalance > 0 || contractBalanceBUSD > 0, \"No tokens available for distribution.\");\r\n \r\n        if(contractBalanceBUSD > 0){\r\n            uint256 developerShare = (contractBalanceBUSD * devPercent)/100000;\r\n            uint256 ownerShare = contractBalanceBUSD - developerShare;\r\n \r\n            IERC20(busdToken).transfer(owner(), ownerShare);\r\n            IERC20(busdToken).transfer(developerWallet, developerShare);\r\n        }\r\n \r\n        if(contractBalance > 0){\r\n            payable(owner()).transfer(contractBalance);\r\n        }\r\n    }\r\n \r\n    function claimOtherTokens(address _tokenAddress) public {\r\n \r\n        require(_tokenAddress != busdToken, \"BUSD cannot be claimed from this function\");\r\n \r\n        uint256 contractBalance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        require(contractBalance > 0, \"No tokens available for distribution.\");\r\n \r\n        if(_tokenAddress == 0x55d398326f99059fF775485246999027B3197955){  \r\n            IERC20_USDT(_tokenAddress).transfer(owner(), contractBalance);  //USDT\r\n        }\r\n        else{                                                             \r\n            IERC20(_tokenAddress).transfer(owner(), contractBalance);       // ERC20\r\n        }\r\n    }\r\n \r\n    receive () external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developerWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_senjeBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimOtherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"masterChangeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"masterTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senjeBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setDevPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenDistribution", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000003b3752e1aedde2baca51a0a0039dc3584cc08f7b000000000000000000000000d03d6aa839e06ff556c75d2d9150d75401f44e27", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f9679970962e6d60cbde7c178ca24453a0dbcbd8ad454838e9f6df35cd53ac3"}