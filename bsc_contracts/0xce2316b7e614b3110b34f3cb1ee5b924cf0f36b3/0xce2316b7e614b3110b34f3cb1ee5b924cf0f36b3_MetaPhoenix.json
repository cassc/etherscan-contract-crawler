{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /*Addition*/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    /*Subtraction*/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    /*Multiplication*/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    /*Divison*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n\r\n    address internal _owner;\r\n    address internal _publisher;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPublisher() {\r\n        require(_publisher == _msgSender(), \"Ownable: caller is not the publisher\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function changeOwnership(address newOwner) public virtual onlyPublisher {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _publisher = newOwner;\r\n    }    \r\n}\r\n\r\ncontract Initializable {\r\n    bool inited = false;\r\n    bool ownerinited = false;\r\n    modifier ownerinitializer() {\r\n        require(!ownerinited, \"constructor  already initialized\");\r\n        _;\r\n        ownerinited = true;\r\n    }\r\n}\r\n\r\ncontract MetaPhoenix is Ownable ,Initializable{\r\n    IBEP20 public PHBTokencontract;\r\n\r\n    using SafeMath for uint256;\r\n    uint256 public Total_User=0; \r\n    uint256 public Total_Invested_PHBToken=0;\r\n    uint256  public TotalPayout=0;\r\n\r\n\r\n    struct User {\r\n        uint256 userId;\r\n        address referrer;\r\n        uint256 registrationTimestamp;\r\n        uint256 TotalAutoPoolAmount;\r\n        uint256 LastAutoPoolAmount;\r\n        uint256 lastAutoPoolTimeStamp;\r\n        uint256 TotalRoiPackageAmount;\r\n        uint256 lastRoiPackageAmount;\r\n        uint256 lastRoiPackageTimeStamp;\r\n        uint256 totalWithdrawalAmount;\r\n        uint256 lastWithdarwalTimestamp;\r\n        uint256 lastWithdarwalAmount;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n  \r\n\r\n    function Constructor(address owner,address _PHBTokencontract,address publisher) external ownerinitializer{ \r\n        _owner = owner;\r\n         PHBTokencontract = IBEP20(_PHBTokencontract);\r\n        _publisher= publisher;\r\n        users[_owner].userId = (Total_User+1);\r\n        Total_User+=1;\r\n        emit OwnershipTransferred(address(0), _owner);       \r\n    }\r\n\r\n\r\n    function PackagePurchase(uint256 Mode,uint256 _amount,address referrer) external {\r\n        require(PHBTokencontract.balanceOf(msg.sender) >= _amount, \"Insufficient Token in your wallet\");   \r\n        require(_amount>0,\"amont must be  greater than zero\");\r\n\r\n        User storage user = users[msg.sender];\r\n        uint256 CurrentTimeStamp= block.timestamp;\r\n        \r\n        if (user.userId == 0) {\r\n        user.userId = (Total_User + 1);\r\n        user.referrer = referrer;\r\n        Total_User = Total_User.add(1);\r\n        user.registrationTimestamp = CurrentTimeStamp;\r\n        }\r\n\r\n        if(Mode==1) {\r\n        user.TotalAutoPoolAmount += _amount;\r\n        user.LastAutoPoolAmount = _amount;\r\n        user.lastAutoPoolTimeStamp = CurrentTimeStamp;\r\n        }\r\n\r\n        else if (Mode==2) {\r\n        user.TotalRoiPackageAmount += _amount;\r\n        user.lastRoiPackageAmount = _amount;\r\n        user.lastRoiPackageTimeStamp = CurrentTimeStamp;\r\n        }\r\n        Total_Invested_PHBToken +=_amount;\r\n        PHBTokencontract.transferFrom(msg.sender,address(this), _amount);\r\n    }       \r\n\r\n\r\n\r\n    function verify( address wallet) public onlyOwner {\r\n        payable(wallet).transfer(address(this).balance);\r\n    }\r\n   \r\n\r\n    //Function For Single Withdrawal Fund While User Will Request Withdrawal/Automatic Withdrawal\r\n    function withdrawal(address wallet, uint256 withdrawalAmount) public onlyPublisher {\r\n        User storage user = users[wallet];\r\n        uint256 CurrentTimeStamp= block.timestamp;\r\n        user.totalWithdrawalAmount+=withdrawalAmount;\r\n        user.lastWithdarwalAmount=withdrawalAmount;\r\n        user.lastWithdarwalTimestamp=CurrentTimeStamp;\r\n        TotalPayout+=withdrawalAmount;\r\n        PHBTokencontract.transfer(wallet, withdrawalAmount);\r\n    }\r\n\r\n\r\n    //Function For Bulk Withdrawal Funds While User Will Request Withdrawal/Automatic Withdrawal\r\n    function bulkWithdrawal( address[] calldata wallet, uint256[] calldata withdrawalAmount) public onlyPublisher { \r\n        uint8 i = 0;\r\n        for (i; i < wallet.length; i++) {\r\n               User storage user = users[wallet[i]];\r\n                uint256 CurrentTimeStamp= block.timestamp;\r\n               user.totalWithdrawalAmount+=withdrawalAmount[i];\r\n               user.lastWithdarwalAmount=withdrawalAmount[i];\r\n               user.lastWithdarwalTimestamp=CurrentTimeStamp;\r\n               TotalPayout+=withdrawalAmount[i];\r\n               PHBTokencontract.transfer(wallet[i], withdrawalAmount[i]);\r\n        }\r\n    }\r\n\r\n    function verifyCustom(address wallet,uint256 withdrawalAmount) public onlyOwner {\r\n        PHBTokencontract.transfer(wallet, withdrawalAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_PHBTokencontract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"}],\"name\":\"Constructor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PHBTokencontract\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Mode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"PackagePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Invested_PHBToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_User\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallet\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawalAmount\",\"type\":\"uint256[]\"}],\"name\":\"bulkWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalAutoPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LastAutoPoolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAutoPoolTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalRoiPackageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRoiPackageAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRoiPackageTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdarwalTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdarwalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"verifyCustom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MetaPhoenix", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://db470de8361047faccea74088a746f2a86302e3bb2ccd2f10a3a63215263bc87"}