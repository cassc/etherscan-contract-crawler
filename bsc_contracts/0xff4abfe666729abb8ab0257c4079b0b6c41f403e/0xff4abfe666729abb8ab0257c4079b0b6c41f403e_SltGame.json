{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/slt20231105.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract SltGame is OwnableUpgradeable {\\r\\n\\r\\n    //\u5b9e\u4f8b\u5316\u4ee3\u5e01\u63a5\u53e3\\r\\n    IERC20 public slt;\\r\\n    IERC20 public usdt;\\r\\n    \\r\\n    //\u5e38\u7528\u5168\u5c40\u53d8\u91cf\\r\\n    uint public startTime;   \\r\\n    address public topAddress;\\r\\n    uint public precision; // \u9ed8\u8ba4\u7cbe\u5ea6,\u53ef\u5347\u7ea7\u5408\u7ea6\u4e0d\u80fd\u5728\u58f0\u660e\u5408\u7ea6\u7684\u65f6\u5019\u8f93\u5165\u9ed8\u8ba4\u503c\uff0c\u9664\u975e\u628a\u4ed6\u52a0\u4e0aconstant\u53d8\u6210\u5e38\u91cf\\r\\n\\r\\n    struct UserInfo {\\r\\n        address invitor; //\u7528\u6237\u7684\u76f4\u63a5\u63a8\u8350\u4eba\\r\\n        uint refer_n; // \u8be5\u7528\u6237\u63a8\u8350\u4e86\u591a\u5c11\u4e2a\u6709\u6548\u5730\u5740\uff08\u5982\u2f64\u6237\u4e0b\u2f00\u7ea7\u6709\u4e0a\u7ea7\u6ed1\u843d\u7684\u2f64\u6237\u5219\u4e0d\u7b97\u4e3a\u2f83\u2f30\u7684\u6709\u6548\u2f64\u6237\uff0c\u4e3a\u4e0a\u7ea7\u7684\u6709\u6548\u2f64\u6237\uff09\\r\\n        uint referSltReward; //\u5f85\u9886\u53d6\u7684\u76f4\u63a8slt\\r\\n        uint referSltClaimed; //\u7d2f\u8ba1\u9886\u53d6\u7684\u76f4\u63a8slt\\r\\n        uint buySltReward; // \u5f85\u9886\u53d6\u7684\u8ba4\u8d2dslt\\r\\n        uint buySltClaimed; //\u7d2f\u8ba1\u9886\u53d6\u7684\u8ba4\u8d2dslt\\r\\n        uint usdtClaimed; //\u7d2f\u8ba1\u9886\u53d6\u7684\u5956\u52b1USDT\\r\\n        uint districtID; //\u5c5e\u4e8e\u54ea\u4e00\u6761\u666e\u901a\u8282\u70b9\u7684\u7ebf\uff08\u54ea\u4e2a\u533a\uff09,\u5982\u679c\u8be5\u6570\u5b57\u4e0d\u4e3a0\uff0c\u8bf4\u660e\u662f\u6709\u6548\u7528\u6237\uff0c\u5df2\u7ecf\u5728\u56e2\u961f\u7ed3\u6784\u4e2d\u4e86\\r\\n        uint level; // \u7528\u6237\u7684\u7b49\u7ea7\\r\\n    }\\r\\n\\r\\n    struct NodeInfo { //\u8282\u70b9\u7684\u4fe1\u606f\\r\\n        bool isSuperNode;\\r\\n        bool isNormalNode;\\r\\n        uint subNum; // \u4e0b\u7ea7\u7684\u6570\u91cf\uff08\u53ea\u5bf9\u8d85\u7ea7\u8282\u70b9\u6709\u6548\uff09\\r\\n    }\\r\\n\\r\\n    struct TeamInfo { //\u56e2\u961f\u67b6\u6784\u4fe1\u606f\\r\\n        address up1;\\r\\n        address down1;\\r\\n        address down2;\\r\\n        address down3;\\r\\n        uint lastLevel; //\u6b64\u524d\u7684\u67e5\u8be2\u4e2d\uff0c\u5df2\u7ecf\u67e5\u5230\u4e86\u8be5\u7528\u6237\u4e0b\u9762\u7684\u5c42\u6570\\r\\n        uint lowNum; //\u6b64\u524d\u7684\u67e5\u8be2\u4e2d\uff0c\u5df2\u7ecf\u67e5\u5230\u8fd9\u4e2a\u7528\u6237\u4f1e\u4e0b\u81f3\u5c11\u5230lowNum\u90fd\u662f\u6ee1\u7684\uff08\u53ea\u9488\u5bf9\u7528\u6237\u6240\u5728\u7684\u533a,lowNum\u672c\u8eab\u4e5f\u662f\u88ab\u5360\u7528\u7684\uff09\\r\\n    }\\r\\n\\r\\n    struct DistrictInfo { //\u6bcf\u4e00\u6761\u666e\u901a\u8282\u70b9\u7684\u7ebf\u8def\u72ec\u6709\u7684\u4e09\u53c9\u6811\u7ed3\u6784\\r\\n        mapping(address => uint)  addressToIndex;\\r\\n        mapping(uint => address)  indexToAddress;\\r\\n    }\\r\\n\\r\\n    struct UserDivdends {\\r\\n        mapping (uint => uint)  claimedDivdends; //\u8f93\u5165\u7b2cn\u671f\uff0c\u8fd4\u56de\u8be5\u671f\u5df2\u7ecf\u9886\u53d6\u7684\u5206\u7ea2\\r\\n    }\\r\\n\\r\\n    //\u5168\u5c40\u7edf\u8ba1\u4fe1\u606f\\r\\n    uint public totalUsdtBuy;//\u7528\u6237\u603b\u5165\u91d1\\r\\n    uint public totalSuperNode; //\u8d85\u7ea7\u8282\u70b9\u6570\u91cf\\r\\n    uint public totalNormalNode; //\u666e\u901a\u8282\u70b9\u6570\u91cf\\r\\n    uint public totalUserNum; // \u5168\u5c40\u666e\u901a\u7528\u6237\\r\\n    uint public threeRefersNum; //\u5168\u5c40\u6709\u6548\u76f4\u63a8\u5927\u4e8e\u7b49\u4e8e\u4e09\u7684\u4eba\u6570\\r\\n    uint public fiveRefersNum; //\u5168\u5c40\u6709\u6548\u76f4\u63a8\u5927\u4e8e\u7b49\u4e8e\u4e94\u7684\u4eba\u6570\\r\\n    uint public tenRefersNum; //\u5168\u5c40\u6709\u6548\u76f4\u63a8\u5927\u4e8e\u7b49\u4e8e\u5341\u7684\u4eba\u6570\\r\\n    uint public currentDivdendsRound; //\u5f53\u524d\u662f\u7b2c\u51e0\u6b21\u5206\u7ea2\\r\\n\\r\\n    mapping(address => bool) public admin; //\u7ba1\u7406\u5458\\r\\n    mapping(address => bool) public isBlackList; //\u662f\u5426\u9ed1\u540d\u5355\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    mapping(address => NodeInfo) public nodeInfo;\\r\\n    mapping(address => TeamInfo) public teamInfo;\\r\\n    mapping(uint => address) public indexToNormalAddress; //\u4ece\u533a\u7684\u5e8f\u53f7\uff081\u53f7\u5f00\u59cb\uff09\u6620\u5c04\u5230\u666e\u901a\u8282\u70b9\u5730\u5740\uff08\u8be5\u533a\u7684\u6700\u9876\u70b9\u5730\u5740\uff09\\r\\n    mapping(address => uint) public normalAddressToIndex; //\u6839\u636e\u666e\u901a\u8282\u70b9\u7684\u5730\u5740\u627e\u5230\u4e09\u53c9\u6811\u9876\u70b9\u5e8f\u53f7\uff0cID\u4ece1\u5f00\u59cb\\r\\n    mapping(uint => DistrictInfo)  district; //\u6570\u7ec4\u91cc\u9762\u6709maping\uff0c\u6240\u4ee5\u4e0d\u53ef\u4ee5\u76f4\u63a5public\uff0c\u53ef\u4ee5\u5199\u4e13\u95e8\u7684\u65b9\u6cd5\u6765\u67e5\u8be2\\r\\n    mapping(uint => uint) public  totalDividends; // \u8bbe\u7f6e\u7b2cn\u671f\u7684\u603b\u5206\u7ea2\\r\\n    mapping(address => UserDivdends) userDivdends; //\u7528\u6237\u5728\u6bcf\u4e00\u671f\u7684\u9886\u53d6\u60c5\u51b5\\r\\n\\r\\n    // \u4e1a\u52a1\u5e38\u6570\uff0c\u6ce8\u610f\u6570\u7ec4\u7684\u7d22\u5f15\u662f\u4ece0\u5f00\u59cb\u7684\\r\\n    uint[10] public levelFee ; //\u6bcf\u5347\u4e00\u7ea7\u9700\u8981\u7684usdt\u6570\u91cf [100, 120, 140, 160, 180, 200, 220, 240, 260, 280] \\r\\n    uint[10] public sltReward ; //\u5347\u7ea7\u5bf9\u5e94\u7684slt\u5956\u52b1 [200, 240, 280, 320, 1360, 400, 440, 480, 520, 560]\\r\\n    \\r\\n    \\r\\n    //\u8bb0\u5f55\u8d85\u7ea7\u8282\u70b9\u7684\u4e0b\u7ea7\\r\\n    struct SuperNodeDownLevel{\\r\\n        mapping (uint => address) downLevel;  //\u8d85\u7ea7\u8282\u70b9\u7684\u4e0b\u9762\u7684\u5730\u5740\\r\\n    } \\r\\n    mapping (address => SuperNodeDownLevel) superNodeDownLevel;\\r\\n    \\r\\n    //\u628a\u6bcf\u4e2a\u7b49\u7ea7\u7684\u5206\u7ea2\u5206\u5f00\u8bb0\u5f55\\r\\n    mapping(uint => uint) public  totalDividendsThree;\\r\\n    mapping(uint => uint) public  totalDividendsFive;\\r\\n    mapping(uint => uint) public  totalDividendsTen;\\r\\n    \\r\\n    //\u6bcf\u5468\u5956\u52b1\u76f8\u5173\u53d8\u91cf\\r\\n    uint[10] public weeklyRewardLevel; // \u6bcf\u7ea7\u5bf9\u5e94\u7684\u6bcf\u5468slt\u5956\u52b1 [7, 39, 77, 133, 210, 315, 455, 630, 840, 1085]\\r\\n    mapping (address => uint) public lastClaimedTime;\\r\\n    uint public  weekDuration; //\u6bcf\u5468\u7684\u65f6\u95f4\u957f\u5ea6\uff0c\u4ee5\u79d2\u8ba1\u7b97\\r\\n    \\r\\n    // \u8bb0\u5f55\u4e8b\u4ef6\\r\\n    event Bond(address indexed player, address indexed invitor); // \u7ed1\u5b9a\u76f4\u63a8\u5173\u7cfb\u4e8b\u4ef6\\r\\n    event FirstBuy(address indexed buyer, address indexed invitor, uint indexed amount); //\u521d\u6b21\u8d2d\u4e70\\r\\n    //event\u53ea\u80fd\u6709\u4e09\u4e2a\u53d8\u91cf\uff0c\u626b\u4e0b\u9762\u8fd9\u4e2a\u4e8b\u4ef6\u7684\u65f6\u5019\u628amsg.sender\u4e5f\u626b\u4e00\u4e0b\uff0c\u5c31\u662fbuyer\\r\\n    event GeneralBuyEvent1(uint indexed amount, uint indexed targetLevel); // \u5347\u7ea7\u8d2d\u4e70,\u5982\u679camount\u662f0\uff0c\u8bf4\u660e\u70e7\u4f24\u4e86\\r\\n    event GeneralBuyEvent2(address indexed buyer, address indexed winner);\\r\\n    event ClaimSLT(address indexed user, uint indexed claimtype, uint indexed amount); // type1\u4e3a\u8d2d\u4e70\u7b49\u7ea7\u7684slt\u9886\u53d6\uff0c2\u4e3a\u76f4\u63a8\u5956\u52b1\u7684slt\u9886\u53d6\\r\\n    event SetDividends(address indexed admin, uint indexed currentRound, uint indexed amount);//\u8bb0\u5f55\u8bbe\u7f6e\u5206\u7ea2\\r\\n    event ClaimDivdends(address indexed user, uint indexed currentRound, uint indexed amount);//\u8bb0\u5f55\u9886\u53d6\u5206\u7ea2\\r\\n    //\u6bcf\u5468\u5956\u52b1\u9886\u53d6\u4e8b\u4ef6\\r\\n    event ClaimWeeklyReward(address indexed user, uint indexed amount);\\r\\n    \\r\\n    //\u4fee\u9970\u65b9\u6cd5\\r\\n    modifier onlyAdmin () { //\u5224\u65ad\u7ba1\u7406\u5458\u6743\u9650\\r\\n        require(admin[msg.sender] == true, \\\"not admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkBlackList () { //\u5224\u65ad\u662f\u5426\u9ed1\u540d\u5355\u5730\u5740\\r\\n        require(isBlackList[msg.sender] == false, \\\"black list\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyEOA() {  //\u62d2\u7edd\u5408\u7ea6\u8c03\u7528\\r\\n    require(msg.sender == tx.origin, \\\"not eoa\\\");\\r\\n    _;\\r\\n}  \\r\\n   \\r\\n   // \u8bbe\u7f6e\u65b9\u6cd5\\r\\n    function initialize() initializer public {\\r\\n        __Ownable_init_unchained();\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function checkDistrictAddressInfo (uint _district, uint index) public view returns  (address) { // \u67e5\u8be2\u533a\u91cc\u9762\u7684index\u5bf9\u5e94\u7684\u5730\u5740\\r\\n        return district[_district].indexToAddress[index];\\r\\n    }\\r\\n\\r\\n    function checkDistrictIndexInfo (uint _district, address _address) public view returns  (uint) { // \u67e5\u8be2\u533a\u91cc\u9762\u7684\u5730\u5740\u5e94\u7684index\\r\\n        return district[_district].addressToIndex[_address];\\r\\n    }\\r\\n    \\r\\n    function setAdmin(address admin_, bool isAdmin_) external onlyOwner { // \u8bbe\u7f6eadmin\\r\\n            admin[admin_] = isAdmin_;\\r\\n        }\\r\\n    \\r\\n    function setToken(address _usdt, address _slt) external onlyOwner{ //\u8bbe\u7f6e\u4ee3\u5e01\u4fe1\u606f\\r\\n        usdt = IERC20(_usdt);\\r\\n        slt = IERC20(_slt);\\r\\n    }\\r\\n\\r\\n    function setPrecision(uint _precision) external onlyOwner { // \u8bbe\u7f6e\u7cbe\u5ea6\\r\\n        precision = _precision;\\r\\n    }\\r\\n\\r\\n    //\u5982\u679c\u8fdb\u6765\u7684\u6570\u7ec4\u8981\u8fdb\u884c\u64cd\u4f5c\uff0c\u5c31\u9700\u8981memory\uff0c\u4e0d\u8fdb\u884c\u64cd\u4f5c\u5c31\u53ef\u4ee5\u7528calldata\uff0c\u53ef\u4ee5\u7701\u70b9gas\\r\\n    function setFee(uint[10] calldata _levelFee, uint[10] calldata _sltReward) external onlyAdmin {  // \u8bbe\u7f6e\u8d39\u7528\uff0c\u6570\u7ec4\u5165\u53c2\u8981\u7528calldata\\r\\n        levelFee = _levelFee;\\r\\n        sltReward = _sltReward;\\r\\n    }\\r\\n\\r\\n    //\u6bcf\u5468\u5956\u52b1\u76f8\u5173\\r\\n    function setWeeklyRwardInfo (uint[10] calldata _weeklyRewardLevel, uint _weekDuration) external onlyAdmin {\\r\\n        weeklyRewardLevel = _weeklyRewardLevel;\\r\\n        weekDuration = _weekDuration;\\r\\n    }\\r\\n\\r\\n    //\u67e5\u8be2\u53ef\u9886\u53d6\u6570\u91cf\\r\\n    function checkWeeklyReward (address _address) public view returns (uint) { //\u8fd4\u56de\u7684\u6570\u5b57\u8fd8\u6ca1\u6709\u52a0\u4e0a\u7cbe\u5ea6\\r\\n        require(userInfo[_address].level >=1 , \\\"need buy v1 frist\\\");\\r\\n        if (block.timestamp - lastClaimedTime[_address] >= weekDuration) {\\r\\n            return weeklyRewardLevel[userInfo[_address].level - 1];\\r\\n        }\\r\\n        else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // \u68c0\u67e5\u9886\u53d6\u5012\u8ba1\u65f6\\r\\n    function checkRewardCountDown(address _address) public view returns (uint) {\\r\\n        require(userInfo[_address].level >=1 , \\\"need buy v1 frist\\\");\\r\\n        require(block.timestamp - lastClaimedTime[_address] < weekDuration, \\\"ready to claim\\\");\\r\\n        return (lastClaimedTime[_address] + weekDuration - block.timestamp);\\r\\n    }\\r\\n\\r\\n    //\u9886\u53d6\u6bcf\u5468\u5956\u52b1\\r\\n    function claimWeeklyReward() external checkBlackList onlyEOA{\\r\\n        require(userInfo[msg.sender].level >=1 , \\\"need buy v1 frist\\\");\\r\\n        require(block.timestamp - lastClaimedTime[msg.sender] >= weekDuration, \\\"not ready to claim\\\");\\r\\n        uint amount = checkWeeklyReward(msg.sender) * precision;\\r\\n        slt.transfer(msg.sender, amount);\\r\\n        lastClaimedTime[msg.sender] = block.timestamp;\\r\\n        emit ClaimWeeklyReward(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    //\u4e0b\u9762\u4e09\u4e2a\u65b9\u6cd5\u5f3a\u5236\u6539\u53d8\u7528\u6237\u6570\u636e\uff0c\u8c28\u614e\u4f7f\u7528\uff0c\u53ef\u80fd\u9020\u6210\u6570\u636e\u6df7\u4e71\\r\\n    function setUserInfo (address _user, UserInfo calldata _userInfo) external onlyAdmin {\\r\\n        userInfo[_user] = _userInfo;\\r\\n    }\\r\\n    function setTeamInfo (address _user, TeamInfo calldata _teamInfo) external onlyAdmin {\\r\\n        teamInfo[_user] = _teamInfo;\\r\\n    }\\r\\n    function setNodeInfo (address _user, NodeInfo calldata _nodeInfo) external onlyAdmin {\\r\\n        nodeInfo[_user] = _nodeInfo;\\r\\n    }\\r\\n    \\r\\n    function setDivdends (uint _amountThree, uint _amountFive, uint _amountTen) external onlyAdmin { //\u8bbe\u7f6e\u5f53\u671f\u5206\u7ea2\uff0c\u524d\u7aef\u8bb0\u5f97\u8981\u52a0\u4e0a\u7cbe\u5ea6\u4f20\u8fdb\u6765,admin\u9700\u8981\u5148approve slt \u7ed9\u5408\u7ea6\u5730\u5740\\r\\n        currentDivdendsRound +=1;\\r\\n        totalDividendsThree[currentDivdendsRound] = _amountThree;\\r\\n        totalDividendsFive[currentDivdendsRound] = _amountFive;\\r\\n        totalDividendsTen[currentDivdendsRound] = _amountTen;\\r\\n        slt.transferFrom(msg.sender, address(this), (_amountThree+_amountFive+_amountTen)); // ?????\u5982\u679c\u7528\u4ee3\u7406\u5408\u7ea6\u7684\u8bddaddress(this)\u662f\u54ea\u4e2a\u5408\u7ea6\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\\r\\n        emit SetDividends(msg.sender, currentDivdendsRound,  (_amountThree+_amountFive+_amountTen));\\r\\n    }\\r\\n\\r\\n    function setBlackList(address _address, bool isBlackList_) external onlyAdmin { // \u8bbe\u7f6e\u9ed1\u540d\u5355\\r\\n            isBlackList[_address] = isBlackList_;\\r\\n        }\\r\\n    \\r\\n    function setUserLevel(address _address, uint _level) external onlyAdmin { // \u8bbe\u7f6e\u7528\u6237\u7b49\u7ea7\\r\\n        require(_level >0,\\\"can not downgrade to 0\\\" ); // \u9ad8\u7ea7\u5730\u5740\u4e0d\u53ef\u4ee5\u964d\u7ea7\u4e3a0\uff0c\u6700\u591a\u964d\u7ea7\u52301\uff0c\u53ef\u4ee5\u8003\u8651\u62c9\u9ed1\\r\\n        if (_address == topAddress || nodeInfo[_address].isSuperNode == true || nodeInfo[_address].isNormalNode == true) {\\r\\n            userInfo[_address].level = _level; //\u7279\u6b8a\u5730\u5740\u4e0d\u9700\u8981\u8fdb\u884c\u662f\u5426\u5b58\u5728\u56e2\u961f\u67b6\u6784\u7684\u5224\u65ad\\r\\n        } else {\\r\\n            require(userInfo[_address].level >=1 , \\\"need buy v1 frist\\\"); //V2\u4ee5\u4e0a\u624d\u80fd\u8bbe\u7f6e\uff0c\u4e0d\u7136\u7528\u6237\u6392\u4e0d\u8fdb\u56e2\u961f\u7ed3\u6784\\r\\n            userInfo[_address].level = _level;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setTopAddress(address _topAdress) external onlyAdmin { // \u8bbe\u7f6eTopAddress\\r\\n            topAddress = _topAdress ;\\r\\n        }\\r\\n\\r\\n    function setSuperNode(address _nodeAddress) external onlyAdmin { // \u8bbe\u7f6e\u8d85\u7ea7\u8282\u70b9\\r\\n        require(totalSuperNode <= 20, \\\"reach 20 super node\\\");\\r\\n        require(nodeInfo[_nodeAddress].isSuperNode == false,\\\"already set\\\");//\u907f\u514d\u91cd\u590d\u8bbe\u7f6e\\r\\n        require(nodeInfo[_nodeAddress].isNormalNode == false,\\\"already normal address\\\");\\r\\n        userInfo[_nodeAddress].invitor =topAddress;\\r\\n        teamInfo[_nodeAddress].up1 = topAddress;\\r\\n        nodeInfo[_nodeAddress].isSuperNode = true;\\r\\n        totalSuperNode ++;\\r\\n    }\\r\\n\\r\\n    function setNormalNode(address _normalNodeAddress, address _superNodeAddress) external onlyAdmin { // \u8bbe\u7f6e\u666e\u901a\u8282\u70b9\\r\\n        require(nodeInfo[_superNodeAddress].isSuperNode == true, \\\"not super node\\\"); // \u6821\u9a8c\u63a8\u8350\u4eba\u662f\u5426\u4e3a\u8d85\u7ea7\u8282\u70b9\\r\\n        require(nodeInfo[_superNodeAddress].subNum <= 10, \\\"reach 10 normal node\\\"); // \u6821\u9a8c\u8d85\u7ea7\u8282\u70b9\u4f1e\u4e0b\u4f4d\u7f6e\u591f\u4e0d\u591f\\r\\n        require(nodeInfo[_normalNodeAddress].isNormalNode == false, \\\"already set\\\");//\u907f\u514d\u91cd\u590d\u8bbe\u7f6e\\r\\n        require(nodeInfo[_normalNodeAddress].isSuperNode == false,\\\"already super address\\\");//\u907f\u514d\u91cd\u590d\u8bbe\u7f6e\\r\\n        userInfo[_normalNodeAddress].invitor =_superNodeAddress;\\r\\n        teamInfo[_normalNodeAddress].up1 = _superNodeAddress;\\r\\n        nodeInfo[_normalNodeAddress].isNormalNode = true;\\r\\n        nodeInfo[_superNodeAddress].subNum ++;\\r\\n        totalNormalNode ++;\\r\\n        superNodeDownLevel[_superNodeAddress].downLevel[nodeInfo[_superNodeAddress].subNum] = _normalNodeAddress;\\r\\n        normalAddressToIndex[_normalNodeAddress] = totalNormalNode; //\u4ece\u5730\u5740\u627e\u5230\u666e\u901a\u8282\u70b9ID\\r\\n        indexToNormalAddress[totalNormalNode] = _normalNodeAddress; // \u4ece\u666e\u901a\u8282\u70b9\u7684ID\u627e\u5230\u5730\u5740\\r\\n        userInfo[_normalNodeAddress].districtID = totalNormalNode; // \u5728userInfo\u7684\u67b6\u6784\u91cc\u8d4b\u4e88\u8be5\u5730\u5740\u4e3a\u6709\u6548\u5730\u5740\\r\\n        district[totalNormalNode].addressToIndex[_normalNodeAddress] = 1; // \u521d\u59cb\u5316\u8be5\u5206\u533a\\r\\n        district[totalNormalNode].indexToAddress[1] = _normalNodeAddress; // \u521d\u59cb\u5316\u8be5\u5206\u533a\\r\\n        \\r\\n    }\\r\\n\\r\\n    function checkUserDividendsClaimed(address _user, uint _round) public view returns (uint) {\\r\\n        return userDivdends[_user].claimedDivdends[_round];\\r\\n    }\\r\\n\\r\\n    function checkSuperNodeDownLevel(address _user) public view returns(address[] memory) { //\u8fd4\u56de\u8d85\u7ea7\u8282\u70b9\u7684\u4e0b\u7ea7\u5730\u5740\\r\\n        uint n = nodeInfo[_user].subNum;\\r\\n        require(n >=1,\\\"no down level users\\\");\\r\\n        address[] memory downLevels = new address[](n);\\r\\n        for (uint i =0; i<n; i++) {\\r\\n            downLevels[i] = superNodeDownLevel[_user].downLevel[i+1]; //index\u662f\u4ece0\u5f00\u59cb\u7684\uff0cdownlevel\u662f\u4ece1\u5f00\u59cb\u7684\\r\\n        }\\r\\n        return  downLevels;\\r\\n    }\\r\\n\\r\\n//\u4e0b\u9762\u5f00\u59cb\u4e1a\u52a1\u903b\u8f91\\r\\n    function bind(address _invitor) external onlyEOA { //\u7ed1\u5b9a\u76f4\u63a8\u5173\u7cfb\\r\\n        require(userInfo[msg.sender].invitor == address(0), \\\"already bond\\\");\\r\\n        require(userInfo[_invitor].districtID !=0, \\\"not valid invitor\\\"); // \u5982\u679c\u5730\u5740\u5df2\u7ecf\u6709\u5206\u533a\u5f52\u5c5e\uff0c\u5c31\u8bf4\u660e\u662f\u6709\u6548\u5730\u5740\u4e86\uff0c\u800c\u4e14\u53ef\u4ee5\u6392\u9664\u9876\u5c42\u5730\u5740\u548c\u8d85\u7ea7\u8282\u70b9\u5730\u5740\\r\\n        userInfo[msg.sender].invitor = _invitor;\\r\\n        emit Bond(msg.sender, _invitor); // \u8bb0\u5f55\u4e8b\u4ef6\\r\\n    }\\r\\n\\r\\n    //\u8d2d\u4e70V1\uff0c\u4e5f\u5c31\u662f\u521d\u6b21\u8fdb\u5165\u56e2\u961f\u67b6\u6784\u6392\u5e8f\u7684\u8fc7\u7a0b\\r\\n    function buyV1( ) external checkBlackList onlyEOA{\\r\\n        address tempInvitor = userInfo[msg.sender].invitor; \\r\\n        require(userInfo[tempInvitor].level > 0, \\\"invalid invitor\\\"); // \u63a8\u8350\u4eba\u9700\u8981\u81f3\u5c11V1\\r\\n        require(tempInvitor != address(0), \\\"need bind first\\\"); //\u9700\u8981\u5148\u7ed1\u5b9a\u76f4\u63a8\u5173\u7cfb\\r\\n        if( nodeInfo[msg.sender].isSuperNode == true || nodeInfo[msg.sender].isNormalNode == true) {\\r\\n            // \u5982\u679c\u662f\u8d85\u7ea7\u8282\u70b9\u6216\u8005\u666e\u901a\u8282\u70b9\u4e70V1\u7684\u8bdd\uff0c\u4e0d\u9700\u8981\u6784\u5efa\u8fdb\u56e2\u961f\u91cc\u9762\\r\\n        } else {\\r\\n            require(teamInfo[msg.sender].up1 == address(0), \\\"already in district\\\");\\r\\n            uint tempDistrict = userInfo[tempInvitor].districtID; \\r\\n            userInfo[msg.sender].districtID = tempDistrict;\\r\\n            uint tempIndex = findIndex(tempInvitor, tempDistrict); // \u627e\u7a7a\u4f4d\\r\\n            district[tempDistrict].addressToIndex[msg.sender] = tempIndex;\\r\\n            district[tempDistrict].indexToAddress[tempIndex] = msg.sender;\\r\\n            tempIndex +=1; // \u56e0\u4e3a\u6211\u4eec\u7684\u9876\u90e8\u5730\u5740\u662f1\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8981+=1\\r\\n            teamInfo[msg.sender].up1 = district[tempDistrict].indexToAddress[tempIndex / 3]; // \u9664\u6570\u662f\u5411\u4e0b\u53d6\u6574\uff0c\u4e09\u53c9\u6811\u91cc\u9762\u4efb\u610f\u4e00\u4e2aindex\u7684\u4e0a\u7ea7index\uff0c\u90fd\u53ef\u4ee5\u52a0\u4e00\u9664\u4e09\u7136\u540e\u5411\u4e0b\u53d6\u6574\\r\\n            recordDownLevel(teamInfo[msg.sender].up1, msg.sender);//\u8fd8\u9700\u8981\u8bb0\u5f55\u4e0b\u7ea7\u7684\u4fe1\u606f\uff08\u53ef\u4ee5\u7cbe\u786e\u5230\u70b9\u4f4d\uff0c\u56e0\u4e3a\u80af\u5b9a\u662f\u6309\u987a\u5e8f\u5f55\u5165\u7684\uff09\\r\\n        }\\r\\n\\r\\n        // \u5177\u4f53\u4e1a\u52a1\u903b\u8f91\uff0c\u8f6cU\u7684\u8fc7\u7a0b\\r\\n        // \u9700\u8981\u5148\u5224\u65ad\u7528\u6237\u662f\u5426approve\u4e86usdt\u7ed9\u5408\u7ea6\uff0c\u6ca1\u6709\u7684\u8bdd\u9700\u8981approve\uff0c\u6ce8\u610f\u4e0d\u540c\u94fe\u7684usdt\u7684\u7cbe\u5ea6\u4e0d\u4e00\u6837\uff0cbsc\u662f18\\r\\n        usdt.transferFrom(msg.sender, tempInvitor, levelFee[0] * precision*7/10); //\u7ed9\u76f4\u63a8\u4eba\u8f6c70%\\r\\n        userInfo[tempInvitor].usdtClaimed += levelFee[0] * precision*7/10; //\u8bb0\u5f55\u7528\u6237\u7d2f\u79ef\u9886\u53d6\u7684usdt\\r\\n        usdt.transferFrom(msg.sender,topAddress,levelFee[0] * precision*3/10); //\u7ed9\u4e3b\u5730\u5740\u8f6c\u4e8630%\\r\\n        userInfo[msg.sender].buySltReward += sltReward[0]*precision; //\u589e\u52a0\u5f85\u9886\u53d6\u8ba4\u8d2dslt\\r\\n        userInfo[tempInvitor].referSltReward += 20 * precision; //\u7ed9\u63a8\u8350\u4eba\u589e\u52a0\u5f85\u9886\u53d6\u63a8\u8350\u5956\u52b1slt\\r\\n        slt.transfer(topAddress, sltReward[0]*precision); // \u540c\u65f6\u7ed9\u4e3b\u5730\u5740\u8f6c200\u4e2aslt\\r\\n\\r\\n        //\u8bb0\u5f55\u5404\u79cd\u53d8\u91cf\\r\\n        totalUserNum +=1;\\r\\n        totalUsdtBuy += levelFee[0]*precision;\\r\\n        userInfo[msg.sender].level =1; // \u8bb0\u5f55\u7528\u6237\u7684\u7b49\u7ea7\\r\\n        uint tempN = userInfo[tempInvitor].refer_n +=1; //\u9080\u8bf7\u4eba\u7684\u6709\u6548\u63a8\u8350\u4eba\u6570+1\\r\\n        if (tempN ==3){threeRefersNum +=1;} //\u5168\u5c40\u6709\u6548\u8fbe\u6807\u7528\u6237\u8bb0\u5f55\\r\\n        if (tempN ==5){fiveRefersNum +=1;}\\r\\n        if (tempN ==10){tenRefersNum +=1;}\\r\\n        emit FirstBuy(msg.sender, tempInvitor, levelFee[0]*precision);\\r\\n    }\\r\\n\\r\\n    //\u5347\u7ea7\u8d2d\u4e70V2-V10,\u524d\u7aef\u9700\u8981\u6821\u9a8cusdt\u7684allowance\\r\\n    function generalBuy () external checkBlackList onlyEOA {\\r\\n        require(userInfo[msg.sender].level >= 1 && userInfo[msg.sender].level <=10, \\\"not qualified\\\");\\r\\n        require(teamInfo[msg.sender].up1 != address(0), \\\"not in district\\\");\\r\\n        // require(userInfo[msg.sender].districtID != 0, \\\"internal error 01\\\"); \u8fd9\u6837\u4f1a\u963b\u6321\u8d85\u7ea7\u8282\u70b9\u5347\u7ea7\\r\\n        uint targetLevel = userInfo[msg.sender].level +1;\\r\\n        uint winnerRatio = 7; // \u9ed8\u8ba4\u7684\u5206U\u6bd4\u4f8b\\r\\n        uint usdtAmount = levelFee[targetLevel-1] * precision;\\r\\n        uint sltAmount = sltReward[targetLevel-1] * precision;\\r\\n        address targetWinner = msg.sender;\\r\\n        for (uint i=targetLevel-1; i>0; i--){ //\u5bfb\u627e\u8fd9\u6b21\u5347\u7ea7\u8981\u628ausdt\u8fd4\u56de\u7ed9\u54ea\u4e2a\u4e0a\u7ea7\\r\\n            targetWinner = teamInfo[targetWinner].up1;\\r\\n            if (targetWinner == topAddress) { //\u5982\u679c\u5f80\u4e0a\u5230\u4e3b\u5730\u5740\u4e86\uff0c\u5c31\u76f4\u63a5\u7ed9\u4e3b\u5730\u5740\u53d1\\r\\n                break; \\r\\n            }\\r\\n        }    \\r\\n        if (userInfo[targetWinner].level < targetLevel) {//\u70e7\u4f24\u5224\u65ad\\r\\n            winnerRatio = 0;\\r\\n        }\\r\\n        usdt.transferFrom(msg.sender, targetWinner, usdtAmount * winnerRatio / 10 ); //\u7ed9\u4e0a\u5c42\u8f6cusdt\\r\\n        userInfo[targetWinner].usdtClaimed += usdtAmount * winnerRatio / 10; //\u8bb0\u5f55\u7528\u6237\u7d2f\u79ef\u9886\u53d6\u7684usdt\\r\\n        usdt.transferFrom(msg.sender, topAddress, usdtAmount * (10 - winnerRatio) / 10); //\u6b63\u5e38\u60c5\u51b5\u5c31\u662f\u8f6c30%\uff0c\u70e7\u4f24\u5c31\u662f\u8f6c100%\\r\\n        userInfo[msg.sender].buySltReward += sltAmount; //\u589e\u52a0\u5f85\u9886\u53d6\u8ba4\u8d2dslt\\r\\n\\r\\n         //\u8bb0\u5f55\u53d8\u91cf\u548c\u4e8b\u4ef6\\r\\n        totalUsdtBuy += usdtAmount;\\r\\n        userInfo[msg.sender].level =targetLevel; // \u8bb0\u5f55\u7528\u6237\u7684\u7b49\u7ea7\\r\\n        emit GeneralBuyEvent1(usdtAmount * winnerRatio / 10,targetLevel);\\r\\n        emit GeneralBuyEvent2(msg.sender, targetWinner);\\r\\n    }\\r\\n\\r\\n    // \u9886\u53d6slt\uff0c\u4e24\u79cd\u6536\u76ca\u5408\u4e8c\u4e3a\u4e00\u7684\u9886\u53d6\u65b9\u6cd5\\r\\n    function claim() external checkBlackList onlyEOA{\\r\\n        if (userInfo[msg.sender].buySltReward == 0 && userInfo[msg.sender].referSltReward == 0) {\\r\\n            revert(\\\"nothing to claim\\\");\\r\\n        }\\r\\n        if (userInfo[msg.sender].buySltReward >0) {\\r\\n            slt.transfer(msg.sender, userInfo[msg.sender].buySltReward);\\r\\n            emit ClaimSLT(msg.sender, 1, userInfo[msg.sender].buySltReward);\\r\\n            userInfo[msg.sender].buySltClaimed += userInfo[msg.sender].buySltReward;\\r\\n            userInfo[msg.sender].buySltReward = 0;//\u53ef\u9886\u53d6\u7684\u5f520\\r\\n        }\\r\\n        if (userInfo[msg.sender].referSltReward >0) {\\r\\n            slt.transfer(msg.sender, userInfo[msg.sender].referSltReward);\\r\\n            emit ClaimSLT(msg.sender, 2, userInfo[msg.sender].referSltReward);\\r\\n            userInfo[msg.sender].referSltClaimed += userInfo[msg.sender].referSltReward;\\r\\n            userInfo[msg.sender].referSltReward = 0;\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    // \u9886\u53d6\u5206\u7ea2\u5956\u52b1\\r\\n    function claimDivdends() external checkBlackList onlyEOA{\\r\\n        require(totalDividendsThree[currentDivdendsRound] !=0||totalDividendsFive[currentDivdendsRound] !=0 ||totalDividendsTen[currentDivdendsRound] !=0 , \\\"no current dividend\\\" ); //\u5224\u65ad\u5f53\u671f\u662f\u5426\u6709\u5206\u7ea2\\r\\n        require(userInfo[msg.sender].refer_n >=3, \\\"not qualified to claim dividends\\\"); //\u5224\u65ad\u7528\u6237\u662f\u5426\u6709\u9886\u53d6\u8d44\u683c\\r\\n        require(userDivdends[msg.sender].claimedDivdends[currentDivdendsRound] == 0, \\\"already claimed\\\"); //\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u9886\u53d6\u4e86\u5f53\u671f\u5206\u7ea2\\r\\n        uint tempDividends = 0;\\r\\n        if (userInfo[msg.sender].refer_n >=3) {\\r\\n            tempDividends += totalDividendsThree[currentDivdendsRound] / threeRefersNum; //\u7ed9\u6709\u6548\u76f4\u63a8\u2f24\u4e8e=3\u2f08\u7684\u2f64\u6237\u8fdb\u2f8f\u5956\u52b1\u2f60\u5206\\r\\n        }\\r\\n        if (userInfo[msg.sender].refer_n >=5) {\\r\\n            tempDividends += totalDividendsFive[currentDivdendsRound] / fiveRefersNum; //\u7ed9\u6709\u6548\u76f4\u63a8\u2f24\u4e8e=5\u2f08\u7684\u2f64\u6237\u8fdb\u2f8f\u5956\u52b1\u2f60\u5206\\r\\n        }\\r\\n        if (userInfo[msg.sender].refer_n >=10) {\\r\\n            tempDividends += totalDividendsTen[currentDivdendsRound] / tenRefersNum; //\u7ed9\u6709\u6548\u76f4\u63a8\u2f24\u4e8e=10\u2f08\u7684\u2f64\u6237\u8fdb\u2f8f\u5956\u52b1\u2f60\u5206\\r\\n        }\\r\\n        require(tempDividends >0 , \\\"internal error 02\\\"); //\u4e00\u822c\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e2a\uff0c\u6392\u9664\u9519\u8bef\u7528\\r\\n        slt.transfer(msg.sender, tempDividends); \\r\\n        userDivdends[msg.sender].claimedDivdends[currentDivdendsRound] = tempDividends; //\u8bb0\u5f55\u5206\u7ea2\\r\\n        emit ClaimDivdends(msg.sender, currentDivdendsRound, tempDividends);\\r\\n    }\\r\\n\\r\\n    //\u4e09\u53c9\u6811\u4e2d\uff0c\u8f93\u5165\u4e00\u4e2a\u5730\u5740\u7684index\uff0c\u67e5\u8be2\u4ed6\u4e0b\u7ea7\u7684\u4e09\u4e2aindex\\r\\n    function findDownLevelIndex(uint index_) public pure returns (uint[3] memory lists){ \\r\\n        uint temp = index_ * 3 - 1; //\u56e0\u4e3a\u6211\u4eec\u7684\u4e09\u53c9\u6811\u662f\u4ece1\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f -1\\r\\n        lists[0] = temp;\\r\\n        lists[1] = temp + 1;\\r\\n        lists[2] = temp + 2;\\r\\n        return lists;\\r\\n    }\\r\\n\\r\\n    //\u4e09\u53c9\u6811\u4e2d\uff0c\u8f93\u5165\u4e00\u4e2a\u5730\u5740\u7684index\u548c\u4e0b\u9762\u7684\u7b2cn\u5c42\uff0c\u8fd4\u56de\u8be5\u5c42\u96b6\u5c5e\u4e8eindex\u5730\u5740\u4f1e\u4e0b\u7684\u6570\u5b57\u8303\u56f4\uff0c\u8f93\u5165\u7684level\u9700\u8981\u5927\u4e8e\u7b49\u4e8e1\\r\\n    function levelToArray(uint index, uint level) public pure returns (uint , uint ){\\r\\n        uint centralIndex = index * 3 ** level; //\u4e0b\u9762n\u5c42\u540e\u6700\u4e2d\u592e\u7684\u6570\u5b57\\r\\n        uint range = (3 ** level -1) / 2  ; //\u4e0b\u9762n\u5c42\u540e\u4e2d\u592e\u5230\u4e24\u8fb9\u7684\u8ddd\u79bb\\r\\n        uint start = centralIndex - range;\\r\\n        uint end = centralIndex + range;\\r\\n        return  (start,end);\\r\\n    }\\r\\n    \\r\\n    //\u8f93\u5165\u4e00\u4e2a\u5730\u5740\uff0c\u5148\u4ece\u81ea\u5df1\u5f00\u59cb\u7136\u540e\u5f80\u4e0a\u7ea7\u68c0\u7d22\uff0c\u4e0a\u7ea7\uff08\u4eec \uff09\u662f\u5426\u66fe\u7ecf\u8bb0\u5f55\u8fc7lowNum\uff0c\u6709\u7684\u8bdd\u5c31\u76f4\u63a5\u7ee7\u627f\uff0c\u53ef\u4ee5\u8df3\u8fc7\u4e00\u4e9b\u6570\uff0c\u51cf\u5c11\u4e00\u4e9b\u67e5\u8be2\u5de5\u4f5c\\r\\n    function findLowNum(address _address) public view returns (uint) {\\r\\n        address tempAddress = _address;//\u5148\u68c0\u7d22\u81ea\u5df1\\r\\n        uint lowNumTemp;\\r\\n        while (true) {       \\r\\n            require(tempAddress != address(0), \\\"can not line up\\\"); //\u5982\u679c\u665a\u4e0a\u68c0\u7d22\u7684\u65f6\u5019\u9047\u5230\u4e860\u5730\u8d28\uff0c\u8bf4\u660e\u7f51\u4f53\u6709\u95ee\u9898\uff0c\u65ad\u7ebf\u4e86\\r\\n            if (nodeInfo[tempAddress].isSuperNode == true || nodeInfo[tempAddress].isNormalNode == true ) { // \u5230\u4e86\u9876\u90e8\u4e86\\r\\n                lowNumTemp = 0;\\r\\n                break ;\\r\\n            }\\r\\n            if (teamInfo[tempAddress].lowNum > 0) {\\r\\n                lowNumTemp = teamInfo[tempAddress].lowNum;\\r\\n                break;\\r\\n            } else { \\r\\n                tempAddress = teamInfo[tempAddress].up1;\\r\\n            }\\r\\n        }\\r\\n        return  lowNumTemp;\\r\\n    }\\r\\n    \\r\\n    //\u8f93\u5165\u4e00\u4e2a\u5730\u5740\uff0c\u67e5\u8be2\u4ed6\u4e0b\u9762\u6700\u8fd1\u7684\u7a7a\u4f4d\u7684index\\r\\n    function findIndex(address _address, uint _district) internal returns (uint){ \\r\\n        uint tempIndex = district[_district].addressToIndex[_address];\\r\\n        require(tempIndex != 0, \\\"not vaild team structure\\\");\\r\\n        uint out = 0;\\r\\n        uint tempLevel = teamInfo[_address].lastLevel;\\r\\n        if (tempLevel == 0 ) {\\r\\n            teamInfo[_address].lastLevel = 1; // \u5982\u679c\u9047\u4e0a\u4ece\u6765\u6ca1\u6709\u68c0\u7d22\u8fc7\u7684\u5730\u5740\uff0c\u5c31\u521d\u59cb\u5316\u4e00\u4e0b\\r\\n            tempLevel = 1;\\r\\n        }\\r\\n        uint tempLowNum = findLowNum(_address); \\r\\n        uint tempStart;\\r\\n        uint tempEnd;\\r\\n        while (true) {\\r\\n            (tempStart, tempEnd) = levelToArray(tempIndex, tempLevel);//\u627e\u5230\u8fd9\u4e2aindex\u4e0b\u9762\u7b2clevel\u5c42\u7684\u6240\u6709\u6570\u5b57\u7684\u8303\u56f4\\r\\n            if (tempLowNum < tempEnd) { // \u5982\u679c\u6bd4\u5f53\u524dend\u5c0f\uff0c\u5c31\u68c0\u7d22\u8fd9\u4e2alevel\uff0c\u5927\u7684\u8bdd\u76f4\u63a5\u8c03\u5230\u4e0b\u4e00\u4e2aLevel\\r\\n                if (tempLowNum < tempStart) { //\u5982\u679ctempLowNum\u5927\uff0c\u5c31\u4ece\u4ed6\u5f00\u59cb\uff0c\u5426\u5219\u5c31\u4ecetempStart\u5f00\u59cb\\r\\n                    tempLowNum = tempStart;\\r\\n                }\\r\\n                for (uint i = tempLowNum; i <= tempEnd; i++) {\\r\\n                    if (district[_district].indexToAddress[i] == address(0)) {\\r\\n                        out = i;\\r\\n                        teamInfo[_address].lastLevel = tempLevel;\\r\\n                        teamInfo[_address].lowNum = i; //\u5df2\u7ecf\u68c0\u7d22\u5230i\u4e86\uff0c\u6240\u4ee5\u6700\u8fd1\u88ab\u5360\u7528\u7684\u5c31\u662fi\\r\\n                        return out;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            tempLevel +=1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // \u8bb0\u5f55\u56e2\u961f\u67b6\u6784\u91cc\u9762\u7684\u4e0b\u7ea7\\r\\n    function recordDownLevel(address _up, address _down ) internal { // \u8bb0\u5f55\u4e0b\u7ea7\u5730\u5740\u5230\u5e95\u662fdown1,2\u8fd8\u662f3\\r\\n        if (teamInfo[_up].down1 == address(0)) {\\r\\n            teamInfo[_up].down1 = _down;\\r\\n            return; \\r\\n        }\\r\\n        if (teamInfo[_up].down2 == address(0)) {\\r\\n            teamInfo[_up].down2 = _down;\\r\\n            return;\\r\\n        }\\r\\n        if (teamInfo[_up].down3 == address(0)) {\\r\\n            teamInfo[_up].down3 = _down;\\r\\n            return;\\r\\n        }\\r\\n        revert(\\\"should not use this function\\\"); //\u5982\u679c\u51fa\u73b0\u4e86\u8fd9\u4e2a\u62a5\u9519\uff0c\u5c31\u8bf4\u660e\u54ea\u91cc\u5199\u9519\u4e86\uff0c\u56e0\u4e3a\u6b63\u5e38\u6765\u8bf4\u6bcf\u4e00\u6b21\u90fd\u5e94\u8be5\u662f\u6709\u6548\u8c03\u7528\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimDivdends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimtype\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimSLT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimWeeklyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FirstBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"targetLevel\",\"type\":\"uint256\"}],\"name\":\"GeneralBuyEvent1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GeneralBuyEvent2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currentRound\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetDividends\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_invitor\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_district\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"checkDistrictAddressInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_district\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkDistrictIndexInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkRewardCountDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkSuperNodeDownLevel\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"checkUserDividendsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkWeeklyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDivdends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWeeklyReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDivdendsRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"findDownLevelIndex\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"lists\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"findLowNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fiveRefersNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generalBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"indexToNormalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"levelToArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSuperNode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormalNode\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"normalAddressToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin_\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlackList_\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountFive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTen\",\"type\":\"uint256\"}],\"name\":\"setDivdends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_levelFee\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"_sltReward\",\"type\":\"uint256[10]\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSuperNode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNormalNode\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"subNum\",\"type\":\"uint256\"}],\"internalType\":\"struct SltGame.NodeInfo\",\"name\":\"_nodeInfo\",\"type\":\"tuple\"}],\"name\":\"setNodeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_normalNodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superNodeAddress\",\"type\":\"address\"}],\"name\":\"setNormalNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_precision\",\"type\":\"uint256\"}],\"name\":\"setPrecision\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeAddress\",\"type\":\"address\"}],\"name\":\"setSuperNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"up1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"down1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"down2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"down3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowNum\",\"type\":\"uint256\"}],\"internalType\":\"struct SltGame.TeamInfo\",\"name\":\"_teamInfo\",\"type\":\"tuple\"}],\"name\":\"setTeamInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slt\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_topAdress\",\"type\":\"address\"}],\"name\":\"setTopAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refer_n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referSltReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referSltClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buySltReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buySltClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"districtID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"internalType\":\"struct SltGame.UserInfo\",\"name\":\"_userInfo\",\"type\":\"tuple\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"setUserLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"_weeklyRewardLevel\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256\",\"name\":\"_weekDuration\",\"type\":\"uint256\"}],\"name\":\"setWeeklyRwardInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sltReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"up1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"down1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"down2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"down3\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenRefersNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threeRefersNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDividendsFive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDividendsTen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalDividendsThree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNormalNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSuperNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdtBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUserNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refer_n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referSltReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referSltClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buySltReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buySltClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"districtID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyRewardLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SltGame", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}