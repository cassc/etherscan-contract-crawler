{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WheelGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract WheelGame is Ownable {\\n    uint256 public constant totalSectors = 22;\\n    uint256 public constant multiplierGreen = 2;\\n    uint256 public constant multiplierBlue = 3;\\n    uint256 public constant multiplierYellow = 4;\\n    uint public minBet = 0.01 ether;\\n    uint public maxBet = 2 ether;\\n    uint256 public winningTax = 10;\\n\\n    string[] public sectors = [\\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"blue\\\", \\\"yellow\\\", \\\"green\\\", \\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"green\\\", \\\"blue\\\", \\\"green\\\", \\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"green\\\", \\\"blue\\\", \\\"green\\\", \\\"blue\\\", \\\"green\\\", \\\"yellow\\\", \\\"green\\\"];\\n\\n    event BetResult(address indexed player, string betColor, uint256 betAmount, uint256 payout, uint256 winningSectorIndex, string winningColor, uint256 tax);\\n\\n    event Deposit(address indexed sender, uint256 amount);\\n\\n    event Withdraw(address indexed admin, uint256 amount);\\n\\n    constructor() payable {}\\n\\n    function setWinningTax(uint256 _tax) external onlyOwner {\\n        require(_tax <= 100, \\\"Tax cannot be more than 100%\\\");\\n        winningTax = _tax;\\n    }\\n\\n    function setMinBet(uint _minBet) external onlyOwner {\\n        minBet = _minBet;\\n    }\\n\\n    function setMaxBet(uint _maxBet) external onlyOwner {\\n        maxBet = _maxBet;\\n    }\\n\\n    function twist(string memory color) external payable {\\n        uint256 bet = msg.value;\\n\\n        require(bet >= getMinBet(), \\\"Bet amount must be greater than or equal to the minimum bet amount.\\\");\\n        require(bet <= getMaxBet(), \\\"Bet amount exceeds the maximum bet amount.\\\");\\n        require(keccak256(abi.encodePacked(color)) == keccak256(abi.encodePacked(\\\"green\\\")) ||\\n        keccak256(abi.encodePacked(color)) == keccak256(abi.encodePacked(\\\"blue\\\")) ||\\n            keccak256(abi.encodePacked(color)) == keccak256(abi.encodePacked(\\\"yellow\\\")),\\n            \\\"Invalid color chosen.\\\");\\n        uint256 potentialPayout = bet * 3;\\n        require(address(this).balance >= potentialPayout, \\\"Contract doesn't have enough funds to cover the bet.\\\");\\n\\n        uint256 winningSector = generateRandomNumber(totalSectors);\\n        string memory winningColor = sectors[winningSector];\\n\\n        uint256 payout;\\n        if (keccak256(abi.encodePacked(winningColor)) == keccak256(abi.encodePacked(\\\"green\\\"))) {\\n            if (keccak256(abi.encodePacked(color)) == keccak256(abi.encodePacked(\\\"green\\\"))) {\\n                payout = msg.value * multiplierGreen;\\n            }\\n        } else if (keccak256(abi.encodePacked(winningColor)) == keccak256(abi.encodePacked(\\\"blue\\\"))) {\\n            if (keccak256(abi.encodePacked(color)) == keccak256(abi.encodePacked(\\\"blue\\\"))) {\\n                payout = msg.value * multiplierBlue;\\n            }\\n        } else {\\n            if (keccak256(abi.encodePacked(color)) == keccak256(abi.encodePacked(\\\"yellow\\\"))) {\\n                payout = msg.value * multiplierYellow;\\n            }\\n        }\\n\\n        if (payout > 0) {\\n            uint256 taxAmount = ((payout - msg.value) * winningTax) / 100;\\n            uint256 payoutAfterTax = payout - taxAmount;\\n\\n            require(payoutAfterTax <= address(this).balance, \\\"Contract does not have enough balance to pay out.\\\");\\n            (bool sent, ) = msg.sender.call{value: payoutAfterTax}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n\\n            emit BetResult(msg.sender, color, bet, payoutAfterTax, winningSector, winningColor, taxAmount);\\n        } else {\\n            emit BetResult(msg.sender, color, bet, 0, winningSector, winningColor, 0);\\n        }\\n    }\\n\\n    // Helper function to generate a pseudo-random number based on the block hash and timestamp\\n    function generateRandomNumber(uint256 max) private view returns (uint256) {\\n        uint256 randomNumber = uint256(keccak256(abi.encode(blockhash(block.number - 1), block.timestamp, block.prevrandao)));\\n        return randomNumber % max;\\n    }\\n\\n    function withdraw(uint256 amount) external onlyOwner {\\n        uint256 toTransfer = amount;\\n\\n        if (amount == 0) {\\n            toTransfer = address(this).balance;\\n        } else {\\n            require(amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n        }\\n\\n        emit Withdraw(msg.sender, toTransfer);\\n\\n        payable(msg.sender).transfer(toTransfer);\\n    }\\n\\n    function deposit() external payable {\\n        require(msg.value > 0, \\\"Invalid deposit amount\\\");\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    // Function to get the minimum bet amount\\n    function getMinBet() public view returns (uint256) {\\n        return minBet;\\n    }\\n\\n    // Function to get the maximum bet amount (considering the contract balance)\\n    function getMaxBet() public view returns (uint256) {\\n        uint256 availableBalance = address(this).balance / 3;\\n        return availableBalance < maxBet ? availableBalance : maxBet;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"betColor\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningSectorIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winningColor\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"BetResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierBlue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierGreen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierYellow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sectors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"setMaxBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"setWinningTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSectors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"}],\"name\":\"twist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WheelGame", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}