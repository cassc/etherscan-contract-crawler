{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StrongHolderPool.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IStrongHolder.sol\\\";\\r\\nimport \\\"./interfaces/INFTRewardPool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title StrongHolderPool - Alium token pools. Who is strongest?\\r\\n *\\r\\n *   Features:\\r\\n *\\r\\n *   - 100 places in 1 pool;\\r\\n *   - Honest redistribution;\\r\\n *   - NFT reward on side NFT pool contract.\\r\\n */\\r\\ncontract StrongHolderPool is IStrongHolder, Ownable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct User {\\r\\n        address account;\\r\\n        uint256 balance;\\r\\n        bool paid;\\r\\n        uint256 leftId;\\r\\n    }\\r\\n\\r\\n    struct Pool {\\r\\n        User[] users;\\r\\n        uint256 leftTracker;\\r\\n        uint256 withheldFunds;\\r\\n        uint256 withdrawn;\\r\\n        uint256[4] bonusesPaid;\\r\\n        mapping(uint256 => uint256) position;\\r\\n    }\\r\\n\\r\\n    address public rewardToken;\\r\\n    address public nftRewardPool;\\r\\n\\r\\n    uint256 public constant MAX_POOL_LENGTH = 100;\\r\\n    uint256 public minDeposit;\\r\\n\\r\\n    Counters.Counter private _poolIndex;\\r\\n\\r\\n    // pool id -> data\\r\\n    mapping(uint256 => Pool) public pools;\\r\\n\\r\\n    event Bonus(address, uint256);\\r\\n    event Deposited(uint256 indexed poolId, address account, uint256 amount);\\r\\n    event Withdrawn(uint256 indexed poolId, uint256 position, address account, uint256 amount);\\r\\n    event Withheld(uint256 amount);\\r\\n    event RewardPoolSet(address rewardPool);\\r\\n    event MinDepositSet(uint256 value);\\r\\n    event PoolCreated(uint256 poolId);\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor. Set `_aliumToken` as reward token.\\r\\n     */\\r\\n    constructor(address _aliumToken) {\\r\\n        require(_aliumToken != address(0), \\\"Reward token set zero address\\\");\\r\\n\\r\\n        rewardToken = _aliumToken;\\r\\n        minDeposit = 100_000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Lock `_amount` for address `_to`. It create new position or update current,\\r\\n     *     if already exist.\\r\\n     */\\r\\n    function lock(address _to, uint256 _amount)\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(_to != address(0), \\\"Lock for zero address\\\");\\r\\n        require(_amount >= minDeposit, \\\"Not enough for participate\\\");\\r\\n\\r\\n        IERC20(rewardToken).safeTransferFrom(\\r\\n            address(msg.sender),\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        _lock(_to, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw reward from contract, left position will be counted automatically.\\r\\n     */\\r\\n    function withdraw(uint256 _poolId) external override nonReentrant {\\r\\n        _withdraw(_poolId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Count `_percent` from `_num`.\\r\\n     */\\r\\n    function percentFrom(uint256 _percent, uint256 _num)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        require(\\r\\n            _percent != 0 && _percent <= 100,\\r\\n            \\\"percent from: wrong _percent\\\"\\r\\n        );\\r\\n\\r\\n        result = _num.mul(_percent).div(100);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get pool withdraw position for next withdraw.\\r\\n     *\\r\\n     * REVERT: if pool is empty or not filled.\\r\\n     */\\r\\n    function getPoolWithdrawPosition(uint256 _poolId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 position)\\r\\n    {\\r\\n        require(poolLength(_poolId) == 100, \\\"Only whole pool\\\");\\r\\n\\r\\n        Pool storage pool = pools[_poolId];\\r\\n\\r\\n        require(pool.leftTracker < 100, \\\"Pool is empty\\\");\\r\\n\\r\\n        return uint256(100).sub(pool.leftTracker);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get current pool length.\\r\\n     */\\r\\n    function currentPoolLength() external view returns (uint256) {\\r\\n        return pools[Counters.current(_poolIndex)].users.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get current pool id.\\r\\n     */\\r\\n    function getCurrentPoolId() external view returns (uint256) {\\r\\n        return Counters.current(_poolIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get `_account` locked tokens by `_poolId`.\\r\\n     */\\r\\n    function userLockedPoolTokens(uint256 _poolId, address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 balance)\\r\\n    {\\r\\n        Pool storage pool = pools[_poolId];\\r\\n        uint256 l = pool.users.length;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            if (pool.users[i].account == _account) {\\r\\n                balance = pool.users[i].balance;\\r\\n                i = l;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns pool withheld by `_poolId`.\\r\\n     */\\r\\n    function poolWithheld(uint256 _poolId) external view returns (uint256) {\\r\\n        return pools[_poolId].withheldFunds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns current withdraw position reward for `_account` by `_poolId`.\\r\\n     */\\r\\n    function countReward(uint256 _poolId, address _account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 reward)\\r\\n    {\\r\\n        Pool storage pool = pools[_poolId];\\r\\n\\r\\n        for (uint256 i; i < 100; i++) {\\r\\n            if (pool.users[i].account == _account) {\\r\\n                if (pool.users[i].paid) {\\r\\n                    return reward;\\r\\n                }\\r\\n\\r\\n                uint256 position = uint256(100).sub(pool.leftTracker);\\r\\n                uint256 withheld;\\r\\n                (reward, withheld) = _countReward(_poolId, position, pool.users[i].balance);\\r\\n\\r\\n                uint256 bonus = _countBonuses(_poolId, position, pool.users[i].balance, pool.withheldFunds);\\r\\n                if (bonus > 0) {\\r\\n                    reward += bonus;\\r\\n                }\\r\\n\\r\\n                return reward;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set NFT reward pool.\\r\\n     */\\r\\n    function setNftRewardPool(address _rewardPool) external onlyOwner {\\r\\n        nftRewardPool = _rewardPool;\\r\\n        emit RewardPoolSet(_rewardPool);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set NFT reward pool.\\r\\n     */\\r\\n    function setMinDeposit(uint256 _minDeposit) external onlyOwner {\\r\\n        require(_minDeposit >= 100_000, \\\"Very low deposit\\\");\\r\\n\\r\\n        minDeposit = _minDeposit;\\r\\n        emit MinDepositSet(_minDeposit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get pool length by `_poolId`.\\r\\n     */\\r\\n    function poolLength(uint256 _poolId) public view returns (uint256) {\\r\\n        return pools[_poolId].users.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get users list by `_poolId`.\\r\\n     */\\r\\n    function users(uint256 _poolId) external view returns (User[] memory _users) {\\r\\n        _users = pools[_poolId].users;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get total locked tokens by `_poolId`.\\r\\n     */\\r\\n    function totalLockedPoolTokens(uint256 _poolId)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        Pool storage pool = pools[_poolId];\\r\\n        uint256 l = pool.users.length;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            amount += pool.users[i].balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get total locked tokens from `_leftPosition` by `_poolId`.\\r\\n     *      If left position not exist returns zero.\\r\\n     *      _leftPosition - [1...100]\\r\\n     */\\r\\n    function totalLockedPoolTokensFrom(uint256 _poolId, uint256 _leftPosition)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 amount)\\r\\n    {\\r\\n        Pool storage pool = pools[_poolId];\\r\\n\\r\\n        uint256 poolBalance;\\r\\n        uint256 withdrawnBalance;\\r\\n        uint256 l = pool.users.length;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            poolBalance += pool.users[i].balance;\\r\\n\\r\\n            if (\\r\\n                pool.users[i].leftId != 0 &&\\r\\n                pool.users[i].leftId < _leftPosition\\r\\n            ) {\\r\\n                withdrawnBalance += pool.users[i].balance;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        amount = poolBalance - withdrawnBalance;\\r\\n    }\\r\\n\\r\\n    function _countAndWithdraw(\\r\\n        uint256 _poolId,\\r\\n        uint256 _position,\\r\\n        address _account,\\r\\n        uint256 _balance\\r\\n    ) internal {\\r\\n        (uint256 amount, uint256 withheld) = _countReward(_poolId, _position, _balance);\\r\\n        uint256 bonus = _countBonuses(\\r\\n            _poolId,\\r\\n            _position,\\r\\n            _balance,\\r\\n            pools[_poolId].withheldFunds\\r\\n        );\\r\\n        if (withheld > 0) {\\r\\n            pools[_poolId].withheldFunds += withheld;\\r\\n            emit Withheld(withheld);\\r\\n        }\\r\\n        if (bonus > 0) {\\r\\n            _payBonus(_poolId, _position, bonus);\\r\\n            amount += bonus;\\r\\n            emit Bonus(_account, bonus);\\r\\n        }\\r\\n        IERC20(rewardToken).safeTransfer(_account, amount);\\r\\n        if (nftRewardPool != address(0)) {\\r\\n            INFTRewardPool(nftRewardPool).log(_account, _position);\\r\\n        }\\r\\n        pools[_poolId].withdrawn += amount;\\r\\n        emit Withdrawn(_poolId, _position, _account, amount);\\r\\n    }\\r\\n\\r\\n    function _lock(address _to, uint256 _amount) internal {\\r\\n        uint256 _poolId = Counters.current(_poolIndex);\\r\\n\\r\\n        Pool storage pool = pools[_poolId];\\r\\n\\r\\n        uint256 l = pool.users.length;\\r\\n        if (l == 0) {\\r\\n            pool.users.push(\\r\\n                User({account: _to, balance: _amount, paid: false, leftId: 0})\\r\\n            );\\r\\n            emit PoolCreated(_poolId);\\r\\n        } else {\\r\\n            for (uint256 i; i < l; i++) {\\r\\n                if (pool.users[i].account != _to && l - 1 == i) {\\r\\n                    pool.users.push(\\r\\n                        User({\\r\\n                            account: _to,\\r\\n                            balance: _amount,\\r\\n                            paid: false,\\r\\n                            leftId: 0\\r\\n                        })\\r\\n                    );\\r\\n\\r\\n                    if (pools[_poolId].users.length == 100) {\\r\\n                        Counters.increment(_poolIndex);\\r\\n                    }\\r\\n                } else if (pool.users[i].account == _to) {\\r\\n                    pool.users[i].balance += _amount;\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        emit Deposited(_poolId, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function _payBonus(\\r\\n        uint256 _poolId,\\r\\n        uint256 _position,\\r\\n        uint256 _bonus\\r\\n    ) internal {\\r\\n        if (_position <= 20 && _position > 15) {\\r\\n            pools[_poolId].bonusesPaid[0] += _bonus;\\r\\n        } else if (_position <= 15 && _position > 10) {\\r\\n            pools[_poolId].bonusesPaid[1] += _bonus;\\r\\n        } else if (_position <= 10 && _position > 5) {\\r\\n            pools[_poolId].bonusesPaid[2] += _bonus;\\r\\n        } else if (_position <= 5 && _position > 0) {\\r\\n            pools[_poolId].bonusesPaid[3] += _bonus;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _countBonuses(\\r\\n        uint256 _poolId,\\r\\n        uint256 _position,\\r\\n        uint256 _balance,\\r\\n        uint256 _withheld\\r\\n    ) internal view returns (uint256 bonus) {\\r\\n        uint256 totalTokensBonus;\\r\\n        if (_position <= 20 && _position > 15) {\\r\\n            // 81-85\\r\\n            totalTokensBonus = totalLockedPoolTokensFrom(_poolId, 81);\\r\\n            bonus = _balance\\r\\n                .mul(percentFrom(20, _withheld))\\r\\n                .div(totalTokensBonus, \\\"Total tokens bonus div\\\");\\r\\n        } else if (_position <= 15 && _position > 10) {\\r\\n            // 86-90\\r\\n            totalTokensBonus = totalLockedPoolTokensFrom(_poolId, 86);\\r\\n            bonus = _balance\\r\\n                .mul(\\r\\n                    percentFrom(\\r\\n                        40,\\r\\n                        _withheld.sub(\\r\\n                            pools[_poolId].bonusesPaid[0]\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n                .div(totalTokensBonus);\\r\\n        } else if (_position <= 10 && _position > 5) {\\r\\n            // 91-95\\r\\n            totalTokensBonus = totalLockedPoolTokensFrom(_poolId, 91);\\r\\n            bonus = _balance\\r\\n                .mul(\\r\\n                    percentFrom(\\r\\n                        60,\\r\\n                        _withheld.sub(\\r\\n                            pools[_poolId].bonusesPaid[0] +\\r\\n                                pools[_poolId].bonusesPaid[1]\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n                .div(totalTokensBonus);\\r\\n        } else if (_position <= 5 && _position > 0) {\\r\\n            // 100\\r\\n            if (_position == 1) {\\r\\n                return\\r\\n                    bonus = _withheld.sub(\\r\\n                        pools[_poolId].bonusesPaid[0] +\\r\\n                            pools[_poolId].bonusesPaid[1] +\\r\\n                            pools[_poolId].bonusesPaid[2] +\\r\\n                            pools[_poolId].bonusesPaid[3]\\r\\n                    );\\r\\n            }\\r\\n            // 96-99\\r\\n            totalTokensBonus = totalLockedPoolTokensFrom(_poolId, 96);\\r\\n            bonus = _balance\\r\\n                .mul(\\r\\n                    _withheld.sub(\\r\\n                        pools[_poolId].bonusesPaid[0] +\\r\\n                            pools[_poolId].bonusesPaid[1] +\\r\\n                            pools[_poolId].bonusesPaid[2]\\r\\n                    )\\r\\n                )\\r\\n                .div(totalTokensBonus);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _findMinCountReward(\\r\\n        uint256 _poolId,\\r\\n        uint256 _balance,\\r\\n        uint256 _percent\\r\\n    ) private view returns (uint256 reward, uint256 withheld) {\\r\\n        uint256 _totalTokens = totalLockedPoolTokens(_poolId);\\r\\n        uint256 deposited = percentFrom(_percent, _balance);\\r\\n        uint256 poolLeft = percentFrom(_percent, _totalTokens.sub(_balance));\\r\\n        if (poolLeft < deposited) {\\r\\n            reward = _balance.sub(poolLeft);\\r\\n            withheld = poolLeft;\\r\\n        } else {\\r\\n            reward = _balance.sub(deposited);\\r\\n            withheld = deposited;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _countReward(\\r\\n        uint256 _poolId,\\r\\n        uint256 _position,\\r\\n        uint256 _balance\\r\\n    ) internal view returns (uint256 reward, uint256 withheld) {\\r\\n        // k-70% (100 - 100-35)\\r\\n        if (_position <= 100 && _position > 65) {\\r\\n            (reward, withheld) = _findMinCountReward(_poolId, _balance, 70);\\r\\n        }\\r\\n        // k-50% (100-35 - 100-55)\\r\\n        else if (_position <= 65 && _position > 45) {\\r\\n            (reward, withheld) = _findMinCountReward(_poolId, _balance, 50);\\r\\n        }\\r\\n        // k-25% (100-55 - 100-70)\\r\\n        else if (_position <= 45 && _position > 30) {\\r\\n            (reward, withheld) = _findMinCountReward(_poolId, _balance, 25);\\r\\n        }\\r\\n        // k-0% (100-70 - 0)\\r\\n        else if (_position <= 30) {\\r\\n            reward = _balance;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _withdraw(uint256 _poolId, address _to) internal {\\r\\n        require(poolLength(_poolId) == 100, \\\"Only whole pool\\\");\\r\\n\\r\\n        Pool storage pool = pools[_poolId];\\r\\n\\r\\n        require(pool.leftTracker <= 100, \\\"Pool is empty\\\");\\r\\n\\r\\n        uint256 position = uint256(100).sub(pool.leftTracker);\\r\\n\\r\\n        uint256 l = 100;\\r\\n        for (uint256 i; i < l; i++) {\\r\\n            if (pool.users[i].account == _to) {\\r\\n                require(!pool.users[i].paid, \\\"Reward already received\\\");\\r\\n\\r\\n                pool.users[i].paid = true;\\r\\n                pool.position[position] = i;\\r\\n                pool.leftTracker++;\\r\\n                pool.users[i].leftId = pool.leftTracker;\\r\\n                _countAndWithdraw(\\r\\n                    _poolId,\\r\\n                    position,\\r\\n                    pool.users[i].account,\\r\\n                    pool.users[i].balance\\r\\n                );\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert(\\\"User not found\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrongHolder.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\ninterface IStrongHolder {\\n    function lock(address to, uint256 amount) external;\\n\\n    function withdraw(uint256 poolId) external;\\n\\n    function getPoolWithdrawPosition(uint256 poolId)\\n        external\\n        view\\n        returns (uint256 position);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INFTRewardPool.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.4;\\n\\ninterface INFTRewardPool {\\n    function log(address _caller, uint256 _withdrawPosition) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aliumToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinDepositSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"}],\"name\":\"RewardPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withheld\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_POOL_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"countReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolWithdrawPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"percentFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"poolWithheld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"leftTracker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withheldFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardPool\",\"type\":\"address\"}],\"name\":\"setNftRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"totalLockedPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leftPosition\",\"type\":\"uint256\"}],\"name\":\"totalLockedPoolTokensFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userLockedPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leftId\",\"type\":\"uint256\"}],\"internalType\":\"struct StrongHolderPool.User[]\",\"name\":\"_users\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrongHolderPool", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007c38870e93a1f959cb6c533eb10bbc3e438aac11", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}