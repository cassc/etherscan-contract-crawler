{"SourceCode": "/*\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t                                     \r\n                          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%                         \r\n                    .%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    \r\n                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                \r\n              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%             \r\n           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#          \r\n         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        \r\n       %%%%%%%%%%%%%%#         #%%%%%%%%%%%%%%%%%(         #%%%%%%%%%%%%%#      \r\n     .%%%%%%%%%%%%                 %%%%%%%%%%%                 %%%%%%%%%%%%     \r\n    %%%%%%%%%%%%,                   (%%%%%%%.                   %%%%%%%%%%%%#   \r\n   %%%%%%%%%%%%#        #%%%         %%%%%%%        *%%%*        %%%%%%%%%%%%%  \r\n  %%%%%%%%%%%%%.       #%%%%%.       #%%%%%        .%%%%%*       (%%%%%%%%%%%%/ \r\n .%%%%%%%%%%%%%.       %%%%%%.       #%%%%%        ,%%%%%(       (%%%%%%%%%%%%% \r\n %%%%%%%%%%%%%%*       %%%%%%.       #%%%%%        *%%%%%(       (%%%%%%%%%%%%%%\r\n %%%%%%%%%%%%%%%%%%%%%%%%%%%%.       #%%%%%        *%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.       #%%%%%        *%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.       #%%%%%        *%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%.       #%%%%%        *%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n %%%%%%%%%%%%%%%%%%%%%%%%%%%%.       #%%%%%        *%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n %%%%%%%%%%%%%%(       %%%%%%.       #%%%%%        *%%%%%%       #%%%%%%%%%%%%%%\r\n  %%%%%%%%%%%%%.       %%%%%%.       #%%%%%        *%%%%%/       (%%%%%%%%%%%%% \r\n  %%%%%%%%%%%%%.       #%%%%%        #%%%%%        .%%%%%(       (%%%%%%%%%%%%/ \r\n   %%%%%%%%%%%%#        #%%%.        %%%%%%%        (%%%(        %%%%%%%%%%%%#  \r\n    #%%%%%%%%%%%.                   *%%%%%%%                    %%%%%%%%%%%%/   \r\n      %%%%%%%%%%%%                 %%%%%%%%%%%                 %%%%%%%%%%%%     \r\n       %%%%%%%%%%%%%%(         (%%%%%%%%%%%%%%%%%(         #%%%%%%%%%%%%%#      \r\n         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        \r\n           #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/          \r\n              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%             \r\n                 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                \r\n                     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                    \r\n                          /%%%%%%%%%%%%%%%%%%%%%%%%%%%.       \r\nThe Collective is the vision of a decentralized marketplace for freelancers, with a predominant basis in software development and marketing.\r\n\r\nThe Collective Marketplace will bring both providers and clients together, providing alt coins a use-case environment for freelance artists, developers, \r\nand other entrepreneurs to offer their products and services to prospective clients. It will also provide the functionality of being able to accept payment in the Collective Coin, \r\nor virtually any cryptocurrency of their choice, on a case-by-case basis. \r\nBoth providers and prospective clients will also have the ability to utilize The Collective\u2019s suite of various products and services with the same payment options. \r\nWe welcome you to joins us as a new Collective member. Please come in and introduce yourself to everyone. Help us build this community together.\r\n*/\r\n\r\n/*\r\nTheCollectiveCoin to the moon\r\n\r\nTokenomics\r\n10% fee per transaction\r\n5% Goes to liquidity\r\n5% Burn\r\n\r\nSmart contract written by TheCollectiveCoin team\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\n//Basic IBEP interface including the basic methods and functions\r\n\r\ninterface IBEP20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\t\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\t\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\t\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\t\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address payable){\r\n\t\treturn payable(msg.sender);\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes memory){\r\n\t\tthis;\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context { // Basic access contract module\r\n\taddress private _owner;\r\n\taddress private _previousOwner;\r\n\tuint private _lockTime;\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor (){\r\n\t\t//address msgSender = _msgSender();\r\n\t\t_owner = 0xb8D23FcF7a399898aE9D7a070025CBc774a39b4C; //Token Creator Address Renouncement will not be required due to nature of the project\r\n\t\temit OwnershipTransferred(address(0),0xb8D23FcF7a399898aE9D7a070025CBc774a39b4C); //Token Creator Address Renouncement will not be required due to nature of the project\r\n\t}\r\n\r\n\tfunction owner() public view returns (address){\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner(){\r\n\t\trequire(_owner == _msgSender(),\"Caller is not the owner\");  //Only callable by original owner\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner{\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner{\r\n\t\trequire(newOwner != address(0),\"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner,newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\nlibrary Address{//Creates a new library with on-deploy functions\r\n\tfunction isContract(address account) internal view returns (bool){\r\n\t\t/*\r\n\t\tInstead of checking for tx > 0 Use EIP-1052 0x0 value for non yet created accounts\r\n\t\t0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 value for accounts\r\n\t\twith no code\r\n\t\t*/\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\tassembly {codehash := extcodehash(account)}\r\n\t\treturn(codehash != accountHash && codehash !=0x0);\r\n\t}\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n\t}\r\n\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n\t\tif (success) {\r\n\t\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} \r\n\r\n//Based on openzeppelin solution\r\nabstract contract ReentrancyGuard{\r\n\tuint256 private constant _NOT_ENTERED = 1;\r\n\tuint256 private constant _ENTERED = 2;\r\n\r\n\tuint256 private _status;\r\n\r\n\tconstructor () {\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n\tmodifier nonReentrant() {\r\n\t\t// On the first call to nonReentrant, _notEntered will be true\r\n\t\trequire(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n\t\t// Any calls to nonReentrant after this point will fail\r\n\t\t_status = _ENTERED;\r\n\t\t_;\r\n\r\n\t\t// By storing the original value once again, a refund is triggered (see\r\n\t\t// https://eips.ethereum.org/EIPS/eip-2200)\r\n\t\t_status = _NOT_ENTERED;\r\n\t}\r\n}\r\n\r\n//TheCollectiveCoin contract, this inherits from Context, IBEP2 standard and also uses a Reentry solution\r\ncontract TheCollective is Context, IBEP20, Ownable, ReentrancyGuard {\r\n\tusing Address for address; // makes use of the previously defined library\r\n\r\n\t// Token information.\r\n\tstring constant private _symbol = \"TCC\";\r\n\tstring constant private _name = \"TheCollectiveCoin\";\r\n\tuint8 constant private _decimals = 9;\r\n\r\n\tuint256 constant private _tTotal = 50000000000 * 10**4 * 10**9; // 500T total supply\r\n\r\n\t// Keep track of balances & allowances.\r\n\tmapping (address => uint256) private _balances;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\r\n\t// Any address in here will be excluded from fees when receiving or sending fees.\r\n\tmapping(address => bool) private _isExcludedFromFee;\r\n\r\n\tuint256 public burnFeePercent  = 0; // 5\r\n\tuint256 public prevBurnFee\t   = 5;   \r\n\r\n\tuint256 public liqFeePercent = 0; //5       \r\n\tuint256 private prevLiqFee\t = 5;\r\n\t\r\n\t// _tLiqTotal keeps track of the total amount of tokens that were\r\n\t// distributed to the liquidity pool. This also includes tokens that\r\n\t// were marked for liquidity pool but have not been added yet.\r\n\tuint256 private _tLiqTotal;\r\n\r\n\t// _tBurnTotal keeps track of the total amount of tokens that were burned.\r\n\tuint256 private _tBurnTotal;\r\n\r\n\tbool inSwapAndLiquify;\r\n\t// Swap and liquify boolean to enable auto generating liquidity.\r\n\tbool public inSwapAndLiquifyEnabled = false;\r\n\t// Will only liquify maximum 0.5% of total tokens in a single tx.\r\n\tuint256 constant maxTokensToLiquify = _tTotal / 1000 * 5;\r\n\t// Once tokens reach 0.1% of total supply, sell for liquidity.\r\n\tuint256 constant TokensToSellForLiq = _tTotal / 1000;\r\n\r\n\tIPancakeRouter02 public immutable pancakeRouter;\r\n\taddress public immutable pancakePair;\r\n\tevent SwapAndLiquify(uint256 tokensSwapped,\r\n\t\tuint256 bnbReceived,\r\n\t\tuint256 tokensIntoLiquidity\r\n\t);\r\n\r\n\tmodifier lockTheSwap{\r\n\t\tinSwapAndLiquify = true;\r\n\t\t_;\r\n\t\tinSwapAndLiquify = false;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\t// Create the token pair with WBNB on pancakeswap.\r\n\t\t// mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n\t\t// testnet: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n\t\tIPancakeRouter02 _pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\tpancakePair = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\r\n\t\tpancakeRouter = _pancakeRouter;\r\n\t\t\r\n\t\t// Mint the initial supply.\r\n\t\t_balances[msg.sender] = _tTotal;\r\n\t\temit Transfer(address(0), payable(msg.sender), _tTotal);\r\n\t}\r\n\r\n\t// Allows to get the BNB back when swapping for BNB.\r\n\treceive() external payable{}\r\n\r\n\tfunction getOwner() external view returns (address) {\r\n\t\treturn owner();\r\n\t}\r\n \r\n\tfunction decimals() external pure returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n \r\n\t//* @dev Returns the token symbol.\r\n\tfunction symbol() external pure returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n \r\n\t// * @dev Returns the token name.\r\n\tfunction name() external pure returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\t\r\n\t// * @dev See {BEP20-totalSupply}.\r\n\tfunction totalSupply() public pure override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n\t//* @dev See {BEP20-balanceOf}.\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n \r\n\t /* @dev See {BEP20-transfer}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `recipient` cannot be the zero address.\r\n\t * - the caller must have a balance of at least `amount`.*/\r\n\t\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* @dev See {BEP20-allowance}.*/\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\t /* @dev See {BEP20-approve}.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `spender` cannot be the zero address.*/\r\n\t\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\trequire(amount <= _allowances[sender][_msgSender()], \"BEP20: transfer amount exceeds allowance\");\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n\t\trequire(subtractedValue <= _allowances[_msgSender()][spender], \"BEP20: decreased allowance below zero\");\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal {\r\n\t\trequire(sender != address(0), \"BEP20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\t\t\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\trequire(senderBalance >= amount, \"BEP20: transfer amount exceeds balance\");\r\n\r\n\t\t//retrieves current balance of the contract instance\r\n\t\tuint256 currentContractBalance = balanceOf(address(this));\r\n\r\n\t\tif(currentContractBalance >= TokensToSellForLiq && \r\n\t\t\t!inSwapAndLiquify && \r\n\t\t\tsender != pancakePair && \r\n\t\t\tinSwapAndLiquifyEnabled\r\n\t\t){\r\n\t\t\tif(currentContractBalance >= maxTokensToLiquify){\r\n\t\t\t\tcurrentContractBalance = maxTokensToLiquify;\r\n\t\t\t} \r\n\t\t\tcurrentContractBalance = TokensToSellForLiq;\r\n\t\t\t\r\n\t\t\tswapAndLiquify(currentContractBalance);\r\n\t\t}\r\n\r\n\t\t// Determine if fees should be taken from the transaction.\r\n\t\tbool takeFee = true;\r\n\t\tif(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\r\n\t\tuint256 burnAmount = 0; // Amount to be burned.\r\n\t\tuint256 liqAmount = 0;  // Amount to be added to liquidity.\r\n\r\n\t\t// Determine the amount of fees to be taken.\r\n\t\tif(takeFee) {\r\n\t\t\tburnAmount = amount * burnFeePercent/100;\r\n\t\t\tliqAmount = amount * liqFeePercent/100;\r\n\t\t}\r\n\r\n\t\t// Adjust the sender and recipient balances.\r\n\t\t_balances[sender] = senderBalance - amount;\r\n\t\t_balances[recipient] += amount - burnAmount - liqAmount;\r\n\r\n\t\t// Send to burn address.\r\n\t\tif(burnAmount != 0) {\r\n\t\t\t_balances[0x000000000000000000000000000000000000dEaD] += burnAmount;\r\n\t\t\t_tBurnTotal += burnAmount;\r\n\t\t\temit Transfer(sender, 0x000000000000000000000000000000000000dEaD, burnAmount);\r\n\t\t}\r\n\r\n\t\t// Send to liquidity.\r\n\t\tif(liqAmount != 0) {\r\n\t\t\t_balances[address(this)] += liqAmount;\r\n\t\t\t_tLiqTotal += liqAmount;\r\n\t\t\temit Transfer(sender, address(this), liqAmount);\r\n\t\t}\r\n\t\t\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\t\r\n\tfunction isExcludedFromFees(address account) public virtual returns (bool) {\r\n\t\treturn _isExcludedFromFee[account];\r\n\t}\r\n\r\n\tfunction totalLiquidityTokens() external view returns(uint256){\r\n\t\treturn _tLiqTotal;\r\n\t}\r\n\r\n\tfunction totalBurn() external view returns (uint256){\r\n\t\treturn _tBurnTotal;\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal {\r\n\t\trequire(owner != address(0), \"BEP20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\t// This functions disables all fees.\r\n\tfunction stopFees() external onlyOwner() {\r\n\t\tif(burnFeePercent == 0 && liqFeePercent == 0) return;\r\n\t\t\r\n\t\tprevBurnFee = burnFeePercent;\r\n\t\tburnFeePercent = 0;\r\n\r\n\t\tprevLiqFee = liqFeePercent;\r\n\t\tliqFeePercent = 0;\r\n\t}\r\n\r\n\t// Restore fees to their previous amounts.\r\n\tfunction restoreFees() public onlyOwner(){\r\n\t\tif(burnFeePercent > 0 && liqFeePercent > 0) return;\r\n\t\tburnFeePercent = prevBurnFee;\r\n\t\tliqFeePercent = prevLiqFee;\r\n\t}\r\n\r\n\t// Initilize tokenomics, enabling fees and enabling swap and liquify.\r\n\tfunction InitializeTokenomics() external onlyOwner() {\r\n\t\trestoreFees();\r\n\t\tinSwapAndLiquifyEnabled = true;\r\n\t}\r\n\r\n\tfunction setSwapAndLiquify(bool enabled) external onlyOwner() {\r\n\t\tinSwapAndLiquifyEnabled = enabled;\r\n\t}\r\n\r\n\tfunction swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n\t\tuint256 half = contractTokenBalance / 2;\r\n\t\tuint256 otherHalf = contractTokenBalance - half;\r\n\t\tuint256 initialBalance = address(this).balance;\r\n\r\n\t\tswapTokensForBNB(half);\r\n\t\tuint256 newBalance = address(this).balance - (initialBalance); \r\n\r\n\t\taddLiquidity(otherHalf, newBalance);\r\n\t\temit SwapAndLiquify(half,newBalance,otherHalf);\r\n\t}\r\n\r\n\tfunction swapTokensForBNB(uint256 tokenAmount) private{\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = pancakeRouter.WETH();\r\n\t\t_approve(address(this), address(pancakeRouter), tokenAmount);\r\n\r\n\t\tpancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // Accept any amount of BNB.\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addLiquidity(uint256 tokenAmount,uint256 bnbAmount) private{\r\n\t\t_approve(address(this), address(pancakeRouter), tokenAmount);\r\n\r\n\t\tpancakeRouter.addLiquidityETH{value:bnbAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\towner(),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n}\r\n\r\ninterface IPancakeFactory{\r\n\t\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\t\tfunction feeTo() external view returns (address);\r\n\t\tfunction feeToSetter() external view returns (address);\r\n\r\n\t\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\t\tfunction allPairs(uint) external view returns (address pair);\r\n\t\tfunction allPairsLength() external view returns (uint);\r\n\r\n\t\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\t\tfunction setFeeTo(address) external;\r\n\t\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IPancakePair{\r\n\t\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n\t\tevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\n\t\tfunction name() external pure returns (string memory);\r\n\t\tfunction symbol() external pure returns (string memory);\r\n\t\tfunction decimals() external pure returns (uint8);\r\n\t\tfunction totalSupply() external view returns (uint);\r\n\t\tfunction balanceOf(address owner) external view returns (uint);\r\n\t\tfunction allowance(address owner, address spender) external view returns (uint);\r\n\r\n\t\tfunction approve(address spender, uint value) external returns (bool);\r\n\t\tfunction transfer(address to, uint value) external returns (bool);\r\n\t\tfunction transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n\t\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\t\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\t\tfunction nonces(address owner) external view returns (uint);\r\n\r\n\t\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n\t\tevent Mint(address indexed sender, uint amount0, uint amount1);\r\n\t\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n\t\tevent Swap(\r\n\t\t\t\taddress indexed sender,\r\n\t\t\t\tuint amount0In,\r\n\t\t\t\tuint amount1In,\r\n\t\t\t\tuint amount0Out,\r\n\t\t\t\tuint amount1Out,\r\n\t\t\t\taddress indexed to\r\n\t\t);\r\n\t\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\t\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\t\tfunction factory() external view returns (address);\r\n\t\tfunction token0() external view returns (address);\r\n\t\tfunction token1() external view returns (address);\r\n\t\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\t\tfunction price0CumulativeLast() external view returns (uint);\r\n\t\tfunction price1CumulativeLast() external view returns (uint);\r\n\t\tfunction kLast() external view returns (uint);\r\n\r\n\t\tfunction mint(address to) external returns (uint liquidity);\r\n\t\tfunction burn(address to) external returns (uint amount0, uint amount1);\r\n\t\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\t\tfunction skim(address to) external;\r\n\t\tfunction sync() external;\r\n\r\n\t\tfunction initialize(address, address) external;\r\n\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n\t\tfunction factory() external pure returns (address);\r\n\t\tfunction WETH() external pure returns (address);\r\n\r\n\t\tfunction addLiquidity(\r\n\t\t\t\taddress tokenA,\r\n\t\t\t\taddress tokenB,\r\n\t\t\t\tuint amountADesired,\r\n\t\t\t\tuint amountBDesired,\r\n\t\t\t\tuint amountAMin,\r\n\t\t\t\tuint amountBMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\t\tfunction addLiquidityETH(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint amountTokenDesired,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\t\tfunction removeLiquidity(\r\n\t\t\t\taddress tokenA,\r\n\t\t\t\taddress tokenB,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountAMin,\r\n\t\t\t\tuint amountBMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint amountA, uint amountB);\r\n\t\tfunction removeLiquidityETH(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint amountToken, uint amountETH);\r\n\t\tfunction removeLiquidityWithPermit(\r\n\t\t\t\taddress tokenA,\r\n\t\t\t\taddress tokenB,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountAMin,\r\n\t\t\t\tuint amountBMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline,\r\n\t\t\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t\t) external returns (uint amountA, uint amountB);\r\n\t\tfunction removeLiquidityETHWithPermit(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline,\r\n\t\t\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t\t) external returns (uint amountToken, uint amountETH);\r\n\t\tfunction swapExactTokensForTokens(\r\n\t\t\t\tuint amountIn,\r\n\t\t\t\tuint amountOutMin,\r\n\t\t\t\taddress[] calldata path,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint[] memory amounts);\r\n\t\tfunction swapTokensForExactTokens(\r\n\t\t\t\tuint amountOut,\r\n\t\t\t\tuint amountInMax,\r\n\t\t\t\taddress[] calldata path,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint[] memory amounts);\r\n\t\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (uint[] memory amounts);\r\n\t\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n\t\texternal\r\n\t\treturns (uint[] memory amounts);\r\n\t\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n\t\texternal\r\n\t\treturns (uint[] memory amounts);\r\n\t\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (uint[] memory amounts);\r\n\r\n\t\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\t\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\t\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\t\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\t\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {  //The functions calling for ETH actually call for BNB so i could technically change the \"ETH\" for BNB.\r\n\t\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external returns (uint amountETH);\r\n\t\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\t\t\taddress token,\r\n\t\t\t\tuint liquidity,\r\n\t\t\t\tuint amountTokenMin,\r\n\t\t\t\tuint amountETHMin,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline,\r\n\t\t\t\tbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n\t\t) external returns (uint amountETH);\r\n\r\n\t\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\t\t\tuint amountIn,\r\n\t\t\t\tuint amountOutMin,\r\n\t\t\t\taddress[] calldata path,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external;\r\n\t\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\t\t\tuint amountOutMin,\r\n\t\t\t\taddress[] calldata path,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external payable;\r\n\t\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\t\tuint amountIn,\r\n\t\t\t\tuint amountOutMin,\r\n\t\t\t\taddress[] calldata path,\r\n\t\t\t\taddress to,\r\n\t\t\t\tuint deadline\r\n\t\t) external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"InitializeTokenomics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TheCollective", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3894535de2b86825ddc99303c7deee779034346a0895ac0e515d86e646c7304d"}