{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/interfaces/IERC1155Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC1155Mintable {\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenId Id of token to mint\\n     */\\n    function mintTo(address _to, uint256 _tokenId, uint256 _amount) external;\\n\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenIds Array with token ids to mint\\n     * @param _amounts Array with token amounts to mint\\n     */\\n    function mintBatchTo(address _to, uint256[] calldata _tokenIds, uint256[] calldata _amounts) external;\\n\\n    /**\\n     * @param _to Array of addresses to mint token to\\n     * @param _tokenIds Array of arrays with token ids to mint\\n     * @param _amounts Array of arrays with token amounts to mint\\n     */\\n    function mintBatchToMultiple(\\n        address[] calldata _to,\\n        uint256[][] calldata _tokenIds,\\n        uint256[][] calldata _amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/interfaces/IERC721Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC721Mintable {\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenId Id of token to mint\\n     */\\n    function mintTo(address _to, uint256 _tokenId) external;\\n\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenIds Array with token ids to mint\\n     */\\n    function mintBatchTo(address _to, uint256[] calldata _tokenIds) external;\\n\\n    /**\\n     * @param _to Array of addresses to mint tokens to\\n     * @param _tokenIds Array of arrays with token ids to mint\\n     */\\n    function mintBatchToMultiple(address[] calldata _to, uint256[][] calldata _tokenIds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/utils/DefaultRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract DefaultRoles is AccessControl {\\n    error OnlyOwner(address sender);\\n    error OnlyAdmin(address sender);\\n    error OnlyExecutor(address sender);\\n\\n    error CannotRemoveSelf(address owner);\\n\\n    error FunctionDisabled(bytes4 functionId);\\n\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\n    /**\\n     *\\n     * @param owner Address of the owner\\n     * @param admin Address of the admin\\n     * @param executors Addresses of the executors\\n     */\\n    constructor(address owner, address admin, address[] memory executors) AccessControl() {\\n        _grantRole(OWNER_ROLE, owner);\\n        _grantRole(ADMIN_ROLE, admin);\\n        _addExecutors(executors);\\n    }\\n\\n    /**\\n     *\\n     * @param owner Address of the owner to add\\n     */\\n    function addOwner(address owner) external virtual onlyOwner {\\n        _addOwner(owner);\\n    }\\n\\n    function _addOwner(address owner) internal virtual {\\n        _grantRole(OWNER_ROLE, owner);\\n    }\\n\\n    /**\\n     *\\n     * @param owner Address of the owner ro revoke\\n     */\\n    function revokeOwner(address owner) external virtual onlyOwner {\\n        if (owner == _msgSender()) {\\n            revert CannotRemoveSelf(owner);\\n        }\\n        _revokeOwner(owner);\\n    }\\n\\n    function _revokeOwner(address owner) internal virtual {\\n        _revokeRole(OWNER_ROLE, owner);\\n    }\\n\\n    /**\\n     *\\n     * @param admin Address of the admin to add\\n     */\\n    function addAdmin(address admin) external virtual onlyOwner {\\n        _addAdmin(admin);\\n    }\\n\\n    function _addAdmin(address admin) internal virtual {\\n        _grantRole(ADMIN_ROLE, admin);\\n    }\\n\\n    /**\\n     *\\n     * @param admin Address of the admin to revoke\\n     */\\n    function revokeAdmin(address admin) external virtual onlyOwner {\\n        _revokeAdmin(admin);\\n    }\\n\\n    function _revokeAdmin(address admin) internal virtual {\\n        _revokeRole(ADMIN_ROLE, admin);\\n    }\\n\\n    /**\\n     *\\n     * @param executors Addresses of the executors to add\\n     */\\n    function addExecutors(address[] calldata executors) external virtual onlyAdmin {\\n        _addExecutors(executors);\\n    }\\n\\n    /**\\n     *\\n     * @param executors Addresses of the executors to revoke\\n     */\\n    function revokeExecutors(address[] calldata executors) external virtual onlyAdmin {\\n        for (uint256 i = 0; i < executors.length; i++) {\\n            _revokeRole(EXECUTOR_ROLE, executors[i]);\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @param executors Addresses of the executors to add\\n     */\\n    function _addExecutors(address[] memory executors) internal virtual {\\n        for (uint256 i = 0; i < executors.length; i++) {\\n            _addExecutor(executors[i]);\\n        }\\n    }\\n\\n    function _addExecutor(address executor) internal virtual {\\n        _grantRole(EXECUTOR_ROLE, executor);\\n    }\\n\\n    /**\\n     * @inheritdoc AccessControl\\n     */\\n    function grantRole(bytes32, address) public virtual override {\\n        revert FunctionDisabled(AccessControl.grantRole.selector);\\n    }\\n\\n    /**\\n     * @inheritdoc AccessControl\\n     */\\n    function revokeRole(bytes32, address) public virtual override {\\n        revert FunctionDisabled(AccessControl.revokeRole.selector);\\n    }\\n\\n    /**\\n     * @inheritdoc AccessControl\\n     */\\n    function renounceRole(bytes32, address) public virtual override {\\n        revert FunctionDisabled(AccessControl.renounceRole.selector);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (!hasRole(OWNER_ROLE, _msgSender())) {\\n            revert OnlyOwner(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!hasRole(ADMIN_ROLE, _msgSender())) {\\n            revert OnlyAdmin(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    modifier onlyExecutor() {\\n        if (!hasRole(EXECUTOR_ROLE, _msgSender())) {\\n            revert OnlyExecutor(_msgSender());\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token-minter/interfaces/IBaseMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IBaseMinter {\\n    event Minted(address indexed token, address indexed to, uint256 indexed tokenId, uint256 amount);\\n\\n    error ArrayLengthMismatch();\\n}\\n\"\r\n    },\r\n    \"contracts/token-minter/interfaces/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IMinter {\\n    /******************************************************************************/\\n    /*                   Multiple tokens for multiple receivers                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Mint multiple tokens for multiple receivers\\n     * @param token address of the token to mint\\n     * @param to Addresses of the receivers\\n     * @param tokenId Array of arrays of token ids to mint\\n     * @param amounts Amounts of tokens to mint (1-1 mapping with tokenIds), empty for ERC721\\n     * @param data Data to pass to the minter (currently unused)\\n     */\\n    function mint(\\n        address token,\\n        address[] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev batch mint multiple tokens for multiple receivers\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[][] calldata to,\\n        uint256[][][] calldata tokenId,\\n        uint256[][][] calldata amounts,\\n        bytes[] calldata data\\n    ) external;\\n\\n    /******************************************************************************/\\n    /*                      Multiple tokens for one receiver                      */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Mint multiple tokens for a single receiver\\n     * @param token address of the token to mint\\n     * @param to Address of the receiver\\n     * @param tokenId Array of token ids to mint\\n     * @param amounts Amounts of tokens to mint (1-1 mapping with tokenIds), empty for ERC721\\n     * @param data Data to pass to the minter (currently unused)\\n     */\\n    function mint(\\n        address token,\\n        address to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev batch mint multiple tokens for a single receiver\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes[] calldata data\\n    ) external;\\n\\n    /******************************************************************************/\\n    /*                        One token for each receiver                         */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Mint a single token for multiple receivers\\n     * @param token address of the token to mint\\n     * @param to Addresses of the receivers\\n     * @param tokenId Id of the token to mint\\n     * @param amounts Amounts of tokens to mint (1-1 mapping with tokenIds), empty for ERC721\\n     * @param data Data to pass to the minter (currently unused)\\n     */\\n    function mint(\\n        address token,\\n        address[] calldata to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev batch mint a single token for multiple receivers\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[][] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes[] calldata data\\n    ) external;\\n\\n    /******************************************************************************/\\n    /*                         One token for one receiver                         */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Mint a single token for a single receiver\\n     * @param token address of the token to mint\\n     * @param to Address of the receiver\\n     * @param tokenId Id of the token to mint\\n     * @param amount Amount of tokens to mint, 0 for ERC721\\n     * @param data Data to pass to the minter (currently unused)\\n     */\\n    function mint(address token, address to, uint256 tokenId, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev batch mint a single token for a single receiver\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[] calldata to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes[] calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/token-minter/Minter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./interfaces/IMinter.sol\\\";\\n\\nimport \\\"./minters/TokenInfoCache.sol\\\";\\nimport \\\"./minters/ERC721Minter.sol\\\";\\nimport \\\"./minters/ERC1155Minter.sol\\\";\\n\\nimport \\\"../common/utils/DefaultRoles.sol\\\";\\n\\ncontract Minter is Pausable, DefaultRoles, TokenInfoCache, ERC721Minter, ERC1155Minter, IMinter {\\n    /**\\n     * @dev Initialize the contract\\n     * @param owner Address of the owner\\n     * @param admin Address of the admin\\n     * @param minters Addresses of the minters\\n     */\\n    constructor(\\n        address owner,\\n        address admin,\\n        address[] memory minters\\n    ) Pausable() DefaultRoles(owner, admin, minters) {}\\n\\n    /******************************************************************************/\\n    /*                   Multiple tokens for multiple receivers                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc IMinter\\n     */\\n    function mint(\\n        address token,\\n        address[] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes calldata data\\n    ) external override onlyExecutor whenNotPaused {\\n        _mint(token, to, tokenId, amounts, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IMinter\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[][] calldata to,\\n        uint256[][][] calldata tokenId,\\n        uint256[][][] calldata amounts,\\n        bytes[] calldata data\\n    ) external onlyExecutor whenNotPaused {\\n        uint256 length = token.length;\\n        if (length != to.length || length != tokenId.length || length != amounts.length || length != data.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        for (uint256 i = 0; i < length; i++) {\\n            _mint(token[i], to[i], tokenId[i], amounts[i], data[i]);\\n        }\\n    }\\n\\n    function _mint(\\n        address token,\\n        address[] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes calldata data\\n    ) internal {\\n        TokenType tokenType = _determineTokenType(token);\\n        if (tokenType == TokenType.ERC721) {\\n            _mintERC721(token, to, tokenId, data);\\n        }\\n        if (tokenType == TokenType.ERC1155) {\\n            _mintERC1155(token, to, tokenId, amounts, data);\\n        }\\n    }\\n\\n    /******************************************************************************/\\n    /*                      Multiple tokens for one receiver                      */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc IMinter\\n     */\\n    function mint(\\n        address token,\\n        address to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override onlyExecutor whenNotPaused {\\n        _mint(token, to, tokenId, amounts, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IMinter\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes[] calldata data\\n    ) external onlyExecutor whenNotPaused {\\n        uint256 length = token.length;\\n        if (length != to.length || length != tokenId.length || length != amounts.length || length != data.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        for (uint256 i = 0; i < token.length; i++) {\\n            _mint(token[i], to[i], tokenId[i], amounts[i], data[i]);\\n        }\\n    }\\n\\n    function _mint(\\n        address token,\\n        address to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal {\\n        address[] memory to_ = new address[](1);\\n        to_[0] = to;\\n        uint256[][] memory tokenId_ = new uint256[][](1);\\n        tokenId_[0] = tokenId;\\n        uint256[][] memory amounts_ = new uint256[][](1);\\n        amounts_[0] = amounts;\\n\\n        TokenType tokenType = _determineTokenType(token);\\n\\n        if (tokenType == TokenType.ERC721) {\\n            _mintERC721(token, to, tokenId, data);\\n        }\\n        if (tokenType == TokenType.ERC1155) {\\n            _mintERC1155(token, to, tokenId, amounts, data);\\n        }\\n    }\\n\\n    /******************************************************************************/\\n    /*                        One token for each receiver                         */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc IMinter\\n     */\\n    function mint(\\n        address token,\\n        address[] calldata to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external override onlyExecutor whenNotPaused {\\n        _mint(token, to, tokenId, amounts, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IMinter\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[][] calldata to,\\n        uint256[][] calldata tokenId,\\n        uint256[][] calldata amounts,\\n        bytes[] calldata data\\n    ) external onlyExecutor whenNotPaused {\\n        uint256 length = token.length;\\n        if (length != to.length || length != tokenId.length || length != amounts.length || length != data.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        for (uint256 i = 0; i < token.length; i++) {\\n            _mint(token[i], to[i], tokenId[i], amounts[i], data[i]);\\n        }\\n    }\\n\\n    function _mint(\\n        address token,\\n        address[] calldata to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) internal {\\n        TokenType tokenType = _determineTokenType(token);\\n\\n        if (tokenType == TokenType.ERC721) {\\n            _mintERC721(token, to, tokenId, data);\\n        }\\n        if (tokenType == TokenType.ERC1155) {\\n            _mintERC1155(token, to, tokenId, amounts, data);\\n        }\\n    }\\n\\n    /******************************************************************************/\\n    /*                         One token for one receiver                         */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc IMinter\\n     */\\n    function mint(\\n        address token,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override onlyExecutor whenNotPaused {\\n        _mint(token, to, tokenId, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IMinter\\n     */\\n    function batchMint(\\n        address[] calldata token,\\n        address[] calldata to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amounts,\\n        bytes[] calldata data\\n    ) external onlyExecutor whenNotPaused {\\n        uint256 length = token.length;\\n        if (length != to.length || length != tokenId.length || length != amounts.length || length != data.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        for (uint256 i = 0; i < token.length; i++) {\\n            _mint(token[i], to[i], tokenId[i], amounts[i], data[i]);\\n        }\\n    }\\n\\n    function _mint(address token, address to, uint256 tokenId, uint256 amount, bytes calldata data) internal {\\n        TokenType tokenType = _determineTokenType(token);\\n\\n        if (tokenType == TokenType.ERC721) {\\n            _mintERC721(token, to, tokenId, data);\\n        }\\n        if (tokenType == TokenType.ERC1155) {\\n            _mintERC1155(token, to, tokenId, amount, data);\\n        }\\n    }\\n\\n    /******************************************************************************/\\n    /*                            PausableUpgradeable                             */\\n    /******************************************************************************/\\n\\n    /**\\n     * @dev Pause the contract\\n     */\\n    function pause() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract\\n     */\\n    function unpause() external onlyAdmin {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token-minter/minters/ERC1155Minter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IBaseMinter.sol\\\";\\n\\nimport \\\"../../common/tokens/interfaces/IERC1155Mintable.sol\\\";\\n\\nabstract contract ERC1155Minter is IBaseMinter {\\n    function _mintERC1155(address token, address to, uint256 tokenId, uint256 amount, bytes calldata) internal {\\n        emit Minted(token, to, tokenId, amount);\\n\\n        IERC1155Mintable(token).mintTo(to, tokenId, amount);\\n    }\\n\\n    function _mintERC1155(\\n        address token,\\n        address to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amount,\\n        bytes calldata\\n    ) internal {\\n        if (tokenId.length != amount.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n\\n        // Mint tokens\\n        for (uint256 id = 0; id < tokenId.length; id++) {\\n            emit Minted(token, to, tokenId[id], amount[id]);\\n        }\\n\\n        IERC1155Mintable(token).mintBatchTo(to, tokenId, amount);\\n    }\\n\\n    function _mintERC1155(\\n        address token,\\n        address[] calldata to,\\n        uint256[] calldata tokenId,\\n        uint256[] calldata amount,\\n        bytes calldata\\n    ) internal {\\n        if (to.length != tokenId.length || to.length != amount.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n\\n        uint256[][] memory tokenIds = new uint256[][](to.length);\\n        uint256[][] memory amounts = new uint256[][](to.length);\\n\\n        for (uint256 i = 0; i < to.length; i++) {\\n            tokenIds[i] = new uint256[](1);\\n            amounts[i] = new uint256[](1);\\n\\n            tokenIds[i][0] = tokenId[i];\\n            amounts[i][0] = amount[i];\\n        }\\n\\n        // Mint tokens\\n        for (uint256 id = 0; id < to.length; id++) {\\n            emit Minted(token, to[id], tokenId[id], amount[id]);\\n        }\\n\\n        IERC1155Mintable(token).mintBatchToMultiple(to, tokenIds, amounts);\\n    }\\n\\n    /**\\n     * @dev Function to mint tokens\\n     * @param token address of the token to mint\\n     * @param to address of the receivers\\n     * @param tokenIds ids of the tokens to mint\\n     * @param amounts amount of tokens to mint\\n     */\\n    function _mintERC1155(\\n        address token,\\n        address[] calldata to,\\n        uint256[][] calldata tokenIds,\\n        uint256[][] calldata amounts,\\n        bytes calldata\\n    ) internal {\\n        if (to.length != tokenIds.length || to.length != amounts.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n\\n        uint256 length = to.length;\\n        // Mint tokens\\n        for (uint256 id = 0; id < length; id++) {\\n            if (tokenIds[id].length != amounts[id].length) {\\n                revert ArrayLengthMismatch();\\n            }\\n\\n            for (uint256 iid = 0; iid < tokenIds.length; iid++) {\\n                emit Minted(token, to[iid], tokenIds[id][iid], amounts[id][iid]);\\n            }\\n        }\\n\\n        IERC1155Mintable(token).mintBatchToMultiple(to, tokenIds, amounts);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token-minter/minters/ERC721Minter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../../common/tokens/interfaces/IERC721Mintable.sol\\\";\\n\\nimport \\\"../interfaces/IBaseMinter.sol\\\";\\n\\nabstract contract ERC721Minter is IBaseMinter {\\n    /**\\n     * This one is used to mint a single token for a single receiver\\n     * @param token Address of the token to mint\\n     * @param to Address of the receiver\\n     * @param tokenId Id of the token to mint\\n     */\\n    function _mintERC721(address token, address to, uint256 tokenId, bytes calldata) internal {\\n        emit Minted(token, to, tokenId, 1);\\n\\n        IERC721Mintable(token).mintTo(to, tokenId);\\n    }\\n\\n    /**\\n     * This one is used to mint multiple tokens for a single receiver\\n     * @param token Address of the token to mint\\n     * @param to Address of the receiver\\n     * @param tokenId Id of the token to mint\\n     */\\n    function _mintERC721(address token, address to, uint256[] calldata tokenId, bytes calldata) internal {\\n        for (uint256 id = 0; id < tokenId.length; id++) {\\n            emit Minted(token, to, tokenId[id], 1);\\n        }\\n\\n        IERC721Mintable(token).mintBatchTo(to, tokenId);\\n    }\\n\\n    /**\\n     * This one is used to mint a single token for multiple receivers\\n     * @param token Address of the token to mint\\n     * @param to Address of the receiver\\n     * @param tokenId Id of the token to mint\\n     */\\n    function _mintERC721(address token, address[] calldata to, uint256[] calldata tokenId, bytes calldata) internal {\\n        if (to.length != tokenId.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n\\n        // Mint tokens\\n        for (uint256 id = 0; id < to.length; id++) {\\n            emit Minted(token, to[id], tokenId[id], 1);\\n        }\\n\\n        for (uint256 id = 0; id < to.length; id++) {\\n            IERC721Mintable(token).mintTo(to[id], tokenId[id]);\\n        }\\n    }\\n\\n    /**\\n     * This one is used to mint multiple tokens for multiple receivers\\n     * @param token Address of the token to mint\\n     * @param to Address of the receiver\\n     * @param tokenIds Id of the token to mint\\n     */\\n    function _mintERC721(address token, address[] calldata to, uint256[][] calldata tokenIds, bytes calldata) internal {\\n        if (to.length != tokenIds.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n\\n        for (uint256 id = 0; id < to.length; id++) {\\n            for (uint256 i = 0; i < tokenIds[id].length; i++) {\\n                emit Minted(token, to[id], tokenIds[id][i], 1);\\n            }\\n        }\\n        IERC721Mintable(token).mintBatchToMultiple(to, tokenIds);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token-minter/minters/TokenInfoCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n// Import IERC721, IERC1155, and IERC1155Receiver from OpenZeppelin\\nimport \\\"../../common/tokens/interfaces/IERC721Mintable.sol\\\";\\nimport \\\"../../common/tokens/interfaces/IERC1155Mintable.sol\\\";\\n\\n// Import ERC165Checker from OpenZeppelin\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\ncontract TokenInfoCache {\\n    error NotSupported(address token);\\n\\n    using ERC165Checker for address;\\n\\n    enum TokenType {\\n        None,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    mapping(address => TokenType) public tokenTypes;\\n\\n    function _determineTokenType(address token) internal returns (TokenType) {\\n        TokenType tokenType = tokenTypes[token];\\n        if (tokenType == TokenType.None) {\\n            if (token.supportsInterface(type(IERC721Mintable).interfaceId)) {\\n                tokenType = TokenType.ERC721;\\n            } else if (token.supportsInterface(type(IERC1155Mintable).interfaceId)) {\\n                tokenType = TokenType.ERC1155;\\n            }\\n            if (tokenType == TokenType.None) {\\n                revert NotSupported(token);\\n            }\\n\\n            tokenTypes[token] = tokenType;\\n        }\\n        return tokenType;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CannotRemoveSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionId\",\"type\":\"bytes4\"}],\"name\":\"FunctionDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyExecutor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"executors\",\"type\":\"address[]\"}],\"name\":\"addExecutors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenId\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"to\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][][]\",\"name\":\"tokenId\",\"type\":\"uint256[][][]\"},{\"internalType\":\"uint256[][][]\",\"name\":\"amounts\",\"type\":\"uint256[][][]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"to\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenId\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenId\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"revokeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"executors\",\"type\":\"address[]\"}],\"name\":\"revokeExecutors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"revokeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTypes\",\"outputs\":[{\"internalType\":\"enum TokenInfoCache.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Minter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000380ffa08f13a8537192a49b5e2b6ab908b4b121800000000000000000000000014cee6169e57508efd055df9a474eb7ec5bf183500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000875cdb23d26a4c4058e8f3b7b9c363473b0f0f3c", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}