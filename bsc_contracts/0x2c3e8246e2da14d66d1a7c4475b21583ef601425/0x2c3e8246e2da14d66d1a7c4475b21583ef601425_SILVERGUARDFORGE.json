{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-02-08\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-11\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-03\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-08-27\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-06-06\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-05-09\r\n*/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract SILVERGUARDFORGE is  IERC721Receiver, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address public nftredeem;\r\n    uint256 public nftcombination;\r\n    \r\n    mapping (address => bool) public existinguser;\r\n          \r\n    uint256 public claimtime;\r\n        \r\n    address[] public stakers;\r\n    \r\n    mapping(uint256 => address) public nftStakeaddresses;           \r\n    mapping(uint256 => uint256) public stakingstarttingrange;\r\n    mapping(uint256 => uint256) public stakingendrange;\r\n     \r\n    uint256 public redeemstarttingrange;\r\n    uint256 public redeemendrange;\r\n      \r\n    uint256 public stakingIndex;  \r\n    uint256 public claimindex;\r\n\r\n    bool public status;           \r\n           \r\n    // mappings\r\n    mapping (address => uint256) public nftclaimtime;     \r\n    mapping (address => mapping(uint256 => uint256)) public userStaked; \r\n    \r\n    event stake(address from, address to, uint256[] id);\r\n    event unstake(address from, address to, uint256 id);\r\n    event redeem(address from, address to, uint256 id);\r\n\r\n    IERC20 public feeToken;\r\n    uint public fee;\r\n    address public feewallet;\r\n\r\n    address public nftminter = address(this);\r\n    \r\n    function stakeNft(uint256[] calldata ids) external {\r\n        \r\n        require (status == true, \"Contract not active\");\r\n        require (nftclaimtime[msg.sender] ==0, \"Already Staked\");\r\n        require (existinguser[msg.sender] == false, \"Already staked\");\r\n        require (ids.length == nftcombination, \"Incorrect no of tokens Ids\");\r\n        \r\n        if (existinguser[msg.sender] == false) {\r\n            existinguser[msg.sender] = true;\r\n            stakers.push(msg.sender);\r\n        }\r\n        \r\n        for (uint256 i=0; i<nftcombination; i++) {\r\n                     \r\n           require (ids[i] >= stakingstarttingrange[i] && ids[i] <= stakingendrange[i], \"Incorrect token id \");\r\n           IERC721 nft; \r\n           nft = IERC721(nftStakeaddresses[i]);      \r\n           require(nft.ownerOf(ids[i]) == msg.sender, \"Sender has to be owner of the token.\");   \r\n           nft.safeTransferFrom(msg.sender, address(this), ids[i]);     \r\n           userStaked[msg.sender][i] = ids[i];    \r\n        }   \r\n        \r\n         nftclaimtime[msg.sender] = block.timestamp.add(claimtime);\r\n         stakingIndex += 1;\r\n        \r\n        // takeFee\r\n        feeToken.transferFrom(msg.sender,feewallet,fee); \r\n    \r\n     emit stake(msg.sender, address(this), ids);    \r\n    }\r\n    \r\n    \r\n    function emergencyunstakenft() public {\r\n        \r\n       require (nftclaimtime[msg.sender] > block.timestamp, \"Claim Time reached\");\r\n       require (existinguser[msg.sender] == true, \"No nfts staked\");\r\n       \r\n       // uint256[] memory ids; \r\n       \r\n       for (uint256 i=0; i<nftcombination; i++) {\r\n            \r\n           IERC721 nft;\r\n           nft = IERC721(nftStakeaddresses[i]);      \r\n           nft.safeTransferFrom(address(this),msg.sender , userStaked[msg.sender][i]);  \r\n        //   ids.push(userStaked[msg.sender][i+1]);\r\n           userStaked[msg.sender][i] = 0;\r\n        }\r\n \r\n       nftclaimtime[msg.sender] = 0;\r\n       stakingIndex -= 1;\r\n       \r\n       address[] memory currentstaker = stakers;\r\n       for (uint256 i=0; i< currentstaker.length; i++ ) {\r\n           \r\n            if (currentstaker[i] == msg.sender) {\r\n            \r\n             stakers[i] = stakers[stakers.length - 1];\r\n             stakers.pop();\r\n             break;\r\n        }   \r\n       }\r\n       existinguser[msg.sender] = false;\r\n    }\r\n    \r\n    \r\n    function redeemNft() public {\r\n        \r\n       IERC721 nft;\r\n       nft = IERC721(nftredeem);\r\n       \r\n       require (nftclaimtime[msg.sender] <= block.timestamp, \"Claim Time not reached\");\r\n       require (existinguser[msg.sender] == true, \"No nfts staked\");\r\n       \r\n       uint256 nftid = redeemstarttingrange + claimindex; \r\n       assert (nftid <= redeemendrange);    \r\n       \r\n       nftclaimtime[msg.sender] = 0;    \r\n       claimindex += 1;        \r\n       stakingIndex -= 1;    \r\n       \r\n        for (uint256 i=0; i<nftcombination; i++) {\r\n\r\n           userStaked[msg.sender][i] = 0;\r\n        } \r\n       nft.safeTransferFrom(nftminter, msg.sender, nftid);  \r\n       \r\n       address[] memory currentstaker = stakers;\r\n       for (uint256 i=0; i< currentstaker.length; i++ ) {\r\n           \r\n            if (currentstaker[i] == msg.sender) {\r\n            \r\n             stakers[i] = stakers[stakers.length - 1];\r\n             stakers.pop();\r\n             break;\r\n        }   \r\n       }\r\n       existinguser[msg.sender] = false;\r\n       nftclaimtime[msg.sender] = 0;\r\n       \r\n     emit redeem(address(this), msg.sender, nftid); \r\n    } \r\n    \r\n\r\n     function onERC721Received(address, address, uint, bytes calldata) public  override returns (bytes4) {\r\n        return 0x150b7a02;\r\n    }\r\n    \r\n    // function userStakedNft(address _user) public view returns (uint256[] memory _id) {\r\n        \r\n    //     uint256[] memory stakenft;\r\n        \r\n    //     for (uint256 i=0; i< nftcombination; i++) {\r\n    //       stakenft[i] = userStaked[_user][i+1];\r\n    //     }\r\n    //     return stakenft;\r\n    // }\r\n    \r\n\r\n    function changesredeemrange(uint256 _start, uint256 _end) public onlyOwner {\r\n        \r\n     require (_end > _start , \"Incorrect range\");  \r\n     \r\n     redeemstarttingrange = _start;\r\n     redeemendrange = _end;\r\n     claimindex = 0;\r\n     \r\n    }\r\n    \r\n    function changeClaimTime(uint256 _newtime) public onlyOwner {\r\n        \r\n     claimtime = _newtime;\r\n    }\r\n    \r\n    \r\n    function changeStatus(bool _status) public onlyOwner {\r\n        status = _status;\r\n    }\r\n    \r\n    function withdrawAdmin(address _nftaddress, uint256 _id, address admin) external onlyOwner {\r\n          \r\n      IERC721 nft;\r\n      nft = IERC721(_nftaddress);  \r\n     \r\n      nft.safeTransferFrom(address(this), admin, _id); \r\n    }\r\n    \r\n    function batchwithdrawAdmin(address _nftaddress, address admin, uint256[] calldata ids) external onlyOwner {\r\n      \r\n      IERC721 nft;\r\n      nft = IERC721(_nftaddress); \r\n      \r\n      for (uint256 i = 0; i < ids.length; i++) {\r\n      \r\n      nft.safeTransferFrom(address(this), admin, ids[i]); \r\n      }\r\n    }\r\n    \r\n    \r\n    \r\n    function reset() external onlyOwner {\r\n        \r\n    //  IERC721 nftr;\r\n    //  nftr = IERC721(nftredeem);  \r\n     \r\n    //  require (nftr.balanceOf(address(this)) == 0 , \"Contract not empty\");\r\n     \r\n      for (uint256 i=0; i<nftcombination; i++) {\r\n\r\n           IERC721 nft;\r\n           nft = IERC721(nftStakeaddresses[i]);\r\n           require (nft.balanceOf(address(this)) == 0 , \"Contract not empty\");\r\n           nftStakeaddresses[i] = 0x0000000000000000000000000000000000000000;\r\n           stakingstarttingrange[i] = 0;\r\n           stakingendrange[i] = 0;\r\n        } \r\n     \r\n     \r\n       address[] memory currentstaker = stakers;\r\n       for (uint256 i=0; i< currentstaker.length; i++ ) {\r\n           \r\n          nftclaimtime[currentstaker[i]] =0;\r\n          existinguser[currentstaker[i]] = false;\r\n          for (uint256 j=0; j<nftcombination; j++ ) {\r\n              userStaked[currentstaker[i]][j] =0;\r\n          }\r\n           \r\n       }\r\n     \r\n     redeemstarttingrange =0;\r\n     redeemendrange =0;\r\n     claimindex =0;\r\n     nftcombination =0;\r\n     claimtime =0;\r\n     stakingIndex =0;\r\n     nftredeem = 0x0000000000000000000000000000000000000000;\r\n     status =false;\r\n     \r\n     delete stakers;\r\n       \r\n    }\r\n    \r\n    \r\n    function insertNFT(uint256[] calldata ids) external onlyOwner {\r\n        \r\n      IERC721 nft;                 \r\n      nft = IERC721(nftredeem);      \r\n      \r\n      for (uint256 i = 0; i < ids.length; i++) {\r\n      nft.safeTransferFrom(msg.sender, address(this), ids[i]); \r\n      }\r\n        \r\n    }\r\n    \r\n    \r\n    function initialiaze(address _nftredeemaddress, uint256 _claimtime, uint256 _redeemstarting, uint256 _redeemend) public onlyOwner {\r\n       \r\n       require(stakingIndex == 0, \"Nft already staked\");    \r\n        \r\n       nftredeem = _nftredeemaddress;\r\n       claimtime = _claimtime;\r\n      \r\n       require (_redeemend > _redeemstarting, \"Incorrect redeem range\");\r\n       redeemstarttingrange = _redeemstarting;     \r\n       redeemendrange = _redeemend; \r\n       claimindex = 0;\r\n   }\r\n    \r\n    \r\n    function initialiazeStakingNft(address[] memory _nftaddresses, uint256[] calldata _startingrange, uint256[] calldata _endrange) external onlyOwner {\r\n       \r\n      require(stakingIndex == 0, \"Nft already staked\");        \r\n      require (_nftaddresses.length == _startingrange.length, \"Incorrect arguments\");\r\n      require (_nftaddresses.length == _endrange.length, \"Incorrect arguments\");\r\n       \r\n      for (uint256 i=0; i<_nftaddresses.length; i++) {\r\n           \r\n          nftStakeaddresses[i] = _nftaddresses[i];\r\n          stakingstarttingrange[i] = _startingrange[i];\r\n          stakingendrange[i] = _endrange[i];\r\n      }\r\n        nftcombination = _nftaddresses.length;\r\n    }\r\n\r\n    function setfeeToken(IERC20 _address) public onlyOwner{\r\n        feeToken = _address;\r\n    }\r\n\r\n    function setFee(uint _fee) public onlyOwner{\r\n        fee = _fee;\r\n    }\r\n\r\n    function setFeeWallet(address _add) public onlyOwner {\r\n        feewallet = _add;\r\n    }\r\n\r\n    function changenftredeemAddress(address _nftredeemaddress) external onlyOwner {\r\n        nftredeem = _nftredeemaddress;\r\n    }\r\n\r\n    function changenftminter(address _newminter) external onlyOwner {\r\n        nftminter = _newminter;\r\n    }\r\n    \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"batchwithdrawAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newtime\",\"type\":\"uint256\"}],\"name\":\"changeClaimTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newminter\",\"type\":\"address\"}],\"name\":\"changenftminter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftredeemaddress\",\"type\":\"address\"}],\"name\":\"changenftredeemAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"changesredeemrange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimindex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyunstakenft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"existinguser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feewallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftredeemaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemstarting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeemend\",\"type\":\"uint256\"}],\"name\":\"initialiaze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nftaddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startingrange\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endrange\",\"type\":\"uint256[]\"}],\"name\":\"initialiazeStakingNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"insertNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftStakeaddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftclaimtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftcombination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftminter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftredeem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemendrange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemstarttingrange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setfeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"stakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingendrange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingstarttingrange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"withdrawAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SILVERGUARDFORGE", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0b24494c4eb8e3def652bc242e7cc0f07b266f2677dc3eba4b99200468e0caec"}