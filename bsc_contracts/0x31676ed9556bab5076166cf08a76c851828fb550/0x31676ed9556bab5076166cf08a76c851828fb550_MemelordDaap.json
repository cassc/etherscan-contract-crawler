{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 tokens)\r\n        external\r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokens\r\n    ) external returns (bool success);\r\n\r\n    function balanceOf(address tokenOwner)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    function approve(address spender, uint256 tokens)\r\n        external\r\n        returns (bool success);\r\n\r\n    function allowance(address tokenOwner, address spender)\r\n        external\r\n        view\r\n        returns (uint256 remaining);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(\r\n        address indexed tokenOwner,\r\n        address indexed spender,\r\n        uint256 tokens\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract MemelordDaap is Owned {\r\n    using SafeMath for uint256;\r\n\r\n    address public LordTokens;\r\n    uint256 public totalStaked;\r\n    uint256 public stakingTaxRate; // Tax rate for staking in percentage - 10 = 1%\r\n    uint256 public registrationTax; // Amount of your ERC20 token paid to stake\r\n    uint256 public dailyROI; // Daily Return of Ivestment - 100 = 1%\r\n    uint256 public unstakingTaxRate; // Unstaking Tax Rate in %'s - 10 = 1%\r\n    uint256 public minimumStakeValue; // Minimum Amount of your ERC20 token that is allowed to be to staked\r\n    bool public active = true;\r\n\r\n    mapping(address => uint256) public stakes;\r\n    mapping(address => uint256) public referralRewards;\r\n    mapping(address => uint256) public referralCount;\r\n    mapping(address => uint256) public stakeRewards;\r\n    mapping(address => uint256) private lastClock;\r\n    mapping(address => bool) public registered;\r\n\r\n    event OnWithdrawal(address sender, uint256 amount);\r\n    event OnStake(address sender, uint256 amount, uint256 tax);\r\n    event OnUnstake(address sender, uint256 amount, uint256 tax);\r\n    event OnRegisterAndStake(\r\n        address stakeholder,\r\n        uint256 amount,\r\n        uint256 totalTax,\r\n        address _referrer\r\n    );\r\n\r\n    constructor(\r\n        address _token,\r\n        uint256 _stakingTaxRate,\r\n        uint256 _unstakingTaxRate,\r\n        uint256 _dailyROI,\r\n        uint256 _registrationTax,\r\n        uint256 _minimumStakeValue\r\n    ) {\r\n        LordTokens = _token;\r\n        stakingTaxRate = _stakingTaxRate;\r\n        unstakingTaxRate = _unstakingTaxRate;\r\n        dailyROI = _dailyROI;\r\n        registrationTax = _registrationTax;\r\n        minimumStakeValue = _minimumStakeValue;\r\n    }\r\n\r\n    modifier onlyRegistered() {\r\n        require(registered[msg.sender], \"Stakeholder must be registered\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyUnregistered() {\r\n        require(!registered[msg.sender], \"Stakeholder is already registered\");\r\n        _;\r\n    }\r\n\r\n    modifier whenActive() {\r\n        require(active, \"Smart contract is currently inactive\");\r\n        _;\r\n    }\r\n\r\n    function registerAndStake(uint256 _amount, address _referrer)\r\n        external\r\n        onlyUnregistered\r\n        whenActive\r\n    {\r\n        require(msg.sender != _referrer, \"Cannot refer yourself\");\r\n        require(\r\n            registered[_referrer] || _referrer == address(0),\r\n            \"Referrer must be registered/staked\"\r\n        );\r\n        require(\r\n            IERC20(LordTokens).balanceOf(msg.sender) >= _amount,\r\n            \"Must have enough balance to stake\"\r\n        );\r\n        require(\r\n            _amount >= registrationTax.add(minimumStakeValue),\r\n            \"Must send at least enough LordTokens to pay registration fee.\"\r\n        );\r\n        require(\r\n            IERC20(LordTokens).transferFrom(msg.sender, address(this), _amount),\r\n            \"Stake failed due to failed amount transfer.\"\r\n        );\r\n\r\n        uint256 finalAmount = _amount.sub(registrationTax);\r\n        uint256 stakingTax = stakingTaxRate.mul(finalAmount).div(1000);\r\n\r\n        if (_referrer != address(0)) {\r\n            referralCount[_referrer]++;\r\n            referralRewards[_referrer] = referralRewards[_referrer].add(\r\n                stakingTax\r\n            );\r\n        }\r\n\r\n        registered[msg.sender] = true;\r\n        lastClock[msg.sender] = block.timestamp;\r\n        totalStaked = totalStaked.add(finalAmount).sub(stakingTax);\r\n        stakes[msg.sender] = stakes[msg.sender].add(finalAmount).sub(\r\n            stakingTax\r\n        );\r\n\r\n        emit OnRegisterAndStake(\r\n            msg.sender,\r\n            _amount,\r\n            registrationTax.add(stakingTax),\r\n            _referrer\r\n        );\r\n    }\r\n\r\n    function calculateEarnings(address _stakeholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 activeDays = (block.timestamp.sub(lastClock[_stakeholder])).div(\r\n            86400\r\n        );\r\n        return stakes[_stakeholder].mul(dailyROI).mul(activeDays).div(10000);\r\n    }\r\n\r\n    function stake(uint256 _amount) external onlyRegistered whenActive {\r\n        require(\r\n            _amount >= minimumStakeValue,\r\n            \"Amount is below minimum stake value.\"\r\n        );\r\n        require(\r\n            IERC20(LordTokens).balanceOf(msg.sender) >= _amount,\r\n            \"Must have enough balance to stake\"\r\n        );\r\n        require(\r\n            IERC20(LordTokens).transferFrom(msg.sender, address(this), _amount),\r\n            \"Stake failed due to failed amount transfer.\"\r\n        );\r\n\r\n        uint256 stakingTax = stakingTaxRate.mul(_amount).div(1000);\r\n        uint256 afterTax = _amount.sub(stakingTax);\r\n\r\n        stakeRewards[msg.sender] = stakeRewards[msg.sender].add(\r\n            calculateEarnings(msg.sender)\r\n        );\r\n        uint256 remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(\r\n            86400\r\n        );\r\n        lastClock[msg.sender] = block.timestamp.sub(remainder);\r\n        stakes[msg.sender] = stakes[msg.sender].add(afterTax);\r\n\r\n        emit OnStake(msg.sender, afterTax, stakingTax);\r\n    }\r\n\r\n    function unstake(uint256 _amount) external onlyRegistered {\r\n        require(\r\n            _amount <= stakes[msg.sender] && _amount > 0,\r\n            \"Insufficient balance to unstake\"\r\n        );\r\n        uint256 unstakingTax = unstakingTaxRate.mul(_amount).div(1000);\r\n        uint256 afterTax = _amount.sub(unstakingTax);\r\n\r\n        stakeRewards[msg.sender] = stakeRewards[msg.sender].add(\r\n            calculateEarnings(msg.sender)\r\n        );\r\n        uint256 remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(\r\n            86400\r\n        );\r\n        lastClock[msg.sender] = block.timestamp.sub(remainder);\r\n        stakes[msg.sender] = stakes[msg.sender].sub(_amount);\r\n\r\n        if (stakes[msg.sender] == 0) {\r\n            registered[msg.sender] = false;\r\n        }\r\n\r\n        IERC20(LordTokens).transfer(msg.sender, afterTax);\r\n        emit OnUnstake(msg.sender, _amount, unstakingTax);\r\n    }\r\n\r\n    function withdrawEarnings() external returns (bool success) {\r\n        uint256 totalReward = referralRewards[msg.sender]\r\n            .add(stakeRewards[msg.sender])\r\n            .add(calculateEarnings(msg.sender));\r\n        require(totalReward > 0, \"No reward to withdraw\");\r\n        require(\r\n            IERC20(LordTokens).balanceOf(address(this)).sub(totalStaked) >=\r\n                totalReward,\r\n            \"Insufficient LordTokens balance in pool\"\r\n        );\r\n\r\n        stakeRewards[msg.sender] = 0;\r\n        referralRewards[msg.sender] = 0;\r\n        referralCount[msg.sender] = 0;\r\n        uint256 remainder = (block.timestamp.sub(lastClock[msg.sender])).mod(\r\n            86400\r\n        );\r\n        lastClock[msg.sender] = block.timestamp.sub(remainder);\r\n\r\n        IERC20(LordTokens).transfer(msg.sender, totalReward);\r\n        emit OnWithdrawal(msg.sender, totalReward);\r\n        return true;\r\n    }\r\n\r\n    function rewardPool() external view onlyOwner returns (uint256 claimable) {\r\n        return IERC20(LordTokens).balanceOf(address(this)).sub(totalStaked);\r\n    }\r\n\r\n    function changeActiveStatus() external onlyOwner {\r\n        active = !active;\r\n    }\r\n\r\n    function setStakingTaxRate(uint256 _stakingTaxRate) external onlyOwner {\r\n        stakingTaxRate = _stakingTaxRate;\r\n    }\r\n\r\n    function setUnstakingTaxRate(uint256 _unstakingTaxRate) external onlyOwner {\r\n        unstakingTaxRate = _unstakingTaxRate;\r\n    }\r\n\r\n    function setDailyROI(uint256 _dailyROI) external onlyOwner {\r\n        dailyROI = _dailyROI;\r\n    }\r\n\r\n    function setRegistrationTax(uint256 _registrationTax) external onlyOwner {\r\n        registrationTax = _registrationTax;\r\n    }\r\n\r\n    function setMinimumStakeValue(uint256 _minimumStakeValue)\r\n        external\r\n        onlyOwner\r\n    {\r\n        minimumStakeValue = _minimumStakeValue;\r\n    }\r\n\r\n    function filter(uint256 _amount) external onlyOwner returns (bool success) {\r\n        require(\r\n            IERC20(LordTokens).balanceOf(address(this)).sub(totalStaked) >=\r\n                _amount,\r\n            \"Insufficient LordTokens balance in pool\"\r\n        );\r\n        IERC20(LordTokens).transfer(msg.sender, _amount);\r\n        emit OnWithdrawal(msg.sender, _amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakingTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registrationTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStakeValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"OnRegisterAndStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"OnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"OnUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LordTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"calculateEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeActiveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"filter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"registerAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"}],\"name\":\"setDailyROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakeValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_registrationTax\",\"type\":\"uint256\"}],\"name\":\"setRegistrationTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingTaxRate\",\"type\":\"uint256\"}],\"name\":\"setStakingTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakingTaxRate\",\"type\":\"uint256\"}],\"name\":\"setUnstakingTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MemelordDaap", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f0d0b05e14070e4f83e4d8ef6f51f9942734bd8000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000007d0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://af4178a38dd013272f332b655e21e9552460a5f5aae994a0655dcbf18886f105"}