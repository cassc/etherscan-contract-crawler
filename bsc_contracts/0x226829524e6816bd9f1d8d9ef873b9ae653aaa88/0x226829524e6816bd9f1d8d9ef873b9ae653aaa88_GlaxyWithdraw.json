{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\ncontract GlaxyWithdraw {\r\n    address[] private owners;\r\n    IBEP20 public token;\r\n    IBEP20 public usdtToken;\r\n    bool public paused;\r\n\r\n   \r\n    // Mapping to track withdrawal requests and approvals\r\n    mapping(address => uint256) public withdrawalRequests;\r\n    mapping(address => bool) public withdrawalApprovals;\r\n    mapping(address => bool) private isOwner;\r\n    mapping(address => bool) public frozenAccount;\r\n\r\n        // Event to signal withdrawal request\r\n    event WithdrawalRequested(address indexed requester, uint256 tokenAmount);\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n   \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n            // Modifier to restrict access to owners only\r\n   modifier onlyOwner() {\r\n        require(isOwner[msg.sender], \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenAddress, address _usdtTokenAddress , address[] memory _initialOwners) {\r\n        token = IBEP20(_tokenAddress);\r\n        usdtToken = IBEP20(_usdtTokenAddress);\r\n          for (uint256 i = 0; i < _initialOwners.length; i++) {\r\n            address owner = _initialOwners[i];\r\n            require(owner != address(0), \"Invalid owner address\");\r\n            require(!isOwner[owner], \"Duplicate owner\");\r\n            owners.push(owner);\r\n            isOwner[owner] = true;\r\n        }\r\n    }\r\n\r\n    // Function to transfer ownership\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Invalid new owner address\");\r\n        require(!isOwner[_newOwner], \"Duplicate owner\");\r\n\r\n        address previousOwner = msg.sender;\r\n        isOwner[previousOwner] = false;\r\n        owners.push(_newOwner);\r\n        \r\n        isOwner[_newOwner] = true;\r\n     \r\n        emit OwnershipTransferred(previousOwner, _newOwner);\r\n    }\r\n\r\n\r\n    // Function to get the current owners\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function setPause(bool _value) public onlyOwner {\r\n        paused = _value;\r\n    }\r\n\r\n    function getTokenBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getUSDTBalance() public view returns (uint256) {\r\n        return usdtToken.balanceOf(address(this));\r\n    }\r\n\r\n\r\n    function withdrawTokens(uint256 _tokenAmount) external onlyOwner {\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(\r\n            tokenBalance >= _tokenAmount,\r\n            \"Insufficient token balance in the contract\"\r\n        );\r\n\r\n        bool transferSuccess = token.transfer(msg.sender, _tokenAmount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n    }\r\n\r\n     // Function to request a withdrawal\r\n    function requestWithdrawal(uint256 _tokenAmount) external {\r\n \r\n        require(!paused, \"Withdraw is paused!\");\r\n        require(_tokenAmount > 0, \"Invalid token amount\");\r\n        require(!frozenAccount[msg.sender], \"Account has been frozen by the admin\");\r\n\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(\r\n            tokenBalance >= _tokenAmount,\r\n            \"Insufficient token balance in the contract\"\r\n        );\r\n\r\n        // Mark the withdrawal request and emit an event\r\n        withdrawalRequests[msg.sender] = _tokenAmount;\r\n               // Mark the withdrawal as approved\r\n        withdrawalApprovals[msg.sender] = true;\r\n        emit WithdrawalRequested(msg.sender, _tokenAmount);\r\n    }\r\n     // Function for admin to approve withdrawal requests\r\n    function approveWithdrawal(address _requester) external onlyOwner {\r\n        require(withdrawalRequests[_requester] > 0, \"No pending withdrawal request\");\r\n\r\n        // Proceed with the withdrawal\r\n        uint256 tokenAmount = withdrawalRequests[_requester];\r\n        bool transferSuccess = token.transfer(_requester, tokenAmount);\r\n        require(transferSuccess, \"Token transfer failed\");\r\n\r\n        // Reset the withdrawal request\r\n        withdrawalRequests[_requester] = 0;\r\n        withdrawalApprovals[_requester] = false;\r\n    }\r\n\r\n    function withdrawUSDT(uint256 _usdtAmount) external onlyOwner {\r\n        require(_usdtAmount > 0, \"Invalid USDT amount\");\r\n\r\n        uint256 usdtBalance = usdtToken.balanceOf(address(this));\r\n        require(\r\n            usdtBalance >= _usdtAmount,\r\n            \"Insufficient USDT balance in the contract\"\r\n        );\r\n\r\n        bool transferSuccess = usdtToken.transfer(msg.sender, _usdtAmount);\r\n        require(transferSuccess, \"USDT transfer failed\");\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) public onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialOwners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"approveWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GlaxyWithdraw", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001b20cbfddaf63c6429c9f2a28c4a1e24b820801600000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c43fc9808d09de41ac2e5ba9ddc75cf30b048fb200000000000000000000000068eed02f7a1bb4155794afcda54acec99eb06186", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://036941f530495514a078e862362d5b0f438b3a6825086c52b00a85b884dcdcd2"}