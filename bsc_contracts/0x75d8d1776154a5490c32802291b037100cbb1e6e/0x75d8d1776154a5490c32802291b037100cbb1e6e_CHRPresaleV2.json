{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CHRPresale.v2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport \\\"./openzeppelin/access/Ownable.sol\\\";\\nimport \\\"./openzeppelin/security/Pausable.sol\\\";\\nimport \\\"./openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport \\\"./openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"./openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IChainlinkPriceFeed.sol\\\";\\nimport \\\"./interfaces/IPresale.sol\\\";\\nimport \\\"./interfaces/IPresale.v1.sol\\\";\\n\\n/// @title Presale contract for Chancer token\\ncontract CHRPresaleV2 is IPresale, Pausable, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Address of token contract\\n    address public immutable saleToken;\\n\\n    /// @notice Address of BUSD token\\n    IERC20 public immutable busdToken;\\n\\n    /// @notice Address of chainlink BNB/USD price feed\\n    IChainlinkPriceFeed public immutable oracle;\\n\\n    /// @notice Last stage index\\n    uint8 public constant MAX_STAGE_INDEX = 11;\\n\\n    /// @notice Address of presale v1\\n    IPresaleV1 public presaleV1;\\n\\n    /// @notice Total amount of purchased tokens\\n    uint256 public totalTokensSold;\\n\\n    /// @notice Timestamp when purchased tokens claim starts\\n    uint256 public claimStartTime;\\n\\n    /// @notice Timestamp when presale starts\\n    uint256 public saleStartTime;\\n\\n    /// @notice Timestamp when presale ends\\n    uint256 public saleEndTime;\\n\\n    /// @notice Array representing cap values of totalTokensSold for each presale stage\\n    uint32[12] public limitPerStage;\\n\\n    /// @notice Sale prices for each stage\\n    uint64[12] public pricePerStage;\\n\\n    /// @notice Index of current stage\\n    uint8 public currentStage;\\n\\n    /// @notice Stores the number of tokens purchased by each user that have not yet been claimed\\n    mapping(address => uint256) public _purchasedTokens;\\n\\n    /// @notice Indicates whether the user is blacklisted or not\\n    mapping(address => bool) public blacklist;\\n\\n    /// @notice Indicates whether the user already claimed or not\\n    mapping(address => bool) public hasClaimed;\\n\\n    /// @notice Indicates whether presale synchronized with v1\\n    bool private isSynchronized;\\n\\n    /// @notice Checks that it is now possible to purchase passed amount tokens\\n    /// @param amount - the number of tokens to verify the possibility of purchase\\n    modifier verifyPurchase(uint256 amount) {\\n        if (block.timestamp < saleStartTime || block.timestamp >= saleEndTime) revert InvalidTimeframe();\\n        if (amount == 0) revert BuyAtLeastOneToken();\\n        if (amount + totalTokensSold > limitPerStage[MAX_STAGE_INDEX])\\n            revert PresaleLimitExceeded(limitPerStage[MAX_STAGE_INDEX] - totalTokensSold);\\n        _;\\n    }\\n\\n    /// @notice Verifies that the sender isn't blacklisted\\n    modifier notBlacklisted() {\\n        if (blacklist[_msgSender()]) revert AddressBlacklisted();\\n        _;\\n    }\\n\\n    /// @notice Creates the contract\\n    /// @param _saleToken      - Address of presailing token\\n    /// @param _oracle         - Address of Chainlink BNB/USD price feed\\n    /// @param _busd           - Address of BUSD token\\n    /// @param _limitPerStage  - Array representing cap values of totalTokensSold for each presale stage\\n    /// @param _pricePerStage  - Array of prices for each presale stage\\n    /// @param _saleStartTime  - Sale start time\\n    /// @param _saleEndTime    - Sale end time\\n    constructor(\\n        address _saleToken,\\n        address _oracle,\\n        address _busd,\\n        address _presaleV1,\\n        uint256 _saleStartTime,\\n        uint256 _saleEndTime,\\n        uint32[12] memory _limitPerStage,\\n        uint64[12] memory _pricePerStage\\n    ) {\\n        if (_oracle == address(0)) revert ZeroAddress(\\\"Aggregator\\\");\\n        if (_busd == address(0)) revert ZeroAddress(\\\"BUSD\\\");\\n        if (_saleToken == address(0)) revert ZeroAddress(\\\"Sale token\\\");\\n        if (_presaleV1 == address(0)) revert ZeroAddress(\\\"Presale V1\\\");\\n\\n        saleToken = _saleToken;\\n        oracle = IChainlinkPriceFeed(_oracle);\\n        busdToken = IERC20(_busd);\\n        presaleV1 = IPresaleV1(_presaleV1);\\n        limitPerStage = _limitPerStage;\\n        pricePerStage = _pricePerStage;\\n        saleStartTime = _saleStartTime;\\n        saleEndTime = _saleEndTime;\\n\\n        emit SaleTimeUpdated(_saleStartTime, _saleEndTime, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev To synchronize totalTokensSold with previous presales and calculate current step\\n     */\\n    function sync() external onlyOwner {\\n        require(!isSynchronized, \\\"Already synchronized\\\");\\n        require(presaleV1.paused(), \\\"Presale v1 should be paused\\\");\\n        totalTokensSold = presaleV1.totalTokensSold();\\n        currentStage = _getStageByTotalSoldAmount();\\n        isSynchronized = true;\\n    }\\n\\n    /// @notice To pause the presale\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice To unpause the presale\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice To add users to blacklist\\n    /// @param _users - Array of addresses to add in blacklist\\n    function addToBlacklist(address[] calldata _users) external onlyOwner {\\n        uint256 usersAmount = _users.length;\\n        uint256 i = 0;\\n        while (i < usersAmount) {\\n            blacklist[_users[i]] = true;\\n            emit AddedToBlacklist(_users[i], block.timestamp);\\n            i += 1;\\n        }\\n    }\\n\\n    /// @notice To remove users from blacklist\\n    /// @param _users - Array of addresses to remove from blacklist\\n    function removeFromBlacklist(address[] calldata _users) external onlyOwner {\\n        uint256 usersAmount = _users.length;\\n        uint256 i = 0;\\n        while (i < usersAmount) {\\n            blacklist[_users[i]] = false;\\n            emit RemovedFromBlacklist(_users[i], block.timestamp);\\n            i += 1;\\n        }\\n    }\\n\\n    /// @notice To update the sale start and end times\\n    /// @param _saleStartTime - New sales start time\\n    /// @param _saleEndTime   - New sales end time\\n    function configureSaleTimeframe(uint256 _saleStartTime, uint256 _saleEndTime) external onlyOwner {\\n        if (saleStartTime != _saleStartTime) saleStartTime = _saleStartTime;\\n        if (saleEndTime != _saleEndTime) saleEndTime = _saleEndTime;\\n        emit SaleTimeUpdated(_saleStartTime, _saleEndTime, block.timestamp);\\n    }\\n\\n    /// @notice To set the claim start time\\n    /// @param _claimStartTime - claim start time\\n    /// @notice Function also makes sure that presale have enough sale token balance\\n    /// @dev Function can be executed only after the end of the presale, so totalTokensSold value here is final and will not change\\n    function configureClaim(uint256 _claimStartTime) external onlyOwner {\\n        if (block.timestamp < saleEndTime) revert PresaleNotEnded();\\n        require(IERC20(saleToken).balanceOf(address(this)) >= totalTokensSold * 1e18, \\\"Not enough tokens on contract\\\");\\n        claimStartTime = _claimStartTime;\\n        emit ClaimTimeUpdated(_claimStartTime, block.timestamp);\\n    }\\n\\n    function purchasedTokens(address _user) public view returns (uint256) {\\n        return _purchasedTokens[_user] + presaleV1.purchasedTokens(_user);\\n    }\\n\\n    /// @notice To buy into a presale using BNB with referrer\\n    /// @param _amount - Amount of tokens to buy\\n    /// @param _referrerId - id of the referrer\\n    function buyWithNativeCoin(\\n        uint256 _amount,\\n        uint256 _referrerId\\n    ) public payable notBlacklisted verifyPurchase(_amount) whenNotPaused nonReentrant {\\n        (uint256 priceInBNB, uint256 priceInBUSD) = getPrice(_amount);\\n        if (msg.value < priceInBNB) revert NotEnoughBNB(msg.value, priceInBNB);\\n        uint256 excess = msg.value - priceInBNB;\\n        totalTokensSold += _amount;\\n        _purchasedTokens[_msgSender()] += _amount;\\n        uint8 stageAfterPurchase = _getStageByTotalSoldAmount();\\n        if (stageAfterPurchase > currentStage) currentStage = stageAfterPurchase;\\n        _sendValue(payable(owner()), priceInBNB);\\n        if (excess > 0) _sendValue(payable(_msgSender()), excess);\\n        emit TokensBought(_msgSender(), \\\"BNB\\\", _amount, priceInBUSD, priceInBNB, _referrerId, block.timestamp);\\n    }\\n\\n    /// @notice To buy into a presale using BUSD with referrer\\n    /// @param _amount - Amount of tokens to buy\\n    /// @param _referrerId - id of the referrer\\n    function buyWithUSD(\\n        uint256 _amount,\\n        uint256 _referrerId\\n    ) public notBlacklisted verifyPurchase(_amount) whenNotPaused nonReentrant {\\n        (uint256 priceInBNB, uint256 priceInBUSD) = getPrice(_amount);\\n        uint256 allowance = busdToken.allowance(_msgSender(), address(this));\\n        if (priceInBUSD > allowance) revert NotEnoughAllowance(allowance, priceInBUSD);\\n        totalTokensSold += _amount;\\n        _purchasedTokens[_msgSender()] += _amount;\\n        uint8 stageAfterPurchase = _getStageByTotalSoldAmount();\\n        if (stageAfterPurchase > currentStage) currentStage = stageAfterPurchase;\\n        busdToken.safeTransferFrom(_msgSender(), owner(), priceInBUSD);\\n        emit TokensBought(_msgSender(), \\\"BUSD\\\", _amount, priceInBUSD, priceInBNB, _referrerId, block.timestamp);\\n    }\\n\\n    /// @notice To claim tokens after claiming starts\\n    function claim() external whenNotPaused {\\n        if (block.timestamp < claimStartTime || claimStartTime == 0) revert InvalidTimeframe();\\n        if (hasClaimed[_msgSender()]) revert AlreadyClaimed();\\n        uint256 amount = purchasedTokens(_msgSender()) * 1e18;\\n        if (amount == 0) revert NothingToClaim();\\n        hasClaimed[_msgSender()] = true;\\n        IERC20(saleToken).safeTransfer(_msgSender(), amount);\\n        emit TokensClaimed(_msgSender(), amount, block.timestamp);\\n    }\\n\\n    /// @notice Returns price for current stage\\n    function getCurrentPrice() external view returns (uint256) {\\n        return pricePerStage[currentStage];\\n    }\\n\\n    /// @notice Returns amount of tokens sold on current stage\\n    function getSoldOnCurrentStage() external view returns (uint256) {\\n        return totalTokensSold - ((currentStage == 0) ? 0 : limitPerStage[currentStage - 1]);\\n    }\\n\\n    /// @notice Returns presale last stage token amount limit\\n    function getTotalPresaleAmount() external view returns (uint256) {\\n        return limitPerStage[MAX_STAGE_INDEX];\\n    }\\n\\n    /// @notice Returns total price of sold tokens\\n    function totalSoldPrice() external view returns (uint256) {\\n        return _calculatePriceInBUSDForConditions(totalTokensSold, 0, 0);\\n    }\\n\\n    /// @notice Helper function to calculate price in BNB and BUSD for given amount\\n    /// @param _amount - Amount of tokens to buy\\n    /// @return priceInBNB - price for passed amount of tokens in BNB in 1e18 format\\n    /// @return priceInBUSD - price for passed amount of tokens in BUSD in 1e18 format\\n    function getPrice(uint256 _amount) public view returns (uint256 priceInBNB, uint256 priceInBUSD) {\\n        if (_amount + totalTokensSold > limitPerStage[MAX_STAGE_INDEX])\\n            revert PresaleLimitExceeded(limitPerStage[MAX_STAGE_INDEX] - totalTokensSold);\\n        priceInBUSD = _calculatePriceInBUSDForConditions(_amount, currentStage, totalTokensSold);\\n\\n        (uint80 roundID, int256 price, , uint256 updatedAt, uint80 answeredInRound) = oracle.latestRoundData();\\n        require(answeredInRound >= roundID, \\\"Stale price\\\");\\n        require(updatedAt >= block.timestamp - 3 hours, \\\"Stale price\\\");\\n        require(price > 0, \\\"Invalid price\\\");\\n        priceInBNB = (priceInBUSD * 1e8) / uint256(price);\\n    }\\n\\n    /// @notice For sending BNB from contract\\n    /// @param _recipient - Recipient address\\n    /// @param _bnbAmount - Amount of BNB to send in wei\\n    function _sendValue(address payable _recipient, uint256 _bnbAmount) internal {\\n        require(address(this).balance >= _bnbAmount, \\\"Low balance\\\");\\n        (bool success,) = _recipient.call{value: _bnbAmount}(\\\"\\\");\\n        require(success, \\\"BNB Payment failed\\\");\\n    }\\n\\n    /// @notice Recursively calculate BUSD cost for specified conditions\\n    /// @param _amount           - Amount of tokens to calculate price\\n    /// @param _currentStage     - Starting stage to calculate price\\n    /// @param _totalTokensSold  - Starting total token sold amount to calculate price\\n    function _calculatePriceInBUSDForConditions(\\n        uint256 _amount,\\n        uint256 _currentStage,\\n        uint256 _totalTokensSold\\n    ) internal view returns (uint256 cost) {\\n        if (_totalTokensSold + _amount <= limitPerStage[_currentStage]) {\\n            cost = _amount * pricePerStage[_currentStage];\\n        } else {\\n            uint256 currentStageAmount = limitPerStage[_currentStage] - _totalTokensSold;\\n            uint256 nextStageAmount = _amount - currentStageAmount;\\n            cost =\\n            currentStageAmount *\\n            pricePerStage[_currentStage] +\\n            _calculatePriceInBUSDForConditions(nextStageAmount, _currentStage + 1, limitPerStage[_currentStage]);\\n        }\\n\\n        return cost;\\n    }\\n\\n    /// @notice Calculate current stage index from total tokens sold amount\\n    function _getStageByTotalSoldAmount() internal view returns (uint8) {\\n        uint8 stageIndex = MAX_STAGE_INDEX;\\n        uint256 totalTokensSold_ = totalTokensSold;\\n        while (stageIndex > 0) {\\n            if (limitPerStage[stageIndex - 1] <= totalTokensSold_) break;\\n            stageIndex -= 1;\\n        }\\n        return stageIndex;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChainlinkPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IChainlinkPriceFeed {\\n    function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\ninterface IPresale {\\n    event SaleTimeUpdated(uint256 saleStartTime, uint256 saleEndTime, uint256 timestamp);\\n\\n    event TokensClaimed(address indexed user, uint256 amount, uint256 timestamp);\\n\\n    event TokensBought(\\n        address indexed user,\\n        bytes32 indexed purchaseMethod,\\n        uint256 amount,\\n        uint256 totalCostInUsd,\\n        uint256 totalCostInBNB,\\n        uint256 indexed referrerId,\\n        uint256 timestamp\\n    );\\n\\n    event AddedToBlacklist(address indexed user, uint256 timestamp);\\n\\n    event RemovedFromBlacklist(address indexed user, uint256 timestamp);\\n\\n    event ClaimTimeUpdated(uint256 claimStartTime, uint256 timestamp);\\n\\n    /// @notice Function can not be called now\\n    error InvalidTimeframe();\\n\\n    /// @notice Function can not be called before end of presale\\n    error PresaleNotEnded();\\n\\n    /// @notice Trying to buy 0 tokens\\n    error BuyAtLeastOneToken();\\n\\n    /// @notice Passed amount is more than amount of tokens remaining for presale\\n    /// @param tokensRemains - amount of tokens remaining for presale\\n    error PresaleLimitExceeded(uint256 tokensRemains);\\n\\n    /// @notice User is in blacklist\\n    error AddressBlacklisted();\\n\\n    /// @notice If zero address was passed\\n    /// @param contractName - name indicator of the corresponding contract\\n    error ZeroAddress(string contractName);\\n\\n    /// @notice Passed amount of BNB is not enough to buy requested amount of tokens\\n    /// @param sent - amount of BNB was sent\\n    /// @param expected - amount of BNB necessary to buy requested amount of tokens\\n    error NotEnoughBNB(uint256 sent, uint256 expected);\\n\\n    /// @notice Provided allowance is not enough to buy requested amount of tokens\\n    /// @param provided - amount of allowance provided to the contract\\n    /// @param expected - amount of BUSD necessary to buy requested amount of tokens\\n    error NotEnoughAllowance(uint256 provided, uint256 expected);\\n\\n    /// @notice User already claimed bought tokens\\n    error AlreadyClaimed();\\n\\n    /// @notice No tokens were purchased by this user\\n    error NothingToClaim();\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPresale.v1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IPresaleV1 {\\r\\n    function totalTokensSold() external view returns(uint256);\\r\\n\\r\\n    function currentStage() external view returns(uint8);\\r\\n\\r\\n    function purchasedTokens(address _user) external view returns(uint256);\\r\\n\\r\\n    function paused() external view returns(bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/openzeppelin/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_busd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_presaleV1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_saleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint32[12]\",\"name\":\"_limitPerStage\",\"type\":\"uint32[12]\"},{\"internalType\":\"uint64[12]\",\"name\":\"_pricePerStage\",\"type\":\"uint64[12]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BuyAtLeastOneToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimeframe\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"NotEnoughAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBNB\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensRemains\",\"type\":\"uint256\"}],\"name\":\"PresaleLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PresaleNotEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddedToBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClaimTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SaleTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"purchaseMethod\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCostInUsd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCostInBNB\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_STAGE_INDEX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_purchasedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"}],\"name\":\"buyWithNativeCoin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerId\",\"type\":\"uint256\"}],\"name\":\"buyWithUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimStartTime\",\"type\":\"uint256\"}],\"name\":\"configureClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_saleStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleEndTime\",\"type\":\"uint256\"}],\"name\":\"configureSaleTimeframe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInBUSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldOnCurrentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPresaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"limitPerStage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IChainlinkPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleV1\",\"outputs\":[{\"internalType\":\"contract IPresaleV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricePerStage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"purchasedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSoldPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CHRPresaleV2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004dde9004c6460041a87f972168cdd7ab8b4c64410000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56000000000000000000000000098fcc5cefd783cd2f265596d22fec836ba648670000000000000000000000000000000000000000000000000000000064884c3000000000000000000000000000000000000000000000000000000000652923300000000000000000000000000000000000000000000000000000000005347e3b0000000000000000000000000000000000000000000000000000000007ea130c000000000000000000000000000000000000000000000000000000000a65db77000000000000000000000000000000000000000000000000000000000cb0bbd9000000000000000000000000000000000000000000000000000000000ed1b0c70000000000000000000000000000000000000000000000000000000010ce511c0000000000000000000000000000000000000000000000000000000012ab276c00000000000000000000000000000000000000000000000000000000146bf121000000000000000000000000000000000000000000000000000000001613cc130000000000000000000000000000000000000000000000000000000017a55820000000000000000000000000000000000000000000000000000000001aa048a0000000000000000000000000000000000000000000000000000000001ee2327c000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000027147114878000000000000000000000000000000000000000000000000000002aa1efb94e0000000000000000000000000000000000000000000000000000002e2f6e5e1480000000000000000000000000000000000000000000000000000031bced02db000000000000000000000000000000000000000000000000000000354a6ba7a180000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000003c6568f12e8000000000000000000000000000000000000000000000000000003ff2e795f50000000000000000000000000000000000000000000000000000004380663abb800000000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000000000000000000000000000004a9b6384488000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}