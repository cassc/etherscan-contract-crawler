{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {unchecked {uint256 c = a + b;if (c < a) return (false, 0);return (true, c);}}\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {unchecked {if (b > a) return (false, 0);return (true, a - b);}}\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {unchecked {if (a == 0) return (true, 0);uint256 c = a * b;if (c / a != b) return (false, 0);return (true, c);}}\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {unchecked {if (b == 0) return (false, 0);return (true, a / b);}}\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {unchecked {if (b == 0) return (false, 0);return (true, a % b);}}\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {unchecked {require(b <= a, errorMessage);return a - b;}}\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {unchecked {require(b > 0, errorMessage);return a / b;}}\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {unchecked {require(b > 0, errorMessage);return a % b;}}\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {return msg.data;}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {_transferOwnership(_msgSender());}\r\n    function owner() public view virtual returns (address) {return _owner;}\r\n    modifier onlyOwner() {require(owner() == _msgSender(), \"Ownable: caller is not the owner\");_;}\r\n    function renounceOwnership() public virtual onlyOwner {_transferOwnership(address(0));}\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {require(newOwner != address(0), \"Ownable: new owner is the zero address\");_transferOwnership(newOwner);}\r\n    function _transferOwnership(address newOwner) internal virtual {address oldOwner = _owner;_owner = newOwner;emit OwnershipTransferred(oldOwner, newOwner);}\r\n}\r\n\r\ncontract OwnerWithdrawable is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n    function withdraw(address token, uint256 amt) public onlyOwner {IERC20(token).safeTransfer(msg.sender, amt);}\r\n    function withdrawAll(address token) public onlyOwner {uint256 amt = IERC20(token).balanceOf(address(this));withdraw(token, amt);}\r\n    function withdrawCurrency(uint256 amt) public onlyOwner {payable(msg.sender).transfer(amt);}\r\n    // function deposit(address token, uint256 amt) public onlyOwner {\r\n    //     uint256 allowance = IERC20(token).allowance(msg.sender, address(this));\r\n    //     require(allowance >= amt, \"Check the token allowance\");\r\n    //     IERC20(token).transferFrom(owner(), address(this), amt);\r\n    // }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {uint256 size;assembly {size := extcodesize(account)}return size > 0;}\r\n    function sendValue(address payable recipient, uint256 amount) internal {require(address(this).balance >= amount, \"Address: insufficient balance\");(bool success, ) = recipient.call{value: amount}(\"\");require(success, \"Address: unable to send value, recipient may have reverted\");}\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {return functionCall(target, data, \"Address: low-level call failed\");}\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {return functionCallWithValue(target, data, 0, errorMessage);}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {require(address(this).balance >= value, \"Address: insufficient balance for call\");require(isContract(target), \"Address: call to non-contract\");(bool success, bytes memory returndata) = target.call{value: value}(data);return verifyCallResult(success, returndata, errorMessage);}\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {return functionStaticCall(target, data, \"Address: low-level static call failed\");}\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {require(isContract(target), \"Address: static call to non-contract\");(bool success, bytes memory returndata) = target.staticcall(data);return verifyCallResult(success, returndata, errorMessage);}\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");}\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {require(isContract(target), \"Address: delegate call to non-contract\");(bool success, bytes memory returndata) = target.delegatecall(data);return verifyCallResult(success, returndata, errorMessage);}\r\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory) {\r\n        if (success) {return returndata;} else {\r\n            if (returndata.length > 0) {assembly {let returndata_size := mload(returndata)revert(add(32, returndata), returndata_size)}\r\n            } else {revert(errorMessage);}\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));}\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));}\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {require((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));}\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {uint256 newAllowance = token.allowance(address(this), spender) + value;_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));}\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");if (returndata.length > 0) {require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");}}\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract FansSocialTopPresale is OwnerWithdrawable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for IERC20Metadata;\r\n\r\n    uint256 public rate;\r\n    address public saleToken;\r\n    uint public saleTokenDec;\r\n    uint256 public totalTokensforSale;\r\n    uint256 public maxBuyLimit;\r\n    uint256 public minBuyLimit;\r\n\r\n    // Whitelist of tokens to buy from\r\n    mapping(address => bool) public tokenWL;\r\n\r\n    // 1 Token price in terms of WL tokens\r\n    mapping(address => uint256) public tokenPrices;\r\n\r\n    address[] public buyers;\r\n\r\n    bool public isUnlockingStarted;\r\n    bool public isPresaleStarted;\r\n\r\n    mapping(address => BuyerTokenDetails) public buyersAmount;\r\n    mapping(address => uint256) public presaleData;\r\n\r\n    uint256 public totalTokensSold;\r\n\r\n    struct BuyerTokenDetails {\r\n        uint amount;\r\n        bool isClaimed;\r\n    }\r\n\r\n    constructor() { }\r\n\r\n    modifier saleStarted(){require (!isPresaleStarted, \"PreSale: Sale has already started\");_;}\r\n\r\n    //function to set information of Token sold in Pre-Sale and its rate in Native currency\r\n    function setSaleTokenParams(address _saleToken, uint256 _totalTokensforSale) external onlyOwner saleStarted{\r\n        saleToken = _saleToken;\r\n        saleTokenDec = IERC20Metadata(saleToken).decimals();\r\n        totalTokensforSale = _totalTokensforSale;\r\n        IERC20(saleToken).safeTransferFrom(msg.sender, address(this), totalTokensforSale);\r\n    }\r\n\r\n    // Add a token to buy presale token from, with price\r\n    function addWhiteListedToken(address _token, uint256 _price) external onlyOwner {\r\n        require(_price != 0, \"Presale: Cannot set price to 0\");\r\n        tokenWL[_token] = true;\r\n        tokenPrices[_token] = _price;\r\n    }\r\n\r\n    function updateEthRate(uint256 _rate) external onlyOwner {rate = _rate;}\r\n\r\n    function updateTokenRate(address _token, uint256 _price)external onlyOwner{\r\n        require(tokenWL[_token], \"Presale: Token not whitelisted\");\r\n        require(_price != 0, \"Presale: Cannot set price to 0\");\r\n        tokenPrices[_token] = _price;\r\n    }\r\n\r\n    function startPresale() external onlyOwner {\r\n        require(!isPresaleStarted, \"PreSale: Sale has already started\");\r\n        isPresaleStarted = true;\r\n    }\r\n\r\n    function stopPresale() external onlyOwner {\r\n        require(isPresaleStarted, \"PreSale: Sale hasn't started yet!\");\r\n        isPresaleStarted = false;\r\n    }\r\n\r\n    function startUnlocking() external onlyOwner {\r\n        require(!isUnlockingStarted, \"PreSale: Unlocking has already started\");\r\n        isUnlockingStarted = true;\r\n    }\r\n\r\n    function stopUnlocking() external onlyOwner {\r\n        require(isUnlockingStarted, \"PreSale: Unlocking hasn't started yet!\");\r\n        isUnlockingStarted = false;\r\n    }\r\n\r\n    // Public view function to calculate amount of sale tokens returned if you buy using \"amount\" of \"token\"\r\n    function getTokenAmount(address token, uint256 amount) public view returns (uint256) {\r\n        if(!isPresaleStarted) {\r\n            return 0;\r\n        }\r\n        uint256 amtOut;\r\n        if(token != address(0)){\r\n            require(tokenWL[token] == true, \"Presale: Token not whitelisted\");\r\n            uint256 price = tokenPrices[token];\r\n            amtOut = amount.mul(10**saleTokenDec).div(price);\r\n        }else{\r\n            amtOut = amount.mul(10**saleTokenDec).div(rate);\r\n        }\r\n        return amtOut;\r\n    }\r\n\r\n    // Public Function to buy tokens. APPROVAL needs to be done first\r\n    function buyToken(address _token, uint256 _amount) external payable{\r\n        require(isPresaleStarted, \"PreSale: Sale stopped!\");\r\n\r\n        uint256 saleTokenAmt;\r\n        if(_token != address(0)){\r\n            require(_amount > 0, \"Presale: Cannot buy with zero amount\");\r\n            require(tokenWL[_token] == true, \"Presale: Token not whitelisted\");\r\n\r\n            saleTokenAmt = getTokenAmount(_token, _amount);\r\n\r\n            // check if saleTokenAmt is greater than minBuyLimit\r\n            require(saleTokenAmt >= minBuyLimit, \"Presale: Min buy limit not reached\");\r\n            require(presaleData[msg.sender] + saleTokenAmt <= maxBuyLimit, \"Presale: Max buy limit reached for this phase\");\r\n            require((totalTokensSold + saleTokenAmt) <= totalTokensforSale, \"PreSale: Total Token Sale Reached!\");\r\n\r\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n        }else{\r\n            saleTokenAmt = getTokenAmount(address(0), msg.value);\r\n\r\n            // check if saleTokenAmt is greater than minBuyLimit\r\n            require(saleTokenAmt >= minBuyLimit, \"Presale: Min buy limit not reached\");\r\n            require(presaleData[msg.sender] + saleTokenAmt <= maxBuyLimit, \"Presale: Max buy limit reached for this phase\");\r\n            require((totalTokensSold + saleTokenAmt) <= totalTokensforSale, \"PreSale: Total Token Sale Reached!\");\r\n        }\r\n        totalTokensSold += saleTokenAmt;\r\n        buyersAmount[msg.sender].amount += saleTokenAmt;\r\n        presaleData[msg.sender] += saleTokenAmt;\r\n        buyersAmount[msg.sender].isClaimed = true;\r\n        IERC20(saleToken).safeTransfer(msg.sender, saleTokenAmt);\r\n    }\r\n\r\n    function withdrawToken() external {\r\n        uint256 tokensforWithdraw;\r\n        require(buyersAmount[msg.sender].isClaimed == false, \"Presale: Already claimed\");\r\n        require(isUnlockingStarted, \"Presale: Locking period not over yet\");\r\n        tokensforWithdraw = buyersAmount[msg.sender].amount;\r\n        buyersAmount[msg.sender].isClaimed = true;\r\n        IERC20(saleToken).safeTransfer(msg.sender, tokensforWithdraw);\r\n    }\r\n\r\n    function setMinBuyLimit(uint _minBuyLimit) external onlyOwner {minBuyLimit = _minBuyLimit;}\r\n    function setMaxBuyLimit(uint _maxBuyLimit) external onlyOwner {maxBuyLimit = _maxBuyLimit;}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addWhiteListedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyersAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlockingStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTokenDec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuyLimit\",\"type\":\"uint256\"}],\"name\":\"setMinBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_saleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokensforSale\",\"type\":\"uint256\"}],\"name\":\"setSaleTokenParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startUnlocking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopUnlocking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWL\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensforSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateEthRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateTokenRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FansSocialTopPresale", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c8a3fb20fa4cef4109da65de629a8b4f86002dc28b1e4d2827a42910f87f9afe"}