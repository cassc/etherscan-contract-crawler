{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity  0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\npragma solidity 0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\npragma solidity 0.8.0;\r\n// import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface TransferReward {\r\n    function update() external;\r\n}\r\n\r\ninterface TenFarm {\r\n    \r\n    function userInfo() external view returns (uint256);\r\n    //Deposit LP tokens\r\n    function deposit(uint256 _pid, uint256 _wantAmount\r\n    ) external;\r\n    \r\n    function withdraw(uint256 _pid ,uint256 _amountIn) external;\r\n    \r\n    function stakedWantTokens(uint256 _pid, address _user) external view returns(uint256);\r\n    \r\n    function pendingTENFI(uint256 _pid, address _user) external view returns (uint256);\r\n    \r\n}\r\n\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n    \r\n    \r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n     \r\n     \r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeERC20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IWBNB is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\ncontract Yieldex is Ownable,ReentrancyGuard{\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    \r\n    /*\r\n      Max_LP is the maximum number of LP tokens which can exist in the pool;\r\n    */\r\n    uint8 public MAX_LP = 6;\r\n    struct PoolInfo {\r\n        IERC20[] Lpaddress;\r\n        uint256[] weights;\r\n        uint256[] pids;\r\n        bool status;\r\n        uint256 length;\r\n    }\r\n    \r\n    address public TenLots;\r\n    uint256 public depositFeeFactor = 9990;\r\n    uint256 public constant depositFeeFactorMax = 10000;\r\n    uint256 public constant depositFeeFactorLL = 9500;\r\n    uint256 public maxPools = 11;\r\n    \r\n    // Max allowance\r\n    uint256 allow = 1e28;\r\n    \r\n    // Array consisting info of each pool\r\n    PoolInfo[] public poolInfo;\r\n    \r\n    // Path to convert the BNB to BUSD\r\n    address[] public feesSwapPath;\r\n    \r\n    //PanCakeSwapRouter\r\n    address public routerAddress = 0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8;\r\n    address public farmAddress = 0x264A1b3F6db28De4D3dD4eD23Ab31A468B0C1A96;\r\n    address public wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public tenToken =  0xd15C444F1199Ae72795eba15E8C1db44E47abF62;\r\n    address public busdAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address public feeAddress = 0xA3647eB96fcaFA8DE3e361F45c94921DAeF79a92;\r\n    address public devWalletAddress = 0x393c7C3EbCBFf2c1138D123df5827e215458F0c4;\r\n    uint256 rewardShare ;\r\n    uint256 subValue;\r\n    \r\n    // Address for token swap\r\n    struct swapPath{\r\n        address[] token0path;\r\n        address[] token1path;\r\n    }\r\n    \r\n    struct swapPathToken{\r\n        address[] token0path;\r\n        address[] token1path;\r\n    }\r\n    \r\n    /* reverse Path are to convert LP single token to desired output\r\n    * eg. TENFI-BUSD --> swapPaths are used to convert input token to token0 and token1path\r\n    * eg. reversePath --> reversePath is used to convert TENFI and BUSD into BNB\r\n    */\r\n    \r\n    struct reverseSwapPath {\r\n        address[] token0path;\r\n        address[] token1path;\r\n    }\r\n    \r\n    struct reverseSwapPathToken {\r\n        address[] token0path;\r\n        address[] token1path;\r\n    }\r\n       \r\n    // This struct is used to store detials of LP-pools in each Index\r\n    struct vaultDetail{\r\n        uint256 totalShare;\r\n        uint256 totalReward;\r\n        uint256 accTenPerShare;\r\n    }\r\n    \r\n    // UserInfo -> stores shares and rewardDebt\r\n    \r\n    struct UserInfo{\r\n            uint256 shares;\r\n            uint256 rewardDebt;\r\n        }\r\n        \r\n    struct indexValue {\r\n        IERC20 Lpaddress;\r\n        uint256 weight;\r\n    }\r\n    \r\n    mapping(IERC20 => uint256) addressWeight;\r\n\r\n    mapping(uint256 => mapping(IERC20 => vaultDetail)) indexLpTotalShares;\r\n    \r\n    mapping(uint256 => mapping(IERC20 => mapping(address =>UserInfo))) public userIndexInfo;\r\n    \r\n    // Mappings for respective swap\r\n    mapping(IERC20 => swapPath) swapPaths;\r\n    \r\n    mapping(IERC20 => swapPath) swapPathsToken;\r\n    \r\n    mapping(IERC20 => reverseSwapPath) reverseSwapPaths;\r\n    \r\n    mapping(IERC20 => reverseSwapPath) reverseSwapPathsToken;\r\n    \r\n    mapping(IERC20 => bool) isPresent;\r\n    \r\n    modifier validPool(uint256 _pid) {\r\n        require(_pid < poolInfo.length, \"deposit:pool exists?\");\r\n        _;\r\n    }\r\n    \r\n    function TokenpPathWBNB(IERC20 _lpAddress,uint256 _tokenIndex, uint256 _path) public view returns(address){\r\n        if(_tokenIndex == 0){\r\n            return swapPaths[_lpAddress].token0path[_path];\r\n        }\r\n        else{\r\n            return swapPaths[_lpAddress].token1path[_path];\r\n        }\r\n    }\r\n    function TokenpathToken(IERC20 _lpAddress,uint256 _tokenIndex, uint256 _path) public view returns(address){\r\n        if(_tokenIndex == 0){\r\n            return swapPathsToken[_lpAddress].token0path[_path];\r\n        }\r\n        else{\r\n            return swapPathsToken[_lpAddress].token1path[_path];\r\n        }\r\n    }\r\n    \r\n    function addPaths(IERC20  _lpAddress, address[] memory _token0path, address[] memory _token1path) public onlyOwner {\r\n        uint i;\r\n        \r\n        for(i = _token0path.length-1; i > 0; i--) {\r\n            reverseSwapPaths[_lpAddress].token0path.push(_token0path[i]);\r\n        }\r\n        \r\n        reverseSwapPaths[_lpAddress].token0path.push(_token0path[i]);\r\n        \r\n        uint j;\r\n        \r\n        for(j = _token1path.length-1; j > 0; j--) {\r\n            reverseSwapPaths[_lpAddress].token1path.push(_token1path[j]);\r\n        }\r\n        \r\n        reverseSwapPaths[_lpAddress].token1path.push(_token1path[j]);\r\n        swapPaths[_lpAddress].token0path = _token0path;\r\n        swapPaths[_lpAddress].token1path = _token1path;\r\n    }\r\n    \r\n    \r\n    \r\n    function addPathsToken(IERC20  _lpAddress, address[] memory _token0path, address[] memory _token1path) public onlyOwner {\r\n        uint i;\r\n        for(i = _token0path.length-1; i > 0; i--) {\r\n            reverseSwapPathsToken[_lpAddress].token0path.push(_token0path[i]);\r\n        }\r\n        reverseSwapPathsToken[_lpAddress].token0path.push(_token0path[i]);\r\n        \r\n        uint j;\r\n        for(j = _token1path.length-1; j > 0; j--) {\r\n            reverseSwapPathsToken[_lpAddress].token1path.push(_token1path[j]);\r\n        }\r\n        reverseSwapPathsToken[_lpAddress].token1path.push(_token1path[j]);\r\n        \r\n        swapPathsToken[_lpAddress].token0path = _token0path;\r\n        swapPathsToken[_lpAddress].token1path = _token1path;\r\n    }\r\n    \r\n    \r\n    function setFees(uint256 fees) external onlyOwner {\r\n        require(fees > depositFeeFactorLL, 'Fees too low');\r\n        require(fees < depositFeeFactorMax, 'Fees too high');\r\n        depositFeeFactor = fees;\r\n    }\r\n    \r\n    function setCollector(address _collector) external onlyOwner {\r\n        require(_collector != (address(0)), 'wrong address');\r\n        feeAddress = _collector;\r\n    }\r\n    \r\n    function setFeesSwapPath(address[] memory path) external onlyOwner {\r\n        feesSwapPath = path;\r\n    }\r\n    \r\n    function editMaxPools(uint256 len) onlyOwner external {\r\n        maxPools = len;\r\n    }\r\n    \r\n    // transferReward remove  shortly\r\n    \r\n    \r\n\r\n    function createPool(\r\n        IERC20 [] memory _Lpaddress,\r\n        uint256[] memory _weights,\r\n        uint256[] memory _pids\r\n        )\r\n    external\r\n    onlyOwner\r\n    returns(bool)\r\n    {\r\n        require(_Lpaddress.length < maxPools,\"Error: LPaddres array should be < maxPools\");\r\n        require(_Lpaddress.length == _weights.length && _Lpaddress.length == _pids.length, \"createPool: Error in Pool lengths\");\r\n        uint256 sumWeight = 0;\r\n        for(uint8 i = 0; i < _Lpaddress.length ; i++){\r\n        require(_weights[i] > 0 , \"Error : Incorrect Pool Weight\");\r\n         sumWeight = sumWeight.add(_weights[i]);\r\n        //  isPresent[_Lpaddress[i]] = true;\r\n        }\r\n        require(sumWeight == 50 ,\"Error: Total weight Not Equal to 50\");\r\n        \r\n        poolInfo.push(\r\n            PoolInfo({\r\n              Lpaddress:_Lpaddress,\r\n              weights:_weights,\r\n              pids:_pids,\r\n              status:false,\r\n              length: _Lpaddress.length\r\n            })\r\n            );\r\n        return true;\r\n    }\r\n\r\n    function viewAddress(uint256 pool, uint256 index) external view returns(IERC20){\r\n       return poolInfo[pool].Lpaddress[index];\r\n    }\r\n    \r\n    function viewWeight(uint256 pool, uint256 index) external view returns(uint256){\r\n       return poolInfo[pool].weights[index];\r\n    }\r\n    \r\n    function _wrapBNB( uint256 amount) internal {\r\n        if (amount > 0) {\r\n            IWBNB(wbnbAddress).deposit{value: amount}();\r\n        }\r\n    }\r\n    \r\n    \r\n    function deposit(uint256 poolId, address depositTokenAddress, uint256 amount,uint256 _slippageFactor) nonReentrant validPool(poolId) public payable  {\r\n        if(depositTokenAddress == address(0)) {\r\n            _wrapBNB(msg.value);\r\n            depositTokenAddress = wbnbAddress;\r\n            uint256 fees = amount.sub(amount.mul(depositFeeFactor).div(10000));\r\n            \r\n             uint256 feesBusd = _safeSwap(\r\n                routerAddress,\r\n                fees,\r\n                _slippageFactor,\r\n                feesSwapPath,\r\n                address(this),\r\n                block.timestamp.add(600)\r\n            );\r\n            \r\n            // transfer fees to the tenlots\r\n            \r\n        IERC20(busdAddress).safeTransfer(feeAddress,feesBusd.mul(800).div(1000));\r\n        TransferReward(feeAddress).update();\r\n        \r\n            // ends here\r\n            \r\n            \r\n        IERC20(busdAddress).safeTransfer(devWalletAddress,feesBusd.mul(200).div(1000));\r\n        amount = amount.sub(fees);\r\n            \r\n            for(uint i = 0; i < poolInfo[poolId].Lpaddress.length ; i++){\r\n                \r\n            IERC20 iAddress = poolInfo[poolId].Lpaddress[i];\r\n            \r\n            uint256 iweight = poolInfo[poolId].weights[i];\r\n            \r\n            uint256 amountin = amount.mul(iweight).div(50);\r\n            \r\n            uint256 token0Amt = amountin.div(2); uint256 token1Amt = amountin.div(2);\r\n            \r\n            if( swapPaths[iAddress].token0path[swapPaths[iAddress].token0path.length.sub(1)] != depositTokenAddress && depositTokenAddress == swapPaths[iAddress].token0path[0]) {\r\n            // Swap token0 ;\r\n            token0Amt = _safeSwap(\r\n                routerAddress,\r\n                amountin.div(2),\r\n                _slippageFactor,\r\n                swapPaths[iAddress].token0path,\r\n                address(this),\r\n                block.timestamp.add(600)\r\n                );   \r\n            }\r\n            if(swapPaths[iAddress].token1path[swapPaths[iAddress].token1path.length.sub(1)] != depositTokenAddress && depositTokenAddress == swapPaths[iAddress].token1path[0]) {\r\n            // swap token1\r\n            token1Amt = _safeSwap(\r\n                routerAddress,\r\n                amountin.div(2),\r\n                _slippageFactor,\r\n                swapPaths[iAddress].token1path,\r\n                address(this),\r\n                block.timestamp.add(600)\r\n                );   \r\n            }\r\n            if (token0Amt > 0 && token1Amt > 0  ) {\r\n                \r\n                IERC20(swapPaths[iAddress].token0path[swapPaths[iAddress].token0path.length.sub(1)]).safeApprove(routerAddress,0);\r\n                IERC20(swapPaths[iAddress].token0path[swapPaths[iAddress].token0path.length.sub(1)]).safeIncreaseAllowance(\r\n                    routerAddress,\r\n                    token0Amt\r\n                );\r\n                \r\n                IERC20(swapPaths[iAddress].token1path[swapPaths[iAddress].token1path.length.sub(1)]).safeApprove(routerAddress,0);\r\n                IERC20(swapPaths[iAddress].token1path[swapPaths[iAddress].token1path.length.sub(1)]).safeIncreaseAllowance(\r\n                    routerAddress,\r\n                    token1Amt\r\n                );\r\n            }\r\n            \r\n            IPancakeRouter02(routerAddress).addLiquidity(\r\n                    swapPaths[iAddress].token0path[swapPaths[iAddress].token0path.length.sub(1)],\r\n                    swapPaths[iAddress].token1path[swapPaths[iAddress].token1path.length.sub(1)],\r\n                    token0Amt,\r\n                    token1Amt,\r\n                    0,\r\n                    0,\r\n                    address(this),\r\n                    block.timestamp.add(600)\r\n                );\r\n            }\r\n        \r\n        } \r\n        else\r\n        {\r\n            IERC20(depositTokenAddress).safeTransferFrom(msg.sender,address(this),amount);\r\n            uint256 fees = amount.sub(amount.mul(depositFeeFactor).div(10000));\r\n            IERC20 (depositTokenAddress).safeTransfer(devWalletAddress,fees.mul(200).div(1000));\r\n            IERC20(depositTokenAddress).safeTransfer(feeAddress,fees.mul(800).div(1000));\r\n            TransferReward(feeAddress).update();\r\n            amount = amount.sub(fees);\r\n            IERC20(depositTokenAddress).safeApprove(routerAddress,0);\r\n            IERC20(depositTokenAddress).safeIncreaseAllowance(\r\n                routerAddress,\r\n                amount\r\n            );\r\n            for(uint i = 0; i < poolInfo[poolId].Lpaddress.length ; i++){\r\n                IERC20 iAddress = poolInfo[poolId].Lpaddress[i]; \r\n                uint256 iweight = poolInfo[poolId].weights[i];   \r\n                uint256 amountin = amount.mul(iweight).div(50);\r\n                uint256 token0Amt = amountin.div(2); uint256 token1Amt = amountin.div(2);\r\n                \r\n                if( swapPathsToken[iAddress].token0path[swapPathsToken[iAddress].token0path.length.sub(1)] != depositTokenAddress && depositTokenAddress == swapPathsToken[iAddress].token0path[0]) {\r\n                // Swap token0 ;\r\n                    token0Amt = _safeSwap(\r\n                        routerAddress,\r\n                        amountin.div(2),\r\n                        _slippageFactor,\r\n                        swapPathsToken[iAddress].token0path,\r\n                        address(this),\r\n                        block.timestamp.add(600)\r\n                    );\r\n                }\r\n                if(swapPathsToken[iAddress].token1path[swapPathsToken[iAddress].token1path.length.sub(1)] != depositTokenAddress && depositTokenAddress == swapPathsToken[iAddress].token1path[0]) {\r\n                // swap token1\r\n                    token1Amt = _safeSwap(\r\n                        routerAddress,\r\n                        amountin.div(2),\r\n                        _slippageFactor,\r\n                        swapPathsToken[iAddress].token1path,\r\n                        address(this),\r\n                        block.timestamp.add(600)\r\n                    );   \r\n                }\r\n                \r\n                if (token0Amt > 0 && token1Amt > 0  ) {\r\n                    \r\n                    IERC20(swapPathsToken[iAddress].token0path[swapPathsToken[iAddress].token0path.length.sub(1)]).safeApprove(routerAddress,0);\r\n                    IERC20(swapPathsToken[iAddress].token0path[swapPathsToken[iAddress].token0path.length.sub(1)]).safeIncreaseAllowance(\r\n                        routerAddress,\r\n                        token0Amt\r\n                    );\r\n                    \r\n                    IERC20(swapPathsToken[iAddress].token1path[swapPathsToken[iAddress].token1path.length.sub(1)]).safeApprove(routerAddress,0);\r\n                    IERC20(swapPathsToken[iAddress].token1path[swapPathsToken[iAddress].token1path.length.sub(1)]).safeIncreaseAllowance(\r\n                        routerAddress,\r\n                        token1Amt\r\n                    );\r\n                }\r\n                \r\n                IPancakeRouter02(routerAddress).addLiquidity(\r\n                    swapPathsToken[iAddress].token0path[swapPathsToken[iAddress].token0path.length.sub(1)],\r\n                    swapPathsToken[iAddress].token1path[swapPathsToken[iAddress].token1path.length.sub(1)],\r\n                    token0Amt,\r\n                    token1Amt,\r\n                    0,\r\n                    0,\r\n                    address(this),\r\n                    block.timestamp.add(600)\r\n                );\r\n            }\r\n            \r\n        }\r\n        supplyFarm(poolId);\r\n        emit _deposit(msg.sender, depositTokenAddress, amount);\r\n    }\r\n    \r\n    \r\n    function supplyFarm(uint256 yieldPoolId) internal {\r\n        for(uint i = 0; i < poolInfo[yieldPoolId].length; ++i) {\r\n            \r\n        // Fetch the LP Address of the pool\r\n        IERC20 iAddress = poolInfo[yieldPoolId].Lpaddress[i];\r\n        \r\n        // Fetch the LP balance the pool\r\n        uint256 balance =  IERC20(iAddress).balanceOf(address(this));\r\n        \r\n        // Decrease the allowance\r\n        IERC20(iAddress).safeApprove(farmAddress,0);\r\n        \r\n        // Increase the allowance\r\n        IERC20(iAddress).safeIncreaseAllowance(farmAddress, balance);\r\n        \r\n        // Check the balance of the ten Token \r\n        uint256 tenbalance = IERC20(tenToken).balanceOf(address(this));\r\n        \r\n        // deposit the balance in the farm\r\n        TenFarm(farmAddress).deposit(poolInfo[yieldPoolId].pids[i],balance);\r\n        \r\n        // Ten Earned\r\n        uint256 tenEarned = IERC20(tenToken).balanceOf(address(this)).sub(tenbalance);\r\n        rewardShare = 0 ;\r\n        subValue = 0;\r\n        // accTennPerShare is calculated here \r\n        if(indexLpTotalShares[yieldPoolId][iAddress].totalShare > 0){\r\n        indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare = indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare.add(tenEarned.mul(1e12).div(indexLpTotalShares[yieldPoolId][iAddress].totalShare));\r\n        rewardShare = indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare.mul(userIndexInfo[yieldPoolId][iAddress][msg.sender].shares);\r\n        }\r\n        indexLpTotalShares[yieldPoolId][iAddress].totalReward = indexLpTotalShares[yieldPoolId][iAddress].totalReward.add(tenEarned);\r\n        {\r\n                subValue = userIndexInfo[yieldPoolId][iAddress][msg.sender].rewardDebt;\r\n        }\r\n        if(rewardShare.div(1e12) > userIndexInfo[yieldPoolId][iAddress][msg.sender].rewardDebt) {\r\n                IERC20(tenToken).safeTransfer(msg.sender,(rewardShare.div(1e12).sub(subValue)));\r\n            }\r\n        \r\n        indexLpTotalShares[yieldPoolId][iAddress].totalShare = indexLpTotalShares[yieldPoolId][iAddress].totalShare.add(balance);\r\n        userIndexInfo[yieldPoolId][iAddress][msg.sender].shares = userIndexInfo[yieldPoolId][iAddress][msg.sender].shares.add(balance);\r\n        userIndexInfo[yieldPoolId][iAddress][msg.sender].rewardDebt = indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare.mul(userIndexInfo[yieldPoolId][iAddress][msg.sender].shares).div(1e12);\r\n        \r\n        }\r\n    } \r\n    \r\n    \r\n    \r\n    function returnReward(uint i, address user,uint256 yieldPoolId) view public returns(uint256){\r\n        IERC20 iAddress = poolInfo[yieldPoolId].Lpaddress[i];\r\n        uint256 _rewardShare  =0;\r\n        uint256 tenEarned = TenFarm(farmAddress).pendingTENFI(poolInfo[yieldPoolId].pids[i],address(this));\r\n        uint256 accPerShare = indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare.add(tenEarned.mul(1e12).div(indexLpTotalShares[yieldPoolId][iAddress].totalShare));\r\n        if(accPerShare.mul(userIndexInfo[yieldPoolId][iAddress][user].shares) > userIndexInfo[yieldPoolId][iAddress][user].rewardDebt){\r\n        _rewardShare = accPerShare.mul(userIndexInfo[yieldPoolId][iAddress][user].shares).div(1e12).sub(userIndexInfo[yieldPoolId][iAddress][user].rewardDebt);\r\n            \r\n        }\r\n        return _rewardShare;\r\n    }\r\n     \r\n    function userShare(uint i, address user,uint256 yieldPoolId) view public returns(uint256 , uint256 , uint256 ){\r\n        IERC20 iAddress = poolInfo[yieldPoolId].Lpaddress[i];\r\n        uint256 _shares = userIndexInfo[yieldPoolId][iAddress][user].shares;\r\n        uint256 _totalShares = indexLpTotalShares[yieldPoolId][iAddress].totalShare;\r\n        uint256 _rewardDebt = userIndexInfo[yieldPoolId][iAddress][user].rewardDebt;\r\n        return (_shares,_totalShares,_rewardDebt);\r\n        \r\n    }\r\n    \r\n    function returnLpAddress(uint i, uint256 yieldPoolId) view public returns (IERC20){\r\n        IERC20 iAddress = poolInfo[yieldPoolId].Lpaddress[i];\r\n        return iAddress;\r\n    }\r\n    \r\n\r\n   function withdrawBalance(address userAddress, uint256 yieldPoolId, IERC20 lpAddress, uint256 percent )internal view returns(uint256){\r\n       require(percent <= 1000,\"withdraw: percent <=1000\");\r\n       uint256 share = userIndexInfo[yieldPoolId][lpAddress][userAddress].shares.mul(1e12).mul(percent).div(1000);\r\n       return share.div(1e12);\r\n   }\r\n\r\n        \r\n    function withdraw(uint256 yieldPoolId, uint percent, address tokenAddress, uint256 slippage)public validPool(yieldPoolId) nonReentrant { \r\n        for(uint i = 0; i < poolInfo[yieldPoolId].length; i++) {\r\n            rewardShare = 0;\r\n            subValue = 0;\r\n            IERC20 iAddress = poolInfo[yieldPoolId].Lpaddress[i];\r\n            uint256 _withdrawBalance = withdrawBalance(msg.sender, yieldPoolId, iAddress, percent);\r\n            if (_withdrawBalance > indexLpTotalShares[yieldPoolId][iAddress].totalShare) {\r\n              _withdrawBalance = indexLpTotalShares[yieldPoolId][iAddress].totalShare;\r\n        }\r\n            \r\n            uint256 tenbalance = IERC20(tenToken).balanceOf(address(this));\r\n            TenFarm(farmAddress).withdraw(poolInfo[yieldPoolId].pids[i],_withdrawBalance);\r\n            // accTennPerShare is calculated here \r\n            uint256 tenEarned = (IERC20(tenToken).balanceOf(address(this))).sub(tenbalance);\r\n\r\n            // accTennPerShare is calculated here\r\n            if(indexLpTotalShares[yieldPoolId][iAddress].totalShare > 0) {\r\n                indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare = indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare.add(tenEarned.mul(1e12).div(indexLpTotalShares[yieldPoolId][iAddress].totalShare));\r\n                rewardShare = indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare.mul(userIndexInfo[yieldPoolId][iAddress][msg.sender].shares);\r\n            }\r\n             \r\n            indexLpTotalShares[yieldPoolId][iAddress].totalReward = indexLpTotalShares[yieldPoolId][iAddress].totalReward.add(tenEarned);\r\n            {\r\n                subValue = userIndexInfo[yieldPoolId][iAddress][msg.sender].rewardDebt;\r\n            }\r\n           \r\n            if(rewardShare.div(1e12) > userIndexInfo[yieldPoolId][iAddress][msg.sender].rewardDebt) {\r\n                IERC20(tenToken).safeTransfer(msg.sender,(rewardShare.div(1e12).sub(subValue)));\r\n            }\r\n            \r\n            if (percent != 0) {\r\n                    if(tokenAddress == address(0)) {\r\n                        IERC20(iAddress).safeTransfer(msg.sender,IERC20(iAddress).balanceOf(address(this)));\r\n                    }\r\n                    else {\r\n                        lpToToken(iAddress, tokenAddress, slippage);\r\n                    }\r\n                }\r\n            indexLpTotalShares[yieldPoolId][iAddress].totalShare = indexLpTotalShares[yieldPoolId][iAddress].totalShare.sub(_withdrawBalance);\r\n            \r\n            if(percent == 1000){\r\n                userIndexInfo[yieldPoolId][iAddress][msg.sender].rewardDebt = 0;\r\n                userIndexInfo[yieldPoolId][iAddress][msg.sender].shares = 0;\r\n            }\r\n            \r\n            else{\r\n                userIndexInfo[yieldPoolId][iAddress][msg.sender].shares = userIndexInfo[yieldPoolId][iAddress][msg.sender].shares.sub(_withdrawBalance);\r\n                userIndexInfo[yieldPoolId][iAddress][msg.sender].rewardDebt = indexLpTotalShares[yieldPoolId][iAddress].accTenPerShare.mul(userIndexInfo[yieldPoolId][iAddress][msg.sender].shares).div(1e12);\r\n            }\r\n        }\r\n        emit _withdraw(msg.sender, tokenAddress, percent);\r\n    }\r\n    \r\n    function _approveTokenIfNeeded(address token, address _routerAddress) private {\r\n            IERC20(token).safeApprove(_routerAddress, 0);\r\n            IERC20(token).safeIncreaseAllowance(_routerAddress,allow);\r\n    }\r\n    \r\n    \r\n \r\n    function lpToToken(IERC20 iAddress, address tokenAddress, uint256 slippage ) internal  {\r\n        if(tokenAddress == wbnbAddress) {\r\n            _approveTokenIfNeeded(address(iAddress),routerAddress);\r\n            (uint amountA,uint amountB) = IPancakeRouter02(routerAddress).removeLiquidity(\r\n                swapPaths[iAddress].token0path[swapPaths[iAddress].token0path.length.sub(1)],\r\n                swapPaths[iAddress].token1path[swapPaths[iAddress].token1path.length.sub(1)],\r\n                IERC20(iAddress).balanceOf(address(this)),\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp.add(600)\r\n            );\r\n            uint256 _returned1 = amountA; uint256 _returned2 = amountB;\r\n            if(reverseSwapPaths[iAddress].token0path[0] != tokenAddress && reverseSwapPaths[iAddress].token0path[reverseSwapPaths[iAddress].token0path.length.sub(1)] == tokenAddress) {\r\n                _returned1 = _safeSwap(\r\n                    routerAddress,\r\n                    amountA,\r\n                    slippage,\r\n                    reverseSwapPaths[iAddress].token0path,\r\n                    address(this),\r\n                    block.timestamp.add(600)\r\n                );\r\n            }\r\n            \r\n            if(reverseSwapPaths[iAddress].token1path[0] != tokenAddress && reverseSwapPaths[iAddress].token1path[reverseSwapPaths[iAddress].token1path.length.sub(1)] == tokenAddress) {\r\n                _returned2 = _safeSwap(\r\n                    routerAddress,\r\n                    amountB,\r\n                    slippage,\r\n                    reverseSwapPaths[iAddress].token1path,\r\n                    address(this),\r\n                    block.timestamp.add(600)\r\n                );\r\n            }\r\n            _unwrapBNB(_returned1.add(_returned2));\r\n            Address.sendValue(payable(msg.sender),_returned1.add(_returned2));\r\n        }\r\n        else {\r\n            _approveTokenIfNeeded(address(iAddress),routerAddress);\r\n            (uint256 amountA,uint256 amountB) = IPancakeRouter02(routerAddress).removeLiquidity(\r\n                swapPathsToken[iAddress].token0path[swapPathsToken[iAddress].token0path.length.sub(1)],\r\n                swapPathsToken[iAddress].token1path[swapPathsToken[iAddress].token1path.length.sub(1)],\r\n                IERC20(iAddress).balanceOf(address(this)),\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp.add(600)\r\n            );\r\n            uint256 _returned1 = amountA;uint256 _returned2 = amountB;\r\n            if(reverseSwapPathsToken[iAddress].token0path[0] != tokenAddress && reverseSwapPathsToken[iAddress].token0path[reverseSwapPathsToken[iAddress].token0path.length.sub(1)] == tokenAddress) {\r\n                _returned1 = _safeSwap(\r\n                    routerAddress,\r\n                    amountA,\r\n                    slippage,\r\n                    reverseSwapPathsToken[iAddress].token0path,\r\n                    address(this),\r\n                    block.timestamp.add(600)\r\n                );\r\n            }\r\n            \r\n            if(reverseSwapPathsToken[iAddress].token1path[0] != tokenAddress && reverseSwapPathsToken[iAddress].token1path[reverseSwapPathsToken[iAddress].token1path.length.sub(1)] == tokenAddress) {\r\n                _returned2 = _safeSwap(\r\n                    routerAddress,\r\n                    amountB,\r\n                    slippage,\r\n                    reverseSwapPathsToken[iAddress].token1path,\r\n                    address(this),\r\n                    block.timestamp.add(600)\r\n                );\r\n            }\r\n            IERC20(tokenAddress).safeTransfer(msg.sender,_returned1.add(_returned2));\r\n        }\r\n    }\r\n    \r\n    function withdrawTokens(IERC20[] calldata tokens) external onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            require(!isPresent[tokens[i]],\"ERROR: Cannot withdraw LPs\");\r\n            require(tokens[i] != IERC20(tenToken), \"ERROR: Cannot withdraw reward token\");\r\n            uint256 qty;\r\n\r\n            if (tokens[i] == IERC20(address(0))) {\r\n                qty = address(this).balance;\r\n                Address.sendValue(payable(owner()), qty);\r\n            } else {\r\n                qty = IERC20(tokens[i]).balanceOf(address(this));\r\n                IERC20(tokens[i]).safeTransfer(owner(), qty);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function _safeSwap(\r\n        address _uniRouterAddress,\r\n        uint256 _amountIn,\r\n        uint256 _slippageFactor,\r\n        address[] memory _path,\r\n        address _to,\r\n        uint256 _deadline\r\n    ) internal virtual returns(uint256) {\r\n        _approveTokenIfNeeded(_path[0],_uniRouterAddress);\r\n        uint256[] memory amounts =\r\n            IPancakeRouter02(_uniRouterAddress).getAmountsOut(_amountIn, _path);\r\n        uint256 amountOut = amounts[amounts.length.sub(1)].mul(_slippageFactor).div(1000);\r\n        uint256 _returned = IPancakeRouter02(_uniRouterAddress)\r\n            .swapExactTokensForTokens(\r\n            _amountIn,\r\n            amountOut,\r\n            _path,\r\n            _to,\r\n            _deadline\r\n        )[amounts.length.sub(1)];\r\n        return _returned;\r\n    }\r\n    \r\n    function _unwrapBNB(uint256 amount) internal virtual {\r\n        // WBNB -> BNB\r\n        if (amount > 0) {\r\n            IWBNB(wbnbAddress).withdraw(amount); // WBNB -> BNB\r\n        }\r\n    }\r\n    \r\n    receive() external payable{\r\n    require(msg.sender == wbnbAddress);\r\n    }\r\n    \r\n    event _deposit (address user, address token, uint256 amount);\r\n    event _withdraw (address user, address token, uint256 percent);\r\n    \r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"_withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LP\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TenLots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_path\",\"type\":\"uint256\"}],\"name\":\"TokenpPathWBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_path\",\"type\":\"uint256\"}],\"name\":\"TokenpathToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_token0path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_token1path\",\"type\":\"address[]\"}],\"name\":\"addPaths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_token0path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_token1path\",\"type\":\"address[]\"}],\"name\":\"addPathsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_Lpaddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageFactor\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeFactorLL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeFactorMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"editMaxPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feesSwapPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldPoolId\",\"type\":\"uint256\"}],\"name\":\"returnLpAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldPoolId\",\"type\":\"uint256\"}],\"name\":\"returnReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"setFeesSwapPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndexInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldPoolId\",\"type\":\"uint256\"}],\"name\":\"userShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"viewAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"viewWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Yieldex", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3d4876bbf423ee826e806cb925c1f049effae70e01965460dac16d0facbf933d"}