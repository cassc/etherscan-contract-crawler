{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n//PancakeStableSwap\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\ncontract PancakeStableSwapLP is ERC20 {\r\n    address public immutable minter;\r\n\r\n    constructor() ERC20(\"Pancake StableSwap LPs\", \"Stable-LP\") {\r\n        minter = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the msg.sender is the minter address.\r\n     */\r\n    modifier onlyMinter() {\r\n        require(msg.sender == minter, \"Not minter\");\r\n        _;\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external onlyMinter {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    function burnFrom(address _to, uint256 _amount) external onlyMinter {\r\n        _burn(_to, _amount);\r\n    }\r\n}\r\ncontract PancakeStableSwap is Ownable, ReentrancyGuard {\r\n    using _SafeERC20 for IERC20;\r\n\r\n    uint256 public constant N_COINS = 2;\r\n\r\n    uint256 public constant MAX_DECIMAL = 18;\r\n    uint256 public constant FEE_DENOMINATOR = 1e10;\r\n    uint256 public constant PRECISION = 1e18;\r\n    uint256[N_COINS] public PRECISION_MUL;\r\n    uint256[N_COINS] public RATES;\r\n\r\n    uint256 public constant MAX_ADMIN_FEE = 1e10;\r\n    uint256 public constant MAX_FEE = 5e9;\r\n    uint256 public constant MAX_A = 1e6;\r\n    uint256 public constant MAX_A_CHANGE = 10;\r\n\r\n    uint256 public constant ADMIN_ACTIONS_DELAY = 3 days;\r\n    uint256 public constant MIN_RAMP_TIME = 1 days;\r\n\r\n    address[N_COINS] public coins;\r\n    uint256[N_COINS] public balances;\r\n    uint256 public fee; // fee * 1e10.\r\n    uint256 public admin_fee; // admin_fee * 1e10.\r\n\r\n    PancakeStableSwapLP public token;\r\n\r\n    uint256 public initial_A;\r\n    uint256 public future_A;\r\n    uint256 public initial_A_time;\r\n    uint256 public future_A_time;\r\n\r\n    uint256 public admin_actions_deadline;\r\n    uint256 public future_fee;\r\n    uint256 public future_admin_fee;\r\n\r\n    uint256 public kill_deadline;\r\n    uint256 public constant KILL_DEADLINE_DT = 2 * 30 days;\r\n    bool public is_killed;\r\n\r\n    address public immutable STABLESWAP_FACTORY;\r\n    bool public isInitialized;\r\n\r\n    event TokenExchange(\r\n        address indexed buyer,\r\n        uint256 sold_id,\r\n        uint256 tokens_sold,\r\n        uint256 bought_id,\r\n        uint256 tokens_bought\r\n    );\r\n    event AddLiquidity(\r\n        address indexed provider,\r\n        uint256[N_COINS] token_amounts,\r\n        uint256[N_COINS] fees,\r\n        uint256 invariant,\r\n        uint256 token_supply\r\n    );\r\n    event RemoveLiquidity(\r\n        address indexed provider,\r\n        uint256[N_COINS] token_amounts,\r\n        uint256[N_COINS] fees,\r\n        uint256 token_supply\r\n    );\r\n    event RemoveLiquidityOne(address indexed provider, uint256 index, uint256 token_amount, uint256 coin_amount);\r\n    event RemoveLiquidityImbalance(\r\n        address indexed provider,\r\n        uint256[N_COINS] token_amounts,\r\n        uint256[N_COINS] fees,\r\n        uint256 invariant,\r\n        uint256 token_supply\r\n    );\r\n    event CommitNewFee(uint256 indexed deadline, uint256 fee, uint256 admin_fee);\r\n    event NewFee(uint256 fee, uint256 admin_fee);\r\n    event RampA(uint256 old_A, uint256 new_A, uint256 initial_time, uint256 future_time);\r\n    event StopRampA(uint256 A, uint256 t);\r\n    event RevertParameters();\r\n    event DonateAdminFees();\r\n    event Kill();\r\n    event Unkill();\r\n\r\n    /**\r\n     * @notice constructor\r\n     */\r\n    constructor() {\r\n        STABLESWAP_FACTORY = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice initialize\r\n     * @param _coins: Addresses of ERC20 conracts of coins (c-tokens) involved\r\n     * @param _A: Amplification coefficient multiplied by n * (n - 1)\r\n     * @param _fee: Fee to charge for exchanges\r\n     * @param _admin_fee: Admin fee\r\n     * @param _owner: Owner\r\n     */\r\n    function initialize(\r\n        address[N_COINS] memory _coins,\r\n        uint256 _A,\r\n        uint256 _fee,\r\n        uint256 _admin_fee,\r\n        address _owner\r\n    ) external {\r\n        require(!isInitialized, \"Operations: Already initialized\");\r\n        require(msg.sender == STABLESWAP_FACTORY, \"Operations: Not factory\");\r\n        require(_A <= MAX_A, \"_A exceeds maximum\");\r\n        require(_fee <= MAX_FEE, \"_fee exceeds maximum\");\r\n        require(_admin_fee <= MAX_ADMIN_FEE, \"_admin_fee exceeds maximum\");\r\n        isInitialized = true;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            require(_coins[i] != address(0), \"ZERO Address\");\r\n            uint256 coinDecimal = IERC20Metadata(_coins[i]).decimals();\r\n            require(coinDecimal <= MAX_DECIMAL, \"The maximum decimal cannot exceed 18\");\r\n            //set PRECISION_MUL and  RATES\r\n            PRECISION_MUL[i] = 10**(MAX_DECIMAL - coinDecimal);\r\n            RATES[i] = PRECISION * PRECISION_MUL[i];\r\n        }\r\n        // create LP token\r\n        bytes memory bytecode = type(PancakeStableSwapLP).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(_coins, msg.sender, block.timestamp, block.chainid));\r\n        address lpToken;\r\n        assembly {\r\n            lpToken := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n        coins = _coins;\r\n        initial_A = _A;\r\n        future_A = _A;\r\n        fee = _fee;\r\n        admin_fee = _admin_fee;\r\n        kill_deadline = block.timestamp + KILL_DEADLINE_DT;\r\n        token = PancakeStableSwapLP(lpToken);\r\n\r\n        transferOwnership(_owner);\r\n    }\r\n\r\n    function get_A() internal view returns (uint256) {\r\n        //Handle ramping A up or down\r\n        uint256 t1 = future_A_time;\r\n        uint256 A1 = future_A;\r\n        if (block.timestamp < t1) {\r\n            uint256 A0 = initial_A;\r\n            uint256 t0 = initial_A_time;\r\n            // Expressions in uint256 cannot have negative numbers, thus \"if\"\r\n            if (A1 > A0) {\r\n                return A0 + ((A1 - A0) * (block.timestamp - t0)) / (t1 - t0);\r\n            } else {\r\n                return A0 - ((A0 - A1) * (block.timestamp - t0)) / (t1 - t0);\r\n            }\r\n        } else {\r\n            // when t1 == 0 or block.timestamp >= t1\r\n            return A1;\r\n        }\r\n    }\r\n\r\n    function A() external view returns (uint256) {\r\n        return get_A();\r\n    }\r\n\r\n    function _xp() internal view returns (uint256[N_COINS] memory result) {\r\n        result = RATES;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            result[i] = (result[i] * balances[i]) / PRECISION;\r\n        }\r\n    }\r\n\r\n    function _xp_mem(uint256[N_COINS] memory _balances) internal view returns (uint256[N_COINS] memory result) {\r\n        result = RATES;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            result[i] = (result[i] * _balances[i]) / PRECISION;\r\n        }\r\n    }\r\n\r\n    function get_D(uint256[N_COINS] memory xp, uint256 amp) internal pure returns (uint256) {\r\n        uint256 S;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            S += xp[i];\r\n        }\r\n        if (S == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 Dprev;\r\n        uint256 D = S;\r\n        uint256 Ann = amp * N_COINS;\r\n        for (uint256 j = 0; j < 255; j++) {\r\n            uint256 D_P = D;\r\n            for (uint256 k = 0; k < N_COINS; k++) {\r\n                D_P = (D_P * D) / (xp[k] * N_COINS); // If division by 0, this will be borked: only withdrawal will work. And that is good\r\n            }\r\n            Dprev = D;\r\n            D = ((Ann * S + D_P * N_COINS) * D) / ((Ann - 1) * D + (N_COINS + 1) * D_P);\r\n            // Equality with the precision of 1\r\n            if (D > Dprev) {\r\n                if (D - Dprev <= 1) {\r\n                    break;\r\n                }\r\n            } else {\r\n                if (Dprev - D <= 1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return D;\r\n    }\r\n\r\n    function get_D_mem(uint256[N_COINS] memory _balances, uint256 amp) internal view returns (uint256) {\r\n        return get_D(_xp_mem(_balances), amp);\r\n    }\r\n\r\n    function get_virtual_price() external view returns (uint256) {\r\n        /**\r\n        Returns portfolio virtual price (for calculating profit)\r\n        scaled up by 1e18\r\n        */\r\n        uint256 D = get_D(_xp(), get_A());\r\n        /**\r\n        D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n        When balanced, D = n * x_u - total virtual value of the portfolio\r\n        */\r\n        uint256 token_supply = token.totalSupply();\r\n        return (D * PRECISION) / token_supply;\r\n    }\r\n\r\n    function calc_token_amount(uint256[N_COINS] memory amounts, bool deposit) external view returns (uint256) {\r\n        /**\r\n        Simplified method to calculate addition or reduction in token supply at\r\n        deposit or withdrawal without taking fees into account (but looking at\r\n        slippage).\r\n        Needed to prevent front-running, not for precise calculations!\r\n        */\r\n        uint256[N_COINS] memory _balances = balances;\r\n        uint256 amp = get_A();\r\n        uint256 D0 = get_D_mem(_balances, amp);\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            if (deposit) {\r\n                _balances[i] += amounts[i];\r\n            } else {\r\n                _balances[i] -= amounts[i];\r\n            }\r\n        }\r\n        uint256 D1 = get_D_mem(_balances, amp);\r\n        uint256 token_amount = token.totalSupply();\r\n        uint256 difference;\r\n        if (deposit) {\r\n            difference = D1 - D0;\r\n        } else {\r\n            difference = D0 - D1;\r\n        }\r\n        return (difference * token_amount) / D0;\r\n    }\r\n\r\n    function add_liquidity(uint256[N_COINS] memory amounts, uint256 min_mint_amount) external nonReentrant {\r\n        //Amounts is amounts of c-tokens\r\n        require(!is_killed, \"Killed\");\r\n        uint256[N_COINS] memory fees;\r\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\r\n        uint256 _admin_fee = admin_fee;\r\n        uint256 amp = get_A();\r\n\r\n        uint256 token_supply = token.totalSupply();\r\n        //Initial invariant\r\n        uint256 D0;\r\n        uint256[N_COINS] memory old_balances = balances;\r\n        if (token_supply > 0) {\r\n            D0 = get_D_mem(old_balances, amp);\r\n        }\r\n        uint256[N_COINS] memory new_balances = old_balances;\r\n\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            if (token_supply == 0) {\r\n                require(amounts[i] > 0, \"Initial deposit requires all coins\");\r\n            }\r\n            // balances store amounts of c-tokens\r\n            new_balances[i] = old_balances[i] + amounts[i];\r\n        }\r\n\r\n        // Invariant after change\r\n        uint256 D1 = get_D_mem(new_balances, amp);\r\n        require(D1 > D0, \"D1 must be greater than D0\");\r\n\r\n        // We need to recalculate the invariant accounting for fees\r\n        // to calculate fair user's share\r\n        uint256 D2 = D1;\r\n        if (token_supply > 0) {\r\n            // Only account for fees if we are not the first to deposit\r\n            for (uint256 i = 0; i < N_COINS; i++) {\r\n                uint256 ideal_balance = (D1 * old_balances[i]) / D0;\r\n                uint256 difference;\r\n                if (ideal_balance > new_balances[i]) {\r\n                    difference = ideal_balance - new_balances[i];\r\n                } else {\r\n                    difference = new_balances[i] - ideal_balance;\r\n                }\r\n\r\n                fees[i] = (_fee * difference) / FEE_DENOMINATOR;\r\n                balances[i] = new_balances[i] - ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\r\n                new_balances[i] -= fees[i];\r\n            }\r\n            D2 = get_D_mem(new_balances, amp);\r\n        } else {\r\n            balances = new_balances;\r\n        }\r\n\r\n        // Calculate, how much pool tokens to mint\r\n        uint256 mint_amount;\r\n        if (token_supply == 0) {\r\n            mint_amount = D1; // Take the dust if there was any\r\n        } else {\r\n            mint_amount = (token_supply * (D2 - D0)) / D0;\r\n        }\r\n        require(mint_amount >= min_mint_amount, \"Slippage screwed you\");\r\n\r\n        // Take coins from the sender\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            uint256 amount = amounts[i];\r\n            if (amount > 0) {\r\n                IERC20(coins[i]).safeTransferFrom(msg.sender, address(this), amount);\r\n            }\r\n        }\r\n\r\n        // Mint pool tokens\r\n        token.mint(msg.sender, mint_amount);\r\n\r\n        emit AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount);\r\n    }\r\n\r\n    function get_y(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 x,\r\n        uint256[N_COINS] memory xp_\r\n    ) internal view returns (uint256) {\r\n        // x in the input is converted to the same price/precision\r\n        require((i != j) && (i < N_COINS) && (j < N_COINS), \"Illegal parameter\");\r\n        uint256 amp = get_A();\r\n        uint256 D = get_D(xp_, amp);\r\n        uint256 c = D;\r\n        uint256 S_;\r\n        uint256 Ann = amp * N_COINS;\r\n\r\n        uint256 _x;\r\n        for (uint256 k = 0; k < N_COINS; k++) {\r\n            if (k == i) {\r\n                _x = x;\r\n            } else if (k != j) {\r\n                _x = xp_[k];\r\n            } else {\r\n                continue;\r\n            }\r\n            S_ += _x;\r\n            c = (c * D) / (_x * N_COINS);\r\n        }\r\n        c = (c * D) / (Ann * N_COINS);\r\n        uint256 b = S_ + D / Ann; // - D\r\n        uint256 y_prev;\r\n        uint256 y = D;\r\n\r\n        for (uint256 m = 0; m < 255; m++) {\r\n            y_prev = y;\r\n            y = (y * y + c) / (2 * y + b - D);\r\n            // Equality with the precision of 1\r\n            if (y > y_prev) {\r\n                if (y - y_prev <= 1) {\r\n                    break;\r\n                }\r\n            } else {\r\n                if (y_prev - y <= 1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return y;\r\n    }\r\n\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256) {\r\n        // dx and dy in c-units\r\n        uint256[N_COINS] memory rates = RATES;\r\n        uint256[N_COINS] memory xp = _xp();\r\n\r\n        uint256 x = xp[i] + ((dx * rates[i]) / PRECISION);\r\n        uint256 y = get_y(i, j, x, xp);\r\n        uint256 dy = ((xp[j] - y - 1) * PRECISION) / rates[j];\r\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\r\n        return dy - _fee;\r\n    }\r\n\r\n    function get_dy_underlying(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256) {\r\n        // dx and dy in underlying units\r\n        uint256[N_COINS] memory xp = _xp();\r\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\r\n\r\n        uint256 x = xp[i] + dx * precisions[i];\r\n        uint256 y = get_y(i, j, x, xp);\r\n        uint256 dy = (xp[j] - y - 1) / precisions[j];\r\n        uint256 _fee = (fee * dy) / FEE_DENOMINATOR;\r\n        return dy - _fee;\r\n    }\r\n\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external nonReentrant {\r\n        require(!is_killed, \"Killed\");\r\n\r\n        uint256[N_COINS] memory old_balances = balances;\r\n        uint256[N_COINS] memory xp = _xp_mem(old_balances);\r\n\r\n        uint256 x = xp[i] + (dx * RATES[i]) / PRECISION;\r\n        uint256 y = get_y(i, j, x, xp);\r\n\r\n        uint256 dy = xp[j] - y - 1; //  -1 just in case there were some rounding errors\r\n        uint256 dy_fee = (dy * fee) / FEE_DENOMINATOR;\r\n\r\n        // Convert all to real units\r\n        dy = ((dy - dy_fee) * PRECISION) / RATES[j];\r\n        require(dy >= min_dy, \"Exchange resulted in fewer coins than expected\");\r\n\r\n        uint256 dy_admin_fee = (dy_fee * admin_fee) / FEE_DENOMINATOR;\r\n        dy_admin_fee = (dy_admin_fee * PRECISION) / RATES[j];\r\n\r\n        // Change balances exactly in same way as we change actual ERC20 coin amounts\r\n        balances[i] = old_balances[i] + dx;\r\n        // When rounding errors happen, we undercharge admin fee in favor of LP\r\n        balances[j] = old_balances[j] - dy - dy_admin_fee;\r\n\r\n        address iAddress = coins[i];\r\n        IERC20(iAddress).safeTransferFrom(msg.sender, address(this), dx);\r\n        address jAddress = coins[j];\r\n        IERC20(jAddress).safeTransfer(msg.sender, dy);\r\n\r\n        emit TokenExchange(msg.sender, i, dx, j, dy);\r\n    }\r\n\r\n    function remove_liquidity(uint256 _amount, uint256[N_COINS] memory min_amounts) external nonReentrant {\r\n        uint256 total_supply = token.totalSupply();\r\n        uint256[N_COINS] memory amounts;\r\n        uint256[N_COINS] memory fees; //Fees are unused but we've got them historically in event\r\n\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            uint256 value = (balances[i] * _amount) / total_supply;\r\n            require(value >= min_amounts[i], \"Withdrawal resulted in fewer coins than expected\");\r\n            balances[i] -= value;\r\n            amounts[i] = value;\r\n            IERC20(coins[i]).safeTransfer(msg.sender, value);\r\n        }\r\n\r\n        token.burnFrom(msg.sender, _amount); // dev: insufficient funds\r\n\r\n        emit RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount);\r\n    }\r\n\r\n    function remove_liquidity_imbalance(uint256[N_COINS] memory amounts, uint256 max_burn_amount)\r\n        external\r\n        nonReentrant\r\n    {\r\n        require(!is_killed, \"Killed\");\r\n\r\n        uint256 token_supply = token.totalSupply();\r\n        require(token_supply > 0, \"dev: zero total supply\");\r\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\r\n        uint256 _admin_fee = admin_fee;\r\n        uint256 amp = get_A();\r\n\r\n        uint256[N_COINS] memory old_balances = balances;\r\n        uint256[N_COINS] memory new_balances = old_balances;\r\n        uint256 D0 = get_D_mem(old_balances, amp);\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            new_balances[i] -= amounts[i];\r\n        }\r\n        uint256 D1 = get_D_mem(new_balances, amp);\r\n        uint256[N_COINS] memory fees;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            uint256 ideal_balance = (D1 * old_balances[i]) / D0;\r\n            uint256 difference;\r\n            if (ideal_balance > new_balances[i]) {\r\n                difference = ideal_balance - new_balances[i];\r\n            } else {\r\n                difference = new_balances[i] - ideal_balance;\r\n            }\r\n            fees[i] = (_fee * difference) / FEE_DENOMINATOR;\r\n            balances[i] = new_balances[i] - ((fees[i] * _admin_fee) / FEE_DENOMINATOR);\r\n            new_balances[i] -= fees[i];\r\n        }\r\n        uint256 D2 = get_D_mem(new_balances, amp);\r\n\r\n        uint256 token_amount = ((D0 - D2) * token_supply) / D0;\r\n        require(token_amount > 0, \"token_amount must be greater than 0\");\r\n        token_amount += 1; // In case of rounding errors - make it unfavorable for the \"attacker\"\r\n        require(token_amount <= max_burn_amount, \"Slippage screwed you\");\r\n\r\n        token.burnFrom(msg.sender, token_amount); // dev: insufficient funds\r\n\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            if (amounts[i] > 0) {\r\n                IERC20(coins[i]).safeTransfer(msg.sender, amounts[i]);\r\n            }\r\n        }\r\n        token_supply -= token_amount;\r\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, token_supply);\r\n    }\r\n\r\n    function get_y_D(\r\n        uint256 A_,\r\n        uint256 i,\r\n        uint256[N_COINS] memory xp,\r\n        uint256 D\r\n    ) internal pure returns (uint256) {\r\n        /**\r\n        Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n        Done by solving quadratic equation iteratively.\r\n        x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n        x_1**2 + b*x_1 = c\r\n\r\n        x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n        */\r\n        // x in the input is converted to the same price/precision\r\n        require(i < N_COINS, \"dev: i above N_COINS\");\r\n        uint256 c = D;\r\n        uint256 S_;\r\n        uint256 Ann = A_ * N_COINS;\r\n\r\n        uint256 _x;\r\n        for (uint256 k = 0; k < N_COINS; k++) {\r\n            if (k != i) {\r\n                _x = xp[k];\r\n            } else {\r\n                continue;\r\n            }\r\n            S_ += _x;\r\n            c = (c * D) / (_x * N_COINS);\r\n        }\r\n        c = (c * D) / (Ann * N_COINS);\r\n        uint256 b = S_ + D / Ann;\r\n        uint256 y_prev;\r\n        uint256 y = D;\r\n\r\n        for (uint256 k = 0; k < 255; k++) {\r\n            y_prev = y;\r\n            y = (y * y + c) / (2 * y + b - D);\r\n            // Equality with the precision of 1\r\n            if (y > y_prev) {\r\n                if (y - y_prev <= 1) {\r\n                    break;\r\n                }\r\n            } else {\r\n                if (y_prev - y <= 1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return y;\r\n    }\r\n\r\n    function _calc_withdraw_one_coin(uint256 _token_amount, uint256 i) internal view returns (uint256, uint256) {\r\n        // First, need to calculate\r\n        // * Get current D\r\n        // * Solve Eqn against y_i for D - _token_amount\r\n        uint256 amp = get_A();\r\n        uint256 _fee = (fee * N_COINS) / (4 * (N_COINS - 1));\r\n        uint256[N_COINS] memory precisions = PRECISION_MUL;\r\n        uint256 total_supply = token.totalSupply();\r\n\r\n        uint256[N_COINS] memory xp = _xp();\r\n\r\n        uint256 D0 = get_D(xp, amp);\r\n        uint256 D1 = D0 - (_token_amount * D0) / total_supply;\r\n        uint256[N_COINS] memory xp_reduced = xp;\r\n\r\n        uint256 new_y = get_y_D(amp, i, xp, D1);\r\n        uint256 dy_0 = (xp[i] - new_y) / precisions[i]; // w/o fees\r\n\r\n        for (uint256 k = 0; k < N_COINS; k++) {\r\n            uint256 dx_expected;\r\n            if (k == i) {\r\n                dx_expected = (xp[k] * D1) / D0 - new_y;\r\n            } else {\r\n                dx_expected = xp[k] - (xp[k] * D1) / D0;\r\n            }\r\n            xp_reduced[k] -= (_fee * dx_expected) / FEE_DENOMINATOR;\r\n        }\r\n        uint256 dy = xp_reduced[i] - get_y_D(amp, i, xp_reduced, D1);\r\n        dy = (dy - 1) / precisions[i]; // Withdraw less to account for rounding errors\r\n\r\n        return (dy, dy_0 - dy);\r\n    }\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i) external view returns (uint256) {\r\n        (uint256 dy, ) = _calc_withdraw_one_coin(_token_amount, i);\r\n        return dy;\r\n    }\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        uint256 i,\r\n        uint256 min_amount\r\n    ) external nonReentrant {\r\n        // Remove _amount of liquidity all in a form of coin i\r\n        require(!is_killed, \"Killed\");\r\n        (uint256 dy, uint256 dy_fee) = _calc_withdraw_one_coin(_token_amount, i);\r\n        require(dy >= min_amount, \"Not enough coins removed\");\r\n\r\n        balances[i] -= (dy + (dy_fee * admin_fee) / FEE_DENOMINATOR);\r\n        token.burnFrom(msg.sender, _token_amount); // dev: insufficient funds\r\n        IERC20(coins[i]).safeTransfer(msg.sender, dy);\r\n\r\n        emit RemoveLiquidityOne(msg.sender, i, _token_amount, dy);\r\n    }\r\n\r\n    // Admin functions\r\n\r\n    function ramp_A(uint256 _future_A, uint256 _future_time) external onlyOwner {\r\n        require(block.timestamp >= initial_A_time + MIN_RAMP_TIME, \"dev : too early\");\r\n        require(_future_time >= block.timestamp + MIN_RAMP_TIME, \"dev: insufficient time\");\r\n\r\n        uint256 _initial_A = get_A();\r\n        require(_future_A > 0 && _future_A < MAX_A, \"_future_A must be between 0 and MAX_A\");\r\n        require(\r\n            (_future_A >= _initial_A && _future_A <= _initial_A * MAX_A_CHANGE) ||\r\n                (_future_A < _initial_A && _future_A * MAX_A_CHANGE >= _initial_A),\r\n            \"Illegal parameter _future_A\"\r\n        );\r\n        initial_A = _initial_A;\r\n        future_A = _future_A;\r\n        initial_A_time = block.timestamp;\r\n        future_A_time = _future_time;\r\n\r\n        emit RampA(_initial_A, _future_A, block.timestamp, _future_time);\r\n    }\r\n\r\n    function stop_rampget_A() external onlyOwner {\r\n        uint256 current_A = get_A();\r\n        initial_A = current_A;\r\n        future_A = current_A;\r\n        initial_A_time = block.timestamp;\r\n        future_A_time = block.timestamp;\r\n        // now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n        emit StopRampA(current_A, block.timestamp);\r\n    }\r\n\r\n    function commit_new_fee(uint256 new_fee, uint256 new_admin_fee) external onlyOwner {\r\n        require(admin_actions_deadline == 0, \"admin_actions_deadline must be 0\"); // dev: active action\r\n        require(new_fee <= MAX_FEE, \"dev: fee exceeds maximum\");\r\n        require(new_admin_fee <= MAX_ADMIN_FEE, \"dev: admin fee exceeds maximum\");\r\n\r\n        admin_actions_deadline = block.timestamp + ADMIN_ACTIONS_DELAY;\r\n        future_fee = new_fee;\r\n        future_admin_fee = new_admin_fee;\r\n\r\n        emit CommitNewFee(admin_actions_deadline, new_fee, new_admin_fee);\r\n    }\r\n\r\n    function apply_new_fee() external onlyOwner {\r\n        require(block.timestamp >= admin_actions_deadline, \"dev: insufficient time\");\r\n        require(admin_actions_deadline != 0, \"admin_actions_deadline should not be 0\");\r\n\r\n        admin_actions_deadline = 0;\r\n        fee = future_fee;\r\n        admin_fee = future_admin_fee;\r\n\r\n        emit NewFee(fee, admin_fee);\r\n    }\r\n\r\n    function revert_new_parameters() external onlyOwner {\r\n        admin_actions_deadline = 0;\r\n        emit RevertParameters();\r\n    }\r\n\r\n    function admin_balances(uint256 i) external view returns (uint256) {\r\n        return IERC20(coins[i]).balanceOf(address(this)) - balances[i];\r\n    }\r\n\r\n    function withdraw_admin_fees() external onlyOwner {\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            address c = coins[i];\r\n            uint256 value = IERC20(c).balanceOf(address(this)) - balances[i];\r\n            if (value > 0) {\r\n                IERC20(c).safeTransfer(msg.sender, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    function donate_admin_fees() external onlyOwner {\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            balances[i] = IERC20(coins[i]).balanceOf(address(this));\r\n        }\r\n        emit DonateAdminFees();\r\n    }\r\n\r\n    function kill_me() external onlyOwner {\r\n        require(kill_deadline > block.timestamp, \"Exceeded deadline\");\r\n        is_killed = true;\r\n        emit Kill();\r\n    }\r\n\r\n    function unkill_me() external onlyOwner {\r\n        is_killed = false;\r\n        emit Unkill();\r\n    }\r\n}\r\n//PancakeSwapSmartRouter\r\n\r\ninterface IPancakeswapV2Exchange {\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 _reserve0,\r\n        uint112 _reserve1,\r\n        uint32 _blockTimestampLast\r\n    );\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n}\r\ninterface IERC20MetadataUppercase {\r\n    function NAME() external view returns (string memory); // solhint-disable-line func-name-mixedcase\r\n\r\n    function SYMBOL() external view returns (string memory); // solhint-disable-line func-name-mixedcase\r\n}\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\ninterface IDaiLikePermit {\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\ninterface IStableSwap {\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external payable;\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function balances(uint256 i) external view returns (uint256);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function A() external view returns (uint256);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function fee() external view returns (uint256);\r\n}\r\ninterface IStableSwapFactory {\r\n    struct StableSwapPairInfo {\r\n        address swapContract;\r\n        address token0;\r\n        address token1;\r\n        address LPContract;\r\n    }\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function pairLength() external view returns (uint256);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function getPairInfo(address _tokenA, address _tokenB) external view returns (StableSwapPairInfo memory info);\r\n}\r\ninterface IPancakeswapV2Factory {\r\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IPancakeswapV2Exchange pair);\r\n}\r\ninterface IWETH02 is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\nlibrary PancakeswapV2ExchangeLib {\r\n    using Math for uint256;\r\n    using UniERC20 for IERC20;\r\n\r\n    function getReturn(\r\n        IPancakeswapV2Exchange exchange,\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        uint256 amountIn\r\n    )\r\n    internal\r\n    view\r\n    returns (\r\n        uint256 result,\r\n        bool needSync\r\n    )\r\n    {\r\n        uint256 reserveIn = srcToken.uniBalanceOf(address(exchange));\r\n        uint256 reserveOut = dstToken.uniBalanceOf(address(exchange));\r\n        (uint112 reserve0, uint112 reserve1, ) = exchange.getReserves();\r\n        if (srcToken > dstToken) {\r\n            (reserve0, reserve1) = (reserve1, reserve0);\r\n        }\r\n        amountIn = reserveIn - reserve0;\r\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\r\n\r\n        uint256 amountInWithFee = amountIn * 9975;\r\n        uint256 numerator = amountInWithFee * Math.min(reserveOut, reserve1);\r\n        uint256 denominator = Math.min(reserveIn, reserve0) * 10000 + amountInWithFee;\r\n        result = (denominator == 0) ? 0 : numerator / denominator;\r\n    }\r\n}\r\nlibrary RevertReasonForwarder {\r\n    /// @dev Forwards latest externall call revert.\r\n    function reRevert() internal pure {\r\n        // bubble up revert reason from latest external call\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, returndatasize())\r\n            revert(ptr, returndatasize())\r\n        }\r\n    }\r\n}\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute.\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\nlibrary StringUtil {\r\n    function toHex(uint256 value) internal pure returns (string memory) {\r\n        return toHex(abi.encodePacked(value));\r\n    }\r\n\r\n    function toHex(address value) internal pure returns (string memory) {\r\n        return toHex(abi.encodePacked(value));\r\n    }\r\n\r\n    /// @dev this is the assembly adaptation of highly optimized toHex16 code from Mikhail Vladimirov\r\n    /// https://stackoverflow.com/a/69266989\r\n    function toHex(bytes memory data) internal pure returns (string memory result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            function _toHex16(input) -> output {\r\n                output := or(\r\n                and(input, 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000),\r\n                shr(64, and(input, 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000))\r\n                )\r\n                output := or(\r\n                and(output, 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000),\r\n                shr(32, and(output, 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000))\r\n                )\r\n                output := or(\r\n                and(output, 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000),\r\n                shr(16, and(output, 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000))\r\n                )\r\n                output := or(\r\n                and(output, 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000),\r\n                shr(8, and(output, 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000))\r\n                )\r\n                output := or(\r\n                shr(4, and(output, 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000)),\r\n                shr(8, and(output, 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00))\r\n                )\r\n                output := add(\r\n                add(0x3030303030303030303030303030303030303030303030303030303030303030, output),\r\n                mul(\r\n                and(\r\n                shr(4, add(output, 0x0606060606060606060606060606060606060606060606060606060606060606)),\r\n                0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F\r\n                ),\r\n                7 // Change 7 to 39 for lower case output\r\n                )\r\n                )\r\n            }\r\n\r\n            result := mload(0x40)\r\n            let length := mload(data)\r\n            let resultLength := shl(1, length)\r\n            let toPtr := add(result, 0x22) // 32 bytes for length + 2 bytes for '0x'\r\n            mstore(0x40, add(toPtr, resultLength)) // move free memory pointer\r\n            mstore(add(result, 2), 0x3078) // 0x3078 is right aligned so we write to `result + 2`\r\n        // to store the last 2 bytes in the beginning of the string\r\n            mstore(result, add(resultLength, 2)) // extra 2 bytes for '0x'\r\n\r\n            for {\r\n                let fromPtr := add(data, 0x20)\r\n                let endPtr := add(fromPtr, length)\r\n            } lt(fromPtr, endPtr) {\r\n                fromPtr := add(fromPtr, 0x20)\r\n            } {\r\n                let rawData := mload(fromPtr)\r\n                let hexData := _toHex16(rawData)\r\n                mstore(toPtr, hexData)\r\n                toPtr := add(toPtr, 0x20)\r\n                hexData := _toHex16(shl(128, rawData))\r\n                mstore(toPtr, hexData)\r\n                toPtr := add(toPtr, 0x20)\r\n            }\r\n        }\r\n    }\r\n}\r\nlibrary UniERC20 {\r\n    using _SafeERC20 for IERC20;\r\n\r\n    error InsufficientBalance();\r\n    error ApproveCalledOnETH();\r\n    error NotEnoughValue();\r\n    error FromIsNotSender();\r\n    error ToIsNotThis();\r\n    error ETHTransferFailed();\r\n\r\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\r\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    IERC20 private constant _ZERO_ADDRESS = IERC20(address(0));\r\n\r\n    /// @dev Returns true if `token` is ETH.\r\n    function isETH(IERC20 token) internal pure returns (bool) {\r\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\r\n    }\r\n\r\n    /// @dev Returns `account` ERC20 `token` balance.\r\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\r\n        if (isETH(token)) {\r\n            return account.balance;\r\n        } else {\r\n            return token.balanceOf(account);\r\n        }\r\n    }\r\n\r\n    /// @dev `token` transfer `to` `amount`.\r\n    /// Note that this function does nothing in case of zero amount.\r\n    function uniTransfer(\r\n        IERC20 token,\r\n        address payable to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                if (address(this).balance < amount) revert InsufficientBalance();\r\n                // solhint-disable-next-line avoid-low-level-calls\r\n                (bool success, ) = to.call{value: amount, gas: _RAW_CALL_GAS_LIMIT}(\"\");\r\n                if (!success) revert ETHTransferFailed();\r\n            } else {\r\n                token.safeTransfer(to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev `token` transfer `from` `to` `amount`.\r\n    /// Note that this function does nothing in case of zero amount.\r\n    function uniTransferFrom(\r\n        IERC20 token,\r\n        address payable from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (amount > 0) {\r\n            if (isETH(token)) {\r\n                if (msg.value < amount) revert NotEnoughValue();\r\n                if (from != msg.sender) revert FromIsNotSender();\r\n                if (to != address(this)) revert ToIsNotThis();\r\n                if (msg.value > amount) {\r\n                    // Return remainder if exist\r\n                unchecked {\r\n                    // solhint-disable-next-line avoid-low-level-calls\r\n                    (bool success, ) = from.call{value: msg.value - amount, gas: _RAW_CALL_GAS_LIMIT}(\"\");\r\n                    if (!success) revert ETHTransferFailed();\r\n                }\r\n                }\r\n            } else {\r\n                token.safeTransferFrom(from, to, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns `token` symbol from ERC20 metadata.\r\n    function uniSymbol(IERC20 token) internal view returns (string memory) {\r\n        return _uniDecode(token, IERC20Metadata.symbol.selector, IERC20MetadataUppercase.SYMBOL.selector);\r\n    }\r\n\r\n    /// @dev Returns `token` name from ERC20 metadata.\r\n    function uniName(IERC20 token) internal view returns (string memory) {\r\n        return _uniDecode(token, IERC20Metadata.name.selector, IERC20MetadataUppercase.NAME.selector);\r\n    }\r\n\r\n    /// @dev Reverts if `token` is ETH, otherwise performs ERC20 forceApprove.\r\n    function uniApprove(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        if (isETH(token)) revert ApproveCalledOnETH();\r\n\r\n        token.forceApprove(to, amount);\r\n    }\r\n\r\n    /// @dev 20K gas is provided to account for possible implementations of name/symbol\r\n    /// (token implementation might be behind proxy or store the value in storage)\r\n    function _uniDecode(\r\n        IERC20 token,\r\n        bytes4 lowerCaseSelector,\r\n        bytes4 upperCaseSelector\r\n    ) private view returns (string memory result) {\r\n        if (isETH(token)) {\r\n            return \"ETH\";\r\n        }\r\n\r\n        (bool success, bytes memory data) = address(token).staticcall{gas: 20000}(\r\n            abi.encodeWithSelector(lowerCaseSelector)\r\n        );\r\n        if (!success) {\r\n            (success, data) = address(token).staticcall{gas: 20000}(abi.encodeWithSelector(upperCaseSelector));\r\n        }\r\n\r\n        if (success && data.length >= 0x40) {\r\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\r\n            /*\r\n                return data is padded up to 32 bytes with ABI encoder also sometimes\r\n                there is extra 32 bytes of zeros padded in the end:\r\n                https://github.com/ethereum/solidity/issues/10170\r\n                because of that we can't check for equality and instead check\r\n                that overall data length is greater or equal than string length + extra 64 bytes\r\n            */\r\n            if (offset == 0x20 && data.length >= 0x40 + len) {\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                // solhint-disable-line no-inline-assembly\r\n                    result := add(data, 0x40)\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        if (success && data.length == 32) {\r\n            uint256 len = 0;\r\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\r\n            unchecked {\r\n                len++;\r\n            }\r\n            }\r\n\r\n            if (len > 0) {\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                // solhint-disable-line no-inline-assembly\r\n                    mstore(data, len)\r\n                }\r\n                return string(data);\r\n            }\r\n        }\r\n\r\n        return StringUtil.toHex(address(token));\r\n    }\r\n}\r\nlibrary _SafeERC20 {\r\n    error SafeTransferFailed();\r\n    error SafeTransferFromFailed();\r\n    error ForceApproveFailed();\r\n    error SafeIncreaseAllowanceFailed();\r\n    error SafeDecreaseAllowanceFailed();\r\n    error SafePermitBadLength();\r\n\r\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bytes4 selector = token.transferFrom.selector;\r\n        bool success;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            let data := mload(0x40)\r\n\r\n            mstore(data, selector)\r\n            mstore(add(data, 0x04), from)\r\n            mstore(add(data, 0x24), to)\r\n            mstore(add(data, 0x44), amount)\r\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {\r\n                    success := gt(extcodesize(token), 0)\r\n                }\r\n                default {\r\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\r\n                }\r\n            }\r\n        }\r\n        if (!success) revert SafeTransferFromFailed();\r\n    }\r\n\r\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\r\n            revert SafeTransferFailed();\r\n        }\r\n    }\r\n\r\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\r\n    function forceApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\r\n            if (\r\n                !_makeCall(token, token.approve.selector, spender, 0) ||\r\n            !_makeCall(token, token.approve.selector, spender, value)\r\n            ) {\r\n                revert ForceApproveFailed();\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Allowance increase with safe math check.\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\r\n        forceApprove(token, spender, allowance + value);\r\n    }\r\n\r\n    /// @dev Allowance decrease with safe math check.\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 allowance = token.allowance(address(this), spender);\r\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\r\n        forceApprove(token, spender, allowance - value);\r\n    }\r\n\r\n    /// @dev Calls either ERC20 or Dai `permit` for `token`, if unsuccessful forwards revert from external call.\r\n    function safePermit(IERC20 token, bytes calldata permit) internal {\r\n        if (!tryPermit(token, permit)) RevertReasonForwarder.reRevert();\r\n    }\r\n\r\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns (bool) {\r\n        if (permit.length == 32 * 7) {\r\n            return _makeCalldataCall(token, IERC20Permit.permit.selector, permit);\r\n        }\r\n        if (permit.length == 32 * 8) {\r\n            return _makeCalldataCall(token, IDaiLikePermit.permit.selector, permit);\r\n        }\r\n        revert SafePermitBadLength();\r\n    }\r\n\r\n    function _makeCall(\r\n        IERC20 token,\r\n        bytes4 selector,\r\n        address to,\r\n        uint256 amount\r\n    ) private returns (bool success) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            let data := mload(0x40)\r\n\r\n            mstore(data, selector)\r\n            mstore(add(data, 0x04), to)\r\n            mstore(add(data, 0x24), amount)\r\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {\r\n                    success := gt(extcodesize(token), 0)\r\n                }\r\n                default {\r\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _makeCalldataCall(\r\n        IERC20 token,\r\n        bytes4 selector,\r\n        bytes calldata args\r\n    ) private returns (bool success) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n        // solhint-disable-line no-inline-assembly\r\n            let len := add(4, args.length)\r\n            let data := mload(0x40)\r\n\r\n            mstore(data, selector)\r\n            calldatacopy(add(data, 0x04), args.offset, args.length)\r\n            success := call(gas(), token, 0, data, len, 0x0, 0x20)\r\n            if success {\r\n                switch returndatasize()\r\n                case 0 {\r\n                    success := gt(extcodesize(token), 0)\r\n                }\r\n                default {\r\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract PancakeSwapSmartRouter is Ownable, ReentrancyGuard {\r\n    using UniERC20 for IERC20;\r\n    using SafeERC20 for IERC20;\r\n    using PancakeswapV2ExchangeLib for IPancakeswapV2Exchange;\r\n\r\n    enum FLAG {\r\n        STABLE_SWAP,\r\n        V2_EXACT_IN\r\n    }\r\n\r\n    IWETH02 public immutable weth;\r\n    address public immutable pancakeswapV2;\r\n    address public stableswapFactory;\r\n\r\n    event NewStableSwapFactory(address indexed sender, address indexed factory);\r\n    event SwapMulti(address indexed sender, address indexed srcTokenAddr, address indexed dstTokenAddr, uint256 srcAmount);\r\n    event Swap(address indexed sender, address indexed srcTokenAddr, address indexed dstTokenAddr, uint256 srcAmount);\r\n\r\n    fallback() external {}\r\n\r\n    receive() external payable {}\r\n\r\n    /*\r\n     * @notice Constructor\r\n     * @param _WETHAddress: address of the WETH contract\r\n     * @param _pancakeFactory: address of the PancakeFactory\r\n     * @param _stableswapFactory: address of the PancakeStableSwapFactory\r\n     */\r\n    constructor(\r\n        address _WETHAddress,\r\n        address _pancakeswapV2,\r\n        address _stableswapFactory\r\n    ) {\r\n        weth = IWETH02(_WETHAddress);\r\n        pancakeswapV2 = _pancakeswapV2;\r\n        stableswapFactory = _stableswapFactory;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets treasury address\r\n     * @dev Only callable by the contract owner.\r\n     */\r\n    function setStableSwapFactory(address _factory) external onlyOwner {\r\n        require(_factory != address(0), \"StableSwap factory cannot be zero address\");\r\n        stableswapFactory = _factory;\r\n        emit NewStableSwapFactory(msg.sender, stableswapFactory);\r\n    }\r\n\r\n    function swapMulti(\r\n        IERC20[] calldata tokens,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        FLAG[] calldata flags\r\n    ) public payable nonReentrant returns (uint256 returnAmount) {\r\n        require(tokens.length == flags.length + 1, \"swapMulti: wrong length\");\r\n\r\n        IERC20 srcToken = tokens[0];\r\n        IERC20 dstToken = tokens[tokens.length - 1];\r\n\r\n        if (srcToken == dstToken) {\r\n            return amount;\r\n        }\r\n\r\n        srcToken.uniTransferFrom(payable(msg.sender), address(this), amount);\r\n        uint256 receivedAmount = srcToken.uniBalanceOf(address(this));\r\n\r\n        for (uint256 i = 1; i < tokens.length; i++) {\r\n            if (tokens[i - 1] == tokens[i]) {\r\n                continue;\r\n            }\r\n\r\n            if (flags[i - 1] == FLAG.STABLE_SWAP) {\r\n                _swapOnStableSwap(tokens[i - 1], tokens[i], tokens[i - 1].uniBalanceOf(address(this)));\r\n            } else if (flags[i - 1] == FLAG.V2_EXACT_IN) {\r\n                _swapOnV2ExactIn(tokens[i - 1], tokens[i], tokens[i - 1].uniBalanceOf(address(this)));\r\n            }\r\n        }\r\n\r\n        returnAmount = dstToken.uniBalanceOf(address(this));\r\n        require(returnAmount >= minReturn, \"swapMulti: return amount is less than minReturn\");\r\n        uint256 inRefund = srcToken.uniBalanceOf(address(this));\r\n        emit SwapMulti(msg.sender, address(srcToken), address(dstToken), receivedAmount - inRefund);\r\n\r\n        uint256 userBalanceBefore = dstToken.uniBalanceOf(msg.sender);\r\n        dstToken.uniTransfer(payable(msg.sender), returnAmount);\r\n        require(dstToken.uniBalanceOf(msg.sender) - userBalanceBefore >= minReturn, \"swapMulti: incorrect user balance\");\r\n\r\n        srcToken.uniTransfer(payable(msg.sender), inRefund);\r\n    }\r\n\r\n    function swap(\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        FLAG flag\r\n    ) public payable nonReentrant returns (uint256 returnAmount) {\r\n        if (srcToken == dstToken) {\r\n            return amount;\r\n        }\r\n\r\n        srcToken.uniTransferFrom(payable(msg.sender), address(this), amount);\r\n        uint256 receivedAmount = srcToken.uniBalanceOf(address(this));\r\n\r\n        if (flag == FLAG.STABLE_SWAP) {\r\n            _swapOnStableSwap(srcToken, dstToken, receivedAmount);\r\n        } else if (flag == FLAG.V2_EXACT_IN) {\r\n            _swapOnV2ExactIn(srcToken, dstToken, receivedAmount);\r\n        }\r\n\r\n        returnAmount = dstToken.uniBalanceOf(address(this));\r\n        require(returnAmount >= minReturn, \"swap: return amount is less than minReturn\");\r\n        uint256 inRefund = srcToken.uniBalanceOf(address(this));\r\n        emit Swap(msg.sender, address(srcToken), address(dstToken), receivedAmount - inRefund);\r\n\r\n        uint256 userBalanceBefore = dstToken.uniBalanceOf(msg.sender);\r\n        dstToken.uniTransfer(payable(msg.sender), returnAmount);\r\n        require(dstToken.uniBalanceOf(msg.sender) - userBalanceBefore >= minReturn, \"swap: incorrect user balance\");\r\n\r\n        srcToken.uniTransfer(payable(msg.sender), inRefund);\r\n    }\r\n\r\n    // Swap helpers\r\n\r\n    function _swapOnStableSwap(\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        uint256 amount\r\n    ) internal {\r\n        require(stableswapFactory != address(0), \"StableSwap factory cannot be zero address\");\r\n\r\n        if (srcToken.isETH()) {\r\n            weth.deposit{value: amount}();\r\n        }\r\n\r\n        IERC20 srcTokenReal = srcToken.isETH() ? weth : srcToken;\r\n        IERC20 dstTokenReal = dstToken.isETH() ? weth : dstToken;\r\n\r\n        IStableSwapFactory.StableSwapPairInfo memory info = IStableSwapFactory(stableswapFactory).getPairInfo(\r\n            address(srcTokenReal),\r\n            address(dstTokenReal)\r\n        );\r\n\r\n        if (info.swapContract == address(0)) {\r\n            return;\r\n        }\r\n\r\n        IStableSwap stableSwap = IStableSwap(info.swapContract);\r\n        IERC20[] memory tokens = new IERC20[](2);\r\n        tokens[0] = IERC20(stableSwap.coins(uint256(0)));\r\n        tokens[1] = IERC20(stableSwap.coins(uint256(1)));\r\n        uint256 i = (srcTokenReal == tokens[0] ? 1 : 0) + (srcTokenReal == tokens[1] ? 2 : 0);\r\n        uint256 j = (dstTokenReal == tokens[0] ? 1 : 0) + (dstTokenReal == tokens[1] ? 2 : 0);\r\n        srcTokenReal.uniApprove(address(stableSwap), amount);\r\n        stableSwap.exchange(i - 1, j - 1, amount, 0);\r\n\r\n        if (dstToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function _swapOnV2ExactIn(\r\n        IERC20 srcToken,\r\n        IERC20 dstToken,\r\n        uint256 amount\r\n    ) internal returns (uint256 returnAmount) {\r\n        if (srcToken.isETH()) {\r\n            weth.deposit{value: amount}();\r\n        }\r\n\r\n        IERC20 srcTokenReal = srcToken.isETH() ? weth : srcToken;\r\n        IERC20 dstTokenReal = dstToken.isETH() ? weth : dstToken;\r\n        IPancakeswapV2Exchange exchange = IPancakeswapV2Factory(pancakeswapV2).getPair(srcTokenReal, dstTokenReal);\r\n\r\n        srcTokenReal.safeTransfer(address(exchange), amount);\r\n        bool needSync;\r\n        (returnAmount, needSync) = exchange.getReturn(srcTokenReal, dstTokenReal, amount);\r\n        if (needSync) {\r\n            exchange.sync();\r\n        }\r\n        if (srcTokenReal < dstTokenReal) {\r\n            exchange.swap(0, returnAmount, address(this), \"\");\r\n        } else {\r\n            exchange.swap(returnAmount, 0, address(this), \"\");\r\n        }\r\n\r\n        if (dstToken.isETH()) {\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//------------\r\n\r\ncontract GptOutUsdt is Ownable {\r\n    \r\n    address StableSwapAddr = address(0x169F653A54ACD441aB34B73dA9946e2C451787EF);\r\n    address SmartRouterAddr = address(0x64D74e1EAAe3176744b5767b93B7Bee39Cf7898F);\r\n    address usdt_Addr = address(0x55d398326f99059fF775485246999027B3197955);\r\n    address busd_Addr = address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n\r\n    PancakeStableSwap public pancakestableswap;\r\n    PancakeSwapSmartRouter public pancakeSwapRouter;\r\n\r\n    constructor () public {\r\n        PancakeStableSwap _pancakestableswap = PancakeStableSwap(StableSwapAddr);\r\n        pancakestableswap = _pancakestableswap;\r\n\r\n        address payable routerAddress = payable(address(SmartRouterAddr));\r\n        PancakeSwapSmartRouter _pancakeSwapRouter = PancakeSwapSmartRouter(routerAddress);\r\n        pancakeSwapRouter = _pancakeSwapRouter;\r\n\r\n\r\n    }\r\n    function removeliquidityToSwap(uint256 usdt_value,address _to)public onlyOwner returns(bool){\r\n        uint256 stableAmount;\r\n        uint256[2] memory amounts;\r\n        amounts[0] = 0;\r\n        amounts[1] = 0;\r\n        stableAmount = usdt_value * 87 / 100;\r\n        pancakestableswap.remove_liquidity(stableAmount,amounts);\r\n\r\n        toswap();\r\n        IERC20(usdt_Addr).transfer(_to,usdt_value);\r\n\r\n        return true;    \r\n    }\r\n    function toswap()private returns(bool){\r\n        uint256 amount = IERC20(busd_Addr).balanceOf(address(this));\r\n        address srcToken = busd_Addr;\r\n        address dstToken = usdt_Addr;\r\n        uint256 minReturn = 0;\r\n        uint8 flag = 0;\r\n        PancakeSwapSmartRouter.FLAG myFlag = PancakeSwapSmartRouter.FLAG(flag);\r\n        pancakeSwapRouter.swap(IERC20(srcToken),IERC20(dstToken),amount,minReturn,myFlag);\r\n        return true;\r\n    }\r\n    function ApprovalStableLp()public onlyOwner returns(bool){\r\n        address usdtAddr = usdt_Addr;\r\n        address busdAddr = busd_Addr;\r\n        address LpAddr = StableSwapAddr;\r\n        address SwapRouter = SmartRouterAddr;\r\n        uint256 amount = 999999999999 * 10 ** 18;\r\n\r\n        IERC20(usdtAddr).approve(SwapRouter,amount);\r\n        IERC20(busdAddr).approve(SwapRouter,amount);\r\n        IERC20(address(0x36842F8fb99D55477C0Da638aF5ceb6bBf86aA98)).approve(StableSwapAddr,amount);\r\n        return true;    \r\n    }\r\n    \r\n    function withdraw(address token,address _to,uint256 amount) public onlyOwner returns(bool) {\r\n        IERC20(token).transfer(_to,amount);\r\n        return true; \r\n    }\r\n    \r\n    function balanceOf(address token) public view returns(uint256) {\r\n        \r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        return balance; \r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ApprovalStableLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapRouter\",\"outputs\":[{\"internalType\":\"contract PancakeSwapSmartRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakestableswap\",\"outputs\":[{\"internalType\":\"contract PancakeStableSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdt_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removeliquidityToSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GptOutUsdt", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://55bd29d7c4933e3f73ab7b87f581e68959632f012fd40fc9abd6cf753ac498da"}