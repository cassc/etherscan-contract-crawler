{"SourceCode": "// File: contracts/zeppelin/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/IBridge.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IBridge {\r\n    function version() external pure returns (string memory);\r\n\r\n    //function getFeePercentage() external view returns(uint);\r\n\r\n    //function calcMaxWithdraw() external view returns (uint);\r\n\r\n    /**\r\n     * ERC-20 tokens approve and transferFrom pattern\r\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\r\n     */\r\n    function receiveTokens(address tokenToUse, uint256 amount) external returns(bool);\r\n\r\n    /**\r\n     * ERC-20 tokens approve and transferFrom pattern\r\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\r\n     */\r\n    function receiveTokensAt(\r\n        address tokenToUse,\r\n        uint256 amount,\r\n        address receiver,\r\n        bytes calldata extraData\r\n    ) external returns(bool);\r\n\r\n    /**\r\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\r\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\r\n     */\r\n    function tokensReceived (\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    /**\r\n     * Accepts the transaction from the other chain that was voted and sent by the federation contract\r\n     */\r\n    function acceptTransfer(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string calldata symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity\r\n    ) external returns(bool);\r\n\r\n    function acceptTransferAt(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string calldata symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes calldata userData\r\n    ) external returns(bool);\r\n\r\n    function receiveEthAt(address _receiver, bytes calldata _extraData) external payable;\r\n\r\n    function setRevokeTransaction(bytes32 _revokeTransactionID) external;\r\n    function setErc777Converter(address _erc777Converter) external;\r\n    //function getErc777Converter() external view returns(address erc777Addr);\r\n\r\n    event Cross(address indexed _tokenAddress, address indexed _to, uint256 _amount, string _symbol, bytes _userData,\r\n        uint8 _decimals, uint256 _granularity);\r\n    event NewSideToken(address indexed _newSideTokenAddress, address indexed _originalTokenAddress, string _newSymbol, uint256 _granularity);\r\n    event AcceptedCrossTransfer(address indexed _tokenAddress, address indexed _to, uint256 _amount, uint8 _decimals, uint256 _granularity,\r\n        uint256 _formattedAmount, uint8 _calculatedDecimals, uint256 _calculatedGranularity, bytes _userData);\r\n    //event FeePercentageChanged(uint256 _amount);\r\n    event ErrorTokenReceiver(bytes _errorData);\r\n    //event AllowTokenChanged(address _newAllowToken);\r\n    //event PrefixUpdated(bool _isPrefix, string _prefix);\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/cryptography/ECDSA.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Recover signer address from a message by using their signature\r\n     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n     * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 && v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * toEthSignedMessageHash\r\n     * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n     * and hash the result\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\n// File: contracts/Federation.sol\r\n\r\npragma solidity ^0.5.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ncontract Federation is Ownable {\r\n    struct SignatureInfo {\r\n        bytes signature;\r\n        uint256 deadline;\r\n    }\r\n\r\n    uint256 public constant MAX_MEMBER_COUNT = 50;\r\n    address private constant NULL_ADDRESS = address(0);\r\n\r\n    IBridge public bridge;\r\n    address[] public members;\r\n    uint256 public required;\r\n\r\n    bytes32 private constant NULL_HASH = bytes32(0);\r\n    bool public initStageDone;\r\n\r\n    mapping(address => bool) public isMember;\r\n    mapping(bytes32 => mapping(address => bool)) public votes;\r\n    mapping(bytes32 => bool) public processed;\r\n    // solium-disable-next-line max-len\r\n    event Voted(\r\n        address indexed sender,\r\n        bytes32 indexed transactionId,\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string symbol,\r\n        bytes32 blockHash,\r\n        bytes32 indexed transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes userData\r\n    );\r\n    event Signed(bytes32 indexed transactionId, address validator);\r\n    event Executed(bytes32 indexed transactionId);\r\n    event MemberAddition(address indexed member);\r\n    event MemberRemoval(address indexed member);\r\n    event RequirementChange(uint256 required);\r\n    event BridgeChanged(address bridge);\r\n    event RevokeTxAndVote(bytes32 tx_revoked);\r\n    event StoreFormerFederationExecutedTx(bytes32[] tx_stored);\r\n\r\n    modifier onlyMember() {\r\n        require(isMember[_msgSender()], \"Federation: Caller not a Federator\");\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint256 membersCount, uint256 _required) {\r\n        // solium-disable-next-line max-len\r\n        require(\r\n            _required <= membersCount && _required != 0 && membersCount != 0,\r\n            \"Federation: Invalid requirements\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _members, uint256 _required)\r\n        public\r\n        validRequirement(_members.length, _required)\r\n    {\r\n        require(_members.length <= MAX_MEMBER_COUNT, \"Federation: Members larger than max allowed\");\r\n        members = _members;\r\n        for (uint256 i = 0; i < _members.length; i++) {\r\n            require(\r\n                !isMember[_members[i]] && _members[i] != NULL_ADDRESS,\r\n                \"Federation: Invalid members\"\r\n            );\r\n            isMember[_members[i]] = true;\r\n            // members.push(_members[i]);\r\n\r\n            emit MemberAddition(_members[i]);\r\n        }\r\n        required = _required;\r\n        emit RequirementChange(required);\r\n    }\r\n\r\n    function setBridge(address _bridge) external onlyOwner {\r\n        require(_bridge != NULL_ADDRESS, \"Federation: Empty bridge\");\r\n        bridge = IBridge(_bridge);\r\n        emit BridgeChanged(_bridge);\r\n    }\r\n\r\n    function voteTransaction(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string calldata symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity\r\n    ) external returns (bool) {\r\n        return\r\n            _voteTransaction(\r\n                originalTokenAddress,\r\n                receiver,\r\n                amount,\r\n                symbol,\r\n                blockHash,\r\n                transactionHash,\r\n                logIndex,\r\n                decimals,\r\n                granularity,\r\n                \"\"\r\n            );\r\n    }\r\n\r\n    function voteTransactionAt(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes memory userData\r\n    ) public returns (bool) {\r\n        return\r\n            _voteTransaction(\r\n                originalTokenAddress,\r\n                receiver,\r\n                amount,\r\n                symbol,\r\n                blockHash,\r\n                transactionHash,\r\n                logIndex,\r\n                decimals,\r\n                granularity,\r\n                userData\r\n            );\r\n    }\r\n\r\n    function _voteTransaction(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes memory userData\r\n    ) internal onlyMember returns (bool) {\r\n        // solium-disable-next-line max-len\r\n        require(\r\n            initStageDone == true,\r\n            \"Federation: Cannot process TX while initStageDone == false\"\r\n        );\r\n\r\n        bytes32 transactionId = getTransactionId(\r\n            originalTokenAddress,\r\n            receiver,\r\n            amount,\r\n            symbol,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex,\r\n            decimals,\r\n            granularity\r\n        );\r\n        if (processed[transactionId]) return true;\r\n\r\n        // Bug fix //\r\n        // UserData is not included in transactionId hash.\r\n        // In order to keep backward competability, since transctions that were already processed are marked as processed[transactionId],\r\n        // We keep the transactionId and adding transactionIdU (that includes userData hashing)\r\n        // Assuming  processed[transactionId) == false from this line\r\n        // Depreciating transactionId for unprocessed transaction.\r\n        // Using transactionIdU instead.\r\n        // This should be updated in Federator BE as well.\r\n        // Function processTransaction() created to solve EVM stack to deep error\r\n        if (\r\n            processTransaction(\r\n                originalTokenAddress,\r\n                receiver,\r\n                amount,\r\n                symbol,\r\n                blockHash,\r\n                transactionHash,\r\n                logIndex,\r\n                decimals,\r\n                granularity,\r\n                userData\r\n            )\r\n        ) {\r\n            // No need to update processed[transactionId], since it is used only for backward competability\r\n            // processed[transactionId] = true;\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function processTransaction(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes memory userData\r\n    ) internal returns (bool) {\r\n        bytes32 transactionIdU = getTransactionIdU(\r\n            originalTokenAddress,\r\n            receiver,\r\n            amount,\r\n            symbol,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex,\r\n            decimals,\r\n            granularity,\r\n            userData\r\n        );\r\n\r\n        if (processed[transactionIdU]) return true;\r\n\r\n        if (votes[transactionIdU][_msgSender()]) return true;\r\n\r\n        votes[transactionIdU][_msgSender()] = true;\r\n        // solium-disable-next-line max-len\r\n        emit Voted(\r\n            _msgSender(),\r\n            transactionIdU,\r\n            originalTokenAddress,\r\n            receiver,\r\n            amount,\r\n            symbol,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex,\r\n            decimals,\r\n            granularity,\r\n            userData\r\n        );\r\n\r\n        uint256 transactionCount = getTransactionCount(transactionIdU);\r\n        if (transactionCount >= required && transactionCount >= members.length / 2 + 1) {\r\n            processed[transactionIdU] = true;\r\n            bool acceptTransfer = bridge.acceptTransferAt(\r\n                originalTokenAddress,\r\n                receiver,\r\n                amount,\r\n                symbol,\r\n                blockHash,\r\n                transactionHash,\r\n                logIndex,\r\n                decimals,\r\n                granularity,\r\n                userData\r\n            );\r\n            require(acceptTransfer, \"Federation: Bridge acceptTransfer error\");\r\n            emit Executed(transactionIdU);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function executeTransaction(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        SignatureInfo[] memory signaturesInfos\r\n    ) public returns (bool) {\r\n        return\r\n            _executeTransaction(\r\n                originalTokenAddress,\r\n                receiver,\r\n                amount,\r\n                symbol,\r\n                blockHash,\r\n                transactionHash,\r\n                logIndex,\r\n                decimals,\r\n                granularity,\r\n                \"\",\r\n                signaturesInfos\r\n            );\r\n    }\r\n\r\n    function executeTransactionAt(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes memory userData,\r\n        SignatureInfo[] memory signaturesInfos\r\n    ) public returns (bool) {\r\n        return\r\n            _executeTransaction(\r\n                originalTokenAddress,\r\n                receiver,\r\n                amount,\r\n                symbol,\r\n                blockHash,\r\n                transactionHash,\r\n                logIndex,\r\n                decimals,\r\n                granularity,\r\n                userData,\r\n                signaturesInfos\r\n            );\r\n    }\r\n\r\n    function _executeTransaction(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes memory userData,\r\n        SignatureInfo[] memory signaturesInfos\r\n    ) internal onlyMember returns (bool) {\r\n        // solium-disable-next-line max-len\r\n        require(\r\n            initStageDone == true,\r\n            \"Federation: Cannot process TX while initStageDone == false\"\r\n        );\r\n\r\n        bytes32 transactionId = getTransactionId(\r\n            originalTokenAddress,\r\n            receiver,\r\n            amount,\r\n            symbol,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex,\r\n            decimals,\r\n            granularity\r\n        );\r\n        if (processed[transactionId]) return true;\r\n\r\n        // Bug fix //\r\n        // UserData is not included in transactionId hash.\r\n        // In order to keep backward competability, since transctions that were already processed are marked as processed[transactionId],\r\n        // We keep the transactionId and adding transactionIdU (that includes userData hashing)\r\n        // Assuming  processed[transactionId) == false from this line\r\n        // Depreciating transactionId for unprocessed transaction.\r\n        // Using transactionIdU instead.\r\n        // This should be updated in Federator BE as well.\r\n        // Function processTransaction() created to solve EVM stack to deep error\r\n        if (\r\n            processSignedTransaction(\r\n                originalTokenAddress,\r\n                receiver,\r\n                amount,\r\n                symbol,\r\n                blockHash,\r\n                transactionHash,\r\n                logIndex,\r\n                decimals,\r\n                granularity,\r\n                userData,\r\n                signaturesInfos\r\n            )\r\n        ) {\r\n            // No need to update processed[transactionId], since it is used only for backward competability\r\n            // processed[transactionId] = true;\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function processSignedTransaction(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes memory userData,\r\n        SignatureInfo[] memory signaturesInfos\r\n    ) internal returns (bool) {\r\n        bytes32 transactionIdU = getTransactionIdU(\r\n            originalTokenAddress,\r\n            receiver,\r\n            amount,\r\n            symbol,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex,\r\n            decimals,\r\n            granularity,\r\n            userData\r\n        );\r\n        if (processed[transactionIdU]) return true;\r\n\r\n        // Sender implicitly accepts\r\n        votes[transactionIdU][_msgSender()] = true;\r\n        uint256 memberValidations = 1;\r\n        emit Signed(transactionIdU, _msgSender());\r\n\r\n        for (uint256 i; i < signaturesInfos.length; i += 1) {\r\n            require(\r\n                signaturesInfos[i].deadline > block.timestamp,\r\n                \"Some signature is not valid anymore\"\r\n            );\r\n\r\n            uint256 chainId;\r\n            assembly {\r\n                chainId := chainid()\r\n            }\r\n            bytes32 hash = keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19Ethereum Signed Message:\\n116\",\r\n                    abi.encodePacked(\r\n                        transactionIdU,\r\n                        chainId,\r\n                        address(this),\r\n                        signaturesInfos[i].deadline\r\n                    )\r\n                )\r\n            );\r\n            address signer = ECDSA.recover(hash, signaturesInfos[i].signature);\r\n\r\n            require(isMember[signer], \"Signature doesn't match any member\");\r\n            if (!votes[transactionIdU][signer]) {\r\n                votes[transactionIdU][signer] = true;\r\n                memberValidations += 1;\r\n                emit Signed(transactionIdU, signer);\r\n            }\r\n        }\r\n\r\n        require(\r\n            memberValidations >= required && memberValidations >= members.length / 2 + 1,\r\n            \"Not enough validations\"\r\n        );\r\n\r\n        processed[transactionIdU] = true;\r\n\r\n        releaseTokensOnBridge(\r\n            transactionIdU,\r\n            originalTokenAddress,\r\n            receiver,\r\n            amount,\r\n            symbol,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex,\r\n            decimals,\r\n            granularity,\r\n            userData\r\n        );\r\n        emit Executed(transactionIdU);\r\n\r\n        return true;\r\n    }\r\n\r\n    function releaseTokensOnBridge(\r\n        bytes32 transactionIdU,\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes memory userData\r\n    ) private {\r\n        emit Voted(\r\n            _msgSender(),\r\n            transactionIdU,\r\n            originalTokenAddress,\r\n            receiver,\r\n            amount,\r\n            symbol,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex,\r\n            decimals,\r\n            granularity,\r\n            userData\r\n        );\r\n        bool acceptTransfer = bridge.acceptTransferAt(\r\n            originalTokenAddress,\r\n            receiver,\r\n            amount,\r\n            symbol,\r\n            blockHash,\r\n            transactionHash,\r\n            logIndex,\r\n            decimals,\r\n            granularity,\r\n            userData\r\n        );\r\n        require(acceptTransfer, \"Federation: Bridge acceptTransfer error\");\r\n    }\r\n\r\n    function getTransactionCount(bytes32 transactionId) public view returns (uint256) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            if (votes[transactionId][members[i]]) count += 1;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function hasVoted(bytes32 transactionId) external view returns (bool) {\r\n        return votes[transactionId][_msgSender()];\r\n    }\r\n\r\n    function transactionWasProcessed(bytes32 transactionId) external view returns (bool) {\r\n        return processed[transactionId];\r\n    }\r\n\r\n    function getTransactionId(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity\r\n    ) public pure returns (bytes32) {\r\n        // solium-disable-next-line max-len\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    originalTokenAddress,\r\n                    receiver,\r\n                    amount,\r\n                    symbol,\r\n                    blockHash,\r\n                    transactionHash,\r\n                    logIndex,\r\n                    decimals,\r\n                    granularity\r\n                )\r\n            );\r\n    }\r\n\r\n    function getTransactionIdU(\r\n        address originalTokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string memory symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex,\r\n        uint8 decimals,\r\n        uint256 granularity,\r\n        bytes memory userData\r\n    ) public pure returns (bytes32) {\r\n        // solium-disable-next-line max-len\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    originalTokenAddress,\r\n                    receiver,\r\n                    amount,\r\n                    symbol,\r\n                    blockHash,\r\n                    transactionHash,\r\n                    logIndex,\r\n                    decimals,\r\n                    granularity,\r\n                    userData\r\n                )\r\n            );\r\n    }\r\n\r\n    function addMember(address _newMember) external onlyOwner {\r\n        require(_newMember != NULL_ADDRESS, \"Federation: Empty member\");\r\n        require(!isMember[_newMember], \"Federation: Member already exists\");\r\n        require(members.length < MAX_MEMBER_COUNT, \"Federation: Max members reached\");\r\n\r\n        isMember[_newMember] = true;\r\n        members.push(_newMember);\r\n        emit MemberAddition(_newMember);\r\n    }\r\n\r\n    function removeMember(address _oldMember) external onlyOwner {\r\n        require(_oldMember != NULL_ADDRESS, \"Federation: Empty member\");\r\n        require(isMember[_oldMember], \"Federation: Member doesn't exists\");\r\n        require(members.length > 1, \"Federation: Can't remove all the members\");\r\n        require(\r\n            members.length - 1 >= required,\r\n            \"Federation: Can't have less than required members\"\r\n        );\r\n\r\n        isMember[_oldMember] = false;\r\n        for (uint256 i = 0; i < members.length - 1; i++) {\r\n            if (members[i] == _oldMember) {\r\n                members[i] = members[members.length - 1];\r\n                break;\r\n            }\r\n        }\r\n        members.length -= 1;\r\n        emit MemberRemoval(_oldMember);\r\n    }\r\n\r\n    function getMembers() external view returns (address[] memory) {\r\n        return members;\r\n    }\r\n\r\n    function changeRequirement(uint256 _required)\r\n        external\r\n        onlyOwner\r\n        validRequirement(members.length, _required)\r\n    {\r\n        require(_required >= 2, \"Federation: Requires at least 2\");\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    // Revoke state of txID (from true to false), to enable multiSig release of stucked txID on the bridge\r\n    // setRevokeTransaction() should be called on the bridge as well to enable revoke of txID\r\n    function setRevokeTransactionAndVote(bytes32 _revokeTransactionID) external onlyOwner {\r\n        require(\r\n            _revokeTransactionID != NULL_HASH,\r\n            \"Federation: _revokeTransactionID cannot be NULL\"\r\n        );\r\n        require(\r\n            processed[_revokeTransactionID] == true,\r\n            \"Federation: cannot revoke unprocessed TX\"\r\n        );\r\n        processed[_revokeTransactionID] = false;\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            votes[_revokeTransactionID][members[i]] = false;\r\n        }\r\n        emit RevokeTxAndVote(_revokeTransactionID);\r\n    }\r\n\r\n    // Store former Federation contract version processed[] state\r\n    // Can be used only at deployment stage. Cannot _voteTransaction txID while this stage is active (initStageDone is false)\r\n    function initStoreOldFederation(bytes32[] calldata _TransactionIDs) external onlyOwner {\r\n        require(\r\n            initStageDone == false,\r\n            \"Federation: initStoreOldFederation enabled only during deployment setup Stage\"\r\n        );\r\n        for (uint256 i = 0; i < _TransactionIDs.length; i++) {\r\n            require(\r\n                _TransactionIDs[i] != NULL_HASH,\r\n                \"Federation: _storeTransactionID cannot be NULL\"\r\n            );\r\n            processed[_TransactionIDs[i]] = true;\r\n        }\r\n        emit StoreFormerFederationExecutedTx(_TransactionIDs);\r\n    }\r\n\r\n    // Finish stage of store of former Federation contract version\r\n    // Must be set to true before _voteTransaction is called\r\n    function endDeploymentSetup() external onlyOwner {\r\n        initStageDone = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"BridgeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tx_revoked\",\"type\":\"bytes32\"}],\"name\":\"RevokeTxAndVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Signed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"tx_stored\",\"type\":\"bytes32[]\"}],\"name\":\"StoreFormerFederationExecutedTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MEMBER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endDeploymentSetup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Federation.SignatureInfo[]\",\"name\":\"signaturesInfos\",\"type\":\"tuple[]\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct Federation.SignatureInfo[]\",\"name\":\"signaturesInfos\",\"type\":\"tuple[]\"}],\"name\":\"executeTransactionAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"getTransactionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"getTransactionIdU\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initStageDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_TransactionIDs\",\"type\":\"bytes32[]\"}],\"name\":\"initStoreOldFederation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldMember\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_revokeTransactionID\",\"type\":\"bytes32\"}],\"name\":\"setRevokeTransactionAndVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"transactionWasProcessed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"voteTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"originalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"logIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"voteTransactionAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Federation", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000005000000000000000000000000f963c7b3d8f6dab6d1176702b94ecdb75916770a0000000000000000000000004b03e69d6962649573f2747c04f2dd9ab5494cdb000000000000000000000000642aa4ab1f29c0e8877a99312494e2a0b623a68200000000000000000000000081bc3b08fc3531211afd95b6011375f808b861cf00000000000000000000000057a247b871784e6e303cc29230fa664fab15370d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://a2d24e452867ab3d8366e9b3d561081f1a7990db6dd0d92b29b8d7227a024089"}