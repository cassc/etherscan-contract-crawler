{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/bearn.sol\r\n\r\n\r\npragma solidity 0.8.19;\r\n\r\n\r\ncontract Bearn {\r\n    address public owner;\r\n    uint256 public totalWeight;\r\n    uint256 public expiredTimestamp;\r\n    IERC20 internal bla;\r\n    mapping(address => uint256) public stakeWeight;\r\n\r\n    event TransferOwnership(address newOwner);\r\n    event StakeBla(address user, uint256 amount);\r\n    event UnstakeBla(address user, uint256 amount);\r\n    event CancelLockingPeriod();\r\n\r\n    constructor(address _address_bla, uint256 _expiredTimestamp) {\r\n        bla = IERC20(_address_bla);\r\n        expiredTimestamp = _expiredTimestamp;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    function getTotalBlaLocked() public view returns (uint256){\r\n        return bla.balanceOf(address(this));\r\n    }\r\n\r\n    function getUserBlaLocked(address user) public view returns (uint256) {\r\n        require(totalWeight > 0, \"No one stake BLA.\");\r\n        return getTotalBlaLocked() * stakeWeight[user] / totalWeight;\r\n    }\r\n\r\n    function getNow() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Zero address\");\r\n        require(newOwner != owner, \"New owner must be different from current owner\");\r\n        owner = newOwner;\r\n        emit TransferOwnership(newOwner);\r\n    }\r\n\r\n    // User stake BLA\r\n\r\n    function stakeBla(uint256 amount) external {\r\n        // check\r\n        require(bla.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n        require(getNow() < expiredTimestamp, \"The contract has already expired.\");\r\n\r\n        // update\r\n        uint256 totalBlaLocked = getTotalBlaLocked();\r\n        uint256 weight;\r\n        if (totalWeight == 0 ) {\r\n            weight = 10**18;\r\n        } else {\r\n            weight = totalWeight * amount / totalBlaLocked;\r\n        }\r\n        stakeWeight[msg.sender] += weight;\r\n        totalWeight += weight;\r\n\r\n        // send\r\n        require(bla.transferFrom(msg.sender, address(this), amount), \"Failed to transfer BLA\");\r\n\r\n        // emit\r\n        emit StakeBla(msg.sender, amount);\r\n    }\r\n\r\n    function unstakeBla() external {\r\n        // check\r\n        require(stakeWeight[msg.sender] > 0, \"You havn't stake any.\");\r\n        require(getNow() >= expiredTimestamp, \"The contract isn't expired yet.\");\r\n\r\n        // update\r\n        uint256 amount = getUserBlaLocked(msg.sender);\r\n        uint256 weight = stakeWeight[msg.sender];\r\n        stakeWeight[msg.sender] -= weight;\r\n        totalWeight -= weight;\r\n\r\n        // send\r\n        require(bla.transfer(msg.sender, amount), \"Failed to transfer BLA\");\r\n\r\n        // emit\r\n        emit UnstakeBla(msg.sender, amount);\r\n    }\r\n\r\n    // Cancel locking period\r\n    function cancelLockingPeriod() public onlyOwner {\r\n        // check\r\n        require(getNow() < expiredTimestamp, \"The contract has already expired.\");\r\n\r\n        // update\r\n        expiredTimestamp = 0;\r\n\r\n        // emit\r\n        emit CancelLockingPeriod();\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_bla\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiredTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CancelLockingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBla\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeBla\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiredTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBlaLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBlaLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeBla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeBla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bearn", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006aee38ee96ab844d1e5a93f636c62e43f479b3e20000000000000000000000000000000000000000000000000000000065404380", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://45b320f50e08ab0514800c021b4b54ede5f8417e7fd5508deff42509a67f8924"}