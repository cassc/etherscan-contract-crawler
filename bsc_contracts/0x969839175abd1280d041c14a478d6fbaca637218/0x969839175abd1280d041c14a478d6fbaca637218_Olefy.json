{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface BEP20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n}\r\n\r\ncontract Olefy is BEP20 {\r\n    IDEXRouter public router =\r\n        IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    //token data\r\n    string public constant name = \"Olefy\";\r\n    string public constant symbol = \"Olefy\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply = 100000000 * 10**decimals;\r\n    //mappings\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n    mapping(address => bool) pairs;\r\n    mapping(address => bool) public isFeeExempt;\r\n    //uint256\r\n\r\n    //BUY FEES\r\n    uint256 public liquidityFee = 20; // 2% autoliquidify\r\n    uint256 public marketingFee = 40; // 4% marketing\r\n    uint256 public ExpansaoFee = 20; // 2% espans\u00e3o\r\n    uint256 public PionnerFee = 20; // 2% Pionner\r\n    uint256 public totalBuyFee = 100;\r\n    //SELL FEES\r\n    uint256 public sellLiquidityFee = 20; // 2% autoliquidify\r\n    uint256 public sellMarketingFee = 40; // 4% marketing\r\n    uint256 public sellExpansaoFee = 20; // 2% Expansao\r\n    uint256 public sellPionnerFee = 20; // 2% Pionner\r\n    uint256 public totalSellFee = 100;\r\n\r\n    uint256 public constant feeDenominator = 1000;\r\n    uint256 transferMultiplier = 25;\r\n    uint256 public swapThreshold = totalSupply / 50000;\r\n    uint256 txbnbGas = 50000;\r\n    uint256 LiquidifyGas = 500000;\r\n    uint256 public launchedAt;\r\n    //addresses\r\n    address public marketingFeeReceiver;\r\n    address public ExpansaoReceiver;\r\n    address public PionnerReceiver;\r\n    address private _owner;\r\n    address public WBNB = router.WETH();\r\n    //bools\r\n    bool public tradingOpen = false;\r\n    bool public burnEnabled = true;\r\n    bool public swapEnabled = true;\r\n    bool inSwap;\r\n    //modifiers\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(\r\n            _owner == msg.sender,\r\n            \"Ownable: only owner can call this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //constructor\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        address pair = IDEXFactory(router.factory()).createPair(\r\n            WBNB,\r\n            address(this)\r\n        );\r\n\r\n        marketingFeeReceiver = msg.sender;\r\n        ExpansaoReceiver = msg.sender;\r\n        PionnerReceiver = msg.sender;\r\n\r\n        pairs[pair] = true;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        _allowances[address(this)][address(router)] = totalSupply * 1000;\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    //functions\r\n    receive() external payable {}\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        require(\r\n            _allowances[sender][msg.sender] >= amount,\r\n            \"Insufficient Allowance\"\r\n        );\r\n        _allowances[sender][msg.sender] =\r\n            _allowances[sender][msg.sender] -\r\n            amount;\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(balanceOf[sender] >= amount, \"Insufficient Balance\");\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        } else {\r\n            require(tradingOpen, \"Trading not open yet\");\r\n            if (shouldSwapBack()) {\r\n                swapBack();\r\n            }\r\n        }\r\n\r\n        balanceOf[sender] = balanceOf[sender] - amount;\r\n\r\n        uint256 amountReceived = (isFeeExempt[sender] || isFeeExempt[recipient])\r\n            ? amount\r\n            : takeFee(sender, amount, recipient);\r\n\r\n        balanceOf[recipient] = balanceOf[recipient] + amountReceived;\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(balanceOf[sender] >= amount, \"Insufficient Balance\");\r\n        balanceOf[sender] = balanceOf[sender] - amount;\r\n        balanceOf[recipient] = balanceOf[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _isSell(bool a) internal view returns (uint256) {\r\n        return a ? totalSellFee : totalBuyFee;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount != 0);\r\n        require(amount <= balanceOf[account]);\r\n        balanceOf[account] = balanceOf[account] - amount;\r\n        totalSupply = totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function famount(\r\n        uint256 amount,\r\n        uint256 fee,\r\n        uint256 multi\r\n    ) internal pure returns (uint256) {\r\n        return ((amount * (fee)) * multi) / (feeDenominator * 100);\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        uint256 amount,\r\n        address recipient\r\n    ) internal returns (uint256) {\r\n        uint256 totalFee = _isSell(pairs[recipient]);\r\n        if (amount == 0 || totalFee == 0) {\r\n            return amount;\r\n        }\r\n\r\n        uint256 multiplier = (pairs[recipient] || pairs[sender])\r\n            ? 100\r\n            : transferMultiplier;\r\n\r\n        uint256 feeAmount = famount(amount, totalFee, multiplier);\r\n        uint256 contractTokens = feeAmount;\r\n\r\n        if (contractTokens > 0) {\r\n            _txTransfer(sender, address(this), contractTokens);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function _txTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        balanceOf[recipient] = balanceOf[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            !pairs[msg.sender] &&\r\n            !inSwap &&\r\n            swapEnabled &&\r\n            balanceOf[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    // switch Trading\r\n    function tradingEnable() external onlyOwner {\r\n        require(!tradingOpen, \"Trading already open\"); //trade only can change one time\r\n        tradingOpen = true;\r\n        launchedAt = block.timestamp;\r\n        emit config_TradingStatus(tradingOpen);\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 totalETHFee = totalSellFee;\r\n\r\n        uint256 amountToLiquify = (swapThreshold * sellLiquidityFee) /\r\n            (totalETHFee * 2);\r\n\r\n        uint256 amountToSwap = swapThreshold - amountToLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance;\r\n\r\n        totalETHFee = totalETHFee - (sellLiquidityFee / 2);\r\n\r\n        uint256 amountBNBLiquidity = (amountBNB * sellLiquidityFee) /\r\n            (totalETHFee * 2);\r\n\r\n        uint256 amountBNBMarketing = (amountBNB * sellMarketingFee) /\r\n            totalETHFee;\r\n\r\n        uint256 amountBNBExpansao = (amountBNB * sellExpansaoFee) / totalETHFee;\r\n\r\n        uint256 amountBNBPionner = (amountBNB * sellPionnerFee) / totalETHFee;\r\n\r\n        if (amountBNBMarketing > 0) {\r\n            (bool success, ) = payable(marketingFeeReceiver).call{\r\n                value: amountBNBMarketing,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n        }\r\n        if (amountBNBExpansao > 0) {\r\n            (bool success, ) = payable(ExpansaoReceiver).call{\r\n                value: amountBNBExpansao,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n        }\r\n        if (amountBNBPionner > 0) {\r\n            (bool success, ) = payable(PionnerReceiver).call{\r\n                value: amountBNBPionner,\r\n                gas: txbnbGas\r\n            }(\"\");\r\n        }\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{\r\n                value: amountBNBLiquidity,\r\n                gas: LiquidifyGas\r\n            }(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        payable(marketingFeeReceiver).transfer(address(this).balance);\r\n        _basicTransfer(\r\n            address(this),\r\n            marketingFeeReceiver,\r\n            balanceOf[address(this)]\r\n        );\r\n    }\r\n\r\n    function setPair(address _pair, bool io) public onlyOwner {\r\n        pairs[_pair] = io;\r\n    }\r\n\r\n    function manage_FeeExempt(address[] calldata addresses, bool status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            addresses.length < 501,\r\n            \"GAS Error: max limit is 500 addresses\"\r\n        );\r\n        for (uint256 i = 0; i < addresses.length; ++i) {\r\n            isFeeExempt[addresses[i]] = status;\r\n            emit Wallet_feeExempt(addresses[i], status);\r\n        }\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _ExpansaoFee,\r\n        uint256 _PionnerFee,\r\n        uint256 _marketingFee,\r\n        uint256 _sellLiquidityFee,\r\n        uint256 _sellExpansaoFee,\r\n        uint256 _sellPionnerFee,\r\n        uint256 _sellMarketingFee\r\n    ) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        ExpansaoFee = _ExpansaoFee;\r\n        PionnerFee = _PionnerFee;\r\n\r\n        totalBuyFee =\r\n            _liquidityFee +\r\n            _marketingFee +\r\n            _ExpansaoFee +\r\n            _PionnerFee;\r\n\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellExpansaoFee = _sellExpansaoFee;\r\n        sellPionnerFee = _sellPionnerFee;\r\n        sellMarketingFee = _sellMarketingFee;\r\n\r\n        totalSellFee =\r\n            _sellLiquidityFee +\r\n            _sellExpansaoFee +\r\n            _sellPionnerFee +\r\n            _sellMarketingFee;\r\n\r\n        require((totalBuyFee) <= 120, \"Buy tax cannot be more than 12%\");\r\n        require((totalSellFee) <= 120, \"Sell tax cannot be more than 12%\");\r\n        emit UpdateFee(uint8(totalBuyFee), uint8(totalSellFee));\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_amount < (totalSupply / 10), \"Amount too high\");\r\n\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n\r\n        emit config_SwapSettings(swapThreshold, swapEnabled);\r\n    }\r\n\r\n    function setmarketingFeeReceivers(address _marketingFeeReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n\r\n    function setExpansaoReceiver(address _autoExpansaoReceiver)\r\n        external\r\n        onlyOwner\r\n    {\r\n        ExpansaoReceiver = _autoExpansaoReceiver;\r\n    }\r\n\r\n    function setPionnersReceiver(address _PionnersReceiver) external onlyOwner {\r\n        PionnerReceiver = _PionnersReceiver;\r\n    }\r\n\r\n    function setTXBNBgas(uint256 gas) external onlyOwner {\r\n        require(gas < 100000);\r\n        txbnbGas = gas;\r\n    }\r\n\r\n    function setLiquidifyGas(uint256 gas) external onlyOwner {\r\n        require(gas < 1000000);\r\n        LiquidifyGas = gas;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);\r\n    event UpdateFee(uint8 Buy, uint8 Sell);\r\n    event Wallet_feeExempt(address Wallet, bool Status);\r\n    event clearToken(address TokenAddressCleared, uint256 Amount);\r\n    event Set_Wallets(address MarketingWallet, address BuyBackWallet);\r\n    event config_TradingStatus(bool Status);\r\n    event config_SwapSettings(uint256 Amount, bool Enabled);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"MarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"BuyBackWallet\",\"type\":\"address\"}],\"name\":\"Set_Wallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Buy\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"Sell\",\"type\":\"uint8\"}],\"name\":\"UpdateFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Status\",\"type\":\"bool\"}],\"name\":\"Wallet_feeExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"TokenAddressCleared\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"}],\"name\":\"clearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Enabled\",\"type\":\"bool\"}],\"name\":\"config_SwapSettings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Status\",\"type\":\"bool\"}],\"name\":\"config_TradingStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ExpansaoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ExpansaoReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PionnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PionnerReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_FeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExpansaoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPionnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoExpansaoReceiver\",\"type\":\"address\"}],\"name\":\"setExpansaoReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ExpansaoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PionnerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellExpansaoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellPionnerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setLiquidifyGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"io\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PionnersReceiver\",\"type\":\"address\"}],\"name\":\"setPionnersReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setTXBNBgas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setmarketingFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Olefy", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a49b9b5f161a985ab2cbecb1e5e001fe4b06a77d34aab1cd124d20a82f1247a2"}