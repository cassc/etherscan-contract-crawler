{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n   \r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mintFromContract(uint256 _amount , address recipient) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface Promotion {\r\n    function migrateToLeding(address _addr) external returns (uint256);\r\n    function getInvest(address _addr) external view returns(uint256);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _node_addr;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function node() public  view  virtual  returns (address) {\r\n\r\n        return _node_addr;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAllowed() {\r\n\r\n        require( (_msgSender() == owner() ) || (_msgSender() == _node_addr) , \"Caller not Allowed\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function transferNodeAddress(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setNode(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function _setNode(address _addr) private {\r\n        _node_addr = _addr;\r\n    }\r\n}\r\n\r\ncontract Lending is Context,Ownable {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address private _company_address;\r\n    address private _fusd_address = 0x4CE851531588C431add986BFF371312d4850211E;\r\n    address private _pilot_addr = 0x9cc1cCAE786522f4fdFE4C12Cb8483116CBE1d95;\r\n\r\n    uint256 public _min_lending = 100000000000000000000;\r\n    uint256 public _min_relending = 1000000000000000000;\r\n\r\n    uint256 public _cycle_length = 10 days; //1 Hr for Testing\r\n    uint256 public minGasFee = 700000000000000;\r\n    \r\n    struct Lendlist {\r\n        uint256 _amount;\r\n        uint256 _current_principle;\r\n        uint16   _cycle;\r\n        uint256 _init_time;\r\n        uint256 _start_time;\r\n        uint256   _end_time;\r\n    }\r\n    mapping(address => uint256) public lendCount;\r\n    mapping(address => mapping(uint256 => Lendlist)) public lendlist;\r\n    mapping(uint256 => bool) public transPay;\r\n\r\n    constructor() {\r\n        _company_address = owner();\r\n    }\r\n\r\n    function newLending(uint256 _amount) external {\r\n        \r\n        require(_amount > _min_lending ,\"Minimum Lending Failed\");\r\n\r\n        debitToken(_fusd_address,_msgSender(),_amount);\r\n        \r\n        newlending(_msgSender(),_amount);\r\n       \r\n    }\r\n\r\n    function reLending(uint256 _lend_id ,uint256 _amount) external {\r\n        \r\n        require(lendlist[_msgSender()][_lend_id]._amount > 0,\"No Active Lending\");\r\n        \r\n        require(block.timestamp > lendlist[_msgSender()][_lend_id]._end_time ,\"Previous Cycle Still Running\");\r\n\r\n        if(_amount > 0 )\r\n        {\r\n            require(_amount >= _min_relending,\"Min Topup\");\r\n            debitToken(_fusd_address,_msgSender(),_amount);\r\n        }\r\n\r\n        relending(_msgSender(),_amount,_lend_id);\r\n    }\r\n\r\n    function topupLending(uint256 _amount , uint256 _lend_id) external {\r\n\r\n        require(lendlist[_msgSender()][_lend_id]._amount > 0,\"No Active Lending\");\r\n        require(_amount > 0 ,\"Lending Amount Must Greater than 0\");\r\n        require(_amount >= _min_relending,\"Min Topup\");\r\n        \r\n         debitToken(_fusd_address,_msgSender(),_amount);\r\n\r\n        lendlist[_msgSender()][_lend_id]._amount = lendlist[_msgSender()][_lend_id]._amount.add(_amount);\r\n\r\n        emit topupEvent(_msgSender(),_amount,_lend_id);\r\n    }\r\n\r\n    function daoTopupLending(address _addr, uint256 _amount,uint256 _lend_id) onlyAllowed external {\r\n\r\n        require(lendlist[_addr][_lend_id]._amount > 0,\"No Active Lending\");\r\n        require(_amount > 0 ,\"Lending Amount Must Greater than 0\");\r\n        \r\n        debitToken(_fusd_address,_msgSender(),_amount);\r\n\r\n        lendlist[_addr][_lend_id]._amount = lendlist[_addr][_lend_id]._amount.add(_amount);\r\n\r\n        emit topupEvent(_addr,_amount,_lend_id);\r\n    }\r\n\r\n    function daoLending(address _addr , uint256 _amount) onlyAllowed external\r\n    {\r\n        require(_amount > _min_lending ,\"Minimum Lending Failed\");\r\n    \r\n        debitToken(_fusd_address,_msgSender(),_amount);\r\n\r\n        newlending(_addr,_amount);\r\n\r\n    }\r\n\r\n    function daoRelending(address _addr,uint256 _amount , uint256 _lend_id ) onlyAllowed external\r\n    {\r\n        require(lendlist[_addr][_lend_id]._amount > 0,\"No Active Lending\");\r\n\r\n        if(_amount > 0 )\r\n        {\r\n             debitToken(_fusd_address,_msgSender(),_amount);\r\n        }\r\n\r\n        relending(_addr,_amount,_lend_id);\r\n    }\r\n\r\n    function unlending(address _addr , uint256 _lend_id , uint256 _amount, bool _type) onlyAllowed external {\r\n\r\n        require(lendlist[_addr][_lend_id]._amount > 0,'Active Lending Required');\r\n\r\n        if(_type == false)\r\n        {\r\n            IERC20 _fusd = IERC20(_fusd_address);\r\n            if(_amount > lendlist[_addr][_lend_id]._amount)\r\n            {   \r\n                uint256 _diff = _amount.sub(lendlist[_addr][_lend_id]._amount);\r\n                _fusd.safeTransferFrom(_msgSender(),address(this),_diff);\r\n            }\r\n            _fusd.safeTransfer(_addr,lendlist[_addr][_lend_id]._amount);\r\n        }\r\n        \r\n        delete lendlist[_addr][_lend_id];\r\n\r\n        emit unlendingEvent(_addr,_lend_id);\r\n    }\r\n\r\n    function migration(address _addr) external onlyAllowed {\r\n\r\n        Promotion pro = Promotion(_pilot_addr);\r\n        require(pro.getInvest(_addr) > 0 ,\"No Active Leding\");\r\n\r\n        uint256 _lend_amount =  pro.migrateToLeding(_addr);\r\n        \r\n        newlending(_addr,_lend_amount);\r\n    }\r\n\r\n    function updatePilotAddress(address _addr) external onlyOwner {\r\n        _pilot_addr = _addr;\r\n    }\r\n\r\n    function requestUnlending(uint256 _transId) payable external\r\n    {\r\n        require(msg.value >= minGasFee,\"Required Gas Fee\");\r\n        require(transPay[_transId] == false,\"Pay One Time\");\r\n        address payable _payable = payable(node());\r\n        _payable.transfer(msg.value);\r\n        transPay[_transId] =true;\r\n\r\n    }\r\n    \r\n    function newlending (address _addr , uint256 _amount ) private {\r\n        \r\n        uint256 _new_id = lendCount[_addr].add(1);\r\n\r\n        lendlist[_addr][_new_id]._amount = _amount;\r\n        lendlist[_addr][_new_id]._current_principle = _amount;\r\n        lendlist[_addr][_new_id]._cycle = 1 ;\r\n        lendlist[_addr][_new_id]._init_time = block.timestamp;\r\n        lendlist[_addr][_new_id]._start_time = block.timestamp;\r\n        lendlist[_addr][_new_id]._end_time = block.timestamp.add(_cycle_length);\r\n\r\n        lendCount[_addr] = _new_id;\r\n\r\n        emit initLending(_addr,_amount,_new_id,1);\r\n    }\r\n\r\n    function relending(address _addr, uint256 _amount, uint256 _lend_id) private {\r\n\r\n        lendlist[_addr][_lend_id]._amount = lendlist[_addr][_lend_id]._amount.add(_amount);\r\n        lendlist[_addr][_lend_id]._current_principle = lendlist[_addr][_lend_id]._amount;\r\n        lendlist[_addr][_lend_id]._cycle = lendlist[_addr][_lend_id]._cycle +1  ;\r\n        lendlist[_addr][_lend_id]._start_time = block.timestamp;\r\n        lendlist[_addr][_lend_id]._end_time = block.timestamp.add(_cycle_length);\r\n        \r\n        emit initLending(_addr,_amount,_lend_id,lendlist[_addr][_lend_id]._cycle);\r\n    }\r\n\r\n    function debitToken(address _token,address _from ,uint256 _amount) private {\r\n\r\n        IERC20 _fusd = IERC20(_token);\r\n        require(_fusd.allowance(_from,address(this)) >= _amount,\"Allowance Required\");\r\n        require(_fusd.balanceOf(_from) >= _amount, \"No FUSD\");\r\n\r\n        uint256 _pre_balance = _fusd.balanceOf(address(this));\r\n        _fusd.safeTransferFrom(_from,address(this),_amount);\r\n\r\n        require(_fusd.balanceOf(address(this)).sub(_pre_balance) == _amount ,\"Amount Not Tally\");\r\n    }\r\n\r\n    function withdrawToken(address _token,uint256 _amount) external onlyOwner {\r\n        require(_token != _fusd_address ,\"NO FUSDT\");\r\n        IERC20 token = IERC20(_token);\r\n        uint256 _bal = token.balanceOf(address(this));\r\n        \r\n        require(_amount <= _bal,\"Over Balance\");\r\n\r\n        token.safeTransfer(_company_address,_amount);\r\n    }\r\n\r\n    function changeTreasuryAddress(address _addr) external onlyOwner {\r\n        require(_addr != address(0),\"Valid Address\");\r\n        _company_address = _addr;\r\n    }   \r\n\r\n    function withdraw() public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        address payable _temp = payable(_company_address);\r\n        _temp.transfer(balance);\r\n    }\r\n\r\n    function changeMinLending(uint256 _value) external onlyOwner {\r\n        require(_value > _min_lending,\"Min Lending\");\r\n        _min_lending = _value;\r\n    }\r\n\r\n    function changeMinTopup(uint256 _value) external onlyOwner {\r\n        require(_value > _min_relending,\"Min Topup\");\r\n        _min_relending = _value;\r\n    }\r\n\r\n    function changeCycleLength(uint256 _days) external onlyOwner {\r\n        require(_days > 86400,\"Mimimum 1 Day\");\r\n        _cycle_length = _days;\r\n    }\r\n\r\n    event initLending(address indexed _addr,uint256 _amount,uint256 _lend_id,uint16 _cycle);\r\n\r\n    event unlendingEvent(address indexed _addr , uint256 _lend_id);\r\n\r\n    event topupEvent(address indexed _addr,uint256 _amount,uint256 _lend_id);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lend_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_cycle\",\"type\":\"uint16\"}],\"name\":\"initLending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lend_id\",\"type\":\"uint256\"}],\"name\":\"topupEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lend_id\",\"type\":\"uint256\"}],\"name\":\"unlendingEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_cycle_length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_min_lending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_min_relending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"changeCycleLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeMinLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeMinTopup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"daoLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lend_id\",\"type\":\"uint256\"}],\"name\":\"daoRelending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lend_id\",\"type\":\"uint256\"}],\"name\":\"daoTopupLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendlist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_current_principle\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_cycle\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_init_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end_time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"migration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"newLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lend_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transId\",\"type\":\"uint256\"}],\"name\":\"requestUnlending\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lend_id\",\"type\":\"uint256\"}],\"name\":\"topupLending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transPay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferNodeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lend_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"unlending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updatePilotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Lending", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a2a507f2664962bca8a18c37755f9ec9faa3706c8e5c57f29aa775ecd163ae6e"}