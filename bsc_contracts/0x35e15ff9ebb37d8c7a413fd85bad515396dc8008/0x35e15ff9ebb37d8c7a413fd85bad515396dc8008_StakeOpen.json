{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/StakeOpen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./interfaces/IStakeV2.sol\\\";\\nimport \\\"./interfaces/IRewardPool.sol\\\";\\nimport \\\"../common/Sweepable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./BaseStakingV2.sol\\\";\\n\\n/**\\n * Open ended staking.\\n * Supports multi-rewards.\\n * Supports multi-stakes.\\n * Supports min lock.\\n * Cannot be tokenizable.\\n */\\ncontract StakeOpen is Sweepable, BaseStakingV2, IRewardPool {\\n    using SafeMath for uint256;\\n    using StakeFlags for uint16;\\n    mapping(address => mapping(address => uint256)) stakeTimes;\\n\\n    string constant VERSION = \\\"000.001\\\";\\n\\n    constructor() EIP712(\\\"FERRUM_STAKING_V2_OPEN\\\", VERSION) {}\\n\\n    function initDefault(address token) external nonZeroAddress(token) {\\n        StakingBasics.StakeInfo storage info = stakings[token];\\n        require(\\n            stakings[token].stakeType == Staking.StakeType.None,\\n            \\\"SO: Already exists\\\"\\n        );\\n        info.stakeType = Staking.StakeType.OpenEnded;\\n        baseInfo.baseToken[token] = token;\\n        baseInfo.name[token] = \\\"Default Stake Pool\\\";\\n        address[] memory rewardTokens = new address[](1);\\n        rewardTokens[0] = token;\\n        setAllowedRewardTokens(token, rewardTokens);\\n    }\\n\\n    function init(address token, string memory name, address[] calldata rewardTokens) external nonZeroAddress(token) onlyOwner {\\n        StakingBasics.StakeInfo storage info = stakings[token];\\n        require(\\n            stakings[token].stakeType == Staking.StakeType.None,\\n            \\\"SO: Already exists\\\"\\n        );\\n        info.stakeType = Staking.StakeType.OpenEnded;\\n        baseInfo.baseToken[token] = token;\\n        baseInfo.name[token] = name;\\n        setAllowedRewardTokens(token, rewardTokens);\\n    }\\n\\n    function stakeWithAllocation(\\n        address staker,\\n        address id,\\n        uint256 allocation,\\n        bytes32 salt,\\n        bytes calldata allocatorSignature\\n    ) external virtual override returns (uint256) {\\n        require(allocation != 0, \\\"StakeTimed: allocation is required\\\");\\n        address allocator = extraInfo.allocators[id];\\n        require(allocator != address(0), \\\"StakeTimed: no allocator\\\");\\n        verifyAllocation(\\n            id,\\n            msg.sender,\\n            allocator,\\n            allocation,\\n            salt,\\n            allocatorSignature\\n        );\\n        return _stake(staker, id, allocation);\\n    }\\n\\n    function stake(address to, address id)\\n        external\\n        virtual\\n        override\\n        returns (uint256 stakeAmount)\\n    {\\n        stakeAmount = _stake(to, id, 0);\\n    }\\n\\n    /**\\n     * Default stake is an stake with the id of the token.\\n     */\\n    function stakeFor(address to, address id)\\n        external\\n        virtual\\n        nonZeroAddress(to)\\n        nonZeroAddress(id)\\n        returns (uint256)\\n    {\\n        return _stake(to, id, 0);\\n    }\\n\\n    function _stake(\\n        address to,\\n        address id,\\n        uint256 allocation\\n    ) internal returns (uint256) {\\n        StakingBasics.StakeInfo memory info = stakings[id];\\n        require(\\n            info.stakeType == Staking.StakeType.OpenEnded,\\n            \\\"SO: Not open ended stake\\\"\\n        );\\n        require(\\n            !info.flags.checkFlag(StakeFlags.Flag.IsAllocatable) ||\\n                allocation != 0,\\n            \\\"SO: No allocation\\\"\\n        ); // Break early to save gas for allocatable stakes\\n        address token = baseInfo.baseToken[id];\\n        uint256 amount = sync(token);\\n        require(amount != 0, \\\"SO: amount is required\\\");\\n        require(\\n            !info.flags.checkFlag(StakeFlags.Flag.IsAllocatable) ||\\n                amount <= allocation,\\n            \\\"SO: Not enough allocation\\\"\\n        );\\n        _stakeUpdateStateOnly(to, id, amount);\\n        return amount;\\n    }\\n\\n    /**\\n     * First send the rewards to this contract, then call this method.\\n     * Designed to be called by smart contracts.\\n     */\\n    function addMarginalReward(address rewardToken)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        return _addReward(rewardToken, rewardToken);\\n    }\\n\\n    function addMarginalRewardToPool(address id, address rewardToken)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            extraInfo.allowedRewardTokens[id][rewardToken],\\n            \\\"SO: rewardToken not valid for this stake\\\"\\n        );\\n        return _addReward(id, rewardToken);\\n    }\\n\\n    function _addReward(address id, address rewardToken)\\n        internal\\n        virtual\\n        nonZeroAddress(id)\\n        nonZeroAddress(rewardToken)\\n        returns (uint256)\\n    {\\n        uint256 rewardAmount = sync(rewardToken);\\n        if (rewardAmount == 0) {\\n            return 0;\\n        } // No need to fail the transaction\\n\\n        reward.rewardsTotal[id][rewardToken] = reward\\n        .rewardsTotal[id][rewardToken].add(rewardAmount);\\n        reward.fakeRewardsTotal[id][rewardToken] = reward\\n        .fakeRewardsTotal[id][rewardToken].add(rewardAmount);\\n        emit RewardAdded(id, rewardToken, rewardAmount);\\n        return rewardAmount;\\n    }\\n\\n    function withdrawTimeOf(address id, address staker)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _withdrawTimeOf(id, staker);\\n    }\\n\\n    function _withdrawTimeOf(address id, address staker)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 lockSec = extraInfo.lockSeconds[id];\\n        uint256 stakeTime = stakeTimes[id][staker];\\n        return stakeTime + lockSec;\\n    }\\n\\n    function rewardOf(\\n        address id,\\n        address staker,\\n        address[] calldata rewardTokens\\n    ) external view virtual returns (uint256[] memory amounts) {\\n        StakingBasics.StakeInfo memory info = stakings[id];\\n        require(\\n            info.stakeType != Staking.StakeType.None,\\n            \\\"SO: Stake not found\\\"\\n        );\\n        uint256 balance = state.stakes[id][staker];\\n        amounts = new uint256[](rewardTokens.length);\\n        if (balance == 0) {\\n            return amounts;\\n        }\\n        uint256 poolShareX128 = VestingLibrary.calculatePoolShare(\\n            balance,\\n            state.stakedBalance[id]\\n        );\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            uint256 userFake = reward.fakeRewards[id][staker][rewardTokens[i]];\\n            uint256 fakeTotal = reward.fakeRewardsTotal[id][rewardTokens[i]];\\n            (amounts[i], ) = _calcSingleRewardOf(\\n                poolShareX128,\\n                fakeTotal,\\n                userFake\\n            );\\n        }\\n    }\\n\\n    function withdrawRewards(address to, address id)\\n        external\\n        virtual\\n        nonZeroAddress(to)\\n        nonZeroAddress(id)\\n    {\\n        return\\n            _withdrawRewards(\\n                to,\\n                id,\\n                msg.sender,\\n                extraInfo.allowedRewardTokenList[id]\\n            );\\n    }\\n\\n    /**\\n     * First withdraw all rewards, than withdarw it all, then stake back the remaining.\\n     */\\n    function withdraw(\\n        address to,\\n        address id,\\n        uint256 amount\\n    ) external virtual {\\n        _withdraw(to, id, msg.sender, amount);\\n    }\\n\\n    function _stakeUpdateStateOnly(\\n        address staker,\\n        address id,\\n        uint256 amount\\n    ) internal {\\n        StakingBasics.StakeInfo memory info = stakings[id];\\n        require(\\n            info.stakeType == Staking.StakeType.OpenEnded,\\n            \\\"SO: Not open ended stake\\\"\\n        );\\n        uint256 stakedBalance = state.stakedBalance[id];\\n        address[] memory rewardTokens = extraInfo.allowedRewardTokenList[id];\\n\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            address rewardToken = rewardTokens[i];\\n            uint256 fakeTotal = reward.fakeRewardsTotal[id][rewardToken];\\n            uint256 curRew = stakedBalance != 0\\n                ? amount.mul(fakeTotal).div(stakedBalance)\\n                : fakeTotal;\\n\\n            reward.fakeRewards[id][staker][rewardToken] = reward\\n            .fakeRewards[id][staker][rewardToken].add(curRew);\\n\\n            if (stakedBalance != 0) {\\n                reward.fakeRewardsTotal[id][rewardToken] = fakeTotal.add(\\n                    curRew\\n                );\\n            }\\n        }\\n\\n        state.stakedBalance[id] = stakedBalance.add(amount);\\n\\n        uint256 newStake = state.stakes[id][staker].add(amount);\\n        uint256 lastStakeTime = stakeTimes[id][staker];\\n        if (lastStakeTime != 0) {\\n            uint256 timeDrift = amount.mul(block.timestamp - lastStakeTime).div(\\n                newStake\\n            );\\n            stakeTimes[id][staker] = lastStakeTime + timeDrift;\\n        } else {\\n            stakeTimes[id][staker] = block.timestamp;\\n        }\\n        state.stakes[id][staker] = newStake;\\n    }\\n\\n    function _withdraw(\\n        address to,\\n        address id,\\n        address staker,\\n        uint256 amount\\n    ) internal virtual nonZeroAddress(staker) nonZeroAddress(id) {\\n        if (amount == 0) {\\n            return;\\n        }\\n        StakingBasics.StakeInfo memory info = stakings[id];\\n        require(\\n            info.stakeType == Staking.StakeType.OpenEnded,\\n            \\\"SO: Not open ended stake\\\"\\n        );\\n        require(\\n            _withdrawTimeOf(id, staker) <= block.timestamp,\\n            \\\"SO: too early to withdraw\\\"\\n        );\\n        _withdrawOnlyUpdateStateAndPayRewards(to, id, staker, amount);\\n        sendToken(baseInfo.baseToken[id], to, amount);\\n        // emit PaidOut(tokenAddress, staker, amount);\\n    }\\n\\n    /*\\n     * @dev: Formula:\\n     * Calc total rewards: balance * fake_total / stake_balance\\n     * Calc faked rewards: amount  * fake_total / stake_balance\\n     * Calc pay ratio: (total rewards - debt) / total rewards [ total rewards should NEVER be less than debt ]\\n     * Pay: pay ratio * faked rewards\\n     * Debt: Reduce by (fake rewards - pay)\\n     * total fake: reduce by fake rewards\\n     * Return the pay amount as rewards\\n     */\\n    function _withdrawOnlyUpdateStateAndPayRewards(\\n        address to,\\n        address id,\\n        address staker,\\n        uint256 amount\\n    ) internal virtual returns (uint256) {\\n        uint256 userStake = state.stakes[id][staker];\\n        require(amount <= userStake, \\\"SO: Not enough balance\\\");\\n        address[] memory rewardTokens = extraInfo.allowedRewardTokenList[id];\\n        uint256 stakedBalance = state.stakedBalance[id];\\n        uint256 poolShareX128 = VestingLibrary.calculatePoolShare(\\n            amount,\\n            stakedBalance\\n        );\\n\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            _withdrawPartialRewards(\\n                to,\\n                id,\\n                staker,\\n                rewardTokens[i],\\n                poolShareX128\\n            );\\n        }\\n\\n        state.stakes[id][staker] = userStake.sub(amount);\\n        state.stakedBalance[id] = stakedBalance.sub(amount);\\n        return amount;\\n    }\\n\\n    function _withdrawPartialRewards(\\n        address to,\\n        address id,\\n        address staker,\\n        address rewardToken,\\n        uint256 poolShareX128\\n    ) internal {\\n        uint256 userFake = reward.fakeRewards[id][staker][rewardToken];\\n        uint256 fakeTotal = reward.fakeRewardsTotal[id][rewardToken];\\n        (uint256 actualPay, uint256 fakeRewAmount) = _calcSingleRewardOf(\\n            poolShareX128,\\n            fakeTotal,\\n            userFake\\n        );\\n\\n        if (fakeRewAmount > userFake) {\\n            // We have some rew to return. But we don't so add it back\\n            userFake = actualPay;\\n            reward.fakeRewardsTotal[id][rewardToken] = fakeTotal\\n                .sub(fakeRewAmount)\\n                .add(actualPay);\\n        } else {\\n            userFake = userFake.sub(fakeRewAmount);\\n            reward.fakeRewardsTotal[id][rewardToken] = fakeTotal.sub(\\n                fakeRewAmount\\n            );\\n        }\\n        reward.fakeRewards[id][staker][rewardToken] = userFake;\\n        if (actualPay != 0) {\\n            sendToken(rewardToken, to, actualPay);\\n        }\\n    }\\n\\n    function _withdrawRewards(\\n        address to,\\n        address id,\\n        address staker,\\n        address[] memory rewardTokens\\n    ) internal {\\n        uint256 userStake = state.stakes[id][staker];\\n        uint256 poolShareX128 = VestingLibrary.calculatePoolShare(\\n            userStake,\\n            state.stakedBalance[id]\\n        );\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            address rewardToken = rewardTokens[i];\\n            uint256 userFake = reward.fakeRewards[id][staker][rewardToken];\\n            uint256 fakeTotal = reward.fakeRewardsTotal[id][rewardToken];\\n            (uint256 actualPay, ) = _calcSingleRewardOf(\\n                poolShareX128,\\n                fakeTotal,\\n                userFake\\n            );\\n\\n            reward.rewardsTotal[id][rewardToken] = reward\\n            .rewardsTotal[id][rewardToken].sub(actualPay);\\n            reward.fakeRewards[id][staker][rewardToken] = userFake.add(\\n                actualPay\\n            );\\n            if (actualPay != 0) {\\n                sendToken(rewardToken, to, actualPay);\\n            }\\n        }\\n        // emit PaidOut(tokenAddress, address(rewardToken), _staker, 0, actualPay);\\n    }\\n\\n    function _calcSingleRewardOf(\\n        uint256 poolShareX128,\\n        uint256 fakeRewardsTotal,\\n        uint256 userFake\\n    ) internal pure returns (uint256, uint256) {\\n        if (poolShareX128 == 0) {\\n            return (0, 0);\\n        }\\n        uint256 rew = VestingLibrary.calculateFakeRewardForWithdraw(\\n            fakeRewardsTotal,\\n            poolShareX128\\n        );\\n        return (rew > userFake ? rew.sub(userFake) : 0, rew); // Ignoring the overflow problem\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/interfaces/IStakeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Staking {\\n  enum StakeType { None, Unset, Timed, OpenEnded, PublicSale }\\n}\\n\\ninterface IStakeV2 {\\n  function stake(address to, address id) external returns (uint256);\\n  function stakeWithAllocation(\\n        address to,\\n        address id,\\n        uint256 allocation,\\n        bytes32 salt,\\n        bytes calldata allocatorSignature) external returns (uint256);\\n  function baseToken(address id) external returns(address);\\n  function name(address id) external returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/interfaces/IRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardPool {\\n  function addMarginalReward(address rewardToken) external returns (uint256);\\n  function addMarginalRewardToPool(address poolId, address rewardToken) external returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/common/Sweepable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Sweepable is Ownable {\\n    using SafeERC20 for IERC20;\\n    bool public sweepFrozen;\\n\\n    function freezeSweep() external onlyOwner {\\n        sweepFrozen = true;\\n    }\\n\\n    function sweepToken(address token, address to, uint256 amount) external onlyOwner {\\n        require(!sweepFrozen, \\\"S: Sweep is frozen\\\");\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/BaseStakingV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IStakeV2.sol\\\";\\nimport \\\"./library/StakingBasics.sol\\\";\\nimport \\\"./library/Admined.sol\\\";\\nimport \\\"./vesting/VestingLibrary.sol\\\";\\nimport \\\"./library/TokenReceivable.sol\\\";\\nimport \\\"./library/StakingV2CommonSignatures.sol\\\";\\nimport \\\"./factory/IStakingFactory.sol\\\";\\nimport \\\"../common/IFerrumDeployer.sol\\\";\\nimport \\\"./interfaces/IStakeInfo.sol\\\";\\nimport \\\"../taxing/IGeneralTaxDistributor.sol\\\";\\n\\nabstract contract BaseStakingV2 is IStakeV2, IStakeInfo, TokenReceivable, Admined,\\n  StakingV2CommonSignatures {\\n  using SafeMath for uint256;\\n  using StakeFlags for uint16;\\n  address public /*immutable*/ factory;\\n  StakingBasics.StakeExtraInfo extraInfo;\\n  StakingBasics.StakeBaseInfo baseInfo;\\n  StakingBasics.StakeState state;\\n  StakingBasics.RewardState reward;\\n  VestingLibrary.VestingSchedule vesting;\\n  mapping(address => StakingBasics.StakeInfo) public stakings;\\n  event RewardPaid(address id, address staker, address to, address[] rewardTokens, uint256[] rewards);\\n  event BasePaid(address id, address staker, address to, address token, uint256 amountPaid);\\n  event Staked(address id, address tokenAddress, address staker, uint256 amount);\\n  event RewardAdded(address id, address rewardToken, uint256 rewardAmount);\\n  address public creationSigner;\\n  constructor() {\\n    bytes memory _data = IFerrumDeployer(msg.sender).initData();\\n    (factory) = abi.decode(_data, (address));\\n  }\\n\\n  function setCreationSigner(address _signer) external onlyOwner {\\n    creationSigner = _signer;\\n  }\\n\\n\\t// TODO: Make this a gov multisig request\\n\\tfunction setLockSeconds(address id, uint256 _lockSeconds) external onlyOwner {\\n\\t\\trequire(id != address(0), \\\"BSV: id required\\\");\\n    StakingBasics.StakeInfo memory stake = stakings[id];\\n    require(stake.stakeType != Staking.StakeType.None, \\\"BSV2: Not initialized\\\");\\n\\t\\textraInfo.lockSeconds[id] = uint64(_lockSeconds);\\n\\t}\\n\\n\\tfunction rewardsTotal(address id, address rewardAddress) external view returns (uint256) {\\n\\t\\treturn reward.rewardsTotal[id][rewardAddress];\\n\\t}\\n\\n\\tfunction lockSeconds(address id) external view returns (uint256) {\\n\\t\\treturn extraInfo.lockSeconds[id];\\n\\t}\\n\\n  function setAllowedRewardTokens(address id, address[] memory tokens) internal {\\n    extraInfo.allowedRewardTokenList[id] = tokens;\\n    for(uint i=0; i < tokens.length; i++) {\\n      extraInfo.allowedRewardTokens[id][tokens[i]] = true;\\n    }\\n  }\\n\\n  function ensureWithdrawAllowed(StakingBasics.StakeInfo memory stake) internal pure {\\n    require(\\n      !stake.flags.checkFlag(StakeFlags.Flag.IsRecordKeepingOnly) &&\\n      !stake.flags.checkFlag(StakeFlags.Flag.IsBaseSweepable), \\\"BSV2: Record keeping only\\\");\\n    require(stake.stakeType != Staking.StakeType.PublicSale, \\\"BSV2: No withdraw on public sale\\\");\\n  }\\n\\n\\tfunction stakedBalance(address id) external override view returns (uint256) {\\n\\t\\treturn state.stakedBalance[id];\\n\\t}\\n\\n\\tfunction stakeOf(address id, address staker) external override view returns (uint256) {\\n\\t\\treturn state.stakes[id][staker];\\n\\t}\\n\\n\\tfunction fakeRewardOf(address id, address staker, address rewardToken)\\n\\texternal view returns (uint256) {\\n\\t\\treturn reward.fakeRewards[id][staker][rewardToken];\\n\\t}\\n\\n\\tfunction fakeRewardsTotal(address id, address rewardToken)\\n\\texternal view returns (uint256) {\\n\\t\\treturn reward.fakeRewardsTotal[id][rewardToken];\\n\\t}\\n\\n\\tfunction allowedRewardTokens(address id, address rewardToken) external view returns (bool) {\\n\\t\\treturn extraInfo.allowedRewardTokens[id][rewardToken];\\n\\t}\\n\\n\\tfunction allowedRewardTokenList(address id) external view returns (address[] memory) {\\n\\t\\treturn extraInfo.allowedRewardTokenList[id];\\n\\t}\\n\\n  function sweepBase(address id) external {\\n    StakingBasics.StakeInfo memory stake = stakings[id];\\n    require(stake.stakeType != Staking.StakeType.None, \\\"BSV2: Not initialized\\\");\\n    require(stake.flags.checkFlag(StakeFlags.Flag.IsBaseSweepable), \\\"BSV2: Base not sweepable\\\");\\n    address sweepTarget = extraInfo.sweepTargets[id];\\n    require(sweepTarget != address(0), \\\"BSV2: No sweep target\\\");\\n    uint256 currentSwept = state.stakeSwept[id];\\n    uint256 balance = state.stakedBalance[id];\\n    state.stakeSwept[id] = balance;\\n    sendToken(baseInfo.baseToken[id], sweepTarget, balance.sub(currentSwept));\\n  }\\n\\n  function sweepRewards(address id, address[] memory rewardTokens) external {\\n    StakingBasics.StakeInfo memory stake = stakings[id];\\n    require(stake.stakeType != Staking.StakeType.None, \\\"BSV2: Not initialized\\\");\\n    require(stake.flags.checkFlag(StakeFlags.Flag.IsRewardSweepable), \\\"BSV2: Reward not sweepable\\\");\\n    require(block.timestamp > stake.endOfLife, \\\"BSV2: Only after end of life\\\");\\n    address sweepTarget = extraInfo.sweepTargets[id];\\n    require(sweepTarget != address(0), \\\"BSV2: No sweep target\\\");\\n    for(uint i=0; i<rewardTokens.length; i++) {\\n      _sweepSignleReward(id, rewardTokens[i], sweepTarget);\\n    }\\n  }\\n\\n  function _sweepSignleReward(address id, address rewardToken, address sweepTarget) internal {\\n    uint256 totalRewards = reward.rewardsTotal[id][rewardToken];\\n    uint256 toPay = totalRewards.sub(reward.fakeRewardsTotal[id][rewardToken]);\\n    reward.fakeRewardsTotal[id][rewardToken] = totalRewards;\\n    sendToken(rewardToken, sweepTarget, toPay);\\n  }\\n\\t\\n  function baseToken(address id) external override view returns (address) {\\n    return baseInfo.baseToken[id];\\n  }\\n\\n  function isTokenizable(address id) external override view returns(bool) {\\n    return stakings[id].flags.checkFlag(StakeFlags.Flag.IsTokenizable);\\n  }\\n\\n  function name(address id) external override view returns (string memory _name) {\\n    _name = baseInfo.name[id];\\n  }\\n\\n  modifier nonZeroAddress(address addr) {\\n    require(addr != address(0), \\\"BaseStakingV2: zero address\\\");\\n    _;\\n  }\\n\\n  modifier onlyAdmin(address id) {\\n    require(admins[id][msg.sender] != StakingBasics.AdminRole.None, \\\"BSV2: You are not admin\\\");\\n    _;\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/library/StakingBasics.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IStakeV2.sol\\\";\\n\\nlibrary StakeFlags {\\n  enum Flag { RestrictRewards, IsBaseSweepable, IsRewardSweepable, IsTokenizable, IsFeeable,\\n    IsCustomFeeable, IsAllocatable, IsRecordKeepingOnly, IsMandatoryLocked }\\n\\n  function checkFlag(uint16 dis, Flag f) internal pure returns (bool) {\\n    return dis & (1 >> uint16(f)) != 0;\\n  }\\n\\n  function withFlag(uint16 dis, Flag f, bool value) internal pure returns (uint16 res) {\\n    if (value) {\\n      res = dis | uint16(1 << uint16(f));\\n    } else {\\n      res= dis & (uint16(1 << uint16(f)) ^ uint16(0));\\n    }\\n  }\\n}\\n\\nlibrary StakingBasics {\\n  enum AdminRole { None, StakeAdmin, StakeCreator }\\n  struct RewardState {\\n    mapping(address => mapping(address => uint256)) rewardsTotal;\\n    // Fake rewards acts differently for open ended vs timed staking.\\n    // For open ended, fake rewards is used to balance the rewards ratios going forward\\n    // for timed, fakeRewards reflect the amount of rewards paid to the user.\\n    mapping(address => mapping(address => uint256)) fakeRewardsTotal;\\n    mapping(address => mapping(address => mapping(address => uint256))) fakeRewards;\\n  }\\n\\n  struct StakeBaseInfo {\\n    mapping(address => uint256) cap;\\n    mapping(address => address) baseToken;\\n    mapping(address => string) name;\\n  }\\n\\n  struct StakeInfo {\\n    Staking.StakeType stakeType;\\n    bool restrictedRewards; // Packing redundant configs as booleans for gas saving\\n    uint32 contribStart;\\n    uint32 contribEnd;\\n    uint32 endOfLife; // No more reward paid after this time. Any reward left can be swept\\n    uint32 configHardCutOff;\\n    uint16 flags;\\n  }\\n\\n  struct StakeExtraInfo {\\n    mapping(address => mapping(address => bool)) allowedRewardTokens;\\n    mapping(address => address[]) allowedRewardTokenList;\\n    mapping(address => address) allocators;\\n    mapping(address => address) feeTargets;\\n    mapping(address => address) sweepTargets;\\n    mapping(address => uint64) lockSeconds;\\n  }\\n\\n  struct StakeState {\\n    mapping(address => uint256) stakedBalance;\\n    mapping(address => uint256) stakedTotal;\\n    mapping(address => uint256) stakeSwept;\\n    mapping(address => mapping(address => uint256)) stakes;\\n    mapping(address => mapping(address => uint256)) stakeDebts;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/library/Admined.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./StakingBasics.sol\\\";\\n\\nabstract contract Admined is Ownable {\\n  mapping (address => mapping(address => StakingBasics.AdminRole)) public admins;\\n\\n  function setAdmin(address id, address admin, StakingBasics.AdminRole role) onlyOwner external {\\n    admins[id][admin] = role;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/vesting/VestingLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../library/StakingBasics.sol\\\";\\nimport \\\"../../common/math/FullMath.sol\\\";\\nimport \\\"../../common/math/SafeCast.sol\\\";\\nimport \\\"../../common/math/FixedPoint128.sol\\\";\\n\\nlibrary VestingLibrary {\\n  using SafeMath for uint256;\\n  uint256 constant YEAR_IN_SECONDS = 365 * 24 * 3600;\\n  enum PeriodType { Unlocked, NoWithdraw, LinearReward, LinearBase, LinearBaseLinearReward }\\n  struct VestingItem {\\n    uint160 amount;\\n    uint32 endTime;\\n    PeriodType periodType;\\n  }\\n\\n  struct VestingSchedule {\\n    mapping(address => mapping(address => uint256)) maxApyX10000; // (display only) Max APY * 10000 (20% => 2,000). For display only\\n    mapping(address => mapping(address => uint256)) maxApyX128; // Max APY considering price of base / reward\\n    mapping(address => mapping(address => uint256)) rewardAdded; // Total amount of added rewards\\n    mapping(address => mapping(address => uint256)) rewardPaid; // Total amount of paid\\n    mapping(address => mapping(address => VestingItem[])) items;\\n  }\\n\\n  function getPegPriceX128(address id,\\n    address rewardToken,\\n    mapping(address => mapping(address => uint256)) storage maxApyX10000,\\n    mapping(address => mapping(address => uint256)) storage maxApyX128)\\n    internal view returns (uint256 _maxApyX10000, uint256 baseRewRatioX128) {\\n    _maxApyX10000 = maxApyX10000[id][rewardToken];\\n    uint256 _maxApyX128 = maxApyX128[id][rewardToken];\\n    baseRewRatioX128 = FullMath.mulDiv(_maxApyX128, _maxApyX10000, 10000);\\n  }\\n\\n  function setVestingSchedule(\\n    address id,\\n    address rewardToken,\\n    uint256 maxApyX10000,\\n    uint256 baseRewRatioX128, // Price of base over rew. E.g. rew FRMX, base FRM => $0.5*10^6/(10,000*10^18)\\n    uint32[] calldata endTimes,\\n    uint128[] calldata amounts,\\n    PeriodType[] calldata periodTypes,\\n    VestingSchedule storage vesting) internal {\\n    // Set the maxApy\\n    if (maxApyX10000 != 0) {\\n      uint256 _maxApyX128 = FullMath.mulDiv(maxApyX10000, baseRewRatioX128, 10000);\\n      vesting.maxApyX128[id][rewardToken] = _maxApyX128;\\n    }\\n    vesting.maxApyX10000[id][rewardToken] = maxApyX10000;\\n\\n    for(uint i=0; i < endTimes.length; i++) {\\n      require(endTimes[i] != 0, \\\"VestingLibrary: startTime required\\\");\\n      if (periodTypes[i] == PeriodType.LinearBase || periodTypes[i] == PeriodType.LinearBaseLinearReward) {\\n        require(i == endTimes.length - 1, \\\"VestingLibrary: linearBase only applies to the last period\\\");\\n      }\\n      VestingItem memory vi = VestingItem({\\n        amount: SafeCast.toUint160(amounts[i]),\\n        endTime: endTimes[i],\\n        periodType: periodTypes[i]\\n        });\\n      vesting.items[id][rewardToken][i] = vi;\\n    }\\n  } \\n\\n  function rewardRequired(address id,\\n    address rewardToken,\\n    mapping(address => mapping(address => VestingItem[])) storage items,\\n    mapping(address => mapping(address => uint256)) storage rewardAdded) external view returns (uint256) {\\n    uint256 total = 0;\\n    uint256 len = items[id][rewardToken].length;\\n    require(len != 0 ,\\\"VL: No vesting defined\\\");\\n    for(uint i=0; i < len; i++) {\\n      uint256 vAmount = items[id][rewardToken][i].amount;\\n      total = total.add(vAmount);\\n    }\\n    return total.sub(rewardAdded[id][rewardToken]);\\n  }\\n\\n  function calculatePoolShare(uint256 shareBalance, uint256 stakeBalance)\\n  internal pure returns (uint256 poolShareX128) {\\n      require(stakeBalance != 0, \\\"VL: Balance zero\\\");\\n      poolShareX128 = FullMath.mulDiv(shareBalance, FixedPoint128.Q128, stakeBalance);\\n  }\\n\\n  function calculateMaxApy(uint256 baseTime, uint256 timeNow,\\n      uint256 maxApyX128, uint256 amount) internal pure returns (uint256) {\\n          require(timeNow > baseTime, \\\"VL: Bad timing\\\");\\n          return FullMath.mulDiv(amount, maxApyX128.mul(timeNow - baseTime),\\n            FixedPoint128.Q128.mul(YEAR_IN_SECONDS));\\n  }\\n\\n  function calculateFeeX10000(uint256 amount, uint256 feeX10000) internal pure returns (uint256) {\\n    return FullMath.mulDiv(amount, feeX10000, 10000);\\n  }\\n\\n  function calculateRatio(uint256 amount, uint256 feeX10000) internal pure returns (uint256) {\\n    return FullMath.mulDiv(amount, feeX10000, 10000);\\n  }\\n\\n  function calculateFakeRewardForWithdraw(uint256 rewardAmount, uint256 remainingStakeRatioX128)\\n  internal pure returns (uint256) {\\n    return FullMath.mulDiv(rewardAmount, remainingStakeRatioX128, FixedPoint128.Q128);\\n  }\\n\\n  function calculateRemainingStakeRatioX128(uint256 userBalance, uint256 withdrawAmount)\\n  internal pure returns (uint256) {\\n    return FullMath.mulDiv(userBalance.sub(withdrawAmount), FixedPoint128.Q128, userBalance);\\n  }\\n\\n  function calculateVestedRewards(\\n      uint256 poolShareX128,\\n      uint256 stakingEnd,\\n      uint256 timeNow,\\n      uint256 maxApyRew,\\n      uint256 totalRewards,\\n      VestingItem[] memory items\\n      ) internal pure returns (uint256 reward, bool linearBase) {\\n      /*\\n        Stretch until the appropriate time, calculate piecewise rewards.\\n      */\\n      uint256 i=0;\\n      VestingItem memory item = items[0];\\n      uint256 lastTime = stakingEnd;\\n      while (item.endTime <= timeNow && i < items.length) {\\n        reward = reward.add(FullMath.mulDiv(poolShareX128, totalRewards, FixedPoint128.Q128));\\n        i++;\\n        if (i < items.length) {\\n          item = items[i];\\n        }\\n      }\\n\\n      uint256 endTime = item.endTime; // To avoid too many type conversions\\n      // Partial take\\n      if (endTime > timeNow &&\\n        (item.periodType == PeriodType.LinearReward || item.periodType == PeriodType.LinearBaseLinearReward)) {\\n          reward = reward.add(FullMath.mulDiv(poolShareX128, totalRewards, FixedPoint128.Q128));\\n          uint256 letGoReward = FullMath.mulDiv(reward, timeNow.sub(endTime), lastTime.sub(endTime));\\n          reward = reward.sub(letGoReward);\\n          if (item.periodType == PeriodType.LinearBaseLinearReward) { linearBase = true; }\\n      }\\n      if (maxApyRew != 0 && reward != 0 && reward > maxApyRew) {\\n          // Dont give out more than the max_apy\\n          // maxApyRew to be calculated as calculateMaxApy()\\n          reward = maxApyRew;\\n      }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/library/TokenReceivable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @notice Library for handling safe token transactions including fee per transaction tokens.\\n */\\nabstract contract TokenReceivable is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n  mapping(address => uint256) public inventory; // Amount of received tokens that are accounted for\\n\\n  /**\\n   @notice Sync the inventory of a token based on amount changed\\n   @param token The token address\\n   @return amount The changed amount\\n   */\\n  function sync(address token) internal nonReentrant returns (uint256 amount) {\\n    uint256 inv = inventory[token];\\n    uint256 balance = IERC20(token).balanceOf(address(this));\\n    amount = balance - inv;\\n    inventory[token] = balance;\\n  }\\n\\n  /**\\n   @notice Safely sends a token out and updates the inventory\\n   @param token The token address\\n   @param payee The payee\\n   @param amount The amount\\n   */\\n  function sendToken(address token, address payee, uint256 amount) internal nonReentrant {\\n    inventory[token] = inventory[token] - amount;\\n    IERC20(token).safeTransfer(payee, amount);\\n  }\\n}\"\r\n    },\r\n    \"contracts/staking/library/StakingV2CommonSignatures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IStakeV2.sol\\\";\\nimport \\\"../../common/signature/SigCheckable.sol\\\";\\n\\n// Todo: Use multisig checkable...\\nabstract contract StakingV2CommonSignatures is SigCheckable {\\n    bytes32 constant SIGNATURE_FOR_ID_METHOD =\\n        keccak256(\\\"SignatureForId(address id,uint8 stakeType,uint32 signatureLifetime,bytes32 salt)\\\");\\n    function signatureForId(address id,\\n        Staking.StakeType stakeType,\\n        address signer,\\n        bytes32 salt,\\n        bytes calldata signature,\\n        uint32 signatureLifetime) internal {\\n        require(signatureLifetime < block.timestamp, \\\"SignatureHelper: expired\\\");\\n        uint8 stInt = uint8(stakeType);\\n        bytes32 message = keccak256(abi.encode(\\n            SIGNATURE_FOR_ID_METHOD,\\n            id,\\n            stInt,\\n            signatureLifetime,\\n            salt));\\n        address _signer = signerUnique(message, signature);\\n        require(_signer == signer, \\\"SV2: Invalid signer\\\");\\n    }\\n\\n    bytes32 constant VERIFY_ALLOCATION_METHOD =\\n        keccak256(\\\"VerifyAllocation(address id,address allocatee,uint256 amount,bytes32 salt)\\\");\\n    function verifyAllocation(\\n        address id,\\n        address allocatee,\\n        address allocator,\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes calldata signature) internal view {\\n        bytes32 message = keccak256(abi.encode(\\n            VERIFY_ALLOCATION_METHOD,\\n            id,\\n            allocatee,\\n            amount,\\n            salt));\\n        (, address _signer) = signer(message, signature);\\n        require(_signer == allocator, \\\"SV2: Invalid allocator\\\");\\n    }\\n}\"\r\n    },\r\n    \"contracts/staking/factory/IStakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStakingFactory {\\n    event PoolCreated(\\n        address indexed stakingPoolAddress,\\n        address indexed stakingPoolId,\\n        string indexed symbol,\\n        address pool\\n    );\\n\\n\\n    function getPool(address pool, address id) external view returns (address);\\n\\n    function createPool(\\n        address stakingPoolAddress,\\n        address stakingPoolId,\\n        string memory symbol\\n    ) external returns (address);\\n}\"\r\n    },\r\n    \"contracts/common/IFerrumDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFerrumDeployer {\\n    function initData() external returns (bytes memory);\\n}\"\r\n    },\r\n    \"contracts/staking/interfaces/IStakeInfo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStakeInfo {\\n    function stakedBalance(address id) external view returns (uint256);\\n    function stakeOf(address id, address staker) view external returns (uint256);\\n    function isTokenizable(address id) external view returns (bool);\\n}\\n\\ninterface IStakeTransferrer {\\n\\tfunction transferFromOnlyPool(address stakingPoolId,\\n\\t\\t\\taddress sender, address from, address to, uint256 value\\n\\t\\t) external returns (bool);\\n\\tfunction approveOnlyPool(address id, address sender, address spender, uint value\\n\\t\\t) external returns (bool);\\n  function transferOnlyPool(address id, address from, address to, uint256 amount\\n\\t\\t) external;\\n\\tfunction allowance(address id, address owner, address spender\\n\\t  ) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/taxing/IGeneralTaxDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGeneralTaxDistributor {\\n    function distributeTax(address token) external returns (uint256);\\n    function distributeTaxAvoidOrigin(address token, address origin) external returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/math/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n        // uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/common/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\"\r\n    },\r\n    \"contracts/common/math/FixedPoint128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/signature/SigCheckable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n @dev Make sure to define method signatures\\n */\\nabstract contract SigCheckable is EIP712 {\\n    mapping(bytes32=>bool) public usedHashes;\\n\\n    function signerUnique(\\n        bytes32 message,\\n        bytes memory signature) internal returns (address _signer) {\\n        bytes32 digest;\\n        (digest, _signer) = signer(message, signature);\\n        require(!usedHashes[digest], \\\"Message already used\\\");\\n        usedHashes[digest] = true;\\n    }\\n\\n    /*\\n        @dev example message;\\n\\n        bytes32 constant METHOD_SIG =\\n            keccak256(\\\"WithdrawSigned(address token,address payee,uint256 amount,bytes32 salt)\\\");\\n        bytes32 message = keccak256(abi.encode(\\n          METHOD_SIG,\\n          token,\\n          payee,\\n          amount,\\n          salt\\n    */\\n    function signer(\\n        bytes32 message,\\n        bytes memory signature) internal view returns (bytes32 digest, address _signer) {\\n        digest = _hashTypedDataV4(message);\\n        _signer = ECDSA.recover(digest, signature);\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"BasePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"addMarginalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"addMarginalRewardToPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"enum StakingBasics.AdminRole\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"allowedRewardTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"allowedRewardTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"fakeRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"fakeRewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inventory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"isTokenizable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"lockSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"name\":\"rewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"enum StakingBasics.AdminRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setCreationSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockSeconds\",\"type\":\"uint256\"}],\"name\":\"setLockSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"allocatorSignature\",\"type\":\"bytes\"}],\"name\":\"stakeWithAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakings\",\"outputs\":[{\"internalType\":\"enum Staking.StakeType\",\"name\":\"stakeType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"restrictedRewards\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"contribStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"contribEnd\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endOfLife\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"configHardCutOff\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"flags\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"sweepBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"}],\"name\":\"sweepRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakeOpen", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}