{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MasterChefDogs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libs/IReferralSystem.sol\\\";\\nimport \\\"./libs/IStrategy.sol\\\";\\nimport \\\"./libs/IRewardsVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./PigsToken.sol\\\";\\nimport \\\"./DogsToken.sol\\\";\\n\\nimport \\\"./libs/DDSCA.sol\\\";\\n\\ncontract MasterChefDogs is Ownable, ReentrancyGuard, DDSCA {\\n    using SafeERC20 for IERC20;\\n\\n    address public PLATFORM_ADDRESS = 0xa3381829Ae9CB616fA95cD0370B12b90C13caA00;\\n    address public govAddress = 0x46E69166d690a46f47D74771dB46C75fA7027084;\\n\\n    uint256 public totalLockedUpRewards;\\n    uint256 public totalBUSDCollected = 0;\\n    uint256 accDepositBUSDRewardPerShare = 0;\\n\\n    PigsToken  public immutable pigsToken;\\n    DogsToken  public immutable dogsToken;\\n\\n    IRewardsVault public rewardsVault;\\n\\n    uint256 public constant MAXIMUM_HARVEST_INTERVAL = 14 days;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;             // How many LP tokens the user has provided.\\n        uint256 dogsRewardDebt;     // Reward debt. See explanation below.\\n        uint256 rewardLockedUp;     // Reward locked up.\\n        uint256 nextHarvestUntil;   // When can the user harvest again.\\n        uint256 busdRewardDebt;     // Reward debt. See explanation below.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken;           // Address of LP token contract.\\n        IStrategy strategy;       // Strategy address that will earnings compound want tokens\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. DOGS to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that DOGS distribution occurs.\\n        uint256 accDogsPerShare;  // Accumulated DOGS per share, times 1e24. See below.\\n        uint256 lpSupply;      // total units locked in the pool\\n        uint256 harvestInterval;  // Harvest interval in seconds\\n        uint256 depositFeeBP;      // Deposit fee in basis points\\n        bool isLPToken;\\n    }\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    uint256 public totalAllocPoint = 0;\\n\\n    IReferralSystem dogsReferral;\\n\\n    uint256 public constant referralCommissionRate = 300; // Pay out 3% to the referrer\\n    uint256 public constant pigsPID = 0;\\n\\n    // Events\\n    event AddPool(uint256 indexed pid, bool isLPToken, uint256 allocPoint, address lpToken, uint256 depositFeeBP, uint256 harvestInterval);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint, uint256 depositFeeBP, uint256 harvestInterval);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event RewardLockedUp(address indexed user, uint256 indexed pid, uint256 amountLockedUp);\\n    event SetDogsReferral(address dogsAddress);\\n    event SetPlatformAddress(address indexed newAddress);\\n    event GovUpdated(address govAddress);\\n\\n    constructor(\\n        PigsToken _pigsToken,\\n        DogsToken _dogsToken,\\n        uint256  _startBlock,\\n        address _rewardsVaultAddress\\n    ){\\n        pigsToken = _pigsToken;\\n        dogsToken = _dogsToken;\\n\\n        rewardsVault = IRewardsVault(_rewardsVaultAddress);\\n\\n        DDSCA.initialize(_dogsToken, 7 * 1e17, 7 * 1e17, _startBlock);\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(IERC20 => bool) public poolExistence;\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    // View function to see pending BUSD on frontend.\\n    function pendingBUSD(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[pigsPID][_user];\\n        return ((user.amount * accDepositBUSDRewardPerShare) / (1e24)) - user.busdRewardDebt;\\n    }\\n\\n    // View function to see pending on frontend.\\n    function pendingDogs(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accDogsPerShare = pool.accDogsPerShare;\\n\\n        if (block.number > pool.lastRewardBlock && pool.lpSupply != 0 && totalAllocPoint > poolInfo[pigsPID].allocPoint) {\\n            uint256 multiplier = getDogsMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 dogReward = (multiplier * DDSCA.tokenPerBlock * pool.allocPoint) / (totalAllocPoint - poolInfo[pigsPID].allocPoint);\\n            accDogsPerShare = accDogsPerShare + ((dogReward * 1e24) / pool.lpSupply);\\n        }\\n\\n        uint256 pending = ((user.amount * accDogsPerShare) / 1e24) - user.dogsRewardDebt;\\n        return pending + user.rewardLockedUp;\\n    }\\n\\n    function canHarvest(uint256 _pid, address _user) public view returns (bool) {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        return block.timestamp >= user.nextHarvestUntil;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getDogsMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        // As we set the multiplier to 0 here after DDSCA.emissionEndBlock\\n        // deposits aren't blocked after farming ends.\\n        if (_from > DDSCA.emissionEndBlock)\\n            return 0;\\n        if (_to > DDSCA.emissionEndBlock)\\n            return DDSCA.emissionEndBlock - _from;\\n        else\\n            return _to - _from;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock)\\n            return;\\n\\n        uint256 lpSupply = pool.lpSupply;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        // all pools except PIGS staking pays out DOGS\\n        if (_pid != pigsPID && totalAllocPoint > poolInfo[pigsPID].allocPoint){\\n            uint256 multiplier = getDogsMultiplier(pool.lastRewardBlock, block.number);\\n            if (multiplier > 0) {\\n                uint256 dogsReward = (multiplier * DDSCA.tokenPerBlock * pool.allocPoint) / (totalAllocPoint - poolInfo[pigsPID].allocPoint);\\n                dogsToken.mint(address(this), dogsReward);\\n                pool.accDogsPerShare = pool.accDogsPerShare + ((dogsReward * 1e24) / lpSupply);\\n            }\\n        }\\n\\n        if (_pid == pigsPID && poolInfo[pigsPID].lpSupply > 0){\\n            uint256 busdRecieved = pigsToken.convertDepositFeesToBUSD(address(busdRewardCurrency), false, false);\\n            accDepositBUSDRewardPerShare = accDepositBUSDRewardPerShare + ((busdRecieved * 1e24) / poolInfo[pigsPID].lpSupply);\\n            totalBUSDCollected = totalBUSDCollected + busdRecieved;\\n        }\\n\\n        pool.lastRewardBlock = block.number;\\n\\n    }\\n\\n    // Deposit LP tokens to MasterChef for DOGS allocation.\\n    function deposit(uint256 _pid, uint256 _amount, address _referrer) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n\\n        if (_amount > 0 && address(dogsReferral) != address(0) && _referrer != address(0) && _referrer != msg.sender) {\\n            dogsReferral.recordReferral(msg.sender, _referrer);\\n        }\\n\\n        if (address(pool.lpToken) == address(pigsToken)) {\\n            payPendingBUSDReward();\\n        } else {\\n            payOrLockupPendingDogs(_pid);\\n        }\\n\\n        if (_amount > 0) {\\n            if (address(pool.lpToken) == address(pigsToken)) {\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n            }\\n\\n            // Accept the balance of coins we receive (useful for coins which take fees).\\n            uint256 previousBalance = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n            _amount = pool.lpToken.balanceOf(address(this)) - previousBalance;\\n            require(_amount > 0, \\\"no funds were received\\\");\\n\\n            uint256 depositFee = pool.depositFeeBP > 0 ? ((_amount * pool.depositFeeBP) / 10000) : 0;\\n            if (pool.depositFeeBP > 0) {\\n                // For LPs dogs handles it 100%, destroys and distributes\\n                uint256 platformFees = ((depositFee * 1e24) / 4) / 1e24; //25% of deposit fee paid to platform\\n                uint256 rewardFees = depositFee - platformFees;\\n                uint256 rewardDepositFee = pool.isLPToken ? rewardFees : ((rewardFees * 1e24) / 4) / 1e24;\\n\\n                pool.lpToken.safeTransfer(address(PLATFORM_ADDRESS), platformFees);\\n                pool.lpToken.safeTransfer(address(dogsToken), rewardDepositFee);\\n\\n                dogsToken.swapDepositFeeForBUSD(address(pool.lpToken), pool.isLPToken);\\n\\n                uint256 busdRecieved = 0;\\n\\n                if (pool.isLPToken) {\\n                    busdRecieved  = pigsToken.convertDepositFeesToBUSD(address(pool.lpToken), pool.isLPToken, true);\\n                }\\n                else { // Lp tokens get liquidated in DogsToken not PigsToken.\\n                    pool.lpToken.safeTransfer(address(pigsToken), rewardFees - rewardDepositFee);\\n                    busdRecieved = pigsToken.convertDepositFeesToBUSD(address(pool.lpToken), pool.isLPToken, true);\\n                }\\n\\n                // Pigs pool is always pool 0.\\n                if (poolInfo[pigsPID].lpSupply > 0) {\\n                    accDepositBUSDRewardPerShare = accDepositBUSDRewardPerShare + ((busdRecieved * 1e24) / poolInfo[pigsPID].lpSupply);\\n                    totalBUSDCollected = totalBUSDCollected + busdRecieved;\\n                }\\n            }\\n\\n            //take remains, send to strategy\\n            pool.lpToken.safeIncreaseAllowance(address(pool.strategy), _amount - depositFee);\\n            uint256 amountDeposit = pool.strategy.deposit(_amount - depositFee);\\n\\n            user.amount = user.amount + amountDeposit;\\n            pool.lpSupply = pool.lpSupply + amountDeposit;\\n\\n        }\\n\\n        if (address(pool.lpToken) == address(pigsToken)){\\n            user.busdRewardDebt = ((user.amount * accDepositBUSDRewardPerShare) / 1e24);\\n        } else {\\n            user.dogsRewardDebt = ((user.amount * pool.accDogsPerShare) / 1e24);\\n        }\\n\\n        rewardsVault.payoutDivs();\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n\\n        if (address(pool.lpToken) == address(pigsToken)){\\n            payPendingBUSDReward();\\n        } else {\\n            payOrLockupPendingDogs(_pid);\\n        }\\n\\n        if (_amount > 0) {\\n\\n            if (address(pool.lpToken) == address(pigsToken)) {\\n                if (!canHarvest(_pid, msg.sender)){\\n                    return;\\n                }\\n            }\\n\\n            uint256 lpAmountBefore = pool.lpToken.balanceOf(address(this));\\n            pool.strategy.withdraw(_amount);\\n            uint256 lpAmountAfter = pool.lpToken.balanceOf(address(this));\\n            uint256 amountRemoved = lpAmountAfter - lpAmountBefore;\\n\\n            if (_amount > user.amount) {\\n                user.amount = 0;\\n            } else {\\n                user.amount = user.amount - _amount;\\n            }\\n\\n            pool.lpToken.safeTransfer(msg.sender, amountRemoved);\\n\\n            if (pool.lpSupply >= _amount)\\n                pool.lpSupply = pool.lpSupply - _amount;\\n            else\\n                pool.lpSupply = 0;\\n        }\\n\\n\\n        if (address(pool.lpToken) == address(pigsToken)){\\n            user.busdRewardDebt = ((user.amount * accDepositBUSDRewardPerShare) / 1e24);\\n        } else {\\n            user.dogsRewardDebt = ((user.amount * pool.accDogsPerShare) / 1e24);\\n        }\\n\\n        rewardsVault.payoutDivs();\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.dogsRewardDebt = 0;\\n        user.busdRewardDebt = 0;\\n\\n        uint256 lpAmountBefore = pool.lpToken.balanceOf(address(this));\\n        pool.strategy.withdraw(amount);\\n        uint256 lpAmountAfter = pool.lpToken.balanceOf(address(this));\\n        uint256 amountRemoved = lpAmountAfter - lpAmountBefore;\\n\\n        pool.lpToken.safeTransfer(msg.sender, amountRemoved);\\n\\n        // In the case of an accounting error, we choose to let the user emergency withdraw anyway\\n        if (pool.lpSupply >=  amount)\\n            pool.lpSupply = pool.lpSupply - amount;\\n        else\\n            pool.lpSupply = 0;\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Pay pending Dogs\\n    function payOrLockupPendingDogs(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.nextHarvestUntil == 0) {\\n            user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n        }\\n\\n        uint256 dogsPending = ((user.amount * pool.accDogsPerShare) / 1e24) - user.dogsRewardDebt;\\n\\n        if (canHarvest(_pid, msg.sender)) {\\n            if (dogsPending > 0 || user.rewardLockedUp > 0) {\\n                uint256 totalRewards = dogsPending + user.rewardLockedUp;\\n\\n                // reset lockup\\n                totalLockedUpRewards = totalLockedUpRewards - user.rewardLockedUp;\\n                user.rewardLockedUp = 0;\\n                user.nextHarvestUntil = block.timestamp + pool.harvestInterval;\\n\\n                // dogsPending can't be zero\\n                safeTokenTransfer(address(dogsToken), msg.sender, totalRewards);\\n                payReferralCommission(msg.sender, totalRewards);\\n            }\\n        } else if (dogsPending > 0) {\\n            user.rewardLockedUp = user.rewardLockedUp + dogsPending;\\n            totalLockedUpRewards = totalLockedUpRewards + dogsPending;\\n            emit RewardLockedUp(msg.sender, _pid, dogsPending);\\n        }\\n\\n    }\\n\\n    // Pay pending BUSD from the PIGS staking reward scheme.\\n    function payPendingBUSDReward() internal {\\n        UserInfo storage user = userInfo[pigsPID][msg.sender];\\n\\n        uint256 busdPending = ((user.amount * accDepositBUSDRewardPerShare) / 1e24) - user.busdRewardDebt;\\n\\n        if (busdPending > 0) {\\n            // send rewards\\n            pigsToken.transferBUSDToUser(msg.sender, busdPending);\\n        }\\n    }\\n\\n    // Safe token transfer function, just in case if rounding error causes pool to not have enough DOGS.\\n    function safeTokenTransfer(address token, address _to, uint256 _amount) internal {\\n        uint256 tokenBal = IERC20(token).balanceOf(address(this));\\n        if (_amount > tokenBal) {\\n            IERC20(token).safeTransfer(_to, tokenBal);\\n        } else {\\n            IERC20(token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    // Pay referral commission to the referrer who referred this user.\\n    function payReferralCommission(address _user, uint256 _pending) internal {\\n        if (address(dogsReferral) != address(0)) {\\n            address referrer = dogsReferral.getReferrer(_user);\\n            uint256 commissionAmount = (_pending * referralCommissionRate) / 10000;\\n\\n            if (referrer != address(0) && commissionAmount > 0) {\\n                dogsToken.mint(referrer, commissionAmount);\\n                dogsReferral.recordReferralCommission(referrer, commissionAmount);\\n            }\\n        }\\n    }\\n\\n\\n    // ************* Admin functions // *************\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(bool _isLPToken, uint256 _allocPoint, IERC20 _lpToken, IStrategy _strategy, uint256 _depositFeeBP, uint256 _harvestInterval, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\\n        _lpToken.balanceOf(address(this)); // Make sure the provided token is ERC20\\n        require(_strategy.wantLockedTotal() >= 0, \\\"add: invalid strategy\\\");\\n        require(_depositFeeBP <= 601, \\\"add: bad deposit fee\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"add: invalid harvest interval\\\");\\n        require(address(_lpToken) != address(dogsToken), \\\"add: no native token pool\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 lastRewardBlock = block.number > DDSCA.emissionStartBlock ? block.number : DDSCA.emissionStartBlock;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n        poolExistence[_lpToken] = true;\\n\\n        poolInfo.push(PoolInfo({\\n        lpToken: _lpToken,\\n        allocPoint: _allocPoint,\\n        lastRewardBlock: lastRewardBlock,\\n        accDogsPerShare: 0,\\n        depositFeeBP: _depositFeeBP,\\n        isLPToken: _isLPToken,\\n        lpSupply: 0,\\n        strategy: _strategy,\\n        harvestInterval: _harvestInterval\\n        }));\\n\\n        emit AddPool(poolInfo.length - 1, _isLPToken, _allocPoint, address(_lpToken), _depositFeeBP, _harvestInterval);\\n    }\\n\\n    // Update the given pool's DOGS allocation point and deposit fee. Can only be called by the owner.\\n    function set(uint256 _pid, uint256 _allocPoint, uint256 _depositFeeBP, uint256 _harvestInterval, bool _withUpdate) external onlyOwner {\\n        require(_allocPoint <= 1e6, \\\"set: invalid allocPoint\\\");\\n        require(_depositFeeBP <= 601, \\\"set: bad deposit fee\\\");\\n        require(_harvestInterval <= MAXIMUM_HARVEST_INTERVAL, \\\"set: invalid harvest interval\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = (totalAllocPoint - poolInfo[_pid].allocPoint) + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\\n        poolInfo[_pid].harvestInterval = _harvestInterval;\\n\\n        emit SetPool(_pid, _allocPoint, _depositFeeBP, _harvestInterval);\\n    }\\n\\n    // Update the dogs referral contract address by the owner\\n    function setReferral(IReferralSystem _dogsReferral) external onlyOwner {\\n        require(address(_dogsReferral) != address(0), \\\"dogsReferral cannot be the 0 address\\\");\\n        require(address(dogsReferral) == address(0), \\\"dogs referral address already set\\\");\\n        dogsReferral = _dogsReferral;\\n\\n        emit SetDogsReferral(address(dogsReferral));\\n    }\\n\\n    function setFarmStartBlock(uint256 _newStartBlock) external onlyOwner {\\n        DDSCA._setFarmStartBlock(_newStartBlock);\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo storage pool = poolInfo[pid];\\n            pool.lastRewardBlock = _newStartBlock;\\n        }\\n    }\\n\\n    function setPlatformAddress(address _platformAddress) external onlyOwner {\\n        require(_platformAddress != address(0), \\\"!nonzero\\\");\\n        PLATFORM_ADDRESS = _platformAddress;\\n        emit SetPlatformAddress(_platformAddress);\\n    }\\n\\n    function updateEmissions(uint256 priceInCents) external {\\n        require(msg.sender == govAddress, \\\"!gov\\\");\\n        (bool needsUpdate, DDSCA.EmissionRate rate) = DDSCA.checkIfUpdateIsNeeded(priceInCents);\\n        if (needsUpdate){\\n            // Update pools before changing the emission rate\\n            massUpdatePools();\\n            DDSCA.updateEmissions(rate);\\n        }\\n    }\\n\\n    function setGov(address _govAddress) external onlyOwner {\\n        require(_govAddress != address(0), 'zero address');\\n        govAddress = _govAddress;\\n        emit GovUpdated(govAddress);\\n    }\\n\\n\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IReferralSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IReferralSystem {\\n    /**\\n     * @dev Record referral.\\n     */\\n    function recordReferral(address user, address referrer) external;\\n\\n    /**\\n     * @dev Record referral commission.\\n     */\\n    function recordReferralCommission(address referrer, uint256 commission) external;\\n\\n    /**\\n     * @dev Get the referrer address that referred the user.\\n     */\\n    function getReferrer(address user) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/libs/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStrategy {\\n    // Total want tokens managed by strategy\\n    function wantLockedTotal() external view returns (uint256);\\n\\n    // Main want token compounding function\\n    function earn() external;\\n\\n    // Transfer want tokens MasterChefV2 -> strategy\\n    function deposit(uint256 _wantAmt)\\n    external\\n    returns (uint256);\\n\\n    // Transfer want tokens strategy -> MasterChefV2\\n    function withdraw(uint256 _wantAmt)\\n    external\\n    returns (uint256);\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/libs/IRewardsVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsVault {\\n\\n    function payoutDivs()\\n    external;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/PigsToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\n\\nimport \\\"./libs/ToolBox.sol\\\";\\nimport \\\"./libs/AddLiquidityHelper.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ncontract PigsToken is ERC20(\\\"PIGS\\\", \\\"PIGS\\\"), Ownable {\\n\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public constant busdSwapThreshold = 50 * (10 ** 18);\\n\\n    // The operator can only update the transfer tax rate\\n    address private _operator;\\n    address public masterchefDogs;\\n\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address public rewardsVaultAddress;\\n\\n    IERC20 public constant busdRewardCurrency = IERC20(busdCurrencyAddress);\\n\\n    uint256 public busdRewardBalance = 0;\\n    uint256 public busdRewardVaultPercentage = 700; //70% goes to vault\\n    uint256 public sellingTax = 30; //3% tax on selling\\n\\n    mapping(address => bool) public extraFromMap;\\n    mapping(address => bool) public extraToMap;\\n\\n    address public pigsBusdSwapPair; // The trading pair\\n\\n    ToolBox public immutable toolBox;\\n    AddLiquidityHelper public immutable addLiquidityHelper;\\n    IUniswapV2Router02 public pancakeswapRouter;\\n\\n    // Events\\n    event DepositFeeConvertedToBUSD(address indexed inputToken, uint256 inputAmount, uint256 busdInstant, uint256 busdVault);\\n    event BUSDTransferredToUser(address recipient, uint256 busdAmount);\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n    event UpdateFeeMaps(address _contract, bool fromHasExtra, bool toHasExtra);\\n    event SetPancakeswapRouter(address indexed operator, address indexed router);\\n    event MasterChefDogsSet(address indexed masterchefDogs);\\n    event RewardsVaultAddressSet(address indexed rewardsVaultAddress);\\n    event RewardsVaultPercentageSet(uint256 indexed rewardsVaultPercentage);\\n    event SellTaxSet(uint256 indexed sellTax);\\n\\n    // AB measures\\n    mapping(address => bool) private blacklist;\\n    mapping (address => bool) private _isExcludedFromLimiter;\\n\\n    bool private blacklistFeatureAllowed = true;\\n\\n    bool private transfersPaused = false;\\n    bool private transfersPausedFeatureAllowed = true;\\n\\n    bool private sellingEnabled = false;\\n    bool private sellingToggleAllowed = true;\\n\\n    bool private buySellLimiterEnabled = true;\\n    bool private buySellLimiterAllowed = true;\\n    uint256 private buySellLimitThreshold = 250e18;\\n\\n    // AB events\\n    event LimiterUserUpdated(address account, bool isLimited);\\n    event BlacklistUpdated(address account, bool blacklisted);\\n    event TransferStatusUpdate(bool isPaused);\\n    event TransferPauseFeatureBurn();\\n    event SellingToggleFeatureBurn();\\n    event BuySellLimiterUpdate(bool isEnabled, uint256 amount);\\n    event SellingEnabledToggle(bool enabled);\\n    event LimiterFeatureBurn();\\n    event BlacklistingFeatureBurn();\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"operator: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyMasterchefDogs() {\\n        require(masterchefDogs == msg.sender, \\\"masterchefDogs only\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs the Pigs Token contract.\\n     */\\n    constructor(ToolBox _toolBox, AddLiquidityHelper _addLiquidityHelper){\\n        _operator = msg.sender;\\n        emit OperatorTransferred(address(0), _operator);\\n\\n        toolBox = _toolBox;\\n        addLiquidityHelper = _addLiquidityHelper;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current operator.\\n     */\\n    function operator() external view returns (address) {\\n        return _operator;\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        require(!isBlacklisted(sender) && !isBlacklisted(recipient), 'on the naughty list');\\n        require(!transfersPaused, 'paused');\\n\\n        bool isExcluded = _isExcludedFromLimiter[sender] || _isExcludedFromLimiter[recipient];\\n\\n        if (recipient == address(pigsBusdSwapPair) && !isExcluded){\\n            require(sellingEnabled, 'selling not enabled');\\n        }\\n\\n        //if any account belongs to _isExcludedFromLimiter account then don't do buy/sell limiting, used for initial liquidty adding\\n        if (buySellLimiterEnabled && !isExcluded){\\n            if (recipient == address(pigsBusdSwapPair) || sender == address(pigsBusdSwapPair)){\\n                require(amount <= buySellLimitThreshold, 'exceed transfer max');\\n            }\\n        }\\n        // End of AB measures\\n\\n        bool toFromAddLiquidityHelper = (sender == address(addLiquidityHelper) || recipient == address(addLiquidityHelper));\\n        uint256 sendAmount = amount;\\n        uint256 taxAmount = 0;\\n        if (!toFromAddLiquidityHelper && (extraFromMap[sender] || extraToMap[recipient]) && sellingTax > 0){\\n            taxAmount = (amount * sellingTax) / 1000;\\n            sendAmount = amount - taxAmount;\\n            super._transfer(sender, BURN_ADDRESS, taxAmount);\\n        }\\n\\n        super._transfer(sender, recipient, sendAmount);\\n\\n    }\\n\\n    /**\\n     * @dev sell all of a current type of token for busd.\\n     * Can only be called by the masterChef Dogs\\n     */\\n    function convertDepositFeesToBUSD(address token, bool isLPToken, bool isLiquidation) public onlyMasterchefDogs returns (uint256) {\\n\\n        // shouldn't be trying to sell pigsToken\\n        if (token == address(this))\\n            return 0;\\n\\n        // LP tokens aren't destroyed in PigsToken, but this is so PigsToken can process\\n        // already destroyed LP fees sent to it by the DogsToken contract.\\n        if (isLPToken) {\\n            return convertDepositFeesToBUSD(IUniswapV2Pair(token).token0(), false, true) +\\n            convertDepositFeesToBUSD(IUniswapV2Pair(token).token1(), false, true);\\n        }\\n\\n        uint256 totalTokenBalance = IERC20(token).balanceOf(address(this));\\n        if (totalTokenBalance == 0){\\n            return 0;\\n        }\\n\\n        if (token == address(busdRewardCurrency)) {\\n            // In-case any busd has been sent from OTC or otherwise, report that as gained this amount.\\n            uint256 amountLiquified = totalTokenBalance - busdRewardBalance;\\n\\n            if (isLiquidation){\\n                // Split rewards that are payed out immediately and over time via vault\\n                uint256 busdVaultReward = (amountLiquified * busdRewardVaultPercentage) / 1000;\\n                uint256 busdInstantReward = amountLiquified - busdVaultReward;\\n                busdRewardCurrency.transfer(rewardsVaultAddress, busdVaultReward);\\n                busdRewardBalance = busdRewardBalance + busdInstantReward;\\n                return busdInstantReward;\\n            }\\n\\n\\n            busdRewardBalance = totalTokenBalance;\\n\\n            return amountLiquified;\\n        }\\n\\n        uint256 busdValue = toolBox.getTokenBUSDValue(totalTokenBalance, token, isLPToken);\\n\\n        if (busdValue < busdSwapThreshold)\\n            return 0;\\n\\n\\n        // generate the pair path of token -> busd.\\n        address[] memory path;\\n        if (addLiquidityHelper.shouldRouteViaBNB(token)){\\n            path = new address[](3);\\n            path[0] = token;\\n            path[1] = wbnbCurrencyAddress;\\n            path[2] = busdCurrencyAddress;\\n        } else {\\n            path = new address[](2);\\n            path[0] = token;\\n            path[1] = busdCurrencyAddress;\\n        }\\n\\n        uint256 busdPriorBalance = busdRewardCurrency.balanceOf(address(this));\\n\\n        require(IERC20(token).approve(address(pancakeswapRouter), totalTokenBalance), 'approval failed');\\n\\n        // make the swap\\n        pancakeswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            totalTokenBalance,\\n            0, // accept any amount of BUSD\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 busdProfitTotal =  busdRewardCurrency.balanceOf(address(this)) - busdPriorBalance;\\n\\n        // Split rewards that are payed out immediately and over time via vault\\n        uint256 busdVaultReward = (busdProfitTotal * busdRewardVaultPercentage) / 1000;\\n        uint256 busdInstantReward = busdProfitTotal - busdVaultReward;\\n        busdRewardCurrency.transfer(rewardsVaultAddress, busdVaultReward);\\n\\n        busdRewardBalance = busdRewardBalance + busdInstantReward;\\n\\n        emit DepositFeeConvertedToBUSD(token, totalTokenBalance, busdInstantReward, busdVaultReward);\\n\\n        return busdInstantReward;\\n    }\\n\\n    /**\\n     * @dev send busd to a user\\n     * Can only be called by the masterChef Dogs\\n     */\\n    function transferBUSDToUser(address recipient, uint256 amount) external onlyMasterchefDogs {\\n        require(busdRewardCurrency.balanceOf(address(this)) >= amount, \\\"accounting error, transferring more busd out than available\\\");\\n        require(busdRewardCurrency.transfer(recipient, amount), \\\"transfer failed!\\\");\\n\\n        busdRewardBalance = busdRewardBalance - amount;\\n\\n        emit BUSDTransferredToUser(recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Update the pancakeswap router.\\n     * Can only be called by the current operator.\\n     */\\n    function updatePancakeswapRouter(address _router) external onlyOperator {\\n        require(_router != address(0), \\\"!0\\\");\\n        require(address(pancakeswapRouter) == address(0), \\\"!unset\\\");\\n        pancakeswapRouter = IUniswapV2Router02(_router);\\n\\n        pigsBusdSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(address(this), busdCurrencyAddress);\\n        require(address(pigsBusdSwapPair) != address(0), \\\"busd pair !exist\\\");\\n\\n        emit SetPancakeswapRouter(msg.sender, address(pancakeswapRouter));\\n    }\\n\\n    /**\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\n     * Can only be called by the current operator.\\n     */\\n    function transferOperator(address newOperator) external onlyOperator {\\n        require(newOperator != address(0), \\\"transferOperator: new operator is the zero address\\\");\\n        emit OperatorTransferred(_operator, newOperator);\\n        _operator = newOperator;\\n    }\\n\\n    /**\\n * @dev Update the excludeFromMap\\n     * Can only be called by the current operator.\\n     */\\n    function updateFeeMaps(address _contract, bool fromHasExtra, bool toHasExtra) external onlyOperator {\\n        extraFromMap[_contract] = fromHasExtra;\\n        extraToMap[_contract] = toHasExtra;\\n\\n        emit UpdateFeeMaps(_contract, fromHasExtra, toHasExtra);\\n    }\\n\\n    function setMasterChefDogs(address _masterchefDogs) external onlyOperator {\\n        require(address(_masterchefDogs) != address(0), \\\"masterchefDogs cannot be the 0 address\\\");\\n        require(address(masterchefDogs) == address(0), \\\"masterchefDogs address already set\\\");\\n        masterchefDogs = _masterchefDogs;\\n\\n        emit MasterChefDogsSet(_masterchefDogs);\\n    }\\n\\n    function setRewardsVaultAddress(address _vaultAddress) external onlyOperator {\\n        require(address(_vaultAddress) != address(0), \\\"vaultAddress cannot be the 0 address\\\");\\n        require(address(rewardsVaultAddress) == address(0), \\\"rewardsVault address already set\\\");\\n        rewardsVaultAddress = _vaultAddress;\\n\\n        emit RewardsVaultAddressSet(_vaultAddress);\\n    }\\n\\n    function setRewardsVaultPercentage(uint256 _rewardsPercentage) external onlyOperator {\\n        require(_rewardsPercentage < 1000, \\\"max rewards exceeded\\\");\\n        busdRewardVaultPercentage = _rewardsPercentage;\\n        emit RewardsVaultPercentageSet(_rewardsPercentage);\\n    }\\n\\n    function setSellTax(uint256 _selltax) external onlyOperator {\\n        require(_selltax <= 100, \\\"sell tax exceeded\\\");\\n        sellingTax = _selltax;\\n        emit SellTaxSet(_selltax);\\n    }\\n\\n    // AB measures\\n    function toggleExcludedFromLimiterUser(address account, bool isExcluded) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        _isExcludedFromLimiter[account] = isExcluded;\\n        emit LimiterUserUpdated(account, isExcluded);\\n    }\\n\\n    function toggleBuySellLimiter(bool isEnabled, uint256 amount) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        buySellLimiterEnabled = isEnabled;\\n        buySellLimitThreshold = amount;\\n        emit BuySellLimiterUpdate(isEnabled, amount);\\n    }\\n\\n    function burnLimiterFeature() external onlyOperator {\\n        buySellLimiterAllowed = false;\\n        emit LimiterFeatureBurn();\\n    }\\n\\n    function isBlacklisted(address account) public view returns(bool) {\\n        return blacklist[account];\\n    }\\n\\n    function toggleBlacklistUser(address account, bool blacklisted) external onlyOperator {\\n        require(blacklistFeatureAllowed, 'feature burned');\\n        blacklist[account] = blacklisted;\\n        emit BlacklistUpdated(account, blacklisted);\\n    }\\n\\n    function burnBlacklistingFeature() external onlyOperator {\\n        blacklistFeatureAllowed = false;\\n        emit BlacklistingFeatureBurn();\\n    }\\n\\n    function toggleSellingEnabled(bool enabled) external onlyOperator {\\n        require(sellingToggleAllowed, 'feature destroyed');\\n        sellingEnabled = enabled;\\n        emit SellingEnabledToggle(enabled);\\n    }\\n\\n    function burnToggleSellFeature() external onlyOperator {\\n        sellingToggleAllowed = false;\\n        emit SellingToggleFeatureBurn();\\n    }\\n\\n    function toggleTransfersPaused(bool isPaused) external onlyOperator {\\n        require(transfersPausedFeatureAllowed, 'feature destroyed');\\n        transfersPaused = isPaused;\\n        emit TransferStatusUpdate(isPaused);\\n    }\\n\\n    function burnTogglePauseFeature() external onlyOperator {\\n        transfersPausedFeatureAllowed = false;\\n        emit TransferPauseFeatureBurn();\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/DogsToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./libs/AddLiquidityHelper.sol\\\";\\nimport \\\"./libs/ToolBox.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract DogsToken is ERC20(\\\"DOGS\\\", \\\"DOGS\\\"), Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public transferTaxRate = 600; // Transfer tax rate in basis points. (default 6%)\\n    uint256 public extraTransferTaxRate = 300; // Extra transfer tax rate in basis points. (default 3.00%)\\n\\n    uint256 public constant MAXIMUM_TRANSFER_TAX_RATE = 1001; // Max transfer tax rate: 10.01%.\\n\\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    uint256 public constant busdSwapThreshold = 50 * (10 ** 18);\\n\\n    bool public swapAndLiquifyEnabled = true; // Automatic swap and liquify enabled\\n\\n    uint256 public constant minDogsAmountToLiquify = 40 * (10 ** 18);\\n    uint256 public constant minBUSDAmountToLiquify = 200 * (10 ** 18);\\n\\n    uint256 public vaultLiqSplit = 2;\\n\\n    IUniswapV2Router02 public pancakeswapRouter;\\n\\n    address public dogsBusdSwapPair; // The trading pair\\n\\n    bool private _inSwapAndLiquify;  // In swap and liquify\\n\\n    AddLiquidityHelper public immutable addLiquidityHelper;\\n    ToolBox public immutable toolBox;\\n    IERC20 public constant busdRewardCurrency = IERC20(busdCurrencyAddress);\\n    address public immutable pigsToken;\\n    address public immutable rewardsVaultAddress;\\n\\n    mapping(address => bool) public excludeFromMap;\\n    mapping(address => bool) public excludeToMap;\\n\\n    mapping(address => bool) public extraFromMap;\\n    mapping(address => bool) public extraToMap;\\n\\n    event SetSwapAndLiquifyEnabled(bool swapAndLiquifyEnabled);\\n    event TransferFeeChanged(uint256 txnFee, uint256 extraTxnFee);\\n    event UpdateFeeMaps(address _contract, bool fromExcluded, bool toExcluded, bool fromHasExtra, bool toHasExtra);\\n    event SetPancakeswapRouter(address pancakeswapRouter, address dogsBusdSwapPair);\\n    event SetOperator(address operator);\\n    event UpdateVaultLiqSplit(uint256 liqVaultSplit);\\n\\n    // The operator can only update the transfer tax rate\\n    address private _operator;\\n\\n    // AB measures\\n    mapping(address => bool) private blacklist;\\n    mapping (address => bool) private _isExcludedFromLimiter;\\n\\n    bool private blacklistFeatureAllowed = true;\\n\\n    bool private transfersPaused = false;\\n    bool private transfersPausedFeatureAllowed = true;\\n\\n    bool private sellingEnabled = false;\\n    bool private sellingToggleAllowed = true;\\n\\n    bool private buySellLimiterEnabled = true;\\n    bool private buySellLimiterAllowed = true;\\n    uint256 private buySellLimitThreshold = 500e18;\\n\\n    // AB events\\n    event LimiterUserUpdated(address account, bool isLimited);\\n    event BlacklistUpdated(address account, bool blacklisted);\\n    event TransferStatusUpdate(bool isPaused);\\n    event TransferPauseFeatureBurn();\\n    event SellingToggleFeatureBurn();\\n    event BuySellLimiterUpdate(bool isEnabled, uint256 amount);\\n    event SellingEnabledToggle(bool enabled);\\n    event LimiterFeatureBurn();\\n    event BlacklistingFeatureBurn();\\n\\n    modifier onlyOperator() {\\n        require(_operator == msg.sender, \\\"!operator\\\");\\n        _;\\n    }\\n\\n    modifier lockTheSwap {\\n        _inSwapAndLiquify = true;\\n        _;\\n        _inSwapAndLiquify = false;\\n    }\\n\\n    modifier transferTaxFree {\\n        uint256 _transferTaxRate = transferTaxRate;\\n        uint256 _extraTransferTaxRate = extraTransferTaxRate;\\n        transferTaxRate = 0;\\n        extraTransferTaxRate = 0;\\n        _;\\n        transferTaxRate = _transferTaxRate;\\n        extraTransferTaxRate = _extraTransferTaxRate;\\n    }\\n\\n    /**\\n     * @notice Constructs the Dogs Token contract.\\n     */\\n    constructor(address _pigsToken, AddLiquidityHelper _addLiquidityHelper, ToolBox _toolBox, address _rewardsVaultAddress) {\\n        pigsToken = _pigsToken;\\n        addLiquidityHelper = _addLiquidityHelper;\\n        toolBox = _toolBox;\\n        _operator = msg.sender;\\n\\n        rewardsVaultAddress = _rewardsVaultAddress;\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @dev overrides transfer function to meet tokenomics of Dogs Token\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n        require(!isBlacklisted(sender) && !isBlacklisted(recipient), 'on the naughty list');\\n        require(!transfersPaused, 'paused');\\n\\n        bool isExcluded = _isExcludedFromLimiter[sender] || _isExcludedFromLimiter[recipient];\\n\\n        if (recipient == address(dogsBusdSwapPair) && !isExcluded){\\n            require(sellingEnabled, 'selling not enabled');\\n        }\\n\\n        //if any account belongs to _isExcludedFromLimiter account then don't do buy/sell limiting, used for initial liquidty adding\\n        if (buySellLimiterEnabled && !isExcluded){\\n            if (recipient == address(dogsBusdSwapPair) || sender == address(dogsBusdSwapPair)){\\n                require(amount <= buySellLimitThreshold, 'exceed transfer max');\\n            }\\n        }\\n        // End of AB measures\\n\\n\\n        bool toFromAddLiquidityHelper = (sender == address(addLiquidityHelper) || recipient == address(addLiquidityHelper));\\n        // swap and liquify\\n        if (\\n            swapAndLiquifyEnabled == true\\n            && _inSwapAndLiquify == false\\n            && address(pancakeswapRouter) != address(0)\\n            && !toFromAddLiquidityHelper\\n        && sender != dogsBusdSwapPair\\n        && sender != owner()\\n        ) {\\n            swapAndLiquify();\\n        }\\n\\n        if (toFromAddLiquidityHelper ||\\n        recipient == BURN_ADDRESS || (transferTaxRate == 0 && extraTransferTaxRate == 0) ||\\n        excludeFromMap[sender] || excludeToMap[recipient]) {\\n            super._transfer(sender, recipient, amount);\\n        } else {\\n            // default tax is 6% of every transfer, but extra 3% for dumping tax. 3% dump tax gets burned\\n            uint256 liquidityAmount = amount * transferTaxRate / 10000;\\n            uint256 burnAmount = amount * ((extraFromMap[sender] || extraToMap[recipient]) ? extraTransferTaxRate : 0) / 10000;\\n\\n            // default 94% of transfer sent to recipient (6% tax)\\n            // 91% of transfer sent to recipient in case of selling (6% tax + 3% dump tax)\\n            uint256 sendAmount = amount - liquidityAmount - burnAmount;\\n\\n            require(amount == sendAmount + liquidityAmount + burnAmount, \\\"sum error\\\");\\n\\n            super._transfer(sender, address(this), liquidityAmount);\\n            super._transfer(sender, recipient, sendAmount);\\n            if (burnAmount > 0){\\n                super._transfer(sender, BURN_ADDRESS, burnAmount);\\n            }\\n            amount = sendAmount;\\n        }\\n    }\\n\\n    /// @dev Swap and liquify\\n    function swapAndLiquify() private lockTheSwap transferTaxFree {\\n        uint256 dogsBalance = ERC20(address(this)).balanceOf(address(this));\\n        uint256 busdBalance = ERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n        if (dogsBalance >= minDogsAmountToLiquify || busdBalance >= minBUSDAmountToLiquify) {\\n            ERC20(address(this)).transfer(address(addLiquidityHelper), dogsBalance);\\n\\n            ERC20(address(busdCurrencyAddress)).transfer(address(rewardsVaultAddress), busdBalance / vaultLiqSplit);\\n            ERC20(address(busdCurrencyAddress)).transfer(address(addLiquidityHelper), busdBalance - (busdBalance / vaultLiqSplit));\\n\\n            // send all tokens to add liquidity with, we are refunded any that aren't used.\\n            addLiquidityHelper.dogsBUSDLiquidityWithBuyBack(BURN_ADDRESS);\\n        }\\n    }\\n\\n    /**\\n     * @dev un-enchant the lp token into its original components.\\n     */\\n    function swapLpTokensForFee(address token, uint256 amount) internal {\\n        require(IERC20(token).approve(address(pancakeswapRouter), amount), '!approved');\\n\\n        IUniswapV2Pair lpToken = IUniswapV2Pair(token);\\n        IERC20 token0 = IERC20(lpToken.token0());\\n        IERC20 token1 = IERC20(lpToken.token1());\\n\\n        uint256 token0BeforeLiquidation = token0.balanceOf(address(this));\\n        uint256 token1BeforeLiquidation = token1.balanceOf(address(this));\\n\\n        // make the swap\\n        pancakeswapRouter.removeLiquidity(\\n            address(token0),\\n            address(token1),\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 token0FromLiquidation = token0.balanceOf(address(this)) - token0BeforeLiquidation;\\n        uint256 token1FromLiquidation = token1.balanceOf(address(this)) - token1BeforeLiquidation;\\n\\n        // send pigsToken all of 1 half of the LP to be converted to BUSD later.\\n        token0.safeTransfer(address(pigsToken), token0FromLiquidation);\\n\\n        // send pigsToken 50% share of the other 50% to give pigsToken 75% in total.\\n        token1.safeTransfer(address(pigsToken), token1FromLiquidation/2);\\n\\n        swapDepositFeeForTokensInternal(address(token1), false, busdCurrencyAddress);\\n    }\\n\\n    /**\\n     * @dev sell all of a current type of token for BUSD, to be used in dogs liquidity later.\\n     */\\n    function swapDepositFeeForBUSD(address token, bool isLPToken) external onlyOwner {\\n        // If dogs or busd already no need to do anything.\\n\\n        if (token == address(this) || token == busdCurrencyAddress)\\n            return;\\n\\n        uint256 busdValue = toolBox.getTokenBUSDValue(IERC20(token).balanceOf(address(this)), token, isLPToken);\\n\\n        // only swap if a certain busd value\\n        if (busdValue < busdSwapThreshold)\\n            return;\\n\\n        swapDepositFeeForTokensInternal(token, isLPToken, busdCurrencyAddress);\\n    }\\n\\n    function swapDepositFeeForTokensInternal(address token, bool isLPToken, address toToken) internal {\\n        uint256 totalTokenBalance = IERC20(token).balanceOf(address(this));\\n\\n        // can't trade to dogs inside of dogs anyway\\n        if (token == toToken || totalTokenBalance == 0 || toToken == address(this))\\n            return;\\n\\n        if (isLPToken) {\\n            swapLpTokensForFee(token, totalTokenBalance);\\n            return;\\n        }\\n\\n        require(IERC20(token).approve(address(pancakeswapRouter), totalTokenBalance), \\\"!approved\\\");\\n\\n        address[] memory path;\\n        if (addLiquidityHelper.shouldRouteViaBNB(token)){\\n            path = new address[](3);\\n            path[0] = token;\\n            path[1] = wbnbCurrencyAddress;\\n            path[2] = toToken;\\n        } else {\\n            path = new address[](2);\\n            path[0] = token;\\n            path[1] = toToken;\\n        }\\n\\n        try\\n        // make the swap\\n        pancakeswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            totalTokenBalance,\\n            0, // accept any amount of tokens\\n            path,\\n            address(this),\\n            block.timestamp\\n        )\\n        { /* suceeded */ } catch { /* failed, but we avoided reverting */ }\\n\\n        // Unfortunately can't swap directly to dogs inside of dogs (Uniswap INVALID_TO Assert, boo).\\n        // Also dont want to add an extra swap here.\\n        // Will leave as BUSD and make the dogs Txn AMM utilise available BUSD first.\\n    }\\n\\n    /**\\n     * @dev Update the swapAndLiquifyEnabled.\\n     * Can only be called by the current operator.\\n     */\\n    function updateSwapAndLiquifyEnabled(bool _enabled) external onlyOperator {\\n        swapAndLiquifyEnabled = _enabled;\\n\\n        emit SetSwapAndLiquifyEnabled(swapAndLiquifyEnabled);\\n    }\\n\\n    /**\\n     * @dev Update the transfer tax rate.\\n     * Can only be called by the current operator.\\n     */\\n    function updateTransferTaxRate(uint256 _transferTaxRate, uint256 _extraTransferTaxRate) external onlyOperator {\\n        require(_transferTaxRate + _extraTransferTaxRate  <= MAXIMUM_TRANSFER_TAX_RATE, \\\"!valid\\\");\\n        transferTaxRate = _transferTaxRate;\\n        extraTransferTaxRate = _extraTransferTaxRate;\\n\\n        emit TransferFeeChanged(transferTaxRate, extraTransferTaxRate);\\n    }\\n\\n    /**\\n     * @dev Update the excludeFromMap\\n     * Can only be called by the current operator.\\n     */\\n    function updateFeeMaps(address _contract, bool fromExcluded, bool toExcluded, bool fromHasExtra, bool toHasExtra) external onlyOperator {\\n        excludeFromMap[_contract] = fromExcluded;\\n        excludeToMap[_contract] = toExcluded;\\n        extraFromMap[_contract] = fromHasExtra;\\n        extraToMap[_contract] = toHasExtra;\\n\\n        emit UpdateFeeMaps(_contract, fromExcluded, toExcluded, fromHasExtra, toHasExtra);\\n    }\\n\\n    /**\\n     * @dev Update the swap router.\\n     * Can only be called by the current operator.\\n     */\\n    function updatePancakeswapRouter(address _router) external onlyOperator {\\n        require(_router != address(0), \\\"!0\\\");\\n        require(address(pancakeswapRouter) == address(0), \\\"!unset\\\");\\n\\n        pancakeswapRouter = IUniswapV2Router02(_router);\\n        dogsBusdSwapPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(address(this), busdCurrencyAddress);\\n\\n        require(address(dogsBusdSwapPair) != address(0), \\\"busd pair !exist\\\");\\n\\n        emit SetPancakeswapRouter(address(pancakeswapRouter), dogsBusdSwapPair);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current operator.\\n     */\\n    function operator() external view returns (address) {\\n        return _operator;\\n    }\\n\\n    /**\\n     * @dev Transfers operator of the contract to a new account (`newOperator`).\\n     * Can only be called by the current operator.\\n     */\\n    function transferOperator(address newOperator) external onlyOperator {\\n        require(newOperator != address(0), \\\"!!0\\\");\\n        _operator = newOperator;\\n\\n        emit SetOperator(_operator);\\n    }\\n\\n    function updateVaultLiqSplit(uint256 _vaultLiqSplit) external onlyOperator {\\n        require(_vaultLiqSplit > 1, 'invalid');\\n        vaultLiqSplit = _vaultLiqSplit;\\n        emit UpdateVaultLiqSplit(vaultLiqSplit);\\n    }\\n\\n    // AB measures\\n    function toggleExcludedFromLimiterUser(address account, bool isExcluded) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        _isExcludedFromLimiter[account] = isExcluded;\\n        emit LimiterUserUpdated(account, isExcluded);\\n    }\\n\\n    function toggleBuySellLimiter(bool isEnabled, uint256 amount) external onlyOperator {\\n        require(buySellLimiterAllowed, 'feature destroyed');\\n        buySellLimiterEnabled = isEnabled;\\n        buySellLimitThreshold = amount;\\n        emit BuySellLimiterUpdate(isEnabled, amount);\\n    }\\n\\n    function burnLimiterFeature() external onlyOperator {\\n        buySellLimiterAllowed = false;\\n        emit LimiterFeatureBurn();\\n    }\\n\\n    function isBlacklisted(address account) public view returns(bool) {\\n        return blacklist[account];\\n    }\\n\\n    function toggleBlacklistUser(address account, bool blacklisted) external onlyOperator {\\n        require(blacklistFeatureAllowed, 'feature burned');\\n        blacklist[account] = blacklisted;\\n        emit BlacklistUpdated(account, blacklisted);\\n    }\\n\\n    function burnBlacklistingFeature() external onlyOperator {\\n        blacklistFeatureAllowed = false;\\n        emit BlacklistingFeatureBurn();\\n    }\\n\\n    function toggleSellingEnabled(bool enabled) external onlyOperator {\\n        require(sellingToggleAllowed, 'feature destroyed');\\n        sellingEnabled = enabled;\\n        emit SellingEnabledToggle(enabled);\\n    }\\n\\n    function burnToggleSellFeature() external onlyOperator {\\n        sellingToggleAllowed = false;\\n        emit SellingToggleFeatureBurn();\\n    }\\n\\n    function toggleTransfersPaused(bool isPaused) external onlyOperator {\\n        require(transfersPausedFeatureAllowed, 'feature destroyed');\\n        transfersPaused = isPaused;\\n        emit TransferStatusUpdate(isPaused);\\n    }\\n\\n    function burnTogglePauseFeature() external onlyOperator {\\n        transfersPausedFeatureAllowed = false;\\n        emit TransferPauseFeatureBurn();\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libs/DDSCA.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// DYNAMIC DECENTRALIZED SUPPLY CONTROL ALGORITHM\\nabstract contract DDSCA is Ownable {\\n\\n    bool public isInitialized;\\n\\n    IERC20 public token;\\n    IERC20 public constant busdRewardCurrency = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\\n\\n    uint256 public tokenPerBlock;\\n    uint256 public maxEmissionRate;\\n    uint256 public emissionStartBlock;\\n    uint256 public emissionEndBlock = type(uint256).max;\\n\\n    // Dynamic emissions\\n    uint256 public topPriceInCents    = 800;  // 8$\\n    uint256 public bottomPriceInCents = 100;  // 1$\\n\\n    enum EmissionRate {SLOW, MEDIUM, FAST, FASTEST}\\n    EmissionRate public ActiveEmissionIndex = EmissionRate.FASTEST;\\n\\n    event UpdateDDSCAPriceRange(uint256 topPrice, uint256 bottomPrice);\\n    event updatedDDSCAMaxEmissionRate(uint256 maxEmissionRate);\\n    event SetFarmStartBlock(uint256 startBlock);\\n    event SetFarmEndBlock(uint256 endBlock);\\n\\n    function initialize(IERC20 _tokenAddress, uint256 _tokenPerBlock, uint256 _maxTokenPerBlock, uint256 _startBlock) public onlyOwner {\\n        require(!isInitialized, 'already init');\\n        token = _tokenAddress;\\n        tokenPerBlock = _tokenPerBlock;\\n        maxEmissionRate = _maxTokenPerBlock;\\n        emissionStartBlock = _startBlock;\\n        isInitialized = true;\\n    }\\n\\n    // Called externally by bot\\n    function checkIfUpdateIsNeeded(uint256 priceInCents) virtual internal view returns(bool, EmissionRate) {\\n\\n        EmissionRate _emissionRate;\\n\\n        if (!isInitialized){\\n            return(false, _emissionRate);\\n        }\\n\\n        bool isOverATH = priceInCents > topPriceInCents;\\n        // if price is over ATH, set to fastest\\n        if (isOverATH){\\n            _emissionRate = EmissionRate.FASTEST;\\n        } else {\\n            _emissionRate = getEmissionStage(priceInCents);\\n        }\\n\\n        // No changes, no need to update\\n        if (_emissionRate == ActiveEmissionIndex){\\n            return(false, _emissionRate);\\n        }\\n\\n        // Means its a downward movement, and it changed a stage\\n        if (_emissionRate < ActiveEmissionIndex){\\n            return(true, _emissionRate);\\n        }\\n\\n        // Check if its a upward movement\\n        if (_emissionRate > ActiveEmissionIndex){\\n\\n            uint256 athExtra = 0;\\n            if (isOverATH){\\n                athExtra = 1;\\n            }\\n\\n            // Check if it moved up by two stages\\n            if ((uint256(_emissionRate) + athExtra) - uint256(ActiveEmissionIndex) >= 2){\\n                // price has moved 2 ranges from current, so update\\n                _emissionRate = EmissionRate(uint256(_emissionRate) + athExtra - 1 );\\n                return(true, _emissionRate);\\n            }\\n        }\\n        return(false, _emissionRate);\\n\\n    }\\n\\n    function updateEmissions(EmissionRate _newEmission) virtual internal {\\n        ActiveEmissionIndex = _newEmission;\\n        tokenPerBlock = (maxEmissionRate / 4) * (uint256(_newEmission) + 1);\\n    }\\n\\n    function getEmissionStage(uint256 currentPriceCents) public view returns (EmissionRate){\\n\\n        if (currentPriceCents > topPriceInCents){\\n            return EmissionRate.FASTEST;\\n        }\\n\\n        // Prevent function from underflowing when subtracting currentPriceCents - bottomPriceInCents\\n        if (currentPriceCents < bottomPriceInCents){\\n            currentPriceCents = bottomPriceInCents;\\n        }\\n        uint256 percentageChange = ((currentPriceCents - bottomPriceInCents ) * 1000) / (topPriceInCents - bottomPriceInCents);\\n        percentageChange = 1000 - percentageChange;\\n\\n        if (percentageChange <= 250){\\n            return EmissionRate.FASTEST;\\n        }\\n        if (percentageChange <= 500 && percentageChange > 250){\\n            return EmissionRate.FAST;\\n        }\\n        if (percentageChange <= 750 && percentageChange > 500){\\n            return EmissionRate.MEDIUM;\\n        }\\n\\n        return EmissionRate.SLOW;\\n    }\\n\\n    function updateDDSCAPriceRange(uint256 _topPrice, uint256 _bottomPrice) external onlyOwner {\\n        require(_topPrice > _bottomPrice, \\\"top < bottom price\\\");\\n        topPriceInCents = _topPrice;\\n        bottomPriceInCents = _bottomPrice;\\n        emit UpdateDDSCAPriceRange(topPriceInCents, bottomPriceInCents);\\n    }\\n\\n    function updateDDSCAMaxEmissionRate(uint256 _maxEmissionRate) external onlyOwner {\\n        require(_maxEmissionRate > 0, \\\"_maxEmissionRate !> 0\\\");\\n        require(_maxEmissionRate <= 10 ether, \\\"_maxEmissionRate !\\\");\\n        maxEmissionRate = _maxEmissionRate;\\n        emit updatedDDSCAMaxEmissionRate(_maxEmissionRate);\\n    }\\n\\n    function _setFarmStartBlock(uint256 _newStartBlock) virtual internal {\\n        require(_newStartBlock > block.number, \\\"must be in the future\\\");\\n        require(block.number < emissionStartBlock, \\\"farm has already started\\\");\\n        emissionStartBlock = _newStartBlock;\\n        emit SetFarmStartBlock(_newStartBlock);\\n    }\\n\\n    function setFarmEndBlock(uint256 _newEndBlock) external onlyOwner {\\n        require(_newEndBlock > block.number, \\\"must be in the future\\\");\\n        emissionEndBlock = _newEndBlock;\\n        emit SetFarmEndBlock(_newEndBlock);\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-ERC20Permit.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\\n * will significantly increase the base gas cost of transfers.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is ERC20Permit {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\\n     * It is but NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `blockNumber` must have been already mined\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\n        //\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\n        // the same.\\n        uint256 high = ckpts.length;\\n        uint256 low = 0;\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (ckpts[mid].fromBlock > blockNumber) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        return high == 0 ? 0 : ckpts[high - 1].votes;\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\\n        } else {\\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ToolBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\ncontract ToolBox {\\n\\n    IUniswapV2Router02 public constant pancakeswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    IUniswapV2Factory public constant pancakeswapFactory = IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\n    address public constant busdAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    // Stable coin addresses\\n    address public constant usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\\n    address public constant usdcAddress = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\\n    address public constant tusdAddress = 0x23396cF899Ca06c4472205fC903bDB4de249D6fC;\\n    address public constant daiAddress = 0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3;\\n\\n    function convertToTargetValueFromPair(IUniswapV2Pair pair, uint256 sourceTokenAmount, address targetAddress) public view returns (uint256) {\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        require(token0 == targetAddress || token1 == targetAddress, \\\"one of the pairs must be the targetAddress\\\");\\n        if (sourceTokenAmount == 0)\\n            return 0;\\n\\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\\n        if (res0 == 0 || res1 == 0)\\n            return 0;\\n\\n        if (token0 == targetAddress)\\n            return (res0 * sourceTokenAmount) / res1;\\n        else\\n            return (res1 * sourceTokenAmount) / res0;\\n    }\\n\\n    function getTokenBUSDValue(uint256 tokenBalance, address token, bool isLPToken) external view returns (uint256) {\\n        if (token == address(busdAddress)){\\n            return tokenBalance;\\n        }\\n\\n        // lp type\\n        if (isLPToken) {\\n            IUniswapV2Pair lpToken = IUniswapV2Pair(token);\\n            IERC20 token0 = IERC20(lpToken.token0());\\n            IERC20 token1 = IERC20(lpToken.token1());\\n            uint256 totalSupply = lpToken.totalSupply();\\n\\n            if (totalSupply == 0){\\n                return 0;\\n            }\\n\\n            // If lp contains stablecoin, we can take a short-cut\\n            if (isStablecoin(address(token0))) {\\n                return (token0.balanceOf(address(lpToken)) * tokenBalance * 2) / totalSupply;\\n            } else if (isStablecoin(address(token1))){\\n                return (token1.balanceOf(address(lpToken)) * tokenBalance * 2) / totalSupply;\\n            }\\n        }\\n\\n        // Only used for lp type tokens.\\n        address lpTokenAddress = token;\\n\\n\\n        // If token0 or token1 is wbnb, use that, else use token0.\\n        if (isLPToken) {\\n            token = IUniswapV2Pair(token).token0() == wbnbAddress ? wbnbAddress :\\n            (IUniswapV2Pair(token).token1() == wbnbAddress ? wbnbAddress : IUniswapV2Pair(token).token0());\\n        }\\n\\n        // if it is an LP token we work with all of the reserve in the LP address to scale down later.\\n        uint256 tokenAmount = (isLPToken) ? IERC20(token).balanceOf(lpTokenAddress) : tokenBalance;\\n\\n        uint256 busdEquivalentAmount = 0;\\n\\n        // As we arent working with busd at this point (early return), this is okay.\\n        IUniswapV2Pair busdPair = IUniswapV2Pair(pancakeswapFactory.getPair(address(busdAddress), token));\\n        if (address(busdPair) == address(0)){\\n            return 0;\\n        }\\n        busdEquivalentAmount = convertToTargetValueFromPair(busdPair, tokenAmount, busdAddress);\\n\\n        if (isLPToken)\\n            return (busdEquivalentAmount * tokenBalance * 2) / IUniswapV2Pair(lpTokenAddress).totalSupply();\\n        else\\n            return busdEquivalentAmount;\\n    }\\n\\n    function isStablecoin(address _tokenAddress) public view returns(bool){\\n        return _tokenAddress == busdAddress ||\\n        _tokenAddress == usdtAddress ||\\n        _tokenAddress == usdcAddress ||\\n        _tokenAddress == tusdAddress ||\\n        _tokenAddress == daiAddress;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libs/AddLiquidityHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// AddLiquidityHelper, allows anyone to add or remove Dogs liquidity tax free\\n// Also allows the Dogs Token to do buy backs tax free via an external contract.\\ncontract AddLiquidityHelper is ReentrancyGuard, Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    address public dogsTokenAddress;\\n    address public pigsTokenAddress;\\n\\n    IUniswapV2Router02 public constant pancakeswapRouter = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address public constant busdCurrencyAddress = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\n    address public constant wbnbCurrencyAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    address public dogsBusdPair;\\n\\n    mapping (address => bool) public viaWBNBTokens;\\n\\n    receive() external payable {}\\n\\n    event SetDogsAddresses(address dogsTokenAddress, address dogsBusdPair);\\n    event SetPigsAddresses(address pigsTokenAddress);\\n    event SetRouteTokenViaBNB(address tokenAddress, bool shouldRoute);\\n\\n\\n    modifier onlyDogsToken() {\\n        require(dogsTokenAddress == msg.sender, \\\"!dogsToken\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs the AddLiquidityHelper contract.\\n     */\\n    constructor() {\\n\\n    }\\n\\n    function setRouteViaBNBToken(address _token, bool _viaWbnb) external onlyOwner {\\n        viaWBNBTokens[_token] = _viaWbnb;\\n        emit SetRouteTokenViaBNB(_token, _viaWbnb);\\n    }\\n\\n    function shouldRouteViaBNB(address _token) public view returns (bool){\\n        return viaWBNBTokens[_token];\\n    }\\n\\n    function dogsBUSDLiquidityWithBuyBack(address lpHolder) external onlyDogsToken nonReentrant {\\n        (uint256 res0, uint256 res1, ) = IUniswapV2Pair(dogsBusdPair).getReserves();\\n\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        uint256 busdTokenBalance;\\n\\n        if (res0 != 0 && res1 != 0) {\\n            // making busd res0...\\n            if (IUniswapV2Pair(dogsBusdPair).token0() == dogsTokenAddress){\\n                (res1, res0) = (res0, res1);\\n            }\\n\\n            uint256 totalBUSDNeeded = (res0 * dogsTokenBalance) / res1;\\n\\n            uint256 existingBUSD = ERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n            uint256 unmatchedDogs = 0;\\n\\n            if (existingBUSD < totalBUSDNeeded) {\\n                // calculate how much dogs will match up with our existing busd.\\n                uint256 matchedDogs = (res1 * existingBUSD) / res0;\\n                if (dogsTokenBalance >= matchedDogs)\\n                    unmatchedDogs = dogsTokenBalance - matchedDogs;\\n            } else if (existingBUSD > totalBUSDNeeded) {\\n                // use excess BUSD for DOGS buy back\\n                uint256 excessBUSD = existingBUSD - totalBUSDNeeded;\\n\\n                if (excessBUSD / 2 > 0) {\\n                    // swap half of the excess busd for lp to be balanced\\n                    swapBUSDForTokens(excessBUSD / 2, dogsTokenAddress);\\n                }\\n            }\\n\\n            // swap tokens for BUSD\\n            if (unmatchedDogs / 2 > 0){\\n                swapTokensForBUSD(dogsTokenAddress, unmatchedDogs / 2);\\n            }\\n\\n            dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n            busdTokenBalance = ERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n            // approve token transfer to cover all possible scenarios\\n            ERC20(dogsTokenAddress).approve(address(pancakeswapRouter), dogsTokenBalance);\\n            ERC20(busdCurrencyAddress).approve(address(pancakeswapRouter), busdTokenBalance);\\n\\n            pancakeswapRouter.addLiquidity(\\n                dogsTokenAddress,\\n                busdCurrencyAddress,\\n                    dogsTokenBalance,\\n                    busdTokenBalance,\\n                0, // slippage is unavoidable\\n                0, // slippage is unavoidable\\n                lpHolder,\\n                block.timestamp\\n            );\\n\\n        }\\n\\n        dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n        busdTokenBalance = ERC20(busdCurrencyAddress).balanceOf(address(this));\\n\\n        if (dogsTokenBalance > 0){\\n            ERC20(dogsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n        }\\n        if (busdTokenBalance > 0){\\n            ERC20(busdCurrencyAddress).transfer(msg.sender, busdTokenBalance);\\n        }\\n    }\\n\\n    function addDogsETHLiquidity(uint256 nativeAmount) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(dogsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidityETH{value: msg.value}(\\n            dogsTokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n                msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (address(this).balance > 0) {\\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\\n            payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        }\\n\\n        if (ERC20(dogsTokenAddress).balanceOf(address(this)) > 0)\\n            ERC20(dogsTokenAddress).transfer(msg.sender, ERC20(dogsTokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function addDogsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 nativeAmount) external nonReentrant {\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(dogsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(baseTokenAddress).approve(address(pancakeswapRouter), baseAmount);\\n        ERC20(dogsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidity(\\n            baseTokenAddress,\\n            dogsTokenAddress,\\n            baseAmount,\\n            nativeAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint256 baseTokenBalance = ERC20(baseTokenAddress).balanceOf(address(this));\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        if (baseTokenBalance > 0)\\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, baseTokenBalance);\\n\\n        if (dogsTokenBalance > 0)\\n            ERC20(dogsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n    }\\n\\n    function removeDogsLiquidity(address baseTokenAddress, uint256 liquidity) external nonReentrant {\\n        address lpTokenAddress = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(baseTokenAddress, dogsTokenAddress);\\n        require(lpTokenAddress != address(0), \\\"pair hasn't been created yet, so can't remove liquidity!\\\");\\n\\n        ERC20(lpTokenAddress).safeTransferFrom(msg.sender, address(this), liquidity);\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(lpTokenAddress).approve(address(pancakeswapRouter), liquidity);\\n\\n        // add the liquidity\\n        pancakeswapRouter.removeLiquidity(\\n            baseTokenAddress,\\n            dogsTokenAddress,\\n            liquidity,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapBUSDForTokens(uint256 busdAmount, address wantedTokenAddress) internal {\\n        require(ERC20(busdCurrencyAddress).balanceOf(address(this)) >= busdAmount, \\\"insufficient busd provided!\\\");\\n        require(wantedTokenAddress != address(0), \\\"wanted token address can't be the zero address!\\\");\\n\\n        address[] memory path;\\n        if (shouldRouteViaBNB(wantedTokenAddress)){\\n            path = new address[](3);\\n            path[0] = busdCurrencyAddress;\\n            path[1] = wbnbCurrencyAddress;\\n            path[2] = wantedTokenAddress;\\n        } else {\\n            path = new address[](2);\\n            path[0] = busdCurrencyAddress;\\n            path[1] = wantedTokenAddress;\\n        }\\n\\n\\n        // make the swap\\n        pancakeswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            busdAmount,\\n            0,\\n            path,\\n        // cannot send tokens to the token contract of the same type as the output token\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapTokensForBUSD(address saleTokenAddress, uint256 tokenAmount) internal {\\n        require(ERC20(saleTokenAddress).balanceOf(address(this)) >= tokenAmount, \\\"insufficient tokens provided!\\\");\\n        require(saleTokenAddress != address(0), \\\"wanted token address can't be the zero address!\\\");\\n\\n        address[] memory path;\\n        if (shouldRouteViaBNB(saleTokenAddress)){\\n            path = new address[](3);\\n            path[0] = saleTokenAddress;\\n            path[1] = wbnbCurrencyAddress;\\n            path[2] = busdCurrencyAddress;\\n        } else {\\n            path = new address[](2);\\n            path[0] = saleTokenAddress;\\n            path[1] = busdCurrencyAddress;\\n        }\\n\\n        ERC20(saleTokenAddress).approve(address(pancakeswapRouter), tokenAmount);\\n\\n        // make the swap\\n        pancakeswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function addPigsETHLiquidity(uint256 nativeAmount) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!sufficient funds\\\");\\n\\n        ERC20(pigsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(pigsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidityETH{value: msg.value}(\\n            pigsTokenAddress,\\n            nativeAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        if (address(this).balance > 0) {\\n            // not going to require/check return value of this transfer as reverting behaviour is undesirable.\\n            payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        }\\n\\n        if (ERC20(pigsTokenAddress).balanceOf(address(this)) > 0)\\n            ERC20(pigsTokenAddress).transfer(msg.sender, ERC20(pigsTokenAddress).balanceOf(address(this)));\\n    }\\n\\n    function addPigsLiquidity(address baseTokenAddress, uint256 baseAmount, uint256 nativeAmount) external nonReentrant {\\n        ERC20(baseTokenAddress).safeTransferFrom(msg.sender, address(this), baseAmount);\\n        ERC20(pigsTokenAddress).safeTransferFrom(msg.sender, address(this), nativeAmount);\\n\\n        // approve token transfer to cover all possible scenarios\\n        ERC20(baseTokenAddress).approve(address(pancakeswapRouter), baseAmount);\\n        ERC20(pigsTokenAddress).approve(address(pancakeswapRouter), nativeAmount);\\n\\n        // add the liquidity\\n        pancakeswapRouter.addLiquidity(\\n            baseTokenAddress,\\n                pigsTokenAddress,\\n            baseAmount,\\n            nativeAmount ,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            msg.sender,\\n            block.timestamp\\n        );\\n\\n        uint256 baseTokenBalance = ERC20(baseTokenAddress).balanceOf(address(this));\\n        uint256 dogsTokenBalance = ERC20(dogsTokenAddress).balanceOf(address(this));\\n\\n        if (baseTokenBalance > 0)\\n            ERC20(baseTokenAddress).safeTransfer(msg.sender, baseTokenBalance);\\n\\n        if (dogsTokenBalance > 0)\\n            ERC20(pigsTokenAddress).transfer(msg.sender, dogsTokenBalance);\\n    }\\n\\n    /**\\n     * @dev set the Dogs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setDogsAddress(address _dogsTokenAddress) external onlyOwner {\\n        require(_dogsTokenAddress != address(0), \\\"_dogsTokenAddress is the zero address\\\");\\n        require(dogsTokenAddress == address(0), \\\"dogsTokenAddress already set!\\\");\\n\\n        dogsTokenAddress = _dogsTokenAddress;\\n\\n        dogsBusdPair = IUniswapV2Factory(pancakeswapRouter.factory()).getPair(dogsTokenAddress, busdCurrencyAddress);\\n\\n        require(address(dogsBusdPair) != address(0), \\\"busd/dogs pair !exist\\\");\\n\\n        emit SetDogsAddresses(dogsTokenAddress, dogsBusdPair);\\n    }\\n\\n    /**\\n     * @dev set the Pigs address.\\n     * Can only be called by the current owner.\\n     */\\n    function setPigsAddress(address _pigsTokenAddress) external onlyOwner {\\n        require(_pigsTokenAddress != address(0), \\\"_pigsTokenAddress is the zero address\\\");\\n        require(pigsTokenAddress == address(0), \\\"pigsTokenAddress already set!\\\");\\n\\n        pigsTokenAddress = _pigsTokenAddress;\\n\\n        emit SetPigsAddresses(pigsTokenAddress);\\n    }\\n}\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract PigsToken\",\"name\":\"_pigsToken\",\"type\":\"address\"},{\"internalType\":\"contract DogsToken\",\"name\":\"_dogsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardsVaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLPToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"govAddress\",\"type\":\"address\"}],\"name\":\"GovUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLockedUp\",\"type\":\"uint256\"}],\"name\":\"RewardLockedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dogsAddress\",\"type\":\"address\"}],\"name\":\"SetDogsReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"SetFarmEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"}],\"name\":\"SetFarmStartBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetPlatformAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bottomPrice\",\"type\":\"uint256\"}],\"name\":\"UpdateDDSCAPriceRange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEmissionRate\",\"type\":\"uint256\"}],\"name\":\"updatedDDSCAMaxEmissionRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ActiveEmissionIndex\",\"outputs\":[{\"internalType\":\"enum DDSCA.EmissionRate\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLPToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bottomPriceInCents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdRewardCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canHarvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dogsToken\",\"outputs\":[{\"internalType\":\"contract DogsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getDogsMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPriceCents\",\"type\":\"uint256\"}],\"name\":\"getEmissionStage\",\"outputs\":[{\"internalType\":\"enum DDSCA.EmissionRate\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEmissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pigsPID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pigsToken\",\"outputs\":[{\"internalType\":\"contract PigsToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDogsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLPToken\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralCommissionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsVault\",\"outputs\":[{\"internalType\":\"contract IRewardsVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeeBP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEndBlock\",\"type\":\"uint256\"}],\"name\":\"setFarmEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStartBlock\",\"type\":\"uint256\"}],\"name\":\"setFarmStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"}],\"name\":\"setPlatformAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IReferralSystem\",\"name\":\"_dogsReferral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topPriceInCents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBUSDCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedUpRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxEmissionRate\",\"type\":\"uint256\"}],\"name\":\"updateDDSCAMaxEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bottomPrice\",\"type\":\"uint256\"}],\"name\":\"updateDDSCAPriceRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInCents\",\"type\":\"uint256\"}],\"name\":\"updateEmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dogsRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardLockedUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busdRewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefDogs", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003a4c15f96b3b058ab3fb5faf1440cc19e7ae07ce000000000000000000000000dbdc73b95cc0d5e7e99dc95523045fc8d075fb9e0000000000000000000000000000000000000000000000000000000000e3fcd800000000000000000000000086d49b311ab9b3797a49199c3bb4b0caeaf2ce85", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}