{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n\tcontract SafeMath {\r\n\r\n\t\tfunction safeAdd(uint a, uint b) public pure returns (uint c) {\r\n\t\t\tc = a + b;\r\n\t\t\trequire(c >= a);\r\n\t\t}\r\n\r\n\t\tfunction safeSub(uint a, uint b) public pure returns (uint c) {\r\n\t\t\trequire(b <= a);\r\n\t\t\tc = a - b;\r\n\t\t}\r\n\r\n\t\tfunction safeMul(uint a, uint b) public pure returns (uint c) {\r\n\t\t\tc = a * b;\r\n\t\t\trequire(a == 0 || c / a == b);\r\n\t\t}\r\n\r\n\t\tfunction safeDiv(uint a, uint b) public pure returns (uint c) {\r\n\t\t\trequire(b > 0);\r\n\t\t\tc = a / b;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\tERC Token Standard #20 Interface\r\n\thttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t*/\r\n\tcontract ERC20Interface {\r\n\t\tfunction totalSupply() public constant returns (uint);\r\n\t\tfunction balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\t\tfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\t\tfunction transfer(address to, uint tokens) public returns (bool success);\r\n\t\tfunction approve(address spender, uint tokens) public returns (bool success);\r\n\t\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n\t\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\t\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\t}\r\n\r\n\r\n\t/**\r\n\tContract function to receive approval and execute function in one call\r\n\r\n\tBorrowed from MiniMeToken\r\n\t*/\r\n\tcontract ApproveAndCallFallFIREk {\r\n\t\tfunction receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n\t}\r\n\r\n\t/**\r\n\tERC20 Token, with the addition of symbol, name and decimals and assisted token transfers\r\n\t*/\r\n\tcontract DogeSafe is ERC20Interface, SafeMath {\r\n\t\tstring public symbol;\r\n\t\tstring public  name;\r\n\t\tuint8 public decimals;\r\n\t\tuint public _totalSupply;\r\n\r\n\t\tmapping(address => uint) balances;\r\n\t\tmapping(address => mapping(address => uint)) allowed;\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Constructor\r\n\t\t// ------------------------------------------------------------------------\r\n\t\tconstructor() public {\r\n\t\t\tsymbol = \"DOGESAFE\";\r\n\t\t\tname = \"DogeSafe\";\r\n\t\t\tdecimals = 18;\r\n\t\t\t_totalSupply = 1000000000000000000000000000000000;\r\n\t\t\tbalances[0xbf0b5dE7ED8A7c520B51B58EC4E330db14Ecd67B] = _totalSupply;\r\n\t\t\temit Transfer(address(0), 0xbf0b5dE7ED8A7c520B51B58EC4E330db14Ecd67B, _totalSupply);\r\n\t\t}\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Total supply\r\n\t\t// ------------------------------------------------------------------------\r\n\t\tfunction totalSupply() public constant returns (uint) {\r\n\t\t\treturn _totalSupply  - balances[address(0)];\r\n\t\t}\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Get the token balance for account tokenOwner\r\n\t\t// ------------------------------------------------------------------------\r\n\t\tfunction balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n\t\t\treturn balances[tokenOwner];\r\n\t\t}\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Transfer the balance from token owner's account to to account\r\n\t\t// - Owner's account must have sufficient balance to transfer\r\n\t\t// - 0 value transfers are allowed\r\n\t\t// ------------------------------------------------------------------------\r\n\t\tfunction transfer(address to, uint tokens) public returns (bool success) {\r\n\t\t\tbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n\t\t\tbalances[to] = safeAdd(balances[to], tokens);\r\n\t\t\temit Transfer(msg.sender, to, tokens);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Token owner can approve for spender to transferFrom(...) tokens\r\n\t\t// from the token owner's account\r\n\t\t//\r\n\t\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t\t// recommends that there are no checks for the approval double-spend attack\r\n\t\t// as this should be implemented in user interfaces \r\n\t\t// ------------------------------------------------------------------------\r\n\t\tfunction approve(address spender, uint tokens) public returns (bool success) {\r\n\t\t\tallowed[msg.sender][spender] = tokens;\r\n\t\t\temit Approval(msg.sender, spender, tokens);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Transfer tokens from the from account to the to account\r\n\t\t// \r\n\t\t// The calling account must already have sufficient tokens approve(...)-d\r\n\t\t// for spending from the from account and\r\n\t\t// - From account must have sufficient balance to transfer\r\n\t\t// - Spender must have sufficient allowance to transfer\r\n\t\t// - 0 value transfers are allowed\r\n\t\t// ------------------------------------------------------------------------\r\n\t\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\t\t\tbalances[from] = safeSub(balances[from], tokens);\r\n\t\t\tallowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n\t\t\tbalances[to] = safeAdd(balances[to], tokens);\r\n\t\t\temit Transfer(from, to, tokens);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Returns the amount of tokens approved by the owner that can be\r\n\t\t// transferred to the spender's account\r\n\t\t// ------------------------------------------------------------------------\r\n\t\tfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n\t\t\treturn allowed[tokenOwner][spender];\r\n\t\t}\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Token owner can approve for spender to transferFrom(...) tokens\r\n\t\t// from the token owner's account. The spender contract function\r\n\t\t// receiveApproval(...) is then executed\r\n\t\t// ------------------------------------------------------------------------\r\n\t\tfunction approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n\t\t\tallowed[msg.sender][spender] = tokens;\r\n\t\t\temit Approval(msg.sender, spender, tokens);\r\n\t\t\tApproveAndCallFallFIREk(spender).receiveApproval(msg.sender, tokens, this, data);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\r\n\t\t// ------------------------------------------------------------------------\r\n\t\t// Don't accept ETH\r\n\t\t// ------------------------------------------------------------------------\r\n\t\tfunction () public payable {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "DogeSafe", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8f9da386af2cdb45536c6ea17a96e5a7e66a6031e23f693d9d03612d8530a199"}