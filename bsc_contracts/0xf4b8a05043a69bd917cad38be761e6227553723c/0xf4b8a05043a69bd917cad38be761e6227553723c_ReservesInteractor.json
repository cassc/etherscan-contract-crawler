{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Ola/Peripheral/Interactors/ReservesInteractor/ReservesInteractor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"./IReservesInteractor.sol\\\";\\nimport \\\"./ReservesInteractorBase.sol\\\";\\n\\ncontract ReservesInteractor is ReservesInteractorBase, IReservesInteractor {\\n\\n    /**\\n     * Reduces all reserves for all markets of the given lending network.\\n     * @param len The unitroller address\\n     */\\n    function reduceAllReserves(address len) override external {\\n        address[] memory markets = IComptrollerForReservesInteractor(len).getAllMarkets();\\n        uint length = markets.length;\\n\\n        for (uint i; i < length; i++) {\\n            reduceMarketReservesInternal(markets[i]);\\n        }\\n    }\\n\\n    /**\\n     * Reduces all reserves for all markets of the given lending network.\\n     * @param market The unitroller address\\n     */\\n    function reduceReserves(address market) external override returns (uint reservesReduced) {\\n        reservesReduced = reduceMarketReservesInternal(market);\\n    }\\n}\"\r\n    },\r\n    \"contracts/Ola/Peripheral/Interactors/ReservesInteractor/IReservesInteractor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\ninterface IReservesInteractor {\\n    function reduceAllReserves(address len) external;\\n    function reduceReserves(address market) external returns (uint reduceReserves);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/Ola/Peripheral/Interactors/ReservesInteractor/ReservesInteractorBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"./IReservesInteractor.sol\\\";\\n\\ninterface IMarketForReservesInteractor {\\n    function totalReserves() external returns (uint);\\n    function underlying() external returns (address);\\n\\n    /**\\n     * Returns error code\\n     */\\n    function accrueInterest() external returns (uint);\\n\\n    /**\\n     * Returns error code\\n     */\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n}\\n\\ninterface IComptrollerForReservesInteractor {\\n    function getAllMarkets() external view returns (address[] memory);\\n}\\n\\ncontract ReservesInteractorBase {\\n\\n    /**\\n     * Reduces all reserves for the given market.\\n     * @param market The market address\\n     */\\n    function reduceMarketReservesInternal(address market) internal returns (uint reservesReduced) {\\n          uint accrueInterestErr = IMarketForReservesInteractor(market).accrueInterest();\\n          require(accrueInterestErr == 0, \\\"Accrue interest error\\\");\\n\\n        uint currentReserves = IMarketForReservesInteractor(market).totalReserves();\\n        reservesReduced = currentReserves;\\n\\n        if (reservesReduced == 0) {\\n            return 0;\\n        } else {\\n            uint reduceReservesErr = IMarketForReservesInteractor(market)._reduceReserves(reservesReduced);\\n            require(reduceReservesErr == 0, \\\"Reduce reserves error\\\");\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"len\",\"type\":\"address\"}],\"name\":\"reduceAllReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reservesReduced\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReservesInteractor", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}