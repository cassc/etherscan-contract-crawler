{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/gatemanager/GateManagerPots.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.0 <0.7.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../prize-pool/beefy/IYieldSource.sol\\\";\\r\\nimport \\\"../prize-pool/beefy/IMooToken.sol\\\";\\r\\nimport \\\"../prize-pool/IPrizePool.sol\\\";\\r\\n\\r\\n/// @title Manager of user's funds entering MoonPot\\r\\n/// @notice Manages divying up assets into prize pool and yield farming\\r\\ncontract GateManagerPots is ReentrancyGuardUpgradeable, Ownable {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    // Interface for Moonpot prize pool\\r\\n    IPrizePool public immutable prizePool;\\r\\n\\r\\n    // prize pool lottery token\\r\\n    address public immutable prizePoolControlledToken;\\r\\n\\r\\n    // Interface for the Yield-bearing mooToken by Beefy, empty if isMooToken == false\\r\\n    IMooToken public immutable mooToken;\\r\\n\\r\\n    // deposit token, converted to mooToken if isMooToken == true\\r\\n    address public immutable underlying;\\r\\n\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice set up GateManger\\r\\n    /// @param _mooToken Address of the Beefy mooToken interface\\r\\n    /// @param _prizePool Address of the MoonPot prize pool\\r\\n    /// @param _underlying Address of the token to add to the pools\\r\\n    /// @param _prizePoolControlledToken Address of prize pool token aka lottery tickets\\r\\n    constructor(\\r\\n        IMooToken _mooToken,\\r\\n        IPrizePool _prizePool,\\r\\n        address _underlying,\\r\\n        address _prizePoolControlledToken\\r\\n    ) public {\\r\\n        mooToken = _mooToken;\\r\\n        prizePool = _prizePool;\\r\\n        underlying = _underlying;\\r\\n        prizePoolControlledToken = _prizePoolControlledToken;\\r\\n    \\r\\n   \\r\\n    }\\r\\n\\r\\n    // Converts mooTokens to underlying if isMooToken == true\\r\\n    function convertToUnderlying(uint256 amount) public view returns (uint256) {\\r\\n        uint256 underlyingAmount = amount.mul(mooToken.balance()).div(mooToken.totalSupply());\\r\\n    \\r\\n        return underlyingAmount;\\r\\n    }\\r\\n\\r\\n    // Converts mooTokens to underlying if isMooToken == true\\r\\n    function convertToShares(uint256 amount) public view returns (uint256) {\\r\\n        uint256 sharesAmount = amount.mul(mooToken.totalSupply()).div(mooToken.balance());\\r\\n    \\r\\n        return sharesAmount;\\r\\n    }\\r\\n\\r\\n    // Returns TVL -> PrizePool totalSupply\\r\\n    function TVL() external view returns (uint256) {\\r\\n        uint256 totalYieldSourceBal = IYieldSource(prizePool.yieldSource()).totalYieldTokenAmount();\\r\\n        uint256 underlyingAmountYS = convertToUnderlying(totalYieldSourceBal);\\r\\n        return underlyingAmountYS;\\r\\n    }\\r\\n\\r\\n    // Returns total award balance, PrizePool - tickets\\r\\n    function awardBalance() external view returns (uint256) {\\r\\n        uint256 ticketTotalSupply = IERC20Upgradeable(prizePoolControlledToken).totalSupply();\\r\\n        uint256 totalYieldBal = IYieldSource(prizePool.yieldSource()).totalYieldTokenAmount();\\r\\n        return convertToUnderlying(totalYieldBal.sub(ticketTotalSupply));\\r\\n    }\\r\\n\\r\\n    /// Returns user total balance\\r\\n    function userTotalBalance(address user) external view returns (uint256) {\\r\\n        uint256 ticketBal = IERC20Upgradeable(prizePoolControlledToken).balanceOf(user);\\r\\n        uint256 userBal = convertToUnderlying(ticketBal);\\r\\n        return userBal;\\r\\n    }\\r\\n\\r\\n    /// Deposit all want tokens in a user address\\r\\n    function depositAll(address referrer) external {\\r\\n        uint256 tokenBal = IERC20Upgradeable(underlying).balanceOf(msg.sender);\\r\\n        depositMoonPot(tokenBal, referrer);\\r\\n    }\\r\\n\\r\\n    /// Deposit amount of want tokens in a user address\\r\\n    function depositMoonPot(uint256 amount, address referrer) public {\\r\\n        depositMoonPot(msg.sender, amount, referrer);\\r\\n    }\\r\\n\\r\\n    /// @notice Supplies underlying token. 1/2 to MoonPot prize pool and 1/2 to Moo vault.\\r\\n    /// @param user The address where to account deposit\\r\\n    /// @param amount The amount of `underlying` to be supplied\\r\\n    /// @param referrer Partners may receive commission from ticket referral\\r\\n    function depositMoonPot(address user, uint256 amount, address referrer)\\r\\n        public\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\r\\n        IERC20Upgradeable(underlying).safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        uint256 beforeBal = IERC20Upgradeable(mooToken).balanceOf(address(this));\\r\\n        IERC20Upgradeable(underlying).safeApprove(address(mooToken), amount);\\r\\n        mooToken.deposit(amount);\\r\\n        uint256 afterBal = IERC20Upgradeable(mooToken).balanceOf(address(this));\\r\\n        uint256 diff = afterBal.sub(beforeBal);\\r\\n\\r\\n        // deposit to MoonPot prize pool\\r\\n        IERC20Upgradeable(mooToken).safeApprove(address(prizePool), diff);\\r\\n        prizePool.depositTo(user, diff, prizePoolControlledToken, referrer);\\r\\n\\r\\n        emit Staked(user, amount);\\r\\n    }\\r\\n\\r\\n    /// Withdraw all sender funds with possible exit fee\\r\\n    function exitInstantly() external {\\r\\n        uint256 ticketBal = IERC20Upgradeable(prizePoolControlledToken).balanceOf(msg.sender);\\r\\n        if (ticketBal > 0) {\\r\\n            withdrawShares(ticketBal);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawInstantlyFromMoonPotPrizePool(uint256 amount) external { \\r\\n       uint256 shares = convertToShares(amount);\\r\\n       withdrawShares(shares);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraw from prize pool with possible exit fee.\\r\\n    /// @param shares The amount of controlled prize pool token to redeem for underlying.\\r\\n    function withdrawShares(uint256 shares) public nonReentrant {\\r\\n        require(\\r\\n            IERC20Upgradeable(prizePoolControlledToken).allowance(\\r\\n                msg.sender,\\r\\n                address(this)\\r\\n            ) >= shares,\\r\\n            \\\"GateManager: approve contract to withdraw tokens for you\\\"\\r\\n        );\\r\\n         require(\\r\\n            IERC20Upgradeable(mooToken).allowance(\\r\\n                msg.sender,\\r\\n                address(this)\\r\\n            ) >= shares,\\r\\n            \\\"GateManager: approve contract to withdraw tokens for you\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 exitFee, ) = prizePool.calculateEarlyExitFee(\\r\\n            msg.sender,\\r\\n            prizePoolControlledToken,\\r\\n            shares\\r\\n        );\\r\\n\\r\\n        uint256 beforeMooBal = IERC20Upgradeable(mooToken).balanceOf(msg.sender);\\r\\n        uint256 actualFee = prizePool.withdrawInstantlyFrom(\\r\\n            msg.sender,\\r\\n            shares,\\r\\n            prizePoolControlledToken,\\r\\n            exitFee\\r\\n        );\\r\\n        require(actualFee <= exitFee, \\\"!fee\\\");\\r\\n        uint256 afterMooBal = IERC20Upgradeable(mooToken).balanceOf(msg.sender);\\r\\n        uint256 userMooBal = afterMooBal.sub(beforeMooBal);\\r\\n        \\r\\n        uint256 beforeBal = IERC20Upgradeable(underlying).balanceOf(address(this));\\r\\n        IERC20Upgradeable(mooToken).safeTransferFrom(msg.sender, address(this), userMooBal);\\r\\n        mooToken.withdraw(userMooBal);\\r\\n        uint256 afterBal = IERC20Upgradeable(underlying).balanceOf(address(this));\\r\\n        uint256 diff = afterBal.sub(beforeBal);\\r\\n        IERC20Upgradeable(underlying).safeTransfer(msg.sender, diff);\\r\\n\\r\\n        emit Withdrawn(msg.sender, diff);\\r\\n    }\\r\\n\\r\\n    // In case of airdrops or wrong tokens sent to gate manager\\r\\n    function inCaseTokensGetStuck(address _token) external onlyOwner {\\r\\n        require(_token != address(mooToken), \\\"!staked\\\");\\r\\n        require(_token != address(underlying), \\\"!underlying\\\");\\r\\n        require(_token != address(prizePoolControlledToken), \\\"!ticket\\\");\\r\\n\\r\\n        uint256 amount = IERC20Upgradeable(_token).balanceOf(address(this));\\r\\n        IERC20Upgradeable(_token).safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/beefy/IYieldSource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.4.0 <0.8.0;\\r\\n\\r\\n/// @title Defines the functions used to interact with MooToken from Beefy finance.\\r\\ninterface IYieldSource {\\r\\n\\r\\n    function totalYieldTokenAmount() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/prize-pool/beefy/IMooToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0 <0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title Defines the functions used to interact with MooToken from Beefy finance.\\ninterface IMooToken is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    /**\\n     * @dev The entrypoint of funds into the system. People deposit with this function\\n     * into the vault. The vault is then in charge of sending funds into the strategy.\\n     */\\n    function deposit(uint256 _amount) external;\\n\\n    /**\\n     * @dev Function to exit the system. The vault will withdraw the required tokens\\n     * from the strategy and pay up the token holder. A proportional number of IOU\\n     * tokens are burned in the process.\\n     */\\n    function withdraw(uint256 _shares) external;\\n\\n    /**\\n     * @dev Function for various UIs to display the current value of one of our yield tokens.\\n     * Returns an uint256 with 18 decimals of how much underlying asset one vault share represents.\\n     */\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/prize-pool/IPrizePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../token/TokenListenerInterface.sol\\\";\\r\\nimport \\\"../token/ControlledTokenInterface.sol\\\";\\r\\n\\r\\n/// @title Escrows assets and deposits them into a yield source.  Exposes interest to Prize Strategy.  Users deposit and withdraw from this contract to participate in Prize Pool.\\r\\n/// @notice Accounting is managed using Controlled Tokens, whose mint and burn functions can only be called by this contract.\\r\\n/// @dev Must be inherited to provide specific yield-bearing asset control, such as Compound cTokens\\r\\ninterface IPrizePool {\\r\\n\\r\\n  /// @notice Deposit assets into the Prize Pool in exchange for tokens\\r\\n  /// @param to The address receiving the newly minted tokens\\r\\n  /// @param amount The amount of assets to deposit\\r\\n  /// @param controlledToken The address of the type of token the user is minting\\r\\n  /// @param referrer The referrer of the deposit\\r\\n  function depositTo(\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    address controlledToken,\\r\\n    address referrer\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  /// @notice Withdraw assets from the Prize Pool instantly.  A fairness fee may be charged for an early exit.\\r\\n  /// @param from The address to redeem tokens from.\\r\\n  /// @param amount The amount of tokens to redeem for assets.\\r\\n  /// @param controlledToken The address of the token to redeem (i.e. ticket or sponsorship)\\r\\n  /// @param maximumExitFee The maximum exit fee the caller is willing to pay.  This should be pre-calculated by the calculateExitFee() fxn.\\r\\n  /// @return The actual exit fee paid\\r\\n  function withdrawInstantlyFrom(\\r\\n    address from,\\r\\n    uint256 amount,\\r\\n    address controlledToken,\\r\\n    uint256 maximumExitFee\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function withdrawReserve(address to) external returns (uint256);\\r\\n\\r\\n  /// @notice Returns the balance that is available to award.\\r\\n  /// @dev captureAwardBalance() should be called first\\r\\n  /// @return The total amount of assets to be awarded for the current prize\\r\\n  function awardBalance() external view returns (uint256);\\r\\n\\r\\n  /// @notice Captures any available interest as award balance.\\r\\n  /// @dev This function also captures the reserve fees.\\r\\n  /// @return The total amount of assets to be awarded for the current prize\\r\\n  function captureAwardBalance() external returns (uint256);\\r\\n\\r\\n  /// @notice Called by the prize strategy to award prizes.\\r\\n  /// @dev The amount awarded must be less than the awardBalance()\\r\\n  /// @param to The address of the winner that receives the award\\r\\n  /// @param amount The amount of assets to be awarded\\r\\n  /// @param controlledToken The address of the asset token being awarded\\r\\n  function award(\\r\\n    address to,\\r\\n    uint256 amount,\\r\\n    address controlledToken\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  /// @notice Called by the Prize-Strategy to transfer out external ERC20 tokens\\r\\n  /// @dev Used to transfer out tokens held by the Prize Pool.  Could be liquidated, or anything.\\r\\n  /// @param to The address of the winner that receives the award\\r\\n  /// @param amount The amount of external assets to be awarded\\r\\n  /// @param externalToken The address of the external asset token being awarded\\r\\n  function transferExternalERC20(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  /// @notice Called by the Prize-Strategy to award external ERC20 prizes\\r\\n  /// @dev Used to award any arbitrary tokens held by the Prize Pool\\r\\n  /// @param to The address of the winner that receives the award\\r\\n  /// @param amount The amount of external assets to be awarded\\r\\n  /// @param externalToken The address of the external asset token being awarded\\r\\n  function awardExternalERC20(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  /// @notice Called by the prize strategy to award external ERC721 prizes\\r\\n  /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\r\\n  /// @param to The address of the winner that receives the award\\r\\n  /// @param externalToken The address of the external NFT token being awarded\\r\\n  /// @param tokenIds An array of NFT Token IDs to be transferred\\r\\n  function awardExternalERC721(\\r\\n    address to,\\r\\n    address externalToken,\\r\\n    uint256[] calldata tokenIds\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  /// @notice Sweep all timelocked balances and transfer unlocked assets to owner accounts\\r\\n  /// @param users An array of account addresses to sweep balances for\\r\\n  /// @return The total amount of assets swept from the Prize Pool\\r\\n  function sweepTimelockBalances(\\r\\n    address[] calldata users\\r\\n  )\\r\\n    external\\r\\n    returns (uint256);\\r\\n\\r\\n  /// @notice Calculates a timelocked withdrawal duration and credit consumption.\\r\\n  /// @param from The user who is withdrawing\\r\\n  /// @param amount The amount the user is withdrawing\\r\\n  /// @param controlledToken The type of collateral the user is withdrawing (i.e. ticket or sponsorship)\\r\\n  /// @return durationSeconds The duration of the timelock in seconds\\r\\n  function calculateTimelockDuration(\\r\\n    address from,\\r\\n    address controlledToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 durationSeconds,\\r\\n      uint256 burnedCredit\\r\\n    );\\r\\n\\r\\n  /// @notice Calculates the early exit fee for the given amount\\r\\n  /// @param from The user who is withdrawing\\r\\n  /// @param controlledToken The type of collateral being withdrawn\\r\\n  /// @param amount The amount of collateral to be withdrawn\\r\\n  /// @return exitFee The exit fee\\r\\n  /// @return burnedCredit The user's credit that was burned\\r\\n  function calculateEarlyExitFee(\\r\\n    address from,\\r\\n    address controlledToken,\\r\\n    uint256 amount\\r\\n  )\\r\\n    external\\r\\n    returns (\\r\\n      uint256 exitFee,\\r\\n      uint256 burnedCredit\\r\\n    );\\r\\n\\r\\n  /// @notice Estimates the amount of time it will take for a given amount of funds to accrue the given amount of credit.\\r\\n  /// @param _principal The principal amount on which interest is accruing\\r\\n  /// @param _interest The amount of interest that must accrue\\r\\n  /// @return durationSeconds The duration of time it will take to accrue the given amount of interest, in seconds.\\r\\n  function estimateCreditAccrualTime(\\r\\n    address _controlledToken,\\r\\n    uint256 _principal,\\r\\n    uint256 _interest\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 durationSeconds);\\r\\n\\r\\n  /// @notice Returns the credit balance for a given user.  Not that this includes both minted credit and pending credit.\\r\\n  /// @param user The user whose credit balance should be returned\\r\\n  /// @return The balance of the users credit\\r\\n  function balanceOfCredit(address user, address controlledToken) external returns (uint256);\\r\\n\\r\\n  /// @notice Sets the rate at which credit accrues per second.  The credit rate is a fixed point 18 number (like Ether).\\r\\n  /// @param _controlledToken The controlled token for whom to set the credit plan\\r\\n  /// @param _creditRateMantissa The credit rate to set.  Is a fixed point 18 decimal (like Ether).\\r\\n  /// @param _creditLimitMantissa The credit limit to set.  Is a fixed point 18 decimal (like Ether).\\r\\n  function setCreditPlanOf(\\r\\n    address _controlledToken,\\r\\n    uint128 _creditRateMantissa,\\r\\n    uint128 _creditLimitMantissa\\r\\n  )\\r\\n    external;\\r\\n\\r\\n  /// @notice Returns the credit rate of a controlled token\\r\\n  /// @param controlledToken The controlled token to retrieve the credit rates for\\r\\n  /// @return creditLimitMantissa The credit limit fraction.  This number is used to calculate both the credit limit and early exit fee.\\r\\n  /// @return creditRateMantissa The credit rate. This is the amount of tokens that accrue per second.\\r\\n  function creditPlanOf(\\r\\n    address controlledToken\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint128 creditLimitMantissa,\\r\\n      uint128 creditRateMantissa\\r\\n    );\\r\\n\\r\\n  /// @notice Allows the Governor to set a cap on the amount of liquidity that he pool can hold\\r\\n  /// @param _liquidityCap The new liquidity cap for the prize pool\\r\\n  function setLiquidityCap(uint256 _liquidityCap) external;\\r\\n\\r\\n  /// @notice Sets the prize strategy of the prize pool.  Only callable by the owner.\\r\\n  /// @param _prizeStrategy The new prize strategy.  Must implement TokenListenerInterface\\r\\n  function setPrizeStrategy(TokenListenerInterface _prizeStrategy) external;\\r\\n\\r\\n  /// @dev Returns the address of the underlying ERC20 asset\\r\\n  /// @return The address of the asset\\r\\n  function token() external view returns (address);\\r\\n\\r\\n  /// @notice An array of the Tokens controlled by the Prize Pool (ie. Tickets, Sponsorship)\\r\\n  /// @return An array of controlled token addresses\\r\\n  function tokens() external view returns (address[] memory);\\r\\n\\r\\n  /// @notice The total of all controlled tokens and timelock.\\r\\n  /// @return The current total of all tokens and timelock.\\r\\n  function accountedBalance() external view returns (uint256);\\r\\n\\r\\n  function yieldSource() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/TokenListenerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\\\";\\n\\n/// @title An interface that allows a contract to listen to token mint, transfer and burn events.\\ninterface TokenListenerInterface is IERC165Upgradeable {\\n  /// @notice Called when tokens are minted.\\n  /// @param to The address of the receiver of the minted tokens.\\n  /// @param amount The amount of tokens being minted\\n  /// @param controlledToken The address of the token that is being minted\\n  /// @param referrer The address that referred the minting.\\n  function beforeTokenMint(address to, uint256 amount, address controlledToken, address referrer) external;\\n\\n  /// @notice Called when tokens are transferred or burned.\\n  /// @param from The address of the sender of the token transfer\\n  /// @param to The address of the receiver of the token transfer.  Will be the zero address if burning.\\n  /// @param amount The amount of tokens transferred\\n  /// @param controlledToken The address of the token that was transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount, address controlledToken) external;\\n}\\n\"\r\n    },\r\n    \"contracts/token/ControlledTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0 <0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport \\\"./TokenControllerInterface.sol\\\";\\n\\n/// @title Controlled ERC20 Token\\n/// @notice ERC20 Tokens with a controller for minting & burning\\ninterface ControlledTokenInterface is IERC20Upgradeable {\\n\\n  /// @notice Interface to the contract responsible for controlling mint/burn\\n  function controller() external view returns (TokenControllerInterface);\\n\\n  /// @notice Allows the controller to mint tokens for a user account\\n  /// @dev May be overridden to provide more granular control over minting\\n  /// @param _user Address of the receiver of the minted tokens\\n  /// @param _amount Amount of tokens to mint\\n  function controllerMint(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows the controller to burn tokens from a user account\\n  /// @dev May be overridden to provide more granular control over burning\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurn(address _user, uint256 _amount) external;\\n\\n  /// @notice Allows an operator via the controller to burn tokens on behalf of a user account\\n  /// @dev May be overridden to provide more granular control over operator-burning\\n  /// @param _operator Address of the operator performing the burn action via the controller contract\\n  /// @param _user Address of the holder account to burn tokens from\\n  /// @param _amount Amount of tokens to burn\\n  function controllerBurnFrom(address _operator, address _user, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/token/TokenControllerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0 <0.7.0;\\n\\n/// @title Controlled ERC20 Token Interface\\n/// @notice Required interface for Controlled ERC20 Tokens linked to a Prize Pool\\n/// @dev Defines the spec required to be implemented by a Controlled ERC20 Token\\ninterface TokenControllerInterface {\\n\\n  /// @dev Controller hook to provide notifications & rule validations on token transfers to the controller.\\n  /// This includes minting and burning.\\n  /// @param from Address of the account sending the tokens (address(0x0) on minting)\\n  /// @param to Address of the account receiving the tokens (address(0x0) on burning)\\n  /// @param amount Amount of tokens being transferred\\n  function beforeTokenTransfer(address from, address to, uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IMooToken\",\"name\":\"_mooToken\",\"type\":\"address\"},{\"internalType\":\"contract IPrizePool\",\"name\":\"_prizePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizePoolControlledToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"depositMoonPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"depositMoonPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mooToken\",\"outputs\":[{\"internalType\":\"contract IMooToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"contract IPrizePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolControlledToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userTotalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantlyFromMoonPotPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GateManagerPots", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c264c0d6e8a35abb7a118e9592ad400f640471d90000000000000000000000009eec0b65eb5efd69174cd2ac8b559340121bd23a0000000000000000000000003fcca8648651e5b974dd6d3e50f61567779772a8000000000000000000000000cd3941d4825c08991b98930ef18062f6df2959d4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}