{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.12;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IEllipsisPool {\r\n  function exchange(\r\n    int128 i,\r\n    int128 j,\r\n    uint256 dx,\r\n    uint256 min_dy\r\n  ) external;\r\n\r\n  function coins(uint256 i) external view returns (address stable);\r\n}\r\n// def exchange(i: int128, j: int128, dx: uint256, min_dy: uint256):\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IStrategy {\r\n  function balanceOfPool() external view returns (uint256);\r\n\r\n  function balanceOfWant() external view returns (uint256);\r\n\r\n  function totalAssets() external view returns (uint256);\r\n\r\n  function deposit() external;\r\n\r\n  function withdraw(uint256 _amount) external;\r\n\r\n  function want() external returns (address want);\r\n\r\n  function retire() external;\r\n\r\n  function unirouter() external view returns (address); // ONLY FOR DUALSIDEDS!\r\n\r\n  function publicHarvest() external view returns (bool);\r\n}\r\n\r\ninterface IVault is IERC20 {\r\n  function deposit(uint256 _amount) external returns (uint256 sharesMinted);\r\n\r\n  function withdraw(uint256 _shares) external returns (uint256 wantWithdrawn);\r\n\r\n  function want() external view returns (IERC20 _want);\r\n\r\n  function strategy() external view returns (IStrategy strategy);\r\n\r\n  function approve(address _spender, uint256 _amount) external returns (bool);\r\n\r\n  function balanceOf(address _user) external view returns (uint256);\r\n\r\n  function balance() external view returns (uint256);\r\n\r\n  function setNewStrategy(address _newStrategy) external;\r\n\r\n  function available() external returns (uint256);\r\n\r\n  function getPricePerFullShare() external returns (uint256);\r\n\r\n  function initializeVault(\r\n    IStrategy _strategy,\r\n    string memory _name,\r\n    string memory _symbol,\r\n    address _zapper,\r\n    IERC20 _want,\r\n    address owner_\r\n  ) external;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IVaultRegistry {\r\n    function isVault(address _vault) external view returns (bool);\r\n}\r\n\r\ninterface ILocker {\r\n  function getTier(address user) external view returns (uint256);\r\n}\r\n\r\nlibrary Checks {\r\n  function validateAmount(uint256 amount) internal pure {\r\n    require(amount != 0, \"Zero amount\");\r\n  }\r\n\r\n  function validateAddress(address _address) internal pure {\r\n    require(_address != address(0), \"Zero address\");\r\n  }\r\n\r\n  function validateWantOrNot(address want, address isWant) internal pure {\r\n    require(want == isWant, \"Given address is not want\");\r\n  }\r\n}\r\n\r\nabstract contract BaseZapper is Ownable, Pausable {\r\n  using Checks for *;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // Constants and immutables //\r\n  uint256 internal constant DEPOSIT_FEE_CAP = 100000; // 10%\r\n\r\n  uint256 internal constant FEE_DENOMINATOR = 1_000_000;\r\n\r\n  ILocker public immutable locker;\r\n\r\n  // Storage variables //\r\n\r\n  // Vault registry for validating vaults\r\n  IVaultRegistry public vaultRegistry;\r\n\r\n  // Default deposit fee, it can be set by governance later\r\n  uint256 public defaultDepositFee = 100; // denominated by 1_000_000, 0.01%\r\n\r\n  // Smart wallet contract that will take the fee on user deposits\r\n  address public smartWallet;\r\n\r\n  // Tier ==> deposit fee (1 silver, 2 gold)\r\n  mapping(uint256 => uint256) public tierDepositFees;\r\n\r\n  event DepositFeesUpdated(\r\n    uint256 newDefaultDepositFee,\r\n    uint256 newSilverDepositFee,\r\n    uint256 newGoldDepositFee\r\n  );\r\n  event SmartWalletUpdated(address newSmartWallet);\r\n  event FeeTaken(address from, address token, uint256 amount);\r\n\r\n  constructor(\r\n    address _vaultRegistry,\r\n    address _smartWallet,\r\n    address _locker\r\n  ) {\r\n    _locker.validateAddress();\r\n    _vaultRegistry.validateAddress();\r\n    _smartWallet.validateAddress();\r\n\r\n    locker = ILocker(_locker);\r\n    vaultRegistry = IVaultRegistry(_vaultRegistry);\r\n    smartWallet = _smartWallet;\r\n  }\r\n\r\n  // ================== Fee and smart wallet functions ==================\r\n  function setFees(\r\n    uint256 _defaultDepositFee,\r\n    uint256 _silverTierDepositFee,\r\n    uint256 _goldTierDepositFee\r\n  ) external onlyOwner {\r\n    require(\r\n      _defaultDepositFee <= DEPOSIT_FEE_CAP &&\r\n        _silverTierDepositFee <= DEPOSIT_FEE_CAP &&\r\n        _goldTierDepositFee <= DEPOSIT_FEE_CAP,\r\n      \"DEPOSIT_FEE_CAP\"\r\n    );\r\n\r\n    defaultDepositFee = _defaultDepositFee;\r\n\r\n    tierDepositFees[1] = _silverTierDepositFee;\r\n    tierDepositFees[2] = _goldTierDepositFee;\r\n\r\n    emit DepositFeesUpdated(\r\n      _defaultDepositFee,\r\n      _silverTierDepositFee,\r\n      _goldTierDepositFee\r\n    );\r\n  }\r\n\r\n  function setNewSmartWallet(address _smartWallet) external onlyOwner {\r\n    _smartWallet.validateAddress();\r\n\r\n    smartWallet = _smartWallet;\r\n    emit SmartWalletUpdated(_smartWallet);\r\n  }\r\n\r\n  // ================== Internal check for a vault legicimacy ==================\r\n  function validateVault(address vault) internal view {\r\n    require(vaultRegistry.isVault(vault), \"Invalid vault\");\r\n  }\r\n\r\n  // ================== Emergency pause functions to use in zappers ==================\r\n  function pause() external onlyOwner {\r\n    _pause();\r\n  }\r\n\r\n  function unpause() external onlyOwner {\r\n    _unpause();\r\n  }\r\n\r\n  // ================== Popular functions to use in zappers ==================\r\n  function _safeTransfer(address token, uint256 amount) internal {\r\n    amount.validateAmount();\r\n    IERC20(token).safeTransfer(msg.sender, amount);\r\n  }\r\n\r\n  function _approveToken(\r\n    address token,\r\n    address spender,\r\n    uint256 amount\r\n  ) internal {\r\n    IERC20(token).safeApprove(spender, 0);\r\n    IERC20(token).safeApprove(spender, amount);\r\n  }\r\n\r\n  // If the fee taking process is different than implemented here, override this function\r\n  function _takeFee(address token, uint256 fullAmount)\r\n    internal\r\n    virtual\r\n    returns (uint256)\r\n  {\r\n    // get the tier of the user from locker\r\n    // 1 silver, 2 gold, rest is bronze\r\n    uint256 userTier = locker.getTier(msg.sender);\r\n\r\n    uint256 discountedFee;\r\n    if (userTier != 1 && userTier != 2) {\r\n      // user is either bronze or does not have a lock\r\n      discountedFee = defaultDepositFee;\r\n    } else {\r\n      discountedFee = tierDepositFees[userTier];\r\n    }\r\n\r\n    uint256 feeTaken = (fullAmount * discountedFee) / FEE_DENOMINATOR;\r\n\r\n    // due to math roundings on small amounts fee can be 0\r\n    if (feeTaken == 0) {\r\n      emit FeeTaken(msg.sender, token, 0);\r\n      return 0;\r\n    }\r\n\r\n    // funds are already taken from user to address(this) let's send the fee to smart wallet\r\n    IERC20(token).safeTransfer(smartWallet, feeTaken);\r\n    emit FeeTaken(msg.sender, token, feeTaken);\r\n\r\n    return feeTaken;\r\n  }\r\n}\r\n\r\ncontract ZapperDualSided is BaseZapper, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    using Checks for *;\r\n\r\n    // Default to 3EPS pool (usdc-usdt-busd)\r\n    IEllipsisPool public constant ELLIPSIS_POOL =\r\n        IEllipsisPool(0x160CAed03795365F3A589f10C379FfA7d75d4E76);\r\n\r\n    // Storage variables //\r\n    // Underlying tokens of ellipsis pool to int128 Id\r\n    mapping(address => int128) public ellipsisIds;\r\n\r\n    // Registered/Validated Univ2 contracts that this zapper is compatible with\r\n    // router ==> factory\r\n    mapping(address => address) public registeredUniContracts;\r\n\r\n    event ZappedIn(address sender, address vault, uint256 sharesZappedIn);\r\n    event ZappedOut(address sender, address vault, uint256 shares);\r\n    event ZappedOutBalancedAmounts(\r\n        address sender,\r\n        address vault,\r\n        uint256 sharesZappedOut\r\n    );\r\n    event NewRouterAndFactoryAdded(address router, address factory);\r\n\r\n    constructor(\r\n        address _vaultRegistry,\r\n        address _smartWallet,\r\n        address _locker\r\n    ) BaseZapper(_vaultRegistry, _smartWallet, _locker) {\r\n        registeredUniContracts[\r\n            0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8 // biswap router\r\n        ] = 0x858E3312ed3A876947EA49d572A7C42DE08af7EE; // biswap factory\r\n\r\n        for (int128 i = 0; i < 3; ++i) {\r\n            address _stable = ELLIPSIS_POOL.coins(uint256(uint128(i)));\r\n\r\n            ellipsisIds[_stable] = int128(i);\r\n        }\r\n\r\n        // default values\r\n        tierDepositFees[1] = 50; // 0.0050%\r\n        tierDepositFees[2] = 25; // 0.0025%\r\n    }\r\n\r\n    function zapIn(\r\n        address fromToken,\r\n        uint256 fromTokenAmount,\r\n        uint256 fromTokenSwapAmount,\r\n        uint256 minLPReceived,\r\n        address vault,\r\n        bool useEllipsis // check it in the frontend then set this according to it\r\n    ) external payable nonReentrant whenNotPaused returns (uint256) {\r\n        validateVault(vault);\r\n        fromTokenAmount.validateAmount();\r\n\r\n        // this is a dual sided vault, so want is lp token!\r\n        address lpToken = address(IVault(vault).want());\r\n\r\n        // get the underlying tokens of LP in order\r\n        (address token0, address token1) = _getPairTokens(lpToken);\r\n\r\n        // @note We can take the tokens from user, no reentrancy or malicious token injection can happen!\r\n        IERC20(fromToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            fromTokenAmount\r\n        );\r\n\r\n        // Take the fee from the fromToken a.s.a.p\r\n        uint256 feeTaken = _takeFee(fromToken, fromTokenAmount);\r\n\r\n        // deduct the fee amount\r\n        // @note if this underflows and reverts it is ok, it is a desired behaviour\r\n        fromTokenAmount = fromTokenAmount - feeTaken;\r\n        fromTokenAmount.validateAmount();\r\n        delete feeTaken;\r\n\r\n        uint256 lpAmountReceived;\r\n        // if fromToken is one of the underlyings\r\n        if (fromToken == token0 || fromToken == token1) {\r\n            fromTokenSwapAmount.validateAmount();\r\n\r\n            // Reposition in stack, necessary for stack too deep error\r\n            // we will delete them once we done with them to get the gas refund\r\n            address _fromToken = fromToken;\r\n            uint256 _fromTokenSwapAmount = fromTokenSwapAmount;\r\n            uint256 _fromTokenAmount = fromTokenAmount;\r\n            uint256 _minLPReceived = minLPReceived;\r\n\r\n            // determine the other token in terms of token0/token1\r\n            address otherToken = _fromToken == token0 ? token1 : token0;\r\n\r\n            // buy the other underlying token with stable swap or the univ2 router\r\n            uint256 otherTokenBought;\r\n\r\n            // validate the router! Router must be same with underlying strategies router\r\n            address router = IVault(vault).strategy().unirouter();\r\n\r\n            // if there are no factory contracts to router key, then it means router is non-registered to this zapper\r\n            validateRouter(router);\r\n\r\n            if (useEllipsis) {\r\n                otherTokenBought = _ellipsisSwap(\r\n                    _fromToken,\r\n                    otherToken,\r\n                    _fromTokenSwapAmount\r\n                );\r\n            } else {\r\n                otherTokenBought = _routerSwap(\r\n                    _fromToken,\r\n                    otherToken,\r\n                    _fromTokenSwapAmount,\r\n                    router\r\n                );\r\n            }\r\n\r\n            // Update the fromTokenAmount\r\n            // @note if this underflows and reverts it is ok, it is a desired behaviour\r\n            _fromTokenAmount = _fromTokenAmount - _fromTokenSwapAmount;\r\n\r\n            delete _fromTokenSwapAmount;\r\n\r\n            uint256 token0Amount;\r\n            uint256 token1Amount;\r\n            // determine the token0Amount and token1Amount\r\n            if (_fromToken == token0) {\r\n                token0Amount = _fromTokenAmount;\r\n                token1Amount = otherTokenBought;\r\n            } else {\r\n                token0Amount = otherTokenBought;\r\n                token1Amount = _fromTokenAmount;\r\n            }\r\n\r\n            delete _fromToken;\r\n            delete _fromTokenAmount;\r\n\r\n            lpAmountReceived = _addLiquidity(\r\n                token0,\r\n                token1,\r\n                token0Amount,\r\n                token1Amount,\r\n                router,\r\n                _minLPReceived\r\n            );\r\n            delete _minLPReceived;\r\n        } else if (fromToken == lpToken) {\r\n            // user deposits LP\r\n            lpAmountReceived = fromTokenAmount;\r\n        } else {\r\n            revert(\"Zap in with Underlyings or LP\");\r\n        }\r\n\r\n        // Deposit LP (want) to vault and get the shares\r\n        _approveToken(lpToken, vault, lpAmountReceived);\r\n        uint256 sharesZappedIn = IVault(vault).deposit(lpAmountReceived);\r\n\r\n        // Send vault shares to msg.sender\r\n        IERC20(vault).safeTransfer(msg.sender, sharesZappedIn);\r\n        emit ZappedIn(msg.sender, vault, sharesZappedIn);\r\n\r\n        return sharesZappedIn;\r\n    }\r\n\r\n    ////////////////////////////// ZAP OUT ///////////////////////////////////////////////\r\n\r\n    struct ZapOutParams {\r\n        address toToken;\r\n        address vault;\r\n        uint256 shares;\r\n        bool useEllipsis; // frontend checks\r\n        uint256[] minReceivedAmounts; // 0 index token0, 1 index token1\r\n    }\r\n\r\n    function zapOut(ZapOutParams memory zapOutParams)\r\n        external\r\n        payable\r\n        nonReentrant\r\n        returns (uint256, uint256)\r\n    {\r\n        validateVault(zapOutParams.vault);\r\n        zapOutParams.shares.validateAmount();\r\n\r\n        // @note We can take the tokens from user, no reentrancy or malicious token injection can happen!\r\n        IERC20(zapOutParams.vault).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            zapOutParams.shares\r\n        );\r\n\r\n        // this is a dual sided vault, so want is lp token!\r\n        address lpToken = address(IVault(zapOutParams.vault).want());\r\n\r\n        // withdraw shares from vault behalf of user to this address\r\n        uint256 lpReceived = IVault(zapOutParams.vault).withdraw(\r\n            zapOutParams.shares\r\n        );\r\n\r\n        // make sure lp received is more than 0\r\n        // this can happen if tiny amount of shares are withdrawn due to math roundings\r\n        lpReceived.validateAmount();\r\n\r\n        // User wants to withdraw LP token\r\n        if (zapOutParams.toToken == lpToken) {\r\n            _safeTransfer(zapOutParams.toToken, lpReceived);\r\n            emit ZappedOut(msg.sender, zapOutParams.vault, zapOutParams.shares);\r\n            return (lpReceived, 0);\r\n        }\r\n\r\n        // validate the router! Router must be same with underlying strategies router\r\n        address router = IVault(zapOutParams.vault).strategy().unirouter();\r\n\r\n        // if there are no factory contracts to router key, then it means router is non-registered to this zapper\r\n        validateRouter(router);\r\n\r\n        (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            address token0,\r\n            address token1\r\n        ) = _removeLiquidity(lpToken, router, lpReceived);\r\n\r\n        // User wants to withdraw balanced underlying amounts\r\n        if (zapOutParams.toToken == address(0)) {\r\n            require(\r\n                amount0 >= zapOutParams.minReceivedAmounts[0],\r\n                \"slippage check token0\"\r\n            );\r\n            require(\r\n                amount1 >= zapOutParams.minReceivedAmounts[1],\r\n                \"slippage check token1\"\r\n            );\r\n            _safeTransfer(token0, amount0);\r\n            _safeTransfer(token1, amount1);\r\n\r\n            emit ZappedOutBalancedAmounts(\r\n                msg.sender,\r\n                zapOutParams.vault,\r\n                zapOutParams.shares\r\n            );\r\n            return (amount0, amount1);\r\n        }\r\n\r\n        //swaps tokens to token\r\n        uint256 tokenBought;\r\n        if (zapOutParams.useEllipsis) {\r\n            if (zapOutParams.toToken == token0) {\r\n                tokenBought = _ellipsisSwap(\r\n                    token1,\r\n                    token0,\r\n                    amount1\r\n                );\r\n                tokenBought += amount0;\r\n\r\n                require(tokenBought >= zapOutParams.minReceivedAmounts[0], \"slippage\");\r\n            }\r\n            // if two toToken has liquidity in ellipsis swap will execute no harm.\r\n            else {\r\n                tokenBought = _ellipsisSwap(\r\n                    token0,\r\n                    token1,\r\n                    amount0\r\n                );\r\n                tokenBought += amount1;\r\n\r\n                require(tokenBought >= zapOutParams.minReceivedAmounts[1], \"slippage\");\r\n            }\r\n        } else {\r\n            if (zapOutParams.toToken == token0) {\r\n                tokenBought = _routerSwap(\r\n                    token1,\r\n                    token0,\r\n                    amount1,\r\n                    router\r\n                );\r\n                tokenBought += amount0;\r\n\r\n                require(tokenBought >= zapOutParams.minReceivedAmounts[0], \"slippage\");\r\n            }\r\n            /// if toToken neither token0,token1 this tx will revert because we add 2 diff tokens\r\n            // if only to and from tokens are same\r\n            else {\r\n                tokenBought = _routerSwap(\r\n                    token0,\r\n                    token1,\r\n                    amount0,\r\n                    router\r\n                );\r\n                tokenBought += amount1;\r\n\r\n                require(tokenBought >= zapOutParams.minReceivedAmounts[1], \"slippage\");\r\n            }\r\n        }\r\n\r\n        _safeTransfer(zapOutParams.toToken, tokenBought);\r\n\r\n        emit ZappedOut(msg.sender, zapOutParams.vault, zapOutParams.shares);\r\n\r\n        if (zapOutParams.toToken == token0) {\r\n            return (tokenBought, 0);\r\n        }\r\n        return (0, tokenBought);\r\n    }\r\n\r\n    function validateRouter(address router) internal view {\r\n        require(registeredUniContracts[router] != address(0), \"Invalid router\");\r\n    }\r\n\r\n    function _getPairTokens(address pairAddress)\r\n        internal\r\n        view\r\n        returns (address token0, address token1)\r\n    {\r\n        IUniswapV2Pair uniPair = IUniswapV2Pair(pairAddress);\r\n        token0 = uniPair.token0();\r\n        token1 = uniPair.token1();\r\n    }\r\n\r\n    function _getPairFromTokens(\r\n        address toUniPoolToken0,\r\n        address toUniPoolToken1,\r\n        address factory\r\n    ) internal view returns (address) {\r\n        return\r\n            IUniswapV2Factory(factory).getPair(\r\n                toUniPoolToken0,\r\n                toUniPoolToken1\r\n            );\r\n    }\r\n\r\n    function _removeLiquidity(\r\n        address fromPoolAddress,\r\n        address router,\r\n        uint256 incomingLP\r\n    )\r\n        internal\r\n        returns (\r\n            uint256 amount0,\r\n            uint256 amount1,\r\n            address token0,\r\n            address token1\r\n        )\r\n    {\r\n        _approveToken(fromPoolAddress, router, incomingLP);\r\n\r\n        (token0, token1) = _getPairTokens(fromPoolAddress);\r\n\r\n        (amount0, amount1) = IUniswapRouter(router).removeLiquidity(\r\n            token0,\r\n            token1,\r\n            incomingLP,\r\n            1,\r\n            1,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        require(amount0 > 0 && amount1 > 0, \"Removed Insufficient Liquidity\");\r\n    }\r\n\r\n    function _addLiquidity(\r\n        address token0,\r\n        address token1,\r\n        uint256 token0Amount,\r\n        uint256 token1Amount,\r\n        address router,\r\n        uint256 minLPReceived\r\n    ) internal returns (uint256) {\r\n        _approveToken(token0, router, token0Amount);\r\n        _approveToken(token1, router, token1Amount);\r\n\r\n        (uint256 amountA, uint256 amountB, uint256 LP) = IUniswapRouter(router)\r\n            .addLiquidity(\r\n                token0,\r\n                token1,\r\n                token0Amount,\r\n                token1Amount,\r\n                1,\r\n                1,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n\r\n        // Protection for sandwitch/frontrun attacks\r\n        require(LP >= minLPReceived, \"Insufficient LP\");\r\n\r\n        // Returning Residue in token0, if any.\r\n        if (token0Amount - amountA > 0) {\r\n            _safeTransfer(token0, token0Amount - amountA);\r\n        }\r\n\r\n        // Returning Residue in token1, if any\r\n        if (token1Amount - amountB > 0) {\r\n            _safeTransfer(token1, token1Amount - amountB);\r\n        }\r\n        return LP;\r\n    }\r\n\r\n    function _ellipsisSwap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        _approveToken(fromToken, address(ELLIPSIS_POOL), amount);\r\n\r\n        int128 _fromTokenId = ellipsisIds[fromToken];\r\n        int128 _toTokenId = ellipsisIds[toToken];\r\n\r\n        uint256 toTokenBought = IERC20(toToken).balanceOf(address(this));\r\n        ELLIPSIS_POOL.exchange(_fromTokenId, _toTokenId, amount, 0);\r\n\r\n        toTokenBought =\r\n            IERC20(toToken).balanceOf(address(this)) -\r\n            toTokenBought;\r\n\r\n        return toTokenBought;\r\n    }\r\n\r\n    function _routerSwap(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount,\r\n        address router\r\n    ) internal returns (uint256) {\r\n        _approveToken(fromToken, router, amount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = fromToken;\r\n        path[1] = toToken;\r\n\r\n        uint256 toTokenBought = IUniswapRouter(router).swapExactTokensForTokens(\r\n            amount,\r\n            1,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        )[path.length - 1];\r\n\r\n        return toTokenBought;\r\n    }\r\n\r\n    function addNewRouterAndFactory(address newRouter, address factory)\r\n        external\r\n        onlyOwner\r\n    {\r\n        newRouter.validateAddress();\r\n        factory.validateAddress();\r\n        require(\r\n            registeredUniContracts[newRouter] == address(0),\r\n            \"Already setted\"\r\n        );\r\n\r\n        registeredUniContracts[newRouter] = factory;\r\n        emit NewRouterAndFactoryAdded(newRouter, factory);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_smartWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDefaultDepositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSilverDepositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGoldDepositFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"NewRouterAndFactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSmartWallet\",\"type\":\"address\"}],\"name\":\"SmartWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesZappedIn\",\"type\":\"uint256\"}],\"name\":\"ZappedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ZappedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesZappedOut\",\"type\":\"uint256\"}],\"name\":\"ZappedOutBalancedAmounts\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ELLIPSIS_POOL\",\"outputs\":[{\"internalType\":\"contract IEllipsisPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"addNewRouterAndFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ellipsisIds\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"contract ILocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredUniContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultDepositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_silverTierDepositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goldTierDepositFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_smartWallet\",\"type\":\"address\"}],\"name\":\"setNewSmartWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierDepositFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRegistry\",\"outputs\":[{\"internalType\":\"contract IVaultRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenSwapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLPReceived\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useEllipsis\",\"type\":\"bool\"}],\"name\":\"zapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useEllipsis\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"minReceivedAmounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ZapperDualSided.ZapOutParams\",\"name\":\"zapOutParams\",\"type\":\"tuple\"}],\"name\":\"zapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ZapperDualSided", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000007747632361be5514e8da05469d9ea1dc24c1da3000000000000000000000000ab9ae9dbaab892552ab2f12a1e3a2d92d2e4f24500000000000000000000000031401ff5563c5ea19b9584583194617f613222cd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c0b522faa7eba80b76e13916af0f47c93e8a2bc3049fff2e36616b911a302af7"}