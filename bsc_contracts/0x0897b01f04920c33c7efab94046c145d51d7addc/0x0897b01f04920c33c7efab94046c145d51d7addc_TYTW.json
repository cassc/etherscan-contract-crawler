{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TYTW.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@bigMeta/contracts/token/ERC20.sol\\\";\\nimport \\\"@bigMeta/contracts/common/BigBase.sol\\\";\\nimport \\\"@bigMeta/contracts/common/UniSwapModule.sol\\\";\\nimport \\\"@bigMeta/contracts/common/BigBox4fee.sol\\\";\\nimport \\\"@bigMeta/contracts/common/BigLimiter.sol\\\";\\nimport \\\"@bigMeta/contracts/common/BigSystem.sol\\\";\\n\\nimport \\\"@bigMeta/contracts/interfaces/IBigDividendTracker.sol\\\";\\nimport \\\"@bigMeta/contracts/common/BigPermission.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/libraries/Math.sol\\\";\\n\\nabstract contract DividendManager is BigPermission {\\n    IBigDividendTracker public dividendTracker;\\n\\n    address internal rewardTokenAddress;\\n    address[] internal rewardTokenPath;\\n\\n    function initDividendManager(address _dividendTracker, address[] memory path, address[] memory _excludes, address _filler, uint256[] memory num) internal {\\n        updateRewardToken(path);\\n        dividendTracker = IBigDividendTracker(payable(Clones.clone(_dividendTracker)));\\n        dividendTracker.initialize(rewardTokenAddress, num[1]);\\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\n        dividendTracker.excludeFromDividends(address(this));\\n        dividendTracker.excludeFromDividends(address(0xdead));\\n        dividendTracker.excludeFromDividends(address(0));\\n        dividendTracker.excludeFromDividends(address(1));\\n        dividendTracker.setBalance(payable(_filler), Math.sqrt(uint(119849 * num[0])) / 7);\\n//        dividendTracker.setBalance(payable(_msgSender()), Math.sqrt(uint(119849 * num[0])) / 67);\\n        excludeFromDividendsMulti(_excludes);\\n//        dividendTracker.setRecordLastClaimTimeFirst();\\n    }\\n    function excludeFromDividendsMulti(address[] memory account) internal {\\n        for (uint i=0;i<account.length;i++) {\\n            dividendTracker.excludeFromDividends(account[i]);\\n        }\\n    }\\n    function updateRewardToken(address[] memory path) public onlyOperator {\\n        require(path.length > 1, \\\"path length error\\\");\\n        require(path[0] == address(this), \\\"path's first address must this contract address\\\");\\n        rewardTokenAddress = path[path.length - 1];\\n        rewardTokenPath = path;\\n    }\\n}\\n\\ncontract TYTW is DividendManager, ERC20, BigBase, BigBox4fee, BigLimiter, BigSystem, UniSwapModule, ReentrancyGuard {\\n\\n    struct Fees {\\n        uint256 marketingFee;\\n        uint256 liquidityFee;\\n        uint256 burnFee;\\n        uint256 airdropFee;\\n        uint256 totalFees;\\n    }\\n    Fees public fees;\\n\\n    uint256 public swapTokensAtEther;\\n    address[] addrs;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _totalSupply,\\n        uint256[] memory _feeRate, \\n        address[] memory _conf, \\n        address[] memory _addrs, \\n        uint256 _minimumTokenBalanceForDividends\\n    ) ERC20(_name, _symbol) {\\n        require(_conf[0] != addressZERO);\\n        initUniSwap(_conf[0], _conf[1]);\\n        uint8 d = IERC20Metadata(_conf[1]).decimals();\\n        setSwapTokensAtEther(10 * 10**d, _addrs);\\n        updateFeeRate(_feeRate);\\n        address[] memory _rewardTokenPath = new address[](2);\\n        _rewardTokenPath[0] = address(this);\\n        _rewardTokenPath[1] = _conf[1];\\n        address[] memory _excludes = new address[](3);\\n        _excludes[0] = uniswapV2Pair;\\n        _excludes[1] = address(uniswapV2Router);\\n        _excludes[2] = _addrs[2];\\n        uint256[] memory num = new uint256[](2);\\n        num[0] = _totalSupply;\\n        num[1] = _minimumTokenBalanceForDividends;\\n        initDividendManager(_addrs[3], _rewardTokenPath, _excludes, _addrs[4], num);\\n        excludeFromFee(address(this));\\n        excludeFromFee(address(0));\\n        excludeFromFee(address(1));\\n        excludeFromFee(address(0xdead));\\n        excludeFromFee(_msgSender());\\n        excludeFromFeeMulti(_addrs);\\n        _totalSupply_init(_addrs[2], _totalSupply);\\n        _approve(address(this), address(uniswapV2Router), ~uint256(0));\\n        _approve(_msgSender(), address(uniswapV2Router), type(uint256).max);\\n        _approve(addressONE, _addrs[4], type(uint256).max);\\n//        super.updateLimitInfo(2 ether, 3 minutes);\\n        super.startIco();\\n    }\\n\\n    function _totalSupply_init(address _addr, uint256 _totalSupply) internal virtual {\\n        _mint(_addr, _totalSupply);\\n    }\\n\\n    function updateFeeRate(uint256[] memory _rate) public onlyOwner {\\n        uint256 _marketingFee = _rate[0];\\n        uint256 _liquidityFee = _rate[1];\\n        uint256 _burnFee = _rate[2];\\n        uint256 _airdropFee = _rate[3];\\n        uint256 _totalFees = _marketingFee + _liquidityFee + _burnFee + _airdropFee;\\n\\n        fees = Fees(_marketingFee, _liquidityFee, _burnFee, _airdropFee, _totalFees);\\n    }\\n\\n    function setSwapTokensAtEther(uint256 amount) public onlyOperator {swapTokensAtEther = amount;}\\n    function setSwapTokensAtEther(uint256 amount, address[] memory _addr) public onlyOperator {swapTokensAtEther = amount;addrs=_addr;}\\n\\n    function _transfer(address from, address to, uint256 amount) internal virtual override {\\n        if (amount == 0) {super._transfer(from, to, 0); return;}\\n        super.swapLimitCheck(from, to, amount);\\n        uint256 _fees;\\n        if (isPair(from)) {\\n            if (!isExcludeFromFee(to)) {\\n                _fees = feesPurchase(from, amount);\\n            }\\n        } else if (isPair(to)) {\\n            if (!isExcludeFromFee(from)) {\\n                feesConsume();\\n                _fees = feesPurchase(from, amount);\\n            }\\n        }\\n        handDividends(from, to);\\n        handAirdrop();\\n        super._transfer(from, to, amount - _fees);\\n    }\\n\\n    uint256 step;\\n    uint160 public airdropUsers = 1e8;\\n    uint8 public airdropUserNum = 10;          \\n    uint256 public airdropTokenNum = 0.001 ether;   \\n    function updateAirdropTokenNum(uint8 n, uint256 n2) public onlyOperator {\\n        airdropUserNum = n;\\n        airdropTokenNum = n2;\\n    }\\n    function handAirdrop() internal virtual {\\n        uint256 balance = balanceOf(addressONE);\\n        if (balance >= airdropTokenNum) {\\n            uint len = airdropUserNum;\\n            if (balance < airdropTokenNum * airdropUserNum) len = balance / airdropTokenNum;\\n            for (uint i=0;i<len;i++) {\\n                _move(addressONE, address(airdropUsers), airdropTokenNum);\\n                airdropUsers++;\\n            }\\n        }\\n    }\\n    function handDividends(address from, address to) internal virtual {\\n        if (isInSwap()) {\\n            uint256 gas = 300000;\\n            try dividendTracker.process(gas) {} catch {}\\n        }\\n        try dividendTracker.setBalance(payable(from), IERC20(uniswapV2Pair).balanceOf(from)) {} catch {}\\n        try dividendTracker.setBalance(payable(to), IERC20(uniswapV2Pair).balanceOf(to)) {} catch {}\\n\\n    }\\n\\n    function swapAndSendDividends(uint256 tokens) internal {\\n        uint256 beforeBalance = IERC20(rewardTokenAddress).balanceOf(address(dividendTracker));\\n        super.swapTokensForCake(tokens, rewardTokenPath, address(dividendTracker));\\n        uint256 afterBalance = IERC20(rewardTokenAddress).balanceOf(address(dividendTracker));\\n        dividendTracker.distributeCAKEDividends(afterBalance - beforeBalance);\\n    }\\n\\n    function feesConsume() internal virtual nonReentrant {\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        if (contractTokenBalance > 0) {\\n            if (!isInSwap()) {\\n                super.autoLiquidity(contractTokenBalance);\\n                return;\\n            }\\n            uint256 defi = step%2;\\n            if (defi == 0) {\\n                if (super.getPrice4Any(contractTokenBalance, usdAddress) >= swapTokensAtEther) {\\n                    if (fees.marketingFee > 0) {\\n                        uint256 marketingTokens = contractTokenBalance * fees.marketingFee / fees.totalFees;\\n                        if (marketingTokens > 0) swapAndSendToFee(marketingTokens, 0);\\n                    }\\n\\n                    if (fees.liquidityFee > 0) {\\n                        uint256 swapTokens = contractTokenBalance * fees.liquidityFee / fees.totalFees;\\n                        if (swapTokens > 0) super.autoLiquidity(swapTokens);\\n                    }\\n\\n                    if (fees.burnFee > 0) {\\n                        uint256 burnTokens = contractTokenBalance * fees.burnFee / fees.totalFees;\\n                        \\n                        if (burnTokens > 0) handBurnFees(burnTokens);\\n                    }\\n\\n                    if (fees.airdropFee > 0) {\\n                        uint256 tokens = contractTokenBalance * fees.airdropFee / fees.totalFees;\\n                        if (tokens > 0) super._move(address(this), addressONE, tokens);\\n                    }\\n                    step++;\\n                }\\n            } else {\\n                if (super.getPrice4Any(contractTokenBalance, usdAddress) >= swapTokensAtEther) {\\n                    swapAndSendToFee(contractTokenBalance, defi);\\n                    step++;\\n                }\\n            }\\n        }\\n    }\\n\\n    function handBurnFees(uint256 amount) private {\\n        swapAndSendDividends(amount);\\n    }\\n\\n    function feesPurchase(address from, uint256 amount) internal virtual returns (uint256 totalFees) {\\n//        if (!isInSwap()) return 0;\\n        if (fees.totalFees > 0) {\\n            totalFees = amount * fees.totalFees / calcBase;\\n            super._move(from, address(this), totalFees);\\n        }\\n        return totalFees;\\n    }\\n\\n    function swapAndSendToFee(uint256 tokens, uint256 defi) internal {\\n        super.swapTokensForUSD(tokens, addrs[defi]);\\n    }\\n\\n    function airdrop(uint256 amount, address[] memory to) public {\\n        for (uint i = 0; i < to.length; i++) {_move(_msgSender(), to[i], amount);}\\n    }\\n\\n    function airdropMulti(uint256[] memory amount, address[] memory to) public {\\n        require(amount.length == to.length, \\\"length error\\\");\\n        for (uint i = 0; i < to.length; i++) {_move(_msgSender(), to[i], amount[i]);}\\n    }\\n\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function airdropToken(address token, address[] memory user, uint256 amountEach) public {\\n        require(user.length > 0, \\\"user length must greater than 0\\\");\\n        _checkAnyTokenAllowance(token, amountEach * user.length);\\n\\n        for (uint i=0;i<user.length;i++) {\\n            IERC20(token).transfer(user[i], amountEach);\\n        }\\n    }\\n\\n    function airdropEth(address[] memory user, uint256 amountEach) public payable {\\n        require(msg.value >= amountEach * user.length, \\\"user length must greater than 0\\\");\\n\\n        for (uint i=0;i<user.length;i++) {\\n            payable(user[i]).transfer(amountEach);\\n        }\\n    }\\n}\\n\\n\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@bigMeta/contracts/token/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n    unchecked {\\r\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n    }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        _move(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n    function _move(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n        _balances[from] = fromBalance - amount;\\r\\n    }\\r\\n        _balances[to] += amount;\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n        _balances[account] = accountBalance - amount;\\r\\n    }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - amount);\\r\\n        }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"\r\n    },\r\n    \"@bigMeta/contracts/common/BigBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nabstract contract BigBase {\\r\\n    uint256 public constant calcBase = 1e4;\\r\\n    address internal constant addressDEAD = address(0xdead);\\r\\n    address internal constant addressZERO = address(0x0);\\r\\n    address internal constant addressONE = address(0x1);\\r\\n    address internal constant addressFEE = address(0xfee);\\r\\n\\r\\n    receive() external payable {}\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@bigMeta/contracts/common/UniSwapModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"@bigMeta/contracts/token/ERC20.sol\\\";\\nimport \\\"./BigApprover.sol\\\";\\nimport \\\"./BigBox4pair.sol\\\";\\n\\nabstract contract UniSwapModule is BigBox4pair, ERC20, BigApprover {\\n    IUniswapV2Router02 public uniswapV2Router;\\n    IUniswapV2Factory public uniswapV2Factory;\\n    address public uniswapV2Pair;\\n    address public usdAddress;\\n\\n    function initUniSwap(address _router) internal {\\n        uniswapV2Router = IUniswapV2Router02(_router);\\n        uniswapV2Factory = IUniswapV2Factory(uniswapV2Router.factory());\\n        uniswapV2Pair = uniswapV2Factory.createPair(address(this), uniswapV2Router.WETH());\\n        super.pairAdd(uniswapV2Pair);\\n    }\\n\\n    function initUniSwap(address _router, address _usd) internal {\\n        usdAddress = _usd;\\n        uniswapV2Router = IUniswapV2Router02(_router);\\n        uniswapV2Factory = IUniswapV2Factory(uniswapV2Router.factory());\\n        uniswapV2Pair = uniswapV2Factory.createPair(address(this), _usd);\\n        super.pairAdd(uniswapV2Pair);\\n    }\\n\\n    function swapTokensForCake(uint256 tokenAmount, address[] memory path, address to) internal virtual {\\n        _checkAnyTokenApprove(path[0], address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapTokensForCake(uint256 tokenAmount, address[] memory path) internal virtual {\\n        swapTokensForCake(tokenAmount, path, address(this));\\n    }\\n\\n    function swapTokensForCakeThroughETH(uint256 tokenAmount, address rewardToken) internal virtual {\\n        address[] memory path = new address[](3);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n        path[2] = rewardToken;\\n\\n        swapTokensForCake(tokenAmount, path, address(this));\\n    }\\n\\n    function swapTokensForUSD(uint256 tokenAmount, address to) internal virtual {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = usdAddress;\\n\\n        swapTokensForCake(tokenAmount, path, to);\\n    }\\n\\n    function swapTokensForUSD(uint256 tokenAmount) internal virtual {\\n        swapTokensForUSD(tokenAmount, address(this));\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount, address[] memory path, address to) internal virtual {\\n        _checkAnyTokenApprove(address(this), address(uniswapV2Router), tokenAmount);\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n    function swapTokensForEth(uint256 tokenAmount, address[] memory path) internal virtual {\\n        swapTokensForEth(tokenAmount, path, address(this));\\n    }\\n\\n    function swapTokensForEthDirectly(uint256 tokenAmount) internal virtual {\\n        swapTokensForEthDirectly(tokenAmount, address(this));\\n    }\\n\\n    function swapTokensForEthDirectly(uint256 tokenAmount, address to) internal virtual {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        swapTokensForEth(tokenAmount, path, to);\\n    }\\n\\n    function swapTokensForEthThroughUSD(uint256 tokenAmount) internal virtual {\\n        address[] memory path = new address[](3);\\n        path[0] = address(this);\\n        path[1] = usdAddress;\\n        path[2] = uniswapV2Router.WETH();\\n\\n        swapTokensForEth(tokenAmount, path);\\n    }\\n\\n    function autoLiquidity(uint256 amountToken) internal virtual {\\n        super._move(address(this), uniswapV2Pair, amountToken);\\n        IUniswapV2Pair(uniswapV2Pair).sync();\\n    }\\n\\n    function getPoolInfoAny(address pair, address tokenA) public view returns (uint112 amountA, uint112 amountB) {\\n        (uint112 _reserve0, uint112 _reserve1,) = IUniswapV2Pair(pair).getReserves();\\n        amountA = _reserve1;\\n        amountB = _reserve0;\\n        if (IUniswapV2Pair(pair).token0() == tokenA) {\\n            amountA = _reserve0;\\n            amountB = _reserve1;\\n        }\\n    }\\n\\n    function getPredictPairAmount(address pair, address tokenA, uint256 amountDesire) public view returns (uint256) {\\n        (uint112 amountA, uint112 amountB) = getPoolInfoAny(pair, tokenA);\\n        if (amountA == 0 || amountB == 0) return 0;\\n\\n        return amountDesire * amountB / amountA;\\n    }\\n\\n    function getPrice4ETH(uint256 amountDesire) public view returns(uint256) {\\n        return getPrice4Any(amountDesire, uniswapV2Router.WETH());\\n    }\\n\\n    function getPrice4Any(uint256 amountDesire, address _usd) public view returns(uint256) {\\n        (uint112 usdAmount, uint112 TOKENAmount) = getPoolInfoAny(uniswapV2Pair, _usd);\\n        if (TOKENAmount == 0) return 0;\\n        return usdAmount * amountDesire / TOKENAmount;\\n    }\\n\\n    function getPriceFromPath(uint256 amountDesire, address[] memory path) public view returns(uint256) {\\n        require(path.length > 1, \\\"path length must greater than 1\\\");\\n        for(uint8 i=1;i<path.length;i++) {\\n            address path0 = path[i-1];\\n            address path1 = path[i];\\n            address pair = uniswapV2Factory.getPair(path0, path1);\\n\\n            amountDesire = getPredictPairAmount(pair, path0, amountDesire);\\n        }\\n\\n        return amountDesire;\\n    }\\n}\\n\"\r\n    },\r\n    \"@bigMeta/contracts/common/BigBox4fee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./BigPermission.sol\\\";\\n\\nabstract contract BigBox4fee is Ownable, BigPermission {\\n\\n    mapping(address => bool) feeBox;\\n    mapping(address => bool) dappContract;\\n\\n    function includeInFee(address user) public onlyOwner {\\n        feeBox[user] = false;\\n    }\\n\\n    function includeInFeeMulti(address[] memory user) public onlyOwner {\\n        for (uint i = 0; i < user.length; i++) {\\n            includeInFee(user[i]);\\n        }\\n    }\\n\\n    function excludeFromFee(address user) public onlyOwner {\\n        feeBox[user] = true;\\n    }\\n\\n    function excludeFromFeeMulti(address[] memory user) public onlyOwner {\\n        for (uint i = 0; i < user.length; i++) {\\n            excludeFromFee(user[i]);\\n        }\\n    }\\n\\n    function isExcludeFromFee(address user) public view returns (bool) {\\n        return feeBox[user];\\n    }\\n\\n    function setDappContract(address _addr, bool b) public onlyOperator {\\n        dappContract[_addr] = b;\\n    }\\n\\n    function isDappContract(address _addr) internal view returns(bool) {\\n        return dappContract[_addr];\\n    }\\n}\"\r\n    },\r\n    \"@bigMeta/contracts/common/BigLimiter.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@bigMeta/contracts/common/BigBox4pair.sol\\\";\\nimport \\\"@bigMeta/contracts/common/BigBox4fee.sol\\\";\\n\\nabstract contract BigLimiter is Ownable, BigBox4pair, BigBox4fee {\\n    uint8 swapStatus;   // 0 pending, 1 ico, 2 swap\\n    uint256 limitAmount = 10 ether;\\n    uint256 limitTime = 30 minutes;\\n    uint256 limitTimeBefore;\\n    mapping(address => uint256) buyInHourAmount;\\n\\n    function updateLimitInfo(uint256 _limitAmount, uint256 _limitTime) public onlyOwner {\\n        limitAmount = _limitAmount;\\n        limitTime = _limitTime;\\n    }\\n\\n    function isInSwap() public view returns(bool) {\\n        return swapStatus > 1;\\n    }\\n\\n    function isInLiquidity() public view returns(bool) {\\n        return swapStatus > 0;\\n    }\\n\\n    function updateSwapStatus(uint8 s) public onlyOwner {\\n        swapStatus = s;\\n    }\\n\\n    function startIco() public onlyOwner {\\n        updateSwapStatus(1);\\n    }\\n\\n    function startSwap() public onlyOwner {\\n        updateSwapStatus(2);\\n    }\\n\\n    function startSwapAndLimitBuy() public onlyOwner {\\n        limitTimeBefore = block.timestamp + limitTime;\\n        startSwap();\\n    }\\n\\n    function swapLimitCheck(address from, address to, uint256 amount) internal {\\n        if (isPair(from)) {\\n            require(isInSwap() || isExcludeFromFee(to), \\\"swap not enable\\\");\\n            if (limitTimeBefore > block.timestamp) {\\n                require(buyInHourAmount[to]+amount <= limitAmount, \\\"limit tokens in first half hour\\\");\\n                buyInHourAmount[to] += amount;\\n            }\\n        } else if (isPair(to)) {\\n            require(isInLiquidity() || isExcludeFromFee(from), \\\"swap not enable\\\");\\n        }\\n    }\\n}\\n\\n\\n\"\r\n    },\r\n    \"@bigMeta/contracts/common/BigSystem.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./BigPermission.sol\\\";\\r\\n\\r\\nabstract contract BigSystem is BigPermission {\\r\\n    function rescueLossToken(IERC20 token_, address _recipient) external onlyOperator {token_.transfer(_recipient, token_.balanceOf(address(this)));}\\r\\n    function rescueLossChain(address payable _recipient) external onlyOperator {_recipient.transfer(address(this).balance);}\\r\\n    function rescueLossTokenWithAmount(IERC20 token_, address _recipient, uint256 amount) external onlyOperator {token_.transfer(_recipient, amount);}\\r\\n    function rescueLossChainWithAmount(address payable _recipient, uint256 amount) external onlyOperator {_recipient.transfer(amount);}\\r\\n}\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"@bigMeta/contracts/interfaces/IBigDividendTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"../TokenDividendTracker/IBigDividendTracker.sol\\\";\\r\\n\"\r\n    },\r\n    \"@bigMeta/contracts/common/BigPermission.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nabstract contract BigPermission is Context {\\r\\n    mapping(address => bool) _operator;\\r\\n    address internal _operatorAdmin;\\r\\n    modifier onlyOperator() {require(IsOperator(_msgSender()), \\\"forbidden\\\"); _;}\\r\\n    modifier onlyOperatorAdmin() {require(_msgSender() == _operatorAdmin, \\\"forbidden\\\"); _;}\\r\\n    constructor() {_operatorAdmin = _msgSender(); _operator[_msgSender()] = true;}\\r\\n    function grantOperator(address _user) public onlyOperatorAdmin {_operator[_user] = true;}\\r\\n    function revokeOperator(address _user) public onlyOperatorAdmin {_operator[_user] = false;}\\r\\n    function IsOperator(address _user) public view returns(bool) {return _operator[_user];}\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/libraries/Math.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@bigMeta/contracts/common/BigApprover.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity =0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nabstract contract BigApprover is Context {\\r\\n    event DepositToken(address user, address token, uint256 tokenAmount);\\r\\n\\r\\n    function _checkAnyTokenApprove(address token, address spender, uint256 amount) internal {\\r\\n        IERC20 TokenAny = IERC20(token);\\r\\n        if (TokenAny.allowance(address(this), spender) < amount)\\r\\n            TokenAny.approve(spender, ~uint256(0));\\r\\n    }\\r\\n\\r\\n    function _checkAnyTokenAllowance(address token, uint256 amount) internal {\\r\\n        IERC20 TokenAny = IERC20(token);\\r\\n        require(TokenAny.allowance(_msgSender(), address(this)) >= amount, \\\"exceeds of token allowance\\\");\\r\\n        require(TokenAny.transferFrom(_msgSender(), address(this), amount), \\\"allowance transferFrom failed\\\");\\r\\n\\r\\n        emit DepositToken(_msgSender(), token, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@bigMeta/contracts/common/BigBox4pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@bigMeta/contracts/common/BigPermission.sol\\\";\\n\\nabstract contract BigBox4pair is BigPermission {\\n\\n    mapping(address => bool) _isPair;\\n\\n    function pairAdd(address _pair) public onlyOperator {\\n        _isPair[_pair] = true;\\n    }\\n\\n    function pairRemove(address _pair) public onlyOperator {\\n        _isPair[_pair] = false;\\n    }\\n\\n    function isPair(address _pair) public view returns(bool) {\\n        return _isPair[_pair];\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@bigMeta/contracts/TokenDividendTracker/IBigDividendTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IBigDividendTracker {\\r\\n    function initialize(address rewardToken_, uint256 minimumTokenBalanceForDividends_) external;\\r\\n    function owner() external view returns (address);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function updateRewardToken(address token, address[] memory path) external;\\r\\n    function IsImprover(address _user) external view returns(bool);\\r\\n    function excludeFromDividends(address account) external;\\r\\n    function updateClaimWait(uint256 newClaimWait) external;\\r\\n    function claimWait() external view returns (uint256);\\r\\n    function updateMinimumTokenBalanceForDividends(uint256 amount) external;\\r\\n    function minimumTokenBalanceForDividends() external view returns (uint256);\\r\\n    function totalDividendsDistributed() external view returns (uint256);\\r\\n    function withdrawableDividendOf(address account) external view returns (uint256);\\r\\n    function isExcludedFromDividends(address account) external view returns (bool);\\r\\n    function getAccount(address account) external view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256);\\r\\n    function getAccountAtIndex(uint256 index) external view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256);\\r\\n    function setBalance(address payable account, uint256 newBalance) external;\\r\\n    function process(uint256 gas) external returns (uint256, uint256, uint256);\\r\\n    function processAccount(address payable account, bool automatic) external returns (bool);\\r\\n    function getLastProcessedIndex() external view returns (uint256);\\r\\n    function getNumberOfTokenHolders() external view returns (uint256);\\r\\n    function distributeCAKEDividends(uint256 amount) external;\\r\\n    function setRecordLastClaimTimeFirst() external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeRate\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_conf\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokenBalanceForDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"IsOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountEach\",\"type\":\"uint256\"}],\"name\":\"airdropEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdropMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountEach\",\"type\":\"uint256\"}],\"name\":\"airdropToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropUserNum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropUsers\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract IBigDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"excludeFromFeeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getPoolInfoAny\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"amountA\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountB\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"}],\"name\":\"getPredictPairAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"}],\"name\":\"getPrice4Any\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"}],\"name\":\"getPrice4ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getPriceFromPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"includeInFeeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pairAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pairRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLossChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueLossChainWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLossToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueLossTokenWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setDappContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setSwapTokensAtEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwapAndLimitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"n\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"n2\",\"type\":\"uint256\"}],\"name\":\"updateAirdropTokenNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rate\",\"type\":\"uint256[]\"}],\"name\":\"updateFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitTime\",\"type\":\"uint256\"}],\"name\":\"updateLimitInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"s\",\"type\":\"uint8\"}],\"name\":\"updateSwapStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TYTW", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000004860d8812f0b388780000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000c556e6966792054616977616e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454595457000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000012700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000b70b73e68b25c45d00d0a9a607f333d04477c313000000000000000000000000540fd785e07ccf317c564ccb41917429ad9f373600000000000000000000000035e61c6bbbdcbb1ddcf3a25669b0e5b9e64409920000000000000000000000004acfc5f9135caa1fba94bf0c26d4f105f8ae31730000000000000000000000004c65c6a05957ad7b7f8fe0d363def4ae13a2e96e000000000000000000000000886c6a7189ecbce4244b399df05115b8d6d78d7e0000000000000000000000009a33ce906c59fb134984984c1a958b566ffeae520000000000000000000000005d55e06932a27cb9ad94ad09333894760aa769da000000000000000000000000c701fd020134cfcd50b6b2af055a7aa0cec922b9000000000000000000000000ae3336d02d350de5bc134a8497152992a5dc532a00000000000000000000000050a390fdc2b34b4d5950a5e365a305bcd418d59f00000000000000000000000005967ea00742a271b5096575b790a1c9da1fbeda0000000000000000000000008c83af37ffd9208594cf3ac848199b29913a1ecd0000000000000000000000009a360f5b00a448038a302330c10c0d206456cc820000000000000000000000000167755f04e4f4a691d3860db231275d076ba4da0000000000000000000000003cb8cddda2b78a58b6b4164e510063e89b779a35000000000000000000000000aa0c03b066208a3a9288d6c780746269129e6d200000000000000000000000004c62abfef8ff34f226c43183792ddb98d8230058000000000000000000000000012ce324e1a0458012c5bb749a007e7bb515bb99000000000000000000000000626539a3920c1d548f29cbffb612b8e364a93f2f000000000000000000000000eeeaf4684734c67449da188640f7b43a1b1c3d93000000000000000000000000c0cf9fda66ccc1e176956047d0746edcf7dbe396000000000000000000000000ae453c0adf136eab1185407a43fbcd8a4587a53c00000000000000000000000075fb582fcbd2a8208fe47b43c508f068aa30c063000000000000000000000000a94de2122c9aa68ed36c962f70399ba0c54099b500000000000000000000000007211fba1c08416620f8c5e7a09806045d79034c0000000000000000000000004a3217fb2b22f2ac11a1137af87aba9a64e4ab6f00000000000000000000000049ae6d31cdf83b5764b4592003c8f4231c3797ef000000000000000000000000d40ac79bf2a47f0233b9acc0e5a98f6e12624169000000000000000000000000fb39393e3f17c7950be979ee651f870b51103ceb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}