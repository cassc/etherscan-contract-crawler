{"SourceCode": "{\"imports.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\nlibrary SafeMath {\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b \\u003c= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint c = a / b;\\n\\n        return c;\\n    }\\n}\\n\\ncontract Context {\\n    constructor () public { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\n contract Owned {\\n\\naddress private owner;\\naddress private newOwner;\\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice The Constructor assigns the message sender to be `owner`\\nconstructor() public {\\n    owner = msg.sender;\\n}\\n\\nmodifier onlyOwner() {\\n    require(msg.sender == owner,\\\"Owner only function\\\");\\n    _;\\n}\\n\\n/**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(owner, address(0));\\n        owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(owner, newOwner);\\n        owner = newOwner;\\n    }\\n}\\n\\n\\ncontract ERC20 is Context, Owned, IERC20 {\\n    using SafeMath for uint;\\n\\n    mapping (address =\\u003e uint) internal _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint)) internal _allowances;\\n    \\n    /*\\n    Address mappings to exclude from tax\\n    */\\n    \\n    mapping (address =\\u003e bool) public TaxFreeWallets;\\n    event NewTaxFreeAddress(address sender, address newAddress);\\n\\n    function setTaxFreeWallet(address _wallet) public onlyOwner{\\n        emit NewTaxFreeAddress(msg.sender, _wallet);\\n        TaxFreeWallets[_wallet] = true;\\n    }\\n    \\n    function containsTaxFree(address _wallet) public view returns (bool){\\n        return TaxFreeWallets[_wallet];\\n    }\\n    \\n    function removeTaxFreeWallet(address _wallet) public onlyOwner {\\n        delete TaxFreeWallets[_wallet];\\n    }\\n    \\n    /*\\n    Timelock: Allows you to lock a function for a specified period.\\n    */\\n    enum Functions { TAX }\\n    uint256 private constant _TIMELOCK = 259200; //3 days\\n    mapping(Functions =\\u003e uint256) public timelock;\\n    \\n    modifier notLocked(Functions _fn) {\\n        require(timelock[_fn] != 0 \\u0026\\u0026 timelock[_fn] \\u003c= block.timestamp, \\\"Function is timelocked\\\");  \\n        _;\\n    }\\n    \\n    //unlock function\\n    function unlockFunction(Functions _fn) public onlyOwner {\\n        timelock[_fn] = block.timestamp + _TIMELOCK;\\n    }\\n    //lock function\\n    function lockFunction(Functions _fn) public onlyOwner {\\n        timelock[_fn] = 0;\\n    }\\n\\n    uint internal _totalSupply;\\n    address public masterWallet = 0xd4F7a97Ad1E0Be2E65F391b8cDA54dd5e43B4902;\\n    uint public taxPercentageFirst = 1;\\n    \\n    function totalSupply() public view override returns (uint) {\\n        return _totalSupply;\\n    }\\n    function balanceOf(address account) public view override returns (uint) {\\n        return _balances[account];\\n    }\\n    function transfer(address recipient, uint amount) public override  returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n    function allowance(address owner, address spender) public view override returns (uint) {\\n        return _allowances[owner][spender];\\n    }\\n    function approve(address spender, uint amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n    function _transfer(address sender, address recipient, uint amount) internal{\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        uint netAmount;\\n        \\n        if(containsTaxFree(sender)){\\n            netAmount = amount;\\n        } else {\\n            uint taxPercentage = findTaxPercentage(amount);\\n            netAmount = amount - taxPercentage;\\n            transferToMasterWallet(sender, masterWallet, taxPercentage);\\n        }\\n      \\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(netAmount);\\n        emit Transfer(sender, recipient, netAmount);\\n    }\\n   \\n    function findTaxPercentage(uint256 _amount) internal view returns(uint256)\\n    {\\n         uint256 taxPercent = _amount * taxPercentageFirst / 100;\\n         return taxPercent;\\n    }\\n    function transferToMasterWallet(address sender, address _masterWallet, uint256 _taxPercentage) internal\\n    {\\n        _balances[_masterWallet] = _balances[_masterWallet].add(_taxPercentage);\\n        emit Transfer(sender, _masterWallet ,_taxPercentage);\\n        //_approve(sender, _masterWallet, _allowances[sender][_masterWallet].sub(_taxPercentage, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n    }\\n \\n    function _approve(address owner, address spender, uint amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function burn(uint256 amount) public onlyOwner {\\n        _burn(msg.sender, amount);\\n    }\\n  \\n    function _burn(address account, uint amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n    \\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n    \\n    function changeTaxPercentage(uint _taxPercentage) public onlyOwner {\\n        require(_taxPercentage \\u003c= 100, \\\"Tax can not be charged more than 100%\\\");\\n        taxPercentageFirst = _taxPercentage;\\n    }\\n    \\n    function changeMasterWalletAddress(address _masterWallet) public onlyOwner{\\n        require(_masterWallet != address(0), \\\"Invalid address enetered\\\");\\n        \\n        masterWallet = _masterWallet;\\n    }\\n}\\n\\ncontract ERC20Detailed is ERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n        \\n    }\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\n\\n/*\\nOpenZeppelin: checks address is actually an address\\n*/\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 \\u0026\\u0026 codehash != accountHash);\\n    }\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint value) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\"},\"roocoin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ERC20, ERC20Detailed, SafeERC20, Address, SafeMath, IERC20} from \\\"./imports.sol\\\";\\n\\ncontract RooCoin is ERC20, ERC20Detailed {\\n  using SafeERC20 for IERC20;\\n  using Address for address;\\n  using SafeMath for uint256;\\n  \\n  constructor () public ERC20Detailed(\\\"RooCoin\\\", \\\"ROO\\\", 18){\\n    _totalSupply =  400000000 *(10**uint256(18));\\n\\t_balances[msg.sender] = _totalSupply;\\n  }\\n  \\n}\\n\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NewTaxFreeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TaxFreeWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterWallet\",\"type\":\"address\"}],\"name\":\"changeMasterWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentage\",\"type\":\"uint256\"}],\"name\":\"changeTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"containsTaxFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ERC20.Functions\",\"name\":\"_fn\",\"type\":\"uint8\"}],\"name\":\"lockFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeTaxFreeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setTaxFreeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentageFirst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ERC20.Functions\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ERC20.Functions\",\"name\":\"_fn\",\"type\":\"uint8\"}],\"name\":\"unlockFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RooCoin", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9cc2edd880d29066c8fdd06332e2eba82aa460bd2ed4b277054d6154acb0df2"}