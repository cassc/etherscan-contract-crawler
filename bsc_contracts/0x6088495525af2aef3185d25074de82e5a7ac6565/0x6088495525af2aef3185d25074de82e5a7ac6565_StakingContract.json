{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ybf/staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function balanceOf(address owner) external view returns(uint256);\\r\\n}\\r\\n\\r\\ninterface IERC721 {\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n}\\r\\n\\r\\ncontract StakingContract {\\r\\n    address public owner;\\r\\n    address public lptoken; // LP Token address\\r\\n    address public ybfToken; // YBF Token address\\r\\n    address public nftToken; // nft Token address\\r\\n    uint256 public totalLp; \\r\\n    uint256 public totalRewards;\\r\\n    uint256 public withdrawalFee = 5000000000000000; // 0.005 BNB in wei\\r\\n    uint256 public initialDeposit = 3000000 * 10**18; // 300\u4e07 * 10^18\\r\\n\\r\\n    uint256 public constant referralBonusLevel1 = 10; // 10% for level 1 referral\\r\\n    uint256 public constant referralBonusLevel2 = 5; // 5% for level 2 referral\\r\\n\\r\\n    mapping(address => uint256) public stakedLp;\\r\\n    mapping(address => uint256) public stakedNftCount;\\r\\n    mapping(uint256 => address) public StackedNftId;\\r\\n    mapping(address => uint256[]) public addressToNftId;\\r\\n    mapping(address => uint256) public userRewards;\\r\\n    mapping(address => uint256) public userlastUpdateTime;\\r\\n    mapping(address => uint256) public recommenderStakedTime;\\r\\n    mapping(address => address[]) public recommenderToReferee; \\r\\n    mapping(address => address) public refereeToRecommender; \\r\\n    mapping(address => uint256) public recommenderRewards;  \\r\\n\\r\\n    uint256 public constant nftBonusPercentage = 5;\\r\\n    uint256 public constant maxNftBonusPercentage = 15;\\r\\n\\r\\n\\r\\n    event Staked(address indexed user, uint256 amount, uint256 nftCount);\\r\\n    event Withdrawn(address indexed user, uint256 amount, uint256 nftCount);\\r\\n    event NftStaked(address indexed user, uint256 nftId);\\r\\n    event NftWithdrawn(address indexed user, uint256 nftId);\\r\\n\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    event RewardPaid(address indexed user, uint256 reward);\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    event ReferralBonusPaid(address indexed referrerAddress, uint256 reward);\\r\\n\\r\\n\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _owner, address _lptoken, address _ybfToken, address _nftToken) {\\r\\n        owner = _owner; \\r\\n        lptoken = _lptoken;\\r\\n        ybfToken = _ybfToken;\\r\\n        nftToken = _nftToken;\\r\\n        totalLp = 0;\\r\\n        totalRewards = 0;  \\r\\n    }\\r\\n\\r\\n    function updateDeposit(uint256 _deposit) external onlyOwner {\\r\\n        initialDeposit = _deposit;\\r\\n    }\\r\\n\\r\\n    function addRecommender(address _recommender) external {\\r\\n        require(_recommender != address(0), \\\"Invalid referrer address\\\");\\r\\n        require(refereeToRecommender[msg.sender] == address(0), \\\"Can`t update recommender\\\");\\r\\n        if(_recommender != owner){\\r\\n            require(stakedLp[_recommender] !=0, \\\"Recommender haven`t staked lp\\\");\\r\\n        }\\r\\n\\r\\n        refereeToRecommender[msg.sender] = _recommender;\\r\\n        recommenderToReferee[_recommender].push(msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function stakeLp(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\r\\n        require(refereeToRecommender[msg.sender] != address(0), \\\"no recommender\\\");\\r\\n        if(recommenderStakedTime[msg.sender] == 0){\\r\\n            recommenderStakedTime[msg.sender] = block.timestamp;\\r\\n        }\\r\\n\\r\\n        updateRewards(msg.sender);\\r\\n        \\r\\n        // Transfer LP tokens to the contract\\r\\n        // (Assuming ERC20 token, make sure to call approve() on the token contract first)\\r\\n        IERC20(lptoken).transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        stakedLp[msg.sender] += amount;\\r\\n        totalLp += amount;\\r\\n\\r\\n        \\r\\n\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function stakeNft(uint256 nftId) external {\\r\\n        require(stakedNftCount[msg.sender] < 4, \\\"Maximum NFT limit reached\\\");\\r\\n        require(IERC721(nftToken).ownerOf(nftId) == msg.sender, \\\"You don't own this NFT\\\");\\r\\n        require(IERC721(nftToken).getApproved(nftId) == address(this), \\\"Contract is not approved for the NFT\\\");\\r\\n\\r\\n        // Transfer NFT to the contract\\r\\n        IERC721(nftToken).transferFrom(msg.sender, address(this), nftId);\\r\\n\\r\\n        updateRewards(msg.sender);\\r\\n\\r\\n        StackedNftId[nftId] = msg.sender;\\r\\n        addressToNftId[msg.sender].push(nftId);\\r\\n        stakedNftCount[msg.sender]++;\\r\\n        emit NftStaked(msg.sender, nftId);\\r\\n    }\\r\\n\\r\\n    function withdrawNft(uint256 nftId) external {\\r\\n        require(stakedNftCount[msg.sender] > 0, \\\"No NFTs staked\\\");\\r\\n        require(StackedNftId[nftId] == msg.sender, \\\"You don't own this NFT\\\");\\r\\n\\r\\n        updateRewards(msg.sender); \\r\\n\\r\\n        // Transfer NFT back to the user\\r\\n        IERC721(nftToken).transferFrom(address(this), msg.sender, nftId);\\r\\n\\r\\n        StackedNftId[nftId] = address(0);\\r\\n        stakedNftCount[msg.sender]--;\\r\\n        for(uint256 i=0; i<addressToNftId[msg.sender].length; i++){\\r\\n            if(addressToNftId[msg.sender][i] == nftId){\\r\\n                addressToNftId[msg.sender][i] = addressToNftId[msg.sender][addressToNftId[msg.sender].length - 1];\\r\\n                addressToNftId[msg.sender].pop();\\r\\n            }\\r\\n        }\\r\\n        emit NftWithdrawn(msg.sender, nftId);\\r\\n    }\\r\\n\\r\\n    function withdrawLp(uint256 amount) external {\\r\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\r\\n        require(stakedLp[msg.sender] >= amount, \\\"Not enough staked LP\\\");\\r\\n        updateRewards(msg.sender);\\r\\n\\r\\n        IERC20(lptoken).transfer(msg.sender, amount);\\r\\n\\r\\n        stakedLp[msg.sender] -= amount;\\r\\n        totalLp -= amount;\\r\\n\\r\\n        if(stakedLp[msg.sender] == 0){\\r\\n            recommenderRewards[msg.sender] = 0;\\r\\n            recommenderStakedTime[msg.sender] = 0;\\r\\n        }\\r\\n\\r\\n        emit Withdrawn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function getReward() external payable {\\r\\n        require(msg.value >= withdrawalFee, \\\"Insufficient BNB for withdrawal\\\");\\r\\n\\r\\n       \\r\\n        (bool success, ) = owner.call{value: withdrawalFee}(\\\"\\\");\\r\\n        require(success, \\\"BNB transfer to project wallet failed\\\");\\r\\n\\r\\n        updateRewards(msg.sender);\\r\\n\\r\\n        uint256 reward = userRewards[msg.sender];\\r\\n        require(reward > 0, \\\"No rewards to claim\\\");\\r\\n\\r\\n        // Transfer YBF tokens to the user\\r\\n        IERC20(ybfToken).transfer(msg.sender, reward);\\r\\n\\r\\n        userRewards[msg.sender] = 0;\\r\\n\\r\\n        emit RewardPaid(msg.sender, reward);\\r\\n    }\\r\\n\\r\\n    function getReferralReward() external payable { \\r\\n        require(msg.value >= withdrawalFee, \\\"Insufficient BNB for withdrawal\\\");\\r\\n\\r\\n        \\r\\n        (bool success, ) = owner.call{value: withdrawalFee}(\\\"\\\");\\r\\n        require(success, \\\"BNB transfer to project wallet failed\\\");\\r\\n\\r\\n        require(refereeToRecommender[msg.sender] != address(0), \\\"No referrer set\\\");\\r\\n        require(stakedLp[msg.sender] != 0, \\\"No staked\\\");\\r\\n\\r\\n        uint256 reward = recommenderRewards[msg.sender];\\r\\n        require(reward > 0, \\\"No referral rewards to claim\\\");\\r\\n\\r\\n        // Transfer YBF tokens to the recommender\\r\\n         IERC20(ybfToken).transfer(msg.sender, reward);\\r\\n\\r\\n        recommenderRewards[msg.sender] = 0;\\r\\n\\r\\n        emit ReferralBonusPaid(msg.sender, reward);\\r\\n    }\\r\\n    \\r\\n    function selectUserRewards(address account) public view returns(uint256){\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        uint256 userlastUpdate = userlastUpdateTime[account];\\r\\n        uint256 elapsedTime = currentTime - userlastUpdate;\\r\\n\\r\\n        if (elapsedTime > 0 && stakedLp[account] > 0) {\\r\\n            uint256 lpRewards = (elapsedTime *  stakedLp[msg.sender] * initialDeposit) / (totalLp * 365 * 86400);\\r\\n            uint256 nftBonus = stakedNftCount[account] * nftBonusPercentage;\\r\\n            if (nftBonus > maxNftBonusPercentage) {\\r\\n                nftBonus = maxNftBonusPercentage; \\r\\n            }\\r\\n\\r\\n            uint256 newRewards = (lpRewards * (100 + nftBonus)) / 100;\\r\\n\\r\\n\\r\\n            return newRewards;\\r\\n\\r\\n            \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateRewards(address account) internal {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        uint256 userlastUpdate = userlastUpdateTime[account];\\r\\n        uint256 elapsedTime = currentTime - userlastUpdate;\\r\\n\\r\\n        if (elapsedTime > 0 && stakedLp[account] > 0) {\\r\\n            uint256 lpRewards = (elapsedTime * stakedLp[msg.sender] * initialDeposit) / (totalLp * 365 * 86400);\\r\\n            uint256 nftBonus = stakedNftCount[account] * nftBonusPercentage;\\r\\n            if (nftBonus > maxNftBonusPercentage) {\\r\\n                nftBonus = maxNftBonusPercentage; \\r\\n            }\\r\\n\\r\\n            uint256 newRewards = (lpRewards * (100 + nftBonus)) / 100;\\r\\n\\r\\n            userRewards[account] += newRewards;\\r\\n            totalRewards += newRewards;\\r\\n\\r\\n            address level1Commender = refereeToRecommender[account];  \\r\\n            uint256 level1recommenderStakedTime = recommenderStakedTime[level1Commender];\\r\\n            address level2Commender = refereeToRecommender[level1Commender];\\r\\n            uint256 level2recommenderStakedTime = recommenderStakedTime[level2Commender];\\r\\n\\r\\n            \\r\\n            uint256 secondsRewards = newRewards / elapsedTime;\\r\\n\\r\\n            if(stakedLp[level1Commender] > 0){ \\r\\n                if(level1recommenderStakedTime <= userlastUpdate){\\r\\n                    recommenderRewards[level1Commender] += (newRewards * referralBonusLevel1 ) / 100;\\r\\n                }else{\\r\\n                    uint256 intervalRewards = (currentTime - level1recommenderStakedTime) * secondsRewards * referralBonusLevel1 / 100;\\r\\n                    recommenderRewards[level1Commender] += intervalRewards;\\r\\n                }\\r\\n            }\\r\\n\\r\\n                \\r\\n\\r\\n            if(stakedLp[level2Commender] > 0){\\r\\n                if(level2recommenderStakedTime <= userlastUpdate){\\r\\n                    recommenderRewards[level2Commender] += (newRewards * referralBonusLevel2) / 100;\\r\\n                }else{\\r\\n                    uint256 intervalRewards = (currentTime - level2recommenderStakedTime) * secondsRewards * referralBonusLevel2 / 100;\\r\\n                    recommenderRewards[level2Commender] += intervalRewards;\\r\\n                }\\r\\n                \\r\\n            }\\r\\n        }\\r\\n        userlastUpdateTime[account] = currentTime;\\r\\n    }\\r\\n\\r\\n\\r\\n    function emergencyWithdraw() external onlyOwner { \\r\\n        // In case of emergency, the owner can withdraw the remaining ybf tokens\\r\\n        IERC20(ybfToken).transfer(owner, IERC20(ybfToken).balanceOf(address(this)));\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [],\r\n    \"evmVersion\": \"paris\"\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ybfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NftStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"NftWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ReferralBonusPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftCount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StackedNftId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recommender\",\"type\":\"address\"}],\"name\":\"addRecommender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lptoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNftBonusPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftBonusPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommenderRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recommenderStakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recommenderToReferee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refereeToRecommender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBonusLevel1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralBonusLevel2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"selectUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"stakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedNftCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"}],\"name\":\"updateDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userlastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ybfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000afc1a64dc6a7966092a9b9fa1b214c59645b5156000000000000000000000000294d9463fe4738690c4350d7b89d71f40033c89700000000000000000000000017e01cc3b80e6e18667e11d585327b3b8549818800000000000000000000000075bd0e935ea26026d422df360278e9458d332b39", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://499bccf95d31793b1333fb0381c392143a243120ca818dee5e64934b3a3d9ad0"}