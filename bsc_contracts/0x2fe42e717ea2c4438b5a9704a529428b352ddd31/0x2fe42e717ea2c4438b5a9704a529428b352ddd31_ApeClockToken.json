{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ApeClockToken.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at BscScan.com on 2022-03-21\\n */\\n\\n/**\\n *Submitted for verification at BscScan.com on 2022-03-19\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nlibrary SafeMathInt {\\n\\tint256 private constant MIN_INT256 = int256(1) << 255;\\n\\tint256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n\\tfunction mul(int256 a, int256 b) internal pure returns (int256) {\\n\\t\\tint256 c = a * b;\\n\\n\\t\\trequire(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n\\t\\trequire((b == 0) || (c / b == a));\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction div(int256 a, int256 b) internal pure returns (int256) {\\n\\t\\trequire(b != -1 || a != MIN_INT256);\\n\\n\\t\\treturn a / b;\\n\\t}\\n\\n\\tfunction sub(int256 a, int256 b) internal pure returns (int256) {\\n\\t\\tint256 c = a - b;\\n\\t\\trequire((b >= 0 && c <= a) || (b < 0 && c > a));\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction add(int256 a, int256 b) internal pure returns (int256) {\\n\\t\\tint256 c = a + b;\\n\\t\\trequire((b >= 0 && c >= a) || (b < 0 && c < a));\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction abs(int256 a) internal pure returns (int256) {\\n\\t\\trequire(a != MIN_INT256);\\n\\t\\treturn a < 0 ? -a : a;\\n\\t}\\n}\\n\\nlibrary SafeMath {\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tuint256 c = a + b;\\n\\t\\trequire(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n\\t}\\n\\n\\tfunction sub(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b <= a, errorMessage);\\n\\t\\tuint256 c = a - b;\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tuint256 c = a * b;\\n\\t\\trequire(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn div(a, b, \\\"SafeMath: division by zero\\\");\\n\\t}\\n\\n\\tfunction div(\\n\\t\\tuint256 a,\\n\\t\\tuint256 b,\\n\\t\\tstring memory errorMessage\\n\\t) internal pure returns (uint256) {\\n\\t\\trequire(b > 0, errorMessage);\\n\\t\\tuint256 c = a / b;\\n\\n\\t\\treturn c;\\n\\t}\\n\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0);\\n\\t\\treturn a % b;\\n\\t}\\n}\\n\\ninterface IERC20 {\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address who) external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IPancakeSwapPair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\n\\tfunction kLast() external view returns (uint256);\\n\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n\\tfunction swap(\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\\ninterface IPancakeSwapRouter {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountA,\\n\\t\\t\\tuint256 amountB,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountToken,\\n\\t\\t\\tuint256 amountETH,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable;\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n}\\n\\ninterface IPancakeSwapFactory {\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n\\tfunction allPairs(uint256) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint256);\\n\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n}\\n\\ninterface IPinkAntiBot {\\n\\tfunction setTokenOwner(address owner) external;\\n\\n\\tfunction onPreTransferCheck(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external;\\n}\\n\\ncontract Ownable {\\n\\taddress private _owner;\\n\\n\\tevent OwnershipRenounced(address indexed previousOwner);\\n\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\tconstructor() {\\n\\t\\t_owner = msg.sender;\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(isOwner());\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction isOwner() public view returns (bool) {\\n\\t\\treturn msg.sender == _owner;\\n\\t}\\n\\n\\tfunction renounceOwnership() public onlyOwner {\\n\\t\\temit OwnershipRenounced(_owner);\\n\\t\\t_owner = address(0);\\n\\t}\\n\\n\\tfunction transferOwnership(address newOwner) public onlyOwner {\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n\\n\\tfunction _transferOwnership(address newOwner) internal {\\n\\t\\trequire(newOwner != address(0));\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\n\\t\\t_owner = newOwner;\\n\\t}\\n}\\n\\nabstract contract ERC20Detailed is IERC20 {\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\tuint8 private _decimals;\\n\\n\\tconstructor(\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_,\\n\\t\\tuint8 decimals_\\n\\t) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t\\t_decimals = decimals_;\\n\\t}\\n\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\tfunction decimals() public view returns (uint8) {\\n\\t\\treturn _decimals;\\n\\t}\\n}\\n\\ncontract ApeClockToken is ERC20Detailed, Ownable {\\n\\tusing SafeMath for uint256;\\n\\tusing SafeMathInt for int256;\\n\\tIPinkAntiBot public pinkAntiBot;\\n\\tbool public antiBotEnabled;\\n\\n\\tevent LogRebase(uint256 indexed epoch, uint256 totalSupply);\\n\\n\\tstring public _name = \\\"ApeClockToken\\\";\\n\\tstring public _symbol = \\\"APEC\\\";\\n\\tuint8 public _decimals = 5;\\n\\n\\tIPancakeSwapPair public pairContract;\\n\\tmapping(address => bool) _isFeeExempt;\\n\\n\\tmodifier validRecipient(address to) {\\n\\t\\trequire(to != address(0x0));\\n\\t\\t_;\\n\\t}\\n\\n\\tuint256 public constant DECIMALS = 5;\\n\\tuint256 public constant MAX_UINT256 = ~uint256(0);\\n\\tuint8 public constant RATE_DECIMALS = 7;\\n\\n\\tuint256 private constant INITIAL_FRAGMENTS_SUPPLY = 500 * 10**3 * 10**DECIMALS;\\n\\n\\tuint256 public liquidityFee = 30;\\n\\tuint256 public treasuryFee = 30;\\n\\tuint256 public apecInsuranceFundFee = 20;\\n\\tuint256 public sellFeel = 5;\\n\\tuint256 public sellFeet = 5;\\n\\tuint256 public sellFees = 5;\\n\\tuint256 public sellFeef = 5;\\n\\tuint256 public firePitFee = 20;\\n\\tuint256 public totalFee = liquidityFee.add(treasuryFee).add(apecInsuranceFundFee).add(firePitFee);\\n\\tuint256 public feeDenominator = 1000;\\n\\n\\taddress DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\taddress ZERO = 0x0000000000000000000000000000000000000000;\\n\\n\\taddress public autoLiquidityReceiver;\\n\\taddress public treasuryReceiver;\\n\\taddress public apecInsuranceFundReceiver;\\n\\taddress public firePit;\\n\\taddress public pairAddress;\\n\\tbool public swapEnabled = true;\\n\\tIPancakeSwapRouter public router;\\n\\taddress public pair;\\n\\tbool inSwap = false;\\n\\n\\tmapping(address => address) public referrals;\\n\\tmapping(address => uint256) public referralComission;\\n\\tmapping(address => uint256) public referralCount;\\n\\tbool public referralProgramEnabled = true;\\n\\tuint256 public referralFee = 10;\\n\\tuint256 public liquidityFeeDiscount = 5;\\n\\tuint256 public treasuryFeeDiscount = 5;\\n\\tuint256 public apecInsuranceFundFeeDiscount = 5;\\n\\tuint256 public firePitFeeDiscount = 5;\\n\\tuint256 public totalDiscount = liquidityFeeDiscount.add(treasuryFeeDiscount).add(apecInsuranceFundFeeDiscount).add(firePitFeeDiscount);\\n\\tuint256 public minToRefer = 10;\\n\\tuint256 public minToReferDenominator = 10000;\\n\\tmapping(address => bool) public approvedReferrers;\\n\\n\\tmodifier swapping() {\\n\\t\\tinSwap = true;\\n\\t\\t_;\\n\\t\\tinSwap = false;\\n\\t}\\n\\n\\tuint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n\\tuint256 private constant MAX_SUPPLY = 500 * 10**7 * 10**DECIMALS;\\n\\n\\tbool public _autoRebase;\\n\\tbool public _autoAddLiquidity;\\n\\tuint256 public _initRebaseStartTime;\\n\\tuint256 public _lastRebasedTime;\\n\\tuint256 public _lastAddLiquidityTime;\\n\\tuint256 public _totalSupply;\\n\\tuint256 private _gonsPerFragment;\\n\\n\\tmapping(address => uint256) private _gonBalances;\\n\\tmapping(address => mapping(address => uint256)) private _allowedFragments;\\n\\tmapping(address => bool) public blacklist;\\n\\n\\tconstructor(\\n\\t\\taddress[4] memory addrs // autoLiquidityReceiver, treasuryReceiver, apecInsuranceFundReceiver, firePit\\n\\t) ERC20Detailed(\\\"ApeClockToken\\\", \\\"APEC\\\", uint8(DECIMALS)) Ownable() {\\n\\t\\t// Pink sale ANTI BOT contract address\\n\\t\\t// BSC: 0x8EFDb3b642eb2a20607ffe0A56CFefF6a95Df002\\n\\t\\t//BSC_TESTNET: 0xbb06F5C7689eA93d9DeACCf4aF8546C4Fe0Bf1E5\\n\\t\\taddress pinkAntiBot_ = 0x8EFDb3b642eb2a20607ffe0A56CFefF6a95Df002;\\n\\t\\tpinkAntiBot = IPinkAntiBot(pinkAntiBot_);\\n\\t\\tpinkAntiBot.setTokenOwner(msg.sender);\\n\\t\\tantiBotEnabled = true;\\n\\n\\t\\t//pancakeswap v2 router mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\\n\\t\\t//                      testnet : 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\\n\\t\\t//https://pcs.nhancv.com/#/swap testnet router01 :0x3E2b14680108E8C5C45C3ab5Bc04E01397af14cB\\n\\t\\t//https://pcs.nhancv.com/#/swap testnet router:0xCc7aDc94F3D80127849D2b41b6439b7CF1eB4Ae0\\n\\n\\t\\trouter = IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n\\t\\tpair = IPancakeSwapFactory(router.factory()).createPair(router.WETH(), address(this));\\n\\n\\t\\tautoLiquidityReceiver = addrs[0];\\n\\t\\ttreasuryReceiver = addrs[1];\\n\\t\\tapecInsuranceFundReceiver = addrs[2];\\n\\t\\tfirePit = addrs[3];\\n\\n\\t\\t_allowedFragments[address(this)][address(router)] = type(uint256).max;\\n\\t\\tpairAddress = pair;\\n\\t\\tpairContract = IPancakeSwapPair(pair);\\n\\n\\t\\t_totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n\\t\\t_gonBalances[treasuryReceiver] = TOTAL_GONS;\\n\\t\\t_gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\t\\t_initRebaseStartTime = block.timestamp;\\n\\t\\t_lastRebasedTime = block.timestamp;\\n\\t\\t_autoRebase = false;\\n\\t\\t_autoAddLiquidity = true;\\n\\t\\t_isFeeExempt[treasuryReceiver] = true;\\n\\t\\t_isFeeExempt[address(this)] = true;\\n\\n\\t\\t_transferOwnership(treasuryReceiver);\\n\\t\\temit Transfer(address(0x0), treasuryReceiver, _totalSupply);\\n\\t}\\n\\n\\tfunction rebase() internal {\\n\\t\\tif (inSwap) return;\\n\\t\\tuint256 rebaseRate;\\n\\t\\tuint256 deltaTimeFromInit = block.timestamp - _initRebaseStartTime;\\n\\t\\tuint256 deltaTime = block.timestamp - _lastRebasedTime;\\n\\t\\tuint256 times = deltaTime.div(1 minutes);\\n\\t\\tuint256 epoch = times.mul(1);\\n\\n\\t\\tif (deltaTimeFromInit < (365 days)) {\\n\\t\\t\\trebaseRate = 175;\\n\\t\\t} else if (deltaTimeFromInit >= (7 * 365 days)) {\\n\\t\\t\\trebaseRate = 1;\\n\\t\\t} else if (deltaTimeFromInit >= ((15 * 365 days) / 10)) {\\n\\t\\t\\trebaseRate = 3;\\n\\t\\t} else if (deltaTimeFromInit >= (365 days)) {\\n\\t\\t\\trebaseRate = 17;\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < times; i++) {\\n\\t\\t\\t_totalSupply = _totalSupply.mul((10**RATE_DECIMALS).add(rebaseRate)).div(10**RATE_DECIMALS);\\n\\t\\t}\\n\\n\\t\\t_gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n\\t\\t_lastRebasedTime = _lastRebasedTime.add(times.mul(1 minutes));\\n\\n\\t\\tpairContract.sync();\\n\\n\\t\\temit LogRebase(epoch, _totalSupply);\\n\\t}\\n\\n\\tfunction transfer(address to, uint256 value) external override validRecipient(to) returns (bool) {\\n\\t\\t_transferFrom(msg.sender, to, value);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external override validRecipient(to) returns (bool) {\\n\\t\\tif (_allowedFragments[from][msg.sender] != type(uint256).max) {\\n\\t\\t\\t_allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value, \\\"Insufficient Allowance\\\");\\n\\t\\t}\\n\\t\\t_transferFrom(from, to, value);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _basicTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal returns (bool) {\\n\\t\\tuint256 gonAmount = amount.mul(_gonsPerFragment);\\n\\t\\t_gonBalances[from] = _gonBalances[from].sub(gonAmount);\\n\\t\\t_gonBalances[to] = _gonBalances[to].add(gonAmount);\\n\\t\\tif (antiBotEnabled) {\\n\\t\\t\\tpinkAntiBot.onPreTransferCheck(from, to, amount);\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) internal returns (bool) {\\n\\t\\trequire(!blacklist[sender] && !blacklist[recipient], \\\"in_blacklist\\\");\\n\\n\\t\\tif (inSwap) {\\n\\t\\t\\treturn _basicTransfer(sender, recipient, amount);\\n\\t\\t}\\n\\t\\tif (shouldRebase()) {\\n\\t\\t\\trebase();\\n\\t\\t}\\n\\n\\t\\tif (shouldAddLiquidity()) {\\n\\t\\t\\taddLiquidity();\\n\\t\\t}\\n\\n\\t\\tif (shouldSwapBack()) {\\n\\t\\t\\tswapBack();\\n\\t\\t}\\n\\n\\t\\tuint256 gonAmount = amount.mul(_gonsPerFragment);\\n\\t\\t_gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\\n\\t\\tuint256 gonAmountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, gonAmount) : gonAmount;\\n\\t\\t_gonBalances[recipient] = _gonBalances[recipient].add(gonAmountReceived);\\n\\n\\t\\temit Transfer(sender, recipient, gonAmountReceived.div(_gonsPerFragment));\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction takeFee(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 gonAmount\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 _totalFee = totalFee;\\n\\t\\tuint256 _treasuryFee = treasuryFee;\\n\\t\\tuint256 _liquidityFee = liquidityFee;\\n\\t\\tuint256 _apecInsuranceFundFee = apecInsuranceFundFee;\\n\\t\\tuint256 _firePitFee = firePitFee;\\n\\n\\t\\tif (recipient == pair) {\\n\\t\\t\\t_totalFee = totalFee.add(sellFeet).add(sellFeef).add(sellFees).add(sellFeel);\\n\\t\\t\\t_treasuryFee = treasuryFee.add(sellFeet);\\n\\t\\t\\t_liquidityFee = liquidityFee.add(sellFeel);\\n\\t\\t\\t_apecInsuranceFundFee = apecInsuranceFundFee.add(sellFees);\\n\\t\\t\\t_firePitFee = firePitFee.add(sellFeef);\\n\\t\\t}\\n\\n\\t\\taddress referrer = referrals[sender];\\n\\t\\tuint256 referrerGonAmount;\\n\\t\\tif (referrer != address(0) && isReferrerValid(referrer) && referralProgramEnabled) {\\n\\t\\t\\t_treasuryFee = _treasuryFee.sub(treasuryFeeDiscount);\\n\\t\\t\\t_liquidityFee = _liquidityFee.sub(liquidityFeeDiscount);\\n\\t\\t\\t_firePitFee = _firePitFee.sub(firePitFeeDiscount);\\n\\t\\t\\t_apecInsuranceFundFee = _apecInsuranceFundFee.sub(apecInsuranceFundFeeDiscount);\\n\\t\\t\\t_totalFee = _treasuryFee.add(_liquidityFee).add(_firePitFee).add(_apecInsuranceFundFee);\\n\\n\\t\\t\\treferrerGonAmount = gonAmount.div(feeDenominator).mul(referralFee);\\n\\t\\t\\t_gonBalances[referrer] = _gonBalances[referrer].add(referrerGonAmount);\\n\\t\\t\\treferralComission[referrer] = referralComission[referrer].add(referrerGonAmount.div(_gonsPerFragment));\\n\\t\\t\\temit Transfer(sender, referrer, referrerGonAmount.div(_gonsPerFragment));\\n\\t\\t}\\n\\n\\t\\tuint256 feeAmount = gonAmount.div(feeDenominator).mul(_totalFee);\\n\\n\\t\\t_gonBalances[firePit] = _gonBalances[firePit].add(gonAmount.div(feeDenominator).mul(firePitFee));\\n\\t\\t_gonBalances[address(this)] = _gonBalances[address(this)].add(gonAmount.div(feeDenominator).mul(_treasuryFee.add(apecInsuranceFundFee)));\\n\\t\\t_gonBalances[autoLiquidityReceiver] = _gonBalances[autoLiquidityReceiver].add(gonAmount.div(feeDenominator).mul(liquidityFee));\\n\\n\\t\\temit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\\n\\n\\t\\treturn gonAmount.sub(feeAmount.add(referrerGonAmount));\\n\\t}\\n\\n\\tfunction addLiquidity() internal swapping {\\n\\t\\tuint256 autoLiquidityAmount = _gonBalances[autoLiquidityReceiver].div(_gonsPerFragment);\\n\\t\\t_gonBalances[address(this)] = _gonBalances[address(this)].add(_gonBalances[autoLiquidityReceiver]);\\n\\t\\t_gonBalances[autoLiquidityReceiver] = 0;\\n\\t\\tuint256 amountToLiquify = autoLiquidityAmount.div(2);\\n\\t\\tuint256 amountToSwap = autoLiquidityAmount.sub(amountToLiquify);\\n\\n\\t\\tif (amountToSwap == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = address(this);\\n\\t\\tpath[1] = router.WETH();\\n\\n\\t\\tuint256 balanceBefore = address(this).balance;\\n\\n\\t\\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap, 0, path, address(this), block.timestamp);\\n\\n\\t\\tuint256 amountETHLiquidity = address(this).balance.sub(balanceBefore);\\n\\n\\t\\tif (amountToLiquify > 0 && amountETHLiquidity > 0) {\\n\\t\\t\\trouter.addLiquidityETH{value: amountETHLiquidity}(address(this), amountToLiquify, 0, 0, autoLiquidityReceiver, block.timestamp);\\n\\t\\t}\\n\\t\\t_lastAddLiquidityTime = block.timestamp;\\n\\t}\\n\\n\\tfunction swapBack() internal swapping {\\n\\t\\tuint256 amountToSwap = _gonBalances[address(this)].div(_gonsPerFragment);\\n\\n\\t\\tif (amountToSwap == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 balanceBefore = address(this).balance;\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = address(this);\\n\\t\\tpath[1] = router.WETH();\\n\\n\\t\\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap, 0, path, address(this), block.timestamp);\\n\\n\\t\\tuint256 amountETHToTreasuryAndSIF = address(this).balance.sub(balanceBefore);\\n\\n\\t\\t(bool success, ) = payable(treasuryReceiver).call{\\n\\t\\t\\tvalue: amountETHToTreasuryAndSIF.mul(treasuryFee).div(treasuryFee.add(apecInsuranceFundFee)),\\n\\t\\t\\tgas: 30000\\n\\t\\t}(\\\"\\\");\\n\\t\\t(success, ) = payable(apecInsuranceFundReceiver).call{\\n\\t\\t\\tvalue: amountETHToTreasuryAndSIF.mul(apecInsuranceFundFee).div(treasuryFee.add(apecInsuranceFundFee)),\\n\\t\\t\\tgas: 30000\\n\\t\\t}(\\\"\\\");\\n\\t}\\n\\n\\tfunction setEnableAntiBot(bool _enable) external onlyOwner {\\n\\t\\tantiBotEnabled = _enable;\\n\\t}\\n\\n\\tfunction withdrawAllToTreasury() external swapping onlyOwner {\\n\\t\\tuint256 amountToSwap = _gonBalances[address(this)].div(_gonsPerFragment);\\n\\t\\trequire(amountToSwap > 0, \\\"There is no APEC token deposited in token contract\\\");\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = address(this);\\n\\t\\tpath[1] = router.WETH();\\n\\t\\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap, 0, path, treasuryReceiver, block.timestamp);\\n\\t}\\n\\n\\tfunction shouldTakeFee(address from, address to) internal view returns (bool) {\\n\\t\\treturn (pair == from || pair == to) && !_isFeeExempt[from];\\n\\t}\\n\\n\\tfunction shouldRebase() internal view returns (bool) {\\n\\t\\treturn _autoRebase && (_totalSupply < MAX_SUPPLY) && msg.sender != pair && !inSwap && block.timestamp >= (_lastRebasedTime + 1 minutes);\\n\\t}\\n\\n\\tfunction shouldAddLiquidity() internal view returns (bool) {\\n\\t\\treturn _autoAddLiquidity && !inSwap && msg.sender != pair && block.timestamp >= (_lastAddLiquidityTime + 10 minutes);\\n\\t}\\n\\n\\tfunction shouldSwapBack() internal view returns (bool) {\\n\\t\\treturn !inSwap && msg.sender != pair;\\n\\t}\\n\\n\\tfunction setAutoRebase(bool _flag) external onlyOwner {\\n\\t\\tif (_flag) {\\n\\t\\t\\t_autoRebase = _flag;\\n\\t\\t\\t_lastRebasedTime = block.timestamp;\\n\\t\\t} else {\\n\\t\\t\\t_autoRebase = _flag;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setAutoAddLiquidity(bool _flag) external onlyOwner {\\n\\t\\tif (_flag) {\\n\\t\\t\\t_autoAddLiquidity = _flag;\\n\\t\\t\\t_lastAddLiquidityTime = block.timestamp;\\n\\t\\t} else {\\n\\t\\t\\t_autoAddLiquidity = _flag;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction allowance(address owner_, address spender) external view override returns (uint256) {\\n\\t\\treturn _allowedFragments[owner_][spender];\\n\\t}\\n\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n\\t\\tuint256 oldValue = _allowedFragments[msg.sender][spender];\\n\\t\\tif (subtractedValue >= oldValue) {\\n\\t\\t\\t_allowedFragments[msg.sender][spender] = 0;\\n\\t\\t} else {\\n\\t\\t\\t_allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\\n\\t\\t}\\n\\t\\temit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n\\t\\t_allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender].add(addedValue);\\n\\t\\temit Approval(msg.sender, spender, _allowedFragments[msg.sender][spender]);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 value) external override returns (bool) {\\n\\t\\t_allowedFragments[msg.sender][spender] = value;\\n\\t\\temit Approval(msg.sender, spender, value);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction checkFeeExempt(address _addr) external view returns (bool) {\\n\\t\\treturn _isFeeExempt[_addr];\\n\\t}\\n\\n\\tfunction getCirculatingSupply() public view returns (uint256) {\\n\\t\\treturn (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(_gonsPerFragment);\\n\\t}\\n\\n\\tfunction isNotInSwap() external view returns (bool) {\\n\\t\\treturn !inSwap;\\n\\t}\\n\\n\\tfunction manualSync() external {\\n\\t\\tIPancakeSwapPair(pair).sync();\\n\\t}\\n\\n\\tfunction setFeeReceivers(\\n\\t\\taddress _autoLiquidityReceiver,\\n\\t\\taddress _treasuryReceiver,\\n\\t\\taddress _apecInsuranceFundReceiver,\\n\\t\\taddress _firePit\\n\\t) external onlyOwner {\\n\\t\\tautoLiquidityReceiver = _autoLiquidityReceiver;\\n\\t\\ttreasuryReceiver = _treasuryReceiver;\\n\\t\\tapecInsuranceFundReceiver = _apecInsuranceFundReceiver;\\n\\t\\tfirePit = _firePit;\\n\\t}\\n\\n\\tfunction getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\\n\\t\\tuint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\\n\\t\\treturn accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\\n\\t}\\n\\n\\tfunction setWhitelist(address _addr) external onlyOwner {\\n\\t\\t_isFeeExempt[_addr] = true;\\n\\t}\\n\\n\\tfunction setBotBlacklist(address _botAddress, bool _flag) external onlyOwner {\\n\\t\\trequire(isContract(_botAddress), \\\"only contract address, not allowed exteranlly owned account\\\");\\n\\t\\tblacklist[_botAddress] = _flag;\\n\\t}\\n\\n\\tfunction setPairAddress(address _pairAddress) public onlyOwner {\\n\\t\\tpairAddress = _pairAddress;\\n\\t}\\n\\n\\tfunction setLP(address _address) external onlyOwner {\\n\\t\\tpairContract = IPancakeSwapPair(_address);\\n\\t}\\n\\n\\tfunction totalSupply() external view override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address who) external view override returns (uint256) {\\n\\t\\treturn _gonBalances[who].div(_gonsPerFragment);\\n\\t}\\n\\n\\tfunction isContract(address addr) internal view returns (bool) {\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(addr)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n\\n\\tfunction approveReferral(address referrer) external {\\n\\t\\trequire(isReferrerValid(referrer), \\\"Referrer doesn't have enough tokens to referr others\\\");\\n\\t\\trequire(referrals[msg.sender] == address(0), \\\"You have already been referred\\\");\\n\\t\\treferrals[msg.sender] = referrer;\\n\\t\\treferralCount[referrer] = referralCount[referrer] + 1;\\n\\t}\\n\\n\\tfunction isReferrerValid(address referrer) internal view returns (bool) {\\n\\t\\treturn _gonBalances[referrer].div(_gonsPerFragment) >= _totalSupply.mul(minToRefer).div(minToReferDenominator) || approvedReferrers[referrer];\\n\\t}\\n\\n\\tfunction setMinToRefer(uint256 _minToRefer) external onlyOwner {\\n\\t\\trequire(_minToRefer <= minToReferDenominator, \\\"Invalid value\\\");\\n\\t\\tminToRefer = _minToRefer;\\n\\t}\\n\\n\\tfunction setApprovedReferrer(address referrer, bool flag) external onlyOwner {\\n\\t\\tapprovedReferrers[referrer] = flag;\\n\\t}\\n\\n\\tfunction setDiscounts(uint256[] memory fees) external onlyOwner {\\n\\t\\tuint256 _totalDiscount = fees[0].add(fees[1]).add(fees[2]).add(fees[3]);\\n\\t\\trequire(_totalDiscount >= 20 && totalDiscount <= totalFee.div(2), \\\"Invalid value\\\");\\n\\t\\tliquidityFeeDiscount = fees[0];\\n\\t\\ttreasuryFeeDiscount = fees[1];\\n\\t\\tapecInsuranceFundFeeDiscount = fees[2];\\n\\t\\tfirePitFeeDiscount = fees[3];\\n\\t\\ttotalDiscount = _totalDiscount;\\n\\t}\\n\\n\\tfunction setReferralComission(uint256 comission) external onlyOwner {\\n\\t\\trequire(totalDiscount.sub(comission) >= 10, \\\"Invalid value\\\");\\n\\t\\treferralFee = comission;\\n\\t}\\n\\n\\tfunction setReferralProgramEnabled(bool flag) external onlyOwner {\\n\\t\\treferralProgramEnabled = flag;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"addrs\",\"type\":\"address[4]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initRebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apecInsuranceFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apecInsuranceFundFeeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apecInsuranceFundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"approveReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedReferrers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firePit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firePitFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firePitFeeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToRefer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToReferDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkAntiBot\",\"outputs\":[{\"internalType\":\"contract IPinkAntiBot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralComission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralProgramEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setApprovedReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"setDiscounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setEnableAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_apecInsuranceFundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_firePit\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minToRefer\",\"type\":\"uint256\"}],\"name\":\"setMinToRefer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"}],\"name\":\"setReferralComission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setReferralProgramEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFeeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ApeClockToken", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d1aa54b1e143c7372335bb31a4804b82deafdc8600000000000000000000000026cf49310ab8e977e7729c3bbc2d581436d92175000000000000000000000000d975bb168c08742b2f585e815acaca5c56dba451000000000000000000000000f49b226cee7ac1765621e0b79c81270be4b21067", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}