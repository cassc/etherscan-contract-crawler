{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event Received(address caller, uint256 amount, string message);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    uint256 private _tTotal;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private fundAddress;\r\n\r\n    string private _symbol;\r\n    string private _name;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private fundFee = 300;\r\n    uint256 private lpFee = 500;\r\n    uint256 private burnFee = 200;\r\n\r\n    address private mainPair;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    ISwapRouter private _swapRouter;\r\n\r\n    uint256 private numTokensSellToFund;\r\n\r\n    TokenDistributor private _tokenDistributor;\r\n    address private usdt;\r\n\r\n    mapping(address => bool) private _feeWhiteList;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    mapping(address => uint256) private _getProfitLastTime;\r\n\r\n    mapping(address => uint256) private _addressLastSwapTime;\r\n\r\n    mapping(address => uint256) private _addressProfit;\r\n\r\n    uint256 private _daySecond = 86400;\r\n\r\n    uint256 private _dayProfitRate = 228;\r\n\r\n    uint256 private constant _dayProfitDivBase = 10000;\r\n\r\n    uint256 private _startTimeDeploy;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply\r\n    ) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        _startTimeDeploy = block.timestamp;\r\n\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n        mainPair = ISwapFactory(_swapRouter.factory()).createPair(\r\n            address(this),\r\n            usdt\r\n        );\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n\r\n        IERC20(usdt).approve(address(_swapRouter), MAX);\r\n\r\n        uint256 tTotal = Supply * 10**_decimals;\r\n        _tTotal = tTotal;\r\n\r\n        _balances[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"Transfer from the zero address\");\r\n        require(to != address(0), \"Transfer to the zero address\");\r\n\r\n        bool takeFee = false;\r\n        bool selling = false;\r\n\r\n        if (from == mainPair || to == mainPair) {\r\n            if (to == mainPair) {\r\n                selling = true;\r\n            }\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                takeFee = true;\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                bool overMinTokenBalance = contractTokenBalance >= numTokensSellToFund;\r\n                if (overMinTokenBalance && !inSwap && from != mainPair) {\r\n                    swapTokenForFund(numTokensSellToFund);\r\n                }\r\n            }\r\n        }\r\n        countProfit(from, to);\r\n        _tokenTransfer(from, to, amount, takeFee, selling);\r\n        \r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool selling\r\n    ) private {\r\n        uint256 realAmount = tAmount;\r\n        _balances[sender] -= realAmount;      \r\n        uint256 feeAmount;\r\n        uint256 burnAmount;\r\n        if (takeFee) {\r\n            if (selling) {\r\n                feeAmount = (realAmount * (fundFee + lpFee)) / 10000;\r\n                if (feeAmount > 0) {\r\n                    _takeTransfer(sender, address(this), feeAmount);\r\n                }\r\n                burnAmount = (realAmount * burnFee) / 10000;\r\n                if (burnAmount > 0) {\r\n                    _takeTransfer(sender, DEAD, burnAmount);\r\n                }\r\n\r\n                feeAmount += burnAmount;\r\n            } else {\r\n                feeAmount = (realAmount * (fundFee + lpFee)) / 10000;\r\n                if (feeAmount > 0) {\r\n                    _takeTransfer(sender, address(this), feeAmount);\r\n                }\r\n            }\r\n        }\r\n        uint256 recipientRealAmount = realAmount - feeAmount;\r\n        _takeTransfer(sender, recipient, recipientRealAmount);\r\n        \r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        uint256 lpAmount = (tokenAmount * lpFee) / (lpFee + fundFee) / 2;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        uint256 totalUsdtFee = fundFee + lpFee / 2;\r\n\r\n        uint256 usdtFund = (usdtBalance * fundFee) / totalUsdtFee;\r\n        USDT.transferFrom(address(_tokenDistributor), fundAddress, usdtFund);\r\n\r\n        uint256 lpUsdt = usdtBalance - usdtFund;\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), lpUsdt);\r\n        _swapRouter.addLiquidity(\r\n            address(this),\r\n            usdt,\r\n            lpAmount,\r\n            lpUsdt,\r\n            0,\r\n            0,\r\n            fundAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function isFeeWhiteList(address addr) external view returns (bool) {\r\n        return _feeWhiteList[addr];\r\n    }\r\n\r\n    function setNumTokensSellToFund(uint256 num) external onlyOwner {\r\n        numTokensSellToFund = num;\r\n    }\r\n\r\n    function getNumTokensSellToFund() external view returns (uint256) {\r\n        return numTokensSellToFund;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        _feeWhiteList[addr] = true;\r\n        fundAddress = addr;\r\n    }\r\n\r\n    function getFundAddress() external view returns (address) {\r\n        return fundAddress;\r\n    }\r\n\r\n    receive() external payable {\r\n        if (msg.value == 0) {\r\n            if ( block.timestamp - _getProfitLastTime[msg.sender] > 86400 && _addressLastSwapTime[msg.sender] > 0 ) {\r\n                _addressProfit[msg.sender] = _addressProfit[msg.sender] + (_balances[msg.sender] * (block.timestamp - _addressLastSwapTime[msg.sender]) * _dayProfitRate) / _dayProfitDivBase / _daySecond;\r\n\r\n                _balances[msg.sender] = _balances[msg.sender] + _addressProfit[msg.sender];\r\n                emit Transfer(\r\n                    address(0),\r\n                    msg.sender,\r\n                    _addressProfit[msg.sender]\r\n                );\r\n                _addressProfit[msg.sender] = 0;\r\n                _addressLastSwapTime[msg.sender] = block.timestamp;\r\n                _getProfitLastTime[msg.sender] = block.timestamp;\r\n                \r\n            }\r\n        }\r\n        emit Received(msg.sender, msg.value, \"fallback was called\");\r\n    }\r\n\r\n    function countProfit(\r\n        address from,\r\n        address to\r\n    ) private {\r\n        if (block.timestamp - _startTimeDeploy > 7776000) {\r\n            return;\r\n        }\r\n        if (from == mainPair || to == mainPair) {\r\n            if (from == mainPair) {\r\n                if (block.timestamp - _addressLastSwapTime[to] > 1) {\r\n                    _addressProfit[to] = _addressProfit[to] + (_balances[to] *  (block.timestamp - _addressLastSwapTime[to]) * _dayProfitRate) / _dayProfitDivBase / _daySecond;\r\n                    _addressLastSwapTime[to] = block.timestamp;\r\n                }\r\n            }\r\n            if (to == mainPair) {\r\n                if (block.timestamp - _addressLastSwapTime[from] > 1) {\r\n                    _addressProfit[from] = _addressProfit[from] + (_balances[from] * (block.timestamp - _addressLastSwapTime[from]) * _dayProfitRate) / _dayProfitDivBase / _daySecond;\r\n                    _addressLastSwapTime[from] = block.timestamp;\r\n                }\r\n            }\r\n        } else {\r\n            if (block.timestamp - _addressLastSwapTime[from] > 1) {\r\n                _addressProfit[from] = _addressProfit[from] + (_balances[from] * (block.timestamp - _addressLastSwapTime[from]) * _dayProfitRate) / _dayProfitDivBase / _daySecond;\r\n                _addressLastSwapTime[from] = block.timestamp;\r\n            }\r\n            if (block.timestamp - _addressLastSwapTime[to] > 1) {\r\n                _addressProfit[to] = _addressProfit[to] + (_balances[to] * (block.timestamp - _addressLastSwapTime[to]) * _dayProfitRate) / _dayProfitDivBase / _daySecond;\r\n                _addressLastSwapTime[to] = block.timestamp;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract RabbitZilla is AbsToken {\r\n    constructor() AbsToken(\"RabbitZilla\", \"RabbitZilla\", 18, 1 * 10**6) {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isFeeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RabbitZilla", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d497556bacfa347420e52a13f3159a6c5dd28e91b5cf21a2a738a0412f6d3832"}