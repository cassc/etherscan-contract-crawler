{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.4;\r\n\r\n    contract Ownable {\r\n        address public owner;\r\n        bool public paused = false;\r\n\r\n        constructor() {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner() {\r\n            require(msg.sender == owner, \"not owner\");\r\n            _;\r\n        }\r\n\r\n        modifier whenNotPaused() {\r\n            require(!paused, \"contract is paused\");\r\n            _;\r\n        }\r\n\r\n        function setOwner(address _newOwner) external onlyOwner {\r\n            require(_newOwner != address(0), \"invalid address\");\r\n            owner = _newOwner;\r\n        }\r\n\r\n        function pause() external onlyOwner {\r\n            paused = true;\r\n        }\r\n\r\n        function unpause() external onlyOwner {\r\n            paused = false;\r\n        }\r\n\r\n        function renounceOwnership() external onlyOwner {\r\n            owner = address(0);\r\n        }\r\n    }\r\n\r\n    contract DayBurnToken is Ownable {\r\n        string public constant name = \"DayBurn\";\r\n        string public constant symbol = \"DBT\";\r\n        uint256 public constant totalSupply = 100000000 * 1e18;\r\n        uint8 public constant decimals = 18;\r\n\r\n        address constant DevAddress = 0x4aA95be8674202cc4034a605A1E13a215FB3CB60;\r\n        address constant MarketingAddress = 0x8E3e4CAbF28E6CCF6E0042154CF416531815E13C;\r\n        address constant BurnAddress = 0x000000000000000000000000000000000000dEaD;\r\n        address constant LiquidityAddress = 0xF79C2bD7CC931C22E826eAe59F5eCA0E4FC64FC2;\r\n\r\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n        event Blacklisted(address indexed target);\r\n        event Unblacklisted(address indexed target);\r\n\r\n        mapping(address => uint256) private _rOwned;\r\n        mapping(address => mapping(address => uint256)) public allowance;\r\n        mapping(address => bool) public isBlacklisted;\r\n\r\n        uint256 private constant MAX_UINT = ~uint256(0);\r\n        uint256 private _rTotal = (MAX_UINT - (MAX_UINT % totalSupply));\r\n\r\n        uint256 public constant maxWalletToken = (totalSupply * 42) / 1000;  // 4.2% of total supply\r\n\r\n        uint256 public contractDeploymentTime;  // Added this to track deployment time\r\n\r\n    constructor() {\r\n        _rOwned[msg.sender] = _rTotal;\r\n        contractDeploymentTime = block.timestamp;  // Set the deployment time\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        return _rTotal / totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        return rAmount / _getRate();\r\n    }\r\n\r\n    function getCurrentBurnFee() public view returns (uint256) {\r\n        uint256 timeSinceDeployment = block.timestamp - contractDeploymentTime;\r\n        uint256 periodsElapsed = timeSinceDeployment / (1 days); // Each period is 1 day\r\n\r\n        // Assuming each period should double the fee, starting from 0.5% (or 500 in basis points)\r\n        uint256 currentBurnFee = 50 * (2 ** periodsElapsed);\r\n\r\n        if (currentBurnFee > 420) { // 4.2% in basis points\r\n            currentBurnFee = 420; // 4.2%\r\n        }\r\n\r\n        return currentBurnFee;\r\n    }\r\n\r\n    function blacklistAddress(address _address, bool _blacklisted) external onlyOwner whenNotPaused {\r\n        isBlacklisted[_address] = _blacklisted;\r\n        if (_blacklisted) {\r\n            emit Blacklisted(_address);\r\n        } else {\r\n            emit Unblacklisted(_address);\r\n        }\r\n    }\r\n\r\n    function _canTransfer(address _from, address _to, uint256 _value) private view returns (bool) {\r\n        if (isBlacklisted[_from] || isBlacklisted[_to]) return false;\r\n        if (_to == address(0)) return false;\r\n        if (_from != address(this) && _to != address(this) && _to != BurnAddress && balanceOf(_to) + _value > maxWalletToken) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_canTransfer(msg.sender, _to, _value), \"Transfer checks failed\");\r\n        _tokenTransfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_canTransfer(_from, _to, _value), \"Transfer checks failed\");\r\n        require(_value <= allowance[_from][msg.sender], \"Transfer amount exceeds allowance\");\r\n        allowance[_from][msg.sender] -= _value;\r\n        _tokenTransfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _tokenTransfer(address _from, address _to, uint256 _value) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rValue = _value * currentRate;\r\n        require(_rOwned[_from] >= rValue, \"Insufficient reflection balance\");\r\n        bool isSell = _to == address(this);\r\n        isSell ? _handleSellTransfer(_from, _to, _value, rValue, currentRate) : _handleNormalTransfer(_from, _to, rValue);\r\n    }\r\n\r\n    function _handleSellTransfer(address _from, address _to, uint256 _value, uint256 rValue, uint256 currentRate) internal {\r\n    uint256 burnFee = getCurrentBurnFee();\r\n    uint256 burnValue = _value * burnFee / 10000;\r\n    uint256 reflectionFeeValue = _value / 100;\r\n\r\n    // Calculate all the other values inside the emit and update statements to reduce local variables.\r\n    \r\n    _rOwned[_from] -= rValue;\r\n    _rOwned[_to] += rValue - (burnValue + _value * 2 / 1000 + _value * 5 / 1000 + _value / 100 + reflectionFeeValue) * currentRate;\r\n    \r\n    _rOwned[DevAddress] += _value * 2 / 1000 * currentRate;\r\n    emit Transfer(_from, DevAddress, _value * 2 / 1000);\r\n\r\n    _rOwned[MarketingAddress] += _value * 5 / 1000 * currentRate;\r\n    emit Transfer(_from, MarketingAddress, _value * 5 / 1000);\r\n\r\n    _rOwned[BurnAddress] += burnValue * currentRate;\r\n    emit Transfer(_from, BurnAddress, burnValue);\r\n\r\n    _rOwned[LiquidityAddress] += _value / 100 * currentRate;\r\n    emit Transfer(_from, LiquidityAddress, _value / 100);\r\n\r\n    // Update reflection total for reflection fee\r\n    _rTotal -= reflectionFeeValue * currentRate;\r\n\r\n    // Emit main sell transfer event\r\n    emit Transfer(_from, _to, _value - burnValue - _value * 2 / 1000 - _value * 5 / 1000 - _value / 100 - reflectionFeeValue);\r\n}\r\n\r\n\r\n    function _handleNormalTransfer(address _from, address _to, uint256 rValue) internal {\r\n        _rOwned[_from] -= rValue;\r\n        _rOwned[_to] += rValue;\r\n        emit Transfer(_from, _to, rValue / _getRate());\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_blacklisted\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDeploymentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DayBurnToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc018c6173ed3da14ec55b977ad07c368bcdf338f1992e41b45ed7c63cfea409"}