{"SourceCode": "pragma solidity 0.6.12;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\ncontract DebtProtocol is ERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;  \r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private _totalSupply = 100 * 10**9 * 10**DECIMALS;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address private unicryptFees;\r\n    address _treasury;\r\n    uint256 public unclaimedFees;\r\n\r\n    // info of each user.\r\n    struct UserInfo {\r\n        uint256 rewardDebt;     // reward debt. See explanation below.\r\n        uint256 lastUpdate;     // time at which the user made his last transaction. debtLag added when buying \r\n        uint256 currentTier;    // user's current tier.\r\n        //\r\n        // we do some fancy math here. basically, any point in time, the pending reward\r\n        // and pending debt of an user is:\r\n        //\r\n        //   pending reward = (balance * tier.accDebtPerShare) - user.rewardDebt\r\n        //   pending debt = (balance * tier.dailyHoldingFee * (current time - user.lastUpdate)) / 86 400.\r\n        //  \r\n        // whenever a user buys, sells or transfers tokens, here's what happens:\r\n        //   1. user's pending debt, pending reward and transaction fee are calculated.\r\n        //   2. the pending debt is transfered to the above tier's pool and its `accDebtPerShare` is updated.\r\n        //   3. the transaction fee is transfered to the below tier's pool and its `accDebtPerShare` is updated\r\n        //   4. the pending reward is transfered from the current tier's pool to the user.\r\n        //   5. the tokens bought, sold or transfered are sent.\r\n        //   6. user's `rewardDebt`, `lastUpdate` and `currentTier` are updated.\r\n        //   7. `tierSupply` from the user's new tier is updated.\r\n    }\r\n\r\n    // info of each tier.\r\n    struct TierInfo {\r\n        uint256 threshold;          // the amount needed to be part of that tier\r\n        uint256 sellingFee;         // the transaction fee for all users from this tier when selling tokens. 1 = 1%\r\n        uint256 dailyHoldingFee;    // the daily fee an user pays to the above tier. 1 = 1%\r\n        uint256 accDebtPerShare;    // accumulated TINGs per share, times 1e12. \r\n        uint256 tierSupply;         // sum of the amounts owned by all users of a tier (at the time they joined the tier).\r\n    } \r\n    \r\n    TierInfo[] public tierInfo;                         \r\n    mapping(address => UserInfo) public userInfo;                   \r\n    \r\n    mapping(address => bool) private hodlUser;          \t        // Users who never sold any token\r\n    uint256 public hodlBoost = 100;                                 // Bonus for determining the user's Tier for those who never sold any token. 100 = 100% bonus of amount owned\r\n    uint256 public debtLag = 12 hours;                         \t    // After buying tokens on Pancakeswap, disable the debt timer for 'debtLag'\r\n    uint256 public debtStartTime;                                   // Start of the debt timer, only relevant for people who received tokens before public listing    \r\n    uint256 public minAmountDebtLag = 20 * 10**6 * 10**DECIMALS;    // Minimum amount to buy to activate the debtLag\r\n\r\n    uint256 antiBotTimer;                                           // Prevent large transactions for 5 mins to avoid bots when adding liquidity\r\n    bool public redistributionPaused;                               // Cancel the Debt mechanism in case of protocol failure\r\n\t    \r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    \r\n\r\n    constructor(address master) public ERC20(\"Debt Protocol\", \"DEBT\") { \r\n        _treasury = master;\r\n        _balances[master] = _totalSupply;\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())                           // Create the DEBT-BNB Pancakeswap V2 pair\r\n            .createPair(address(this), address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));  \r\n        uniswapV2Router = _uniswapV2Router;\r\n        unicryptFees = 0x0d9B1e53CBb251572D982d9F96520E8D40d22bb0;\r\n        \r\n        _isExcluded[master] = true;\r\n        _isExcluded[address(this)] = true;\r\n        _isExcluded[address(0x0)] = true;\r\n        _isExcluded[uniswapV2Pair] = true;\r\n        _isExcluded[address(uniswapV2Router)] = true;\r\n        _isExcluded[unicryptFees] = true;\r\n\r\n        emit Transfer(address(0x0), master, _totalSupply);\r\n        \r\n        addTier(50000000, 0, 1);                            // Tier 0\r\n        addTier(250000000, 2, 1);                           // Tier 1\r\n        addTier(575000000, 2, 1);                           // Tier 2\r\n        addTier(1000000000, 2, 1);                          // Tier 3\r\n        addTier(500000000000, 2, 0);                        // Tier 4\r\n    }\r\n  \r\n\t  \t\r\n\r\n//------------------------------------------------------------//\r\n// Owner functions for setting up the contract and parameters //\r\n//------------------------------------------------------------//\r\n\r\n\r\n    function addTier(uint256 _threshold, uint256 _sellingFee, uint256 _dailyHoldingFee) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(_sellingFee >= 0 && _dailyHoldingFee >= 0 && _sellingFee <= 10 && _dailyHoldingFee <= 10, \"Fees can be between 0 & 10\");\r\n        tierInfo.push(\r\n            TierInfo({\r\n                threshold : _threshold * 10 ** 18,\r\n                sellingFee : _sellingFee,    \r\n                dailyHoldingFee : _dailyHoldingFee, \r\n                accDebtPerShare : 0,\r\n                tierSupply : 0\r\n            })\r\n        );\r\n    }\r\n    \r\n    function changeFeesOfTier(uint256 _tier, uint256 _newSellingFee, uint256 _newDailyHoldingFee)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_newSellingFee >= 0 && _newDailyHoldingFee >= 0 && _newSellingFee <= 10 && _newDailyHoldingFee <= 10, \"Fees can be between 0 & 10\");\r\n        tierInfo[_tier].sellingFee = _newSellingFee;\r\n        tierInfo[_tier].dailyHoldingFee = _newDailyHoldingFee;\r\n    }\r\n    \r\n    function changeThresholdOfTier(uint256 _tier, uint256 _newThreshold)\r\n        public\r\n        onlyOwner\r\n    {\r\n        tierInfo[_tier].threshold = _newThreshold * 10 ** 18;\r\n    }\r\n    \r\n    function changeHodlBoost(uint256 _newHodlBoost)\r\n        public\r\n        onlyOwner\r\n    {\r\n        hodlBoost = _newHodlBoost;\r\n    }\r\n    \r\n    function changeDebtLag(uint256 _newDebtLag)\r\n        public\r\n        onlyOwner\r\n    {\r\n        debtLag = _newDebtLag;\r\n    }\r\n    \r\n    function changeMinAmountDebtLag(uint256 _newMinAmountDebtLag)\r\n        public\r\n        onlyOwner\r\n    {\r\n        minAmountDebtLag = _newMinAmountDebtLag;\r\n    }\r\n    \r\n\tfunction setRedistributionPaused(bool _redistributionPaused)\t\r\n        public\t\r\n        onlyOwner\t\r\n    {\t\r\n        redistributionPaused = _redistributionPaused;\t\r\n    }\r\n    \r\n    function excludeAccount(address account) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeAccount(address account) \r\n        public \r\n        onlyOwner \r\n    {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n//------------------------------------------------------------//\r\n//              Usual overridden ERC20 functions              //\r\n//------------------------------------------------------------//   \r\n\r\n    function totalSupply() \r\n        public \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) \r\n        public \r\n        override \r\n        view \r\n        returns (uint256) \r\n    {\r\n        if (_isExcluded[account] || redistributionPaused) return _balances[account];\r\n        else return _balances[account].add(pendingReward(account)).sub(pendingDebt(account));\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = _allowances[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowances[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowances[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowances[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n//------------------------------------------------------------//\r\n//                      View Functions                        //\r\n//------------------------------------------------------------//  \r\n\r\n    function tierLength() public view returns (uint256) {\r\n        return tierInfo.length;\r\n    }\r\n    \r\n    function getTierOfUser(address _user) public view returns (uint256) {\r\n        return userInfo[_user].currentTier;\r\n    }\r\n\r\n    function getHodlingBoost(address _user) public view returns (bool) {\r\n        return hodlUser[_user];\r\n    }\r\n\r\n    function pendingDebt(address _user) public view returns (uint256) {\r\n        uint256 userTier = getTierOfUser(_user);\r\n        uint256 maxTier = tierInfo.length.sub(1);\r\n        if (userTier == maxTier || _balances[_user] == 0 || isExcluded(_user) || userInfo[_user].lastUpdate > now || debtStartTime == 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            uint256 startTime = userInfo[_user].lastUpdate > debtStartTime ? userInfo[_user].lastUpdate : debtStartTime;\r\n            uint256 duration = now.sub(startTime);\r\n            uint256 debtCycles = ((duration) - (duration % 600)).div(600);                  // debt is updated every 10 minutes in the user's balance\t\r\n            uint256 pending = _balances[_user].mul(tierInfo[userTier].dailyHoldingFee).div(100).mul(debtCycles);\t\r\n            if (pending.div(144) > _balances[_user]) return _balances[_user];\t\r\n            else return pending.div(144);\r\n        }\r\n    }\r\n    \r\n    function pendingReward(address _user) public view returns (uint256) {\r\n        if (isExcluded(_user) || _balances[_user] == 0) return 0;\r\n        else {\r\n            uint256 userTier = getTierOfUser(_user);\r\n            uint256 pending = _balances[_user].mul(tierInfo[userTier].accDebtPerShare).div(1e12).sub(userInfo[_user].rewardDebt);\r\n            return pending;\r\n        }\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    \r\n//------------------------------------------------------------//\r\n//                    Internal functions                      //\r\n//------------------------------------------------------------//  \r\n    \r\n    function manageTier(address _user, uint256 _newBalance, uint256 _oldBalance, bool _debtLag) internal {\r\n        uint256 boost = 100;\r\n        if (hodlUser[_user]) boost = boost.add(hodlBoost);\r\n        uint256 boostBalance = _newBalance.mul(boost).div(100);\r\n        \r\n        TierInfo[] storage tiers = tierInfo;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 oldTier = user.currentTier;\r\n        uint256 length = tiers.length;\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (boostBalance < tiers[i].threshold) {\r\n                TierInfo storage tierA = tiers[oldTier];\r\n                TierInfo storage tierB = tiers[i];\r\n                user.rewardDebt = _newBalance.mul(tierB.accDebtPerShare).div(1e12);\r\n                user.lastUpdate = now;\r\n                if (_debtLag) user.lastUpdate = user.lastUpdate.add(debtLag);\r\n                if (oldTier != i) {\r\n                    user.currentTier = i;\r\n                    if (_balances[_user] < _totalSupply.div(4)) tierB.tierSupply = tierB.tierSupply.add(_newBalance);  // Prevents the LP contract to count as a creditor before it is excluded\r\n                    if (_oldBalance > 0) tierA.tierSupply = tierA.tierSupply.sub(_oldBalance);\r\n                }\r\n                else tierA.tierSupply = tierA.tierSupply.add(_newBalance).sub(_oldBalance);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function manageDebt(address _user, uint256 _debt) internal {\r\n        uint256 _userTier = getTierOfUser(_user);\r\n        uint256 maxTier = tierInfo.length.sub(1);\r\n        if (_userTier != maxTier && _debt > 0) {\r\n            TierInfo storage aboveTier = tierInfo[_userTier.add(1)];\r\n            if (aboveTier.tierSupply != 0) {\t\r\n                uint256 accDebt = aboveTier.accDebtPerShare;\t\r\n                uint256 supply = aboveTier.tierSupply;\t\r\n                accDebt = accDebt.add(_debt.mul(1e12).div(supply));\t\r\n                aboveTier.accDebtPerShare = accDebt;\t\r\n            }\t\r\n            else unclaimedFees = unclaimedFees.add(_debt);\r\n            _balances[_user] = _balances[_user].sub(_debt);\r\n            _balances[address(this)] = _balances[address(this)].add(_debt);\r\n            emit Transfer(_user, address(this), _debt);\r\n        }\r\n    }\r\n    \r\n    function manageFee(address _user, uint256 _fee) internal {\r\n        uint256 _userTier = getTierOfUser(_user);\r\n        TierInfo storage lowerTier;\r\n        if (_userTier == 0) lowerTier = tierInfo[0];\r\n        else lowerTier = tierInfo[_userTier.sub(1)];\r\n        \r\n        if (lowerTier.tierSupply != 0) {\t\r\n            uint256 accDebt = lowerTier.accDebtPerShare;\t\r\n            uint256 supply = lowerTier.tierSupply;\t\r\n            accDebt = accDebt.add(_fee.mul(1e12).div(supply));\t\r\n            lowerTier.accDebtPerShare = accDebt;\t\r\n        }\t\r\n        else unclaimedFees = unclaimedFees.add(_fee);\r\n        _balances[_user] = _balances[_user].sub(_fee);\r\n        _balances[address(this)] = _balances[address(this)].add(_fee); \r\n        emit Transfer(_user, address(this), _fee);\r\n    }\r\n    \r\n    function manageReward(address _user, uint256 _reward) internal {\r\n        if (_reward > 0) {\r\n            _balances[_user] = _balances[_user].add(_reward);\r\n            _balances[address(this)] = _balances[address(this)].sub(_reward); \r\n             emit Transfer(address(this), _user, _reward);\r\n        }\r\n    }\r\n\r\n    \r\n//------------------------------------------------------------//\r\n//                  Transfer functions                        //\r\n//------------------------------------------------------------//  \r\n  \r\n    \r\n    function transfer(address recipient, uint256 amount) \r\n        public \r\n        override(ERC20) \r\n        returns (bool) \r\n    {\r\n        require(now.sub(antiBotTimer) >= 300 || amount <= 500000000 * 10**DECIMALS || recipient == unicryptFees, \"Max buy 500,000,000 DEBT right after launch\");\r\n        \r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) \r\n        public \r\n        override \r\n        returns (bool) \r\n    {\r\n        _transfer(sender, recipient, amount);\r\n        approve(sender, _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }  \r\n   \r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) \r\n        internal \r\n        override(ERC20) \r\n    {\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        if (redistributionPaused || amount >= _totalSupply.div(4)) {\t    // Prevents contracts managing LP to be adding to the debt mechanism       \r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if (recipient == uniswapV2Pair && debtStartTime == 0) {             // Starts debt timer + anti bot timer when liquidity is first added\r\n            require(_isExcluded[sender], \"Not allowed to add liquidity\");\r\n            debtStartTime = now;\r\n            antiBotTimer = now;\r\n        }   \r\n    }\r\n    \r\n    function _transferStandard(address sender, address recipient, uint256 debtAmount) private {\r\n        hodlUser[sender] = false;\r\n        uint256[4] memory pending = [pendingReward(sender), pendingDebt(sender), pendingReward(recipient), pendingDebt(recipient)];\r\n        uint256[2] memory oldBalances = [_balances[sender], _balances[recipient]];\r\n        \r\n        manageReward(sender, pending[0]);\r\n        manageDebt(sender, pending[1]);\r\n        if (oldBalances[1] > 0) {\r\n            manageReward(recipient, pending[2]);\r\n            manageDebt(recipient, pending[3]);\r\n        }\r\n            \r\n        _balances[recipient] = _balances[recipient].add(debtAmount);\r\n        _balances[sender] = _balances[sender].sub(debtAmount); \r\n            \r\n        uint256[2] memory newBalances = [_balances[sender], _balances[recipient]];            \r\n        manageTier(sender, newBalances[0], oldBalances[0], false);\r\n        manageTier(recipient, newBalances[1], oldBalances[1], false);\r\n        emit Transfer(sender, recipient, debtAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 debtAmount) private {\r\n        hodlUser[sender] = false;\r\n        uint256[2] memory pending = [pendingReward(sender), pendingDebt(sender)];\r\n        uint256 userTier = getTierOfUser(sender);\r\n        uint256 oldBalance = _balances[sender];\r\n        uint256 fee = debtAmount.mul(tierInfo[userTier].sellingFee).div(100);\r\n\r\n        manageReward(sender, pending[0]);\r\n        manageDebt(sender, pending[1]);\r\n        manageFee(sender, fee);\r\n        \r\n        uint256 debtTransferAmount = debtAmount.sub(fee);\r\n        _balances[recipient] = _balances[recipient].add(debtTransferAmount);\r\n        _balances[sender] = _balances[sender].sub(debtTransferAmount); \r\n            \r\n        uint256 newBalance = _balances[sender];\r\n        manageTier(sender, newBalance, oldBalance, false);\r\n        emit Transfer(sender, recipient, debtTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 debtAmount) private {\r\n        uint256 oldBalance = _balances[recipient];\r\n        if (oldBalance == 0) hodlUser[recipient] = true; \r\n        if (oldBalance > 0) {\r\n            uint256[2] memory pending = [pendingReward(recipient), pendingDebt(recipient)];\r\n        \r\n            manageDebt(recipient, pending[1]);\r\n            manageReward(recipient, pending[0]);\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(debtAmount);\r\n        _balances[sender] = _balances[sender].sub(debtAmount); \r\n        \r\n        uint256 newBalance = _balances[recipient];\r\n        if (debtAmount >= minAmountDebtLag && oldBalance > 0 && debtStartTime > 0) manageTier(recipient, newBalance, oldBalance, true);\r\n        else manageTier(recipient, newBalance, oldBalance, false);\r\n        emit Transfer(sender, recipient, debtAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 debtAmount) private {\r\n        _balances[recipient] = _balances[recipient].add(debtAmount);\r\n        _balances[sender] = _balances[sender].sub(debtAmount); \r\n        emit Transfer(sender, recipient, debtAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"master\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyHoldingFee\",\"type\":\"uint256\"}],\"name\":\"addTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDebtLag\",\"type\":\"uint256\"}],\"name\":\"changeDebtLag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSellingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDailyHoldingFee\",\"type\":\"uint256\"}],\"name\":\"changeFeesOfTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newHodlBoost\",\"type\":\"uint256\"}],\"name\":\"changeHodlBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinAmountDebtLag\",\"type\":\"uint256\"}],\"name\":\"changeMinAmountDebtLag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"changeThresholdOfTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtLag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHodlingBoost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTierOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hodlBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountDebtLag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_redistributionPaused\",\"type\":\"bool\"}],\"name\":\"setRedistributionPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyHoldingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDebtPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tierSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tierLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DebtProtocol", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d278485a2132ecc8b4e6dbe417ae673466db08d7", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26132742d07c6bad094bae2f020aa7980947bbb00705f220b6e7a030fa5c9293"}