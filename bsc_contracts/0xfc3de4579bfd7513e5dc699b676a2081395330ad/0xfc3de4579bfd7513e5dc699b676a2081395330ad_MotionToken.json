{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MotionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n//--- Context ---//\\r\\nabstract contract Context {\\r\\n    constructor() {\\r\\n    }\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this;\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n//--- Ownable ---//\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IFactoryV2 {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\\r\\n}\\r\\n\\r\\ninterface IV2Pair {\\r\\n    function factory() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\ninterface IRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin, \\r\\n        address[] calldata path, \\r\\n        address to, uint deadline\\r\\n    ) external payable returns (uint[] memory amounts);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IRouter02 is IRouter01 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n//--- Interface for ERC20 ---//\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function name() external view returns (string memory);\\r\\n    function getOwner() external view returns (address);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n//--- Contract v2 ---//\\r\\ncontract MotionToken is Context, Ownable, IERC20 {\\r\\n\\r\\n    function totalSupply() external pure override returns (uint256) { if (_totalSupply == 0) { revert(); } return _totalSupply; }\\r\\n    function decimals() external pure override returns (uint8) { if (_totalSupply == 0) { revert(); } return _decimals; }\\r\\n    function symbol() external pure override returns (string memory) { return _symbol; }\\r\\n    function name() external pure override returns (string memory) { return _name; }\\r\\n    function getOwner() external view override returns (address) { return owner(); }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return balance[account];\\r\\n    }\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => bool) private _noFee;\\r\\n    mapping (address => bool) private isLpPair;\\r\\n    mapping (address => uint256) private balance;\\r\\n    mapping(address => bool) private _isBot; \\r\\n\\r\\n    uint256 constant public _totalSupply = 5e9 * 10**18;\\r\\n    uint256 public swapThreshold = 1000000 * 10 ** 18; \\r\\n    uint256 public maxTxAmount = 50000000 * 10**18; // 1% of the supply\\r\\n    uint256 public buyfee = 0;\\r\\n    uint256 public sellfee = 50;\\r\\n    uint256 public transferfee = 0;\\r\\n    uint256 constant public fee_denominator = 1000;\\r\\n    bool private canSwapFees = false;\\r\\n    address payable private marketingAddress;\\r\\n    address public circulatingSupplyWallet = 0xb7A681D261EeDB90c41664c0d3dA49402Ec57fCB; // add Liquidty and circulating supply wallet address\\r\\n    address public rewardWallet = 0x71D05c1Dfb4F1AF5E6cCe4C4865a8cCe34EA2914; // add reward wallet address\\r\\n    address public devTeamWallet = 0x81ea96678cAd9fd9476A093455C30D3655627c1a; // add Dev teams wallet address\\r\\n    uint256 public first72HourRestriction = block.timestamp + 86400;\\r\\n    uint256 public first72hoursFee = 75;\\r\\n\\r\\n    IRouter02 public swapRouter;\\r\\n    string constant private _name = \\\"Motion\\\";\\r\\n    string constant private _symbol = \\\"MOTN\\\";\\r\\n    uint8 constant private _decimals = 18;\\r\\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public lpPair;\\r\\n    bool public isTradingEnabled = false;\\r\\n    bool private inSwap;\\r\\n\\r\\n        modifier inSwapFlag {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    event _enableTrading();\\r\\n    event _toggleCanSwapFees(bool enabled);\\r\\n    event _changePair(address newLpPair);\\r\\n    event _changeWallets(address marketing);\\r\\n    event _changeMaxTransactionLimit(uint256 maxTxAmount);\\r\\n\\r\\n    constructor (address _swapRouter, address _marketingAddress) {\\r\\n        \\r\\n        swapRouter = IRouter02(_swapRouter);\\r\\n        marketingAddress = payable(_marketingAddress);\\r\\n        balance[circulatingSupplyWallet] = (_totalSupply * 60) / 100;\\r\\n        balance[rewardWallet] = (_totalSupply * 30) / 100;\\r\\n        balance[devTeamWallet] = (_totalSupply * 10) / 100;\\r\\n\\r\\n        lpPair = IFactoryV2(swapRouter.factory()).createPair(swapRouter.WETH(), address(this));\\r\\n        isLpPair[lpPair] = true;\\r\\n        \\r\\n        _approve(msg.sender, address(swapRouter), type(uint256).max);\\r\\n        _approve(address(this), address(swapRouter), type(uint256).max);\\r\\n\\r\\n\\r\\n        _noFee[address(this)] = true;\\r\\n        _noFee[marketingAddress] = true;\\r\\n        _noFee[msg.sender] = true;\\r\\n        _noFee[circulatingSupplyWallet] = true;\\r\\n        _noFee[rewardWallet] = true;\\r\\n        _noFee[devTeamWallet] = true;\\r\\n\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n    }\\r\\n    \\r\\n    function openTrading() external onlyOwner() {\\r\\n        require(!isTradingEnabled,\\\"trading is already open\\\");\\r\\n        isTradingEnabled = true;\\r\\n        first72HourRestriction = block.timestamp + 259200;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\tfunction approve(address spender, uint256 amount) external override returns (bool) {\\r\\n\\t_approve(msg.sender, spender, amount);\\r\\n\\treturn true;\\r\\n    }\\r\\n\\r\\n\\tfunction _approve(address sender, address spender, uint256 amount) internal {\\r\\n\\trequire(sender != address(0), \\\"ERC20: Zero Address\\\");\\r\\n\\trequire(spender != address(0), \\\"ERC20: Zero Address\\\");\\r\\n\\r\\n\\t_allowances[sender][spender] = amount;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\r\\n            _allowances[sender][msg.sender] -= amount;\\r\\n        }\\r\\n\\r\\n        return _transfer(sender, recipient, amount);\\r\\n    }\\r\\n    function isNoFeeWallet(address account) external view returns(bool) {\\r\\n        return _noFee[account];\\r\\n    }\\r\\n\\r\\n    function setNoFeeWallet(address account, bool enabled) external onlyOwner {\\r\\n        _noFee[account] = enabled;\\r\\n    }\\r\\n\\r\\n    function set72hourfee(uint256 _fee) external onlyOwner{\\r\\n        require(first72HourRestriction >=block.timestamp, \\\"Time expired to set this value\\\");\\r\\n        first72hoursFee = _fee;\\r\\n    }\\r\\n\\r\\n    function remove72hourRestriction() external onlyOwner{\\r\\n        first72HourRestriction = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function isLimitedAddress(address ins, address out) internal view returns (bool) {\\r\\n        bool isLimited = ins != owner()\\r\\n            && out != owner() && msg.sender != owner()\\r\\n            && out != DEAD && out != address(0) && out != address(this);\\r\\n            return isLimited;\\r\\n    }\\r\\n\\r\\n    function is_buy(address _from, address _to) internal view returns (bool) {\\r\\n        bool _is_buy = !isLpPair[_to] && isLpPair[_from];\\r\\n        return _is_buy;\\r\\n    }\\r\\n\\r\\n    function is_sell(address _from, address _to) internal view returns (bool) {\\r\\n        bool _is_sell = isLpPair[_to] && !isLpPair[_from];\\r\\n        return _is_sell;\\r\\n    }\\r\\n\\r\\n    function canSwap() internal view returns (bool) {\\r\\n        bool canswap = canSwapFees;\\r\\n        return canswap;\\r\\n    }\\r\\n\\r\\n    function changeSwapThreshold(uint256 _amount) external onlyOwner {\\r\\n        require(_amount >= 10000, \\\"Threshold is too loo\\\");\\r\\n        swapThreshold = _amount * 10**18;\\r\\n    }\\r\\n\\r\\n    function changeLpPair(address newPair) external onlyOwner {\\r\\n        lpPair = newPair;\\r\\n        isLpPair[newPair] = true;\\r\\n        emit _changePair(newPair);\\r\\n    }\\r\\n\\r\\n    function toggleCanSwapFees(bool yesno) external onlyOwner {\\r\\n        require(canSwapFees != yesno,\\\"Bool is the same\\\");\\r\\n        canSwapFees = yesno;\\r\\n        emit _toggleCanSwapFees(yesno);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal returns  (bool) {\\r\\n        bool takeFee = true;\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(amount <= balanceOf(from), \\\"You are trying to transfer more than your balance\\\");\\r\\n        require(!_isBot[from] && !_isBot[to], \\\"You are a bot\\\");\\r\\n        require(isTradingEnabled || _noFee[from] || _noFee[to], \\\"Trading not yet enabled!\\\");\\r\\n\\r\\n        if(is_sell(from, to) &&  !inSwap && canSwap()) {\\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if(contractTokenBalance >= swapThreshold) { internalSwap(contractTokenBalance); }\\r\\n        }\\r\\n\\r\\n        if (_noFee[from] || _noFee[to]){\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        balance[from] -= amount; uint256 amountAfterFee = (takeFee) ? takeTaxes(from, is_buy(from, to), is_sell(from, to), amount) : amount;\\r\\n        balance[to] += amountAfterFee; emit Transfer(from, to, amountAfterFee);\\r\\n        return true;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function takeTaxes(address from, bool isbuy, bool issell, uint256 amount) internal returns (uint256) {\\r\\n        uint256 fee;\\r\\n        require(amount <= maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\r\\n        if (isbuy){\\r\\n            fee = buyfee;\\r\\n        } else if (issell) { \\r\\n            fee = (block.timestamp >= first72HourRestriction) ? sellfee : first72hoursFee;\\r\\n        }  \\r\\n        else  fee = transferfee;  \\r\\n        if (fee == 0)  return amount;\\r\\n        uint256 feeAmount = amount * fee / fee_denominator;\\r\\n        if (feeAmount > 0) {\\r\\n\\r\\n            balance[address(this)] += feeAmount;\\r\\n            emit Transfer(from, address(this), feeAmount);\\r\\n            \\r\\n        }\\r\\n        return amount - feeAmount;\\r\\n    }\\r\\n\\r\\n    function internalSwap(uint256 contractTokenBalance) internal inSwapFlag {\\r\\n        \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = swapRouter.WETH();\\r\\n\\r\\n        if (_allowances[address(this)][address(swapRouter)] != type(uint256).max) {\\r\\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\\r\\n        }\\r\\n\\r\\n        try swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            contractTokenBalance,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        ) {} catch {\\r\\n            return;\\r\\n        }\\r\\n        bool success;\\r\\n\\r\\n        if(address(this).balance > 0) {(success,) = marketingAddress.call{value: address(this).balance, gas: 35000}(\\\"\\\");}\\r\\n\\r\\n    }\\r\\n\\r\\n    function changeTaxes(uint256 _buyTax, uint256 _sellTax, uint256 _transferFee) external onlyOwner {\\r\\n        require(_buyTax <= 100, \\\"Buy tax cannot exceed 10%\\\"); // 100 represents 10%\\r\\n        require(_sellTax <= 100, \\\"Sell tax cannot exceed 10%\\\"); // 100 represents 10%\\r\\n        require(_transferFee <= 100, \\\"Transfer tax cannot exceed 10%\\\"); // 100 represents 10%\\r\\n        transferfee = _transferFee;\\r\\n        sellfee = _sellTax;\\r\\n        buyfee = _buyTax;\\r\\n    }\\r\\n\\r\\n    function changeTaxWallets(address marketing) external onlyOwner {\\r\\n        marketingAddress = payable(marketing);\\r\\n        emit _changeWallets(marketing);\\r\\n    }\\r\\n\\r\\n    function changeMaxTransactionLimit(uint256 _maxTransaction) external onlyOwner {\\r\\n    require(_maxTransaction >= 10000000, \\\"Max transaction limit is too loo\\\");\\r\\n    maxTxAmount = _maxTransaction;\\r\\n    emit _changeMaxTransactionLimit(maxTxAmount);\\r\\n    }\\r\\n\\r\\n\\tfunction bulkAntiBot(\\r\\n        address[] memory accounts,\\r\\n        bool state\\r\\n    ) external onlyOwner {\\r\\n        require(accounts.length <= 100, \\\"Address: Invalid\\\");\\r\\n        for (uint256 i = 0; i < accounts.length; i++) {\\r\\n            if (_isBot[accounts[i]] != state) _isBot[accounts[i]] = state;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function airdropTokens(\\r\\n        address[] memory recipients,\\r\\n        uint256[] memory amounts\\r\\n    ) external onlyOwner returns (bool) {\\r\\n        require(recipients.length == amounts.length, \\\"Invalid size\\\");\\r\\n        for (uint256 i; i < recipients.length; i++) {\\r\\n            _transfer(_msgSender(), recipients[i], amounts[i]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction rescueETH(uint256 weiAmount) external onlyOwner {\\r\\n        require(address(this).balance >= weiAmount, \\\"insufficient ETH balance\\\");\\r\\n        payable(owner()).transfer(weiAmount);\\r\\n    }\\r\\n\\r\\n    // Function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\\r\\n    // Owner cannot transfer _to catecoin from this smart contract\\r\\n    function rescueAnyERC20Tokens(\\r\\n        address _tokenAddr,\\r\\n        address _to,\\r\\n        uint _amount\\r\\n    ) public onlyOwner {\\r\\n        IERC20(_tokenAddr).transfer(_to, _amount);\\r\\n    }      \\r\\n    \\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"_changeMaxTransactionLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLpPair\",\"type\":\"address\"}],\"name\":\"_changePair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"name\":\"_changeWallets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"_enableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_toggleCanSwapFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"bulkAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"changeLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransaction\",\"type\":\"uint256\"}],\"name\":\"changeMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"name\":\"changeTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"changeTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupplyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devTeamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first72HourRestriction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first72hoursFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNoFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remove72hourRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"set72hourfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setNoFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"toggleCanSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MotionToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e0000000000000000000000003faa25eca75a185cb2379b14f41bedb0d9c93636", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}