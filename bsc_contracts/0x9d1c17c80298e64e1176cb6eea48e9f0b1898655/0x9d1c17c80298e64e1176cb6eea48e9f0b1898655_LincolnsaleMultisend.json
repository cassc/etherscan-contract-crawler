{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-01-17\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// BladeMultiSender\r\n// Version 1.0\r\n// testing on bsc testnet.\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    // function approve(address spender, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns(uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        require(a == b * c + a % b);\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns(uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    function max64(uint64 a, uint64 b) internal pure returns(uint64) {\r\n        return a >= b ? a: b;\r\n    }\r\n    function min64(uint64 a, uint64 b) internal pure returns(uint64) {\r\n        return a < b ? a: b;\r\n    }\r\n    function max256(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a >= b ? a: b;\r\n    }\r\n    function min256(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a < b ? a: b;\r\n    }\r\n}\r\n\r\ncontract LincolnsaleMultisend {\r\n    using SafeMath for uint;\r\n\r\n    event LogTokenBulkSentETH(address from, uint256 total);\r\n    event LogTokenBulkSent(address token, address from, uint256 total);\r\n    event LogTokenApproval(address token, uint256 total);\r\n    address public _owner;\r\n    uint public _fee = 0.0003 ether;\r\n    address[] public airdropUsers;\r\n    mapping (address => bool) isAdded; // default `false`\r\n    uint totalAirdroppedSent;\r\n\r\n    uint starter = 1000000000000000000;\r\n    uint premium = 3000000000000000000;\r\n    uint business = 7000000000000000000;\r\n\r\n    event vipAdded(uint subscriberId, address subs, uint sType, uint _amount, uint _currentTime, uint _duration );\r\n\r\n    struct VipUsers{\r\n        uint vipId;\r\n        address vipAddress;\r\n        uint subType;\r\n        uint amount;\r\n        bool status;\r\n        uint dateSubscribe;\r\n        uint expDate;\r\n    }\r\n\r\n    VipUsers public vipUsers;\r\n    uint public subscriberCount;\r\n    mapping(address => VipUsers) public vipClients;\r\n    \r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() payable{\r\n        _owner = msg.sender;\r\n    }\r\n    receive() external payable { }\r\n    function recoverETHfromContract() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    // Withdraw ERC20 tokens that are potentially stuck\r\n    function recoverTokensFromContract(address _tokenAddress, uint256 _amount) external onlyOwner {                               \r\n        IERC20(_tokenAddress).transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function getFee() public view returns (uint) {\r\n        return _fee;\r\n    }\r\n\r\n    function getSubscriptionFee() public view returns (uint, uint, uint) {\r\n        return (starter, premium, business);\r\n    }\r\n\r\n    function totalAirdropAddress() public view returns(uint, uint){\r\n        return (airdropUsers.length, totalAirdroppedSent);\r\n    }\r\n\r\n    function getAirdropAddresses() public view returns(address[] memory){\r\n        return airdropUsers;\r\n    }\r\n\r\n    function fetchAllVipUser() public view returns(VipUsers memory) {\r\n        return vipUsers;\r\n    }\r\n    \r\n    function checkVipStatus() public view returns(bool){\r\n        if(vipClients[msg.sender].expDate > block.timestamp){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function ethSendSameValue(address[] memory _to, uint256 _value) external payable {\r\n        \r\n        uint256 sendAmount = _to.length.mul(_value);\r\n        uint256 remainingValue = msg.value;\r\n        address from = msg.sender;\r\n        require(msg.sender==owner() || checkVipStatus()==true, \"You can't use this servuce\");\r\n        require(remainingValue >= sendAmount, 'insuf balance');\r\n        require(_to.length <= 255, 'exceed max allowed');\r\n\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            require(payable(_to[i]).send(_value), 'failed to send');\r\n            if(!isAdded[_to[i]]){\r\n            airdropUsers.push(_to[i]);\r\n            isAdded[_to[i]] = true;\r\n            }\r\n            totalAirdroppedSent++;\r\n        }\r\n\r\n        emit LogTokenBulkSentETH(from, remainingValue);\r\n    }\r\n\r\n    function ethSendDifferentValue(address[] memory _to, uint[] memory _value) external payable {\r\n        \r\n        uint sendAmount = _value[0];\r\n        uint remainingValue = msg.value;\r\n        address from = msg.sender;\r\n        require(msg.sender==owner() || checkVipStatus()==true, \"You can't use this servuce\");\r\n        require(remainingValue >= sendAmount, 'insuf balance');\r\n        require(_to.length == _value.length, 'invalid input');\r\n        require(_to.length <= 255, 'exceed max allowed');    \r\n\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            require(payable(_to[i]).send(_value[i]));\r\n            if(!isAdded[_to[i]]){\r\n            airdropUsers.push(_to[i]);\r\n            isAdded[_to[i]] = true;\r\n            }\r\n            totalAirdroppedSent++;\r\n        }\r\n        emit LogTokenBulkSentETH(from, remainingValue);\r\n        \r\n\r\n    }\r\n\r\n\r\n    function sendSameValue(address _tokenAddress, address[] memory _to, uint256 _value) external payable{\r\n       \r\n        address from = msg.sender;\r\n        require(_to.length <= 255, 'exceed max allowed');\r\n        uint256 sendAmount = _to.length.mul(_value);\r\n\r\n        uint charges = _fee * _to.length;\r\n        require(msg.sender==owner() || charges <= msg.value || checkVipStatus()==true, \"You can't use this servuce\");\r\n        IERC20 token = IERC20(_tokenAddress);\r\n       // token.approve(address(this), sendAmount);\r\n        \r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            token.transferFrom(from, _to[i], _value);\r\n            if(!isAdded[_to[i]]){\r\n            airdropUsers.push(_to[i]);\r\n            isAdded[_to[i]] = true;\r\n            }\r\n            totalAirdroppedSent++;\r\n        }\r\n        emit LogTokenBulkSent(_tokenAddress, from, sendAmount);\r\n\r\n    }\r\n\r\n    function sendDifferentValue(address _tokenAddress, address[] memory _to, uint256[] memory _value) external payable {\r\n        \r\n        address from = msg.sender;\r\n        require(_to.length == _value.length, 'invalid input');\r\n        require(_to.length <= 255, 'exceed max allowed');\r\n        uint charges = _fee * _to.length;\r\n        require(msg.sender==owner() || charges <= msg.value || checkVipStatus()==true, \"You can't use this servuce\");\r\n\r\n        uint256 sendAmount = 0;\r\n        \r\n        IERC20 token = IERC20(_tokenAddress);\r\n      //  token.approve(address(this), sendAmount); //aprove token before sending it\r\n\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            token.transferFrom(msg.sender, _to[i], _value[i]);\r\n            \r\n            if(!isAdded[_to[i]]){\r\n            airdropUsers.push(_to[i]);\r\n            isAdded[_to[i]] = true;\r\n            }\r\n            totalAirdroppedSent++;\r\n            sendAmount.add(_value[i]);\r\n        }\r\n        emit LogTokenBulkSent(_tokenAddress, from, sendAmount);\r\n    }\r\n\r\n    function changeFee(uint _amount) public onlyOwner{\r\n        _fee = _amount;\r\n    }\r\n\r\n    //subscribe to vip\r\n    function subscribeToVip(uint subType, address client) payable public {\r\n        subscriberCount += 1;\r\n       uint amount = msg.value;\r\n        address subscriber = client;\r\n        \r\n        bool status = true;\r\n        uint timestamp = block.timestamp;\r\n        uint expDate;\r\n\r\n        if(msg.sender != owner()){\r\n        if(subType==1){\r\n            expDate = timestamp + (86400 * 1);\r\n            require(amount >= starter, \"You must have minimum of 1BNB to subscribe\");\r\n        }\r\n        else if(subType==2){\r\n            expDate = timestamp + (86400 * 7);\r\n            require(amount >= premium, \"You must have minimum of 2BNB to subscribe\");\r\n        }\r\n        else{\r\n           expDate = timestamp + (86400 * 30);\r\n            require(amount >= business, \"You must have minimum of 5BNB to subscribe\");\r\n        }\r\n        }\r\n       // payable(address(this)).transfer(amount);\r\n\r\n        vipClients[subscriber] = VipUsers(subscriberCount, subscriber, subType, amount, status, timestamp, expDate );\r\n        emit vipAdded(subscriberCount, subscriber, subType, amount, timestamp, expDate);\r\n    }\r\n\r\n    function ApproveERC20Token (address _tokenAddress, uint256 _value) external  {\r\n        IERC20 token = IERC20(_tokenAddress);\r\n        token.approve(address(this), _value); //Approval of spacific amount or more, this will be an idependent approval\r\n        emit LogTokenApproval(_tokenAddress, _value);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenBulkSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenBulkSentETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriberId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currentTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"vipAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ApproveERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdropUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVipStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"ethSendDifferentValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ethSendSameValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllVipUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vipId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vipAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dateSubscribe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expDate\",\"type\":\"uint256\"}],\"internalType\":\"struct LincolnsaleMultisend.VipUsers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAirdropAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverETHfromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokensFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"sendDifferentValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendSameValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"subscribeToVip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirdropAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipClients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vipId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vipAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dateSubscribe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vipUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vipId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vipAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dateSubscribe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LincolnsaleMultisend", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3bc6a31d6ba92acfe6f3f27270566c63281418a0729eacdc1f277f1c6d024c0"}