{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: work/token.sol\r\n\r\n\r\n\r\npragma solidity 0.8.11;\r\n\r\n\r\n\r\n\r\n\r\ncontract OOEStakePool is ReentrancyGuard,Ownable{\r\n\r\n    struct Lock{\r\n        address locker;\r\n        uint256 lockId;\r\n        uint256 timestampLockStart;\r\n        uint256 timestampLockEnd;\r\n        uint256 OOELockedAmount;\r\n        uint256 XOOEBaseAmount;\r\n        uint256 lockTimeUnit;\r\n        State state;       \r\n    }\r\n\r\n    struct init{\r\n        address user;\r\n        uint256 totalOOE;\r\n        uint256 availableOOE;\r\n        uint256[] lockId;\r\n        Lock[] locks;\r\n    }\r\n\r\n    enum State {\r\n        UNSTART,\r\n        LOCKING,\r\n        COMPLETE\r\n    }\r\n\r\n    enum MixLockType {\r\n        AllEXTERNAL,\r\n        ALLREVERSE,\r\n        MIX\r\n    }\r\n   \r\n   \r\n    bool public pause;\r\n    IERC20 public OOE;\r\n    uint256 public period;  // period for the rate, eg. 1 month == 2592000(60 x 60 x 24 x30)\r\n    uint256 public punishmentDegree;\r\n    uint256 public minimumIncrease;         //6.5% == 6500\r\n\r\n    mapping (address => uint256) public totalOOE;\r\n    mapping (address => uint256) public availableOOE;\r\n    mapping (uint256 => Lock) public lockDetail;\r\n    mapping (address => uint256[]) private _locksId;\r\n    mapping (uint256 => uint256) public rates; //rates, not APY. eg. need 12% : insert 1200000000\r\n    \r\n    event logAddOOEToPool(uint256 amount);\r\n    event logHarvest(address user, Lock lock);\r\n    event logLocks(address user, Lock[] lock);\r\n    event logLock(address user, Lock lock);\r\n    event logUnLock(address user,Lock lock);\r\n    event logUserWithdrew(address user, uint256 amount);\r\n\r\n\r\n    modifier notPause() {\r\n        require(!pause, \"OPENOCEAN_STAKING_POOL_V1:PAUSE_NOW\");\r\n        _;\r\n    }\r\n\r\n    constructor(IERC20 OOE_) {\r\n        OOE = OOE_;\r\n    }\r\n\r\n\r\n    function setPause(bool pauseOrNot) external onlyOwner {\r\n        pause = pauseOrNot;\r\n    }\r\n\r\n    function setRates(uint256[] memory months, uint256[] memory _rates) external onlyOwner {\r\n        require(months.length == _rates.length, \"OPENOCEAN_STAKING_POOL_V1:WRONG_INPUT\");\r\n        uint256 locksAmount = months.length;\r\n        for(uint256 i = 0; i<locksAmount; i++){\r\n            rates[months[i]] = _rates[i];\r\n        }\r\n    }\r\n\r\n    function setMinimumIncrease(uint256 minimum) public onlyOwner{\r\n        minimumIncrease = minimum;\r\n    }\r\n\r\n    function setPeriod(uint256 _period) public onlyOwner{\r\n        period = _period;\r\n    }\r\n\r\n    function setPunishmentDegree(uint256 degree) public onlyOwner{\r\n        punishmentDegree = degree;\r\n    }\r\n\r\n    function getVotingPower(address voter) public view returns(uint256){\r\n        uint256 locksAmount = _locksId[voter].length;\r\n        uint256 power;\r\n        for(uint256 i = 0; i < locksAmount; i++){\r\n            Lock memory lo = lockDetail[_locksId[voter][i]];\r\n            if(lo.state == State.LOCKING){\r\n                if(lo.timestampLockEnd > block.timestamp){\r\n                    power = power + lo.OOELockedAmount + (lo.XOOEBaseAmount - lo.OOELockedAmount) * (block.timestamp - lo.timestampLockStart)/(lo.timestampLockEnd - lo.timestampLockStart);\r\n                }else{\r\n                    power = power + lo.XOOEBaseAmount + (block.timestamp - lo.timestampLockEnd) * minimumIncrease * lo.XOOEBaseAmount / 3110400000000;\r\n                }\r\n            }\r\n        }\r\n        return power;\r\n    }\r\n\r\n    function getOOEAmountInpool() public view returns(uint256){\r\n        return OOE.balanceOf(address(this));\r\n    }\r\n\r\n    function getUserAllLockId(address user_) public view returns(uint256[] memory){\r\n        return _locksId[user_];\r\n    }\r\n\r\n    function getUserStakingOOE(address user) public view returns(uint256){\r\n        return totalOOE[user] - availableOOE[user];\r\n    }\r\n\r\n    function getBatchStakeAmount(Lock[] memory _lock) public pure returns(uint256){\r\n        uint256 amount;\r\n        for(uint256 i; i<_lock.length;i++){\r\n            amount = amount + _lock[i].OOELockedAmount;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function addOOEToPool(uint256 amount) external{\r\n        OOE.transferFrom(msg.sender, address(this), amount);\r\n        emit logAddOOEToPool(amount);\r\n    }\r\n\r\n// harvest all the locks OOE\r\n    function harvestall() external notPause{\r\n        uint256 locksAmount = _locksId[msg.sender].length;\r\n        for(uint256 i = 0; i<locksAmount; i++){\r\n            Lock storage lo = lockDetail[_locksId[msg.sender][i]];\r\n            if(block.timestamp > lo.timestampLockEnd && lo.state == State.LOCKING){\r\n            lo.state = State.COMPLETE;\r\n            availableOOE[msg.sender] = availableOOE[msg.sender] + lo.XOOEBaseAmount + (block.timestamp - lo.timestampLockEnd) * minimumIncrease * lo.XOOEBaseAmount / 3110400000000;\r\n            totalOOE[msg.sender] = totalOOE[msg.sender] + lo.XOOEBaseAmount - lo.OOELockedAmount + (block.timestamp - lo.timestampLockEnd) * minimumIncrease * lo.XOOEBaseAmount / 3110400000000;\r\n            emit logHarvest(msg.sender,lo);\r\n            }\r\n        }\r\n    }\r\n//harvest aimed locks\r\n    function harvest(uint256[] calldata lockid) external notPause{\r\n        uint256 locksAmount = lockid.length;\r\n        for(uint256 i = 0; i<locksAmount; i++){\r\n            Lock storage lo = lockDetail[lockid[i]];\r\n            require(lo.state == State.LOCKING,\"OPENOCEAN_STAKING_POOL_V1:BAD_ORDER\");\r\n            if(block.timestamp > lo.timestampLockEnd){\r\n            lo.state = State.COMPLETE;\r\n            availableOOE[msg.sender] = availableOOE[msg.sender] + lo.XOOEBaseAmount + (block.timestamp - lo.timestampLockEnd) * minimumIncrease * lo.XOOEBaseAmount / 3110400000000;\r\n            totalOOE[msg.sender] = totalOOE[msg.sender] + lo.XOOEBaseAmount - lo.OOELockedAmount + (block.timestamp - lo.timestampLockEnd) * minimumIncrease * lo.XOOEBaseAmount / 3110400000000;\r\n            emit logHarvest(msg.sender,lo);\r\n            }\r\n        }\r\n    }\r\n\r\n    function unlock(uint256[] calldata lockid) external notPause{\r\n        for(uint256 i = 0; i < lockid.length; i++){\r\n            require(lockDetail[lockid[i]].locker == msg.sender,\"OPENOCEAN_STAKING_POOL_V1:NOT_ORDER_LOCKER\");\r\n            require(lockDetail[lockid[i]].timestampLockEnd > block.timestamp,\"OPENOCEAN_STAKING_POOL_V1:THIS_LOCK_WAS_ALREADY_COMPLETED\");\r\n            require(lockDetail[lockid[i]].state == State.LOCKING,\"OPENOCEAN_STAKING_POOL_V1:BAD_ORDER\");\r\n            Lock storage lo = lockDetail[lockid[i]];\r\n            lo.state=State.COMPLETE;\r\n            availableOOE[msg.sender] = availableOOE[msg.sender] + lo.OOELockedAmount + (lo.XOOEBaseAmount - lo.OOELockedAmount) * (block.timestamp - lo.timestampLockStart)/(lo.timestampLockEnd - lo.timestampLockStart) - _punishment(lo);\r\n            totalOOE[msg.sender] = totalOOE[msg.sender] + (lo.XOOEBaseAmount - lo.OOELockedAmount) * (block.timestamp - lo.timestampLockStart)/(lo.timestampLockEnd - lo.timestampLockStart) - _punishment(lo);\r\n            emit logUnLock(msg.sender, lo);\r\n        }  \r\n    }\r\n\r\n    function lock(Lock memory _lock) external notPause{\r\n        _receiveOOE(_lock.OOELockedAmount); \r\n        _singleLock(_lock);\r\n        emit logLock(msg.sender, _lock);\r\n    }\r\n\r\n    function lockWithReverse(Lock memory _lock) public notPause{\r\n        _singleLock(_lock); \r\n        emit logLock(msg.sender, _lock);\r\n    }\r\n\r\n    function batchMixLock(Lock[] memory _lock, MixLockType type_, uint256 externalOOEAmount) external notPause{\r\n        if(type_ == MixLockType.AllEXTERNAL){ \r\n            _receiveOOE(getBatchStakeAmount(_lock)); \r\n            for(uint256 i; i<_lock.length; i++){\r\n                 _singleLock(_lock[i]);\r\n            }\r\n        }else if(type_ == MixLockType.ALLREVERSE){\r\n            for(uint256 i; i<_lock.length; i++){\r\n                lockWithReverse(_lock[i]);\r\n            }\r\n        }else if(type_ == MixLockType.MIX){\r\n            uint256 lockAmount = externalOOEAmount + availableOOE[msg.sender];\r\n            require(lockAmount >= getBatchStakeAmount(_lock), \"OPENOCEAN_STAKING_POOL_V1:EXTERNALOOE_NOT_ENOUGH\");\r\n            _receiveOOE(externalOOEAmount);\r\n            for(uint256 i; i<_lock.length; i++){\r\n                lockWithReverse(_lock[i]);\r\n            }\r\n        }\r\n        emit logLocks(msg.sender, _lock);\r\n    }\r\n\r\n    function adminWithdrew(uint256 amount) external onlyOwner{\r\n        require(OOE.balanceOf(address(this)) >= amount,\"OPENOCEAN_STAKING_POOL_V1:WITHDREW_TOO_MUCH\");\r\n        OOE.transfer(msg.sender,amount);\r\n    }\r\n\r\n    function withdrew(uint256 amount) external notPause{\r\n        _sendOOE(amount, msg.sender);\r\n        emit logUserWithdrew(msg.sender, amount);\r\n    }\r\n\r\n    function _sendOOE(uint256 amount, address destination_) internal nonReentrant{\r\n        require(availableOOE[msg.sender] >= amount,\"OPENOCEAN_STAKING_POOL_V1:WITHDREW_TOO_MUCH\");\r\n        totalOOE[msg.sender] = totalOOE[msg.sender] - amount;\r\n        availableOOE[msg.sender] = availableOOE[msg.sender] - amount;\r\n        OOE.transfer(destination_,amount);\r\n    }\r\n\r\n    function _receiveOOE(uint256 amount) internal nonReentrant{\r\n        totalOOE[msg.sender] = totalOOE[msg.sender] + amount;\r\n        availableOOE[msg.sender] = availableOOE[msg.sender] + amount;\r\n        OOE.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function _punishment(Lock memory _lock) internal returns(uint256){\r\n        uint256 punishmentAmount = punishmentDegree * (_lock.XOOEBaseAmount - _lock.OOELockedAmount) * (block.timestamp - _lock.timestampLockStart) / (_lock.timestampLockEnd - _lock.timestampLockStart) / 5;\r\n        return punishmentAmount;\r\n    }\r\n\r\n    function _singleLock(Lock memory _lock) internal{\r\n        require(_lock.locker == msg.sender, \"OPENOCEAN_STAKING_POOL_V1:ONLY_ALLOW_SELFLOCK\");\r\n\r\n        require(block.timestamp > _lock.timestampLockStart && block.timestamp - _lock.timestampLockStart < 120,\"OPENOCEAN_STAKING_POOL_V1:WRONG_START_TIME\");\r\n        require(lockDetail[_lock.lockId].OOELockedAmount == 0, \"OPENOCEAN_STAKING_POOL_V1:LOCK_ALREADY_EXIST\");\r\n        require((_lock.timestampLockEnd - _lock.timestampLockStart) == _lock.lockTimeUnit * period, \"OPENOCEAN_STAKING_POOL_V1:WRONG_ENDTIME\");\r\n\r\n        require(rates[_lock.lockTimeUnit] != 0, \"OPENOCEAN_STAKING_POOL_V1:ILLEGAL_MONTH_OR_MONTH_RATES_NOT_SET\");\r\n\r\n        //Deliberately round off decimals to adapt to the front-end 'max input' function.\r\n        require(_lock.XOOEBaseAmount == _lock.OOELockedAmount * (rates[_lock.lockTimeUnit] + 10000000000) / 10000000000,\"OPENOCEAN_STAKING_POOL_V1:NOT_CORRECT_AMOUNT\");\r\n        require(availableOOE[msg.sender] >= _lock.OOELockedAmount,\"OPENOCEAN_STAKING_POOL_V1:AVAILABLEOOE_NOT_ENOUGH\");\r\n        availableOOE[msg.sender] = availableOOE[msg.sender] - _lock.OOELockedAmount;\r\n        _locksId[_lock.locker].push(_lock.lockId);\r\n        lockDetail[_lock.lockId] = _lock;\r\n    }\r\n    \r\n    function initState(init[] calldata _init) external onlyOwner {\r\n        for(uint256 i = 0; i < _init.length; i++) {\r\n            uint256[] memory lockIds = _init[i].lockId;\r\n            Lock[] memory locks = _init[i].locks;\r\n            uint256 total = _init[i].totalOOE;\r\n            uint256 available = _init[i].availableOOE;\r\n            \r\n            for(uint256 j = 0; j < lockIds.length; j++) {\r\n                uint256 lockId = lockIds[j];\r\n                Lock memory lock = locks[j];\r\n                \r\n                _locksId[lock.locker].push(lockId);\r\n                lockDetail[lockId] = lock;\r\n            }\r\n            \r\n            totalOOE[_init[i].user] = total;\r\n            availableOOE[_init[i].user] = available;\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"OOE_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logAddOOEToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct OOEStakePool.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"name\":\"logHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct OOEStakePool.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"name\":\"logLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct OOEStakePool.Lock[]\",\"name\":\"lock\",\"type\":\"tuple[]\"}],\"name\":\"logLocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct OOEStakePool.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"name\":\"logUnLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"logUserWithdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OOE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addOOEToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableOOE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct OOEStakePool.Lock[]\",\"name\":\"_lock\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OOEStakePool.MixLockType\",\"name\":\"type_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"externalOOEAmount\",\"type\":\"uint256\"}],\"name\":\"batchMixLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct OOEStakePool.Lock[]\",\"name\":\"_lock\",\"type\":\"tuple[]\"}],\"name\":\"getBatchStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOOEAmountInpool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserAllLockId\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakingOOE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lockid\",\"type\":\"uint256[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalOOE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableOOE\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"lockId\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct OOEStakePool.Lock[]\",\"name\":\"locks\",\"type\":\"tuple[]\"}],\"internalType\":\"struct OOEStakePool.init[]\",\"name\":\"_init\",\"type\":\"tuple[]\"}],\"name\":\"initState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct OOEStakePool.Lock\",\"name\":\"_lock\",\"type\":\"tuple\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestampLockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"OOELockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"XOOEBaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimeUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum OOEStakePool.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct OOEStakePool.Lock\",\"name\":\"_lock\",\"type\":\"tuple\"}],\"name\":\"lockWithReverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"punishmentDegree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumIncrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pauseOrNot\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"degree\",\"type\":\"uint256\"}],\"name\":\"setPunishmentDegree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"months\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"setRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalOOE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lockid\",\"type\":\"uint256[]\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OOEStakePool", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ea5219a16c2dbf1d6335a6aa0c6bd45c50347c5", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://01b2c1b420275a9316ae7ad26df890812ca2693255ee30ccf3066c677161f110"}