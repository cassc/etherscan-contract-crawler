{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract ExchangeToken is Ownable {\r\n    address private usdt;\r\n    address private cusd;\r\n    address private receiver;\r\n\r\n    event ExchangeUSDT(\r\n        address indexed from,\r\n        uint256 tokenAmount,\r\n        uint256 usdtAmount\r\n    );\r\n\r\n    event ExchangedCUSD(\r\n        address indexed from,\r\n        uint256 tokenAmount,\r\n        uint256 usdtAmount\r\n    );\r\n\r\n    constructor(\r\n        address _usdt,\r\n        address _cusd,\r\n        address _receiver,\r\n        address initialOwner\r\n    ) Ownable(initialOwner) {\r\n        usdt = _usdt;\r\n        cusd = _cusd;\r\n        receiver = _receiver;\r\n    }\r\n\r\n    function setUSDT(address _usdt) external onlyOwner {\r\n        usdt = _usdt;\r\n    }\r\n\r\n    function setCUSD(address _cusd) external onlyOwner {\r\n        cusd = _cusd;\r\n    }\r\n\r\n    function setReceiver(address _receiver) external onlyOwner {\r\n        receiver = _receiver;\r\n    }\r\n\r\n    function exchangeCUSD(uint256 tokenAmount) external {\r\n        address account = msg.sender;\r\n\r\n        require(account == tx.origin, \"notOrigin\");\r\n        require(tokenAmount > 0, \"Token amount must be greater than 0\");\r\n\r\n        IERC20 usdtToken = IERC20(usdt);\r\n        uint256 usdtAmount = tokenAmount * 10**usdtToken.decimals();\r\n\r\n        require(\r\n            usdtToken.balanceOf(account) >= usdtAmount,\r\n            \"Insufficient USDT balance\"\r\n        );\r\n\r\n        require(\r\n            usdtToken.transferFrom(account, receiver, usdtAmount),\r\n            \"USDT transfer failed\"\r\n        );\r\n\r\n        IERC20 cusdToken = IERC20(cusd);\r\n        uint256 cusdAmount = tokenAmount * 10**cusdToken.decimals();\r\n        require(\r\n            cusdToken.transfer(account, cusdAmount),\r\n            \"CUSD transfer failed\"\r\n        );\r\n\r\n        emit ExchangedCUSD(account, cusdAmount, usdtAmount);\r\n    }\r\n\r\n    function exchangeUSDT(uint256 tokenAmount) external {\r\n        address account = msg.sender;\r\n\r\n        require(account == tx.origin, \"notOrigin\");\r\n        require(tokenAmount > 0, \"Token amount must be greater than 0\");\r\n\r\n        IERC20 cusdToken = IERC20(cusd);\r\n        uint256 cusdAmount = tokenAmount * 10**cusdToken.decimals();\r\n\r\n        require(\r\n            cusdToken.balanceOf(account) >= cusdAmount,\r\n            \"Insufficient cusd balance\"\r\n        );\r\n\r\n        require(\r\n            cusdToken.transferFrom(account, address(this), cusdAmount),\r\n            \"CUSD transfer failed\"\r\n        );\r\n\r\n        IERC20 usdtToken = IERC20(usdt);\r\n        uint256 usdtAmount = tokenAmount * 10**usdtToken.decimals();\r\n        require(\r\n            usdtToken.balanceOf(address(this)) >= usdtAmount,\r\n            \"Insufficient USDT balance\"\r\n        );\r\n\r\n        require(\r\n            usdtToken.transfer(account, usdtAmount),\r\n            \"USDT transfer failed\"\r\n        );\r\n\r\n        emit ExchangeUSDT(account, cusdAmount, usdtAmount);\r\n    }\r\n\r\n    function transferToken(address recipient, uint256 amount) external {\r\n        address account = msg.sender;\r\n        require(account == tx.origin, \"notOrigin\");\r\n        IERC20 cusdToken = IERC20(cusd);\r\n        uint256 cusdAmount = amount * 10**cusdToken.decimals();\r\n\r\n        require(\r\n            cusdToken.balanceOf(account) >= cusdAmount,\r\n            \"Insufficient cusd balance\"\r\n        );\r\n\r\n        require(\r\n            cusdToken.transferFrom(account, address(this), cusdAmount),\r\n            \"Failed to transfer cusd to contract\"\r\n        );\r\n\r\n        require(\r\n            cusdToken.transfer(recipient, cusdAmount),\r\n            \"Failed to transfer cusd to recipient\"\r\n        );\r\n    }\r\n\r\n    function extractTokens(\r\n        address tokenAddress,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        require(to != address(0), \"Invalid recipient address\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(\r\n            token.balanceOf(address(this)) >= amount,\r\n            \"Insufficient balance\"\r\n        );\r\n\r\n        token.transfer(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"ExchangeUSDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"ExchangedCUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeCUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"extractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cusd\",\"type\":\"address\"}],\"name\":\"setCUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExchangeToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000004145553a65276093cffb8522fbc5d0002a605b5f000000000000000000000000ecbbb79a6d8152af3174dbf614f6d0fa0639cd6e0000000000000000000000000ddea2876f32150e4aff3d235e0f81f5fa436d50", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c836557d9193c856ff24083b69f7b38b013f8d65d9904a2bc99b80a513b9e25"}