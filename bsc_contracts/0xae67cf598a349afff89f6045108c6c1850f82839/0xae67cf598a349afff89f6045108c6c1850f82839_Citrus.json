{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity 0.8.4;\r\n\r\ncontract Owned {\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    address public owner;\r\n   \r\n    function changeOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n    \r\n}\r\n\r\ninterface BEP {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BEP20 {\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    mapping (address=>uint256) balances;\r\n    mapping (address=>mapping (address=>uint256)) allowed;\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    function balanceOf(address _owner) view public returns (uint256 balance) {return balances[_owner];}\r\n    \r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\r\n        balances[msg.sender]-=_amount;\r\n        balances[_to]+=_amount;\r\n        emit Transfer(msg.sender,_to,_amount);\r\n        return true;\r\n    }\r\n  \r\n    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {\r\n        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\r\n        balances[_from]-=_amount;\r\n        allowed[_from][msg.sender]-=_amount;\r\n        balances[_to]+=_amount;\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        allowed[msg.sender][_spender]=_amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        totalSupply += amount;\r\n        balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    \r\n     function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = balances[account];\r\n        require(accountBalance >= amount, \"BEP20: burn amount exceeds balance\");\r\n        balances[account] = accountBalance - amount;\r\n        totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ncontract TimeLock is Owned, BEP20 {\r\n    \r\n    struct LockedAccounts {\r\n        address account;\r\n        uint amount;\r\n        uint time;\r\n        Locked[] locked;\r\n    }\r\n    \r\n    struct Locked {\r\n        uint time;\r\n        uint amount;\r\n        uint lockedAt;\r\n    }\r\n    \r\n    mapping(address => LockedAccounts) lock;\r\n    \r\n    function timelock(address _lockAccount, uint time, uint amount) public onlyOwner returns (bool) {\r\n        require(amount > 0, \"TimeLock: Amount cannot be zero\");\r\n        transfer(address(this), amount);\r\n        lock[_lockAccount].account = _lockAccount;\r\n        lock[_lockAccount].amount = amount;\r\n        lock[_lockAccount].time = time;\r\n        lock[_lockAccount].locked.push(Locked(time, amount, block.timestamp));\r\n        return true;\r\n    }\r\n    \r\n    function release() public returns (bool) {\r\n        LockedAccounts storage lockedAccount = lock[msg.sender];\r\n        \r\n        for(uint i = 0; i < lockedAccount.locked.length; i++) {\r\n            Locked storage loc = lockedAccount.locked[i];\r\n            require(block.timestamp >= (loc.time + loc.lockedAt), \"TimeLock: Release time not reached\");\r\n            uint amount = loc.amount;\r\n            BEP(address(this)).transfer(msg.sender, amount);\r\n            loc.amount = 0;\r\n            loc.time = 0;\r\n            loc.lockedAt = 0;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function lockedAccountDetails(address user) public view returns (uint[] memory, uint[] memory, uint[] memory, uint[] memory, uint) {\r\n        uint lockedLength = lock[user].locked.length;\r\n        uint[] memory lockedAmounts = new uint[](lockedLength);\r\n        uint[] memory lockTimes = new uint[](lockedLength);\r\n        uint[] memory lockedAt = new uint[](lockedLength);\r\n        uint[] memory totalLockTime = new uint[](lockedLength);\r\n        uint currentTime = block.timestamp;\r\n        \r\n        \r\n        for(uint i = 0; i < lockedLength; i++) {\r\n            lockedAmounts[i] = lock[user].locked[i].amount;\r\n            lockTimes[i] = lock[user].locked[i].time;\r\n            lockedAt[i] = lock[user].locked[i].lockedAt;\r\n            totalLockTime[i] = lock[user].locked[i].time + lock[user].locked[i].lockedAt;\r\n        }\r\n        return(lockedAmounts, lockTimes, lockedAt, totalLockTime, currentTime);\r\n    }\r\n}\r\n\r\ncontract Citrus  is TimeLock {\r\n\r\n    constructor() {\r\n        symbol = \"CTS\";\r\n        name = \"Citrus\";\r\n        decimals = 18;                                    \r\n        totalSupply = 383000000 * 10**18;           \r\n       \r\n        owner = msg.sender;\r\n        balances[owner] = totalSupply;\r\n    }\r\n    \r\n    function mint(address to, uint amount) external {\r\n        require(msg.sender == owner, 'only admin');\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(address from, uint amount) external {\r\n        require(msg.sender == owner, 'only admin');\r\n        _burn(from, amount);\r\n    }\r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedAccountDetails\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Citrus", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://15cb41a86fe69230fe773cdca8725a71657887bd421e4c1461a04b788ac1fd89"}