{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.1;\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 \\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP20 standard.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n   * @dev Returns the token decimals.\\r\\n   */\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token symbol.\\r\\n   */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the token name.\\r\\n  */\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bep token owner.\\r\\n   */\\r\\n  function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (Pausable.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Ownable {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function pause() public whenNotPaused onlyOwner {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function unpause() public whenPaused onlyOwner {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\"},\"RXCGStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.1;\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./SafeBEP20.sol\\\";\\r\\n\\r\\ncontract RXCGStaking is Pausable {\\r\\n    using SafeBEP20 for IBEP20;\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(_admins[_msgSender()], \\\"Requires Admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\t\\r\\n\\t/*///////////////////////////////////////////////////////////////\\r\\n                    Global STATE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    IBEP20 private _token;\\r\\n    mapping(address =\\u003e StakingParams) private _staking;\\r\\n    address[] private _stakingLookup;\\r\\n    StakingOption[] private _allowedOptions;\\r\\n    mapping(address =\\u003e bool) private _admins;\\r\\n    uint private _totalValueLocked;\\r\\n    uint private _totalValueLockedAllTime;\\r\\n    uint private _totalRewardsPayed;\\r\\n    uint private _totalForPayout;\\r\\n    uint private _maxStakingAmount = 1000000;\\r\\n    uint private _minStakingAmount = 10;\\r\\n\\r\\n    /**\\r\\n     * @dev The contract constructor needs an address `tokenAddress` for the IBEP20 _token on which staking is conducted. \\r\\n     */\\r\\n    constructor(address tokenAddress) {\\r\\n        require(tokenAddress != address(0), \\\"Wrong address\\\");\\r\\n        _token = IBEP20(tokenAddress);\\r\\n        _admins[_msgSender()] = true;\\r\\n        _init();\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    DATA STRUCTURES \\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\t\\r\\n    /**\\r\\n     * @dev `StakingOption`  Represent allowed configurations for the staking platform.\\r\\n     */\\r\\n    struct StakingOption {\\r\\n        uint duration; //in days\\r\\n        uint apy; //in percentage 1.23% =\\u003e 123, 12.34% =\\u003e 1234, 123.45% =\\u003e 12345\\r\\n        uint penalty; //in percentage 1.23% =\\u003e 123, 12.34% =\\u003e 1234, 123.45% =\\u003e 12345\\r\\n        bool allowed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `StakingPrams` Represents one instance of staking conducted on the platform.\\r\\n     */\\r\\n    struct StakingParams {\\r\\n        uint created;\\r\\n        uint duration; //in days\\r\\n        uint apy; //in percentage 1.23% =\\u003e 123, 12.34% =\\u003e 1234, 123.45% =\\u003e 12345\\r\\n        uint penalty; //in percentage 1.23% =\\u003e 123, 12.34% =\\u003e 1234, 123.45% =\\u003e 12345\\r\\n        uint baseAmount;\\r\\n        bool claimed;\\r\\n        bool blocked;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `StakingParamsView` Represents view of one StakingParams, mainly used in frontend. \\r\\n     */\\r\\n    struct StakingParamsView {\\r\\n        address addr;\\r\\n        uint created;\\r\\n        uint expire;\\r\\n        uint amountWithIntrest;\\r\\n        uint amountWithPenalty;\\r\\n        uint apy; //in percentage 1.23% =\\u003e 123, 12.34% =\\u003e 1234, 123.45% =\\u003e 12345\\r\\n        uint baseAmount;\\r\\n    }\\r\\n\\r\\n\\t/*///////////////////////////////////////////////////////////////\\r\\n                    PUBLIC FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n    \\r\\n\\t/**\\r\\n     * @dev Creates user stake by creating `StakingParams`.\\r\\n     * `StakingParams` is created based on selected `StakingOption` and `amount`.\\r\\n     * StakingOption is selected by `stakingOptionId` parameter. \\r\\n     * Returns `StakingParamView`.\\r\\n     * Emits `Staked` event. \\r\\n     */\\r\\n    function deposit(uint stakingOptionId, uint amount) external whenNotPaused returns(StakingParamsView memory) {\\r\\n        checkDepositRequirements(_msgSender(), stakingOptionId, amount);\\r\\n        StakingOption memory options = _allowedOptions[stakingOptionId];\\r\\n        _staking[_msgSender()]=StakingParams(block.timestamp, options.duration, options.apy, options.penalty, amount, false, false);\\r\\n        StakingParamsView memory stakingParamsView=viewStake(_msgSender());\\r\\n        _stakingLookup.push(_msgSender());\\r\\n        _increaseTotalValueLocked(amount,stakingParamsView.amountWithIntrest);\\r\\n        emit Staked(_msgSender(), amount, stakingParamsView.expire, stakingParamsView.amountWithIntrest);\\r\\n        _token.safeTransferFrom(_msgSender(), address(this), amount);\\r\\n        return stakingParamsView;\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Allows sender to withdraw staking if it has expired. \\r\\n     * Returns `bool`, which indicates the success of withdrawal. \\r\\n     * Emits `Claimed` event. \\r\\n     */\\r\\n    function claim() external whenNotPaused returns(bool) {\\r\\n        require(canWithdraw(_msgSender()), \\\"Premature withdrawal\\\");\\r\\n        StakingParams memory stakingParams=_staking[_msgSender()];\\r\\n        uint amount = calculateWithInterest(stakingParams.baseAmount,stakingParams.apy,stakingParams.duration);\\r\\n        _decreaseTotalValueLocked(stakingParams.baseAmount, amount,false);\\r\\n        _withdrawal(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows sender to withdraw staking before it has expired.\\r\\n     * A penalty is applied. \\r\\n     * Returns bool, which indicates the success of withdrawal. \\r\\n     * Emits `Claimed` and `ClaimedWithPenalty` events. \\r\\n     */\\r\\n    function claimWithPenalty() external whenNotPaused returns(bool) {\\r\\n        require(stakeExists(_msgSender()), \\\"Not found\\\");\\r\\n        StakingParams memory stakingParams=_staking[_msgSender()];\\r\\n        require(!stakingParams.blocked, \\\"Suspended\\\");\\r\\n        uint expiration = getDateFrom(stakingParams.created,stakingParams.duration);\\r\\n        require(expiration \\u003e= block.timestamp, \\\"Already expired\\\");\\r\\n        uint amount = calculateWithPenalty(stakingParams.baseAmount,stakingParams.penalty);\\r\\n        uint amountWithInterest=calculateWithInterest(stakingParams.baseAmount,stakingParams.apy,stakingParams.duration);\\r\\n        _decreaseTotalValueLocked(stakingParams.baseAmount,amountWithInterest,true);\\r\\n        emit ClaimedWithPenalty(_msgSender(), stakingParams.baseAmount, expiration, block.timestamp, stakingParams.baseAmount - amount);\\r\\n        _withdrawal(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                    VIEWERS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Checks does sender meet requirements to deposit `amount` with StakingOption selected by `stakingOptionId`.\\r\\n     */\\r\\n    function checkDepositRequirements(address addr, uint stakingOptionId, uint amount) public view {\\r\\n        require(_minStakingAmount \\u003c= amount \\u0026\\u0026 amount \\u003c= _maxStakingAmount, \\\"Invalid amount\\\");\\r\\n        require(!stakeExists(addr), \\\"Stake exists\\\");\\r\\n        require(stakingOptionId \\u003c _allowedOptions.length, \\\"Wrong index\\\");\\r\\n        require(_allowedOptions[stakingOptionId].allowed, \\\"Invalid option\\\");\\r\\n        require(_token.allowance(addr, address(this)) \\u003e= amount, \\\"Approve first\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `StakingParamView` based on `StakingParams`, stored in the contract for address `addr`.\\r\\n     */\\r\\n    function viewStake(address addr) public view returns(StakingParamsView memory) {\\r\\n        require(stakeExists(addr), \\\"Not found\\\");\\r\\n        StakingParams memory stakingParams=_staking[addr];\\r\\n        return StakingParamsView(addr, stakingParams.created, getDateFrom(stakingParams.created, stakingParams.duration), calculateWithInterest(stakingParams.baseAmount,stakingParams.apy,stakingParams.duration), calculateWithPenalty(stakingParams.baseAmount,stakingParams.penalty), stakingParams.apy,stakingParams.baseAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks can `addr` withdraw tokens. \\r\\n     * Returns bool which indicates is `addr` allowed to withdrawal tokens without penalty.\\r\\n     * Function checks is addr temporally suspended, is stake claimed and is stake expired \\r\\n     */\\r\\n    function canWithdraw(address addr) public view returns(bool) {\\r\\n        require(stakeExists(addr), \\\"Not found\\\");\\r\\n        require(!_staking[addr].blocked, \\\"Suspended\\\");\\r\\n        uint expiration = getDateFrom(_staking[addr].created, _staking[addr].duration);\\r\\n        return expiration \\u003c= block.timestamp;\\r\\n    }\\r\\n\\r\\n\\t/**\\r\\n     * @dev Checks does sender have already staked tokens in the contract for address `addr`.\\r\\n     */\\r\\n    function stakeExists(address addr) public view returns(bool) {\\r\\n        return _staking[addr].created \\u003e 0 \\u0026\\u0026 !_staking[addr].claimed;\\r\\n    }\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Returns upcoming withdrawals which expire in the `daysFromNow` number of days. \\r\\n     * Returns array of StakingParamView, \\r\\n     * the sum of all amounts which can be paid in the upcoming period, \\r\\n     * and the timestamp when first staking will expire.  \\r\\n     */\\r\\n    function getUpcomingWithdrawals(uint daysFromNow) view external returns(StakingParamsView[] memory, uint, uint) {\\r\\n        uint endTime = getDateFrom(block.timestamp, daysFromNow);\\r\\n        StakingParamsView[] memory upcoming = new StakingParamsView[](_stakingLookup.length);\\r\\n        uint firstUpcoming = getDateFrom(block.timestamp, daysFromNow + 1);\\r\\n        uint j = 0;\\r\\n        uint sum = 0;\\r\\n        for (uint i = 0; i \\u003c _stakingLookup.length; i++) {\\r\\n            if (!_staking[_stakingLookup[i]].claimed) {\\r\\n                StakingParamsView memory stakingParamsView = viewStake(_stakingLookup[i]);\\r\\n                if (stakingParamsView.expire \\u003c= endTime) {\\r\\n                    upcoming[j++] = stakingParamsView;\\r\\n                    sum += stakingParamsView.amountWithIntrest;\\r\\n                    if (stakingParamsView.expire \\u003c firstUpcoming) {\\r\\n                        firstUpcoming = stakingParamsView.expire;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        StakingParamsView[] memory upcomingReturn = new StakingParamsView[](j);\\r\\n        for (uint i = 0; i \\u003c j; i++) {\\r\\n            upcomingReturn[i] = upcoming[i];\\r\\n        }\\r\\n        if(upcomingReturn.length==0){\\r\\n            firstUpcoming=0;\\r\\n        }\\r\\n        return (upcomingReturn, sum, firstUpcoming);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `array` of StakingParamViews withdrawals which are not claimed. \\r\\n     * Returns array of StakingParamView. \\r\\n     */\\r\\n    function getAllActiveWithdrawals() view external returns(StakingParamsView[] memory) {\\r\\n        StakingParamsView[] memory upcoming = new StakingParamsView[](_stakingLookup.length);\\r\\n        for (uint i = 0; i \\u003c _stakingLookup.length; i++) {\\r\\n            upcoming[i] = viewStake(_stakingLookup[i]);\\r\\n        }\\r\\n        return upcoming;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns array of all allowed `StakingOptions`\\r\\n     */\\r\\n    function getAllowedOptions() external view returns(StakingOption[] memory) {\\r\\n        return _allowedOptions;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns StakingOption which is selected by `id`    \\r\\n     */\\r\\n    function getAllowedOption(uint id) external view returns(StakingOption memory) {\\r\\n        return _allowedOptions[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount increased for interest which can be paid to address `addr`.\\r\\n     */\\r\\n    function calculateWithInterestForAddress(address addr) external view returns(uint) {\\r\\n        require(stakeExists(addr), \\\"Not found\\\");\\r\\n        return calculateWithInterest(_staking[addr].apy, _staking[addr].duration, _staking[addr].baseAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount `amount` increased for interest, which can be paid for the number of days `duration` with APY `apy`.\\r\\n     * APY must be written in the following format:\\r\\n     * 12.34 % APY must be written as apy=1234.\\r\\n     * The last two digits are decimals after floating-point.\\r\\n     */\\r\\n    function calculateWithInterest(uint amount,uint apy, uint duration) public pure returns(uint) {\\r\\n        return amount * (100000 + 1000 * apy * duration / 36525) / 100000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount decreased for penalty which can be paid to address `addr`.\\r\\n     */\\r\\n    function calculateWithPenaltyForAddress(address addr) external view returns(uint) {\\r\\n        require(stakeExists(addr), \\\"Not found\\\");\\r\\n        return calculateWithPenalty(_staking[addr].baseAmount, _staking[addr].penalty);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns amount `amount` decreased for penalty in % `penaltyPercentage`.\\r\\n     * `penaltyPercentage` must be written in fallowing format:\\r\\n     * 12.34 % penalty must be written as penaltyPercentage=1234.\\r\\n     * The last two digits are decimals after floating-point.\\r\\n     */\\r\\n    function calculateWithPenalty(uint amount, uint penaltyPercentage) public pure returns(uint) {\\r\\n        return amount * (100000 - penaltyPercentage * 10) / 100000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns total value locked\\r\\n     */\\r\\n    function getTotalValueLocked() external view returns(uint) {\\r\\n        return _totalValueLocked;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `_totalValueLocked` incresad for interest.\\r\\n     */\\r\\n    function getTotalForPayout() external view returns(uint) {\\r\\n        return _totalForPayout;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns sum of all _token which had been locked since contract deployment. \\r\\n     */\\r\\n    function getTotalValueLockedAllTime() external view returns(uint) {\\r\\n        return _totalValueLockedAllTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns sum of all rewards which had been payed since contract deployment.    \\r\\n     */\\r\\n    function getTotalRewardsPayed() external view returns(uint) {\\r\\n        return _totalRewardsPayed;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for minimal allowed staking amount.    \\r\\n     */\\r\\n    function getMinStakingAmount() external view returns(uint) {\\r\\n        return _minStakingAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for maximal allowed staking amount\\r\\n     */\\r\\n    function getMaxStakingAmount() external view returns(uint) {\\r\\n        return _maxStakingAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Utility function. Allows adding of `durationInDay` to `start` timestamp.\\r\\n     */\\r\\n    function getDateFrom(uint start, uint durationInDay) public pure returns(uint) {\\r\\n        return start + durationInDay * 1 days;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `_token` address.\\r\\n     */\\r\\n    function getTokenAddress() external view returns(address){\\r\\n        return address(_token);\\r\\n    }\\r\\n\\t\\r\\n\\t/*///////////////////////////////////////////////////////////////\\r\\n                    OWNER\\u0027S AND ADMIN\\u0027S FUNCTIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Allows owner to cancel staking for address `addr`. \\r\\n     * Base amount which was deposited will be returned to `addr`\\r\\n     */\\r\\n    function cancelStaking(address addr) external onlyOwner returns(bool) {\\r\\n        require(stakeExists(addr), \\\"Not found\\\");\\r\\n        if (_staking[addr].created == 0) {\\r\\n            return false;\\r\\n        }\\r\\n        _staking[addr].claimed = true;\\r\\n        if (_staking[addr].baseAmount \\u003e 0) {\\r\\n            uint amountWithInterest=calculateWithInterest(_staking[addr].baseAmount,_staking[addr].apy,_staking[addr].duration);\\r\\n            _decreaseTotalValueLocked(_staking[addr].baseAmount,amountWithInterest,false);\\r\\n            _token.safeTransfer(addr, _staking[addr].baseAmount);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Extract mistakenly sent tokens to the contract.\\r\\n     */\\r\\n    function extractMistakenlySentTokens(address tokenAddress) external onlyOwner {\\r\\n        if (tokenAddress == address(0)) {\\r\\n            payable(owner()).transfer(address(this).balance);\\r\\n            return;\\r\\n        }\\r\\n        IBEP20 bep20Token = IBEP20(tokenAddress);\\r\\n        uint balance = bep20Token.balanceOf(address(this));\\r\\n        emit ExtractedTokens(tokenAddress, owner(), balance);\\r\\n        _token.safeTransfer(owner(), balance);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Allows an administrator to add new administrator address `addr`.\\r\\n     * Returns bool which indicates success of operation. \\r\\n     * Sender must be administrator.\\r\\n     * `addr` can\\u0027t be address(0)\\r\\n     */\\r\\n    function addAdmin(address addr) external onlyAdmin returns(bool) {\\r\\n        require(addr != address(0));\\r\\n        _admins[addr] = true;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev   Allows an administrator to remove an existing administrator identified by address `addr`. \\r\\n     * Administrators can\u2019t remove `owner` from the list of administrators.\\r\\n     * Sender must be administrator.\\r\\n     * Returns bool, which indicates the success of the operation. \\r\\n     */\\r\\n    function removeAdmin(address addr) external onlyAdmin returns(bool) {\\r\\n        require(addr != owner() || _msgSender() == owner(), \\\"Not allowed\\\");\\r\\n        _admins[addr] = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\t/**\\r\\n     * @dev Sets minimal and maximal allowed staking amounts. Sender must be administrator.\\r\\n     */\\r\\n    function setStakingLimits(uint min, uint max) external onlyAdmin{\\r\\n        require(max \\u003c type(uint).max,\\\"Wrong value\\\");\\r\\n        require(min \\u003c max, \\\"Max must be larger then a min\\\");\\r\\n        _minStakingAmount = min;\\r\\n        _maxStakingAmount = max;\\r\\n    }\\r\\n    \\t\\r\\n\\t/**\\r\\n     * @dev Adds new or update existing `StakingOption` selected by `id`.\\r\\n     * Returns index of staking option.   \\r\\n     * Sender must be administrator.\\r\\n     */\\r\\n    function updateAllowedOptions(uint id, StakingOption memory option) external onlyAdmin returns(uint) {\\r\\n        require(option.apy \\u003e 0);\\r\\n        if (id \\u003e _allowedOptions.length - 1) {\\r\\n            _allowedOptions.push(option);\\r\\n            return _allowedOptions.length - 1;\\r\\n        } else {\\r\\n            _allowedOptions[id] = option;\\r\\n            return id;\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Removes existing StakingOption selected by `id`.\\r\\n     * Sender must be administrator.\\r\\n     */\\r\\n    function removeAllowedOptions(uint id) external onlyAdmin {\\r\\n        require(id \\u003c _allowedOptions.length, \\\"Wrong index\\\");\\r\\n        StakingOption[] memory readingOptions = _allowedOptions;\\r\\n        delete _allowedOptions;\\r\\n        for (uint i = 0; i \\u003c readingOptions.length; i++) {\\r\\n            if (i != id) {\\r\\n                _allowedOptions.push(readingOptions[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Swapes all existing StakingOptions by StakingOption array named `options`.\\r\\n     * Sender must be administrator.\\r\\n     */\\r\\n    function swapAllAllowedOptions(StakingOption[] memory options) external onlyAdmin{\\r\\n        require(options.length\\u003e0,\\\"Array can\\u0027t be empty\\\");\\r\\n        delete _allowedOptions;\\r\\n        for (uint i = 0; i \\u003c options.length; i++) {\\r\\n            _allowedOptions.push(options[i]);\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Allows administrator to suspend `addr` from withdrawl.\\r\\n     */\\r\\n    function blockUnstake(address addr) external onlyAdmin {\\r\\n        _staking[addr].blocked = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows an administrator to unsuspend `addr` from _withdrawal.\\r\\n     */\\r\\n    function unblockUnstake(address addr) external onlyAdmin {\\r\\n        _staking[addr].blocked = false;\\r\\n    }\\r\\n\\t\\r\\n\\t/*///////////////////////////////////////////////////////////////\\r\\n                    INTERNAL  HELPERS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _init() internal {\\r\\n        _allowedOptions.push(StakingOption(0, 300, 0, true));\\r\\n        _allowedOptions.push(StakingOption(1, 1000, 500, true));\\r\\n        _allowedOptions.push(StakingOption(14, 2000, 1000, true));\\r\\n    }\\r\\n\\t\\r\\n    /**\\r\\n     * @dev Send _withdrawal request to `_token`.\\r\\n     * Emits `Claimed` event\\r\\n     */\\r\\n    function _withdrawal(uint amount) private {\\r\\n        uint balance = _token.balanceOf(address(this));\\r\\n        require(balance \\u003e= amount, \\\"Balance too low\\\");\\r\\n        _staking[_msgSender()].claimed = true;\\r\\n        _removeFromLookup(_msgSender());\\r\\n        StakingParams memory stakingParams=_staking[_msgSender()];\\r\\n        emit Claimed(_msgSender(), stakingParams.baseAmount, getDateFrom(stakingParams.created, stakingParams.duration), amount);\\r\\n        _token.safeTransfer(_msgSender(), amount);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Removes address `addr` from `_stakingLookup`. \\r\\n     * Base amount which was deposited will be returned to `addr`\\r\\n     */\\r\\n    function _removeFromLookup(address addr) private {\\r\\n        address[] memory readingParams = _stakingLookup;\\r\\n        delete _stakingLookup;\\r\\n        for (uint i = 0; i \\u003c readingParams.length; i++) {\\r\\n            if (readingParams[i] != addr) {\\r\\n                _stakingLookup.push(readingParams[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * @dev Utility function.\\r\\n     * Increase multiple auxiliary variables used to store total value locked and other information.\\r\\n     */\\r\\n    function _increaseTotalValueLocked(uint amount, uint amountWithInterest) internal {\\r\\n        _totalValueLocked += amount;\\r\\n        _totalForPayout += amountWithInterest;\\r\\n        _totalValueLockedAllTime += amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Utility function.\\r\\n     * Decrease multiple auxiliary variables used to store total value locked and other information.\\r\\n     */\\r\\n    function _decreaseTotalValueLocked(uint amount, uint amountWithInterest,bool withPenalty) internal {\\r\\n        _totalValueLocked -= amount;\\r\\n        _totalForPayout -= amountWithInterest;\\r\\n        if (!withPenalty) {\\r\\n            _totalRewardsPayed += amountWithInterest - amount;\\r\\n        }\\r\\n    }\\r\\n\\t\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                     EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\t\\r\\n    /**\\r\\n     * @dev It is emitted when deposits `value` to contract.\\r\\n     */\\r\\n    event Staked(address indexed addr, uint value, uint expire, uint claimableAmount);\\r\\n\\r\\n    /**\\r\\n     * @dev It is emitted when the user claims a stake from the contract.\\r\\n     */\\r\\n    event Claimed(address indexed addr, uint value, uint expire, uint claimed);\\r\\n\\r\\n    /**\\r\\n     * @dev It is emitted when the user claims stake from the contract with penalty paid.\\r\\n     */\\r\\n    event ClaimedWithPenalty(address indexed, uint value, uint expire, uint claimedDate, uint penalty);\\r\\n\\r\\n    /**\\r\\n     * @dev It is emitted when mistakenly sent _token are extracted.\\r\\n     */\\r\\n    event ExtractedTokens(address _token, address _owner, uint _amount);\\r\\n    \\r\\n}\"},\"SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeBEP20\\r\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeBEP20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IBEP20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IBEP20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IBEP20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IBEP20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeBEP20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"ClaimedWithPenalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExtractedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"blockUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"calculateWithInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculateWithInterestForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyPercentage\",\"type\":\"uint256\"}],\"name\":\"calculateWithPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculateWithPenaltyForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"cancelStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingOptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"checkDepositRequirements\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWithPenalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingOptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithIntrest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct RXCGStaking.StakingParamsView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"extractMistakenlySentTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveWithdrawals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithIntrest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct RXCGStaking.StakingParamsView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAllowedOption\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct RXCGStaking.StakingOption\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedOptions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct RXCGStaking.StakingOption[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationInDay\",\"type\":\"uint256\"}],\"name\":\"getDateFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalForPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardsPayed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLockedAllTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysFromNow\",\"type\":\"uint256\"}],\"name\":\"getUpcomingWithdrawals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithIntrest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct RXCGStaking.StakingParamsView[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeAllowedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setStakingLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"stakeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct RXCGStaking.StakingOption[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"swapAllAllowedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unblockUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct RXCGStaking.StakingOption\",\"name\":\"option\",\"type\":\"tuple\"}],\"name\":\"updateAllowedOptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"viewStake\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithIntrest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct RXCGStaking.StakingParamsView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RXCGStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007c59a57fc16eac270421b74615c4bc009ecd486d", "EVMVersion": "byzantium", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f88474705012e9a344fb61c3d7c201cf90d5178bb3badd6cbca84d65bfa420e7"}