{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n  function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n  function manager() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function manager() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyManager() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IPHARERC20 {\r\n    function burnFrom(address account_, uint256 amount_) external;\r\n}\r\n\r\ninterface IBondCalculator {\r\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\r\n}\r\n\r\ncontract PHARTreasury is Ownable {\r\n\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event Deposit( address indexed token, uint amount, uint value );\r\n    event Withdrawal( address indexed token, uint amount, uint value );\r\n    event CreateDebt( address indexed debtor, address indexed token, uint amount, uint value );\r\n    event RepayDebt( address indexed debtor, address indexed token, uint amount, uint value );\r\n    event ReservesManaged( address indexed token, uint amount );\r\n    event ReservesUpdated( uint indexed totalReserves );\r\n    event ReservesAudited( uint indexed totalReserves );\r\n    event RewardsMinted( address indexed caller, address indexed recipient, uint amount );\r\n    event ChangeQueued( MANAGING indexed managing, address queued );\r\n    event ChangeActivated( MANAGING indexed managing, address activated, bool result );\r\n\r\n    enum MANAGING { RESERVEDEPOSITOR, RESERVESPENDER, RESERVETOKEN, RESERVEMANAGER, LIQUIDITYDEPOSITOR, LIQUIDITYTOKEN, LIQUIDITYMANAGER, DEBTOR, REWARDMANAGER, SPHAR }\r\n\r\n    address public immutable PHAR;\r\n    uint public immutable blocksNeededForQueue;\r\n\r\n    address[] public reserveTokens; // Push only, beware false-positives.\r\n    mapping( address => bool ) public isReserveToken;\r\n    mapping( address => uint ) public reserveTokenQueue; // Delays changes to mapping.\r\n\r\n    address[] public reserveDepositors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveDepositor;\r\n    mapping( address => uint ) public reserveDepositorQueue; // Delays changes to mapping.\r\n\r\n    address[] public reserveSpenders; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveSpender;\r\n    mapping( address => uint ) public reserveSpenderQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityTokens; // Push only, beware false-positives.\r\n    mapping( address => bool ) public isLiquidityToken;\r\n    mapping( address => uint ) public LiquidityTokenQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityDepositors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isLiquidityDepositor;\r\n    mapping( address => uint ) public LiquidityDepositorQueue; // Delays changes to mapping.\r\n\r\n    mapping( address => address ) public bondCalculator; // bond calculator for liquidity token\r\n\r\n    address[] public reserveManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isReserveManager;\r\n    mapping( address => uint ) public ReserveManagerQueue; // Delays changes to mapping.\r\n\r\n    address[] public liquidityManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isLiquidityManager;\r\n    mapping( address => uint ) public LiquidityManagerQueue; // Delays changes to mapping.\r\n\r\n    address[] public debtors; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isDebtor;\r\n    mapping( address => uint ) public debtorQueue; // Delays changes to mapping.\r\n    mapping( address => uint ) public debtorBalance;\r\n\r\n    address[] public rewardManagers; // Push only, beware false-positives. Only for viewing.\r\n    mapping( address => bool ) public isRewardManager;\r\n    mapping( address => uint ) public rewardManagerQueue; // Delays changes to mapping.\r\n\r\n    address public sPHAR;\r\n    uint public sPHARQueue; // Delays change to sPHAR address\r\n    \r\n    uint public totalReserves; // Risk-free value of all assets\r\n    uint public totalDebt;\r\n\r\n    constructor (\r\n        address _PHAR,\r\n        address _DAI,\r\n        uint _blocksNeededForQueue\r\n    ) {\r\n        require( _PHAR != address(0) );\r\n        PHAR = _PHAR;\r\n\r\n        isReserveToken[ _DAI ] = true;\r\n        reserveTokens.push( _DAI );\r\n\r\n        blocksNeededForQueue = _blocksNeededForQueue;\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to deposit an asset for PHAR\r\n        @param _amount uint\r\n        @param _token address\r\n        @param _profit uint\r\n        @return send_ uint\r\n     */\r\n    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ ) {\r\n        require( isReserveToken[ _token ] || isLiquidityToken[ _token ], \"Not accepted\" );\r\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n        if ( isReserveToken[ _token ] ) {\r\n            require( isReserveDepositor[ msg.sender ], \"Not approved\" );\r\n        } else {\r\n            require( isLiquidityDepositor[ msg.sender ], \"Not approved\" );\r\n        }\r\n\r\n        uint value = valueOf(_token, _amount);\r\n        // mint PHAR needed and store amount of rewards for distribution\r\n        send_ = value.sub( _profit );\r\n        // IERC20Mintable( PHAR ).mint( msg.sender, send_ );\r\n        IERC20(PHAR).transfer(msg.sender, send_);\r\n\r\n        totalReserves = totalReserves.add( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        emit Deposit( _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to burn PHAR for reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function withdraw( uint _amount, address _token ) external {\r\n        require( isReserveToken[ _token ], \"Not accepted\" ); // Only reserves can be used for redemptions\r\n        require( isReserveSpender[ msg.sender ] == true, \"Not approved\" );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n        IPHARERC20( PHAR ).burnFrom( msg.sender, value );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\r\n\r\n        emit Withdrawal( _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to borrow reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function incurDebt( uint _amount, address _token ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n        require( isReserveToken[ _token ], \"Not accepted\" );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n\r\n        uint maximumDebt = IERC20( sPHAR ).balanceOf( msg.sender ); // Can only borrow against sPHAR held\r\n        uint availableDebt = maximumDebt.sub( debtorBalance[ msg.sender ] );\r\n        require( value <= availableDebt, \"Exceeds debt limit\" );\r\n\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].add( value );\r\n        totalDebt = totalDebt.add( value );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).transfer( msg.sender, _amount );\r\n        \r\n        emit CreateDebt( msg.sender, _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to repay borrowed reserves with reserves\r\n        @param _amount uint\r\n        @param _token address\r\n     */\r\n    function repayDebtWithReserve( uint _amount, address _token ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n        require( isReserveToken[ _token ], \"Not accepted\" );\r\n\r\n        IERC20( _token ).safeTransferFrom( msg.sender, address(this), _amount );\r\n\r\n        uint value = valueOf( _token, _amount );\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( value );\r\n        totalDebt = totalDebt.sub( value );\r\n\r\n        totalReserves = totalReserves.add( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        emit RepayDebt( msg.sender, _token, _amount, value );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to repay borrowed reserves with PHAR\r\n        @param _amount uint\r\n     */\r\n    function repayDebtWithPHAR( uint _amount ) external {\r\n        require( isDebtor[ msg.sender ], \"Not approved\" );\r\n\r\n        IPHARERC20( PHAR ).burnFrom( msg.sender, _amount );\r\n\r\n        debtorBalance[ msg.sender ] = debtorBalance[ msg.sender ].sub( _amount );\r\n        totalDebt = totalDebt.sub( _amount );\r\n\r\n        emit RepayDebt( msg.sender, PHAR, _amount, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice allow approved address to withdraw assets\r\n        @param _token address\r\n        @param _amount uint\r\n     */\r\n    function manage( address _token, uint _amount ) external {\r\n        if( isLiquidityToken[ _token ] ) {\r\n            require( isLiquidityManager[ msg.sender ], \"Not approved\" );\r\n        } else {\r\n            require( isReserveManager[ msg.sender ], \"Not approved\" );\r\n        }\r\n\r\n        uint value = valueOf(_token, _amount);\r\n        require( value <= excessReserves(), \"Insufficient reserves\" );\r\n\r\n        totalReserves = totalReserves.sub( value );\r\n        emit ReservesUpdated( totalReserves );\r\n\r\n        IERC20( _token ).safeTransfer( msg.sender, _amount );\r\n\r\n        emit ReservesManaged( _token, _amount );\r\n    }\r\n\r\n    /**\r\n        @notice send epoch reward to staking contract\r\n     */\r\n    function mintRewards( address _recipient, uint _amount ) external {\r\n        require( isRewardManager[ msg.sender ], \"Not approved\" );\r\n        require( _amount <= excessReserves(), \"Insufficient reserves\" );\r\n\r\n        // IERC20Mintable( PHAR ).mint( _recipient, _amount );\r\n        IERC20(PHAR).transfer(_recipient, _amount);\r\n\r\n        emit RewardsMinted( msg.sender, _recipient, _amount );\r\n    } \r\n\r\n    /**\r\n        @notice returns excess reserves not backing tokens\r\n        @return uint\r\n     */\r\n    function excessReserves() public view returns ( uint ) {\r\n        return totalReserves.sub( IERC20( PHAR ).totalSupply().sub( totalDebt ) );\r\n    }\r\n\r\n    /**\r\n        @notice takes inventory of all tracked assets\r\n        @notice always consolidate to recognized reserves before audit\r\n     */\r\n    function auditReserves() external onlyManager() {\r\n        uint reserves;\r\n        for( uint i = 0; i < reserveTokens.length; i++ ) {\r\n            reserves = reserves.add ( \r\n                valueOf( reserveTokens[ i ], IERC20( reserveTokens[ i ] ).balanceOf( address(this) ) )\r\n            );\r\n        }\r\n        for( uint i = 0; i < liquidityTokens.length; i++ ) {\r\n            reserves = reserves.add (\r\n                valueOf( liquidityTokens[ i ], IERC20( liquidityTokens[ i ] ).balanceOf( address(this) ) )\r\n            );\r\n        }\r\n        totalReserves = reserves;\r\n        emit ReservesUpdated( reserves );\r\n        emit ReservesAudited( reserves );\r\n    }\r\n\r\n    /**\r\n        @notice returns PHAR valuation of asset\r\n        @param _token address\r\n        @param _amount uint\r\n        @return value_ uint\r\n     */\r\n    function valueOf( address _token, uint _amount ) public view returns ( uint value_ ) {\r\n        if ( isReserveToken[ _token ] ) {\r\n            // convert amount to match PHAR decimals\r\n            value_ = _amount.mul( 10 ** IERC20( PHAR ).decimals() ).div( 10 ** IERC20( _token ).decimals() );\r\n        } else if ( isLiquidityToken[ _token ] ) {\r\n            value_ = IBondCalculator( bondCalculator[ _token ] ).valuation( _token, _amount );\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice queue address to change boolean in mapping\r\n        @param _managing MANAGING\r\n        @param _address address\r\n        @return bool\r\n     */\r\n    function queue( MANAGING _managing, address _address ) external onlyManager() returns ( bool ) {\r\n        require( _address != address(0) );\r\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\r\n            reserveDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\r\n            reserveSpenderQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\r\n            reserveTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\r\n            ReserveManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\r\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\r\n            LiquidityDepositorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\r\n            LiquidityTokenQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\r\n            LiquidityManagerQueue[ _address ] = block.number.add( blocksNeededForQueue.mul( 2 ) );\r\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\r\n            debtorQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\r\n            rewardManagerQueue[ _address ] = block.number.add( blocksNeededForQueue );\r\n        } else if ( _managing == MANAGING.SPHAR ) { // 9\r\n            sPHARQueue = block.number.add( blocksNeededForQueue );\r\n        } else return false;\r\n\r\n        emit ChangeQueued( _managing, _address );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice verify queue then set boolean in mapping\r\n        @param _managing MANAGING\r\n        @param _address address\r\n        @param _calculator address\r\n        @return bool\r\n     */\r\n    function toggle( MANAGING _managing, address _address, address _calculator ) external onlyManager() returns ( bool ) {\r\n        require( _address != address(0) );\r\n        bool result;\r\n        if ( _managing == MANAGING.RESERVEDEPOSITOR ) { // 0\r\n            if ( requirements( reserveDepositorQueue, isReserveDepositor, _address ) ) {\r\n                reserveDepositorQueue[ _address ] = 0;\r\n                if( !listContains( reserveDepositors, _address ) ) {\r\n                    reserveDepositors.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveDepositor[ _address ];\r\n            isReserveDepositor[ _address ] = result;\r\n            \r\n        } else if ( _managing == MANAGING.RESERVESPENDER ) { // 1\r\n            if ( requirements( reserveSpenderQueue, isReserveSpender, _address ) ) {\r\n                reserveSpenderQueue[ _address ] = 0;\r\n                if( !listContains( reserveSpenders, _address ) ) {\r\n                    reserveSpenders.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveSpender[ _address ];\r\n            isReserveSpender[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.RESERVETOKEN ) { // 2\r\n            if ( requirements( reserveTokenQueue, isReserveToken, _address ) ) {\r\n                reserveTokenQueue[ _address ] = 0;\r\n                if( !listContains( reserveTokens, _address ) ) {\r\n                    reserveTokens.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveToken[ _address ];\r\n            isReserveToken[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.RESERVEMANAGER ) { // 3\r\n            if ( requirements( ReserveManagerQueue, isReserveManager, _address ) ) {\r\n                reserveManagers.push( _address );\r\n                ReserveManagerQueue[ _address ] = 0;\r\n                if( !listContains( reserveManagers, _address ) ) {\r\n                    reserveManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isReserveManager[ _address ];\r\n            isReserveManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYDEPOSITOR ) { // 4\r\n            if ( requirements( LiquidityDepositorQueue, isLiquidityDepositor, _address ) ) {\r\n                liquidityDepositors.push( _address );\r\n                LiquidityDepositorQueue[ _address ] = 0;\r\n                if( !listContains( liquidityDepositors, _address ) ) {\r\n                    liquidityDepositors.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityDepositor[ _address ];\r\n            isLiquidityDepositor[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYTOKEN ) { // 5\r\n            if ( requirements( LiquidityTokenQueue, isLiquidityToken, _address ) ) {\r\n                LiquidityTokenQueue[ _address ] = 0;\r\n                if( !listContains( liquidityTokens, _address ) ) {\r\n                    liquidityTokens.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityToken[ _address ];\r\n            isLiquidityToken[ _address ] = result;\r\n            bondCalculator[ _address ] = _calculator;\r\n\r\n        } else if ( _managing == MANAGING.LIQUIDITYMANAGER ) { // 6\r\n            if ( requirements( LiquidityManagerQueue, isLiquidityManager, _address ) ) {\r\n                LiquidityManagerQueue[ _address ] = 0;\r\n                if( !listContains( liquidityManagers, _address ) ) {\r\n                    liquidityManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isLiquidityManager[ _address ];\r\n            isLiquidityManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.DEBTOR ) { // 7\r\n            if ( requirements( debtorQueue, isDebtor, _address ) ) {\r\n                debtorQueue[ _address ] = 0;\r\n                if( !listContains( debtors, _address ) ) {\r\n                    debtors.push( _address );\r\n                }\r\n            }\r\n            result = !isDebtor[ _address ];\r\n            isDebtor[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.REWARDMANAGER ) { // 8\r\n            if ( requirements( rewardManagerQueue, isRewardManager, _address ) ) {\r\n                rewardManagerQueue[ _address ] = 0;\r\n                if( !listContains( rewardManagers, _address ) ) {\r\n                    rewardManagers.push( _address );\r\n                }\r\n            }\r\n            result = !isRewardManager[ _address ];\r\n            isRewardManager[ _address ] = result;\r\n\r\n        } else if ( _managing == MANAGING.SPHAR ) { // 9\r\n            sPHARQueue = 0;\r\n            sPHAR = _address;\r\n            result = true;\r\n\r\n        } else return false;\r\n\r\n        emit ChangeActivated( _managing, _address, result );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice checks requirements and returns altered structs\r\n        @param queue_ mapping( address => uint )\r\n        @param status_ mapping( address => bool )\r\n        @param _address address\r\n        @return bool \r\n     */\r\n    function requirements( \r\n        mapping( address => uint ) storage queue_, \r\n        mapping( address => bool ) storage status_, \r\n        address _address \r\n    ) internal view returns ( bool ) {\r\n        if ( !status_[ _address ] ) {\r\n            require( queue_[ _address ] != 0, \"Must queue\" );\r\n            require( queue_[ _address ] <= block.number, \"Queue not expired\" );\r\n            return true;\r\n        } return false;\r\n    }\r\n\r\n    /**\r\n        @notice checks array to ensure against duplicate\r\n        @param _list address[]\r\n        @param _token address\r\n        @return bool\r\n     */\r\n    function listContains( address[] storage _list, address _token ) internal view returns ( bool ) {\r\n        for( uint i = 0; i < _list.length; i++ ) {\r\n            if( _list[ i ] == _token ) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PHAR\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blocksNeededForQueue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum PHARTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"activated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ChangeActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum PHARTreasury.MANAGING\",\"name\":\"managing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"queued\",\"type\":\"address\"}],\"name\":\"ChangeQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CreateDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReservesManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LiquidityTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PHAR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ReserveManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksNeededForQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_profit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"send_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excessReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"incurDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDebtor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidityToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveDepositor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveSpender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PHARTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"queue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repayDebtWithPHAR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"repayDebtWithReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveDepositorQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveDepositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveSpenderQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveSpenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reserveTokenQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardManagerQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sPHAR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sPHARQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum PHARTreasury.MANAGING\",\"name\":\"_managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"}],\"name\":\"toggle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"valueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PHARTreasury", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007e9da054a09343ec5e201212625d3ec7c9df36610000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc30000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b004186b8dd8cbe34d02e6c29cbb9f99efeda5e70ffe8d65a091988342f413c8"}