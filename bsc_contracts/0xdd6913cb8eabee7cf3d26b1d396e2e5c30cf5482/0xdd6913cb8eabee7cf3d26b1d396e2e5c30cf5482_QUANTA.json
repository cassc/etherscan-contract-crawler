{"SourceCode": "{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    \\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    \\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    \\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    \\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    \\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    \\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    \\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\"},\"QUANTA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract QUANTA is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct LockedTokens {\\r\\n        uint256 amount;\\r\\n        uint256 releaseTime;\\r\\n    }\\r\\n\\r\\n    struct LinearLockedTokens {\\r\\n        uint256 amount;\\r\\n        uint256 lockMonthCount;\\r\\n        uint256 unlockMonthCount;\\r\\n    }\\r\\n\\r\\n    struct PresaleLockedTime {\\r\\n        uint256 monthCountAfterStart;\\r\\n        uint256 lockMonthCount;\\r\\n        uint256 unlockMonthCount;\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n    mapping(address =\\u003e uint256) private _firstInvestors;\\r\\n    mapping(address =\\u003e bool) private _lockedPresaleAddress;\\r\\n    mapping(address =\\u003e LockedTokens[]) private _lockedUntil;\\r\\n    mapping(address =\\u003e LinearLockedTokens[]) private _linearLockedUntil;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    address private _owner;\\r\\n    address private _lockedAddress;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n    uint256 private _startTime;\\r\\n    uint256 private _maxSupply;\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private _initialSupply;\\r\\n    uint256 private _month = 30.5 * 1 days;\\r\\n    uint256[] private _maxMint;\\r\\n    PresaleLockedTime private _presaleLockedTime;\\r\\n\\r\\n    constructor() {        \\r\\n        _owner = msg.sender;\\r\\n        _name = \\\"Quanta Technology\\\";\\r\\n        _symbol = \\\"QUANTA\\\";\\r\\n        _decimals = 12;\\r\\n        _startTime = block.timestamp;\\r\\n        _lockedAddress = 0x318e6BCFDDf1f256F8bd88113852B834d019cFb4;\\r\\n        _maxSupply = 800_000_000 * (10 ** _decimals);\\r\\n        _initialSupply = 50_000_000 * (10 ** _decimals);\\r\\n\\r\\n        _presaleLockedTime.monthCountAfterStart = 3 * _month;\\r\\n        _presaleLockedTime.lockMonthCount = 14 * _month;\\r\\n        _presaleLockedTime.unlockMonthCount = 14;\\r\\n\\r\\n        _maxMint = [5_000_000_000, 0, 0, 1_000_000_000, 800_000_000, 800_000_000, 800_000_000, 800_000_000, 800_000_000, 800_000_000, 3_600_000_000, 800_000_000,\\r\\n                    4_000_000_000, 1_600_000_000, 1_600_000_000, 18_200_000_000, 1_600_000_000, 1_600_000_000, 1_600_000_000, 4_800_000_000, 4_800_000_000, \\r\\n                    5_022_222_226, 5_022_222_226, 3_622_222_222, 1_022_222_222, 1_022_222_222, 1_022_222_222, 1_022_222_222, 1_022_222_222, 222_222_222, 222_222_222, \\r\\n                    222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, \\r\\n                    222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222, 222_222_222,\\r\\n                    222_222_222, 222_222_222, 222_222_222, 222_222_222];\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c _maxMint.length; i++) {\\r\\n            _maxMint[i] = _maxMint[i] * (10 ** 10);\\r\\n        }\\r\\n\\r\\n        _mint(_owner, _initialSupply);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == _owner, \\\"Only owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function maxMint() public view virtual returns (uint256) {\\r\\n        uint256 availabMintAmount = 0;\\r\\n\\r\\n        if ((block.timestamp - _startTime) / _month \\u003c _maxMint.length) {\\r\\n            for (uint256 i = 0; i \\u003c ((block.timestamp - _startTime) / _month) + 1; i++) {\\r\\n                availabMintAmount += _maxMint[i];\\r\\n            }\\r\\n            return availabMintAmount - totalSupply();\\r\\n        }\\r\\n\\r\\n        return maxSupply() - totalSupply();\\r\\n    }\\r\\n\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function maxSupply() public view virtual returns (uint256) {\\r\\n        return _maxSupply;\\r\\n    }\\r\\n\\r\\n    function initialSupply() public view virtual returns (uint256) {\\r\\n        return _initialSupply;\\r\\n    }\\r\\n\\r\\n    function lockedAddress() public view virtual returns (address) {\\r\\n        return _lockedAddress;\\r\\n    }\\r\\n\\r\\n    function addPresaleAdress(address presaleAddress) public onlyOwner virtual returns (bool) {\\r\\n        _lockedPresaleAddress[presaleAddress] = true;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function delPresaleAdress(address presaleAddress) public onlyOwner virtual returns (bool) {\\r\\n        _lockedPresaleAddress[presaleAddress] = false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getPresaleAdress(address presaleAddress) public view virtual returns (bool) {\\r\\n        return _lockedPresaleAddress[presaleAddress];\\r\\n    }\\r\\n\\r\\n    function addFirstInvestor(address recipient, uint256 amount) public onlyOwner virtual returns (bool) {\\r\\n        _firstInvestors[recipient] = _firstInvestors[recipient].add(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getFirstInvestor(address recipient) public view virtual returns (uint256) {\\r\\n        return _firstInvestors[recipient];\\r\\n    }\\r\\n\\r\\n    function availableBalance(address recipient) public view virtual returns (uint256) {\\r\\n        uint256 lockedBalance = 0;\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c _lockedUntil[recipient].length; i++) {\\r\\n            if (_lockedUntil[recipient][i].releaseTime \\u003e block.timestamp) {\\r\\n                lockedBalance += _lockedUntil[recipient][i].amount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c _linearLockedUntil[recipient].length; i++) {\\r\\n            uint256 amountStep = _linearLockedUntil[recipient][i].amount / _linearLockedUntil[recipient][i].unlockMonthCount;\\r\\n\\r\\n            for (uint256 x = 0; x \\u003c _linearLockedUntil[recipient][i].unlockMonthCount; x++) {\\r\\n                if (_linearLockedUntil[recipient][i].lockMonthCount + (x * _month) \\u003e= block.timestamp) {\\r\\n                    lockedBalance += amountStep;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return balanceOf(recipient) - lockedBalance;\\r\\n    }\\r\\n\\r\\n    function setPresaleLockedTime(uint256 monthCountAfterStart, uint256 lockMonthCount, uint256 unlockMonthCount) public onlyOwner returns (bool) {\\r\\n        require(monthCountAfterStart != 0 , \\\"Month count after start must be greater than 0\\\");\\r\\n        require(lockMonthCount != 0 , \\\"Lock month count must be greater than 0\\\");\\r\\n        require(unlockMonthCount != 0 , \\\"unlock month count must be greater than 0\\\");\\r\\n\\r\\n        _presaleLockedTime.monthCountAfterStart = monthCountAfterStart * _month;\\r\\n        _presaleLockedTime.lockMonthCount = lockMonthCount * _month;\\r\\n        _presaleLockedTime.unlockMonthCount = unlockMonthCount;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferWithLinearLock(address recipient, uint256 amount, uint256 lockMonthCount, uint unlockMonthCount) public onlyOwner returns (bool) {\\r\\n        require(lockMonthCount != 0 , \\\"Lock month count must be greater than 0\\\");\\r\\n        require(unlockMonthCount != 0 , \\\"Unlock month count must be greater than 0\\\");\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n\\r\\n        LinearLockedTokens memory newLockedTokens = LinearLockedTokens(amount, block.timestamp + (lockMonthCount * _month), unlockMonthCount);\\r\\n        _linearLockedUntil[recipient].push(newLockedTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferWithLock(address recipient, uint256 amount, uint256 daysToLock) public onlyOwner returns (bool) {\\r\\n        require(daysToLock != 0 , \\\"Days count must be greater than 0\\\");\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n\\r\\n        LockedTokens memory newLockedTokens = LockedTokens(amount, block.timestamp + (daysToLock * 1 days));\\r\\n        _lockedUntil[recipient].push(newLockedTokens);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) public onlyOwner virtual returns (bool) {\\r\\n        require(amount \\u003c= maxMint(), \\\"Exceeds available maximum\\\");\\r\\n        require(_totalSupply + amount \\u003c= _maxSupply, \\\"Max supply reached\\\");\\r\\n\\r\\n        _mint(msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public onlyOwner virtual returns (bool) {\\r\\n        _burn(msg.sender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(balanceOf(sender) \\u003e= amount, \\\"Insufficient balance\\\");\\r\\n        require(sender != _lockedAddress, \\\"Sender address is locked\\\");\\r\\n        require(amount \\u003c= availableBalance(sender), \\\"Tokens is locked\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        if (_lockedPresaleAddress[msg.sender]) {\\r\\n            uint256 time = _startTime + _presaleLockedTime.monthCountAfterStart + _presaleLockedTime.lockMonthCount;\\r\\n            _linearLockedUntil[recipient].push(LinearLockedTokens(amount, time, _presaleLockedTime.unlockMonthCount));\\r\\n        } \\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        _balances[sender] = _balances[sender].sub(amount);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n\\r\\n        if (balanceOf(sender) \\u003c _firstInvestors[sender]) {\\r\\n            _firstInvestors[sender] = _firstInvestors[sender].sub(_firstInvestors[sender].sub(balanceOf(sender)));\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        _balances[account] = _balances[account].sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addFirstInvestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaleAddress\",\"type\":\"address\"}],\"name\":\"addPresaleAdress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaleAddress\",\"type\":\"address\"}],\"name\":\"delPresaleAdress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getFirstInvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"presaleAddress\",\"type\":\"address\"}],\"name\":\"getPresaleAdress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"monthCountAfterStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockMonthCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockMonthCount\",\"type\":\"uint256\"}],\"name\":\"setPresaleLockedTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockMonthCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockMonthCount\",\"type\":\"uint256\"}],\"name\":\"transferWithLinearLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysToLock\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QUANTA", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d64ce564173af3008fdb348d563d1c91fba26935279cdfb8489c4fdb18409031"}