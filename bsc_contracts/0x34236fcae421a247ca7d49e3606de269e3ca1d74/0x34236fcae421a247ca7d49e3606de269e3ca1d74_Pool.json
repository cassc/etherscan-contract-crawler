{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/swap/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LPToken.sol\\\";\\nimport \\\"../libs/MathUtils.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Pool is IPool, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using MathUtils for uint256;\\n\\n\\n    uint256 public initialA;\\n    uint256 public futureA;\\n    uint256 public initialATime;\\n    uint256 public futureATime;\\n\\n    uint256 public swapFee;\\n    uint256 public adminFee;\\n\\n    LPToken public lpToken;\\n\\n    IERC20[] public coins;\\n    mapping(address => uint8) private coinIndexes;\\n    uint256[] tokenPrecisionMultipliers;\\n\\n    uint256[] public balances;\\n\\n\\n    event TokenSwap(\\n        address indexed buyer,\\n        uint256 tokensSold,\\n        uint256 tokensBought,\\n        uint128 soldId,\\n        uint128 boughtId\\n    );\\n\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256 lpTokenSupply\\n    );\\n\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        uint256 boughtId,\\n        uint256 tokensBought\\n    );\\n\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] tokenAmounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n\\n    event NewSwapFee(uint256 newSwapFee);\\n    event NewAdminFee(uint256 newAdminFee);\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n\\n    struct CalculateWithdrawOneTokenDYInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 newY;\\n        uint256 feePerToken;\\n        uint256 preciseA;\\n    }\\n\\n    struct AddLiquidityInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n    }\\n\\n    struct RemoveLiquidityImbalanceInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n    }\\n\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    // feeAmount = amount * fee / FEE_DENOMINATOR, 1% max.\\n    uint256 private constant MAX_SWAP_FEE = 10**8;\\n\\n    // Percentage of swap fee. E.g. 5*1e9 = 50%\\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\\n\\n    uint256 private constant MAX_LOOP_LIMIT = 256;\\n\\n    uint256 public constant A_PRECISION = 100;\\n    uint256 public constant MAX_A = 10**6;\\n    uint256 private constant MAX_A_CHANGE = 10;\\n    uint256 private constant MIN_RAMP_TIME = 1 days;\\n\\n    constructor(\\n        IERC20[] memory _coins,\\n        uint8[] memory decimals,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _swapFee,\\n        uint256 _adminFee\\n    ) {\\n        require(_coins.length >= 2, \\\"O3SwapPool: coins.length out of range(<2)\\\");\\n        require(_coins.length <= 8, \\\"O3SwapPool: coins.length out of range(>8\\\");\\n        require(_coins.length == decimals.length, \\\"O3SwapPool: invalid decimals length\\\");\\n\\n        uint256[] memory precisionMultipliers = new uint256[](decimals.length);\\n\\n        for (uint8 i = 0; i < _coins.length; i++) {\\n            require(address(_coins[i]) != address(0), \\\"O3SwapPool: token address cannot be zero\\\");\\n            require(decimals[i] <= 18, \\\"O3SwapPool: token decimal exceeds maximum\\\");\\n\\n            if (i > 0) {\\n                require(coinIndexes[address(_coins[i])] == 0 && _coins[0] != _coins[i], \\\"O3SwapPool: duplicated token pooled\\\");\\n            }\\n\\n            precisionMultipliers[i] = 10 ** (18 - uint256(decimals[i]));\\n            coinIndexes[address(_coins[i])] = i;\\n        }\\n\\n        require(_a < MAX_A, \\\"O3SwapPool: _a exceeds maximum\\\");\\n        require(_swapFee <= MAX_SWAP_FEE, \\\"O3SwapPool: _swapFee exceeds maximum\\\");\\n        require(_adminFee <= MAX_ADMIN_FEE, \\\"O3SwapPool: _adminFee exceeds maximum\\\");\\n\\n        coins = _coins;\\n        lpToken = new LPToken(lpTokenName, lpTokenSymbol);\\n        tokenPrecisionMultipliers = precisionMultipliers;\\n        balances = new uint256[](_coins.length);\\n        initialA = _a * A_PRECISION;\\n        futureA = _a * A_PRECISION;\\n        initialATime = 0;\\n        futureATime = 0;\\n        swapFee = _swapFee;\\n        adminFee = _adminFee;\\n    }\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, 'O3SwapPool: EXPIRED');\\n        _;\\n    }\\n\\n    function getTokenIndex(address token) external view returns (uint8) {\\n        uint8 index = coinIndexes[token];\\n        require(address(coins[index]) == token, \\\"O3SwapPool: TOKEN_NOT_POOLED\\\");\\n        return index;\\n    }\\n\\n    function getA() external view returns (uint256) {\\n        return _getA();\\n    }\\n\\n    function _getA() internal view returns (uint256) {\\n        return _getAPrecise() / A_PRECISION;\\n    }\\n\\n    function _getAPrecise() internal view returns (uint256) {\\n        uint256 t1 = futureATime;\\n        uint256 a1 = futureA;\\n\\n        if (block.timestamp < t1) {\\n            uint256 a0 = initialA;\\n            uint256 t0 = initialATime;\\n            if (a1 > a0) {\\n                return a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0);\\n            } else {\\n                return a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0);\\n            }\\n        } else {\\n            return a1;\\n        }\\n    }\\n\\n    function getVirtualPrice() external view returns (uint256) {\\n        uint256 d = _getD(_xp(), _getAPrecise());\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        if (totalSupply == 0) {\\n            return 0;\\n        }\\n\\n        return d * 10**18 / totalSupply;\\n    }\\n\\n    function calculateWithdrawOneToken(uint256 tokenAmount, uint8 tokenIndex) external view returns (uint256 amount) {\\n        (amount, ) = _calculateWithdrawOneToken(tokenAmount, tokenIndex);\\n    }\\n\\n    function _calculateWithdrawOneToken(uint256 tokenAmount, uint8 tokenIndex) internal view returns (uint256, uint256) {\\n        uint256 dy;\\n        uint256 newY;\\n\\n        (dy, newY) = _calculateWithdrawOneTokenDY(tokenIndex, tokenAmount);\\n        uint256 dySwapFee = (_xp()[tokenIndex] - newY) / tokenPrecisionMultipliers[tokenIndex] - dy;\\n\\n        return (dy, dySwapFee);\\n    }\\n\\n    function _calculateWithdrawOneTokenDY(uint8 tokenIndex, uint256 tokenAmount) internal view returns (uint256, uint256) {\\n        require(tokenIndex < coins.length, \\\"O3SwapPool: TOKEN_INDEX_OUT_OF_RANGE\\\");\\n\\n        CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n        v.preciseA = _getAPrecise();\\n        v.feePerToken = _feePerToken();\\n        uint256[] memory xp = _xp();\\n        v.d0 = _getD(xp, v.preciseA);\\n        v.d1 = v.d0 - tokenAmount * v.d0 / lpToken.totalSupply();\\n\\n        require(tokenAmount <= xp[tokenIndex], \\\"O3SwapPool: WITHDRAW_AMOUNT_EXCEEDS_AVAILABLE\\\");\\n\\n        v.newY = _getYD(v.preciseA, tokenIndex, xp, v.d1);\\n\\n        uint256[] memory xpReduced = new uint256[](xp.length);\\n\\n        for (uint256 i = 0; i < coins.length; i++) {\\n            uint256 xpi = xp[i];\\n\\n            xpReduced[i] = xpi - (\\n                ((i == tokenIndex) ? xpi * v.d1 / v.d0 - v.newY : xpi - xpi * v.d1 / v.d0)\\n                * v.feePerToken / FEE_DENOMINATOR\\n            );\\n        }\\n\\n        uint256 dy = xpReduced[tokenIndex] - _getYD(v.preciseA, tokenIndex, xpReduced, v.d1);\\n        dy = (dy - 1) / tokenPrecisionMultipliers[tokenIndex];\\n\\n        return (dy, v.newY);\\n    }\\n\\n    function _getYD(uint256 a, uint8 tokenIndex, uint256[] memory xp, uint256 d) internal pure returns (uint256) {\\n        uint256 numTokens = xp.length;\\n        require(tokenIndex < numTokens, \\\"O3SwapPool: TOKEN_INDEX_OUT_OF_RANGE\\\");\\n\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 nA = a * numTokens;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i != tokenIndex) {\\n                s = s + xp[i];\\n                c = c * d / (xp[i] * numTokens);\\n            }\\n        }\\n\\n        c = c * d * A_PRECISION / (nA * numTokens);\\n\\n        uint256 b = s + d * A_PRECISION / nA;\\n        uint256 yPrev;\\n        uint256 y = d;\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = (y*y + c) / (2 * y + b - d);\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    function _getD(uint256[] memory xp, uint256 a) internal pure returns (uint256) {\\n        uint256 numTokens = xp.length;\\n        uint256 s;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            s = s + xp[i];\\n        }\\n\\n        if (s == 0) {\\n            return 0;\\n        }\\n\\n        uint256 prevD;\\n        uint256 d = s;\\n        uint256 nA = a * numTokens;\\n\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            uint256 dP = d;\\n            for (uint256 j = 0; j < numTokens; j++) {\\n                dP = dP * d / (xp[j] * numTokens);\\n            }\\n            prevD = d;\\n            d = (nA * s / A_PRECISION + dP * numTokens) * d / ((nA - A_PRECISION) * d / A_PRECISION + (numTokens + 1) * dP);\\n            if (d.within1(prevD)) {\\n                return d;\\n            }\\n        }\\n\\n        revert(\\\"D did not converge\\\");\\n    }\\n\\n    function _getD() internal view returns (uint256) {\\n        return _getD(_xp(), _getAPrecise());\\n    }\\n\\n    function _xp(uint256[] memory _balances, uint256[] memory _precisionMultipliers) internal pure returns (uint256[] memory) {\\n        uint256 numTokens = _balances.length;\\n        require(numTokens == _precisionMultipliers.length, \\\"O3SwapPool: BALANCES_MULTIPLIERS_LENGTH_MISMATCH\\\");\\n\\n        uint256[] memory xp = new uint256[](numTokens);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            xp[i] = _balances[i] * _precisionMultipliers[i];\\n        }\\n\\n        return xp;\\n    }\\n\\n    function _xp(uint256[] memory _balances) internal view returns (uint256[] memory) {\\n        return _xp(_balances, tokenPrecisionMultipliers);\\n    }\\n\\n    function _xp() internal view returns (uint256[] memory) {\\n        return _xp(balances, tokenPrecisionMultipliers);\\n    }\\n\\n    function _getY(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 x, uint256[] memory xp) internal view returns (uint256) {\\n        uint256 numTokens = coins.length;\\n\\n        require(tokenIndexFrom != tokenIndexTo, \\\"O3SwapPool: DUPLICATED_TOKEN_INDEX\\\");\\n        require(tokenIndexFrom < numTokens && tokenIndexTo < numTokens, \\\"O3SwapPool: TOKEN_INDEX_OUT_OF_RANGE\\\");\\n\\n        uint256 a = _getAPrecise();\\n        uint256 d = _getD(xp, a);\\n        uint256 nA = numTokens * a;\\n        uint256 c = d;\\n        uint256 s;\\n        uint256 _x;\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (i == tokenIndexFrom) {\\n                _x = x;\\n            } else if (i != tokenIndexTo) {\\n                _x = xp[i];\\n            } else {\\n                continue;\\n            }\\n            s += _x;\\n            c = c * d  / (_x * numTokens);\\n        }\\n\\n        c = c * d * A_PRECISION / (nA * numTokens);\\n        uint256 b = s + d * A_PRECISION / nA;\\n        uint256 yPrev;\\n        uint256 y = d;\\n\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (2 * y + b - d);\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    function calculateSwap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) external view returns (uint256 dy) {\\n        (dy, ) = _calculateSwap(tokenIndexFrom, tokenIndexTo, dx);\\n    }\\n\\n    function _calculateSwap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) internal view returns (uint256 dy, uint256 dyFee) {\\n        uint256[] memory xp = _xp();\\n        require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \\\"O3SwapPool: TOKEN_INDEX_OUT_OF_RANGE\\\");\\n\\n        uint256 x = xp[tokenIndexFrom] + dx * tokenPrecisionMultipliers[tokenIndexFrom];\\n        uint256 y = _getY(tokenIndexFrom, tokenIndexTo, x, xp);\\n        dy = xp[tokenIndexTo] - y - 1;\\n        dyFee = dy * swapFee / FEE_DENOMINATOR;\\n        dy = (dy - dyFee) / tokenPrecisionMultipliers[tokenIndexTo];\\n    }\\n\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory) {\\n        return _calculateRemoveLiquidity(amount);\\n    }\\n\\n    function _calculateRemoveLiquidity(uint256 amount) internal view returns (uint256[] memory) {\\n        uint256 totalSupply = lpToken.totalSupply();\\n        require(amount <= totalSupply, \\\"O3SwapPool: WITHDRAW_AMOUNT_EXCEEDS_AVAILABLE\\\");\\n\\n        uint256 numTokens = coins.length;\\n        uint256[] memory amounts = new uint256[](numTokens);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            amounts[i] = balances[i] * amount / totalSupply;\\n        }\\n\\n        return amounts;\\n    }\\n\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256) {\\n        uint256 numTokens = coins.length;\\n        uint256 a = _getAPrecise();\\n        uint256[] memory _balances = balances;\\n        uint256 d0 = _getD(_xp(balances), a);\\n\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            if (deposit) {\\n                _balances[i] += amounts[i];\\n            } else {\\n                _balances[i] -= amounts[i];\\n            }\\n        }\\n\\n        uint256 d1 = _getD(_xp(_balances), a);\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        if (deposit) {\\n            return (d1 - d0) * totalSupply / d0;\\n        } else {\\n            return (d0 - d1) * totalSupply / d0;\\n        }\\n    }\\n\\n    function getAdminBalance(uint256 index) external view returns (uint256) {\\n        require(index < coins.length, \\\"O3SwapPool: TOKEN_INDEX_OUT_OF_RANGE\\\");\\n        return coins[index].balanceOf(address(this)) - balances[index];\\n    }\\n\\n    function _feePerToken() internal view returns (uint256) {\\n        return swapFee * coins.length / (4 * (coins.length - 1));\\n    }\\n\\n    function swap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) external nonReentrant ensure(deadline) returns (uint256) {\\n        require(dx <= coins[tokenIndexFrom].balanceOf(msg.sender), \\\"O3SwapPool: INSUFFICIENT_BALANCE\\\");\\n\\n        uint256 balanceBefore = coins[tokenIndexFrom].balanceOf(address(this));\\n        coins[tokenIndexFrom].safeTransferFrom(msg.sender, address(this), dx);\\n        uint256 transferredDx = coins[tokenIndexFrom].balanceOf(address(this)) - balanceBefore;\\n\\n        (uint256 dy, uint256 dyFee) = _calculateSwap(tokenIndexFrom, tokenIndexTo, transferredDx);\\n        require(dy >= minDy, \\\"O3SwapPool: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\n        uint256 dyAdminFee = dyFee * adminFee / FEE_DENOMINATOR / tokenPrecisionMultipliers[tokenIndexTo];\\n\\n        balances[tokenIndexFrom] += transferredDx;\\n        balances[tokenIndexTo] -= dy + dyAdminFee;\\n\\n        coins[tokenIndexTo].safeTransfer(msg.sender, dy);\\n\\n        emit TokenSwap(msg.sender, transferredDx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n        return dy;\\n    }\\n\\n    function addLiquidity(uint256[] memory amounts, uint256 minToMint, uint256 deadline) external nonReentrant ensure(deadline) returns (uint256) {\\n        require(amounts.length == coins.length, \\\"O3SwapPool: AMOUNTS_COINS_LENGTH_MISMATCH\\\");\\n\\n        uint256[] memory fees = new uint256[](coins.length);\\n\\n        AddLiquidityInfo memory v = AddLiquidityInfo(0, 0, 0, 0);\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        if (totalSupply != 0) {\\n            v.d0 = _getD();\\n        }\\n        uint256[] memory newBalances = balances;\\n\\n        for (uint256 i = 0; i < coins.length; i++) {\\n            // Initial deposit requires all coins\\n            require(totalSupply != 0 || amounts[i] > 0, \\\"O3SwapPool: ALL_TOKENS_REQUIRED_IN_INITIAL_DEPOSIT\\\");\\n\\n            // Transfer tokens first to see if a fee was charged on transfer\\n            if (amounts[i] != 0) {\\n                uint256 beforeBalance = coins[i].balanceOf(address(this));\\n                coins[i].safeTransferFrom(msg.sender, address(this), amounts[i]);\\n                amounts[i] = coins[i].balanceOf(address(this)) - beforeBalance;\\n            }\\n\\n            newBalances[i] = balances[i] + amounts[i];\\n        }\\n\\n        v.preciseA = _getAPrecise();\\n        v.d1 = _getD(_xp(newBalances), v.preciseA);\\n        require(v.d1 > v.d0, \\\"O3SwapPool: INVALID_OPERATION_D_MUST_INCREASE\\\");\\n\\n        // updated to reflect fees and calculate the user's LP tokens\\n        v.d2 = v.d1;\\n        if (totalSupply != 0) {\\n            uint256 feePerToken = _feePerToken();\\n            for (uint256 i = 0; i < coins.length; i++) {\\n                uint256 idealBalance = v.d1 * balances[i] / v.d0;\\n                fees[i] = feePerToken * idealBalance.difference(newBalances[i]) / FEE_DENOMINATOR;\\n                balances[i] = newBalances[i] - (fees[i] * adminFee / FEE_DENOMINATOR);\\n                newBalances[i] -= fees[i];\\n            }\\n            v.d2 = _getD(_xp(newBalances), v.preciseA);\\n        } else {\\n            balances = newBalances;\\n        }\\n\\n        uint256 toMint;\\n        if (totalSupply == 0) {\\n            toMint = v.d1;\\n        } else {\\n            toMint = (v.d2 - v.d0) * totalSupply / v.d0;\\n        }\\n\\n        require(toMint >= minToMint, \\\"O3SwapPool: INSUFFICIENT_MINT_AMOUNT\\\");\\n\\n        lpToken.mint(msg.sender, toMint);\\n\\n        emit AddLiquidity(msg.sender, amounts, fees, v.d1, totalSupply + toMint);\\n\\n        return toMint;\\n    }\\n\\n    function removeLiquidity(uint256 amount, uint256[] calldata minAmounts, uint256 deadline) external nonReentrant ensure(deadline) returns (uint256[] memory) {\\n        require(amount <= lpToken.balanceOf(msg.sender), \\\"O3SwapPool: INSUFFICIENT_LP_AMOUNT\\\");\\n        require(minAmounts.length == coins.length, \\\"O3SwapPool: AMOUNTS_COINS_LENGTH_MISMATCH\\\");\\n\\n        uint256[] memory amounts = _calculateRemoveLiquidity(amount);\\n\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"O3SwapPool: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n            balances[i] -= amounts[i];\\n            coins[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        lpToken.burnFrom(msg.sender, amount);\\n\\n        emit RemoveLiquidity(msg.sender, amounts, lpToken.totalSupply());\\n\\n        return amounts;\\n    }\\n\\n    function removeLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline) external nonReentrant ensure(deadline) returns (uint256) {\\n        uint256 numTokens = coins.length;\\n\\n        require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\"O3SwapPool: INSUFFICIENT_LP_AMOUNT\\\");\\n        require(tokenIndex < numTokens, \\\"O3SwapPool: TOKEN_INDEX_OUT_OF_RANGE\\\");\\n\\n        uint256 dyFee;\\n        uint256 dy;\\n\\n        (dy, dyFee) = _calculateWithdrawOneToken(tokenAmount, tokenIndex);\\n\\n        require(dy >= minAmount, \\\"O3SwapPool: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\n        balances[tokenIndex] -= dy + dyFee * adminFee / FEE_DENOMINATOR;\\n        lpToken.burnFrom(msg.sender, tokenAmount);\\n        coins[tokenIndex].safeTransfer(msg.sender, dy);\\n\\n        emit RemoveLiquidityOne(msg.sender, tokenAmount, lpToken.totalSupply(), tokenIndex, dy);\\n\\n        return dy;\\n    }\\n\\n    function removeLiquidityImbalance(uint256[] calldata amounts, uint256 maxBurnAmount, uint256 deadline) external nonReentrant ensure(deadline) returns (uint256) {\\n        require(amounts.length == coins.length, \\\"O3SwapPool: AMOUNTS_COINS_LENGTH_MISMATCH\\\");\\n        require(maxBurnAmount <= lpToken.balanceOf(msg.sender) && maxBurnAmount != 0, \\\"O3SwapPool: INSUFFICIENT_LP_AMOUNT\\\");\\n\\n        RemoveLiquidityImbalanceInfo memory v = RemoveLiquidityImbalanceInfo(0, 0, 0, 0);\\n\\n        uint256 tokenSupply = lpToken.totalSupply();\\n        uint256 feePerToken = _feePerToken();\\n        v.preciseA = _getAPrecise();\\n        v.d0 = _getD(_xp(), v.preciseA);\\n\\n        uint256[] memory newBalances = balances;\\n\\n        for (uint256 i = 0; i < coins.length; i++) {\\n            newBalances[i] -= amounts[i];\\n        }\\n\\n        v.d1 = _getD(_xp(newBalances), v.preciseA);\\n\\n        uint256[] memory fees = new uint256[](coins.length);\\n\\n        for (uint256 i = 0; i < coins.length; i++) {\\n            uint256 idealBalance = v.d1 * balances[i] / v.d0;\\n            uint256 difference = idealBalance.difference(newBalances[i]);\\n            fees[i] = feePerToken * difference / FEE_DENOMINATOR;\\n            balances[i] = newBalances[i] - (fees[i] * adminFee / FEE_DENOMINATOR);\\n            newBalances[i] -= fees[i];\\n        }\\n\\n        v.d2 = _getD(_xp(newBalances), v.preciseA);\\n\\n        uint256 tokenAmount = (v.d0 - v.d2) * tokenSupply / v.d0;\\n        require(tokenAmount != 0, \\\"O3SwapPool: BURNT_LP_AMOUNT_CANNOT_BE_ZERO\\\");\\n        tokenAmount += 1;\\n\\n        require(tokenAmount <= maxBurnAmount, \\\"O3SwapPool: BURNT_LP_AMOUNT_EXCEEDS_LIMITATION\\\");\\n\\n        lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n        for (uint256 i = 0; i < coins.length; i++) {\\n            coins[i].safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, v.d1, tokenSupply - tokenAmount);\\n\\n        return tokenAmount;\\n    }\\n\\n    function applySwapFee(uint256 newSwapFee) external onlyOwner {\\n        require(newSwapFee <= MAX_SWAP_FEE, \\\"O3SwapPool: swap fee exceeds maximum\\\");\\n        swapFee = newSwapFee;\\n\\n        emit NewSwapFee(newSwapFee);\\n    }\\n\\n    function applyAdminFee(uint256 newAdminFee) external onlyOwner {\\n        require(newAdminFee <= MAX_ADMIN_FEE, \\\"O3SwapPool: admin fee exceeds maximum\\\");\\n        adminFee = newAdminFee;\\n\\n        emit NewAdminFee(newAdminFee);\\n    }\\n\\n    function withdrawAdminFee(address receiver) external onlyOwner {\\n        for (uint256 i = 0; i < coins.length; i++) {\\n            IERC20 token = coins[i];\\n            uint256 balance = token.balanceOf(address(this)) - balances[i];\\n            if (balance > 0) {\\n                token.safeTransfer(receiver, balance);\\n            }\\n        }\\n    }\\n\\n    function rampA(uint256 _futureA, uint256 _futureTime) external onlyOwner {\\n        require(block.timestamp >= initialATime + MIN_RAMP_TIME, \\\"O3SwapPool: at least 1 day before new ramp\\\");\\n        require(_futureTime >= block.timestamp + MIN_RAMP_TIME, \\\"O3SwapPool: insufficient ramp time\\\");\\n        require(_futureA > 0 && _futureA < MAX_A, \\\"O3SwapPool: futureA must in range (0, MAX_A)\\\");\\n\\n        uint256 initialAPrecise = _getAPrecise();\\n        uint256 futureAPrecise = _futureA * A_PRECISION;\\n\\n        if (futureAPrecise < initialAPrecise) {\\n            require(futureAPrecise * MAX_A_CHANGE >= initialAPrecise, \\\"O3SwapPool: futureA too small\\\");\\n        } else {\\n            require(futureAPrecise <= initialAPrecise * MAX_A_CHANGE, \\\"O3SwapPool: futureA too large\\\");\\n        }\\n\\n        initialA = initialAPrecise;\\n        futureA = futureAPrecise;\\n        initialATime = block.timestamp;\\n        futureATime = _futureTime;\\n\\n        emit RampA(initialAPrecise, futureAPrecise, block.timestamp, _futureTime);\\n    }\\n\\n    function stopRampA() external onlyOwner {\\n        require(futureATime > block.timestamp, \\\"O3SwapPool: ramp already stopped\\\");\\n\\n        uint256 currentA = _getAPrecise();\\n\\n        initialA = currentA;\\n        futureA = currentA;\\n        initialATime = block.timestamp;\\n        futureATime = block.timestamp;\\n\\n        emit StopRampA(currentA, block.timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/swap/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPool {\\n    function coins(uint256 index) external view returns(IERC20);\\n    function getA() external view returns (uint256);\\n    function getTokenIndex(address token) external view returns (uint8);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function calculateSwap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) external view returns (uint256 dy);\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n    function calculateWithdrawOneToken(uint256 tokenAmount, uint8 tokenIndex) external view returns (uint256 amount);\\n\\n    function swap(uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) external returns (uint256);\\n    function addLiquidity(uint256[] memory amounts, uint256 minToMint, uint256 deadline) external returns (uint256);\\n    function removeLiquidity(uint256 amount, uint256[] calldata minAmounts, uint256 deadline) external returns (uint256[] memory);\\n    function removeLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline) external returns (uint256);\\n    function removeLiquidityImbalance(uint256[] calldata amounts, uint256 maxBurnAmount, uint256 deadline) external returns (uint256);\\n\\n    function applySwapFee(uint256 newSwapFee) external;\\n    function applyAdminFee(uint256 newAdminFee) external;\\n    function getAdminBalance(uint256 index) external view returns (uint256);\\n    function withdrawAdminFee(address receiver) external;\\n    function rampA(uint256 _futureA, uint256 _futureTime) external;\\n    function stopRampA() external;\\n}\\n\"\r\n    },\r\n    \"/contracts/swap/LPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract LPToken is ERC20Burnable, Ownable {\\n\\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\\n\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        require(amount != 0, \\\"ERC20: zero mint amount\\\");\\n        _mint(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/libs/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title MathUtils library\\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\\n * differences between two uint256.\\n */\\nlibrary MathUtils {\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (_difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return _difference(a, b);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function _difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_coins\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals\",\"type\":\"uint8[]\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"NewSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"boughtId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"soldId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"boughtId\",\"type\":\"uint128\"}],\"name\":\"TokenSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"applyAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"applySwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"}],\"name\":\"calculateWithdrawOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureATime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdminBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialATime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract LPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_futureTime\",\"type\":\"uint256\"}],\"name\":\"rampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000000000020000000000000000000000008fff93e810a2edaafc326edee51071da9d398e830000000000000000000000005cb23e06fa7dcf97c4d1b1452fce4bf6a92cc94600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000184f332042524953452f704252495345204c5020546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000084c502d4252495345000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}