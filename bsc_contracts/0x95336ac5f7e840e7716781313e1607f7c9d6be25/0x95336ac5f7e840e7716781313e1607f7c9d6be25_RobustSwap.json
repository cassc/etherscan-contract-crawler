{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity = 0.6.12;\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/libs/IBEP20.sol\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libs/BEP20.sol\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\n \r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     \r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\t*/\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\")\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\n\tRobustSwap by the Robust Protocol team\r\n\tWebsite: https://robustprotocol.fi\r\n\tTelegram: https://t.me/robustprotocol\r\n\tTwitter: https://twitter.com/robustprotocol\r\n\tMedium: https://robustprotocol.medium.com\r\n\tGitBook: https://docs.robustprotocol.fi\r\n\tGitHub: https://github.com/robustprotocol\r\n\tReddit: https://www.reddit.com/r/robustProtocol\r\n*/\r\n\r\n// File: contracts/RobustSwap.sol\r\n\r\ncontract RobustSwap is BEP20 {\r\n\r\n\tusing Address for address;\r\n\r\n\t// The operator can perform all updates except minting\r\n\taddress public operator;\r\n\r\n\t// Operator timelock\r\n\tbool public operatorTimeLocked = false;\r\n\r\n\t// Timelock contract\r\n\taddress public operatorTimelockContract;\r\n\r\n\t// Max tax rate in basis points (Default: 20% of transaction amount)\r\n\tuint16 private constant MAXIMUM_TAX_RATE = 2000;\r\n\t\r\n\t// Transfer Tax\r\n\tbool public transferTaxEnabled = true;\r\n\r\n\t// Buy tax rate in basis points (Default: 6% of transaction amount)\r\n\tuint16 public transferTaxRateBuy = 600;\r\n\r\n\t// Sell tax rate in basis points (Default: 8% of transaction amount)\r\n\tuint16 public transferTaxRateSell = 800;\r\n\r\n\t// Max burn tax rate (Default: 100% of tax amount)\r\n\tuint16 private constant MAXIMUM_BURN_RATE = 100;\r\n\r\n\t// Burn address\r\n\taddress private constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\t\r\n\r\n\t// Buy burn rate (Default: 0 of transferTaxRateBuy)\r\n\tuint16 public burnRateBuy = 0;\r\n\r\n\t// Sell burn rate (Default: 0 of transferTaxRateSell)\r\n\tuint16 public burnRateSell = 0;\r\n\r\n\t// Max supply of RobustSwap RBS\r\n\tuint256 public constant MAXIMUM_SUPPLY = 106050 ether;\r\n\r\n\t// Keep track of how many tokens have been minted\r\n\tuint256 public mintedSupply;\r\n\r\n\t// Keep track of total amount of tokens taxed\r\n\tuint256 public mintedTaxed;\r\n\r\n\t// Min tax transfer limit rate in basis points (Default: 0.1% of the total supply)\r\n\tuint16 private constant MINIMUM_TRANSFER_LIMIT = 10;\r\n\r\n\t// Transfer limit rate in basis points (Default: 1% of the total supply)\r\n\tuint16 public transferAmountLimitRate = 100;\r\n\r\n\t// Auto trigger for autoLiquidity and autoSell\r\n\tbool public autoTrigger = true;\r\n\r\n\t// Auto trigger in progress\r\n\tbool private _inAutoTrigger;\r\n\r\n\t// BNB for autoTrigger to occur in basis points (Default: 1 BNB)\r\n\tuint256 public autoTriggerAmount = 1 ether;\r\n\r\n\t// Min BNB for autoTrigger to occur in basis points (Default: 10% of autoTriggerAmount, 0.1 BNB)\r\n\tuint16 public autoTriggerAmountRate = 1000;\r\n\r\n\t// Auto liquidity generation\r\n\tbool public autoLiquidityEnabled = true;\r\n\r\n\t// Auto sell RBS for BNB\r\n\tbool public autoSellEnabled = true;\r\n\r\n\t// Modifiable: Router will be changed when RobustSwap AMM is released\r\n\tIUniswapV2Router02 private _robustSwapRouter;\r\n\r\n\t// The trading pair\r\n\taddress public robustSwapBNBPair;\r\n\r\n\t// Addresses excluded from taxes\r\n\tmapping(address=> bool) private _taxExcludedList;\r\n\r\n\t// Addresses excluded from transfer limit\r\n\tmapping(address=> bool) private _transferLimitExcluded;\r\n\r\n\t// LP Pairs excluded from taxes\r\n\tmapping(address=> bool) private _robustSwapPairLPList;\r\n\r\n\t// Enable trading. This can only occur once\r\n\tbool private _tradingEnabled = false;\r\n\r\n\t// Prevent bot transactions\r\n\tmapping (address => uint256) private _botGuard;\r\n\r\n\t// Max bot guard blocks (Default: 10 Blocks)\r\n\tuint8 private constant MAXIMUM_BOTGUARD_BLOCKS = 10;\r\n\r\n\t// Bot guard blocks (Default: 5 Blocks)\r\n\tuint8 public botGuardBlocks = 5;\r\n\r\n\t// Events are necessary to keep track of all updates and changes especially by the operator\r\n\tevent OperatorSet(address indexed previousOperator, address indexed newOperator);\r\n\tevent UpdateOperatorSetTimeLock(address indexed previousOperator, address indexed timeLockedOperator, bool operatorTimeLocked);\r\n\tevent MintRBS(address indexed owner, address indexed recipient, uint256 amountMinted, uint256 MintedSupply);\r\n\tevent AutoLiquidityRBS(uint256 amountRBS, uint256 amountBNB);\r\n\tevent AutoLiquidityBNB(uint256 amountRBS, uint256 amountBNB);\r\n\tevent AutoSell(uint256 balanceRBS, uint256 soldRBS);\r\n\tevent EnableTrading(address indexed operator, uint256 timeEnabled);\r\n\tevent UpdateTransferTaxEnabled(address indexed operator, bool enabled);\r\n\tevent UpdateRateTax(address indexed operator, uint16 previousBuyTaxRate, uint16 newBuyTaxRate, uint16 previousSellTaxRate, uint16 newSellTaxRate);\r\n\tevent UpdateRateBurn(address indexed operator, uint16 previousBuyBurnRate, uint16 newBuyBurnRate, uint16 previousSellBurnRate, uint16 newSellBurnRate);\r\n\tevent UpdateRateTransferLimit(address indexed operator, uint16 previousRate, uint16 newRate);\r\n\tevent UpdateAutoLiquidityStatus(address indexed operator, bool enabled);\r\n\tevent UpdateTransferLimitExclusionRemove(address indexed operator, address indexed removedAddress);\r\n\tevent UpdateTransferLimitExclusionAdd(address indexed operator, address indexed addedAddress);\r\n\tevent UpdateTaxExclusionAdd(address indexed operator, address indexed addedAddress);\r\n\tevent UpdateTaxExclusionRemove(address indexed operator, address indexed removedAddress);\t\r\n\tevent UpdatePairListRemove(address indexed operator, address indexed removedLPPair);\r\n\tevent UpdatePairListAdd(address indexed operator, address indexed addedLPPair);\t\t\r\n\tevent UpdateBotGuard(address indexed operator, uint8 previousBlocksLock, uint8 newBlocksLock);\r\n\tevent UpdateAutoTrigger(address indexed operator, bool previousTrigger, bool newTrigger, uint256 previousAmount, uint256 newAmount, uint16 previousRate, uint16 newRate);\r\n\tevent UpdateAutoSellEnabled(address indexed operator, bool enabled);\r\n\tevent UpdateRobustSwapRouter(address indexed operator, address indexed router, address indexed pair);\r\n\tevent BalanceBurnRBS(address indexed operator, uint256 burnedAmount);\t\r\n\tevent BalanceWithdrawToken(address indexed operator, address indexed tokenAddress, uint256 amountTokenTransfered);\r\n\tevent SwapRBSForBNB(uint256 amountIn, address[] path);\r\n\tevent AddLiquidity(uint256 addedTokenAmount, uint256 addedBNBAmount);\t\r\n\tevent TransferTaxed(address indexed sender, address indexed recipient, uint256 amountTransaction, uint256 amountSent, uint256 amountTaxed, uint256 amountBurned, uint256 amountLiquidity);\r\n\tevent TransferNotTaxed(address indexed sender, address indexed recipient, uint256 amountTransaction, bool isAddressTaxExcluded);\r\n\r\n\t/**\r\n\t* @notice onlyOperator functions can be performed by the operator\r\n\t* Operator can perform all update functions\r\n\t* Timelock the operator with updateOperatorSetTimeLock\r\n\t*/\r\n\tmodifier onlyOperator() {\r\n\t\trequire(operator == msg.sender, \"RobustSwap::onlyOperator:Caller is not the operator\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice timelockedOperator functions can be performed only after the operator is timelocked\r\n\t* balanceWithdrawToken, balanceBurnRBS, updateOperatorSetPending\r\n\t*/\r\n\tmodifier timelockedOperator() {\r\n\t\trequire(operatorTimeLocked, \"RobustSwap::timelockedOperator:Operator needs to be timelocked\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Transfer amount limitation\r\n\t*/\r\n\tmodifier transferAmountLimit(address sender, address recipient, uint256 amount) {\r\n\t\t\r\n\t\tif (maxTransferLimitAmount() > 0) {\r\n\r\n\t\t\tif (\r\n\t\t\t\t!isTransferLimitExcluded(sender)\r\n\t\t\t\t&& !isTransferLimitExcluded(recipient)\r\n\t\t\t) {\r\n\t\t\t\trequire(amount <= maxTransferLimitAmount(), \"RobustSwap::transferAmountLimit:Transfer amount exceeds the maxTransferAmount\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice autoliquidity, autoSell\r\n\t*/\t\r\n\tmodifier autoTriggerLock {\r\n\t\t_inAutoTrigger = true;\r\n\t\t_;\r\n\t\t_inAutoTrigger = false;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Transfer tax exemption\r\n\t*/\r\n\tmodifier noTransferTax {\r\n\t\tbool _transferTaxEnabled = transferTaxEnabled;\r\n\t\ttransferTaxEnabled = false;\r\n\t\t_;\r\n\t\ttransferTaxEnabled = _transferTaxEnabled;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Constructs the RobustSwap (RBS) contract\r\n\t*/\r\n\tconstructor(address _operatorTimelockContract) public BEP20(\"RobustSwap Token\", \"RBS\") {\r\n\t\trequire(_operatorTimelockContract != address(0), \"RobustSwap::constructor:Timelock cannot be the zero address\");\r\n\r\n\t\t// Set initial operator\r\n\t\toperator = msg.sender;\r\n\t\temit OperatorSet(address(0), operator);\r\n\r\n\t\t// The timelock contract address\r\n\t\toperatorTimelockContract = _operatorTimelockContract;\r\n\r\n\t\t// Set initial transfer limit exemptions\r\n\t\t_transferLimitExcluded[address(this)] = true;\r\n\t\t_transferLimitExcluded[msg.sender] = true;\r\n\t\t_transferLimitExcluded[address(0)] = true;\r\n\t\t_transferLimitExcluded[BURN_ADDRESS] = true;\r\n\r\n\t\t// Set initial transfer tax exemptions\r\n\t\t_taxExcludedList[address(this)] = true;\r\n\t\t_taxExcludedList[msg.sender] = true;\r\n\t\t_taxExcludedList[address(0)] = true;\r\n\t\t_taxExcludedList[BURN_ADDRESS] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @notice Creates '_amount' token to '_recipient'\r\n\t* Must only be called by the owner (MasterChef)\r\n\t* No more RBS minting after the maximum supply is minted\r\n\t*/\r\n\tfunction mint(address _recipient, uint256 _amount) external onlyOwner {\r\n\t\trequire(_amount <= mintedBalance(), \"RobustSwap::mint:Maximum supply minted\");\r\n\t\trequire(_recipient != address(0),\"RobustSwap::mint:Zero address.\");\r\n\t\trequire(_amount > 0,\"RobustSwap::mint:Zero amount\");\r\n\t\tmintedSupply = mintedSupply.add(_amount);\r\n\t\temit MintRBS(msg.sender, _recipient, _amount, mintedSupply);\r\n\t\t_mint(_recipient, _amount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Overrides transfer function to meet tokenomics of RobustSwap (RBS)\r\n\t*/\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual override transferAmountLimit(sender, recipient, amount) {\r\n\t\t// Manually excluded adresses from transaction tax\r\n\t\tbool isAddressTaxExcluded = (isTaxExcluded(sender) || isTaxExcluded(recipient));\r\n\r\n\t\t// autoLiquidity, autoSell\r\n\t\tif (autoTrigger && !_inAutoTrigger\r\n\t\t\t&& isTradingEnabled()\r\n\t\t\t&& routerAddress() != address(0)\r\n\t\t\t&& robustSwapBNBPair != address(0)\r\n\t\t\t&& !isRobustSwapPair(sender)\r\n\t\t\t&& !isTaxExcluded(sender)) {\r\n\r\n\t\t\t\t\tif (autoLiquidityEnabled)\r\n\t\t\t\t\t\tautoLiquidity();\r\n\r\n\t\t\t\t\tif (autoSellEnabled)\r\n\t\t\t\t\t\tautoSell();\r\n\t\t}\r\n\r\n\t\t// Tax free transfers\r\n\t\tif (amount == 0 || !transferTaxEnabled || isAddressTaxExcluded) {\r\n\r\n\t\t\temit TransferNotTaxed(sender, recipient, amount, isAddressTaxExcluded);\r\n\r\n\t\t\tif (recipient == BURN_ADDRESS) {\r\n\t\t\t\t\t// Burn tokens sent to burn address\r\n\t\t\t\t\tif (amount > 0)\r\n\t\t\t\t\t\t_burn(sender, amount);\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// Tax free transfer\r\n\t\t\t\tsuper._transfer(sender, recipient, amount);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t\t// Trading needs to be enabled. Once enabled, trading cannot be disabled\r\n\t\t\t\trequire(isTradingEnabled(), \"RobustSwap::_transfer:Trading is not yet enabled\");\r\n\r\n\t\t\t\t//Transfer can only occur afer number of botGuardBlocks\r\n\t\t\t\trequire(_botGuard[tx.origin] <= block.number,\"RobustSwap::_transfer:Transfer only after number of botGuardBlocks\");\r\n\r\n\t\t\t\t// Taxed transfers\r\n\t\t\t\ttaxedTransfers(sender, recipient, amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Process taxed transfers\r\n\t*/\r\n\tfunction taxedTransfers(address sender, address recipient, uint256 amount) private {\r\n\r\n\t\t\t// Tax rate\r\n\t\t\tuint16 rateTax = 0;\r\n\r\n\t\t\t// Burn rate\r\n\t\t\tuint16 rateBurn = 0;\r\n\r\n\t\t\t// Burn amount\r\n\t\t\tuint256 burnAmount = 0;\r\n\r\n\t\t\t// Liquidity amount\r\n\t\t\tuint256 liquidityAmount = 0;\r\n\r\n\t\t\t// Tax amount\r\n\t\t\tuint256 taxAmount = 0;\r\n\r\n\t\t\t// Send amount\r\n\t\t\tuint256 sendAmount = 0;\r\n\r\n\t\t\t// Buy Transfer\r\n\t\t\tif (isRobustSwapPair(sender)) {\r\n\r\n\t\t\t\t// Set buy tax and burn rates\r\n\t\t\t\trateTax = transferTaxRateBuy;\r\n\t\t\t\trateBurn = burnRateBuy;\r\n\t\t\t}\r\n\r\n\t\t\t// Sell Transfer\r\n\t\t\tif (isRobustSwapPair(recipient)) {\r\n\r\n\t\t\t\t// Set sell tax and burn rates\r\n\t\t\t\trateTax = transferTaxRateSell;\r\n\t\t\t\trateBurn = burnRateSell;\r\n\t\t\t}\r\n\r\n\t\t\t// Calculate applicable tax from amount\r\n\t\t\tif (rateTax > 0)\r\n\t\t\t\ttaxAmount = amount.mul(rateTax).div(10000);\r\n\r\n\t\t\t// Calculate applicable burn from tax\r\n\t\t\tif (rateBurn > 0 && rateTax != 0)\r\n\t\t\t\tburnAmount = taxAmount.mul(rateBurn).div(100);\r\n\r\n\t\t\t// Amount for liquidity\r\n\t\t\tliquidityAmount = taxAmount.sub(burnAmount);\r\n\r\n\t\t\t// Amount sent to recipient\r\n\t\t\tsendAmount = amount.sub(taxAmount);\r\n\r\n\t\t\t//Set new botGuard\r\n\t\t\t_botGuard[tx.origin] = block.number.add(botGuardBlocks);\r\n\r\n\t\t\tif (rateTax > 0) {\r\n\t\t\t\temit TransferTaxed(sender, recipient, amount, sendAmount, taxAmount, burnAmount, liquidityAmount);\r\n\r\n\t\t\t} else {\r\n\t\t\t\temit TransferNotTaxed(sender, recipient, amount, false);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Burn amount from transaction\r\n\t\t\tif (burnAmount > 0)\r\n\t\t\t\t_burn(sender, burnAmount);\r\n\r\n\t\t\t// Transfer liquidity amount to contract\r\n\t\t\tif (liquidityAmount > 0) {\r\n\t\t\t\tmintedTaxed = mintedTaxed.add(liquidityAmount);\r\n\t\t\t\tsuper._transfer(sender, address(this), liquidityAmount);\r\n\t\t\t}\r\n\r\n\t\t\t// Transfer to recipient\r\n\t\t\tsuper._transfer(sender, recipient, sendAmount);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Auto generate RBS-BNB liquidity\r\n\t*/\r\n\tfunction autoLiquidity() private autoTriggerLock noTransferTax {\r\n\t\t// Use RBS balance for liquidity\r\n\t\tuint256 runningBalanceRBS = balanceOf(address(this));\t\t\r\n\t\tuint256 runningBalanceBNB = address(this).balance;\t\r\n\t\tuint totalLiquidityAmount = getTotalLiquidityAmount(runningBalanceRBS);\r\n\r\n\t\t// Check for sufficient balances\r\n\t\tif(totalLiquidityAmount != 0 && runningBalanceRBS >= totalLiquidityAmount.mul(2)) {\r\n\r\n\t\t\t// Swap RBS for BNB\r\n\t\t\tswapRBSForBNB(totalLiquidityAmount);\r\n\r\n\t\t\t// Get BNB amount received from swap\r\n\t\t\tuint256 liquidityBNB = address(this).balance.sub(runningBalanceBNB);\r\n\r\n\t\t\temit AutoLiquidityRBS(totalLiquidityAmount, liquidityBNB);\r\n\r\n\t\t\t// Add liquidity\r\n\t\t\taddLiquidity(totalLiquidityAmount, liquidityBNB);\r\n\r\n\t\t}\r\n\r\n\t\t// Use BNB balance for liquidity\r\n\t\trunningBalanceBNB = address(this).balance;\r\n\t\trunningBalanceRBS = balanceOf(address(this));\r\n\t\ttotalLiquidityAmount = getTotalLiquidityAmount(runningBalanceRBS);\r\n\t\tuint256 minTriggerAmount = minAutoTriggerAmount();\r\n\r\n\t\t// Check for sufficient balances\r\n\t\tif(totalLiquidityAmount != 0 && runningBalanceRBS >= totalLiquidityAmount && runningBalanceBNB >= minTriggerAmount) {\r\n\r\n\t\t\temit AutoLiquidityBNB(totalLiquidityAmount, minTriggerAmount);\r\n\r\n\t\t\t// Add liquidity\r\n\t\t\taddLiquidity(totalLiquidityAmount, minTriggerAmount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Auto sell contract RBS balance for BNB\r\n\t*/\r\n\tfunction autoSell() private autoTriggerLock noTransferTax {\r\n\t\tuint256 runningBalanceRBS = balanceOf(address(this));\r\n\r\n\t\t// Get RBS amount to sell\r\n\t\tuint totalSellAmount = getTotalLiquidityAmount(runningBalanceRBS);\r\n\r\n\t\tif (totalSellAmount != 0 && runningBalanceRBS >= totalSellAmount) {\r\n\t\t\t\r\n\t\t\temit AutoSell(runningBalanceRBS, totalSellAmount);\r\n\t\t\t\r\n\t\t\t// Sell RBS\r\n\t\t\tswapRBSForBNB(totalSellAmount);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Swap RBS for BNB\r\n\t*/\r\n\tfunction swapRBSForBNB(uint256 amountRBS) private {\r\n\t\t// Generate the robustSwap pair path of token -> WBNB\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _robustSwapRouter.WETH();\r\n\r\n\t\t_approve(address(this), address(_robustSwapRouter), amountRBS);\r\n\r\n\t\t// Execute the swap\r\n\t\t_robustSwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\tamountRBS,\r\n\t\t\t0, // Accept any amount of BNB\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\r\n\t\temit SwapRBSForBNB(amountRBS, path);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Add RBS-BNB liquidity\r\n\t*/\r\n\tfunction addLiquidity(uint256 amountRBS, uint256 amountBNB) private {\r\n\t\t// Approve token transfer to cover all possible scenarios\r\n\t\t_approve(address(this), address(_robustSwapRouter), amountRBS);\r\n\r\n\t\t// Add the liquidity\r\n\t\t_robustSwapRouter.addLiquidityETH{value: amountBNB}(\r\n\t\t\taddress(this),\r\n\t\t\tamountRBS,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t\t\r\n\t\temit AddLiquidity(amountRBS, amountBNB);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Calculate the amount of RBS required for autoLiquidity and autoSell\r\n\t*/\r\n\tfunction getTotalLiquidityAmount(uint256 runningBalanceRBS) private view returns(uint)  {\r\n\t\trequire(runningBalanceRBS > 0,\"RobustSwap::getTotalLiquidityAmount:Invalid runningBalanceRBS\");\r\n\t\tuint quoteOutputBNB = quotePriceRBS(runningBalanceRBS);\r\n\r\n\t\tif (quoteOutputBNB !=0 && quoteOutputBNB >= autoTriggerAmount) {\r\n\r\n\t\t\t// Calculate RBS price based on the RBS-BNB reserve\r\n\t\t\tuint amountRBSPerBNB = runningBalanceRBS.div(quoteOutputBNB);\r\n\r\n\t\t\t// Calculate amount of required RBS\r\n\t\t\tuint totalLiquidityAmount = amountRBSPerBNB.mul(minAutoTriggerAmount());\r\n\r\n\t\t\treturn totalLiquidityAmount;\r\n\r\n\t\t} else {\r\n\t\t\t\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Calculate RBS price based on RBS-BNB reserve\r\n\t* Required for autoLiquidity and autoSell\r\n\t*/\r\n\tfunction quotePriceRBS(uint _amountRBS) private view returns(uint) {\r\n\t\trequire(robustSwapBNBPair != address(0), \"RobustSwap::quotePriceRBS:Invalid pair address.\");\r\n\t\trequire(_amountRBS > 0,\"RobustSwap::quotePriceRBS:Invalid input amount\");\r\n\r\n\t\tIUniswapV2Pair pair = IUniswapV2Pair(robustSwapBNBPair);\r\n\t\t(uint Reserve0, uint Reserve1,) = pair.getReserves();\r\n\r\n\t\t//  BNB/RBS LP Pair\r\n\t\tIBEP20 token0 = IBEP20(pair.token0());\r\n\t\tIBEP20 token1 = IBEP20(pair.token1());\r\n\r\n\t\t// Check if reserve has funds\r\n\t\tif (Reserve0 > 0 && Reserve1 > 0) {\r\n\t\t\tif (address(token0) == address(this))\r\n\t\t\t\treturn (_amountRBS.mul(Reserve1)).div(Reserve0);\r\n\r\n\t\t\tif (address(token1) == address(this))\r\n\t\t\t\treturn (_amountRBS.mul(Reserve0)).div(Reserve1);\r\n\t\t}else{\r\n\t\t\t// No funds in reserve\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the the trading enabled status\r\n\t*/\r\n\tfunction isTradingEnabled() public view returns (bool) {\r\n\t\treturn _tradingEnabled;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns total number of burned tokens\r\n\t*/\r\n\tfunction mintedBurned() external view returns (uint256) {\r\n\t\treturn mintedSupply.sub(totalSupply());\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the max transfer limit amount\r\n\t*/\r\n\tfunction maxTransferLimitAmount() public view returns (uint256) {\r\n\t\treturn totalSupply().mul(transferAmountLimitRate).div(10000);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the min BNB autoTrigger amount\r\n\t*/\r\n\tfunction minAutoTriggerAmount() public view returns (uint256) {\r\n\t\treturn autoTriggerAmount.mul(autoTriggerAmountRate).div(10000);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns transfer limit status for an address\r\n\t*/\r\n\tfunction isTransferLimitExcluded(address _transferLimitExemption) public view returns (bool) {\r\n\t\treturn _transferLimitExcluded[_transferLimitExemption];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns tax status for an address\r\n\t*/\r\n\tfunction isTaxExcluded(address _taxExcluded) public view returns (bool) {\t\t\r\n\t\treturn _taxExcludedList[_taxExcluded];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns if an address is added to the RobustSwap LP list\r\n\t*/\r\n\tfunction isRobustSwapPair(address _RobustSwapPair) public view returns (bool) {\t\t\r\n\t\treturn _robustSwapPairLPList[_RobustSwapPair];\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the total of unminted RBS\r\n\t*/\r\n\tfunction mintedBalance() public view returns (uint256) {\r\n\t\treturn MAXIMUM_SUPPLY.sub(mintedSupply);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Returns the current RobustSwap router address\r\n\t*/\r\n\tfunction routerAddress() public view returns (address) {\r\n\t\treturn address(_robustSwapRouter);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Receive BNB from robustSwapRouter when swapping\r\n\t*/\r\n\treceive() external payable {}\r\n\r\n\t/**\r\n\t* @dev The operator wields an enormous amount of powers\r\n\t* Set the operator to the Robust timelock contract\r\n\t* This can be set only once\r\n\t*/\r\n\tfunction updateOperatorSetTimeLock() external onlyOperator {\r\n\t\trequire(!operatorTimeLocked, \"RobustSwap::updateOperatorSetTimeLock:Timelock is already enabled\");\r\n\t\toperatorTimeLocked = true;\r\n\t\temit UpdateOperatorSetTimeLock(operator, operatorTimelockContract, operatorTimeLocked);\r\n\t\toperator = operatorTimelockContract;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Enable trading. This can only occur once\r\n\t* After enabled, trading cannot be disabled\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction enableTrading() external onlyOperator {\r\n\t\trequire(!_tradingEnabled, \"RobustSwap::enableTrading:Trading is already enabled\");\r\n\t\trequire(routerAddress() != address(0), \"RobustSwap::enableTrading:Router address is not set\");\r\n\t\trequire(robustSwapBNBPair != address(0), \"RobustSwap::enableTrading:RBS-BNB pair not found\");\r\n\t\temit EnableTrading(operator, block.timestamp);\r\n\t\t_tradingEnabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update transfer tax enabled status\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateTransferTaxEnabled(bool _transferTaxEnabled) external onlyOperator {\r\n\t\tif (!_transferTaxEnabled)\r\n\t\t\trequire(transferTaxEnabled,\"RobustSwap::updateTransferTaxEnabled:transferTaxEnabled is disabled\");\t\t\r\n\t\tif (_transferTaxEnabled)\r\n\t\t\trequire(!transferTaxEnabled,\"RobustSwap::updateTransferTaxEnabled:transferTaxEnabled is enabled\");\r\n\t\temit UpdateTransferTaxEnabled(operator, _transferTaxEnabled);\t\t\r\n\t\ttransferTaxEnabled = _transferTaxEnabled;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update transaction tax rates (buy, sell and transfer)\r\n\t* Setting rate to 0 disables transaction tax\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateRateTax(uint16 _transferTaxRateBuy, uint16 _transferTaxRateSell) external onlyOperator {\r\n\t\trequire(_transferTaxRateBuy <= MAXIMUM_TAX_RATE, \"RobustSwap::updateRateTax:Buy transfer tax rate must not exceed the maximum rate\");\r\n\t\trequire(_transferTaxRateSell <= MAXIMUM_TAX_RATE, \"RobustSwap::updateRateTax:Sell transfer tax rate must not exceed the maximum rate\");\r\n\t\temit UpdateRateTax(operator, transferTaxRateBuy, _transferTaxRateBuy, transferTaxRateSell, _transferTaxRateSell);\r\n\t\tif(_transferTaxRateBuy != transferTaxRateBuy)\r\n\t\t\ttransferTaxRateBuy = _transferTaxRateBuy;\t\t\r\n\t\tif(_transferTaxRateSell != transferTaxRateSell)\r\n\t\t\ttransferTaxRateSell = _transferTaxRateSell;\t\t\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update transaction tax burn rates\r\n\t* Setting rate to 0 disables burn rate\r\n\t* Disabled - All tax sent to the RBS contract for autoLiquidity and autoSell\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateRateBurn(uint16 _burnRateBuy, uint16 _burnRateSell) external onlyOperator {\r\n\t\trequire(_burnRateBuy <= MAXIMUM_BURN_RATE, \"RobustSwap::updateRateBurn:Buy burn rate must not exceed the maximum rate\");\r\n\t\trequire(_burnRateSell <= MAXIMUM_BURN_RATE, \"RobustSwap::updateRateBurn:Sell burn rate must not exceed the maximum rate\");\r\n\t\temit UpdateRateBurn(operator, burnRateBuy, _burnRateBuy, burnRateSell, _burnRateSell);\r\n\t\tif(_burnRateBuy != burnRateBuy)\r\n\t\t\tburnRateBuy = _burnRateBuy;\r\n\t\tif(_burnRateSell != burnRateSell)\r\n\t\t\tburnRateSell = _burnRateSell;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the single transfer amount limit rate\r\n\t* Transfer limit works with the total supply of RBS\r\n\t* Setting rate to 0 or 10000 and above will disable this feature\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateRateTransferLimit(uint16 _transferAmountLimitRate) external onlyOperator {\r\n\t\tif (_transferAmountLimitRate < MINIMUM_TRANSFER_LIMIT || _transferAmountLimitRate >= 10000)\r\n\t\t\t_transferAmountLimitRate = 0;\r\n\t\temit UpdateRateTransferLimit(operator, transferAmountLimitRate, _transferAmountLimitRate);\r\n\t\tif(_transferAmountLimitRate != transferAmountLimitRate)\r\n\t\t\ttransferAmountLimitRate = _transferAmountLimitRate;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Add address exempted from transfer amount limit (eg. CEX, MasterChef)\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateTransferLimitExclusionAdd(address _addTransferLimitExclusion) external onlyOperator {\r\n\t\trequire(_addTransferLimitExclusion != address(0),\"RobustSwap::updateTransferLimitExclusionAdd:Zero address\");\r\n\t\trequire(!isTransferLimitExcluded(_addTransferLimitExclusion),\"RobustSwap::updateTransferLimitExclusionAdd:Address already excluded from transfer amount limit\");\r\n\t\temit UpdateTransferLimitExclusionAdd(operator, _addTransferLimitExclusion);\r\n\t\t_transferLimitExcluded[_addTransferLimitExclusion] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Remove address exempted from transfer amount limit\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateTransferLimitExclusionRemove(address _removeTransferLimitExclusion) external onlyOperator {\r\n\t\trequire(_removeTransferLimitExclusion != address(0),\"RobustSwap::updateTransferLimitExclusionRemove:Zero address\");\r\n\t\trequire(isTransferLimitExcluded(_removeTransferLimitExclusion),\"RobustSwap::updateTransferLimitExclusionRemove:Address not excluded from transfer amount limit\");\t\t\r\n\t\temit UpdateTransferLimitExclusionRemove(operator, _removeTransferLimitExclusion);\t\t\r\n\t\t_transferLimitExcluded[_removeTransferLimitExclusion] = false;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Add address exempted from transfer tax (eg. CEX, MasterChef)\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateTaxExclusionAdd(address _addTaxExclusion) external onlyOperator {\r\n\t\trequire(_addTaxExclusion != address(0),\"RobustSwap::updateTaxExclusionAdd:Zero address\");\r\n\t\trequire(!isTaxExcluded(_addTaxExclusion),\"RobustSwap::updateTaxExclusionAdd:Address is already excluded from transfer tax\");\t\t\r\n\t\temit UpdateTaxExclusionAdd(operator, _addTaxExclusion);\t\t\r\n\t\t_taxExcludedList[_addTaxExclusion] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Remove address exempted from transfer tax\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateTaxExclusionRemove(address _removeTaxExclusion) external onlyOperator {\r\n\t\trequire(_removeTaxExclusion != address(0),\"RobustSwap::updateTaxExclusionRemove:Zero address\");\r\n\t\trequire(isTaxExcluded(_removeTaxExclusion),\"RobustSwap::updateTaxExclusionRemove:Address is not excluded from transfer tax\");\t\r\n\t\temit UpdateTaxExclusionRemove(operator, _removeTaxExclusion);\r\n\t\t_taxExcludedList[_removeTaxExclusion] = false;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Add LP address to the RobustSwap pair list\r\n\t* Used to determine if a transaction is buy, sell or transfer for applicable tax\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updatePairListAdd(address _addRobustSwapPair) external onlyOperator {\r\n\t\trequire(_addRobustSwapPair != address(0),\"RobustSwap::updatePairListAdd:Zero address\");\r\n\t\trequire(!isRobustSwapPair(_addRobustSwapPair),\"RobustSwap::updatePairListAdd:LP address already included\");\t\t\r\n\t\temit UpdatePairListAdd(operator, _addRobustSwapPair);\t\t\r\n\t\t_robustSwapPairLPList[_addRobustSwapPair] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Remove LP address from the RobustSwap pair list\r\n\t* Used to determine if a transaction is buy, sell or transfer for applicable tax\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updatePairListRemove(address _removeRobustSwapPair) external onlyOperator {\r\n\t\trequire(_removeRobustSwapPair != address(0),\"RobustSwap::updatePairListRemove:Zero address\");\r\n\t\trequire(isRobustSwapPair(_removeRobustSwapPair),\"RobustSwap::updatePairListRemove:LP address not included\");\r\n\t\trequire(_removeRobustSwapPair != robustSwapBNBPair,\"RobustSwap::updatePairListRemove:robustSwapBNBPair cannot be excluded\");\t\t\r\n\t\temit UpdatePairListRemove(operator, _removeRobustSwapPair);\t\t\r\n\t\t_robustSwapPairLPList[_removeRobustSwapPair] = false;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the autoTrigger settings\r\n\t* For autoliquidity and autoSell\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateAutoTrigger(bool _autoTrigger, uint256 _autoTriggerAmount, uint16 _autoTriggerAmountRate) external onlyOperator {\r\n\t\trequire(_autoTriggerAmount > 0,\"RobustSwap::updateAutoTrigger:Amount cannot be 0\");\r\n\t\trequire(_autoTriggerAmountRate > 0,\"RobustSwap::updateAutoTrigger:Trigger amount rate cannot be 0\");\r\n\t\trequire(_autoTriggerAmountRate <= 10000, \"RobustSwap::updateAutoTrigger:Trigger amount rate must not exceed the maximum rate\");\r\n\t\temit UpdateAutoTrigger(operator, autoTrigger, _autoTrigger, autoTriggerAmount, _autoTriggerAmount, autoTriggerAmountRate, _autoTriggerAmountRate);\r\n\t\tif(_autoTrigger != autoTrigger)\r\n\t\t\tautoTrigger = _autoTrigger;\r\n\t\tif(_autoTriggerAmount != autoTriggerAmount)\r\n\t\t\tautoTriggerAmount = _autoTriggerAmount;\r\n\t\tif(_autoTriggerAmountRate != autoTriggerAmountRate)\r\n\t\t\tautoTriggerAmountRate = _autoTriggerAmountRate;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the bot guard blocks setting\r\n\t* Can only be called by the current operator\r\n\t* Setting the blocks guard to 0 disabled this feature\r\n\t*/\r\n\tfunction updateBotGuard(uint8 _botGuardBlocks) external onlyOperator {\r\n\t\trequire(_botGuardBlocks <= MAXIMUM_BOTGUARD_BLOCKS, \"RobustSwap::updateBotGuard:botGuardBlocks cannot exceed maximum blocks\");\r\n\t\temit UpdateBotGuard(operator, botGuardBlocks, _botGuardBlocks);\r\n\t\tif(_botGuardBlocks != botGuardBlocks)\r\n\t\t\tbotGuardBlocks = _botGuardBlocks;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update autoSell status\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateAutoSellEnabled(bool _autoSellEnabled) external onlyOperator {\r\n\t\tif (!_autoSellEnabled)\r\n\t\t\trequire(autoSellEnabled,\"RobustSwap::updateAutoSellEnabled:autoSell is disabled\");\t\t\r\n\t\tif (_autoSellEnabled)\r\n\t\t\trequire(!autoSellEnabled,\"RobustSwap::updateAutoSellEnabled:autoSell is enabled\");\r\n\t\temit UpdateAutoSellEnabled(operator, _autoSellEnabled);\t\t\r\n\t\tautoSellEnabled = _autoSellEnabled;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update autoLiquidity status\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateAutoLiquidityStatus(bool _autoLiquidityEnabled) external onlyOperator {\r\n\t\tif (!_autoLiquidityEnabled)\r\n\t\t\trequire(autoLiquidityEnabled,\"RobustSwap::updateAutoLiquidityStatus:autoLiquidityEnabled is disabled\");\r\n\t\tif (_autoLiquidityEnabled)\r\n\t\t\trequire(!autoLiquidityEnabled,\"RobustSwap::updateAutoLiquidityStatus:autoLiquidityEnabled is enabled\");\r\n\t\temit UpdateAutoLiquidityStatus(operator, _autoLiquidityEnabled);\t\t\r\n\t\tautoLiquidityEnabled = _autoLiquidityEnabled;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Update the RobustSwap router\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction updateRobustSwapRouter(address _routerAddress) external onlyOperator {\r\n\t\trequire(_routerAddress != address(0),\"RobustSwap::updateRobustSwapRouter:Router address cannot be zero address\");\r\n\t\trequire(_routerAddress != routerAddress(),\"RobustSwap::updateRobustSwapRouter:No change, current router address\");\r\n\t\t_robustSwapRouter = IUniswapV2Router02(_routerAddress);\r\n\t\trobustSwapBNBPair = IUniswapV2Factory(_robustSwapRouter.factory()).getPair(address(this), _robustSwapRouter.WETH());\r\n\t\trequire(robustSwapBNBPair != address(0), \"RobustSwap::updateRobustSwapRouter:Invalid pair address.\");\r\n\t\temit UpdateRobustSwapRouter(operator, address(_robustSwapRouter), robustSwapBNBPair);\r\n\t\t_robustSwapPairLPList[robustSwapBNBPair] = true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Burn any or all RBS from the contract balance\r\n\t* Setting amount to 0 will burn the RBS available balance\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction balanceBurnRBS(uint256 _amount) external onlyOperator timelockedOperator {\r\n\t\tIBEP20 token = IBEP20(address(this));\r\n\t\tuint256 balanceRBS = balanceOf(address(this));\t\t\r\n\t\trequire(balanceRBS > 0,\"RobustSwap::balanceBurnRBS:Nothing to burn\");\r\n\t\trequire(_amount <= balanceRBS,\"RobustSwap::balanceBurnRBS:Insufficient balance to burn\");\t\t\r\n\t\tbalanceRBS = _amount > 0 ? _amount : balanceRBS;\r\n\t\temit BalanceBurnRBS(operator, balanceRBS);\t\t\r\n\t\ttoken.transfer(BURN_ADDRESS, balanceRBS);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Withdraw any token balance from the RBS contract\r\n\t* Setting amount to 0 will withdraw the token available balance\r\n\t* Can only be called by the current operator\r\n\t*/\r\n\tfunction balanceWithdrawToken(IBEP20 _tokenAddress, address _recipient, uint256 _amount) external onlyOperator timelockedOperator {\t\t\r\n\t\trequire(address(_tokenAddress) != address(0),\"RobustSwap::balanceWithdrawToken:Token address cannot be zero address\");\t\t\r\n\t\trequire(address(_tokenAddress) != address(this),\"RobustSwap::balanceWithdrawToken:Token address cannot be this address\");\t\t\r\n\t\trequire(_recipient != address(0),\"RobustSwap::balanceWithdrawToken:Recipient cannot be zero address\");\r\n\t\tuint256 balanceToken = _tokenAddress.balanceOf(address(this));\r\n\t\trequire(balanceToken > 0,\"RobustSwap::balanceWithdrawToken:Token has no balance to withdraw\");\r\n\t\trequire(_amount <= balanceToken,\"RobustSwap::balanceWithdrawToken:Insufficient token balance to withdraw\");\r\n\t\tbalanceToken = _amount > 0 ? _amount : balanceToken;\t\t\r\n\t\temit BalanceWithdrawToken(operator, address(_tokenAddress), balanceToken);\r\n\t\t_tokenAddress.transfer(_recipient, balanceToken);\r\n\t}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorTimelockContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addedBNBAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRBS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidityBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRBS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidityRBS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceRBS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldRBS\",\"type\":\"uint256\"}],\"name\":\"AutoSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"BalanceBurnRBS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokenTransfered\",\"type\":\"uint256\"}],\"name\":\"BalanceWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeEnabled\",\"type\":\"uint256\"}],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MintedSupply\",\"type\":\"uint256\"}],\"name\":\"MintRBS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapRBSForBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAddressTaxExcluded\",\"type\":\"bool\"}],\"name\":\"TransferNotTaxed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransaction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTaxed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"TransferTaxed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UpdateAutoLiquidityStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UpdateAutoSellEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"previousTrigger\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newTrigger\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"previousRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newRate\",\"type\":\"uint16\"}],\"name\":\"UpdateAutoTrigger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"previousBlocksLock\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newBlocksLock\",\"type\":\"uint8\"}],\"name\":\"UpdateBotGuard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"timeLockedOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"operatorTimeLocked\",\"type\":\"bool\"}],\"name\":\"UpdateOperatorSetTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedLPPair\",\"type\":\"address\"}],\"name\":\"UpdatePairListAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedLPPair\",\"type\":\"address\"}],\"name\":\"UpdatePairListRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"previousBuyBurnRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyBurnRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"previousSellBurnRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellBurnRate\",\"type\":\"uint16\"}],\"name\":\"UpdateRateBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"previousBuyTaxRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyTaxRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"previousSellTaxRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellTaxRate\",\"type\":\"uint16\"}],\"name\":\"UpdateRateTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"previousRate\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newRate\",\"type\":\"uint16\"}],\"name\":\"UpdateRateTransferLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"UpdateRobustSwapRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedAddress\",\"type\":\"address\"}],\"name\":\"UpdateTaxExclusionAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"UpdateTaxExclusionRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedAddress\",\"type\":\"address\"}],\"name\":\"UpdateTransferLimitExclusionAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"UpdateTransferLimitExclusionRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UpdateTransferTaxEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSellEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTriggerAmountRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"balanceBurnRBS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"balanceWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"botGuardBlocks\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRateBuy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRateSell\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_RobustSwapPair\",\"type\":\"address\"}],\"name\":\"isRobustSwapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxExcluded\",\"type\":\"address\"}],\"name\":\"isTaxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferLimitExemption\",\"type\":\"address\"}],\"name\":\"isTransferLimitExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAutoTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTaxed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorTimeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorTimelockContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"robustSwapBNBPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAmountLimitRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxRateBuy\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTaxRateSell\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoLiquidityEnabled\",\"type\":\"bool\"}],\"name\":\"updateAutoLiquidityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoSellEnabled\",\"type\":\"bool\"}],\"name\":\"updateAutoSellEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoTrigger\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_autoTriggerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_autoTriggerAmountRate\",\"type\":\"uint16\"}],\"name\":\"updateAutoTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_botGuardBlocks\",\"type\":\"uint8\"}],\"name\":\"updateBotGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOperatorSetTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addRobustSwapPair\",\"type\":\"address\"}],\"name\":\"updatePairListAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_removeRobustSwapPair\",\"type\":\"address\"}],\"name\":\"updatePairListRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_burnRateBuy\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_burnRateSell\",\"type\":\"uint16\"}],\"name\":\"updateRateBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_transferTaxRateBuy\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_transferTaxRateSell\",\"type\":\"uint16\"}],\"name\":\"updateRateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_transferAmountLimitRate\",\"type\":\"uint16\"}],\"name\":\"updateRateTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"updateRobustSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addTaxExclusion\",\"type\":\"address\"}],\"name\":\"updateTaxExclusionAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_removeTaxExclusion\",\"type\":\"address\"}],\"name\":\"updateTaxExclusionRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addTransferLimitExclusion\",\"type\":\"address\"}],\"name\":\"updateTransferLimitExclusionAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_removeTransferLimitExclusion\",\"type\":\"address\"}],\"name\":\"updateTransferLimitExclusionRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_transferTaxEnabled\",\"type\":\"bool\"}],\"name\":\"updateTransferTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RobustSwap", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f4851255555e30a4bb9a5ba13b1ecc38df25039b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f345292f944cd902712a9788377f8a7766b4c228756a2d525bf19cb7d51d9fbb"}