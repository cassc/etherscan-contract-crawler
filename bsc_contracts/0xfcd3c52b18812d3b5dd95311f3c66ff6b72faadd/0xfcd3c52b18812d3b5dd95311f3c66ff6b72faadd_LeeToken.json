{"SourceCode": "pragma solidity 0.5.16;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n\r\n   * @dev Returns the amount of tokens in existence.\r\n     */\r\n       function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n\r\n   * @dev Returns the token decimals.\r\n     */\r\n       function decimals() external view returns (uint8);\r\n\r\n  /**\r\n\r\n   * @dev Returns the token symbol.\r\n     */\r\n       function symbol() external view returns (string memory);\r\n\r\n  /**\r\n\r\n  * @dev Returns the token name.\r\n    */\r\n      function name() external view returns (string memory);\r\n\r\n  /**\r\n\r\n   * @dev Returns the bep token owner.\r\n     */\r\n       function getOwner() external view returns (address);\r\n\r\n  /**\r\n\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n       function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n   * Emits a {Transfer} event.\r\n     */\r\n       function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n     *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n       function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n   * Emits an {Approval} event.\r\n     */\r\n       function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n     *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n   * Emits a {Transfer} event.\r\n     */\r\n       function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n     *\r\n   * Note that `value` may be zero.\r\n     */\r\n       event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n     */\r\n       event Approval(address indexed owner, address indexed spender, uint256 value);\r\n     }\r\n\r\n/*\r\n\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n   *\r\n * This contract is only required for intermediate, library-like contracts.\r\n   */\r\n   contract Context {\r\n     // Empty internal constructor, to prevent people from mistakenly deploying\r\n     // an instance of this contract, which should be used via inheritance.\r\n     constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n\r\n * checks.\r\n   *\r\n\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n\r\n * error, which is the standard behavior in high level programming languages.\r\n\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n\r\n * operation overflows.\r\n   *\r\n\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n\r\n * class of bugs, so it's recommended to use it always.\r\n   */\r\nlibrary SafeMath {\r\n     /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n   *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n   *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n   */\r\n   contract Ownable is Context {\r\n     address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n       constructor () internal {\r\n\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n\r\n  }\r\n\r\n  /**\r\n\r\n   * @dev Returns the address of the current owner.\r\n    */\r\nfunction owner() public view returns (address) {\r\n\r\n    return _owner;\r\n\r\n  }\r\n\r\n  /**\r\n\r\n   * @dev Throws if called by any account other than the owner.\r\n     */\r\n       modifier onlyOwner() {\r\n\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n\r\n  }\r\n\r\n  /**\r\n\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n     */\r\n       function renounceOwnership() public onlyOwner {\r\n\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n\r\n  }\r\n\r\n  /**\r\n\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n     */\r\n       function transferOwnership(address newOwner) public onlyOwner {\r\n\r\n    _transferOwnership(newOwner);\r\n\r\n  }\r\n\r\n  /**\r\n\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n       function _transferOwnership(address newOwner) internal {\r\n\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n\r\n  }\r\n}\r\n\r\ncontract LeeToken is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint private LEE_TOTAL_PUBLISH = 21000000 * 10 ** 8;\r\n\r\n    uint private  depositCount = 1000 * 10 ** 8;\r\n    uint private  miningCount = 710 * 10 ** 8;\r\n    uint private  miningLockCount = 100 * 10 ** 8;\r\n    uint private  mintFlowCount = 100 * 10 ** 8;\r\n    uint private  foundCount = 40 * 10 ** 8;\r\n    uint private  shareBoundsCount = 50 * 10 ** 8;\r\n    uint private  spreadRewardsCount = 450 * 10 ** 8;\r\n    uint private  lockCount = 1500 * 10 ** 8;\r\n\r\n    address private INSURANCE_POOL;\r\n    address private CENTER_POOL_ONE;\r\n    address private CENTER_POOL_TWO;\r\n    address private CENTER_POOL_THREE;\r\n    address private FOUNDATION_POOL;\r\n    address private FREEZON_POOL;\r\n\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _symbol;\r\n    string private _name;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    bool private alloted = false;\r\n\r\n    struct Hashrate{\r\n        uint value;\r\n        bool isUsed;\r\n    }\r\n\r\n    struct Deposit{\r\n        uint timeStamp;\r\n        uint value;\r\n        bool isUsed;\r\n    }\r\n\r\n    mapping(address=>Hashrate) internal mapHashrates;\r\n    address[] internal arrHashrates;\r\n    uint internal totalHashrates;\r\n    mapping(address=>Deposit) internal mapDeposits;\r\n    address[] internal arrDeposits;\r\n    uint internal totalDeposits;\r\n\r\n    event AccountSetting(address account);\r\n    event MultiTransfer(address[] newRegisters);\r\n\r\n    constructor() public {\r\n        _name = \"LeeToken\";\r\n        _symbol = \"LEE\";\r\n        _decimals = 8;\r\n        _totalSupply = 21000000 * 10 ** 8; \r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    modifier isZeroAddress(address account){\r\n        require(account != address(0),\"Transfer to zero address\");\r\n        _;\r\n    }\r\n\r\n  /**\r\n\r\n   * @dev Returns the bep token owner.\r\n     */\r\n       function getOwner() external view returns (address) {\r\n\r\n    return owner();\r\n\r\n  }\r\n\r\n  /**\r\n\r\n   * @dev Returns the token decimals.\r\n     */\r\n       function decimals() external view returns (uint8) {\r\n\r\n    return _decimals;\r\n\r\n  }\r\n\r\n  /**\r\n\r\n   * @dev Returns the token symbol.\r\n     */\r\n       function symbol() external view returns (string memory) {\r\n\r\n    return _symbol;\r\n\r\n  }\r\n\r\n  /**\r\n\r\n  * @dev Returns the token name.\r\n    */\r\n      function name() external view returns (string memory) {\r\n    return _name;\r\n      }\r\n\r\n  /**\r\n\r\n   * @dev See {BEP20-totalSupply}.\r\n     */\r\n       function totalSupply() external view returns (uint256) {\r\n\r\n    return _totalSupply;\r\n\r\n  }\r\n\r\n  /**\r\n\r\n   * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n\r\n    return _balances[account];\r\n\r\n  }\r\n\r\n  /**\r\n    * @dev See {BEP20-transfer}.\r\n    *\r\n    * Requirements:\r\n    * - `recipient` cannot be the zero address.\r\n    * - the caller must have a balance of at least `amount`.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n       _transfer(_msgSender(), recipient, amount);\r\n       return true;\r\n    }\r\n\r\n    /**\r\n    * @dev See {BEP20-allowance}.\r\n    */\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n          return _allowances[owner][spender];\r\n        }\r\n\r\n     /**\r\n\r\n      * @dev See {BEP20-approve}.\r\n        *\r\n      * Requirements:\r\n        *\r\n      * - `spender` cannot be the zero address.\r\n          */\r\n          function approve(address spender, uint256 amount) external returns (bool) {\r\n          _approve(_msgSender(), spender, amount);\r\n          return true;\r\n          }\r\n\r\n     /**\r\n\r\n      * @dev See {BEP20-transferFrom}.\r\n        *\r\n      * Emits an {Approval} event indicating the updated allowance. This is not\r\n      * required by the EIP. See the note at the beginning of {BEP20};\r\n        *\r\n      * Requirements:\r\n      * - `sender` and `recipient` cannot be the zero address.\r\n      * - `sender` must have a balance of at least `amount`.\r\n      * - the caller must have allowance for `sender`'s tokens of at least\r\n      * `amount`.\r\n        */\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n          _transfer(sender, recipient, amount);\r\n          _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n          return true;\r\n        }\r\n\r\n     /**\r\n\r\n      * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n        *\r\n      * This is an alternative to {approve} that can be used as a mitigation for\r\n      * problems described in {BEP20-approve}.\r\n        *\r\n      * Emits an {Approval} event indicating the updated allowance.\r\n        *\r\n      * Requirements:\r\n        *\r\n      * - `spender` cannot be the zero address.\r\n          */\r\n          function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n          return true;\r\n          }\r\n\r\n     /**\r\n\r\n      * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n        *\r\n      * This is an alternative to {approve} that can be used as a mitigation for\r\n      * problems described in {BEP20-approve}.\r\n        *\r\n      * Emits an {Approval} event indicating the updated allowance.\r\n        *\r\n      * Requirements:\r\n        *\r\n      * - `spender` cannot be the zero address.\r\n      * - `spender` must have allowance for the caller of at least\r\n      * `subtractedValue`.\r\n        */\r\n        function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n          return true;\r\n        }\r\n\r\n     /**\r\n\r\n      * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n        *\r\n\r\n      * This is internal function is equivalent to {transfer}, and can be used to\r\n\r\n      * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n        *\r\n\r\n      * Emits a {Transfer} event.\r\n        *\r\n\r\n      * Requirements:\r\n        *\r\n\r\n      * - `sender` cannot be the zero address.\r\n\r\n      * - `recipient` cannot be the zero address.\r\n\r\n      * - `sender` must have a balance of at least `amount`.\r\n          */\r\n          function _transfer(address sender, address recipient, uint256 amount) internal {\r\n          require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n          require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n     /**\r\n\r\n      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n        *\r\n\r\n      * This is internal function is equivalent to `approve`, and can be used to\r\n\r\n      * e.g. set automatic allowances for certain subsystems, etc.\r\n        *\r\n\r\n      * Emits an {Approval} event.\r\n        *\r\n\r\n      * Requirements:\r\n        *\r\n\r\n      * - `owner` cannot be the zero address.\r\n\r\n      * - `spender` cannot be the zero address.\r\n          */\r\n          function _approve(address owner, address spender, uint256 amount) internal {\r\n          require(owner != address(0), \"BEP20: approve from the zero address\");\r\n          require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n        }\r\n\r\n    /**\r\n     * set insure pool account\r\n     */\r\n    function insuranceSetting(address account) external onlyOwner isZeroAddress(account) {\r\n        INSURANCE_POOL = account;\r\n        emit AccountSetting(account);\r\n    }\r\n\r\n    /**\r\n     * set No.1 account\r\n     */\r\n    function centerOneSetting(address account) external onlyOwner isZeroAddress(account) {\r\n        CENTER_POOL_ONE = account;\r\n        emit AccountSetting(account);\r\n    }\r\n\r\n    /**\r\n     * set No.2 account\r\n     */\r\n    function centerTwoSetting(address account) external onlyOwner isZeroAddress(account) {\r\n        CENTER_POOL_TWO = account;\r\n        emit AccountSetting(account);\r\n    }\r\n\r\n    /**\r\n     * set No.3 account\r\n     */\r\n    function centerThreeSetting(address account) external onlyOwner isZeroAddress(account) {\r\n        CENTER_POOL_THREE = account;\r\n        emit AccountSetting(account);\r\n    }\r\n\r\n    /**\r\n     * set foundation account\r\n     */\r\n    function foundationSetting(address account) external onlyOwner isZeroAddress(account) {\r\n        FOUNDATION_POOL = account;\r\n        emit AccountSetting(account);\r\n    }\r\n\r\n    /**\r\n     * set freezon account\r\n     */\r\n    function freezonSetting(address account) external onlyOwner isZeroAddress(account){\r\n        FREEZON_POOL = account;\r\n        emit AccountSetting(account);\r\n    }\r\n\r\n    /**\r\n     * add hashrate of member\r\n     */\r\n    function addHashrateSetting(address account,uint hashrate) external onlyOwner isZeroAddress(account) {\r\n        require(hashrate > 0,\"Hashrate value is zero\");\r\n        Hashrate memory hr = mapHashrates[account];\r\n        if(hr.isUsed){\r\n            (bool success,uint hv) = SafeMath.tryAdd(hr.value,hashrate);\r\n            if(success){\r\n                mapHashrates[account].value = hv;\r\n                totalHashrates = SafeMath.add(totalHashrates,hashrate);\r\n            }\r\n            else{\r\n                revert(\"add handle error,maybe overflow\");\r\n                //return false;\r\n            }\r\n        }else{\r\n            mapHashrates[account].value = hashrate;\r\n            mapHashrates[account].isUsed = true;\r\n            arrHashrates.push(account);\r\n            totalHashrates = SafeMath.add(totalHashrates,hashrate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sub hashrate of memeber\r\n     */\r\n    function subHashratesSetting(address account ,uint hashrate) external onlyOwner isZeroAddress(account) {\r\n         require(hashrate > 0,\"Hashrate value is zero\");\r\n         Hashrate memory hr = mapHashrates[account];\r\n         require(hr.isUsed,\"The account has got no hashrate\");\r\n         (bool success,uint hv)= SafeMath.trySub(hr.value,hashrate);\r\n         if(!success){\r\n             revert(\"subtract hashrate error\");\r\n         }else{\r\n            if(hv==0){\r\n                delete mapHashrates[account];\r\n                uint arrIndex =0;\r\n                for(uint i=0;i<arrHashrates.length;i++){\r\n                    if(account == arrHashrates[i])\r\n                    {\r\n                        arrIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n                arrHashrates[arrIndex] = arrHashrates[arrHashrates.length -1];\r\n                arrHashrates.pop();\r\n            }else{\r\n                mapHashrates[account].value = hv;\r\n            }\r\n         }\r\n        totalHashrates = SafeMath.sub(totalHashrates,hashrate);\r\n    }\r\n\r\n    /**\r\n     * transfer depositCount FSN to insure pool\r\n     */\r\n    function insureTransfer() external onlyOwner {\r\n        _transfer(_msgSender(),INSURANCE_POOL,depositCount);\r\n    }\r\n\r\n    /**\r\n     * transfer mintFlowcount FSN to center account\r\n     */\r\n    function mintFlowable() external onlyOwner {\r\n        _transfer(_msgSender(),CENTER_POOL_THREE,mintFlowCount);\r\n    }\r\n\r\n\r\n    function centerThreeMinTransfer() external onlyOwner {\r\n        _transfer(_msgSender(),CENTER_POOL_THREE,miningLockCount);\r\n    }\r\n\r\n    function centerThreePETransfer() external onlyOwner {\r\n        _transfer(_msgSender(),CENTER_POOL_THREE,miningLockCount);\r\n    }\r\n\r\n    /**\r\n     * tansfer foundCount FSN to foundation account\r\n     */\r\n    function foundationTransfer() external onlyOwner {\r\n        _transfer(_msgSender(),CENTER_POOL_TWO,foundCount);\r\n    }\r\n\r\n    /**\r\n     * get total bounds for new register\r\n     */\r\n    function getNewAccountTotalBounds() external view onlyOwner returns(uint256){\r\n        return shareBoundsCount;\r\n    }\r\n\r\n    /**\r\n     * get bounds of hashrate unit\r\n     */\r\n    function getBoundsUnitByHashrate() external view onlyOwner returns(uint){\r\n        (bool success,uint boundsUnit) = SafeMath.tryDiv(miningCount,totalHashrates);\r\n        if(!success){\r\n            revert(\"caculate bounds unit error\");\r\n        } \r\n        return boundsUnit;\r\n    }\r\n\r\n    /**\r\n     * transfer bounds to user by user`s hashrate\r\n     */\r\n    function sendBoundsToUserByHashrate(address account,uint unitCount) external onlyOwner isZeroAddress(account){\r\n        if(unitCount <= 0)\r\n        {\r\n            revert(\"bounds unit must large than zero\");\r\n        }\r\n        Hashrate memory hrUser = mapHashrates[account];\r\n        if(!hrUser.isUsed)\r\n        {\r\n            revert(\"account has got no hashrate\");\r\n        }\r\n        (bool success,uint bounds) = SafeMath.tryMul(hrUser.value,unitCount);\r\n        if(!success){\r\n            revert(\"caculate bounds of user by hashrate failed\");\r\n        }  \r\n        _transfer(_msgSender(),account,bounds);\r\n    }\r\n\r\n\r\n    /**\r\n     * add user to locked position for plateform\r\n     */\r\n    function addDepositSetting(address account) external onlyOwner isZeroAddress(account){\r\n        \r\n        uint depBalance = _balances[account];\r\n        if(depBalance < lockCount){\r\n            revert(\"account balance is not enough\");\r\n        }\r\n        Deposit memory deposit = mapDeposits[account];\r\n        if(deposit.isUsed && deposit.value > 0){\r\n            revert(\"account had deposited already\");\r\n        }else{\r\n            _transfer(account,FREEZON_POOL,lockCount);\r\n            mapDeposits[account] = Deposit(block.timestamp,lockCount,true);\r\n            totalDeposits = SafeMath.add(totalDeposits,lockCount);\r\n            arrDeposits.push(account);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add user to locked position for client\r\n     */\r\n    function addDepositSetting() external {\r\n        uint senderBalance = _balances[_msgSender()];\r\n        if(senderBalance < lockCount){\r\n            revert(\"account balance is not enough\");\r\n        }\r\n        Deposit memory deposit = mapDeposits[_msgSender()];\r\n        if(deposit.isUsed && deposit.value > 0){\r\n            revert(\"account had deposited already\");\r\n        }else{\r\n            _transfer(_msgSender(),FREEZON_POOL,lockCount);\r\n            mapDeposits[_msgSender()] = Deposit(block.timestamp,lockCount,true);\r\n            totalDeposits = SafeMath.add(totalDeposits,lockCount);\r\n            arrDeposits.push(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get deposit share bounds unit\r\n     */\r\n    function getBoundsToDepositUser() external view onlyOwner returns(uint){\r\n        uint userCount = arrDeposits.length;\r\n        if(userCount == 0){\r\n            revert(\"no account had deposited\");\r\n        }else{\r\n            (bool success,uint unitCount) = SafeMath.tryDiv(miningLockCount,userCount);\r\n            if(!success){\r\n                revert(\"caculate bounds for per count failed\");\r\n            }else{\r\n                return unitCount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * send bounds to deposit user\r\n     */\r\n    function sendBoundsToUserByDeposit(address account,uint unitCount) external onlyOwner isZeroAddress(account) {\r\n        if(unitCount == 0){\r\n            revert(\"transfer count must be larger than zero\");\r\n        }\r\n        _transfer(_msgSender(),account,unitCount);\r\n    }\r\n\r\n    /**\r\n     * remove lock of account`s fsn after three years period\r\n     */\r\n    function removeDepositAccount() external onlyOwner{\r\n        uint lenDeposit = arrDeposits.length;\r\n        address[] memory tempDeposits = arrDeposits;\r\n        for(uint i=0;i<lenDeposit;i++){\r\n            address account = tempDeposits[i];\r\n            Deposit memory deposit = mapDeposits[account];\r\n            if(deposit.isUsed){\r\n                uint depTimestamp = deposit.timeStamp;\r\n                uint nowTimestamp = block.timestamp;\r\n                (bool success,uint difference) = SafeMath.trySub(nowTimestamp,depTimestamp);\r\n                if(success){\r\n                    uint threeYears = 3 * 365 * 24 * 60 * 60;\r\n                    if(difference >= threeYears){\r\n                        _transfer(FREEZON_POOL,account,lockCount);\r\n                        delete mapDeposits[account];\r\n                        uint arrIndex = 0;\r\n                        for(uint j=0;j<arrDeposits.length;j++){\r\n                            if(account == arrDeposits[j]){\r\n                                arrIndex = j;\r\n                                break;\r\n                            }\r\n                        }\r\n                        arrDeposits[arrIndex] = arrDeposits[arrDeposits.length - 1];\r\n                        arrDeposits.pop();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newRegisters\",\"type\":\"address[]\"}],\"name\":\"MultiTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"addDepositSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addDepositSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hashrate\",\"type\":\"uint256\"}],\"name\":\"addHashrateSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"centerOneSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"centerThreeMinTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"centerThreePETransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"centerThreeSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"centerTwoSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"foundationSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"foundationTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freezonSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBoundsToDepositUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBoundsUnitByHashrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNewAccountTotalBounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"insuranceSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"insureTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintFlowable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeDepositAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitCount\",\"type\":\"uint256\"}],\"name\":\"sendBoundsToUserByDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unitCount\",\"type\":\"uint256\"}],\"name\":\"sendBoundsToUserByHashrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hashrate\",\"type\":\"uint256\"}],\"name\":\"subHashratesSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LeeToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c222e3de9a63d515dbb6481c2680a63e0d221bdd47d37b73ccf8a71bd8da4327"}