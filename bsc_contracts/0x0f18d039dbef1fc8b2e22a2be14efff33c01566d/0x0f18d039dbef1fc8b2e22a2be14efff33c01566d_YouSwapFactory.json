{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ITokenYou.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\ninterface ITokenYou {\r\n    \r\n    function mint(address recipient, uint256 amount) external;\r\n    \r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/interface/IYouSwapFactory.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface BaseStruct {\r\n\r\n    /** \u77ff\u6c60\u56db\u79cd\u7c7b\u578b */\r\n     enum PoolLockType {\r\n        SINGLE_TOKEN, //\u5355\u5e01\u6316\u77ff\r\n        LP_TOKEN, //lp\u6316\u77ff\r\n        SINGLE_TOKEN_FIXED, //\u5355\u5e01\u5b9a\u671f\u6316\u77ff\r\n        LP_TOKEN_FIXED //lp\u5b9a\u671f\u6316\u77ff\r\n    }\r\n\r\n    /** \u77ff\u6c60\u53ef\u89c6\u5316\u4fe1\u606f */\r\n    struct PoolViewInfo {\r\n        address token; //token\u5408\u7ea6\u5730\u5740\r\n        string name; //\u540d\u79f0\r\n        uint256 multiple; //\u5956\u52b1\u500d\u6570\r\n        uint256 priority; //\u6392\u5e8f\r\n    }\r\n\r\n    /** \u77ff\u6c60\u8d28\u62bc\u4fe1\u606f */\r\n    struct PoolStakeInfo {\r\n        uint256 startBlock; //\u6316\u77ff\u5f00\u59cb\u5757\u9ad8\r\n        uint256 startTime; //\u6316\u77ff\u5f00\u59cb\u65f6\u95f4\r\n        bool enableInvite; //\u662f\u5426\u542f\u7528\u9080\u8bf7\u5173\u7cfb\r\n        address token; //token\u5408\u7ea6\u5730\u5740\uff0c\u5355\u5e01\uff0clp\u90fd\u662f\u8fd9\u4e2a\r\n        uint256 amount; //\u8d28\u62bc\u6570\u91cf\uff0c\u8fd9\u4e2a\u5c31\u662fTVL\r\n        uint256 participantCounts; //\u53c2\u4e0e\u8d28\u62bc\u73a9\u5bb6\u6570\u91cf\r\n        PoolLockType poolType; //\u5355\u5e01\u6316\u77ff\uff0clp\u6316\u77ff\uff0c\u5355\u5e01\u5b9a\u671f\uff0clp\u5b9a\u671f\r\n        uint256 lockSeconds; //\u9501\u4ed3\u6301\u7eed\u65f6\u95f4\r\n        uint256 lockUntil; //\u9501\u4ed3\u7ed3\u675f\u65f6\u95f4\uff08\u79d2\u5355\u4f4d\uff09\r\n        uint256 lastRewardBlock; //\u6700\u540e\u53d1\u653e\u5956\u52b1\u5757\u9ad8\r\n        uint256 totalPower; //\u603b\u7b97\u529b\r\n        uint256 powerRatio; //\u8d28\u62bc\u6570\u91cf\u5230\u7b97\u529b\u7cfb\u6570\uff0c\u6570\u91cf\u5c31\u662f\u7b97\u529b\u5427\r\n        uint256 maxStakeAmount; //\u6700\u5927\u8d28\u62bc\u6570\u91cf\r\n        uint256 endBlock; //\u6316\u77ff\u7ed3\u675f\u5757\u9ad8\r\n        uint256 endTime; //\u6316\u77ff\u7ed3\u675f\u65f6\u95f4\r\n        uint256 selfReward; //\u8d28\u62bc\u81ea\u5956\u52b1\r\n        uint256 invite1Reward; //1\u7ea7\u9080\u8bf7\u5956\u52b1\r\n        uint256 invite2Reward; //2\u7ea7\u9080\u8bf7\u5956\u52b1\r\n        bool isReopen; //\u662f\u5426\u4e3a\u91cd\u542f\u77ff\u6c60\r\n        uint256 withdrawRewardAllow; //\u5b9a\u671f\u671f\u95f4\u662f\u5426\u5141\u8bb8\u9886\u53d6\u5956\u52b1(0\uff1a\u4e0d\u5141\u8bb8, \u975e0\uff1a\u5141\u8bb8)\r\n    }\r\n\r\n    /** \u77ff\u6c60\u5956\u52b1\u4fe1\u606f */\r\n    struct PoolRewardInfo {\r\n        address token; //\u6316\u77ff\u5956\u52b1\u5e01\u79cd:A/B/C\r\n        uint256 rewardTotal; //\u77ff\u6c60\u603b\u5956\u52b1\r\n        uint256 rewardPerBlock; //\u5355\u4e2a\u533a\u5757\u5956\u52b1\r\n        uint256 rewardProvide; //\u77ff\u6c60\u5df2\u53d1\u653e\u5956\u52b1\r\n        uint256 rewardPerShare; //\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n    }\r\n\r\n    /** \u7528\u6237\u8d28\u62bc\u4fe1\u606f */\r\n    struct UserStakeInfo {\r\n        uint256 startBlock; //\u8d28\u62bc\u5f00\u59cb\u5757\u9ad8\r\n        uint256 amount; //\u8d28\u62bc\u6570\u91cf\r\n        uint256 invitePower; //\u9080\u8bf7\u7b97\u529b\r\n        uint256 stakePower; //\u8d28\u62bc\u7b97\u529b\r\n        uint256[] invitePendingRewards; //\u5f85\u9886\u53d6\u5956\u52b1\r\n        uint256[] stakePendingRewards; //\u5f85\u9886\u53d6\u5956\u52b1\r\n        uint256[] inviteRewardDebts; //\u9080\u8bf7\u8d1f\u503a\r\n        uint256[] stakeRewardDebts; //\u8d28\u62bc\u8d1f\u503a\r\n        uint256[] inviteClaimedRewards; //\u5df2\u9886\u53d6\u9080\u8bf7\u5956\u52b1\r\n        uint256[] stakeClaimedRewards; //\u5df2\u9886\u53d6\u8d28\u62bc\u5956\u52b1\r\n    }\r\n}\r\n\r\n////////////////////////////////// \u6316\u77ffCore\u5408\u7ea6 //////////////////////////////////////////////////\r\ninterface IYouSwapFactoryCore is BaseStruct {\r\n    function initialize(address _owner, address _platform, address _invite) external;\r\n\r\n    function getPoolRewardInfo(uint256 poolId) external view returns (PoolRewardInfo[] memory);\r\n\r\n    function getUserStakeInfo(uint256 poolId, address user) external view returns (UserStakeInfo memory);\r\n\r\n    function getPoolStakeInfo(uint256 poolId) external view returns (PoolStakeInfo memory);\r\n\r\n    function getPoolViewInfo(uint256 poolId) external view returns (PoolViewInfo memory);\r\n\r\n    function stake(uint256 poolId, uint256 amount, address user) external;\r\n\r\n    function _unStake(uint256 poolId, uint256 amount, address user) external;\r\n\r\n    function _withdrawReward(uint256 poolId, address user) external;\r\n\r\n    function getPoolIds() external view returns (uint256[] memory);\r\n\r\n    function addPool(\r\n        uint256 prePoolId,\r\n        uint256 range,\r\n        address token,\r\n        bool enableInvite,\r\n        uint256[] memory poolParams,\r\n        address[] memory tokens,\r\n        uint256[] memory rewardTotals,\r\n        uint256[] memory rewardPerBlocks\r\n    ) external;\r\n\r\n    /** \r\n    \u4fee\u6539\u77ff\u6c60\u603b\u5956\u52b1\r\n    */\r\n    function setRewardTotal(uint256 poolId, address token, uint256 rewardTotal) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u533a\u5757\u5956\u52b1\r\n     */\r\n    function setRewardPerBlock(uint256 poolId, address token, uint256 rewardPerBlock) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u540d\u79f0\r\n     */\r\n    function setName(uint256 poolId, string memory name) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u500d\u6570\r\n     */\r\n    function setMultiple(uint256 poolId, uint256 multiple) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u6392\u5e8f\r\n     */\r\n    function setPriority(uint256 poolId, uint256 priority) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u6700\u5927\u53ef\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    function setMaxStakeAmount(uint256 poolId, uint256 maxStakeAmount) external;\r\n\r\n    /**\r\n    \u77ff\u6c60ID\u6709\u6548\u6027\u6821\u9a8c\r\n     */\r\n    function checkPIDValidation(uint256 poolId) external view;\r\n\r\n    /**\r\n    \u5237\u65b0\u77ff\u6c60\uff0c\u786e\u4fdd\u7ed3\u675f\u65f6\u95f4\u88ab\u8bbe\u7f6e\r\n     */\r\n    function refresh(uint256 _poolId) external;\r\n}\r\n\r\n////////////////////////////////// \u6316\u77ff\u5916\u56f4\u5408\u7ea6 //////////////////////////////////////////////////\r\ninterface IYouSwapFactory is BaseStruct {\r\n    /**\r\n    \u4fee\u6539OWNER\r\n     */\r\n    function transferOwnership(address owner) external;\r\n\r\n    /**\r\n    \u8d28\u62bc\r\n    */\r\n    function stake(uint256 poolId, uint256 amount) external;\r\n\r\n    /**\r\n    \u89e3\u8d28\u62bc\u5e76\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function unStake(uint256 poolId, uint256 amount) external;\r\n\r\n    /**\r\n    \u6279\u91cf\u89e3\u8d28\u62bc\u5e76\u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function unStakes(uint256[] memory _poolIds) external;\r\n\r\n    /**\r\n    \u63d0\u53d6\u5956\u52b1\r\n     */\r\n    function withdrawReward(uint256 poolId) external;\r\n\r\n    /**\r\n    \u6279\u91cf\u63d0\u53d6\u5956\u52b1\uff0c\u4f9b\u5e73\u53f0\u8c03\u7528\r\n     */\r\n    function withdrawRewards2(uint256[] memory _poolIds, address user) external;\r\n\r\n    /**\r\n    \u5f85\u9886\u53d6\u7684\u5956\u52b1\r\n     */\r\n    function pendingRewardV3(uint256 poolId, address user) external view returns (address[] memory, uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory);\r\n\r\n    /**\r\n    \u77ff\u6c60ID\r\n     */\r\n    function poolIds() external view returns (uint256[] memory);\r\n\r\n    /**\r\n    \u8d28\u62bc\u6570\u91cf\u8303\u56f4\r\n     */\r\n    function stakeRange(uint256 poolId) external view returns (uint256, uint256);\r\n\r\n    /**\r\n    \u8bbe\u7f6eRewardPerBlock\u4fee\u6539\u6700\u5927\u5e45\u5ea6\r\n     */\r\n    function setChangeRPBRateMax(uint256 _rateMax) external;\r\n\r\n    /** \r\n    \u8c03\u6574\u533a\u5757\u5956\u52b1\u4fee\u6539\u5468\u671f \r\n    */\r\n    function setChangeRPBIntervalMin(uint256 _interval) external;\r\n\r\n    /** \r\n    \u8c03\u6574\u5e73\u53f0\u62bd\u6210\u6bd4\u4f8b\r\n    */\r\n    function setBenefitRate(uint256 _newRate) external;\r\n\r\n    /*\r\n    \u77ff\u6c60\u540d\u79f0\uff0c\u8d28\u62bc\u5e01\u79cd\uff0c\u662f\u5426\u542f\u7528\u9080\u8bf7\uff0c\u603b\u9501\u4ed3\uff0c\u5730\u5740\u6570\uff0c\u77ff\u6c60\u7c7b\u578b\uff0c\u9501\u4ed3\u65f6\u95f4\uff0c\u6700\u5927\u8d28\u62bc\u6570\u91cf\uff0c\u5f00\u59cb\u65f6\u95f4\uff0c\u7ed3\u675f\u65f6\u95f4\uff0c\u9501\u4ed3\u671f\u95f4\u662f\u5426\u5141\u8bb8\u9886\u53d6\u5956\u52b1\r\n    */\r\n    function getPoolStakeDetail(uint256 poolId) external view returns (address, bool, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n\r\n    /**\r\n    \u7528\u6237\u8d28\u62bc\u8be6\u60c5 \r\n    */\r\n    function getUserStakeInfo(uint256 poolId, address user) external view returns (uint256, uint256, uint256, uint256);\r\n\r\n    /**\r\n    \u7528\u6237\u5956\u52b1\u8be6\u60c5 \r\n    */\r\n    function getUserRewardInfo(uint256 poolId, address user, uint256 index) external view returns ( uint256, uint256, uint256, uint256);\r\n\r\n    /**\r\n    \u83b7\u53d6\u77ff\u6c60\u5956\u52b1\u8be6\u60c5 \r\n    */\r\n    function getPoolRewardInfoDetail(uint256 poolId) external view returns (address[] memory, uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory);\r\n\r\n    /**\r\n    \u77ff\u6c60\u5956\u52b1\u8be6\u60c5 \r\n    */\r\n    function getPoolRewardInfo(uint poolId) external view returns (PoolRewardInfo[] memory);\r\n\r\n    /**\r\n    \u589e\u52a0\u5956\u52b1APR \r\n    */\r\n    function addRewardThroughAPR(uint256 poolId, address[] memory tokens, uint256[] memory addRewardTotals, uint256[] memory addRewardPerBlocks) external;\r\n    \r\n    /**\r\n    \u5ef6\u957f\u77ff\u6c60\u5956\u52b1\u65f6\u95f4 \r\n    */\r\n    function addRewardThroughTime(uint256 poolId, address[] memory tokens, uint256[] memory addRewardTotals) external;\r\n\r\n    /** \r\n    \u8bbe\u7f6e\u8fd0\u8425\u6743\u9650 \r\n    */\r\n    function setOperateOwner(address user, bool state) external;\r\n\r\n    /** \r\n    \u65b0\u5efa\u77ff\u6c60 \r\n    */\r\n    function addPool(\r\n        uint256 prePoolId,\r\n        uint256 range,\r\n        address token,\r\n        bool enableInvite,\r\n        uint256[] memory poolParams,\r\n        address[] memory tokens,\r\n        uint256[] memory rewardTotals,\r\n        uint256[] memory rewardPerBlocks\r\n    ) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u533a\u5757\u5956\u52b1\r\n     */\r\n    function updateRewardPerBlock(uint256 poolId, bool increaseFlag, uint256 percent) external;\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u6700\u5927\u53ef\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    function setMaxStakeAmount(uint256 poolId, uint256 maxStakeAmount) external;\r\n}\r\n\r\n// File: contracts/utils/constant.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\nlibrary ErrorCode {\r\n\r\n    string constant FORBIDDEN = 'YouSwap:FORBIDDEN';\r\n    string constant IDENTICAL_ADDRESSES = 'YouSwap:IDENTICAL_ADDRESSES';\r\n    string constant ZERO_ADDRESS = 'YouSwap:ZERO_ADDRESS';\r\n    string constant INVALID_ADDRESSES = 'YouSwap:INVALID_ADDRESSES';\r\n    string constant BALANCE_INSUFFICIENT = 'YouSwap:BALANCE_INSUFFICIENT';\r\n    string constant REWARDTOTAL_LESS_THAN_REWARDPROVIDE = 'YouSwap:REWARDTOTAL_LESS_THAN_REWARDPROVIDE';\r\n    string constant PARAMETER_TOO_LONG = 'YouSwap:PARAMETER_TOO_LONG';\r\n    string constant REGISTERED = 'YouSwap:REGISTERED';\r\n    string constant MINING_NOT_STARTED = 'YouSwap:MINING_NOT_STARTED';\r\n    string constant END_OF_MINING = 'YouSwap:END_OF_MINING';\r\n    string constant POOL_NOT_EXIST_OR_END_OF_MINING = 'YouSwap:POOL_NOT_EXIST_OR_END_OF_MINING';\r\n    \r\n}\r\n\r\nlibrary DefaultSettings {\r\n    uint256 constant BENEFIT_RATE_MIN = 0; // 0% \u5e73\u53f0\u62bd\u6210\u6700\u5c0f\u6bd4\u4f8b, 10: 0.1%, 100: 1%, 1000: 10%, 10000: 100%\r\n    uint256 constant BENEFIT_RATE_MAX = 10000; //100% \u5e73\u53f0\u62bd\u6210\u6700\u5927\u6bd4\u4f8b\r\n    uint256 constant TEN_THOUSAND = 10000; //100% \u5e73\u53f0\u62bd\u6210\u6700\u5927\u6bd4\u4f8b\r\n    uint256 constant EACH_FACTORY_POOL_MAX = 10000; //\u6bcf\u4e2a\u77ff\u6c60\u5408\u7ea6\u521b\u5efa\u5408\u7ea6\u4e0a\u9650\r\n    uint256 constant CHANGE_RATE_MAX = 30; //\u8c03\u6574\u533a\u5757\u53d1\u653e\u6570\u91cf\u5e45\u5ea6\u5355\u6b21\u6700\u592730%\r\n    uint256 constant DAY_INTERVAL_MIN = 7; //\u8c03\u6574\u5355\u4e2a\u533a\u5757\u5956\u52b1\u6570\u91cf\u9891\u7387\r\n    uint256 constant SECONDS_PER_DAY = 86400; //\u6bcf\u5929\u79d2\u6570\r\n    uint256 constant ONEMINUTE = 1 minutes;\r\n    uint256 constant REWARD_TOKENTYPE_MAX = 10; //\u5956\u52b1\u5e01\u79cd\u6700\u5927\u6570\u91cf\r\n}\r\n\r\n// File: contracts/implement/YouSwapFactory.sol\r\n\r\n\r\npragma solidity 0.7.4;\r\n\r\n\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\ncontract YouSwapFactory is IYouSwapFactory {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool initialized;\r\n    address private constant ZERO = address(0);\r\n\r\n    address public owner; //\u6240\u6709\u6743\u9650\r\n    address internal platform; //\u5e73\u53f0\r\n\r\n    IYouSwapFactoryCore public core; //core\u5408\u7ea6\r\n    mapping(address => bool) public operateOwner; //\u8fd0\u8425\u6743\u9650\r\n    mapping(uint256 => uint256) public lastSetRewardPerBlockTime; //\u6700\u540e\u4e00\u6b21\u8bbe\u7f6e\u533a\u5757\u5956\u52b1\u6570\u65f6\u95f4\uff0cpoolid->timestamp\r\n\r\n    uint256 public changeRewardPerBlockRateMax; //\u8c03\u6574\u533a\u5757\u6700\u5927\u6bd4\u4f8b\uff0cdefault: 30%\r\n    uint256 public changeRewardPerBlockIntervalMin; //\u8c03\u6574\u533a\u5757\u6700\u5c0f\u65f6\u95f4\u95f4\u9694\uff0cdefault: 7 days\r\n    uint256 public benefitRate; //\u5e73\u53f0\u62bd\u6210\u6bd4\u4f8b\r\n    mapping(address => bool) public whiteList; //\u521b\u5efa\u4eba\u767d\u540d\u5355\uff0c\u53ef\u514d\u8d39\u589e\u52a0APR\uff0c\u5ef6\u65f6\u77ff\u6c60\r\n\r\n    //\u6821\u9a8cowner\u6743\u9650\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"YouSwap:FORBIDDEN_NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    //\u6821\u9a8cplatform\u6743\u9650\r\n    modifier onlyPlatform() {\r\n        require(platform == msg.sender, \"YouSwap:FORBIDFORBIDDEN_NOT_PLATFORM\");\r\n        _;\r\n    }\r\n\r\n    //\u6821\u9a8c\u8fd0\u8425\u6743\u9650\r\n    modifier onlyOperater() {\r\n        require(operateOwner[msg.sender], \"YouSwap:FORBIDDEN_NOT_OPERATER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    @notice clone YouSwapFactory\u521d\u59cb\u5316\r\n    @param _owner \u9879\u76ee\u65b9\r\n    @param _platform FactoryCreator\u5e73\u53f0\r\n    @param _benefitRate \u62bd\u6210\u6bd4\u4f8b\r\n    @param _invite \u9080\u8bf7\u5408\u7ea6\uff0c\u76f4\u63a5\u900f\u4f20\r\n    @param _core clone\u6838\u5fc3\u5408\u7ea6\r\n    */\r\n    function initialize(address _owner, address _platform, uint256 _benefitRate, address _invite, address _core) external {\r\n        require(!initialized,  \"YouSwap:ALREADY_INITIALIZED!\");\r\n        initialized = true;\r\n        core = IYouSwapFactoryCore(_core);\r\n        core.initialize(address(this), _platform, _invite);\r\n\r\n        owner = _owner; //owner\u6743\u9650\r\n        platform = _platform; //\u5e73\u53f0\u6743\u9650\r\n        benefitRate = _benefitRate;\r\n\r\n        changeRewardPerBlockRateMax = DefaultSettings.CHANGE_RATE_MAX; //\u9ed8\u8ba4\u503c\u8bbe\u7f6e\r\n        changeRewardPerBlockIntervalMin = DefaultSettings.DAY_INTERVAL_MIN;\r\n        _setOperateOwner(_owner, true); \r\n    }\r\n\r\n    /**\r\n     @notice \u8f6c\u79fbowner\u6743\u9650\r\n     @param oldOwner\uff1a\u65e7Owner\r\n     @param newOwner\uff1a\u65b0Owner\r\n     */\r\n    event TransferOwnership(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /**\r\n     @notice \u8bbe\u7f6e\u8fd0\u8425\u6743\u9650\r\n     @param user\uff1a\u8425\u8fd0\u5730\u5740\r\n     @param state\uff1a\u6743\u9650\u72b6\u6001\r\n     */\r\n    event OperateOwnerEvent(address indexed user, bool state);\r\n\r\n    /**\r\n    @notice \u8c03\u6574\u5355\u5757\u5956\u52b1\u8c03\u6574\u6bd4\u4f8b\r\n    @param poolId \u77ff\u6c60id\r\n    @param increaseFlag \u662f\u5426\u589e\u52a0\r\n    @param percent \u8c03\u6574\u6bd4\u4f8b\r\n     */\r\n    event UpdateRewardPerBlockEvent(uint256 poolId, bool increaseFlag, uint256 percent);\r\n\r\n    /**\r\n    @notice \u52a0\u5956\u52b1APR\r\n    @param poolId \u77ff\u6c60id\r\n    @param tokens \u8c03\u6574\u5956\u52b1\u5e01\u79cd\r\n    @param addRewardTotals \u589e\u52a0\u5956\u52b1\u5e01\u79cd\u603b\u91cf\r\n    @param addRewardPerBlocks \u589e\u52a0\u5355\u5757\u5956\u52b1\u6570\u91cf\r\n     */\r\n    event AddRewardThroughAPREvent(uint256 poolId, address[] tokens, uint256[] addRewardTotals, uint256[]addRewardPerBlocks);\r\n\r\n    /**\r\n    @notice \u52a0\u5956\u52b1APR\r\n    @param poolId \u77ff\u6c60id\r\n    @param tokens \u8c03\u6574\u5956\u52b1\u5e01\u79cd\r\n    @param addRewardTotals \u589e\u52a0\u5956\u52b1\u5e01\u79cd\u603b\u91cf\r\n     */\r\n    event AddRewardThroughTimeEvent(uint256 poolId, address[] tokens, uint256[] addRewardTotals);\r\n\r\n    /**\r\n    @notice \u66f4\u65b0\u5e73\u53f0\u5e01\u62bd\u6210\u6bd4\u4f8b\r\n    @param preRate \u65e7\u62bd\u6210\u6bd4\u4f8b\r\n    @param newRate \u65b0\u62bd\u6210\u6bd4\u4f8b\r\n     */\r\n    event BenefitRateEvent(uint256 preRate, uint256 newRate);\r\n\r\n    /**\r\n     @notice \u4fee\u6539OWNER\r\n     @param _owner\uff1a\u65b0Owner\r\n     */\r\n    function transferOwnership(address _owner) external override onlyOwner {\r\n        require(ZERO != _owner, \"YouSwap:INVALID_ADDRESSES\");\r\n        emit TransferOwnership(owner, _owner);\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n    \u8bbe\u7f6e\u8fd0\u8425\u6743\u9650\r\n     */\r\n    function setOperateOwner(address user, bool state) external override onlyOwner {\r\n        _setOperateOwner(user, state);\r\n    }\r\n\r\n    /**\r\n     @notice \u8bbe\u7f6e\u8fd0\u8425\u6743\u9650\r\n     @param user \u8fd0\u8425\u5730\u5740\r\n     @param state \u6743\u9650\u72b6\u6001\r\n     */\r\n    function _setOperateOwner(address user, bool state) internal {\r\n        operateOwner[user] = state; //\u8bbe\u7f6e\u8fd0\u8425\u6743\u9650\r\n        emit OperateOwnerEvent(user, state);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////\r\n    /**\r\n    @notice \u8d28\u62bc\r\n    @param poolId \u8d28\u62bc\u77ff\u6c60\r\n    @param amount \u8d28\u62bc\u6570\u91cf\r\n    */\r\n    function stake(uint256 poolId, uint256 amount) external override {\r\n        BaseStruct.PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        require((ZERO != poolStakeInfo.token) && (poolStakeInfo.startTime <= block.timestamp) && (poolStakeInfo.startBlock <= block.number), \"YouSwap:POOL_NOT_EXIST_OR_MINT_NOT_START\"); //\u662f\u5426\u5f00\u542f\u6316\u77ff\r\n        require((poolStakeInfo.powerRatio <= amount) && (poolStakeInfo.amount.add(amount) <= poolStakeInfo.maxStakeAmount), \"YouSwap:STAKE_AMOUNT_TOO_SMALL_OR_TOO_LARGE\");\r\n\r\n        uint256 balance = IERC20(poolStakeInfo.token).balanceOf(address(core));\r\n        IERC20(poolStakeInfo.token).safeTransferFrom(msg.sender, address(core), amount); //\u8f6c\u79fbsender\u7684\u8d28\u62bc\u8d44\u4ea7\u5230this\r\n        //\u5b9e\u9645\u8f6c\u5165core\u91d1\u989d\uff0c\u517c\u5bb9\u71c3\u70e7\u5e01\u79cd\r\n        amount = IERC20(poolStakeInfo.token).balanceOf(address(core)).sub(balance);\r\n        core.stake(poolId, amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n    @notice \u89e3\u8d28\u62bc\r\n    @param poolId \u89e3\u8d28\u62bc\u77ff\u6c60\r\n    @param amount \u89e3\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    function unStake(uint256 poolId, uint256 amount) external override {\r\n        checkOperationValidation(poolId);\r\n        BaseStruct.UserStakeInfo memory userStakeInfo = core.getUserStakeInfo(poolId, msg.sender);\r\n        require((amount > 0) && (userStakeInfo.amount >= amount), \"YouSwap:BALANCE_INSUFFICIENT\");\r\n        core._unStake(poolId, amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n    @notice \u6279\u91cf\u89e3\u8d28\u62bc\u5e76\u63d0\u53d6\u5956\u52b1\r\n    @param _poolIds \u89e3\u8d28\u62bc\u77ff\u6c60\r\n     */\r\n    function unStakes(uint256[] memory _poolIds) external override {\r\n        require((0 < _poolIds.length) && (50 >= _poolIds.length), \"YouSwap:PARAMETER_ERROR_TOO_SHORT_OR_LONG\");\r\n        uint256 amount;\r\n        uint256 poolId;\r\n        BaseStruct.UserStakeInfo memory userStakeInfo;\r\n\r\n        for (uint256 i = 0; i < _poolIds.length; i++) {\r\n            poolId = _poolIds[i];\r\n            checkOperationValidation(poolId);\r\n            userStakeInfo = core.getUserStakeInfo(poolId, msg.sender);\r\n            amount = userStakeInfo.amount; //sender\u7684\u8d28\u62bc\u6570\u91cf\r\n\r\n            if (0 < amount) {\r\n                core._unStake(poolId, amount, msg.sender);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    @notice \u63d0\u53d6\u5956\u52b1\r\n    @param poolId \u77ff\u6c60id\r\n     */\r\n    function withdrawReward(uint256 poolId) public override {\r\n        checkOperationValidation(poolId);\r\n        core._withdrawReward(poolId, msg.sender);\r\n    }\r\n\r\n    /**\r\n    \u6279\u91cf\u63d0\u53d6\u5956\u52b1\uff0c\u4f9b\u5e73\u53f0\u4f7f\u7528\r\n     */\r\n    function withdrawRewards2(uint256[] memory _poolIds, address user) external onlyPlatform override {\r\n        for (uint256 i = 0; i < _poolIds.length; i++) {\r\n            BaseStruct.PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(_poolIds[i]);\r\n            if (poolStakeInfo.startTime > block.timestamp && !poolStakeInfo.isReopen) {\r\n                continue;\r\n            }\r\n            core._withdrawReward(_poolIds[i], user);\r\n        }\r\n    }\r\n\r\n    /**\r\n    \u6821\u9a8c\u91cd&&\u5f00\u9501\u4ed3\u6709\u6548\u6027\r\n     */\r\n     function checkOperationValidation(uint256 poolId) internal view {\r\n        BaseStruct.PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        require((ZERO != poolStakeInfo.token), \"YouSwap:POOL_NOT_EXIST\"); //\u662f\u5426\u5f00\u542f\u6316\u77ff\r\n        if (!poolStakeInfo.isReopen) {\r\n            require((poolStakeInfo.startTime <= block.timestamp) && (poolStakeInfo.startBlock <= block.number), \"YouSwap:POOL_NOT_START\"); //\u662f\u5426\u5f00\u542f\u6316\u77ff\r\n        } \r\n     }\r\n\r\n    struct PendingLocalVars {\r\n        uint256 poolId;\r\n        address user;\r\n        uint256 inviteReward;\r\n        uint256 stakeReward;\r\n        uint256 rewardPre;\r\n    }\r\n\r\n    /**\r\n    \u5f85\u9886\u53d6\u7684\u5956\u52b1: tokens\uff0cinvite\u5f85\u9886\u53d6\uff0c\u8d28\u62bc\u5f85\u9886\u53d6\uff0cinvite\u5df2\u9886\u53d6\uff0c\u8d28\u62bc\u5df2\u9886\u53d6\r\n     */\r\n    function pendingRewardV3(uint256 poolId, address user) external view override returns (\r\n                            address[] memory tokens, \r\n                            uint256[] memory invitePendingRewardsRet, \r\n                            uint256[] memory stakePendingRewardsRet, \r\n                            uint256[] memory inviteClaimedRewardsRet, \r\n                            uint256[] memory stakeClaimedRewardsRet) {\r\n        PendingLocalVars memory vars;\r\n        vars.poolId = poolId;\r\n        vars.user = user;\r\n        BaseStruct.PoolRewardInfo[] memory _poolRewardInfos = core.getPoolRewardInfo(vars.poolId);\r\n        tokens = new address[](_poolRewardInfos.length);\r\n        invitePendingRewardsRet = new uint256[](_poolRewardInfos.length);\r\n        stakePendingRewardsRet = new uint256[](_poolRewardInfos.length);\r\n        inviteClaimedRewardsRet = new uint256[](_poolRewardInfos.length);\r\n        stakeClaimedRewardsRet = new uint256[](_poolRewardInfos.length);\r\n\r\n        BaseStruct.PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(vars.poolId);\r\n        if (ZERO != poolStakeInfo.token) {\r\n            BaseStruct.UserStakeInfo memory userStakeInfo = core.getUserStakeInfo(vars.poolId,vars.user);\r\n\r\n            uint256 i = userStakeInfo.invitePendingRewards.length;\r\n            for (uint256 j = 0; j < _poolRewardInfos.length; j++) {\r\n                BaseStruct.PoolRewardInfo memory poolRewardInfo = _poolRewardInfos[j];\r\n                vars.inviteReward = 0;\r\n                vars.stakeReward = 0;\r\n\r\n                if (0 < poolStakeInfo.totalPower) {\r\n                    //\u77ff\u6c60\u672a\u7ed3\u675f\u6216\u91cd\u542f\u540e\u5f00\u59cb\u6316\u77ff\uff0crewardPerShare\u6709\u53ef\u80fd\u589e\u52a0\r\n                    if (block.number > poolStakeInfo.lastRewardBlock) {\r\n                        vars.rewardPre = block.number.sub(poolStakeInfo.lastRewardBlock).mul(poolRewardInfo.rewardPerBlock); //\u5f85\u5feb\u7167\u5956\u52b1\r\n                        if (poolRewardInfo.rewardProvide.add(vars.rewardPre) >= poolRewardInfo.rewardTotal) {\r\n                            vars.rewardPre = poolRewardInfo.rewardTotal.sub(poolRewardInfo.rewardProvide); //\u6838\u51cf\u8d85\u51fa\u5956\u52b1\r\n                        }\r\n                        poolRewardInfo.rewardPerShare = poolRewardInfo.rewardPerShare.add(vars.rewardPre.mul(1e41).div(poolStakeInfo.totalPower)); //\u7d2f\u52a0\u5f85\u5feb\u7167\u7684\u5355\u4f4d\u7b97\u529b\u5956\u52b1\r\n                    }\r\n                }\r\n\r\n                if (i > j) {\r\n                    //\u7edf\u8ba1\u65e7\u5956\u52b1\u5e01\u79cd\r\n                    vars.inviteReward = userStakeInfo.invitePendingRewards[j]; //\u5f85\u9886\u53d6\u5956\u52b1\r\n                    vars.stakeReward = userStakeInfo.stakePendingRewards[j]; //\u5f85\u9886\u53d6\u5956\u52b1\r\n                    vars.inviteReward = vars.inviteReward.add(userStakeInfo.invitePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.inviteRewardDebts[j]).div(1e41)); //\u5f85\u5feb\u7167\u7684\u9080\u8bf7\u5956\u52b1\r\n                    vars.stakeReward = vars.stakeReward.add(userStakeInfo.stakePower.mul(poolRewardInfo.rewardPerShare).sub(userStakeInfo.stakeRewardDebts[j]).div(1e41)); //\u5f85\u5feb\u7167\u7684\u8d28\u62bc\u5956\u52b1\r\n                    inviteClaimedRewardsRet[j] = userStakeInfo.inviteClaimedRewards[j]; //\u5df2\u9886\u53d6\u9080\u8bf7\u5956\u52b1(\u7d2f\u8ba1)\r\n                    stakeClaimedRewardsRet[j] = userStakeInfo.stakeClaimedRewards[j]; //\u5df2\u9886\u53d6\u8d28\u62bc\u5956\u52b1(\u7d2f\u8ba1)\r\n                } else {\r\n                    //\u7edf\u8ba1\u65b0\u5956\u52b1\u5e01\u79cd\r\n                    vars.inviteReward = userStakeInfo.invitePower.mul(poolRewardInfo.rewardPerShare).div(1e41); //\u5f85\u5feb\u7167\u7684\u9080\u8bf7\u5956\u52b1\r\n                    vars.stakeReward = userStakeInfo.stakePower.mul(poolRewardInfo.rewardPerShare).div(1e41); //\u5f85\u5feb\u7167\u7684\u8d28\u62bc\u5956\u52b1\r\n                }\r\n\r\n                invitePendingRewardsRet[j] = vars.inviteReward;\r\n                stakePendingRewardsRet[j] = vars.stakeReward;\r\n                tokens[j] = poolRewardInfo.token;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    \u77ff\u6c60ID\r\n     */\r\n    function poolIds() external view override returns (uint256[] memory poolIDs) {\r\n        poolIDs = core.getPoolIds();\r\n    }\r\n\r\n    /**\r\n    \u8d28\u62bc\u6570\u91cf\u8303\u56f4\r\n     */\r\n    function stakeRange(uint256 poolId) external view override returns (uint256 powerRatio, uint256 maxStakeAmount) {\r\n        BaseStruct.PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        if (ZERO == poolStakeInfo.token) {\r\n            return (0, 0);\r\n        }\r\n        powerRatio = poolStakeInfo.powerRatio;\r\n        maxStakeAmount = poolStakeInfo.maxStakeAmount.sub(poolStakeInfo.amount);\r\n    }\r\n\r\n    /*\r\n    \u8d28\u62bc\u5e01\u79cd\uff0c\u662f\u5426\u542f\u7528\u9080\u8bf7\uff0c\u603b\u9501\u4ed3\uff0c\u5730\u5740\u6570\uff0c\u77ff\u6c60\u7c7b\u578b\uff0c\u9501\u4ed3\u65f6\u95f4\uff0c\u6700\u5927\u8d28\u62bc\u6570\u91cf\uff0c\u5f00\u59cb\u65f6\u95f4\uff0c\u7ed3\u675f\u65f6\u95f4\r\n    */\r\n    function getPoolStakeDetail(uint256 poolId) external view override returns (\r\n                        // string memory name, \r\n                        address token, \r\n                        bool enableInvite, \r\n                        uint256 stakeAmount, \r\n                        uint256 participantCounts, \r\n                        uint256 poolType, \r\n                        uint256 lockSeconds, \r\n                        uint256 maxStakeAmount, \r\n                        uint256 startTime, \r\n                        uint256 endTime, \r\n                        uint256 withdrawRewardAllow) {\r\n        PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        // PoolViewInfo memory poolViewInfo = core.getPoolViewInfo(poolId);\r\n\r\n        // name = poolViewInfo.name;\r\n        token = poolStakeInfo.token;\r\n        enableInvite = poolStakeInfo.enableInvite;\r\n        stakeAmount = poolStakeInfo.amount;\r\n        participantCounts = poolStakeInfo.participantCounts;\r\n        poolType = uint256(poolStakeInfo.poolType); \r\n        lockSeconds = poolStakeInfo.lockSeconds;\r\n        maxStakeAmount = poolStakeInfo.maxStakeAmount;\r\n        startTime = poolStakeInfo.startTime;\r\n        endTime = poolStakeInfo.endTime;\r\n        withdrawRewardAllow = poolStakeInfo.withdrawRewardAllow;\r\n    }\r\n\r\n    /**\u7528\u6237\u8d28\u62bc\u8be6\u60c5 */\r\n    function getUserStakeInfo(uint256 poolId, address user) external view override returns (\r\n                        uint256 startBlock, \r\n                        uint256 stakeAmount, \r\n                        uint256 invitePower,\r\n                        uint256 stakePower) {\r\n        BaseStruct.UserStakeInfo memory userStakeInfo = core.getUserStakeInfo(poolId,user);\r\n        startBlock = userStakeInfo.startBlock;\r\n        stakeAmount = userStakeInfo.amount;\r\n        invitePower = userStakeInfo.invitePower;\r\n        stakePower = userStakeInfo.stakePower;\r\n    }\r\n\r\n    /*\r\n    \u83b7\u53d6\u5956\u52b1\u8be6\u60c5\r\n    */\r\n    function getUserRewardInfo(uint256 poolId, address user, uint256 index) external view override returns (\r\n                        uint256 invitePendingReward,\r\n                        uint256 stakePendingReward, \r\n                        uint256 inviteRewardDebt, \r\n                        uint256 stakeRewardDebt) {\r\n        BaseStruct.UserStakeInfo memory userStakeInfo = core.getUserStakeInfo(poolId,user);\r\n        invitePendingReward = userStakeInfo.invitePendingRewards[index];\r\n        stakePendingReward = userStakeInfo.stakePendingRewards[index];\r\n        inviteRewardDebt = userStakeInfo.inviteRewardDebts[index];\r\n        stakeRewardDebt = userStakeInfo.stakeRewardDebts[index];\r\n    }\r\n\r\n    /**\r\n    \u83b7\u53d6\u6316\u77ff\u5956\u52b1\u8be6\u60c5 \r\n    */\r\n    function getPoolRewardInfo(uint poolId) external view override returns (PoolRewardInfo[] memory) {\r\n        return core.getPoolRewardInfo(poolId);\r\n    }\r\n\r\n    /* \r\n    \u83b7\u53d6\u591a\u6316\u5e01\u79cd\u5956\u52b1\u8be6\u60c5 \r\n    */\r\n    function getPoolRewardInfoDetail(uint256 poolId) external view override returns (\r\n                        address[] memory tokens, \r\n                        uint256[] memory rewardTotals, \r\n                        uint256[] memory rewardProvides, \r\n                        uint256[] memory rewardPerBlocks,\r\n                        uint256[] memory rewardPerShares) {\r\n        BaseStruct.PoolRewardInfo[] memory _poolRewardInfos = core.getPoolRewardInfo(poolId);\r\n        tokens = new address[](_poolRewardInfos.length);\r\n        rewardTotals = new uint256[](_poolRewardInfos.length);\r\n        rewardProvides = new uint256[](_poolRewardInfos.length);\r\n        rewardPerBlocks = new uint256[](_poolRewardInfos.length);\r\n        rewardPerShares = new uint256[](_poolRewardInfos.length);\r\n\r\n        BaseStruct.PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        uint256 newRewards;\r\n        uint256 blockCount;\r\n        if(block.number > poolStakeInfo.lastRewardBlock) { //\u5c1a\u672a\u91cd\u5f00\r\n            blockCount = block.number.sub(poolStakeInfo.lastRewardBlock); //\u5f85\u53d1\u653e\u7684\u533a\u5757\u6570\u91cf\r\n        }\r\n\r\n        for (uint256 i = 0; i < _poolRewardInfos.length; i++) {\r\n            newRewards = blockCount.mul(_poolRewardInfos[i].rewardPerBlock); //\u4e24\u6b21\u5feb\u7167\u4e4b\u95f4\u603b\u5956\u52b1\r\n            tokens[i] = _poolRewardInfos[i].token;\r\n            rewardTotals[i] = _poolRewardInfos[i].rewardTotal;\r\n\r\n            if (_poolRewardInfos[i].rewardProvide.add(newRewards) > rewardTotals[i]) {\r\n                rewardProvides[i] = rewardTotals[i];\r\n            } else {\r\n                rewardProvides[i] = _poolRewardInfos[i].rewardProvide.add(newRewards);\r\n            }\r\n\r\n            rewardPerBlocks[i] = _poolRewardInfos[i].rewardPerBlock;\r\n            rewardPerShares[i] = _poolRewardInfos[i].rewardPerShare;\r\n        }\r\n    }\r\n\r\n    /** \r\n    \u65b0\u5efa\u77ff\u6c60 \r\n    */\r\n    function addPool(\r\n        uint256 prePoolId,\r\n        uint256 range,\r\n        address token,\r\n        bool enableInvite,\r\n        uint256[] memory poolParams,\r\n        address[] memory tokens,\r\n        uint256[] memory rewardTotals,\r\n        uint256[] memory rewardPerBlocks\r\n    ) external override onlyPlatform {\r\n        require((0 < tokens.length) && (DefaultSettings.REWARD_TOKENTYPE_MAX >= tokens.length) && (tokens.length == rewardTotals.length) && (tokens.length == rewardPerBlocks.length), \"YouSwap:PARAMETER_ERROR_REWARD\");\r\n        require(core.getPoolIds().length < DefaultSettings.EACH_FACTORY_POOL_MAX, \"YouSwap:FACTORY_CREATE_MINING_POOL_MAX_REACHED\");\r\n        core.addPool(prePoolId, range, token, enableInvite, poolParams, tokens, rewardTotals, rewardPerBlocks); \r\n    }\r\n\r\n    /**\r\n    @notice \u4fee\u6539\u77ff\u6c60\u533a\u5757\u5956\u52b1\uff0c\u96507\u5929\u8bbe\u7f6e\u4e00\u6b21\uff0c\u4e0d\u8f6c\u5165\u8d44\u91d1\r\n    @param poolId \u77ff\u6c60ID\r\n    @param increaseFlag \u662f\u5426\u589e\u52a0\r\n    @param percent \u8c03\u6574\u6bd4\u4f8b\r\n     */\r\n    function updateRewardPerBlock(uint256 poolId, bool increaseFlag, uint256 percent) external override onlyOperater {\r\n        require(percent <= changeRewardPerBlockRateMax, \"YouSwap:CHANGE_RATE_INPUT_TOO_BIG\");\r\n        core.checkPIDValidation(poolId);\r\n        core.refresh(poolId);\r\n        PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        require(0 == poolStakeInfo.endBlock, \"YouSwapCore:POOL_END_OF_MINING\");\r\n\r\n        uint256 lastTime = lastSetRewardPerBlockTime[poolId];\r\n        require(block.timestamp >= lastTime.add(DefaultSettings.SECONDS_PER_DAY.mul(changeRewardPerBlockIntervalMin)), \"YouSwap:SET_REWARD_PER_BLOCK_NOT_READY!\");\r\n        lastSetRewardPerBlockTime[poolId] = block.timestamp;\r\n\r\n        BaseStruct.PoolRewardInfo[] memory _poolRewardInfos = core.getPoolRewardInfo(poolId);\r\n        for (uint i = 0; i < _poolRewardInfos.length; i++) {\r\n            uint256 preRewardPerBlock = _poolRewardInfos[i].rewardPerBlock;\r\n            uint256 newRewardPerBlock;\r\n\r\n            if (increaseFlag) {\r\n                newRewardPerBlock = preRewardPerBlock.add(preRewardPerBlock.mul(percent).div(100));\r\n            } else {\r\n                newRewardPerBlock = preRewardPerBlock.sub(preRewardPerBlock.mul(percent).div(100));\r\n            }\r\n\r\n            core.setRewardPerBlock(poolId, _poolRewardInfos[i].token, newRewardPerBlock);\r\n        }\r\n        emit UpdateRewardPerBlockEvent(poolId, increaseFlag, percent);\r\n    }\r\n\r\n    /** \r\n    \u8c03\u6574\u533a\u5757\u5956\u52b1\u6700\u5927\u8c03\u6574\u5e45\u5ea6 \r\n    */\r\n    function setChangeRPBRateMax(uint256 _rateMax) external override onlyPlatform {\r\n        require(_rateMax <= 100, \"YouSwap:SET_CHANGE_REWARD_PER_BLOCK_RATE_MAX_TOO_BIG\");\r\n        changeRewardPerBlockRateMax = _rateMax;\r\n    }\r\n\r\n    /** \r\n    \u8c03\u6574\u533a\u5757\u5956\u52b1\u4fee\u6539\u5468\u671f \r\n    */\r\n    function setChangeRPBIntervalMin(uint256 _interval) external override onlyPlatform {\r\n        changeRewardPerBlockIntervalMin = _interval;\r\n    }\r\n\r\n    /** \r\n    \u8c03\u6574\u5e73\u53f0\u62bd\u6210\u6bd4\u4f8b\r\n    */\r\n    function setBenefitRate(uint256 _newRate) external override onlyPlatform {\r\n        uint256 preRate = benefitRate;\r\n        if (preRate == _newRate) return;\r\n        benefitRate = _newRate;\r\n        emit BenefitRateEvent(preRate, benefitRate);\r\n    }\r\n\r\n    /**\r\n        @notice \u8bbe\u7f6e\u767d\u540d\u5355\r\n        @param _super \u767d\u540d\u5355\r\n        @param _state \u767d\u540d\u5355\u652f\u6301\u72b6\u6001\r\n     */\r\n    function setWhiteList(address _super, bool _state) external onlyPlatform {\r\n        whiteList[_super] = _state;\r\n    }\r\n\r\n    /**\r\n    \u4fee\u6539\u77ff\u6c60\u6700\u5927\u53ef\u8d28\u62bc\u6570\u91cf\r\n     */\r\n    function setMaxStakeAmount(uint256 poolId, uint256 maxStakeAmount) external override onlyOperater {\r\n        core.checkPIDValidation(poolId);\r\n        PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        require(poolStakeInfo.powerRatio <= maxStakeAmount && poolStakeInfo.amount <= maxStakeAmount, \"YouSwapCore:MAX_STAKE_AMOUNT_INVALID\");\r\n        core.setMaxStakeAmount(poolId, maxStakeAmount);\r\n    }\r\n\r\n    struct APRLocalVars {\r\n        uint256 balance;\r\n        bool existFlag;\r\n        bool existEmptyFlag;\r\n    }\r\n\r\n    /** \r\n    @notice \u589e\u52a0\u5956\u52b1APR \u4e24\u79cd\u6a21\u5f0f\uff1a1. \u5df2\u6709\u8d44\u4ea7 2. \u65b0\u589e\u5e01\u79cd\r\n    @param poolId uint256, \u77ff\u6c60ID\r\n    @param tokens address[] \u5956\u52b1\u5e01\u79cd\r\n    @param addRewardTotals uint256[] \u6316\u77ff\u603b\u5956\u52b1\uff0ctotal\u662f\u65b0\u589e\u52a0\u6570\u91cf\r\n    @param addRewardPerBlocks uint256[] \u5355\u4e2a\u533a\u5757\u5956\u52b1\uff0crewardPerBlock\u662f\u589e\u52a0\u6570\u91cf\r\n    */\r\n    function addRewardThroughAPR(uint256 poolId, address[] memory tokens, uint256[] memory addRewardTotals, uint256[] memory addRewardPerBlocks) external override onlyOperater {\r\n        require((0 < tokens.length) && (DefaultSettings.REWARD_TOKENTYPE_MAX >= tokens.length) && (tokens.length == addRewardTotals.length) && (tokens.length == addRewardPerBlocks.length), \"YouSwap:PARAMETER_ERROR_REWARD\");\r\n        core.checkPIDValidation(poolId);\r\n        core.refresh(poolId);\r\n        PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        require(0 == poolStakeInfo.endBlock, \"YouSwapCore:POOL_END_OF_MINING\");\r\n\r\n        BaseStruct.PoolRewardInfo[] memory poolRewardInfos = core.getPoolRewardInfo(poolId);\r\n        APRLocalVars memory vars;\r\n        uint256 _newRewardTotal;\r\n        uint256 _newRewardPerBlock;\r\n\r\n        uint256[] memory newTotals = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            require(ZERO != tokens[i], \"YouSwap:INVALID_TOKEN_ADDRESS\");\r\n            _newRewardTotal = 0;\r\n            _newRewardPerBlock = 0;\r\n            vars.existFlag = false; //\u5df2\u5b58\u5728\uff0c\u672a\u53d1\u5b8c\r\n            vars.existEmptyFlag = false; //\u5df2\u5b58\u5728\uff0c\u5df2\u53d1\u5b8c\r\n            vars.balance = IERC20(tokens[i]).balanceOf(address(core));\r\n            newTotals[i] = addRewardTotals[i];\r\n\r\n            uint256 benefitAmount = addRewardTotals[i].mul(benefitRate).div(DefaultSettings.TEN_THOUSAND);\r\n            if (!whiteList[msg.sender]) {\r\n                if (benefitAmount > 0) {\r\n                    IERC20(tokens[i]).safeTransferFrom(msg.sender, address(platform), benefitAmount);\r\n                    newTotals[i] = addRewardTotals[i].sub(benefitAmount);\r\n                }\r\n            }\r\n            if (newTotals[i] > 0) {\r\n                IERC20(tokens[i]).safeTransferFrom(msg.sender, address(core), newTotals[i]);\r\n            }\r\n\r\n            //\u5b9e\u9645\u8f6c\u5165core\u91d1\u989d\uff0c\u517c\u5bb9\u71c3\u70e7\u5e01\u79cd\r\n            newTotals[i] = IERC20(tokens[i]).balanceOf(address(core)).sub(vars.balance);\r\n\r\n            uint256 rewardLeft;\r\n            for (uint256 j = 0; j < poolRewardInfos.length; j++) {\r\n                if (tokens[i] == poolRewardInfos[j].token) {\r\n                    vars.existFlag = true;\r\n\r\n                    _newRewardTotal = poolRewardInfos[j].rewardTotal.add(newTotals[i]);\r\n                    rewardLeft = poolRewardInfos[j].rewardTotal.sub(poolRewardInfos[j].rewardProvide);\r\n                    if (rewardLeft == 0) {\r\n                        vars.existEmptyFlag = true;\r\n                        break;\r\n                    }\r\n\r\n                    // \u533a\u5757\u53d1\u653e\u6570\u91cf = \u5f53\u524d\u533a\u5757\u53d1\u653e\u6570\u91cf *\uff08\u589e\u52a0\u6316\u77ff\u5956\u52b1/\u5269\u4f59\u6316\u77ff\u5956\u52b1+1\uff09\r\n                    uint256 scale = (newTotals[i].add(rewardLeft)).mul(1e18).div(rewardLeft);\r\n                    _newRewardPerBlock = poolRewardInfos[j].rewardPerBlock.mul(scale).div(1e18);\r\n                    //break; \u4e0d\u63d0\u524dbreak\r\n                }\r\n            }\r\n\r\n            if (!vars.existFlag) {\r\n               _newRewardTotal = newTotals[i];\r\n               _newRewardPerBlock = addRewardPerBlocks[i];\r\n            } else if (vars.existEmptyFlag) {\r\n               _newRewardPerBlock = addRewardPerBlocks[i];\r\n            }\r\n\r\n            core.setRewardTotal(poolId, tokens[i], _newRewardTotal);\r\n            core.setRewardPerBlock(poolId, tokens[i], _newRewardPerBlock);\r\n        }\r\n        emit AddRewardThroughAPREvent(poolId, tokens, addRewardTotals, addRewardPerBlocks);\r\n    }\r\n\r\n    /** \r\n    @notice \u901a\u8fc7\u5ef6\u957f\u65f6\u95f4\uff0c\u8bbe\u7f6e\u77ff\u6c60\u603b\u5956\u52b1\uff0c\u540c\u65f6\u8f6c\u5165\u4ee3\u5e01\uff0c\u9700\u8981\u83b7\u53d6\u4e4b\u524d\u5e01\u79cd\u7684\u6570\u91cf\uff0c\u52a0\u4e0a\u589e\u52a0\u6570\u91cf\uff0c\u7136\u540e\u8bbe\u7f6e\u65b0\u7684Totals\r\n    @param poolId uint256, \u77ff\u6c60ID\r\n    @param tokens address[] \u5956\u52b1\u5e01\u79cd\r\n    @param addRewardTotals uint256[] \u6316\u77ff\u603b\u5956\u52b1\r\n    */\r\n    function addRewardThroughTime(uint256 poolId, address[] memory tokens, uint256[] memory addRewardTotals) external override onlyOperater {\r\n        require((0 < tokens.length) && (10 >= tokens.length) && (tokens.length == addRewardTotals.length), \"YouSwap:PARAMETER_ERROR_REWARD\");\r\n        core.checkPIDValidation(poolId);\r\n        core.refresh(poolId);\r\n        PoolStakeInfo memory poolStakeInfo = core.getPoolStakeInfo(poolId);\r\n        require(0 == poolStakeInfo.endBlock, \"YouSwapCore:POOL_END_OF_MINING\");\r\n\r\n        BaseStruct.PoolRewardInfo[] memory poolRewardInfos = core.getPoolRewardInfo(poolId);\r\n        uint256 _newRewardTotal;\r\n        uint256 _balance;\r\n        bool _existFlag;\r\n\r\n        uint256[] memory newTotals = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            require(ZERO != tokens[i], \"YouSwap:INVALID_TOKEN_ADDRESS\");\r\n            require(addRewardTotals[i] > 0, \"YouSwap:ADD_REWARD_AMOUNT_SHOULD_GT_ZERO\");\r\n            _newRewardTotal = 0;\r\n            _existFlag = false;\r\n            _balance = IERC20(tokens[i]).balanceOf(address(core));\r\n            newTotals[i] = addRewardTotals[i];\r\n\r\n            uint256 benefitAmount = addRewardTotals[i].mul(benefitRate).div(DefaultSettings.TEN_THOUSAND);\r\n            if (!whiteList[msg.sender]) {\r\n                if (benefitAmount > 0) {\r\n                    IERC20(tokens[i]).safeTransferFrom(msg.sender, address(platform), benefitAmount);\r\n                    newTotals[i] = addRewardTotals[i].sub(benefitAmount);\r\n                }\r\n            }\r\n            if (newTotals[i] > 0) {\r\n                IERC20(tokens[i]).safeTransferFrom(msg.sender, address(core), newTotals[i]);\r\n            }\r\n\r\n            newTotals[i] = IERC20(tokens[i]).balanceOf(address(core)).sub(_balance);\r\n            for (uint256 j = 0; j < poolRewardInfos.length; j++) {\r\n                if (tokens[i] == poolRewardInfos[j].token) {\r\n                    _newRewardTotal = poolRewardInfos[j].rewardTotal.add(newTotals[i]);\r\n                    _existFlag = true;\r\n                    //break; \u4e0d\u63d0\u524dbreak\r\n                }\r\n            }\r\n\r\n            require(_existFlag, \"YouSwap:REWARD_TOKEN_NOT_EXIST\");\r\n            core.setRewardTotal(poolId, tokens[i], _newRewardTotal);\r\n        }\r\n        emit AddRewardThroughTimeEvent(poolId, tokens, addRewardTotals);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"addRewardTotals\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"addRewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"AddRewardThroughAPREvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"addRewardTotals\",\"type\":\"uint256[]\"}],\"name\":\"AddRewardThroughTimeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"BenefitRateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"OperateOwnerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"increaseFlag\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardPerBlockEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prePoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"range\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enableInvite\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"poolParams\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardTotals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"addRewardTotals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"addRewardPerBlocks\",\"type\":\"uint256[]\"}],\"name\":\"addRewardThroughAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"addRewardTotals\",\"type\":\"uint256[]\"}],\"name\":\"addRewardThroughTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benefitRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRewardPerBlockIntervalMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRewardPerBlockRateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract IYouSwapFactoryCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardProvide\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseStruct.PoolRewardInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardInfoDetail\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardTotals\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardProvides\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPerShares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolStakeDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enableInvite\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawRewardAllow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invitePendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invitePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePower\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_benefitRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_invite\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastSetRewardPerBlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operateOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingRewardV3\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"invitePendingRewardsRet\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakePendingRewardsRet\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"inviteClaimedRewardsRet\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeClaimedRewardsRet\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIDs\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setBenefitRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setChangeRPBIntervalMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rateMax\",\"type\":\"uint256\"}],\"name\":\"setChangeRPBRateMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setOperateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_super\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"stakeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"powerRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"}],\"name\":\"unStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increaseFlag\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawRewards2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YouSwapFactory", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8f243e186a0508b323fa50f56bcdc6598922870c0bb1fc634cc66211c6ea23df"}