{"SourceCode": "pragma solidity ^0.8.4;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when {approve} or {transferFrom} are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to {approve}. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts with custom message when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(\r\n\t\tuint256 a,\r\n\t\tuint256 b,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address payable) {\r\n\t\treturn payable(msg.sender);\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes memory) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *  - an externally-owned account\r\n\t *  - a contract in construction\r\n\t *  - an address where a contract will be created\r\n\t *  - an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\t\t// for accounts without code, i.e. `keccak256('')`\r\n\t\tbytes32 codehash;\r\n\t\tbytes32 accountHash =\r\n\t\t\t0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly {\r\n\t\t\tcodehash := extcodehash(account)\r\n\t\t}\r\n\t\treturn (codehash != accountHash && codehash != 0x0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(\r\n\t\t\tsuccess,\r\n\t\t\t\"Address: unable to send value, recipient may have reverted\"\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain`call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data)\r\n\t\tinternal\r\n\t\treturns (bytes memory)\r\n\t{\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn\r\n\t\t\tfunctionCallWithValue(\r\n\t\t\t\ttarget,\r\n\t\t\t\tdata,\r\n\t\t\t\tvalue,\r\n\t\t\t\t\"Address: low-level call with value failed\"\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(\r\n\t\t\taddress(this).balance >= value,\r\n\t\t\t\"Address: insufficient balance for call\"\r\n\t\t);\r\n\t\treturn _functionCallWithValue(target, data, value, errorMessage);\r\n\t}\r\n\r\n\tfunction _functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 weiValue,\r\n\t\tstring memory errorMessage\r\n\t) private returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\taddress private _previousOwner;\r\n\tuint256 private _lockTime;\r\n\r\n\tevent OwnershipTransferred(\r\n\t\taddress indexed previousOwner,\r\n\t\taddress indexed newOwner\r\n\t);\r\n\r\n\t/**\r\n\t * @dev Initializes the contract setting the deployer as the initial owner.\r\n\t */\r\n\tconstructor() {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the address of the current owner.\r\n\t */\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Throws if called by any account other than the owner.\r\n\t */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Leaves the contract without owner. It will not be possible to call\r\n\t * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\t *\r\n\t * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\t * thereby removing any functionality that is only available to the owner.\r\n\t */\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\t * Can only be called by the current owner.\r\n\t */\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n\r\n\tfunction geUnlockTime() public view returns (uint256) {\r\n\t\treturn _lockTime;\r\n\t}\r\n\r\n\t//Locks the contract for owner for the amount of time provided\r\n\tfunction lock(uint256 time) public virtual onlyOwner {\r\n\t\t_previousOwner = _owner;\r\n\t\t_owner = address(0);\r\n\t\t_lockTime = block.timestamp + time;\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t}\r\n\r\n\t//Unlocks the contract for owner when _lockTime is exceeds\r\n\tfunction unlock() public virtual {\r\n\t\trequire(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n\t\trequire(block.timestamp > _lockTime, \"Contract is locked until 7 days\");\r\n\t\temit OwnershipTransferred(_owner, _previousOwner);\r\n\t\t_owner = _previousOwner;\r\n\t}\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(\r\n\t\taddress indexed token0,\r\n\t\taddress indexed token1,\r\n\t\taddress pair,\r\n\t\tuint256\r\n\t);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\r\n\tfunction feeToSetter() external view returns (address);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (address pair);\r\n\r\n\tfunction allPairs(uint256) external view returns (address pair);\r\n\r\n\tfunction allPairsLength() external view returns (uint256);\r\n\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\t\texternal\r\n\t\treturns (address pair);\r\n\r\n\tfunction setFeeTo(address) external;\r\n\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction name() external pure returns (string memory);\r\n\r\n\tfunction symbol() external pure returns (string memory);\r\n\r\n\tfunction decimals() external pure returns (uint8);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address owner) external view returns (uint256);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns (bool);\r\n\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 value\r\n\t) external returns (bool);\r\n\r\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n\tfunction nonces(address owner) external view returns (uint256);\r\n\r\n\tfunction permit(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 value,\r\n\t\tuint256 deadline,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external;\r\n\r\n\tevent Burn(\r\n\t\taddress indexed sender,\r\n\t\tuint256 amount0,\r\n\t\tuint256 amount1,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Swap(\r\n\t\taddress indexed sender,\r\n\t\tuint256 amount0In,\r\n\t\tuint256 amount1In,\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress indexed to\r\n\t);\r\n\tevent Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n\tfunction factory() external view returns (address);\r\n\r\n\tfunction token0() external view returns (address);\r\n\r\n\tfunction token1() external view returns (address);\r\n\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint112 reserve0,\r\n\t\t\tuint112 reserve1,\r\n\t\t\tuint32 blockTimestampLast\r\n\t\t);\r\n\r\n\tfunction price0CumulativeLast() external view returns (uint256);\r\n\r\n\tfunction price1CumulativeLast() external view returns (uint256);\r\n\r\n\tfunction kLast() external view returns (uint256);\r\n\r\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n\tfunction swap(\r\n\t\tuint256 amount0Out,\r\n\t\tuint256 amount1Out,\r\n\t\taddress to,\r\n\t\tbytes calldata data\r\n\t) external;\r\n\r\n\tfunction skim(address to) external;\r\n\r\n\tfunction sync() external;\r\n\r\n\tfunction initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 amountADesired,\r\n\t\tuint256 amountBDesired,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\tuint256 amountA,\r\n\t\t\tuint256 amountB,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\t\texternal\r\n\t\tpayable\r\n\t\treturns (\r\n\t\t\tuint256 amountToken,\r\n\t\t\tuint256 amountETH,\r\n\t\t\tuint256 liquidity\r\n\t\t);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountAMin,\r\n\t\tuint256 amountBMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountA, uint256 amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to, \r\n\t\tuint256 deadline\r\n\t) external returns (uint256[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint256 amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256[] memory amounts);\r\n\r\n\tfunction quote(\r\n\t\tuint256 amountA,\r\n\t\tuint256 reserveA,\r\n\t\tuint256 reserveB\r\n\t) external pure returns (uint256 amountB);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountOut);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint256 amountOut,\r\n\t\tuint256 reserveIn,\r\n\t\tuint256 reserveOut\r\n\t) external pure returns (uint256 amountIn);\r\n\r\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256[] memory amounts);\r\n\r\n\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external returns (uint256 amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint256 liquidity,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint256 amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\ncontract MOM is Context, IERC20, Ownable {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tmapping(address => uint256) private _rOwned;\r\n\tmapping(address => uint256) private _tOwned;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tmapping(address => bool) private _isExcludedFromFee;\r\n\r\n\tmapping(address => bool) private _isExcluded;\r\n\taddress[] private _excluded;\r\n\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\tuint256 private _tTotal = 1000000 * 10**6 * 10**9;\r\n\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\tuint256 private _tFeeTotal;\r\n\r\n\tstring private _name = \"MOM\";\r\n\tstring private _symbol = \"MOM\";\r\n\tuint8 private _decimals = 9;\r\n\r\n\tuint256 public _taxFee = 1;\r\n\tuint256 private _prreviousTaxFee = _taxFee;\r\n\r\n\tuint256 public _liquidityFee = 9;\r\n\tuint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n\tIUniswapV2Router02 public immutable uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n\tbool inSwapAndLiquify;\r\n\tbool public swapAndLiquifyEnabled = true;\r\n\r\n\tuint256 public _maxTxAmount = 1000000 * 10**6 * 10**9;\r\n\tuint256 private numTokensSellToAddToLiquidity = 5000 * 10**6 * 10**9;\r\n\r\n\tevent MinimumTokensBeforeSwapUpdated(uint256 minimumTokensBeforeSwap);\r\n\tevent SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\tevent SwapAndLiquify(\r\n\t\tuint256 tokensSwapped,\r\n\t\tuint256 ethReceived,\r\n\t\tuint256 tokensIntoLiqudity\r\n\t);\r\n\r\n\tmodifier lockTheSwap {\r\n\t\tinSwapAndLiquify = true;\r\n\t\t_;\r\n\t\tinSwapAndLiquify = false;\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\t_rOwned[_msgSender()] = _rTotal;\r\n\r\n\t\tIUniswapV2Router02 _uniswapV2Router =\r\n\t\t\tIUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\t// Create a uniswap pair for this new token\r\n\t\tuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n\t\t\taddress(this),\r\n\t\t\t_uniswapV2Router.WETH()\r\n\t\t);\r\n\r\n\t\t// set the rest of the contract variables\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\r\n\t\t//exclude owner and this contract from fee\r\n\t\t_isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\r\n\t\temit Transfer(address(0), _msgSender(), _tTotal);\r\n\t}\r\n\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\tif (_isExcluded[account]) return _tOwned[account];\r\n\t\treturn tokenFromReflection(_rOwned[account]);\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\t\tpublic\r\n\t\toverride\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\t\tpublic\r\n\t\tview\r\n\t\toverride\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount)\r\n\t\tpublic\r\n\t\toverride\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(\r\n\t\t\tsender,\r\n\t\t\t_msgSender(),\r\n\t\t\t_allowances[sender][_msgSender()].sub(\r\n\t\t\t\tamount,\r\n\t\t\t\t\"ERC20: transfer amount exceeds allowance\"\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue)\r\n\t\tpublic\r\n\t\tvirtual\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_approve(\r\n\t\t\t_msgSender(),\r\n\t\t\tspender,\r\n\t\t\t_allowances[_msgSender()][spender].add(addedValue)\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue)\r\n\t\tpublic\r\n\t\tvirtual\r\n\t\treturns (bool)\r\n\t{\r\n\t\t_approve(\r\n\t\t\t_msgSender(),\r\n\t\t\tspender,\r\n\t\t\t_allowances[_msgSender()][spender].sub(\r\n\t\t\t\tsubtractedValue,\r\n\t\t\t\t\"ERC20: decreased allowance below zero\"\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction isExcludedFromReward(address account) public view returns (bool) {\r\n\t\treturn _isExcluded[account];\r\n\t}\r\n\r\n\tfunction totalFees() public view returns (uint256) {\r\n\t\treturn _tFeeTotal;\r\n\t}\r\n\r\n\tfunction deliver(uint256 tAmount) public {\r\n\t\taddress sender = _msgSender();\r\n\t\trequire(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n\t\t(uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rTotal = _rTotal.sub(rAmount);\r\n\t\t_tFeeTotal = _tFeeTotal.add(tAmount);\r\n\t}\r\n\r\n\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\trequire(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n\t\tif (!deductTransferFee) {\r\n\t\t\t(uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n\t\t\treturn rAmount;\r\n\t\t} else {\r\n\t\t\t(, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\r\n\t\t\treturn rTransferAmount;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n\t\trequire(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n\t\tuint256 currentRate = _getRate();\r\n\t\treturn rAmount.div(currentRate);\r\n\t}\r\n\r\n\tfunction excludeFromReward(address account) public onlyOwner() {\r\n\t\t// require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n\t\trequire(!_isExcluded[account], \"Account is already excluded\");\r\n\t\tif (_rOwned[account] > 0) {\r\n\t\t\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\t\t}\r\n\t\t_isExcluded[account] = true;\r\n\t\t_excluded.push(account);\r\n\t}\r\n\r\n\tfunction includeInReward(address account) external onlyOwner() {\r\n\t\trequire(_isExcluded[account], \"Account is already excluded\");\r\n\t\tfor (uint256 i = 0; i < _excluded.length; i++) {\r\n\t\t\tif (_excluded[i] == account) {\r\n\t\t\t\t_excluded[i] = _excluded[_excluded.length - 1];\r\n\t\t\t\t_tOwned[account] = 0;\r\n\t\t\t\t_isExcluded[account] = false;\r\n\t\t\t\t_excluded.pop();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _transferBothExcluded(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount\r\n\t) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 rFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 tFee,\r\n\t\t\tuint256 tLiquidity\r\n\t\t) = _getValues(tAmount);\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction excludeFromFee(address account) public onlyOwner {\r\n\t\t_isExcludedFromFee[account] = true;\r\n\t}\r\n\r\n\tfunction includeInFee(address account) public onlyOwner {\r\n\t\t_isExcludedFromFee[account] = false;\r\n\t}\r\n\r\n\tfunction setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n\t\t_taxFee = taxFee;\r\n\t}\r\n\r\n\tfunction setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n\t\t_liquidityFee = liquidityFee;\r\n\t}\r\n\r\n\tfunction setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n\t\t_maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n\t}\r\n\r\n\tfunction setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n\t\tswapAndLiquifyEnabled = _enabled;\r\n\t\temit SwapAndLiquifyEnabledUpdated(_enabled);\r\n\t}\r\n\r\n\t//to recieve ETH from uniswapV2Router when swaping\r\n\treceive() external payable {}\r\n\r\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\t\t_rTotal = _rTotal.sub(rFee);\r\n\t\t_tFeeTotal = _tFeeTotal.add(tFee);\r\n\t}\r\n\r\n\tfunction _getValues(uint256 tAmount)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\t(uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) =\r\n\t\t\t_getTValues(tAmount);\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n\t\t\t_getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n\t\treturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n\t}\r\n\r\n\tfunction _getTValues(uint256 tAmount)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\tuint256 tFee = calculateTaxFee(tAmount);\r\n\t\tuint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n\t\tuint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n\t\treturn (tTransferAmount, tFee, tLiquidity);\r\n\t}\r\n\r\n\tfunction _getRValues(\r\n\t\tuint256 tAmount,\r\n\t\tuint256 tFee,\r\n\t\tuint256 tLiquidity,\r\n\t\tuint256 currentRate\r\n\t)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (\r\n\t\t\tuint256,\r\n\t\t\tuint256,\r\n\t\t\tuint256\r\n\t\t)\r\n\t{\r\n\t\tuint256 rAmount = tAmount.mul(currentRate);\r\n\t\tuint256 rFee = tFee.mul(currentRate);\r\n\t\tuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\t\tuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n\t\treturn (rAmount, rTransferAmount, rFee);\r\n\t}\r\n\r\n\tfunction _getRate() private view returns (uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply.div(tSupply);\r\n\t}\r\n\r\n\tfunction _getCurrentSupply() private view returns (uint256, uint256) {\r\n\t\tuint256 rSupply = _rTotal;\r\n\t\tuint256 tSupply = _tTotal;\r\n\t\tfor (uint256 i = 0; i < _excluded.length; i++) {\r\n\t\t\tif (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply)\r\n\t\t\t\treturn (_rTotal, _tTotal);\r\n\t\t\trSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n\t\t\ttSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n\t\t}\r\n\t\tif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n\r\n\tfunction _takeLiquidity(uint256 tLiquidity) private {\r\n\t\tuint256 currentRate = _getRate();\r\n\t\tuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\t\t_rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n\t\tif (_isExcluded[address(this)])\r\n\t\t\t_tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n\t}\r\n\r\n\tfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n\t\treturn _amount.mul(_taxFee).div(10**2);\r\n\t}\r\n\r\n\tfunction calculateLiquidityFee(uint256 _amount)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _amount.mul(_liquidityFee).div(10**2);\r\n\t}\r\n\r\n\tfunction removeAllFee() private {\r\n\t\tif (_taxFee == 0 && _liquidityFee == 0) return;\r\n\r\n\t\t_prreviousTaxFee = _taxFee;\r\n       _previousLiquidityFee = _liquidityFee;\r\n\r\n\t\t_taxFee = 0;\r\n\t\t_liquidityFee = 0;\r\n\t}\r\n\r\n\tfunction restoreAllFee() private {\r\n\t\t_taxFee = _prreviousTaxFee;\r\n\t\t_liquidityFee = _previousLiquidityFee;\r\n\t}\r\n\r\n\tfunction isExcludedFromFee(address account) public view returns (bool) {\r\n\t\treturn _isExcludedFromFee[account];\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) private {\r\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\t\tif (from != owner() && to != owner())\r\n\t\t\trequire(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n\t\t// is the token balance of this contract address over the min number of\r\n\t\t// tokens that we need to initiate a swap + liquidity lock?\r\n\t\t// also, don't get caught in a circular liquidity event.\r\n\t\t// also, don't swap & liquify if sender is uniswap pair.\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n\t\tif (contractTokenBalance >= _maxTxAmount) {\r\n\t\t\tcontractTokenBalance = _maxTxAmount;\r\n\t\t}\r\n\r\n\t\tbool overMinimumTokenBalance =\r\n\t\t\tcontractTokenBalance >= numTokensSellToAddToLiquidity;\r\n\t\tif (\r\n\t\t\toverMinimumTokenBalance &&\r\n\t\t\t!inSwapAndLiquify &&\r\n\t\t\tfrom != uniswapV2Pair &&\r\n\t\t\tswapAndLiquifyEnabled\r\n\t\t) {\r\n\t\t\tcontractTokenBalance = numTokensSellToAddToLiquidity;\r\n\t\t\t//add liquidity\r\n\t\t\tswapAndLiquify(contractTokenBalance);\r\n\t\t}\r\n\r\n\t\t//indicates if fee should be deducted from transfer\r\n\t\tbool takeFee = true;\r\n\r\n\t\t//if any account belongs to _isExcludedFromFee account then remove the fee\r\n\t\tif (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\r\n\t\t//transfer amount, it will take tax, burn, liquidity fee\r\n\t\t_tokenTransfer(from, to, amount, takeFee);\r\n\t}\r\n\r\n\tfunction swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n\t\t// split the contract balance into halves\r\n\t\tuint256 half = contractTokenBalance.div(2);\r\n\t\tuint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n\t\t// capture the contract's current ETH balance.\r\n\t\t// this is so that we can capture exactly the amount of ETH that the\r\n\t\t// swap creates, and not make the liquidity event include any ETH that\r\n\t\t// has been manually sent to the contract\r\n\t\tuint256 initialBalance = address(this).balance;\r\n\r\n\t\t// swap tokens for ETH\r\n\t\tswapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n\t\t// how much ETH did we just swap into?\r\n\t\tuint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n\t\t// add liquidity to uniswap\r\n\t\taddLiquidity(otherHalf, newBalance);\r\n\r\n\t\temit SwapAndLiquify(half, newBalance, otherHalf);\r\n\t}\r\n\r\n\tfunction swapTokensForEth(uint256 tokenAmount) private {\r\n\t\t// generate the uniswap pair path of token -> weth\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\t\t// make the swap\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t// approve token transfer to cover all possible scenarios\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\t\t// add the liquidity\r\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\towner(),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\t//this method is responsible for taking all fee, if takeFee is true\r\n\tfunction _tokenTransfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount,\r\n\t\tbool takeFee\r\n\t) private {\r\n\t\tif (!takeFee) removeAllFee();\r\n\r\n\t\tif (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\t\t\t_transferFromExcluded(sender, recipient, amount);\r\n\t\t} else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n\t\t\t_transferToExcluded(sender, recipient, amount);\r\n\t\t} else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n\t\t\t_transferStandard(sender, recipient, amount);\r\n\t\t} else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n\t\t\t_transferBothExcluded(sender, recipient, amount);\r\n\t\t} else {\r\n\t\t\t_transferStandard(sender, recipient, amount);\r\n\t\t}\r\n\r\n\t\tif (!takeFee) restoreAllFee();\r\n\t}\r\n\r\n\tfunction _transferStandard(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount\r\n\t) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 rFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 tFee,\r\n\t\t\tuint256 tLiquidity\r\n\t\t) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferToExcluded(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount\r\n\t) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 rFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 tFee,\r\n\t\t\tuint256 tLiquidity\r\n\t\t) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferFromExcluded(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount\r\n\t) private {\r\n\t\t(\r\n\t\t\tuint256 rAmount,\r\n\t\t\tuint256 rTransferAmount,\r\n\t\t\tuint256 rFee,\r\n\t\t\tuint256 tTransferAmount,\r\n\t\t\tuint256 tFee,\r\n\t\t\tuint256 tLiquidity\r\n\t\t) = _getValues(tAmount);\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinimumTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MOM", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5d15c827dbf01d414e025f844a23f7b104c3fe73848b130e0ee83a0cd8de181"}