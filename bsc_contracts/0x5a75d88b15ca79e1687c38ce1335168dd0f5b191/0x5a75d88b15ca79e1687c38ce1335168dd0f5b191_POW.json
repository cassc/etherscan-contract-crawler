{"SourceCode": "pragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender , \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract POW is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) public _rOwned;\r\n    mapping(address => uint256) public _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) public _updated;\r\n    mapping(address => bool) public _updatedStaker;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 private _tTotalMaxDestroy;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    uint256 public period = 6 hours;\r\n    uint256 public harvestLock = 30*24 hours;\r\n    uint256 public curentTime;\r\n    uint256 public startTime;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    uint256 public totalShares;\r\n    uint256 public totalRelease;\r\n    bool public swapStats;\r\n    bool public swapAndLiquify;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n    address[] public shareholders;\r\n    address[] public stakers;\r\n    mapping (address => uint256) public stakerIndexes;\r\n    uint256 currentIndex;\r\n    uint256 stakerIndex;\r\n    uint256 public _liquidityFee = 20;\r\n    uint256 public _inviterFee = 10;\r\n    uint256 public _destroyFee = 10;\r\n    address private _destroyAddress =\r\n    address(0x000000000000000000000000000000000000dEaD);\r\n    uint256 public constant PRECISION_FACTOR = 10**18;\r\n    mapping(address => address) public inviter;\r\n    address public uniswapV2Pair;\r\n    address public harvestAddress;\r\n    address public inviterAddress = address(0xC0eD48Fd5C95eF9FDf399aBB5ae61945adf7Dd81);\r\n    address public socialAddress = address(0xb1681e98fF8788ED4de43b5755865041453268DE);\r\n    address public techAddress = address(0xebEc6cEb67f4316f90eAb0b896E5bB235cE0f6A2);\r\n    address public fundAddress = address(0x2fE3443DCD2FcA99f8850314e781d04B7bAea855);\r\n    address public fenHongAddress;\r\n    uint256 public LPFeefenhong;\r\n    address public wkgToken;\r\n    uint256 public FHTotal;\r\n    uint256 public _fund1Fee = 20;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    struct UserInfo {\r\n        uint256 shares;\r\n    }\r\n    mapping(address => UserInfo) public userInfo;\r\n    constructor(address _wkgToken,address _fenHongAddress) {\r\n        _name = \"POWER PLANET\";\r\n        _symbol = \"POW\";\r\n        _decimals = 18;\r\n        FHTotal = 20;\r\n        wkgToken = _wkgToken;\r\n        curentTime = block.timestamp;\r\n        startTime = block.timestamp;\r\n        fenHongAddress = _fenHongAddress;\r\n        _tTotal = 10008 * 10**_decimals;\r\n        uint256 leftAmount = 1 * 10**_decimals;\r\n        _tTotalMaxDestroy = _tTotal.sub(leftAmount);\r\n        _rTotal = 10008 * 10**_decimals;\r\n        _rOwned[address(this)] = _rTotal.div(1000).mul(900);\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _owner = msg.sender;\r\n        _rOwned[socialAddress] = _rTotal.div(1000).mul(50);\r\n        _rOwned[techAddress] = _rTotal.div(1000).mul(30);\r\n        _rOwned[fundAddress] = _rTotal.div(1000).mul(20);\r\n\r\n        emit Transfer(address(0), address(this), _rTotal.div(1000).mul(900));\r\n        emit Transfer(address(0), socialAddress, _rTotal.div(1000).mul(50));\r\n        emit Transfer(address(0), techAddress, _rTotal.div(1000).mul(30));\r\n        emit Transfer(address(0), fundAddress, _rTotal.div(1000).mul(20));\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function changeSwapStats() public onlyOwner {\r\n        swapStats = !swapStats;\r\n    }\r\n    function openSwapAndLiquify() public onlyOwner {\r\n        swapAndLiquify = true;\r\n    }\r\n\r\n    //to recieve BNB from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function deposit(uint256 amount) public  {\r\n        require(amount > 0, \"Deposit: Amount must be > 0\");\r\n        IERC20(wkgToken).transferFrom(msg.sender, address(this), amount);\r\n        userInfo[msg.sender].shares += amount;\r\n        setStaker(msg.sender);\r\n        totalShares += amount;\r\n    }\r\n\r\n    function withdraw(uint256 amount) public  {\r\n        require(\r\n            (amount > 0) && (amount <= userInfo[msg.sender].shares),\r\n            \"Withdraw: Shares equal to 0 or larger than user shares\"\r\n        );\r\n        IERC20(wkgToken).transfer(msg.sender, amount);\r\n        userInfo[msg.sender].shares -= amount;\r\n        setStaker(msg.sender);\r\n        totalShares -= amount;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (from == harvestAddress) {\r\n            _rOwned[address(this)] = _rOwned[address(this)].sub(amount);\r\n            _rOwned[to] = _rOwned[to].add(amount);\r\n            emit Transfer(address(this), to, amount);\r\n            return;\r\n        }\r\n        bool takeFee = true;\r\n        uint256 rate = _destroyFee + _inviterFee + _fund1Fee + _liquidityFee;\r\n        uint256 _destroyAmount = balanceOf(_destroyAddress);\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to] || _destroyAmount >= _tTotalMaxDestroy) {\r\n            takeFee = false;\r\n            rate=0;\r\n        }\r\n        uint256 recipientRate = 1000 - rate;\r\n        bool shouldSetInviter = balanceOf(to) == 0 &&\r\n            inviter[to] == address(0) &&\r\n            from != uniswapV2Pair;\r\n\r\n        _rOwned[from] = _rOwned[from].sub(amount);\r\n        _rOwned[to] = _rOwned[to].add(amount.div(1000).mul(recipientRate));\r\n        emit Transfer(from, to, amount.div(1000).mul(recipientRate));\r\n\r\n        if (takeFee) {\r\n            _takeBurn(from, amount.div(1000).mul(_destroyFee));\r\n            _takeInviter(from, amount.div(1000).mul(_inviterFee));\r\n            _taketofh(from, amount.div(1000).mul(_fund1Fee));\r\n            if(from == uniswapV2Pair){\r\n                _rOwned[uniswapV2Pair] = _rOwned[uniswapV2Pair].add(amount.div(1000).mul(20));\r\n                emit Transfer(from, uniswapV2Pair, amount.div(1000).mul(20));\r\n            }else{\r\n                _rOwned[uniswapV2Pair] = _rOwned[uniswapV2Pair].add(amount.div(1000).mul(10));\r\n                emit Transfer(from, uniswapV2Pair, amount.div(1000).mul(10));\r\n                _takeInviterFee(from, to, amount);\r\n            }\r\n            if (shouldSetInviter) {inviter[to] = from;}\r\n            if(from != uniswapV2Pair ) setShare(from);\r\n            if(to != uniswapV2Pair ) setShare(to);\r\n        \r\n            uint256 fenhongTotal = _rOwned[fenHongAddress];\r\n            if(fenhongTotal >= FHTotal * 10**18) {\r\n                 process(fenHongAddress,fenhongTotal) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _takeBurn(address sender,uint256 tBurn) private {\r\n        _rOwned[_destroyAddress] = _rOwned[_destroyAddress].add(tBurn);\r\n        emit Transfer(sender, _destroyAddress, tBurn);\r\n    }\r\n    function _takeInviter(address sender,uint256 tBurn) private {\r\n        _rOwned[inviterAddress] = _rOwned[inviterAddress].add(tBurn);\r\n        emit Transfer(sender, inviterAddress, tBurn);\r\n    }\r\n    function _taketofh(address sender,uint256 tBurn) private {\r\n        _rOwned[fenHongAddress] = _rOwned[fenHongAddress].add(tBurn);\r\n        emit Transfer(sender, fenHongAddress, tBurn);\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender, address recipient, uint256 tAmount\r\n    ) private {\r\n        address cur = sender;\r\n        if (sender == uniswapV2Pair) {\r\n            cur = recipient;\r\n        } \r\n        uint8[2] memory inviteRate = [8, 2];\r\n        for (uint8 i = 0; i < inviteRate.length; i++) {\r\n            uint8 rate = inviteRate[i];\r\n            cur = inviter[cur];\r\n            if (cur == address(0)) {\r\n                cur = _destroyAddress;\r\n            }\r\n            uint256 curTAmount = tAmount.mul(rate).div(1000);\r\n            _rOwned[cur] = _rOwned[cur].add(curTAmount);\r\n            emit Transfer(sender, cur, curTAmount);\r\n        }\r\n    }\r\n\r\n     function process(address from,uint256 fengHongAmount) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0)return;\r\n        uint256 nowbanance = fengHongAmount;\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n          uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\r\n          if(amount>0){\r\n              distributeDividend(from,shareholders[currentIndex],amount);\r\n          }\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    function distributeDividend(address from ,address shareholder ,uint256 amount) internal {\r\n            \r\n            _rOwned[from] = _rOwned[from].sub(amount);\r\n            _rOwned[shareholder] = _rOwned[shareholder].add(amount);\r\n             emit Transfer(from, shareholder, amount);\r\n    }\r\n    function setShare(address shareholder) internal {\r\n           if(_updated[shareholder]){   \r\n               if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);           \r\n                return;  \r\n           } \r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;\r\n          \r\n      }\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n    function quitShare(address shareholder) private {\r\n           removeShareholder(shareholder);   \r\n           _updated[shareholder] = false; \r\n      }\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function setStaker(address staker) private {\r\n           if(_updatedStaker[staker] ){      \r\n                if(userInfo[staker].shares == 0) quitStaker(staker);              \r\n                return;  \r\n           }  \r\n            addStaker(staker);\r\n            _updatedStaker[staker] = true;\r\n      }\r\n    function addStaker(address staker) internal {\r\n        stakerIndexes[staker] = stakers.length;\r\n        stakers.push(staker);\r\n    }\r\n    function quitStaker(address staker) private {\r\n           removeStaker(staker);   \r\n           _updatedStaker[staker] = false; \r\n      }\r\n    function removeStaker(address staker) internal {\r\n        stakers[stakerIndexes[staker]] = stakers[stakers.length-1];\r\n        stakerIndexes[stakers[stakers.length-1]] = stakerIndexes[staker];\r\n        stakers.pop();\r\n    }\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n    function changeRouter(address router) public onlyOwner {\r\n        uniswapV2Pair = router;\r\n    }\r\n    function changeharvestAddress(address haddress) public onlyOwner {\r\n        harvestAddress = haddress;\r\n    }\r\n    function changeFHTotal(uint256 fhTotal) public onlyOwner {\r\n        FHTotal = fhTotal;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wkgToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fenHongAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FHTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPFeefenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fund1Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_updated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_updatedStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fhTotal\",\"type\":\"uint256\"}],\"name\":\"changeFHTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeSwapStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"haddress\",\"type\":\"address\"}],\"name\":\"changeharvestAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fenHongAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"socialAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakerIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStats\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"techAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wkgToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "POW", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d5423c90505547e855cdccb6746a12510319101c0000000000000000000000009623a1beceacea050f9a0137f7dcbf40d74f92a7", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8b83fe103291dc23de27577ed7c16a07003d001a1bb34e1990ee729b7e8f3b82"}