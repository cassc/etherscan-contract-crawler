{"SourceCode": "{\"migrationSingleToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^ 0.8.17;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n//Interface for interacting with erc20\\ninterface IERC20 {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function decimals() external returns (uint256);\\n}\\n\\ncontract SingleTokenMigrate is Ownable {\\n\\n    address constant OLD_CELL_TOKEN = 0xf3E1449DDB6b218dA2C9463D4594CEccC8934346;\\n    address constant  CELL_ERC20_V2 = 0xd98438889Ae7364c7E2A3540547Fad042FB24642;\\n    address addrMigrate = 0xC3b8A652e59d59A71b00808c1FB2432857080Ab8;\\n\\n\\n    mapping (address =\\u003e uint) private migrationUserBalance;\\n    mapping (address =\\u003e uint) public migrationBlock;\\n    mapping (address =\\u003e bool) private blocked;\\n\\n    address[] private nodes;\\n\\n    uint8 private minCountBlock = 4;\\n\\n    modifier onlyNodes() {\\n        bool confirmation;\\n        for (uint8 i = 0; i \\u003c nodes.length; i++){\\n            if(nodes[i] == msg.sender){\\n                confirmation = true;\\n                break;\\n            }\\n        }\\n\\n        require(confirmation ,\\\"You are not on the list of nodes\\\");\\n        _;\\n\\n    }\\n\\n    event migration(\\n        address sender,\\n        uint amount,\\n        uint blocknum\\n    );\\n\\n\\n    function migrateToken(uint amount) external {\\n\\n        migrationUserBalance[msg.sender] += amount;\\n        migrationBlock[msg.sender] = block.number + minCountBlock;\\n\\n        IERC20(OLD_CELL_TOKEN).transferFrom(\\n            msg.sender,\\n            addrMigrate,\\n            amount\\n            );\\n\\n        emit migration(msg.sender, amount, block.number);\\n\\n    }\\n\\n    function claimToken() external {\\n        require(\\n            migrationBlock[msg.sender] \\u003c= block.number,\\n            \\\"Wait next block\\\"\\n            );\\n        require(!blocked[msg.sender],\\\"Your blocked\\\");\\n        require(\\n            migrationUserBalance[msg.sender] \\u003e 0,\\n            \\\"Your need balance\\\");\\n\\n        IERC20(CELL_ERC20_V2).transfer(\\n            msg.sender,\\n            migrationUserBalance[msg.sender]\\n            );\\n\\n        delete migrationUserBalance[msg.sender];\\n\\n    }\\n\\n\\n    function addNode(address newBridgeNode) external onlyOwner{\\n        require(newBridgeNode != address(0),\\\"Error address 0\\\");\\n\\n        nodes.push(newBridgeNode);\\n\\n    }\\n\\n    function delNode (uint index) external onlyOwner {\\n        require(\\n            index \\u003c= nodes.length,\\n            \\\"Node index cannot be higher than their number\\\"\\n            ); // index must be less than or equal to array length\\n\\n        for (uint i = index; i \\u003c nodes.length-1; i++){\\n            nodes[i] = nodes[i+1];\\n\\n        }\\n\\n        delete nodes[nodes.length-1];\\n        nodes.pop();\\n\\n    }\\n\\n    function blockUser (address user) external onlyNodes{\\n        blocked[user] = true;\\n\\n    }\\n\\n    function withdrawal(uint amount) external onlyOwner{\\n        IERC20(CELL_ERC20_V2).transfer(msg.sender,amount);\\n\\n    }\\n\\n\\n    function newMigrateAddress(address newMigrateaddr) external onlyOwner{\\n        require(newMigrateaddr != address(0),\\\"Error zero address\\\");\\n\\n        addrMigrate = newMigrateaddr;\\n\\n    }\\n\\n    function unBlocked(address sender) external onlyOwner{\\n        require(blocked[sender], \\\"Sender not blocked\\\");\\n\\n        blocked[sender] = false;\\n\\n    }\\n\\n    function delBalance(address sender) external onlyOwner{\\n        require(blocked[sender], \\\"Sender not blocked\\\");\\n        delete migrationUserBalance[sender];\\n    }\\n\\n    function changeMinCountBlock(uint8 _minCountBlock) external onlyOwner{\\n        minCountBlock = _minCountBlock;\\n\\n    }\\n\\n\\n    function balanceMigrate(address sender) public view returns (uint) {\\n        return migrationUserBalance[sender];\\n\\n    }\\n\\n    function seeBridgeNode() public view returns(address[] memory){\\n        return nodes;\\n\\n    }\\n\\n\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocknum\",\"type\":\"uint256\"}],\"name\":\"migration\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBridgeNode\",\"type\":\"address\"}],\"name\":\"addNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"balanceMigrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blockUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_minCountBlock\",\"type\":\"uint8\"}],\"name\":\"changeMinCountBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"delBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"delNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMigrateaddr\",\"type\":\"address\"}],\"name\":\"newMigrateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeBridgeNode\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"unBlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SingleTokenMigrate", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd910b33bbfc8a179942c439b8f8c919a30edca6116c276ae6570906ea3dcab9"}