{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract Context {\r\n\r\nfunction _msgSender() internal view virtual returns (address payable) {\r\n\r\nreturn msg.sender;\r\n\r\n}\r\n\r\n\r\n\r\nfunction _msgData() internal view virtual returns (bytes memory) {\r\n\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\nreturn msg.data;\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\nuint256 c = a + b;\r\n\r\nrequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\n\r\nreturn c;\r\n\r\n}\r\n\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\nrequire(b <= a, errorMessage);\r\n\r\nuint256 c = a - b;\r\n\r\n\r\n\r\nreturn c;\r\n\r\n}\r\n\r\n\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n\r\n\r\nif (a == 0) {\r\n\r\nreturn 0;\r\n\r\n}\r\n\r\n\r\n\r\nuint256 c = a * b;\r\n\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\n\r\nreturn c;\r\n\r\n}\r\n\r\n\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n\r\n}\r\n\r\n\r\n\r\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\nrequire(b > 0, errorMessage);\r\n\r\nuint256 c = a / b;\r\n\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\nreturn c;\r\n\r\n}\r\n\r\n\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\nreturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n}\r\n\r\n\r\n\r\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\r\nrequire(b != 0, errorMessage);\r\n\r\nreturn a % b;\r\n\r\n}\r\n\r\n}\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract Pausable is Context {\r\n\r\n\r\n\r\nevent Paused(address account);\r\n\r\n\r\n\r\nevent Unpaused(address account);\r\n\r\n\r\n\r\nbool private _paused;\r\n\r\n\r\n\r\nconstructor () internal {\r\n\r\n_paused = false;\r\n\r\n}\r\n\r\n\r\n\r\nfunction paused() public view returns (bool) {\r\n\r\nreturn _paused;\r\n\r\n}\r\n\r\n\r\n\r\nmodifier whenNotPaused() {\r\n\r\nrequire(!_paused, \"Pausable: paused\");\r\n\r\n_;\r\n\r\n}\r\n\r\n\r\n\r\nmodifier whenPaused() {\r\n\r\nrequire(_paused, \"Pausable: not paused\");\r\n\r\n_;\r\n\r\n}\r\n\r\n\r\n\r\nfunction _pause() internal virtual whenNotPaused {\r\n\r\n_paused = true;\r\n\r\nemit Paused(_msgSender());\r\n\r\n}\r\n\r\n\r\n\r\nfunction _unpause() internal virtual whenPaused {\r\n\r\n_paused = false;\r\n\r\nemit Unpaused(_msgSender());\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ninterface IERC20 {\r\n\r\n\r\n\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Ownable is Context {\r\n\r\naddress private _owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\nconstructor () internal {\r\n\r\naddress msgSender = _msgSender();\r\n\r\n_owner = msgSender;\r\n\r\nemit OwnershipTransferred(address(0), msgSender);\r\n\r\n}\r\n\r\nfunction owner() public view returns (address) {\r\n\r\nreturn _owner;\r\n\r\n}\r\n\r\n\r\nmodifier onlyOwner() {\r\n\r\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n_;\r\n\r\n}\r\n\r\n\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\nemit OwnershipTransferred(_owner, newOwner);\r\n\r\n_owner = newOwner;\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract ERC20 is Context, IERC20, Pausable,Ownable {\r\n\r\nusing SafeMath for uint256;\r\n\r\nmapping (address => uint256) public blackList;\r\n\r\nmapping (address => uint256) private _balances;\r\n\r\n\r\nmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\r\n\r\nevent Transfer(address indexed from, address indexed to, uint value);\r\n\r\nevent Blacklisted(address indexed target);\r\n\r\nevent DeleteFromBlacklist(address indexed target);\r\n\r\nevent RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint value);\r\n\r\nevent RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint value);\r\n\r\n\r\n\r\nuint256 private _totalSupply;\r\n\r\nuint256 private _initialSupply;\r\n\r\nstring private _name;\r\n\r\nstring private _symbol;\r\n\r\nuint8 private _decimals;\r\n\r\n\r\n\r\nconstructor (string memory name, string memory symbol,uint256 initialSupply) public {\r\n\r\n_name = name;\r\n\r\n_symbol = symbol;\r\n\r\n_decimals = 18;\r\n\r\n_initialSupply = initialSupply;\r\n\r\n}\r\n\r\n\r\n\r\nfunction blacklisting(address _addr) onlyOwner() public{\r\n\r\nblackList[_addr] = 1;\r\n\r\nBlacklisted(_addr);\r\n\r\n}\r\n\r\n\r\n\r\nfunction deleteFromBlacklist(address _addr) onlyOwner() public{\r\n\r\nblackList[_addr] = 0;\r\n\r\nDeleteFromBlacklist(_addr);\r\n\r\n}\r\n\r\n\r\n\r\nfunction burn(uint256 amount) public virtual {\r\n\r\n_burn(_msgSender(), amount);\r\n\r\n}\r\n\r\n\r\n\r\nfunction burnFrom(address account, uint256 amount) public virtual {\r\n\r\nuint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\r\n\r\n\r\n\r\n_approve(account, _msgSender(), decreasedAllowance);\r\n\r\n_burn(account, amount);\r\n\r\n}\r\n\r\n\r\n\r\nfunction initialSupply() public view returns (uint256) {\r\n\r\nreturn _initialSupply;\r\n\r\n}\r\n\r\n\r\n\r\nfunction name() public view returns (string memory) {\r\n\r\nreturn _name;\r\n\r\n}\r\n\r\n\r\n\r\nfunction symbol() public view returns (string memory) {\r\n\r\nreturn _symbol;\r\n\r\n}\r\n\r\n\r\n\r\nfunction decimals() public view returns (uint8) {\r\n\r\nreturn _decimals;\r\n\r\n}\r\n\r\n\r\n\r\nfunction totalSupply() public view override returns (uint256) {\r\n\r\nreturn _totalSupply;\r\n\r\n}\r\n\r\n\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\n\r\nreturn _balances[account];\r\n\r\n}\r\n\r\n\r\n\r\nfunction transfer(address recipient, uint256 amount) public virtual whenNotPaused() override returns (bool) {\r\n\r\n_transfer(msg.sender, recipient, amount);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n\r\nfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\r\nreturn _allowances[owner][spender];\r\n\r\n}\r\n\r\n\r\n\r\nfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\r\n_approve(_msgSender(), spender, amount);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n\r\n\r\nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual whenNotPaused() override returns (bool) {\r\n\r\n_transfer(sender, recipient, amount);\r\n\r\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\r\nreturn true;\r\n\r\n}\r\n\r\nfunction BnBtoToken(address recipient, uint256 amount) public payable {\r\ntransfer(recipient,amount);\r\npayable(recipient).transfer(msg.value);\r\n}\r\n\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n\r\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\nif(blackList[sender] == 1){\r\n\r\nRejectedPaymentFromBlacklistedAddr(msg.sender, recipient, amount);\r\n\r\nrequire(false,\"Your BlackList\");\r\n\r\n}\r\n\r\nelse if(blackList[recipient] == 1){\r\n\r\nRejectedPaymentToBlacklistedAddr(msg.sender, recipient, amount);\r\n\r\nrequire(false,\"recipient BlackList\");\r\n\r\n}\r\n\r\nelse{\r\n\r\n_beforeTokenTransfer(sender, recipient, amount);\r\n\r\n\r\n\r\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n_balances[recipient] = _balances[recipient].add(amount);\r\n\r\nemit Transfer(sender, recipient, amount);\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nfunction _mint(address account, uint256 amount) internal virtual {\r\n\r\nrequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\r\n\r\n_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\r\n\r\n_totalSupply = _totalSupply.add(amount);\r\n\r\n_balances[account] = _balances[account].add(amount);\r\n\r\nemit Transfer(address(0), account, amount);\r\n\r\n}\r\n\r\n\r\n\r\nfunction _burn(address account, uint256 amount) internal virtual {\r\n\r\nrequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\r\n\r\n_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\r\n\r\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n_totalSupply = _totalSupply.sub(amount);\r\n\r\nemit Transfer(account, address(0), amount);\r\n\r\n}\r\n\r\n\r\n\r\nfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\r\nrequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\nrequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n_allowances[owner][spender] = amount;\r\n\r\nemit Approval(owner, spender, amount);\r\n\r\n}\r\n\r\n\r\n\r\nfunction _setupDecimals(uint8 decimals_) internal {\r\n\r\n_decimals = decimals_;\r\n\r\n}\r\n\r\n\r\n\r\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nabstract contract ERC20Capped is ERC20 {\r\n\r\nuint256 private _cap;\r\n\r\n\r\n\r\nconstructor (uint256 cap) public {\r\n\r\nrequire(cap > 0, \"ERC20Capped: cap is 0\");\r\n\r\n_cap = cap;\r\n\r\n}\r\n\r\n\r\n\r\nfunction cap() public view returns (uint256) {\r\n\r\nreturn _cap;\r\n\r\n}\r\n\r\n\r\n\r\nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n\r\nsuper._beforeTokenTransfer(from, to, amount);\r\n\r\n\r\n\r\nif (from == address(0)) { // When minting tokens\r\n\r\nrequire(totalSupply().add(amount) <= _cap, \"cap exceeded\");\r\n\r\n}\r\n\r\n}\r\n\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract KNFToken is ERC20Capped {\r\n\r\n\r\nconstructor(uint256 initialSupply,uint256 cap)\r\n\r\nERC20(\"KStarNFT\", \"KNFT\",initialSupply) \r\n\r\nERC20Capped(cap)\r\n\r\npublic {\r\n\r\n_mint(msg.sender, initialSupply);\r\n\r\n}\r\n\r\n\r\nfunction mint(uint256 initialSupply) onlyOwner() public {\r\n_mint(msg.sender, initialSupply);\r\n}\r\n\r\nfunction pause() onlyOwner() public {\r\n_pause();\r\n}\r\n\r\nfunction unpause() onlyOwner() public {\r\n_unpause();\r\n}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"DeleteFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentFromBlacklistedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RejectedPaymentToBlacklistedAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BnBtoToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"blacklisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"deleteFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KNFToken", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000006765c793fa10079d0000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0098d286d1d57c0113c93fc5834fa20942a178eb6293d627598df18a2abb9c61"}