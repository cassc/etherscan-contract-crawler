{"SourceCode": "pragma solidity ^0.8.12;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract Vesting {\r\n\r\n    IBEP20 public token;\r\n\r\n    address public owner;\r\n    uint public startDate;\r\n    bool public isStart;\r\n    uint[6] public lockDates = [0,seedLockEndDate,privateLockEndDate,StrategyLockEndDate,publicLockDate,launchLockDate];\r\n    uint[6] public dates = [0,day,day,day,day1,day1];\r\n    uint public activeLockDate;\r\n   \r\n\r\n    uint day = 1 days;\r\n    uint day1 = 30 days;\r\n\r\n    event TokenWithdraw(address indexed buyer, uint value);\r\n      event RecoverToken(address indexed token, uint256 indexed amount);\r\n\r\n    mapping(address => InvestorDetails) public Investors;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, 'Owner only function');\r\n        _;\r\n    }\r\n   modifier setDate{\r\n        require(isStart == true,\"wait for start date\");\r\n        _;\r\n    }\r\n\r\n    uint public seedStartDate;\r\n    uint public privateStartDate;\r\n    uint public StrategyStartDate;\r\n    uint public publicStartDate;\r\n    uint public launchStartDate;\r\n\r\n    uint public seedLockEndDate;\r\n    uint public privateLockEndDate;\r\n    uint public StrategyLockEndDate;\r\n    uint public publicLockDate;\r\n    uint public launchLockDate;\r\n\r\n    uint public seedVestingEndDate;\r\n    uint public privateVestingEndDate;\r\n    uint public StrategyVestingEndDate;\r\n    uint public publicVestingEndDate;\r\n    uint public launchVestingEndDate;\r\n\r\n\r\n    uint public seedNextPay;\r\n     \r\n   \r\n    receive() external payable {\r\n    }\r\n   \r\n       \r\n      constructor(address _tokenAddress) {\r\n        require(_tokenAddress != address(0));\r\n        token = IBEP20(_tokenAddress);\r\n        owner = msg.sender; \r\n    }\r\n    \r\n    \r\n    /* Withdraw the contract's BNB balance to owner wallet*/\r\n    function extractBNB() public onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function getInvestorDetails(address _addr) public view returns(InvestorDetails memory){\r\n        return Investors[_addr];\r\n    }\r\n\r\n    \r\n    function getContractTokenBalance() public view returns(uint) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n\r\n\r\n    /* Utility function for testing. The token address used in this ICO contract can be changed. */\r\n    function setTokenAddress(address _addr) public onlyOwner {\r\n        token = IBEP20(_addr);\r\n    }\r\n\r\n   \r\n\r\n    struct Investor {\r\n        address account;\r\n        uint amount;\r\n        uint8 saleType;\r\n    }\r\n\r\n    struct InvestorDetails {\r\n        uint totalBalance;\r\n        uint timeDifference;\r\n        uint lastVestedTime;\r\n        uint reminingUnitsToVest;\r\n        uint tokensPerUnit;\r\n        uint vestingBalance;\r\n        uint investorType;\r\n        uint initialAmount;\r\n        uint nextAmount;\r\n        bool isInitialAmountClaimed;\r\n    }\r\n\r\n\r\n    function addInvestorDetails(Investor[] memory investorArray) public onlyOwner{\r\n        for(uint16 i = 0; i < investorArray.length; i++) {\r\n            InvestorDetails memory investor;\r\n            uint8 saleType = investorArray[i].saleType;\r\n            investor.totalBalance = (investorArray[i].amount)*(10 ** 18);\r\n            investor.investorType = investorArray[i].saleType;\r\n            investor.vestingBalance = investor.totalBalance;\r\n\r\n            if(saleType == 1) {\r\n                investor.reminingUnitsToVest = 365;\r\n                investor.initialAmount = (investor.totalBalance)*(4)/100;\r\n                investor.nextAmount = (investor.totalBalance)*(4)/100;\r\n                investor.tokensPerUnit = ((investor.totalBalance) - (investor.initialAmount) -(investor.nextAmount))/365;\r\n            }\r\n\r\n            if(saleType == 2) {\r\n                investor.reminingUnitsToVest = 300;\r\n                investor.initialAmount = (investor.totalBalance)*(7)/100;\r\n                investor.nextAmount = (investor.totalBalance) *(7)/100;\r\n                investor.tokensPerUnit = ((investor.totalBalance) - (investor.initialAmount) -(investor.nextAmount))/300;\r\n            }\r\n\r\n            if(saleType == 3) {\r\n                investor.reminingUnitsToVest = 240;\r\n                investor.initialAmount = (investor.totalBalance) *(10)/100;\r\n                investor.nextAmount = (investor.totalBalance)*(10)/100;\r\n                investor.tokensPerUnit = ((investor.totalBalance) - (investor.initialAmount) -(investor.nextAmount))/240;\r\n            }\r\n             if(saleType == 4) {//public\r\n               investor.reminingUnitsToVest = 4;\r\n                investor.initialAmount = (investor.totalBalance)*(20)/100;\r\n                investor.tokensPerUnit = ((investor.totalBalance) - (investor.initialAmount))/4;\r\n                }\r\n        \r\n            if(saleType == 5){\r\n                investor.reminingUnitsToVest = 4;\r\n                investor.initialAmount = (investor.totalBalance)*(0)/100;\r\n                investor.tokensPerUnit =  ((investor.totalBalance) - (investor.initialAmount))/4;\r\n            }\r\n\r\n\r\n            Investors[investorArray[i].account] = investor; \r\n        }\r\n    }\r\n     function setStartDates( uint  _setStartDate ,bool _setDatee) public onlyOwner{\r\n        isStart = _setDatee;\r\n        seedStartDate = _setStartDate;\r\n        privateStartDate = _setStartDate;\r\n        StrategyStartDate = _setStartDate;\r\n        publicStartDate = _setStartDate;\r\n        launchStartDate = _setStartDate;\r\n\r\n        seedNextPay =  seedStartDate  +  14 days;\r\n\r\n        seedLockEndDate = seedNextPay  +  30 days;\r\n        privateLockEndDate = seedNextPay +  30 days ;\r\n        StrategyLockEndDate = seedNextPay +  30 days ;\r\n\r\n        publicLockDate = publicStartDate ;\r\n        launchLockDate = launchStartDate ;\r\n\r\n        seedVestingEndDate = seedLockEndDate +  365 days ;\r\n        privateVestingEndDate = privateLockEndDate + 300 days;\r\n        StrategyVestingEndDate = StrategyLockEndDate + 240 days;\r\n\r\n        publicVestingEndDate = publicLockDate + 120 days ;\r\n        launchVestingEndDate = launchLockDate +  120 days  ;  \r\n\r\n    }\r\n   \r\n    function withdrawTokens() public  setDate {\r\n        lockDates = [0,seedLockEndDate,privateLockEndDate,StrategyLockEndDate,publicLockDate,launchLockDate];\r\n        dates = [0,day,day,day,day1,day1];\r\n        require(isStart= true,\"wait for start date\");\r\n\r\n        if(Investors[msg.sender].isInitialAmountClaimed) {\r\n            require(block.timestamp>=lockDates[Investors[msg.sender].investorType],\"wait until lock period com\");\r\n            activeLockDate = lockDates[Investors[msg.sender].investorType] ;\r\n        \r\n            /* Time difference to calculate the interval between now and last vested time. */\r\n            uint timeDifference;\r\n            if(Investors[msg.sender].lastVestedTime == 0) {\r\n                require(activeLockDate > 0, \"Active lockdate was zero\");\r\n                timeDifference = (block.timestamp) - (activeLockDate);\r\n            } else {\r\n                timeDifference = block.timestamp  - (Investors[msg.sender].lastVestedTime);\r\n            }\r\n              \r\n            uint numberOfUnitsCanBeVested = timeDifference /dates[Investors[msg.sender].investorType];\r\n            \r\n            /* Remining units to vest should be greater than 0 */\r\n            require(Investors[msg.sender].reminingUnitsToVest > 0, \"All units vested!\");\r\n            \r\n            /* Number of units can be vested should be more than 0 */\r\n            require(numberOfUnitsCanBeVested > 0, \"Please wait till next vesting period!\");\r\n\r\n            if(numberOfUnitsCanBeVested >= Investors[msg.sender].reminingUnitsToVest) {\r\n                numberOfUnitsCanBeVested = Investors[msg.sender].reminingUnitsToVest;\r\n            }\r\n            \r\n            /*\r\n                1. Calculate number of tokens to transfer\r\n                2. Update the investor details\r\n                3. Transfer the tokens to the wallet\r\n            */\r\n            uint tokenToTransfer = numberOfUnitsCanBeVested * Investors[msg.sender].tokensPerUnit;\r\n            uint reminingUnits = Investors[msg.sender].reminingUnitsToVest;\r\n            uint balance = Investors[msg.sender].vestingBalance;\r\n            Investors[msg.sender].reminingUnitsToVest -= numberOfUnitsCanBeVested;\r\n            Investors[msg.sender].vestingBalance -= numberOfUnitsCanBeVested * Investors[msg.sender].tokensPerUnit;\r\n            Investors[msg.sender].lastVestedTime = block.timestamp;\r\n            if(numberOfUnitsCanBeVested == reminingUnits) { \r\n                token.transfer(msg.sender, balance);\r\n                emit TokenWithdraw(msg.sender, balance);\r\n            } else {\r\n                token.transfer(msg.sender, tokenToTransfer);\r\n                emit TokenWithdraw(msg.sender, tokenToTransfer);\r\n            }  \r\n        }\r\n        else {\r\n           if(block.timestamp> seedNextPay){\r\n               if( Investors[msg.sender].isInitialAmountClaimed){\r\n                 Investors[msg.sender].vestingBalance -= Investors[msg.sender].nextAmount;\r\n            Investors[msg.sender].isInitialAmountClaimed = true;\r\n            uint amount = Investors[msg.sender].nextAmount;\r\n            token.transfer(msg.sender, amount);\r\n            emit TokenWithdraw(msg.sender, amount);\r\n               }else{\r\n            Investors[msg.sender].vestingBalance -= Investors[msg.sender].nextAmount + Investors[msg.sender].initialAmount ;\r\n            Investors[msg.sender].isInitialAmountClaimed = true;\r\n            uint amount = Investors[msg.sender].nextAmount +Investors[msg.sender].initialAmount ;\r\n            token.transfer(msg.sender, amount);\r\n            emit TokenWithdraw(msg.sender, amount); \r\n          }\r\n           }\r\n                else{\r\n          require(!Investors[msg.sender].isInitialAmountClaimed, \"Amount already withdrawn!\");\r\n          require(block.timestamp > seedStartDate,\" Wait Until the Start Date\");\r\n           if(Investors[msg.sender].investorType == 4 || Investors[msg.sender].investorType == 5 ){\r\n              Investors[msg.sender].isInitialAmountClaimed = true;  \r\n           }\r\n\r\n           if(Investors[msg.sender].investorType == 5){\r\n             Investors[msg.sender].isInitialAmountClaimed = true;  \r\n           }else{\r\n           require(Investors[msg.sender].initialAmount >0,\"wait for next vest time \");}\r\n\r\n            uint amount = Investors[msg.sender].initialAmount;\r\n            Investors[msg.sender].vestingBalance -= Investors[msg.sender].initialAmount;\r\n            Investors[msg.sender].initialAmount = 0 ; \r\n            token.transfer(msg.sender, amount);\r\n            emit TokenWithdraw(msg.sender, amount);\r\n          \r\n                }\r\n            }\r\n    }\r\n  function getVestingDetails( address _addr) external view  returns(uint,uint,uint){\r\n        uint lockDate = lockDates[Investors[_addr].investorType];\r\n           uint[6]  memory hello  = [0,day,day,day,day1,day1];\r\n\r\n        uint timeDifference;\r\n        if(Investors[_addr].lastVestedTime == 0) {\r\n        if(lockDate> 0)return (0,0,0);//, \"Active lockdate was zero\");\r\n        timeDifference = (block.timestamp) -(lockDate);\r\n        }\r\n          else{ \r\n       timeDifference = (block.timestamp) - (Investors[_addr].lastVestedTime);\r\n    }\r\n\r\n    uint numberOfUnitsCanBeVested;\r\n     uint tokenToTransfer ;\r\n    numberOfUnitsCanBeVested = (timeDifference)/(hello[Investors[_addr].investorType]);\r\n    if(numberOfUnitsCanBeVested >= Investors[_addr].reminingUnitsToVest) {\r\n        numberOfUnitsCanBeVested = Investors[_addr].reminingUnitsToVest;\r\n    }\r\n    tokenToTransfer = numberOfUnitsCanBeVested * Investors[_addr].tokensPerUnit;\r\n    uint reminingUnits = Investors[_addr].reminingUnitsToVest;\r\n    uint balance = Investors[_addr].vestingBalance;\r\n    return (tokenToTransfer,reminingUnits,balance);\r\n\r\n   } \r\n    function setDay(uint _value) public onlyOwner {\r\n        day = _value;\r\n    }\r\n  \r\n    function transferOwnership(address _setOwner) public onlyOwner{\r\n        owner = _setOwner;\r\n    }\r\n\r\n     function depositToken(uint amount) public onlyOwner {\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n     function recoverTokens(address _token, uint256 amount) public onlyOwner {\r\n        IBEP20(_token).transfer(msg.sender, amount);\r\n        emit RecoverToken(_token, amount);\r\n    }\r\n\r\n    function removeInvestor( address  _addr) public onlyOwner{\r\n        require(Investors[_addr].investorType >0,\"Investor Not Found\");\r\n            delete Investors[_addr];\r\n    }\r\n\r\n    function investorsAmount(address _addr) external view returns(uint){\r\n        if(Investors[_addr].isInitialAmountClaimed){\r\n            return Investors[_addr].nextAmount;\r\n        }\r\n        else{\r\n            if(block.timestamp>seedNextPay) return Investors[_addr].nextAmount + Investors[_addr].initialAmount;\r\n            else return Investors[_addr].initialAmount;\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVestedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reminingUnitsToVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialAmountClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StrategyLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StrategyStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StrategyVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeLockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"saleType\",\"type\":\"uint8\"}],\"internalType\":\"struct Vesting.Investor[]\",\"name\":\"investorArray\",\"type\":\"tuple[]\"}],\"name\":\"addInvestorDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getInvestorDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDifference\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastVestedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reminingUnitsToVest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investorType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialAmountClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct Vesting.InvestorDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVestingDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"investorsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicLockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedLockEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedNextPay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedVestingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_setStartDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_setDatee\",\"type\":\"bool\"}],\"name\":\"setStartDates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_setOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b04770cfc19bc6089934f15e80867bf1fdb790c5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://132de795eae5c5728cd4894ffdc9c29b91da4112f278d1b4960a32d63b789607"}