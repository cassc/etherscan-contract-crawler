{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary PancakeLibrary {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5' // init code hash\r\n            )))));\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor () {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startTradeTime;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _excludeRewardList;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 public _rTotal;\r\n\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    uint256  public _aprPerTime = 10366;\r\n    uint256  public _aprDuration = 15 minutes;\r\n    uint256 private constant AprDivBase = 100000000;\r\n    uint256 public _lastRewardTime;\r\n    uint256 public _aprRewardDuration = 100 days;\r\n\r\n    address public immutable _weth;\r\n    address public immutable _mainPair;\r\n    ISwapRouter public immutable _swapRouter;\r\n\r\n    uint256 private constant _maxFee = 300;\r\n    uint256 public _transferFee = 300;\r\n    uint256 public _addLPFee = 300;\r\n    uint256 public _removeLPFee = 300;\r\n    uint256 public _swapFunFee = 50;\r\n    uint256 public _swapGenesisNFTFee = 50;\r\n    uint256 public _swapWarNFTFee = 50;\r\n    uint256 public _swapLPDividendLPFee = 150;\r\n    uint256 public _specialSellFee = 1700;\r\n    uint256 public _specialSellFeeDuration = 1 hours;\r\n\r\n    mapping(address => uint256) public _lpAmount;\r\n    address public _genesisNFTAddress;\r\n    address public _warNFTAddress;\r\n    TokenDistributor public immutable _genesisNFTDistributor;\r\n    TokenDistributor public immutable _warNFTDistributor;\r\n    TokenDistributor public immutable _funTokenDistributor;\r\n\r\n    mapping(address => bool) public _swapRouters;\r\n    bool public _strictCheck = true;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceivedAddress, address FundAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _swapRouters[address(swapRouter)] = true;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        _weth = swapRouter.WETH();\r\n        address ethPair;\r\n        if (address(0x10ED43C718714eb63d5aA57B78B54704E256024E) == RouterAddress) {\r\n            ethPair = PancakeLibrary.pairFor(swapRouter.factory(), _weth, address(this));\r\n        } else {\r\n            ethPair = ISwapFactory(swapRouter.factory()).createPair(address(this), _weth);\r\n        }\r\n        _swapPairList[ethPair] = true;\r\n        _excludeRewardList[ethPair] = true;\r\n        _excludeRewardList[address(this)] = true;\r\n        _mainPair = ethPair;\r\n\r\n        uint256 tTotal = Supply * 10 ** Decimals;\r\n        uint256 base = AprDivBase * 100;\r\n        uint256 rTotal = MAX / base - (MAX / base % tTotal);\r\n        _rOwned[ReceivedAddress] = rTotal;\r\n        _tOwned[ReceivedAddress] = tTotal;\r\n        emit Transfer(address(0), ReceivedAddress, tTotal);\r\n        _rTotal = rTotal;\r\n        _tTotal = tTotal;\r\n\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[ReceivedAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        _feeWhiteList[address(0xB77629851E8ae9d3F4252A3a6aD601F1D6a891f4)] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _genesisNFTDistributor = new TokenDistributor();\r\n        _warNFTDistributor = new TokenDistributor();\r\n        _funTokenDistributor = new TokenDistributor();\r\n        _feeWhiteList[address(_genesisNFTDistributor)] = true;\r\n        _feeWhiteList[address(_warNFTDistributor)] = true;\r\n        _feeWhiteList[address(_funTokenDistributor)] = true;\r\n        _excludeRewardList[address(_genesisNFTDistributor)] = true;\r\n        _excludeRewardList[address(_warNFTDistributor)] = true;\r\n        _excludeRewardList[address(_funTokenDistributor)] = true;\r\n\r\n        _genesisNFTRewardCondition = 10 * 10 ** Decimals;\r\n        _warNFTRewardCondition = 10 * 10 ** Decimals;\r\n    }\r\n\r\n    function calApy() public {\r\n        uint256 lastRewardTime = _lastRewardTime;\r\n        if (0 == lastRewardTime) {\r\n            return;\r\n        }\r\n        uint256 endTime = startTradeTime + _aprRewardDuration;\r\n        if (lastRewardTime > endTime) {\r\n            return;\r\n        }\r\n        uint256 total = _tTotal;\r\n        uint256 maxTotal = _rTotal;\r\n        if (total == maxTotal) {\r\n            return;\r\n        }\r\n        uint256 blockTime = block.timestamp;\r\n        uint256 aprDuration = _aprDuration;\r\n        if (blockTime < lastRewardTime + aprDuration) {\r\n            return;\r\n        }\r\n        uint256 deltaTime = blockTime - lastRewardTime;\r\n        uint256 times = deltaTime / aprDuration;\r\n        uint256 aprPerTime = _aprPerTime;\r\n\r\n        for (uint256 i; i < times;) {\r\n            if (lastRewardTime + i * aprDuration > endTime) {\r\n                break;\r\n            }\r\n            total = total * (AprDivBase + aprPerTime) / AprDivBase;\r\n            if (total > maxTotal) {\r\n                total = maxTotal;\r\n                break;\r\n            }\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        _tTotal = total;\r\n        _lastRewardTime = lastRewardTime + times * aprDuration;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_excludeRewardList[account]) {\r\n            return _tOwned[account];\r\n        }\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256){\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _getRate() public view returns (uint256) {\r\n        if (_rTotal < _tTotal) {\r\n            return 1;\r\n        }\r\n        return _rTotal / _tTotal;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    uint256 public _rebaseDuration = 24 hours;\r\n    uint256 public _rebaseRate = 500;\r\n    uint256 public _lastRebaseTime;\r\n\r\n    function setRebaseRate(uint256 r) external onlyWhiteList {\r\n        _rebaseRate = r;\r\n    }\r\n\r\n    function setLastRebaseTime(uint256 r) external onlyWhiteList {\r\n        _lastRebaseTime = r;\r\n    }\r\n\r\n    function setRebaseDuration(uint256 d) external onlyWhiteList {\r\n        _rebaseDuration = d;\r\n    }\r\n\r\n    function rebase() public {\r\n        uint256 lastRebaseTime = _lastRebaseTime;\r\n        if (0 == lastRebaseTime) {\r\n            return;\r\n        }\r\n        uint256 nowTime = block.timestamp;\r\n        if (nowTime < lastRebaseTime + _rebaseDuration) {\r\n            return;\r\n        }\r\n        _lastRebaseTime = nowTime;\r\n        address mainPair = _mainPair;\r\n        uint256 rebaseAmount = balanceOf(mainPair) * _rebaseRate / 10000;\r\n        if (rebaseAmount > 0) {\r\n            _funTransfer(mainPair, address(0x000000000000000000000000000000000000dEaD), rebaseAmount, 0);\r\n            ISwapPair(mainPair).sync();\r\n        }\r\n    }\r\n\r\n    address private _lastMaybeAddLPAddress;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        calApy();\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n\r\n        address lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n        if (address(0) != lastMaybeAddLPAddress) {\r\n            _lastMaybeAddLPAddress = address(0);\r\n            if (IERC20(_mainPair).balanceOf(lastMaybeAddLPAddress) > 0) {\r\n                addHolder(lastMaybeAddLPAddress);\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            takeFee = true;\r\n            uint256 maxSellAmount = balance * 9999 / 10000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool isAddLP;\r\n        bool isRemoveLP;\r\n\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair && _swapRouters[msg.sender]) {\r\n            uint256 addLPAmount = amount;\r\n            if (!_feeWhiteList[from]) {\r\n                addLPAmount = amount - amount * _addLPFee / 10000;\r\n            }\r\n            addLPLiquidity = _isAddLiquidity(addLPAmount);\r\n            if (addLPLiquidity > 0) {\r\n                _lpAmount[from] += addLPLiquidity;\r\n                isAddLP = true;\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair && to != address(_swapRouter)) {\r\n            if (_strictCheck) {\r\n                removeLPLiquidity = _strictCheckBuy(amount);\r\n            } else {\r\n                removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            }\r\n        } else if (from == address(_swapRouter)) {\r\n            removeLPLiquidity = _isRemoveLiquidityETH(amount);\r\n        }\r\n\r\n        if (removeLPLiquidity > 0) {\r\n            require(_lpAmount[to] >= removeLPLiquidity);\r\n            _lpAmount[to] -= removeLPLiquidity;\r\n            isRemoveLP = true;\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock);\r\n                if (block.number < startTradeBlock + 3) {\r\n                    _funTransfer(from, to, amount, 99);\r\n                    return;\r\n                }}\r\n        }\r\n\r\n        if (isRemoveLP && !_feeWhiteList[to]) {\r\n            takeFee = true;\r\n        }\r\n\r\n        if (from != _mainPair && !isAddLP) {\r\n            rebase();\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP, isAddLP);\r\n\r\n        if (from != address(this)) {\r\n            if (_mainPair == to) {\r\n                _lastMaybeAddLPAddress = from;\r\n            }\r\n            if (takeFee && !isAddLP) {\r\n                uint256 rewardGas = _rewardGas;\r\n                processReward(rewardGas);\r\n                uint256 blockNum = block.number;\r\n                if (progressRewardBlock != blockNum) {\r\n                    processGenesisNFTReward(rewardGas);\r\n                    if (processGenesisNFTBlock != blockNum) {\r\n                        processWarNFTReward(rewardGas);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            if (amount0 > 0) {\r\n                liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n            }\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _weth;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = amount * ISwapPair(_mainPair).totalSupply() / (balanceOf(_mainPair) - amount);\r\n        }\r\n    }\r\n\r\n    function _strictCheckBuy(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther < rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply()) /\r\n            (balanceOf(_mainPair) - amount);\r\n        } else {\r\n            uint256 amountOther;\r\n            if (rOther > 0 && rThis > 0) {\r\n                amountOther = amount * rOther / (rThis - amount);\r\n                //strictCheckBuy\r\n                require(balanceOther >= amountOther + rOther);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidityETH(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = amount * ISwapPair(_mainPair).totalSupply() / balanceOf(_mainPair);\r\n        }\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        if (_tOwned[sender] > tAmount) {\r\n            _tOwned[sender] -= tAmount;\r\n        } else {\r\n            _tOwned[sender] = 0;\r\n        }\r\n\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n\r\n        uint256 feeAmount = tAmount / 100 * fee;\r\n        if (feeAmount > 0) {\r\n            _takeTransfer(sender, fundAddress, feeAmount, currentRate);\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount, currentRate);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLp,\r\n        bool isAddLP\r\n    ) private {\r\n        if (_tOwned[sender] > tAmount) {\r\n            _tOwned[sender] -= tAmount;\r\n        } else {\r\n            _tOwned[sender] = 0;\r\n        }\r\n\r\n        uint256 currentRate = _getRate();\r\n        _rOwned[sender] = _rOwned[sender] - tAmount * currentRate;\r\n\r\n        uint256 feeAmount;\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 swapFeeAmount;\r\n            uint256 genesisNFTFeeAmount;\r\n            uint256 warNFTFeeAmount;\r\n            uint256 normalFeeAmount;\r\n            if (isAddLP) {\r\n                normalFeeAmount = tAmount * _addLPFee / 10000;\r\n            } else if (isRemoveLp) {\r\n                normalFeeAmount = tAmount * _removeLPFee / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                swapFeeAmount = tAmount * (_swapFunFee + _swapLPDividendLPFee) / 10000;\r\n                genesisNFTFeeAmount = tAmount * _swapGenesisNFTFee / 10000;\r\n                warNFTFeeAmount = tAmount * _swapWarNFTFee / 10000;\r\n                if (block.timestamp < startTradeTime + _specialSellFeeDuration) {\r\n                    normalFeeAmount = tAmount * _specialSellFee / 10000;\r\n                }\r\n            } else if (_swapPairList[sender]) {//Buy\r\n                swapFeeAmount = tAmount * (_swapFunFee + _swapLPDividendLPFee) / 10000;\r\n                genesisNFTFeeAmount = tAmount * _swapGenesisNFTFee / 10000;\r\n                warNFTFeeAmount = tAmount * _swapWarNFTFee / 10000;\r\n            } else {//Transfer\r\n                normalFeeAmount = tAmount * _transferFee / 10000;\r\n            }\r\n\r\n            if (normalFeeAmount > 0) {\r\n                feeAmount += normalFeeAmount;\r\n                _takeTransfer(sender, address(_funTokenDistributor), normalFeeAmount, currentRate);\r\n            }\r\n\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount, currentRate);\r\n            }\r\n            if (genesisNFTFeeAmount > 0) {\r\n                feeAmount += genesisNFTFeeAmount;\r\n                _takeTransfer(sender, address(_genesisNFTDistributor), genesisNFTFeeAmount, currentRate);\r\n            }\r\n            if (warNFTFeeAmount > 0) {\r\n                feeAmount += warNFTFeeAmount;\r\n                _takeTransfer(sender, address(_warNFTDistributor), warNFTFeeAmount, currentRate);\r\n            }\r\n            if (isSell && !inSwap) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                uint256 numTokensSellToFund = swapFeeAmount * 230 / 100;\r\n                if (numTokensSellToFund > contractTokenBalance) {\r\n                    numTokensSellToFund = contractTokenBalance;\r\n                }\r\n\r\n                uint256 fundFeeTokenAmount = balanceOf(address(_funTokenDistributor));\r\n                if (fundFeeTokenAmount > swapFeeAmount) {\r\n                    fundFeeTokenAmount = swapFeeAmount;\r\n                }\r\n                if (fundFeeTokenAmount > 0) {\r\n                    _funTransfer(address(_funTokenDistributor), address(this), fundFeeTokenAmount, 0);\r\n                }\r\n                swapTokenForFund(numTokensSellToFund, fundFeeTokenAmount);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount, currentRate);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 swapFeeTokenAmount, uint256 fundFeeTokenAmount) private lockTheSwap {\r\n        uint256 tokenAmount = swapFeeTokenAmount + fundFeeTokenAmount;\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 swapLPDividendLPFee = _swapLPDividendLPFee;\r\n        uint256 totalFee = _swapFunFee + swapLPDividendLPFee;\r\n        totalFee += totalFee;\r\n\r\n        uint256 lpAmount = swapFeeTokenAmount * swapLPDividendLPFee / totalFee;\r\n        totalFee -= swapLPDividendLPFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _weth;\r\n        _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 fundEth = ethBalance * fundFeeTokenAmount / tokenAmount;\r\n        if (fundEth > 0) {\r\n            payable(fundAddress).transfer(fundEth);\r\n            ethBalance -= fundEth;\r\n        }\r\n\r\n        uint256 lpEth = ethBalance * swapLPDividendLPFee / totalFee;\r\n        if (lpEth > 0) {\r\n            _swapRouter.addLiquidityETH{value : lpEth}(\r\n                address(this), lpAmount, 0, 0, address(this), block.timestamp\r\n            );\r\n        }\r\n\r\n        fundEth = ethBalance - lpEth;\r\n        if (fundEth > 0) {\r\n            payable(fundAddress).transfer(fundEth);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        _tOwned[to] += tAmount;\r\n\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[to] = _rOwned[to] + rAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimBalance() external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(fundAddress).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address c, address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            TokenDistributor(c).claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n        startTradeTime = block.timestamp;\r\n        _lastRewardTime = block.timestamp;\r\n        _lastRebaseTime = block.timestamp + 100 days;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\r\n        _swapPairList[addr] = enable;\r\n        if (enable) {\r\n            _excludeRewardList[addr] = true;\r\n        }\r\n    }\r\n\r\n    function setExcludeReward(address addr, bool enable) external onlyWhiteList {\r\n        _tOwned[addr] = balanceOf(addr);\r\n        _rOwned[addr] = _tOwned[addr] * _getRate();\r\n        _excludeRewardList[addr] = enable;\r\n    }\r\n\r\n    function setAprPerTime(uint256 apr) external onlyWhiteList {\r\n        calApy();\r\n        _aprPerTime = apr;\r\n    }\r\n\r\n    function setAprDuration(uint256 d) external onlyWhiteList {\r\n        calApy();\r\n        _aprDuration = d;\r\n    }\r\n\r\n    function setRewardDuration(uint256 d) external onlyWhiteList {\r\n        _aprRewardDuration = d;\r\n    }\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function getHolderLength() public view returns (uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition = 1 ether;\r\n    uint256 public holderCondition = 1000000;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public progressRewardBlockDebt = 200;\r\n\r\n    function processReward(uint256 gas) private {\r\n        uint256 blockNum = block.number;\r\n        if (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint256 rewardCondition = holderRewardCondition;\r\n        if (holdToken.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = holderCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            if (!excludeHolder[shareHolder]) {\r\n                tokenBalance = holdToken.balanceOf(shareHolder);\r\n                if (tokenBalance >= holdCondition) {\r\n                    amount = rewardCondition * tokenBalance / holdTokenTotal;\r\n                    if (amount > 0) {\r\n                        holdToken.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = blockNum;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyWhiteList {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setHolderCondition(uint256 amount) external onlyWhiteList {\r\n        holderCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setProgressRewardBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        progressRewardBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setGenesisNFTAddress(address adr) external onlyWhiteList {\r\n        _genesisNFTAddress = adr;\r\n    }\r\n\r\n    function setWarNFTAddress(address adr) external onlyWhiteList {\r\n        _warNFTAddress = adr;\r\n    }\r\n\r\n    mapping(address => bool) public excludeNFTHolder;\r\n\r\n    function setExcludeNFTHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeNFTHolder[addr] = enable;\r\n    }\r\n\r\n    //GenesisNFT\r\n    uint256 public currentGenesisNFTIndex;\r\n    uint256 public processGenesisNFTBlock;\r\n    uint256 public processGenesisNFTBlockDebt = 100;\r\n    uint256 public _genesisNFTRewardCondition;\r\n\r\n    function processGenesisNFTReward(uint256 gas) private {\r\n        if (processGenesisNFTBlock + processGenesisNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_genesisNFTAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        uint256 rewardCondition = _genesisNFTRewardCondition;\r\n        address sender = address(_genesisNFTDistributor);\r\n        if (balanceOf(address(sender)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = rewardCondition / totalNFT;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentGenesisNFTIndex >= totalNFT) {\r\n                currentGenesisNFTIndex = 0;\r\n            }\r\n            address shareHolder = nft.ownerOf(1 + currentGenesisNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder]) {\r\n                _funTransfer(sender, shareHolder, amount, 0);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentGenesisNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processGenesisNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessGenesisNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        processGenesisNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setGenesisNFTRewardCondition(uint256 c) external onlyWhiteList {\r\n        _genesisNFTRewardCondition = c;\r\n    }\r\n\r\n    //WarNFT\r\n    uint256 public currentWarNFTIndex;\r\n    uint256 public processWarNFTBlock;\r\n    uint256 public processWarNFTBlockDebt = 0;\r\n    uint256 public _warNFTRewardCondition;\r\n\r\n    function processWarNFTReward(uint256 gas) private {\r\n        if (processWarNFTBlock + processWarNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_warNFTAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        uint256 rewardCondition = _warNFTRewardCondition;\r\n        address sender = address(_warNFTDistributor);\r\n        if (balanceOf(sender) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = rewardCondition / totalNFT;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentWarNFTIndex >= totalNFT) {\r\n                currentWarNFTIndex = 0;\r\n            }\r\n            address shareHolder = nft.ownerOf(1 + currentWarNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder]) {\r\n                _funTransfer(sender, shareHolder, amount, 0);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentWarNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processWarNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessWarNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        processWarNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setWarNFTRewardCondition(uint256 c) external onlyWhiteList {\r\n        _warNFTRewardCondition = c;\r\n    }\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public onlyWhiteList {\r\n        _lpAmount[account] = lpAmount;\r\n    }\r\n\r\n\r\n    mapping(address => bool) public _inProject;\r\n\r\n    function setInProject(address adr, bool enable) external onlyWhiteList {\r\n        _inProject[adr] = enable;\r\n    }\r\n\r\n    function addUserLPAmount(address account, uint256 lpAmount) public {\r\n        require(_inProject[msg.sender] && _feeWhiteList[msg.sender], \"NP\");\r\n        _lpAmount[account] += lpAmount;\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpBalance\r\n    ) {\r\n        lpAmount = _lpAmount[account];\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n    }\r\n\r\n    function setSwapFee(\r\n        uint256 lpDividendLPFee, uint256 fundFee, uint256 genesisNFTFee, uint256 warNFTFee\r\n    ) external onlyWhiteList {\r\n        _swapLPDividendLPFee = lpDividendLPFee;\r\n        _swapFunFee = fundFee;\r\n        _swapGenesisNFTFee = genesisNFTFee;\r\n        _swapWarNFTFee = warNFTFee;\r\n        require(_swapLPDividendLPFee + _swapFunFee + _swapGenesisNFTFee + _swapWarNFTFee <= _maxFee, \"M\");\r\n    }\r\n\r\n    function setTransferFee(\r\n        uint256 fee\r\n    ) external onlyWhiteList {\r\n        _transferFee = fee;\r\n        require(_transferFee <= _maxFee, \"M\");\r\n    }\r\n\r\n    function setAddLPFee(\r\n        uint256 fee\r\n    ) external onlyWhiteList {\r\n        _addLPFee = fee;\r\n        require(_addLPFee <= _maxFee, \"M\");\r\n    }\r\n\r\n    function setRemoveLPFee(\r\n        uint256 fee\r\n    ) external onlyWhiteList {\r\n        _removeLPFee = fee;\r\n        require(_removeLPFee <= _maxFee, \"M\");\r\n    }\r\n\r\n    function setSpecialSellFee(\r\n        uint256 fee\r\n    ) external onlyWhiteList {\r\n        _specialSellFee = fee;\r\n        require(_specialSellFee <= 1700, \"M\");\r\n    }\r\n\r\n    function setSpecialSellDuration(\r\n        uint256 d\r\n    ) external onlyWhiteList {\r\n        _specialSellFeeDuration = d;\r\n        require(_specialSellFeeDuration <= 1 hours, \"M\");\r\n    }\r\n}\r\n\r\ncontract W3N is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //\r\n        \"W3N\",\r\n    //\r\n        \"W3N\",\r\n    //\r\n        18,\r\n    //\r\n        10000000,\r\n    //\r\n        address(0x4D64D92e4eA4B518d659fECB66A38f1f07C524cb),\r\n    //\r\n        address(0x26944342DE6c482bc5f93Fa094dE659DA2433639)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aprDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aprPerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_aprRewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludeRewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_funTokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_genesisNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_genesisNFTDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_genesisNFTRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_specialSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_specialSellFeeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strictCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapFunFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapGenesisNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapLPDividendLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapWarNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_warNFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_warNFTDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_warNFTRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"addUserLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGenesisNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentWarNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeNFTHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processGenesisNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processGenesisNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processWarNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processWarNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setAddLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setAprDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"}],\"name\":\"setAprPerTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setGenesisNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setGenesisNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setInProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setLastRebaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessGenesisNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessWarNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgressRewardBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setRebaseDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"setRebaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setSpecialSellDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSpecialSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendLPFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"genesisNFTFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"warNFTFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setWarNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setWarNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "W3N", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3d089e641eb9617ce69c9c7eec9ebbd852a3be5e9cedc07ca58ba44d9f7a2610"}