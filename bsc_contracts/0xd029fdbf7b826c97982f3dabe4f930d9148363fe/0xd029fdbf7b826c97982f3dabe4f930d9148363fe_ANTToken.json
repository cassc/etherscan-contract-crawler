{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\r\n     * another (`to`).\r\n\r\n     *\r\n\r\n     * Note that `value` may be zero.\r\n\r\n     */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\r\n     * a call to {approve}. `value` is the new allowance.\r\n\r\n     */\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n\r\n     * @dev Returns the name of the token.\r\n\r\n     */\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n\r\n     * @dev Returns the symbol of the token.\r\n\r\n     */\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n\r\n     * @dev Returns the decimals places of the token.\r\n\r\n     */\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n\r\n        _owner = msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\r\n     *\r\n\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\r\n     * thereby removing any functionality that is only available to the owner.\r\n\r\n     */\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n\r\n    // bytes32 values.\r\n\r\n    // The Set implementation uses private functions, and user-facing\r\n\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n\r\n    // underlying Set.\r\n\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n\r\n        // means a value is not in the set.\r\n\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Add a value to a set. O(1).\r\n\r\n     *\r\n\r\n     * Returns true if the value was added to the set, that is if it was not\r\n\r\n     * already present.\r\n\r\n     */\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n\r\n            // and use 0 as a sentinel value\r\n\r\n            set._indexes[value] = set._values.length;\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Removes a value from a set. O(1).\r\n\r\n     *\r\n\r\n     * Returns true if the value was removed from the set, that is if it was\r\n\r\n     * present.\r\n\r\n     */\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n\r\n                set._values[toDeleteIndex] = lastvalue;\r\n\r\n                // Update the index for the moved value\r\n\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns true if the value is in the set. O(1).\r\n\r\n     */\r\n\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the number of values on the set. O(1).\r\n\r\n     */\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n\r\n     *\r\n\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `index` must be strictly less than {length}.\r\n\r\n     */\r\n\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Return the entire set in an array\r\n\r\n     *\r\n\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\r\n     */\r\n\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Add a value to a set. O(1).\r\n\r\n     *\r\n\r\n     * Returns true if the value was added to the set, that is if it was not\r\n\r\n     * already present.\r\n\r\n     */\r\n\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Removes a value from a set. O(1).\r\n\r\n     *\r\n\r\n     * Returns true if the value was removed from the set, that is if it was\r\n\r\n     * present.\r\n\r\n     */\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns true if the value is in the set. O(1).\r\n\r\n     */\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the number of values in the set. O(1).\r\n\r\n     */\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n\r\n     *\r\n\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `index` must be strictly less than {length}.\r\n\r\n     */\r\n\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Return the entire set in an array\r\n\r\n     *\r\n\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\r\n     */\r\n\r\n    function values(Bytes32Set storage set)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory)\r\n    {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Add a value to a set. O(1).\r\n\r\n     *\r\n\r\n     * Returns true if the value was added to the set, that is if it was not\r\n\r\n     * already present.\r\n\r\n     */\r\n\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Removes a value from a set. O(1).\r\n\r\n     *\r\n\r\n     * Returns true if the value was removed from the set, that is if it was\r\n\r\n     * present.\r\n\r\n     */\r\n\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns true if the value is in the set. O(1).\r\n\r\n     */\r\n\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the number of values in the set. O(1).\r\n\r\n     */\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n\r\n     *\r\n\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `index` must be strictly less than {length}.\r\n\r\n     */\r\n\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Return the entire set in an array\r\n\r\n     *\r\n\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\r\n     */\r\n\r\n    function values(AddressSet storage set)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Add a value to a set. O(1).\r\n\r\n     *\r\n\r\n     * Returns true if the value was added to the set, that is if it was not\r\n\r\n     * already present.\r\n\r\n     */\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Removes a value from a set. O(1).\r\n\r\n     *\r\n\r\n     * Returns true if the value was removed from the set, that is if it was\r\n\r\n     * present.\r\n\r\n     */\r\n\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns true if the value is in the set. O(1).\r\n\r\n     */\r\n\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the number of values on the set. O(1).\r\n\r\n     */\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n\r\n     *\r\n\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n\r\n     * array, and it may change when more values are added or removed.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `index` must be strictly less than {length}.\r\n\r\n     */\r\n\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Return the entire set in an array\r\n\r\n     *\r\n\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n\r\n     */\r\n\r\n    function values(UintSet storage set)\r\n        internal\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        bytes32[] memory store = _values(set._inner);\r\n\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ncontract Distributor {\r\n    address public immutable bbcc;\r\n\r\n    constructor() {\r\n        bbcc = msg.sender;\r\n    }\r\n\r\n    function transfer(IERC20 usdt) external {\r\n        usdt.transfer(bbcc, usdt.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `+` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Addition cannot overflow.\r\n\r\n     */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `*` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Multiplication cannot overflow.\r\n\r\n     */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\r\n     * division by zero. The result is rounded towards zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\r\n     * division by zero. The result is rounded towards zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\r\n     * Reverts when dividing by zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\r\n     * Reverts with custom message when dividing by zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ANTToken is Ownable, IERC20, IERC20Metadata {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    EnumerableSet.AddressSet private _feeWhiteList;\r\n\r\n    EnumerableSet.AddressSet private _pancakeWhiteList;\r\n\r\n    mapping(address => uint256) public pancakeCount;\r\n\r\n    uint256 public minPancakeCount;\r\n\r\n    bool public openPancake;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name = \"ANT\";\r\n\r\n    string private _symbol = \"ANT\";\r\n\r\n    uint256 initNumber = 500 * 10**4;\r\n\r\n    uint256 lpRate = 200;\r\n\r\n    uint256 lianchuangRate = 50;\r\n\r\n    uint256 buyANTSRate = 150;\r\n\r\n    uint256 fundsRate = 100;\r\n\r\n    Distributor public distributor;\r\n\r\n    address public buyANTSAddress = 0xb44026731aaC30579419eF065D828b0556E0Ed12;\r\n\r\n    address public lianchuangAddress =\r\n        0x2143C334E806038f061FA1f3fd9b9094E8ed59e2;\r\n\r\n    address public fundsAddress = 0x6b1eF6f6cE645CA260e3192d2FbBa03D5E37EE6C;\r\n\r\n    mapping(address => bool) public isPair;\r\n\r\n    address public pairAddress;\r\n\r\n    address public uniswapRouterAddress =\r\n        0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n\r\n    IERC20 public usdtAddress =\r\n        IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    address public antsAddress = 0xbfD9A5E1C679Fb572b21e19ad9b3094b1a50A8c4;\r\n\r\n    uint256 public numTokensSellToFund = 10 * 10**18;\r\n\r\n    mapping(address => bool) _updated;\r\n\r\n    address[] buyUser;\r\n\r\n    mapping(address => uint256) shareholderIndexes;\r\n\r\n    mapping(address => bool) havePush;\r\n\r\n    mapping(string => uint256) public countMap;\r\n\r\n    bool public inSwap;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n\r\n        _;\r\n\r\n        inSwap = false;\r\n    }\r\n\r\n    //Record of dividend conditions\r\n\r\n    struct lpDividend {\r\n        uint256 index;\r\n        uint256 sendMemberCount;\r\n        uint256 minSendAmount;\r\n        uint256 hodlerNumTokensToSplite;\r\n        IERC20 token;\r\n    }\r\n\r\n    lpDividend internal lpDividendInfo;\r\n\r\n    /**\r\n\r\n     * @dev Sets the values for {name} and {symbol}.\r\n\r\n     *\r\n\r\n     * The default value of {decimals} is 18. To select a different value for\r\n\r\n     * {decimals} you should overload it.\r\n\r\n     *\r\n\r\n     * All two of these values are immutable: they can only be set once during\r\n\r\n     * construction.\r\n\r\n     */\r\n\r\n    constructor() {\r\n\r\n        _totalSupply = initNumber * 10**decimals();\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n        _uniswapV2Router = IUniswapV2Router02(uniswapRouterAddress);\r\n\r\n        pairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            address(usdtAddress)\r\n        );\r\n\r\n        isPair[pairAddress] = true;\r\n\r\n        countMap[\"lp\"] = 0;\r\n\r\n        countMap[\"lianchuang\"] = 0;\r\n\r\n        countMap[\"buyANTS\"] = 0;\r\n\r\n        countMap[\"funds\"] = 0;\r\n\r\n        openPancake = true;\r\n\r\n        minPancakeCount = 100 * 10**18;\r\n\r\n        distributor = new Distributor();\r\n\r\n        lpDividendInfo = lpDividend(\r\n            0,\r\n            10,\r\n            10 * 10**18,\r\n            10 * 10**18,\r\n            IERC20(pairAddress)\r\n        );\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the name of the token.\r\n\r\n     */\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n\r\n     * name.\r\n\r\n     */\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n\r\n     *\r\n\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n\r\n     * overridden;\r\n\r\n     *\r\n\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n\r\n     * no way affects any of the arithmetic of the contract, including\r\n\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n\r\n     */\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-totalSupply}.\r\n\r\n     */\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-balanceOf}.\r\n\r\n     */\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-transfer}.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - the caller must have a balance of at least `amount`.\r\n\r\n     */\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n\r\n        _transfer(owner, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-allowance}.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-approve}.\r\n\r\n     *\r\n\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n\r\n        _approve(owner, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev See {IERC20-transferFrom}.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n\r\n     *\r\n\r\n     * NOTE: Does not update the allowance if the current allowance\r\n\r\n     * is the maximum `uint256`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `from` and `to` cannot be the zero address.\r\n\r\n     * - `from` must have a balance of at least `amount`.\r\n\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n\r\n     * `amount`.\r\n\r\n     */\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n\r\n        _spendAllowance(from, spender, amount);\r\n\r\n        _transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n\r\n     *\r\n\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n\r\n     * problems described in {IERC20-approve}.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n\r\n     *\r\n\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n\r\n     * problems described in {IERC20-approve}.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     * - `spender` must have allowance for the caller of at least\r\n\r\n     * `subtractedValue`.\r\n\r\n     */\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    event FeeRate(\r\n        uint256 lpRateAmount,\r\n        uint256 lianchuangRateAmount,\r\n        uint256 buyANTSRateAmount,\r\n        uint256 fundsRateAmount\r\n    );\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n\r\n     *\r\n\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `from` cannot be the zero address.\r\n\r\n     * - `to` cannot be the zero address.\r\n\r\n     * - `from` must have a balance of at least `amount`.\r\n\r\n     */\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        if (isPair[to] && !inSwap) {\r\n            bool isOver = balanceOf(address(this)) >=\r\n                countMap[\"lianchuang\"] +\r\n                    countMap[\"buyANTS\"] +\r\n                    countMap[\"funds\"] +\r\n                    countMap[\"lp\"];\r\n\r\n            if (isOver) {\r\n                if (countMap[\"lp\"] > 0) {\r\n                    swapTokensForUsdt(countMap[\"lp\"], address(distributor));\r\n\r\n                    distributor.transfer(usdtAddress);\r\n\r\n                    uint256 newBalance = usdtAddress.balanceOf(address(this));\r\n\r\n                    _splitOtherTokenSecond(newBalance);\r\n\r\n                    countMap[\"lp\"] = 0;\r\n                }\r\n\r\n                if (countMap[\"lianchuang\"] > 0) {\r\n                    swapTokensForUsdt(\r\n                        countMap[\"lianchuang\"],\r\n                        lianchuangAddress\r\n                    );\r\n\r\n                    countMap[\"lianchuang\"] = 0;\r\n                }\r\n\r\n                if (\r\n                    countMap[\"buyANTS\"] > 0 &&\r\n                    getANTPrice(countMap[\"buyANTS\"]) >= numTokensSellToFund\r\n                ) {\r\n                    swapTokensForANTS(countMap[\"buyANTS\"]);\r\n\r\n                    countMap[\"buyANTS\"] = 0;\r\n                }\r\n\r\n                if (countMap[\"funds\"] > 0) {\r\n                    swapTokensForUsdt(countMap[\"funds\"], fundsAddress);\r\n\r\n                    countMap[\"funds\"] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        _balances[from] = fromBalance - amount;\r\n\r\n        uint256 toAmount = amount;\r\n\r\n        uint256 lpRateAmount = 0;\r\n\r\n        uint256 lianchuangRateAmount = 0;\r\n\r\n        uint256 buyANTSRateAmount = 0;\r\n\r\n        uint256 fundsRateAmount = 0;\r\n        bool isFee = false;\r\n        if((isPair[from] && !isFeeWhitelist(to))|| (isPair[to] && !isFeeWhitelist(from))){\r\n            isFee = true;\r\n        }\r\n\r\n        if (isFee) {\r\n            if (lpRate > 0) {\r\n                uint256 feeAmount = (amount * lpRate) / 10000;\r\n\r\n                toAmount = toAmount - feeAmount;\r\n\r\n                _balances[address(this)] = _balances[address(this)] + feeAmount;\r\n\r\n                countMap[\"lp\"] = countMap[\"lp\"] + feeAmount;\r\n\r\n                lpRateAmount = feeAmount;\r\n\r\n                emit Transfer(from, address(this), feeAmount);\r\n            }\r\n\r\n            if (lianchuangRate > 0) {\r\n                uint256 feeAmount = (amount * lianchuangRate) / 10000;\r\n\r\n                toAmount = toAmount - feeAmount;\r\n\r\n                _balances[address(this)] = _balances[address(this)] + feeAmount;\r\n\r\n                countMap[\"lianchuang\"] = countMap[\"lianchuang\"] + feeAmount;\r\n\r\n                lianchuangRateAmount = feeAmount;\r\n\r\n                emit Transfer(from, address(this), feeAmount);\r\n            }\r\n\r\n            if (buyANTSRate > 0) {\r\n                uint256 feeAmount = (amount * buyANTSRate) / 10000;\r\n\r\n                toAmount = toAmount - feeAmount;\r\n\r\n                _balances[address(this)] = _balances[address(this)] + feeAmount;\r\n\r\n                countMap[\"buyANTS\"] = countMap[\"buyANTS\"] + feeAmount;\r\n\r\n                buyANTSRateAmount = feeAmount;\r\n\r\n                emit Transfer(from, address(this), feeAmount);\r\n            }\r\n\r\n            if (fundsRate > 0) {\r\n                uint256 feeAmount = (amount * fundsRate) / 10000;\r\n\r\n                toAmount = toAmount - feeAmount;\r\n\r\n                _balances[address(this)] = _balances[address(this)] + feeAmount;\r\n\r\n                countMap[\"funds\"] = countMap[\"funds\"] + feeAmount;\r\n\r\n                fundsRateAmount = feeAmount;\r\n\r\n                emit Transfer(from, address(this), feeAmount);\r\n            }\r\n        }\r\n\r\n        if (!openPancake) {\r\n                //buy\r\n            if (isPair[from]) {\r\n                require(isPancakeWhitelist(to), \"Not on the whitelist\");\r\n            }\r\n                //sell\r\n             if (isPair[to]) {\r\n                require(isPancakeWhitelist(from), \"Not on the whitelist\");\r\n            }\r\n                //normalTransfer\r\n            if (!isPair[to] && !isPair[from]) {\r\n                require(\r\n                        isPancakeWhitelist(from),\r\n                        \"Not on the whitelist\"\r\n                );\r\n            }\r\n        }\r\n\r\n        if (isPair[from] || isPair[to]) {\r\n\r\n            bool canPancake = !openPancake &&\r\n                (isPancakeWhitelist(from) || isPancakeWhitelist(to));\r\n\r\n            if (canPancake && isPair[from]) {\r\n                pancakeCount[to] += toAmount;\r\n                require(\r\n                    getANTPrice(pancakeCount[to] == 0 ? 1 : pancakeCount[to]) <=\r\n                        minPancakeCount,\r\n                    \"Purchase limit reached\"\r\n                );\r\n            }\r\n        }\r\n\r\n        emit FeeRate(\r\n            lpRateAmount,\r\n            lianchuangRateAmount,\r\n            buyANTSRateAmount,\r\n            fundsRateAmount\r\n        );\r\n\r\n        _balances[to] = _balances[to] + toAmount;\r\n\r\n        if (isPair[from]) {}\r\n\r\n        if (!havePush[from] && from != pairAddress) setShare(from);\r\n\r\n        if (!havePush[to] && to != pairAddress) setShare(to);\r\n\r\n        emit Transfer(from, to, toAmount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n\r\n     * total supply.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `account` cannot be the zero address.\r\n\r\n     * - `account` must have at least `amount` tokens.\r\n\r\n     */\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n\r\n     *\r\n\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `owner` cannot be the zero address.\r\n\r\n     * - `spender` cannot be the zero address.\r\n\r\n     */\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n\r\n     *\r\n\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n\r\n     * Revert if not enough allowance is available.\r\n\r\n     *\r\n\r\n     * Might emit an {Approval} event.\r\n\r\n     */\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n\r\n     * minting and burning.\r\n\r\n     *\r\n\r\n     * Calling conditions:\r\n\r\n     *\r\n\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\r\n     * will be transferred to `to`.\r\n\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n\r\n     * - `from` and `to` are never both zero.\r\n\r\n     *\r\n\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\r\n     */\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n\r\n     * minting and burning.\r\n\r\n     *\r\n\r\n     * Calling conditions:\r\n\r\n     *\r\n\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n\r\n     * has been transferred to `to`.\r\n\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n\r\n     * - `from` and `to` are never both zero.\r\n\r\n     *\r\n\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\r\n     */\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function setIsPair(address _pairAddress, bool isFee) public onlyOwner {\r\n        isPair[_pairAddress] = isFee;\r\n    }\r\n\r\n    function swapTokensForUsdt(uint256 tokenAmount, address to)\r\n        private\r\n        lockTheSwap\r\n    {\r\n        require(tokenAmount > 0, \"too less\");\r\n\r\n        _allowances[address(this)][address(_uniswapV2Router)] = tokenAmount;\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = address(usdtAddress);\r\n\r\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForANTS(uint256 tokenAmount) private lockTheSwap {\r\n        require(tokenAmount > 0, \"too less\");\r\n\r\n        _allowances[address(this)][address(_uniswapV2Router)] = tokenAmount;\r\n\r\n        address[] memory path = new address[](3);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = address(usdtAddress);\r\n\r\n        path[2] = antsAddress;\r\n\r\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            buyANTSAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function setUsdtAddress(address _usdt) external onlyOwner {\r\n        usdtAddress = IERC20(_usdt);\r\n    }\r\n\r\n    function setAntsAddress(address _ants) external onlyOwner {\r\n        antsAddress = _ants;\r\n    }\r\n\r\n    function setBuyANTSAddress(address _buyANTSAddress) external onlyOwner {\r\n        buyANTSAddress = _buyANTSAddress;\r\n    }\r\n\r\n    function setRates(\r\n        uint256 _lpRate,\r\n        uint256 _lianchuangRate,\r\n        uint256 _fundsRate,\r\n        uint256 _buyANTSRate\r\n    ) external onlyOwner returns (bool) {\r\n        lpRate = _lpRate;\r\n        lianchuangRate = _lianchuangRate;\r\n        fundsRate = _fundsRate;\r\n        buyANTSRate = _buyANTSRate;\r\n        return true;\r\n    }\r\n\r\n    function setNumTokensSellToFund(uint256 _numTokensSellToFund)\r\n        external\r\n        onlyOwner\r\n    {\r\n        numTokensSellToFund = _numTokensSellToFund;\r\n    }\r\n\r\n    function getANTPrice(uint256 antAmount) public view returns (uint256) {\r\n        address[] memory mPath = new address[](2);\r\n\r\n        mPath[0] = address(this);\r\n\r\n        mPath[1] = address(usdtAddress);\r\n\r\n        uint256[] memory lpPrices = IUniswapV2Router02(uniswapRouterAddress)\r\n            .getAmountsOut(antAmount, mPath); //lpusdt\r\n\r\n        uint256 lpPrice = lpPrices[1];\r\n\r\n        return lpPrice;\r\n    }\r\n\r\n    function _splitOtherTokenSecond(uint256 thisAmount) private {\r\n        IERC20 pair = lpDividendInfo.token;\r\n\r\n        if (thisAmount < lpDividendInfo.minSendAmount) {\r\n            return;\r\n        }\r\n\r\n        uint256 shareholderCount = buyUser.length;\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 totalAmount = pair.totalSupply();\r\n\r\n        uint256 index = lpDividendInfo.index;\r\n\r\n        uint256 sendedCount = 0;\r\n\r\n        uint256 iterations = 0;\r\n\r\n        uint256 sendCountLimit = lpDividendInfo.sendMemberCount;\r\n\r\n        while (sendedCount < sendCountLimit && iterations < shareholderCount) {\r\n            if (index >= shareholderCount) {\r\n                index = 0;\r\n            }\r\n\r\n            address user = buyUser[index];\r\n\r\n            uint256 rate;\r\n\r\n            if (\r\n                pair.balanceOf(user) >= lpDividendInfo.hodlerNumTokensToSplite\r\n            ) {\r\n                rate = pair.balanceOf(user).mul(_totalSupply).div(totalAmount);\r\n\r\n                uint256 amountReward = lpDividendInfo\r\n                    .minSendAmount\r\n                    .mul(rate)\r\n                    .div(_totalSupply);\r\n\r\n                if (amountReward > 10**13) {\r\n                    usdtAddress.transfer(user, amountReward);\r\n                }\r\n            }\r\n\r\n            sendedCount++;\r\n\r\n            iterations++;\r\n\r\n            index++;\r\n        }\r\n\r\n        lpDividendInfo.index = index;\r\n    }\r\n\r\n    function rescueToken(address tokenAddress, uint256 tokens)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        return IERC20(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function shareholderLength() public view virtual returns (uint256) {\r\n        return buyUser.length;\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (_updated[shareholder]) {\r\n            //none lp\r\n\r\n            if (\r\n                IERC20(pairAddress).balanceOf(shareholder) <\r\n                lpDividendInfo.hodlerNumTokensToSplite\r\n            ) quitShare(shareholder);\r\n\r\n            return;\r\n        }\r\n\r\n        //none lp\r\n\r\n        if (\r\n            IERC20(pairAddress).balanceOf(shareholder) <\r\n            lpDividendInfo.hodlerNumTokensToSplite\r\n        ) return;\r\n\r\n        //add lp holder\r\n\r\n        addShareholder(shareholder);\r\n\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = buyUser.length;\r\n\r\n        buyUser.push(shareholder);\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n    // remove shareholder\r\n\r\n    function removeShareholder(address shareholder) private {\r\n        buyUser[shareholderIndexes[shareholder]] = buyUser[buyUser.length - 1];\r\n\r\n        shareholderIndexes[buyUser[buyUser.length - 1]] = shareholderIndexes[\r\n            shareholder\r\n        ];\r\n\r\n        buyUser.pop();\r\n    }\r\n\r\n    function changelpDividendInfo(\r\n        uint256 dividNumber,\r\n        uint256 dividLimit,\r\n        uint256 userHodlerAmount\r\n    ) external onlyOwner {\r\n        lpDividendInfo = lpDividend(\r\n            lpDividendInfo.index,\r\n            dividNumber,\r\n            dividLimit,\r\n            userHodlerAmount,\r\n            IERC20(pairAddress)\r\n        );\r\n    }\r\n\r\n    function changePancakeSetting(bool _openPancake, uint256 _minPancakeCount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        minPancakeCount = _minPancakeCount;\r\n\r\n        openPancake = _openPancake;\r\n    }\r\n\r\n    function getlpDividendInfo() public view returns (lpDividend memory info) {\r\n        return lpDividendInfo;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Add a whitelist address that calls the mint function\r\n\r\n     * @param account Whitelist address to be added\r\n\r\n     */\r\n\r\n    function addFeeWhitelist(address account)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"nft: account is the zero address\");\r\n\r\n        _feeWhiteList.add(account);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev delete a whitelist address that calls the mint function\r\n\r\n     * @param account Whitelist address to be deleted\r\n\r\n     */\r\n\r\n    function delFeeWhitelist(address account)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"nft: account is the zero address\");\r\n\r\n        _feeWhiteList.remove(account);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getFeeWhitelistLength() public view returns (uint256) {\r\n        return _feeWhiteList.length();\r\n    }\r\n\r\n    function isFeeWhitelist(address account) public view returns (bool) {\r\n        return _feeWhiteList.contains(account);\r\n    }\r\n\r\n    function getFeeWhitelist(uint256 _index)\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (address)\r\n    {\r\n        require(\r\n            _index <= getFeeWhitelistLength() - 1,\r\n            \"nft: index out of bounds\"\r\n        );\r\n\r\n        return _feeWhiteList.at(_index);\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev Add a whitelist address that calls the mint function\r\n\r\n     * @param account Whitelist address to be added\r\n\r\n     */\r\n\r\n    function addPancakeWhitelist(address account)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"nft: account is the zero address\");\r\n\r\n        _pancakeWhiteList.add(account);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n\r\n     * @dev delete a whitelist address that calls the mint function\r\n\r\n     * @param account Whitelist address to be deleted\r\n\r\n     */\r\n\r\n    function delPancakeWhitelist(address account)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(account != address(0), \"nft: account is the zero address\");\r\n\r\n        _pancakeWhiteList.remove(account);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getPancakeWhitelistLength() public view returns (uint256) {\r\n        return _pancakeWhiteList.length();\r\n    }\r\n\r\n    function isPancakeWhitelist(address account) public view returns (bool) {\r\n        return _pancakeWhiteList.contains(account);\r\n    }\r\n\r\n    function getPancakeeWhitelist(uint256 _index)\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (address)\r\n    {\r\n        require(\r\n            _index <= getPancakeWhitelistLength() - 1,\r\n            \"nft: index out of bounds\"\r\n        );\r\n\r\n        return _pancakeWhiteList.at(_index);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpRateAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lianchuangRateAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyANTSRateAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsRateAmount\",\"type\":\"uint256\"}],\"name\":\"FeeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addFeeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPancakeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyANTSAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_openPancake\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minPancakeCount\",\"type\":\"uint256\"}],\"name\":\"changePancakeSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dividNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userHodlerAmount\",\"type\":\"uint256\"}],\"name\":\"changelpDividendInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"countMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delFeeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delPancakeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"antAmount\",\"type\":\"uint256\"}],\"name\":\"getANTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFeeWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeWhitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPancakeWhitelistLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPancakeeWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlpDividendInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendMemberCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hodlerNumTokensToSplite\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct ANTToken.lpDividend\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFeeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPancakeWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lianchuangAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPancakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPancake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pancakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ants\",\"type\":\"address\"}],\"name\":\"setAntsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyANTSAddress\",\"type\":\"address\"}],\"name\":\"setBuyANTSAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isFee\",\"type\":\"bool\"}],\"name\":\"setIsPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokensSellToFund\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lianchuangRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundsRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyANTSRate\",\"type\":\"uint256\"}],\"name\":\"setRates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareholderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ANTToken", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7d3ba8574716bf8f19f21dae096005b108546403925225b89957cbaf024c5588"}