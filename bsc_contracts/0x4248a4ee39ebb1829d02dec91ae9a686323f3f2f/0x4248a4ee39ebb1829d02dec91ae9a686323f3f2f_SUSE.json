{"SourceCode": "{\"Address.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n\\r\\nlibrary Address {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function symbol() external view returns(string memory);\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set \\u0026 change owner\\r\\n */\\r\\ncontract Ownable {\\r\\n\\r\\n    address private owner;\\r\\n    \\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n    \\r\\n    // modifier to check if caller is owner\\r\\n    modifier onlyOwner() {\\r\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public onlyOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address \\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"SUSE.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * SurgeUseless Interface\\r\\n */\\r\\ninterface ISUSE is IERC20 {\\r\\n    function sell(uint256 amount) external;\\r\\n    function getUnderlyingAsset() external returns(address);\\r\\n    function mintWithBacking(uint256 numTokens) external returns(bool);\\r\\n    function mintWithBacking(address recipient, uint256 numTokens) external returns (bool);\\r\\n    function burn(uint256 nHoldings) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * Contract: SUSE Token\\r\\n * Developed By: Markymark ( DeFi Mark / MoonMark )\\r\\n *\\r\\n * Token with a built in Automated Market Maker\\r\\n * Send BNB to contract and it will mint SUSE Tokens\\r\\n * Stake USELESS into contract and it will mint SUSE Tokens\\r\\n * Sell this token to redeem underlying USELESS Tokens\\r\\n * Price is calculated as a ratio between Total Supply and underlying asset quantity in Contract\\r\\n */\\r\\ncontract SUSE is Ownable, ISUSE {\\r\\n    \\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    // token data\\r\\n    string constant _name = \\\"SurgeUseless\\\";\\r\\n    string constant _symbol = \\\"SUSE\\\";\\r\\n    uint8 constant _decimals = 18;\\r\\n    uint256 constant precision = 10**18;\\r\\n    \\r\\n    // 21B SUSE Starting Supply\\r\\n    uint256 _totalSupply = 21 * 10**6 * 10**18;\\r\\n    \\r\\n    // balances\\r\\n    mapping (address =\\u003e uint256) _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) _allowances;\\r\\n\\r\\n    // Fees\\r\\n    uint256 public mintFee                 = 98500;   // 1.50% mint fee\\r\\n    uint256 public sellFee                 = 98500;   // 1.50% sell fee \\r\\n    uint256 public transferFee             = 99250;   // 0.75% transfer fee\\r\\n    uint256 public constant feeDenominator = 10**5;\\r\\n    \\r\\n    // Underlying Asset\\r\\n    address public constant _token = 0x60d66a5152612F7D550796910d022Cb2c77B09de;\\r\\n    \\r\\n    // fee exemption for staking / utility\\r\\n    mapping ( address =\\u003e bool ) public isFeeExempt;\\r\\n    \\r\\n    // PCS Router\\r\\n    IUniswapV2Router02 _router; \\r\\n    \\r\\n    // BNB -\\u003e Token\\r\\n    address[] path;\\r\\n    \\r\\n    // Activates Token Trading\\r\\n    bool Token_Activated;\\r\\n    \\r\\n    // fund data \\r\\n    address _fund;\\r\\n    uint256 _fundFee;\\r\\n\\r\\n    // Reentrancy Guard\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n    uint256 private _status;\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n        _status = _ENTERED;\\r\\n        _;\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n        \\r\\n        // Reentrancy\\r\\n        _status = _NOT_ENTERED;\\r\\n\\r\\n        // router\\r\\n        _router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n        path = new address[](2);\\r\\n        path[0] = _router.WETH();\\r\\n        path[1] = _token;\\r\\n        \\r\\n        // Resource Collector Info\\r\\n        _fundFee = 25;\\r\\n        \\r\\n        // fee exempt fund + owner + router for LP injection\\r\\n        isFeeExempt[msg.sender] = true;\\r\\n        isFeeExempt[0x10ED43C718714eb63d5aA57B78B54704E256024E] = true;\\r\\n        isFeeExempt[_fund] = true;\\r\\n        \\r\\n        // allocate one token to dead wallet to ensure total supply never reaches 0\\r\\n        _balances[msg.sender] = _totalSupply;\\r\\n \\r\\n        // emit allocations\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\r\\n    \\r\\n    function name() public pure override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n  \\r\\n    /** Transfer Function */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** Transfer Function */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\u0027Insufficient Allowance\\u0027);\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n    \\r\\n    /** Internal Transfer */\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        // make standard checks\\r\\n        require(recipient != address(0) \\u0026\\u0026 sender != address(0), \\\"Transfer To Zero Address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        // track price change\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        \\r\\n        // fee exempt\\r\\n        bool takeFee = !( isFeeExempt[sender] || isFeeExempt[recipient] );\\r\\n        \\r\\n        // amount to give recipient\\r\\n        uint256 tAmount = takeFee ? amount.mul(transferFee).div(feeDenominator) : amount;\\r\\n        \\r\\n        // tax taken from transfer\\r\\n        uint256 tax = amount.sub(tAmount);\\r\\n        \\r\\n        // subtract from sender\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"Insufficient Balance\\\");\\r\\n        \\r\\n        if (_fundFee \\u003e 0 \\u0026\\u0026 sender != _fund \\u0026\\u0026 recipient != _fund \\u0026\\u0026 takeFee) {\\r\\n            \\r\\n            // allocate percentage to Funding\\r\\n            uint256 allocation = tax.mul(_fundFee).div(100);\\r\\n            \\r\\n            if (allocation \\u003e 0) {\\r\\n                _mint(_fund, allocation);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // give reduced amount to receiver\\r\\n        _balances[recipient] = _balances[recipient].add(tAmount);\\r\\n        \\r\\n        // burn the tax\\r\\n        if (tax \\u003e 0) {\\r\\n            _totalSupply = _totalSupply.sub(tax);\\r\\n            emit Transfer(sender, address(0), tax);\\r\\n        }\\r\\n        \\r\\n        // Price difference\\r\\n        uint256 currentPrice = _calculatePrice();\\r\\n        // Require Current Price \\u003e= Last Price\\r\\n        require(currentPrice \\u003e= oldPrice, \\u0027Price Must Rise For Transaction To Conclude\\u0027);\\r\\n        // Transfer Event\\r\\n        emit Transfer(sender, recipient, tAmount);\\r\\n        // Emit The Price Change\\r\\n        emit PriceChange(oldPrice, currentPrice, _totalSupply);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    /** Stake Tokens and Deposits SUSE in Sender\\u0027s Address, Must Have Prior Approval */\\r\\n    function mintWithBacking(uint256 numTokens) external override nonReentrant returns (bool) {\\r\\n        return _stakeUnderlyingAsset(numTokens, msg.sender);\\r\\n    }\\r\\n    \\r\\n    /** Stake Underlying Asset Tokens and Deposits SUSE in Recipient\\u0027s Address, Must Have Prior Approval */\\r\\n    function mintWithBacking(address recipient, uint256 numTokens) external override nonReentrant returns (bool) {\\r\\n        return _stakeUnderlyingAsset(numTokens, recipient);\\r\\n    }\\r\\n    \\r\\n    /** Sells SUSE Tokens And Deposits Underlying Asset Tokens into Seller\\u0027s Address */\\r\\n    function sell(uint256 tokenAmount) external override nonReentrant {\\r\\n        _sell(tokenAmount, msg.sender);\\r\\n    }\\r\\n    \\r\\n    /** Sells SUSE Tokens And Deposits Underlying Asset Tokens into Recipients\\u0027s Address */\\r\\n    function sell(address recipient, uint256 tokenAmount) external nonReentrant {\\r\\n        _sell(tokenAmount, recipient);\\r\\n    }\\r\\n    \\r\\n    /** Sells All SUSE Tokens And Deposits Underlying Asset Tokens into Seller\\u0027s Address */\\r\\n    function sellAll() external nonReentrant {\\r\\n        _sell(_balances[msg.sender], msg.sender);\\r\\n    }\\r\\n    \\r\\n    /** Sells Without Including Decimals */\\r\\n    function sellInWholeTokenAmounts(uint256 amount) external nonReentrant {\\r\\n        _sell(amount.mul(10**_decimals), msg.sender);\\r\\n    }\\r\\n    \\r\\n    /** Deletes SUSE Tokens Sent To Contract */\\r\\n    function takeOutGarbage() external nonReentrant {\\r\\n        _checkGarbageCollector();\\r\\n    }\\r\\n\\r\\n    /** Mints SUSE Tokens With BNB For `recipient` */\\r\\n    function mintWithNative(address recipient) external payable {\\r\\n        require(msg.value \\u003e 0, \\u0027Zero Value\\u0027);\\r\\n        _purchase(recipient);\\r\\n    }\\r\\n    \\r\\n    /** Allows A User To Erase `nTokens` From Their Balance And Supply */\\r\\n    function burn(uint256 nTokens) external override {\\r\\n        // get balance of caller\\r\\n        uint256 bal = _balances[msg.sender];\\r\\n        require(bal \\u003e= nTokens \\u0026\\u0026 bal \\u003e 0, \\u0027Zero Holdings\\u0027);\\r\\n        // if zero erase full balance\\r\\n        uint256 burnAmount = nTokens == 0 ? bal : nTokens;\\r\\n        // Track Change In Price\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        // burn tokens from sender + supply\\r\\n        _burn(msg.sender, burnAmount);\\r\\n        // Emit Price Difference\\r\\n        emit PriceChange(oldPrice, _calculatePrice(), _totalSupply);\\r\\n        // Emit Call\\r\\n        emit Burned(msg.sender, burnAmount);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////  INTERNAL FUNCTIONS  ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    /** Purchases SUSE Token and Deposits Them in Recipient\\u0027s Address */\\r\\n    function _purchase(address recipient) private nonReentrant returns (bool) {\\r\\n        // make sure emergency mode is disabled\\r\\n        require(Token_Activated, \\u0027Token Not Activated\\u0027);\\r\\n        // calculate price change\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        // previous amount of Tokens before we received any\\r\\n        uint256 prevTokenAmount = IERC20(_token).balanceOf(address(this));\\r\\n        // buy Token with the BNB received\\r\\n        _router.swapExactETHForTokens{value: msg.value}(\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp.add(30)\\r\\n        );\\r\\n        // balance of tokens after swap\\r\\n        uint256 currentTokenAmount = IERC20(_token).balanceOf(address(this));\\r\\n        // number of Tokens we have purchased\\r\\n        uint256 difference = currentTokenAmount.sub(prevTokenAmount);\\r\\n        // if this is the first purchase, use new amount\\r\\n        prevTokenAmount = prevTokenAmount == 0 ? currentTokenAmount : prevTokenAmount;\\r\\n        // differentiate purchase\\r\\n        emit TokenPurchased(difference, recipient);\\r\\n        // mint to recipient\\r\\n        return _handleMinting(recipient, difference, prevTokenAmount, oldPrice);\\r\\n    }\\r\\n    \\r\\n    /** Stake Tokens and Deposits SUSE in Sender\\u0027s Address, Must Have Prior Approval */\\r\\n    function _stakeUnderlyingAsset(uint256 numTokens, address recipient) internal returns (bool) {\\r\\n        // make sure emergency mode is disabled\\r\\n        require(Token_Activated, \\u0027Token Not Activated\\u0027);\\r\\n        // users token balance\\r\\n        uint256 userTokenBalance = IERC20(_token).balanceOf(msg.sender);\\r\\n        // ensure user has enough to send\\r\\n        require(userTokenBalance \\u003e 0 \\u0026\\u0026 numTokens \\u003c= userTokenBalance, \\u0027Insufficient Balance\\u0027);\\r\\n        // calculate price change\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        // previous amount of Tokens before any are received\\r\\n        uint256 prevTokenAmount = IERC20(_token).balanceOf(address(this));\\r\\n        // move asset into SUSE Token\\r\\n        bool success = IERC20(_token).transferFrom(msg.sender, address(this), numTokens);\\r\\n        // balance of tokens after transfer\\r\\n        uint256 currentTokenAmount = IERC20(_token).balanceOf(address(this));\\r\\n        // number of Tokens we have purchased\\r\\n        uint256 difference = currentTokenAmount.sub(prevTokenAmount);\\r\\n        // ensure nothing unexpected happened\\r\\n        require(difference \\u003c= numTokens \\u0026\\u0026 difference \\u003e 0, \\u0027Failure on Token Evaluation\\u0027);\\r\\n        // ensure a successful transfer\\r\\n        require(success, \\u0027Failure On Token TransferFrom\\u0027);\\r\\n        // if this is the first purchase, use new amount\\r\\n        prevTokenAmount = prevTokenAmount == 0 ? currentTokenAmount : prevTokenAmount;\\r\\n        // Emit Staked\\r\\n        emit TokenStaked(difference, recipient);\\r\\n        // Handle Minting\\r\\n        return _handleMinting(recipient, difference, prevTokenAmount, oldPrice);\\r\\n    }\\r\\n    \\r\\n    /** Sells SUSE Tokens And Deposits Underlying Asset Tokens into Recipients\\u0027s Address */\\r\\n    function _sell(uint256 tokenAmount, address recipient) internal {\\r\\n        require(tokenAmount \\u003e 0 \\u0026\\u0026 _balances[msg.sender] \\u003e= tokenAmount);\\r\\n        // calculate price change\\r\\n        uint256 oldPrice = _calculatePrice();\\r\\n        // fee exempt\\r\\n        bool takeFee = !isFeeExempt[msg.sender];\\r\\n        \\r\\n        // tokens post fee to swap for underlying asset\\r\\n        uint256 tokensToSwap = takeFee ? tokenAmount.mul(sellFee).div(feeDenominator) : tokenAmount.sub(10, \\u002710 Asset Minimum For Fee Exemption\\u0027);\\r\\n\\r\\n        // value of taxed tokens\\r\\n        uint256 amountUnderlyingAsset = (tokensToSwap.mul(oldPrice)).div(precision);\\r\\n        // require above zero value\\r\\n        require(amountUnderlyingAsset \\u003e 0, \\u0027Zero Assets To Redeem For Given Value\\u0027);\\r\\n        \\r\\n        // burn from sender + supply \\r\\n        _burn(msg.sender, tokenAmount);\\r\\n\\r\\n        uint256 allocation = 0;\\r\\n        if (_fundFee \\u003e 0 \\u0026\\u0026 msg.sender != _fund \\u0026\\u0026 takeFee) {\\r\\n            // tax taken\\r\\n            uint256 taxTaken = tokenAmount.sub(tokensToSwap);\\r\\n            // allocate percentage to Fund\\r\\n            allocation = taxTaken.mul(_fundFee).div(100);\\r\\n            if (allocation \\u003e 0) {\\r\\n                // mint to Fund\\r\\n                _mint(_fund, allocation);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // send Tokens to Seller\\r\\n        bool successful = IERC20(_token).transfer(recipient, amountUnderlyingAsset);\\r\\n        // ensure Tokens were delivered\\r\\n        require(successful, \\u0027Underlying Asset Transfer Failure\\u0027);\\r\\n        // get current price\\r\\n        uint256 newPrice = _calculatePrice();\\r\\n        // Require Current Price \\u003e= Last Price\\r\\n        require(newPrice \\u003e= oldPrice, \\u0027Price Must Rise For Transaction To Conclude\\u0027);\\r\\n        // Differentiate Sell\\r\\n        emit TokenSold(tokenAmount, amountUnderlyingAsset, recipient);\\r\\n        // Emit The Price Change\\r\\n        emit PriceChange(oldPrice, newPrice, _totalSupply);\\r\\n    }\\r\\n    \\r\\n    /** Handles Minting Logic To Create New Surge Tokens*/\\r\\n    function _handleMinting(address recipient, uint256 received, uint256 prevTokenAmount, uint256 oldPrice) private returns(bool) {\\r\\n\\r\\n        // fee exempt\\r\\n        bool takeFee = !isFeeExempt[msg.sender];\\r\\n        \\r\\n        // find the number of tokens we should mint to keep up with the current price\\r\\n        uint256 tokensToMintNoTax = _totalSupply.mul(received).div(prevTokenAmount);\\r\\n        \\r\\n        // apply fee to minted tokens to inflate price relative to total supply\\r\\n        uint256 tokensToMint = takeFee ? tokensToMintNoTax.mul(mintFee).div(feeDenominator) : tokensToMintNoTax.sub(10, \\u002710 Asset Minimum For Fee Exemption\\u0027);\\r\\n\\r\\n        // revert if under 1\\r\\n        require(tokensToMint \\u003e 0, \\u0027Must Purchase At Least One SUSE\\u0027);\\r\\n        \\r\\n        if (_fundFee \\u003e 0 \\u0026\\u0026 takeFee) {\\r\\n            // difference\\r\\n            uint256 taxTaken = tokensToMintNoTax.sub(tokensToMint);\\r\\n            // allocate tokens to go to the Fund\\r\\n            uint256 allocation = taxTaken.mul(_fundFee).div(100);\\r\\n            // allocate if greater than zero\\r\\n            if (allocation \\u003e 0) {\\r\\n                // mint to Fund\\r\\n                _mint(_fund, allocation);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // mint to Buyer\\r\\n        _mint(recipient, tokensToMint);\\r\\n        // Calculate Price After Transaction\\r\\n        uint256 newPrice = _calculatePrice();\\r\\n        // Require Current Price \\u003e= Last Price\\r\\n        require(newPrice \\u003e= oldPrice, \\u0027Price Must Rise For Transaction To Conclude\\u0027);\\r\\n        // Emit The Price Change\\r\\n        emit PriceChange(oldPrice, newPrice, _totalSupply);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    /** Mints Tokens to the Receivers Address */\\r\\n    function _mint(address receiver, uint amount) private {\\r\\n        _balances[receiver] = _balances[receiver].add(amount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        emit Transfer(address(0), receiver, amount);\\r\\n    }\\r\\n    \\r\\n    /** Mints Tokens to the Receivers Address */\\r\\n    function _burn(address receiver, uint amount) private {\\r\\n        _balances[receiver] = _balances[receiver].sub(amount, \\u0027Insufficient Balance\\u0027);\\r\\n        _totalSupply = _totalSupply.sub(amount, \\u0027Negative Supply\\u0027);\\r\\n        emit Transfer(receiver, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /** Make Sure there\\u0027s no Native Tokens in contract */\\r\\n    function _checkGarbageCollector() internal {\\r\\n        uint256 bal = _balances[address(this)];\\r\\n        if (bal \\u003e 10) {\\r\\n            // Track Change In Price\\r\\n            uint256 oldPrice = _calculatePrice();\\r\\n            // burn amount\\r\\n            _burn(address(this), bal);\\r\\n            // Emit Collection\\r\\n            emit GarbageCollected(bal);\\r\\n            // Emit Price Difference\\r\\n            emit PriceChange(oldPrice, _calculatePrice(), _totalSupply);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////    READ FUNCTIONS    ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    \\r\\n    /** Price Of SUSE in 1USE With 18 Points Of Precision */\\r\\n    function calculatePrice() external view returns (uint256) {\\r\\n        return _calculatePrice();\\r\\n    }\\r\\n    \\r\\n    /** Returns the Current Price of 1 Token */\\r\\n    function _calculatePrice() internal view returns (uint256) {\\r\\n        uint256 tokenBalance = IERC20(_token).balanceOf(address(this));\\r\\n        return (tokenBalance.mul(precision)).div(_totalSupply);\\r\\n    }\\r\\n\\r\\n    /** Returns the value of your holdings before the sell fee */\\r\\n    function getValueOfHoldings(address holder) public view returns(uint256) {\\r\\n        return _balances[holder].mul(_calculatePrice()).div(precision);\\r\\n    }\\r\\n\\r\\n    /** Returns the value of your holdings after the sell fee */\\r\\n    function getValueOfHoldingsAfterTax(address holder) external view returns(uint256) {\\r\\n        return getValueOfHoldings(holder).mul(sellFee).div(feeDenominator);\\r\\n    }\\r\\n\\r\\n    /** Returns The Address of the Underlying Asset */\\r\\n    function getUnderlyingAsset() external override pure returns(address) {\\r\\n        return _token;\\r\\n    }\\r\\n\\r\\n    /** Returns Taxation Percentage Taken From Tokenomics For Resource Collector */\\r\\n    function resourceCollectorFee() external view returns (uint256) {\\r\\n        return _fundFee;\\r\\n    }\\r\\n\\r\\n    /** Returns Destination Of Taxation Percentage Taken */\\r\\n    function resourceCollector() external view returns (address) {\\r\\n        return _fund;\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////   OWNER FUNCTIONS    ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    \\r\\n    /** Enables Trading For This Token, This Action Cannot be Undone */\\r\\n    function ActivateToken() external onlyOwner {\\r\\n        require(!Token_Activated, \\u0027Already Activated Token\\u0027);\\r\\n        Token_Activated = true;\\r\\n        emit TokenActivated();\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        Sets Mint, Transfer, Sell Fee\\r\\n        Must Be Within Bounds ( Between 0% - 3% ) \\r\\n    */\\r\\n    function setFees(uint256 _mintFee, uint256 _transferFee, uint256 _sellFee) external onlyOwner {\\r\\n        require(_mintFee \\u003e= 97000);      // capped at 2% fee\\r\\n        require(_transferFee \\u003e= 97000);  // capped at 2% fee\\r\\n        require(_sellFee \\u003e= 97000);      // capped at 2% fee\\r\\n        \\r\\n        mintFee = _mintFee;\\r\\n        transferFee = _transferFee;\\r\\n        sellFee = _sellFee;\\r\\n        emit SetFees(_mintFee, _transferFee, _sellFee);\\r\\n    }\\r\\n    \\r\\n    /** Updates The Buy/Sell/Stake and Transfer Fee Allocated Toward Funding */\\r\\n    function updateFundingFee(uint256 _fundingFee) external onlyOwner {\\r\\n        require(_fundingFee \\u003c= 100, \\u0027Fee Too High\\u0027);\\r\\n        _fundFee = _fundingFee;\\r\\n        emit UpdatedFundingFee(_fundingFee);\\r\\n    }\\r\\n    \\r\\n    /** Updates The Address Of The Fund Receiver */\\r\\n    function updateResourceCollector(address newCollector) external onlyOwner {\\r\\n        _fund = newCollector;\\r\\n        emit UpdatedFundAddress(newCollector);\\r\\n    }\\r\\n    \\r\\n    /** Excludes Contract From Fees */\\r\\n    function setFeeExemption(address Contract, bool exempt) external onlyOwner {\\r\\n        require(Contract != address(0));\\r\\n        isFeeExempt[Contract] = exempt;\\r\\n        emit SetFeeExemption(Contract, exempt);\\r\\n    }\\r\\n    \\r\\n    /** Mint Tokens to Buyer */\\r\\n    receive() external payable {\\r\\n        require(msg.value \\u003e 0, \\u0027Zero Value\\u0027);\\r\\n        _checkGarbageCollector();\\r\\n        _purchase(msg.sender);\\r\\n    }\\r\\n    \\r\\n    ///////////////////////////////////\\r\\n    //////        EVENTS        ///////\\r\\n    ///////////////////////////////////\\r\\n    \\r\\n    event SetFees(uint mintFee, uint transferFee, uint sellFee);\\r\\n    event PriceChange(uint256 previousPrice, uint256 currentPrice, uint256 totalSupply);\\r\\n    event Burned(address who, uint256 amountTokensErased);\\r\\n    event UpdatedFundAddress(address newFund);\\r\\n    event GarbageCollected(uint256 amountTokensErased);\\r\\n    event UpdatedFundingFee(uint fundingFee);\\r\\n    event TokenStaked(uint256 assetsReceived, address recipient);\\r\\n    event SetFeeExemption(address Contract, bool exempt);\\r\\n    event TokenActivated();\\r\\n    event TokenSold(uint256 amountSUSE, uint256 assetsRedeemed, address recipient);\\r\\n    event TokenPurchased(uint256 assetsReceived, address recipient);\\r\\n    \\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokensErased\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokensErased\",\"type\":\"uint256\"}],\"name\":\"GarbageCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokenPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSUSE\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokenStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFund\",\"type\":\"address\"}],\"name\":\"UpdatedFundAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundingFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedFundingFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ActivateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nTokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getValueOfHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getValueOfHoldingsAfterTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"mintWithBacking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"mintWithBacking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourceCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourceCollectorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellInWholeTokenAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFeeExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeOutGarbage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fundingFee\",\"type\":\"uint256\"}],\"name\":\"updateFundingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"updateResourceCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SUSE", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://babfc71bfc6f614ab48ff4dd9e3857f4f41eb2a8deeac4522de678d702e6221b"}