{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/bsc/PronteraV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../libraries/Math.sol\\\";\\n\\nimport \\\"./interfaces/IPronteraReserve.sol\\\";\\nimport \\\"./interfaces/IIzludeV2.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract PronteraV2 is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n    using Address for address;\\n    using Address for address payable;\\n\\n    IWETH public constant WETH = IWETH(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 jellopy;\\n        uint256 rewardDebt;\\n        uint256 storedJellopy;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 want;\\n        address izlude;\\n        uint256 accKSWPerJellopy;\\n        uint64 allocPoint;\\n        uint64 lastRewardTime;\\n    }\\n\\n    // Reserve\\n    IPronteraReserve public immutable reserve;\\n\\n    // KSW address\\n    address public immutable ksw;\\n    // KSW tokens rewards per second.\\n    uint256 public kswPerSecond;\\n\\n    // Info of each pool.\\n    address[] public traversalPools;\\n    mapping(address => bool) public isInTraversalPools; // remember is izlude in traversal\\n    mapping(address => PoolInfo) public poolInfo;\\n    uint256 public totalPool;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n\\n    // Info of each user that stakes to izlude.\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n    // [user] [izlude] [store] => amount\\n    mapping(address => mapping(address => mapping(address => uint256))) private _storeAllowances;\\n    mapping(address => mapping(address => mapping(address => uint256))) public jellopyStorage;\\n\\n    // Juno transportation\\n    address public juno;\\n    address public junoGuide;\\n\\n    event Deposit(address indexed user, address indexed izlude, uint256 amount);\\n    event DepositFor(address indexed user, address indexed izlude, uint256 amount);\\n    event DepositToken(address indexed user, address indexed izlude, uint256[] tokenAmount, uint256 amount);\\n    event DepositEther(address indexed user, address indexed izlude, uint256 value, uint256 amount);\\n    event Withdraw(address indexed user, address indexed izlude, uint256 amount);\\n    event WithdrawToken(address indexed user, address indexed izlude, uint256 jellopyAmount, uint256 tokenAmount);\\n    event WithdrawEther(address indexed user, address indexed izlude, uint256 jellopyAmount, uint256 value);\\n    event EmergencyWithdraw(address indexed user, address indexed izlude, uint256 amount);\\n\\n    event StoreApproval(address indexed owner, address indexed izlude, address indexed spender, uint256 value);\\n    event StoreKeepJellopy(address indexed owner, address indexed izlude, address indexed store, uint256 value);\\n    event StoreReturnJellopy(address indexed user, address indexed izlude, address indexed store, uint256 amount);\\n    event StoreWithdraw(address indexed user, address indexed izlude, address indexed store, uint256 amount);\\n\\n    event AddPool(address indexed izlude, uint256 allocPoint, bool withUpdate);\\n    event SetPool(address indexed izlude, uint256 allocPoint, bool withUpdate);\\n    event SetKSWPerSecond(uint256 kswPerSecond);\\n    event SetJuno(address juno);\\n    event SetJunoGuide(address junoGuide);\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Prontera: EXPIRED\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IPronteraReserve _reserve,\\n        address _ksw,\\n        uint256 _kswPerSecond,\\n        address _juno,\\n        address _junoGuide\\n    ) {\\n        reserve = _reserve;\\n        kswPerSecond = _kswPerSecond;\\n        juno = _juno;\\n        junoGuide = _junoGuide;\\n        ksw = _ksw;\\n    }\\n\\n    function traversalPoolsLength() external view returns (uint256) {\\n        return traversalPools.length;\\n    }\\n\\n    function _addTraversal(address izlude) private {\\n        if (isInTraversalPools[izlude]) {\\n            return;\\n        }\\n\\n        isInTraversalPools[izlude] = true;\\n        traversalPools.push(izlude);\\n    }\\n\\n    function removeTraversal(uint256 index) external {\\n        address izlude = traversalPools[index];\\n        require(poolInfo[izlude].allocPoint == 0, \\\"allocated\\\");\\n\\n        isInTraversalPools[izlude] = false;\\n        traversalPools[index] = traversalPools[traversalPools.length - 1];\\n        traversalPools.pop();\\n    }\\n\\n    // Add a new izlude to the pool.\\n    function add(\\n        address izlude,\\n        uint64 allocPoint,\\n        bool withUpdate\\n    ) external onlyOwner {\\n        require(IIzludeV2(izlude).prontera() == address(this), \\\"?\\\");\\n        require(IIzludeV2(izlude).totalSupply() >= 0, \\\"??\\\");\\n        require(poolInfo[izlude].izlude == address(0), \\\"duplicated\\\");\\n        if (withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        poolInfo[izlude] = PoolInfo({\\n            want: IIzludeV2(izlude).want(),\\n            izlude: izlude,\\n            allocPoint: allocPoint,\\n            lastRewardTime: uint64(block.timestamp),\\n            accKSWPerJellopy: 0\\n        });\\n        totalPool += 1;\\n        totalAllocPoint += allocPoint;\\n        if (allocPoint > 0) {\\n            _addTraversal(izlude);\\n        }\\n        emit AddPool(izlude, allocPoint, withUpdate);\\n    }\\n\\n    // Update the given pool's KSW allocation point.\\n    function set(\\n        address izlude,\\n        uint64 allocPoint,\\n        bool withUpdate\\n    ) external onlyOwner {\\n        require(izlude != address(0), \\\"invalid izlude\\\");\\n        PoolInfo storage pool = poolInfo[izlude];\\n        require(pool.izlude == izlude, \\\"!found\\\");\\n        if (withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        totalAllocPoint = (totalAllocPoint - pool.allocPoint) + allocPoint;\\n        pool.allocPoint = allocPoint;\\n        if (allocPoint > 0) {\\n            _addTraversal(izlude);\\n        }\\n        emit SetPool(izlude, allocPoint, withUpdate);\\n    }\\n\\n    /**\\n     * @dev View function to see pending KSWs on frontend.\\n     *\\n     */\\n    function pendingKSW(address izlude, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        UserInfo storage user = userInfo[izlude][_user];\\n        uint256 accKSWPerJellopy = pool.accKSWPerJellopy;\\n        uint256 izludeSupply = IIzludeV2(izlude).totalSupply();\\n        if (block.timestamp > pool.lastRewardTime && izludeSupply != 0) {\\n            uint256 time = block.timestamp - pool.lastRewardTime;\\n            uint256 kswReward = (time * kswPerSecond * pool.allocPoint) / totalAllocPoint;\\n\\n            uint256 stakingBal = reserve.balances();\\n            accKSWPerJellopy += (Math.min(kswReward, stakingBal) * 1e12) / izludeSupply;\\n        }\\n\\n        uint256 tJellopy = user.jellopy + user.storedJellopy;\\n        uint256 r = ((tJellopy * accKSWPerJellopy) / 1e12) - user.rewardDebt;\\n        return r;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        for (uint256 i = 0; i < traversalPools.length; i++) {\\n            updatePool(traversalPools[i]);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(address izlude) public {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        require(pool.izlude == izlude, \\\"!pool\\\");\\n        if (block.timestamp > pool.lastRewardTime) {\\n            uint256 izludeSupply = IIzludeV2(izlude).totalSupply();\\n            if (izludeSupply > 0) {\\n                uint256 time = block.timestamp - pool.lastRewardTime;\\n                uint256 kswReward = (time * kswPerSecond * pool.allocPoint) / totalAllocPoint;\\n                uint256 r = reserve.withdraw(address(this), kswReward);\\n                pool.accKSWPerJellopy += (r * 1e12) / izludeSupply;\\n            }\\n            pool.lastRewardTime = uint64(block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev low level deposit 'want' to izlude or staking here\\n     *\\n     * 'warning' deposit amount must be guarantee by caller\\n     */\\n    function _deposit(\\n        address _user,\\n        address izlude,\\n        IERC20 want,\\n        uint256 amount\\n    ) private {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        UserInfo storage user = userInfo[izlude][_user];\\n\\n        updatePool(izlude);\\n        uint256 tJellopy = user.jellopy + user.storedJellopy;\\n        if (tJellopy > 0) {\\n            uint256 pending = ((tJellopy * pool.accKSWPerJellopy) / 1e12) - user.rewardDebt;\\n            if (pending > 0) {\\n                IERC20(ksw).transfer(_user, pending);\\n            }\\n        }\\n\\n        // amount must guaranteed by caller\\n        if (amount > 0) {\\n            want.safeIncreaseAllowance(izlude, amount);\\n            uint256 addAmount = IIzludeV2(izlude).deposit(_user, amount);\\n            tJellopy += addAmount;\\n            user.jellopy += addAmount;\\n        }\\n        user.rewardDebt = (tJellopy * pool.accKSWPerJellopy) / 1e12;\\n    }\\n\\n    function harvest(address[] calldata izludes) external {\\n        for (uint256 i = 0; i < izludes.length; i++) {\\n            _deposit(msg.sender, izludes[i], IERC20(address(0)), 0);\\n        }\\n    }\\n\\n    function deposit(address izlude, uint256 amount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        if (amount > 0) {\\n            require(_safeERC20TransferIn(pool.want, amount) == amount, \\\"!amount\\\");\\n        }\\n        _deposit(msg.sender, izlude, pool.want, amount);\\n        emit Deposit(msg.sender, izlude, amount);\\n    }\\n\\n    function depositFor(\\n        address user,\\n        address izlude,\\n        uint256 amount\\n    ) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        if (amount > 0) {\\n            require(_safeERC20TransferIn(pool.want, amount) == amount, \\\"!amount\\\");\\n        }\\n        _deposit(user, izlude, pool.want, amount);\\n        emit DepositFor(user, izlude, amount);\\n    }\\n\\n    function depositToken(\\n        address izlude,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata tokenAmounts,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        bytes calldata data\\n    ) external nonReentrant ensure(deadline) {\\n        require(tokens.length == tokenAmounts.length, \\\"length mismatch\\\");\\n        PoolInfo storage pool = poolInfo[izlude];\\n        IERC20 want = pool.want;\\n        uint256 beforeBal = want.balanceOf(address(this));\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(_safeERC20TransferIn(tokens[i], tokenAmounts[i]) == tokenAmounts[i], \\\"!amount\\\");\\n            if (tokens[i] != want) {\\n                tokens[i].safeTransfer(juno, tokenAmounts[i]);\\n            }\\n        }\\n        juno.functionCall(data, \\\"juno: failed\\\");\\n\\n        uint256 amount = want.balanceOf(address(this)) - beforeBal;\\n        require(amount >= amountOutMin, \\\"insufficient output amount\\\");\\n        _deposit(msg.sender, izlude, want, amount);\\n        emit DepositToken(msg.sender, izlude, tokenAmounts, amount);\\n    }\\n\\n    function depositEther(\\n        address izlude,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        bytes calldata data\\n    ) external payable nonReentrant ensure(deadline) {\\n        require(msg.value > 0, \\\"!value\\\");\\n\\n        PoolInfo storage pool = poolInfo[izlude];\\n        IERC20 want = pool.want;\\n        uint256 beforeBal = want.balanceOf(address(this));\\n\\n        WETH.deposit{value: msg.value}();\\n        WETH.safeTransfer(juno, msg.value);\\n        juno.functionCall(data, \\\"juno: failed\\\");\\n\\n        uint256 afterBal = want.balanceOf(address(this));\\n        uint256 amount = afterBal - beforeBal;\\n        require(amount >= amountOutMin, \\\"insufficient output amount\\\");\\n        _deposit(msg.sender, izlude, want, amount);\\n        emit DepositEther(msg.sender, izlude, msg.value, amount);\\n    }\\n\\n    function _withdraw(\\n        address _user,\\n        address izlude,\\n        IERC20 want,\\n        uint256 jellopyAmount\\n    ) private returns (uint256 amount) {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        UserInfo storage user = userInfo[izlude][_user];\\n        jellopyAmount = Math.min(user.jellopy, jellopyAmount);\\n\\n        updatePool(izlude);\\n        uint256 tJellopy = user.jellopy + user.storedJellopy;\\n        uint256 pending = ((tJellopy * pool.accKSWPerJellopy) / 1e12) - user.rewardDebt;\\n        if (pending > 0) {\\n            IERC20(ksw).transfer(_user, pending);\\n        }\\n\\n        tJellopy -= jellopyAmount;\\n        user.jellopy -= jellopyAmount;\\n        user.rewardDebt = (tJellopy * pool.accKSWPerJellopy) / 1e12;\\n        if (jellopyAmount > 0) {\\n            uint256 wantBefore = want.balanceOf(address(this));\\n            IIzludeV2(izlude).withdraw(_user, jellopyAmount);\\n            uint256 wantAfter = want.balanceOf(address(this));\\n            amount = wantAfter - wantBefore;\\n        }\\n    }\\n\\n    function withdraw(address izlude, uint256 jellopyAmount) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        uint256 amount = _withdraw(msg.sender, izlude, pool.want, jellopyAmount);\\n        if (amount > 0) {\\n            pool.want.safeTransfer(msg.sender, amount);\\n        }\\n        emit Withdraw(msg.sender, izlude, jellopyAmount);\\n    }\\n\\n    // withdraw from allowed store. send pending reward to owner but transfer want to store and let store handle the rest\\n    function storeWithdraw(\\n        address _user,\\n        address izlude,\\n        uint256 jellopyAmount\\n    ) external nonReentrant {\\n        require(jellopyAmount > 0, \\\"invalid amount\\\");\\n        PoolInfo storage pool = poolInfo[izlude];\\n        UserInfo storage user = userInfo[izlude][_user];\\n        jellopyStorage[_user][izlude][msg.sender] -= jellopyAmount;\\n        user.storedJellopy -= jellopyAmount;\\n        user.jellopy += jellopyAmount;\\n\\n        uint256 amount = _withdraw(_user, izlude, pool.want, jellopyAmount);\\n        if (amount > 0) {\\n            pool.want.safeTransfer(msg.sender, amount);\\n        }\\n        emit StoreWithdraw(_user, izlude, msg.sender, amount);\\n    }\\n\\n    function withdrawToken(\\n        address izlude,\\n        IERC20 token,\\n        uint256 jellopyAmount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        bytes calldata data\\n    ) external nonReentrant ensure(deadline) {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        IERC20 want = pool.want;\\n        require(token != want, \\\"!want\\\");\\n        uint256 amount = _withdraw(msg.sender, izlude, want, jellopyAmount);\\n\\n        uint256 beforeBal = token.balanceOf(msg.sender);\\n\\n        want.safeTransfer(juno, amount);\\n\\n        juno.functionCall(data, \\\"juno: failed\\\");\\n\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\n\\n        uint256 afterBal = token.balanceOf(msg.sender);\\n        uint256 amountOut = afterBal - beforeBal;\\n        require(amountOut >= amountOutMin, \\\"insufficient output amount\\\");\\n        emit WithdrawToken(msg.sender, izlude, amountOut, jellopyAmount);\\n    }\\n\\n    function withdrawEther(\\n        address izlude,\\n        uint256 jellopyAmount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        bytes calldata data\\n    ) external nonReentrant ensure(deadline) {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        uint256 amount = _withdraw(msg.sender, izlude, pool.want, jellopyAmount);\\n\\n        uint256 beforeBal = WETH.balanceOf(address(this));\\n\\n        pool.want.safeTransfer(juno, amount);\\n        juno.functionCall(data, \\\"juno: failed\\\");\\n\\n        uint256 afterBal = WETH.balanceOf(address(this));\\n        uint256 amountOut = afterBal - beforeBal;\\n        require(amountOut >= amountOutMin, \\\"insufficient output amount\\\");\\n        WETH.withdraw(amountOut);\\n        payable(msg.sender).sendValue(amountOut);\\n        emit WithdrawEther(msg.sender, izlude, jellopyAmount, amountOut);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(address izlude) external {\\n        PoolInfo storage pool = poolInfo[izlude];\\n        UserInfo storage user = userInfo[izlude][msg.sender];\\n\\n        uint256 jellopy = user.jellopy;\\n        user.jellopy = 0;\\n        user.rewardDebt = (user.storedJellopy * pool.accKSWPerJellopy) / 1e12;\\n        if (jellopy > 0) {\\n            IERC20 want = pool.want;\\n            uint256 wantBefore = want.balanceOf(address(this));\\n            IIzludeV2(izlude).withdraw(msg.sender, jellopy);\\n            uint256 wantAfter = want.balanceOf(address(this));\\n            want.safeTransfer(msg.sender, wantAfter - wantBefore);\\n        }\\n        emit EmergencyWithdraw(msg.sender, izlude, jellopy);\\n    }\\n\\n    /**\\n     * @dev Returns the remaining number of jellopy that `store` will be\\n     * allowed to keep on behalf of `user` through {storeKeepJellopy}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approveStore} or {storeKeepJellopy} are called.\\n     */\\n    function storeAllowance(\\n        address user,\\n        address izlude,\\n        address store\\n    ) external view returns (uint256) {\\n        return _storeAllowances[user][izlude][store];\\n    }\\n\\n    function _approveStore(\\n        address user,\\n        address izlude,\\n        address store,\\n        uint256 amount\\n    ) private {\\n        require(user != address(0), \\\"approve from the zero address\\\");\\n        require(izlude != address(0), \\\"approve izlude zero address\\\");\\n        require(store != address(0), \\\"approve to the zero address\\\");\\n\\n        _storeAllowances[user][izlude][store] = amount;\\n        emit StoreApproval(user, izlude, store, amount);\\n    }\\n\\n    /**\\n     * @dev grant store to keep jellopy\\n     */\\n    function approveStore(\\n        address izlude,\\n        address store,\\n        uint256 amount\\n    ) external {\\n        _approveStore(msg.sender, izlude, store, amount);\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `store` by the caller.\\n     */\\n    function increaseStoreAllowance(\\n        address izlude,\\n        address store,\\n        uint256 addedAmount\\n    ) external {\\n        _approveStore(msg.sender, izlude, store, _storeAllowances[msg.sender][izlude][store] + addedAmount);\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `store` by the caller.\\n     */\\n    function decreaseStoreAllowance(\\n        address izlude,\\n        address store,\\n        uint256 subtractedAmount\\n    ) external {\\n        uint256 currentAllowance = _storeAllowances[msg.sender][izlude][store];\\n        require(currentAllowance >= subtractedAmount, \\\"decreased allowance below zero\\\");\\n        unchecked {\\n            _approveStore(msg.sender, izlude, store, currentAllowance - subtractedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev store pull user jellopy to keep\\n     */\\n    function storeKeepJellopy(\\n        address _user,\\n        address izlude,\\n        uint256 amount\\n    ) external {\\n        require(amount > 0, \\\"invalid amount\\\");\\n        UserInfo storage user = userInfo[izlude][_user];\\n        user.jellopy -= amount;\\n        user.storedJellopy += amount;\\n        jellopyStorage[_user][izlude][msg.sender] += amount;\\n\\n        uint256 currentAllowance = _storeAllowances[_user][izlude][msg.sender];\\n        require(currentAllowance >= amount, \\\"keep amount exceeds allowance\\\");\\n        unchecked {\\n            _approveStore(_user, izlude, msg.sender, currentAllowance - amount);\\n        }\\n        emit StoreKeepJellopy(_user, izlude, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev store return jellopy to user\\n     */\\n    function storeReturnJellopy(\\n        address _user,\\n        address izlude,\\n        uint256 amount\\n    ) external {\\n        require(amount > 0, \\\"invalid amount\\\");\\n        UserInfo storage user = userInfo[izlude][_user];\\n        jellopyStorage[_user][izlude][msg.sender] -= amount;\\n        user.storedJellopy -= amount;\\n        user.jellopy += amount;\\n        emit StoreReturnJellopy(_user, izlude, msg.sender, amount);\\n    }\\n\\n    function setKSWPerSecond(uint256 _kswPerSecond) external onlyOwner {\\n        massUpdatePools();\\n        kswPerSecond = _kswPerSecond;\\n        emit SetKSWPerSecond(_kswPerSecond);\\n    }\\n\\n    function setJuno(address _juno) external {\\n        require(msg.sender == junoGuide, \\\"!guide\\\");\\n        juno = _juno;\\n        emit SetJuno(_juno);\\n    }\\n\\n    function setJunoGuide(address _junoGuide) external onlyOwner {\\n        junoGuide = _junoGuide;\\n        emit SetJunoGuide(_junoGuide);\\n    }\\n\\n    function _safeERC20TransferIn(IERC20 token, uint256 amount) private returns (uint256) {\\n        require(amount > 0, \\\"zero amount\\\");\\n\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 balanceAfter = token.balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(WETH), \\\"reject\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bsc/interfaces/IPronteraReserve.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IPronteraReserve {\\n    function balances() external view returns (uint256);\\n\\n    function withdraw(address to, uint256 amount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/bsc/interfaces/IIzludeV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IByalan.sol\\\";\\n\\ninterface IIzludeV2 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function prontera() external view returns (address);\\n\\n    function want() external view returns (IERC20);\\n\\n    function deposit(address user, uint256 amount) external returns (uint256 jellopy);\\n\\n    function withdraw(address user, uint256 jellopy) external returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    function byalan() external view returns (IByalan);\\n\\n    function feeKafra() external view returns (address);\\n\\n    function allocKafra() external view returns (address);\\n\\n    function calculateWithdrawFee(uint256 amount, address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/bsc/interfaces/IWETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bsc/interfaces/IByalan.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IByalanIsland.sol\\\";\\nimport \\\"./ISailor.sol\\\";\\n\\ninterface IByalan is IByalanIsland, ISailor {\\n    function want() external view returns (address);\\n\\n    function beforeDeposit() external;\\n\\n    function deposit() external;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf() external view returns (uint256);\\n\\n    function balanceOfWant() external view returns (uint256);\\n\\n    function balanceOfPool() external view returns (uint256);\\n\\n    function balanceOfMasterChef() external view returns (uint256);\\n\\n    function pendingRewardTokens() external view returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts);\\n\\n    function harvest() external;\\n\\n    function retireStrategy() external;\\n\\n    function panic() external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/bsc/interfaces/IByalanIsland.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IByalanIsland {\\n    function izlude() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/bsc/interfaces/ISailor.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISailor {\\n    function MAX_FEE() external view returns (uint256);\\n\\n    function totalFee() external view returns (uint256);\\n\\n    function callFee() external view returns (uint256);\\n\\n    function kswFee() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPronteraReserve\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ksw\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kswPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_juno\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_junoGuide\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"juno\",\"type\":\"address\"}],\"name\":\"SetJuno\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"junoGuide\",\"type\":\"address\"}],\"name\":\"SetJunoGuide\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kswPerSecond\",\"type\":\"uint256\"}],\"name\":\"SetKSWPerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StoreApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"StoreKeepJellopy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StoreReturnJellopy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StoreWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jellopyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jellopyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseStoreAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"izludes\",\"type\":\"address[]\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount\",\"type\":\"uint256\"}],\"name\":\"increaseStoreAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInTraversalPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jellopyStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juno\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"junoGuide\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ksw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kswPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingKSW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accKSWPerJellopy\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeTraversal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IPronteraReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_juno\",\"type\":\"address\"}],\"name\":\"setJuno\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_junoGuide\",\"type\":\"address\"}],\"name\":\"setJunoGuide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_kswPerSecond\",\"type\":\"uint256\"}],\"name\":\"setKSWPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"}],\"name\":\"storeAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"storeKeepJellopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"storeReturnJellopy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jellopyAmount\",\"type\":\"uint256\"}],\"name\":\"storeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traversalPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traversalPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jellopy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"storedJellopy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jellopyAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jellopyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"izlude\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"jellopyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PronteraV2", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "00000000000000000000000023f74e28f1cbac6ef975760a6282e667590258cb000000000000000000000000270178366a592ba598c2e9d2971da65f7baa7c860000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f80a0d5065d7fd4764d91b23a8fd622360d72ce9000000000000000000000000e395605bd95b3a641b9d1266cdb256176419161a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}