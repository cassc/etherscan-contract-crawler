{"SourceCode": "{\"pocProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./proxy.sol\\\";\\r\\n\\r\\ncontract PocProxy is baseProxy{\\r\\n     constructor(address admin ,address impl) {\\r\\n        _setAdmin(admin);\\r\\n        _setLogic(impl);\\r\\n    }\\r\\n}\"},\"proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary StorageSlot {\\r\\n    struct AddressSlot {\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct BooleanSlot {\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Slot {\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Uint256Slot {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\r\\n        assembly {\\r\\n            r.slot := slot\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Proxy {\\r\\n    //EIP1967 Impl_solt: keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1\\r\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n    //EIP1967 Admin_solt: keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1\\r\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n    function _setAdmin(address admin_) internal {\\r\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = admin_;\\r\\n    }\\r\\n\\r\\n    function _setLogic(address logic_) internal {\\r\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = logic_;\\r\\n    }\\r\\n\\r\\n    function logic() public view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n    }\\r\\n\\r\\n    function admin() public view returns (address) {\\r\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\r\\n    }\\r\\n\\r\\n\\r\\n    fallback () external payable {\\r\\n        assembly {\\r\\n            let impl := sload(_IMPLEMENTATION_SLOT)\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), impl, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            switch result\\r\\n            case 0 { revert(0, returndatasize()) }\\r\\n            default { return(0, returndatasize()) }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive () external payable virtual {}\\r\\n}\\r\\n\\r\\n\\r\\ncontract baseProxy is Proxy {\\r\\n    event Upgraded(address indexed impl);\\r\\n    event AdminChanged(address preAdmin, address newAdmin);\\r\\n\\r\\n    modifier onlyAmdin(){\\r\\n        require(msg.sender == admin(), \\\"PangeRankPorxy: Caller not admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function changeAdmin(address newAdmin) external onlyAmdin returns(bool) {\\r\\n        _setAdmin(newAdmin);\\r\\n        emit AdminChanged(admin(), newAdmin);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function upgrad(address newLogic) external onlyAmdin returns(bool) {\\r\\n        _setLogic(newLogic);\\r\\n        emit Upgraded(newLogic);\\r\\n        return true;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLogic\",\"type\":\"address\"}],\"name\":\"upgrad\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PocProxy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000036287a7d6ee83903b6cfd048608e12d9c5ea0b250000000000000000000000009f3d65b58797fd47b9cf10bba67bc72d5db4a9b6", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x5632406c588d74def8db4527578cc583e7aa3415", "SwarmSource": "ipfs://a005110d30e35284e5cd4dbcab65c7ea61ea3f9cd2630f027c9ef3148fa5e700"}