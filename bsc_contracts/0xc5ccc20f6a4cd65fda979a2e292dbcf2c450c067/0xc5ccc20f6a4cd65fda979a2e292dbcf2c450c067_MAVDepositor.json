{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity 0.8.19;\r\n\r\ninterface ILocker {\r\n    function createLock(uint256, uint256) external;\r\n\r\n    function claimAllRewards(address[] calldata _tokens, address _recipient) external;\r\n\r\n    function increaseAmount(uint256) external;\r\n\r\n    function increaseAmount(uint128) external;\r\n\r\n    function increaseUnlockTime(uint256) external;\r\n\r\n    function release() external;\r\n\r\n    function claimRewards(address, address) external;\r\n\r\n    function claimFXSRewards(address) external;\r\n\r\n    function claimFPISRewards(address) external;\r\n\r\n    function execute(address, uint256, bytes calldata) external returns (bool, bytes memory);\r\n\r\n    function setGovernance(address) external;\r\n\r\n    function voteGaugeWeight(address, uint256) external;\r\n\r\n    function setAngleDepositor(address) external;\r\n\r\n    function setDepositor(address) external;\r\n\r\n    function setFxsDepositor(address) external;\r\n\r\n    function setYieldDistributor(address) external;\r\n\r\n    function setGaugeController(address) external;\r\n\r\n    function setAccumulator(address _accumulator) external;\r\n\r\n    function governance() external view returns (address);\r\n\r\n    function increaseLock(uint256 _value, uint256 _duration) external;\r\n\r\n    function release(address _recipient) external;\r\n}\r\n\r\ninterface ISdToken {\r\n    function setOperator(address _operator) external;\r\n}\r\n\r\ninterface ITokenMinter {\r\n    function mint(address, uint256) external;\r\n    function burn(address, uint256) external;\r\n}\r\n\r\ninterface ILiquidityGauge {\r\n    struct Reward {\r\n        address token;\r\n        address distributor;\r\n        uint256 period_finish;\r\n        uint256 rate;\r\n        uint256 last_update;\r\n        uint256 integral;\r\n    }\r\n\r\n    // solhint-disable-next-line\r\n    function deposit_reward_token(address _rewardToken, uint256 _amount) external;\r\n\r\n    // solhint-disable-next-line\r\n    function claim_rewards_for(address _user, address _recipient) external;\r\n\r\n    function working_balances(address _address) external view returns (uint256);\r\n\r\n    // // solhint-disable-next-line\r\n    // function claim_rewards_for(address _user) external;\r\n\r\n    // solhint-disable-next-line\r\n    function deposit(uint256 _value, address _addr) external;\r\n\r\n    // solhint-disable-next-line\r\n    function reward_tokens(uint256 _i) external view returns (address);\r\n\r\n    // solhint-disable-next-line\r\n    function reward_data(address _tokenReward) external view returns (Reward memory);\r\n\r\n    function balanceOf(address) external returns (uint256);\r\n\r\n    function claimable_reward(address _user, address _reward_token) external view returns (uint256);\r\n\r\n    function claimable_tokens(address _user) external returns (uint256);\r\n\r\n    function user_checkpoint(address _user) external returns (bool);\r\n\r\n    function commit_transfer_ownership(address) external;\r\n\r\n    function claim_rewards(address) external;\r\n\r\n    function add_reward(address, address) external;\r\n\r\n    function set_claimer(address) external;\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function set_reward_distributor(address _rewardToken, address _newDistrib) external;\r\n\r\n    function initialize(\r\n        address staking_token,\r\n        address admin,\r\n        address SDT,\r\n        address voting_escrow,\r\n        address veBoost_proxy,\r\n        address distributor\r\n    ) external;\r\n\r\n    function totalSupply() external returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\r\n     * 0 before setting it to a non-zero value.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n/// @title Depositor\r\n/// @notice Contract that accepts tokens and locks them in the Locker, minting sdToken in return\r\n/// @dev Adapted for veCRV like Locker.\r\n/// @author StakeDAO\r\n/// @custom:contact contact@stakedao.org\r\nabstract contract DepositorV4 {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Denominator for fixed point math.\r\n    uint256 public constant DENOMINATOR = 10_000;\r\n\r\n    /// @notice Maximum lock duration.\r\n    uint256 public immutable MAX_LOCK_DURATION;\r\n\r\n    /// @notice Address of the token to be locked.\r\n    address public immutable token;\r\n\r\n    /// @notice Address of the locker contract.\r\n    address public immutable locker;\r\n\r\n    /// @notice Address of the sdToken minter contract.\r\n    address public immutable minter;\r\n\r\n    /// @notice Fee percent to users who spend gas to increase lock.\r\n    uint256 public lockIncentivePercent = 10;\r\n\r\n    /// @notice Incentive accrued in token to users who spend gas to increase lock.\r\n    uint256 public incentiveToken;\r\n\r\n    /// @notice Gauge to deposit sdToken into.\r\n    address public gauge;\r\n\r\n    /// @notice Address of the governance.\r\n    address public governance;\r\n\r\n    /// @notice Address of the future governance contract.\r\n    address public futureGovernance;\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    /// --- EVENTS & ERRORS\r\n    ///////////////////////////////////////////////////////////////\r\n\r\n    /// @notice Event emitted when a lock is created.\r\n    /// @param amount Amount of tokens locked.\r\n    /// @param duration Duration of the lock.\r\n    event CreateLock(uint256 amount, uint256 duration);\r\n\r\n    /// @notice Event emitted when tokens are deposited.\r\n    /// @param caller Address of the caller.\r\n    /// @param user Address of the user.\r\n    /// @param amount Amount of tokens deposited.\r\n    /// @param lock Whether the tokens are locked.\r\n    /// @param stake Whether the sdToken is staked in the gauge.\r\n    event Deposited(address indexed caller, address indexed user, uint256 amount, bool lock, bool stake);\r\n\r\n    /// @notice Event emitted when incentive tokens are received.\r\n    /// @param caller Address of the caller.\r\n    /// @param amount Amount of tokens received.\r\n    event IncentiveReceived(address indexed caller, uint256 amount);\r\n\r\n    /// @notice Event emitted when tokens are locked.\r\n    /// @param user Address of the user.\r\n    /// @param amount Amount of tokens locked.\r\n    event TokenLocked(address indexed user, uint256 amount);\r\n\r\n    /// @notice Event emitted when governance is changed.\r\n    /// @param newGovernance Address of the new governance.\r\n    event GovernanceChanged(address indexed newGovernance);\r\n\r\n    /// @notice Event emitted when the sdToken Operator is changed.\r\n    event SdTokenOperatorChanged(address indexed newSdToken);\r\n\r\n    /// @notice Event emitted Incentive percent is changed.\r\n    event FeesChanged(uint256 newFee);\r\n\r\n    /// @notice Throws if caller is not the governance.\r\n    error GOVERNANCE();\r\n\r\n    /// @notice Throws if the deposit amount is zero.\r\n    error AMOUNT_ZERO();\r\n\r\n    /// @notice Throws if the address is zero.\r\n    error ADDRESS_ZERO();\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    /// --- MODIFIERS\r\n    ///////////////////////////////////////////////////////////////\r\n\r\n    modifier onlyGovernance() {\r\n        if (msg.sender != governance) revert GOVERNANCE();\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, address _locker, address _minter, address _gauge, uint256 _maxLockDuration) {\r\n        governance = msg.sender;\r\n\r\n        token = _token;\r\n        gauge = _gauge;\r\n        minter = _minter;\r\n        locker = _locker;\r\n\r\n        MAX_LOCK_DURATION = _maxLockDuration;\r\n\r\n        /// Approve sdToken to gauge.\r\n        if (gauge != address(0)) {\r\n            IERC20(minter).safeApprove(gauge, type(uint256).max);\r\n        }   \r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    /// --- DEPOSIT & LOCK\r\n    ///////////////////////////////////////////////////////////////\r\n\r\n    /// @notice Initiate a lock in the Locker contract.\r\n    /// @param _amount Amount of tokens to lock.\r\n    function createLock(uint256 _amount) external virtual {\r\n        /// Transfer tokens to this contract\r\n        IERC20(token).safeTransferFrom(msg.sender, address(locker), _amount);\r\n\r\n        /// Can be called only once.\r\n        ILocker(locker).createLock(_amount, block.timestamp + MAX_LOCK_DURATION);\r\n\r\n        /// Mint sdToken to msg.sender.\r\n        ITokenMinter(minter).mint(msg.sender, _amount);\r\n\r\n        emit CreateLock(_amount, block.timestamp + MAX_LOCK_DURATION);\r\n    }\r\n\r\n    /// @notice Deposit tokens, and receive sdToken or sdTokenGauge in return.\r\n    /// @param _amount Amount of tokens to deposit.\r\n    /// @param _lock Whether to lock the tokens in the locker contract.\r\n    /// @param _stake Whether to stake the sdToken in the gauge.\r\n    /// @param _user Address of the user to receive the sdToken.\r\n    /// @dev If the lock is true, the tokens are directly sent to the locker and increase the lock amount as veToken.\r\n    /// If the lock is false, the tokens are sent to this contract until someone locks them. A small percent of the deposit\r\n    /// is used to incentivize users to lock the tokens.\r\n    /// If the stake is true, the sdToken is staked in the gauge that distributes rewards. If the stake is false, the sdToken\r\n    /// is sent to the user.\r\n    function deposit(uint256 _amount, bool _lock, bool _stake, address _user) public {\r\n        if (_amount == 0) revert AMOUNT_ZERO();\r\n        if (_user == address(0)) revert ADDRESS_ZERO();\r\n\r\n        /// If _lock is true, lock tokens in the locker contract.\r\n        if (_lock) {\r\n            /// Transfer tokens to this contract\r\n            IERC20(token).safeTransferFrom(msg.sender, locker, _amount);\r\n\r\n            /// Transfer the balance\r\n            uint256 balance = IERC20(token).balanceOf(address(this));\r\n\r\n            if (balance != 0) {\r\n                IERC20(token).safeTransfer(locker, balance);\r\n            }\r\n\r\n            /// Lock the amount sent + balance of the contract.\r\n            _lockToken(balance + _amount);\r\n\r\n            /// If an incentive is available, add it to the amount.\r\n            if (incentiveToken != 0) {\r\n                _amount += incentiveToken;\r\n\r\n                emit IncentiveReceived(msg.sender, incentiveToken);\r\n\r\n                incentiveToken = 0;\r\n            }\r\n        } else {\r\n            /// Transfer tokens to the locker contract and lock them.\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n            /// Compute call incentive and add to incentiveToken\r\n            uint256 callIncentive = (_amount * lockIncentivePercent) / DENOMINATOR;\r\n\r\n            /// Subtract call incentive from _amount\r\n            _amount -= callIncentive;\r\n\r\n            /// Add call incentive to incentiveToken\r\n            incentiveToken += callIncentive;\r\n        }\r\n        // Mint sdtoken to the user if the gauge is not set\r\n        if (_stake && gauge != address(0)) {\r\n            /// Mint sdToken to this contract.\r\n            ITokenMinter(minter).mint(address(this), _amount);\r\n\r\n            /// Deposit sdToken into gauge for _user.\r\n            ILiquidityGauge(gauge).deposit(_amount, _user);\r\n        } else {\r\n            /// Mint sdToken to _user.\r\n            ITokenMinter(minter).mint(_user, _amount);\r\n        }\r\n        emit Deposited(msg.sender, _user, _amount, _lock, _stake);\r\n    }\r\n\r\n    /// @notice Lock tokens held by the contract\r\n    /// @dev The contract must have Token to lock\r\n    function lockToken() external {\r\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\r\n\r\n        if (tokenBalance != 0) {\r\n            /// Transfer tokens to the locker contract and lock them.\r\n            IERC20(token).safeTransfer(locker, tokenBalance);\r\n            _lockToken(tokenBalance);\r\n        }\r\n\r\n        /// If there is incentive available give it to the user calling lockToken.\r\n        if (incentiveToken != 0) {\r\n            /// Mint incentiveToken to msg.sender.\r\n            ITokenMinter(minter).mint(msg.sender, incentiveToken);\r\n\r\n            emit IncentiveReceived(msg.sender, incentiveToken);\r\n\r\n            /// Reset incentiveToken.\r\n            incentiveToken = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Locks the tokens held by the contract\r\n    /// @dev The contract must have tokens to lock\r\n    function _lockToken(uint256 _amount) internal virtual {\r\n        // If there is Token available in the contract transfer it to the locker\r\n        if (_amount != 0) {\r\n            /// Increase the lock.\r\n            ILocker(locker).increaseLock(_amount, block.timestamp + MAX_LOCK_DURATION);\r\n\r\n            emit TokenLocked(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    /// --- GOVERNANCE PARAMETERS\r\n    ///////////////////////////////////////////////////////////////\r\n\r\n    /// @notice Transfer the governance to a new address.\r\n    /// @param _governance Address of the new governance.\r\n    function transferGovernance(address _governance) external onlyGovernance {\r\n        futureGovernance = _governance;\r\n    }\r\n\r\n    /// @notice Accept the governance transfer.\r\n    function acceptGovernance() external {\r\n        if (msg.sender != futureGovernance) revert GOVERNANCE();\r\n\r\n        governance = msg.sender;\r\n        emit GovernanceChanged(msg.sender);\r\n    }\r\n\r\n    /// @notice Set the new operator for minting sdToken\r\n    /// @param _minter operator minter address\r\n    function setSdTokenMinterOperator(address _minter) external onlyGovernance {\r\n        ISdToken(minter).setOperator(_minter);\r\n        emit SdTokenOperatorChanged(_minter);\r\n    }\r\n\r\n    /// @notice Set the gauge to deposit sdToken\r\n    /// @param _gauge gauge address\r\n    function setGauge(address _gauge) external onlyGovernance {\r\n        gauge = _gauge;\r\n        if (_gauge != address(0)) {\r\n            /// Approve sdToken to gauge.\r\n            IERC20(minter).safeApprove(gauge, type(uint256).max);\r\n        }  \r\n    }\r\n\r\n    /// @notice Set the percentage of the lock incentive\r\n    /// @param _lockIncentive Percentage of the lock incentive\r\n    function setFees(uint256 _lockIncentive) external onlyGovernance {\r\n        if (_lockIncentive >= 0 && _lockIncentive <= 30) {\r\n            emit FeesChanged(lockIncentivePercent = _lockIncentive);\r\n        }\r\n    }\r\n}\r\n\r\n/// @title MAVDepositor\r\n/// @notice Contract that accepts tokens and locks them in the Locker, minting sdToken in return\r\n/// @dev Adapted for Maverick Voting Escrow.\r\n/// @author StakeDAO\r\n/// @custom:contact contact@stakedao.org\r\ncontract MAVDepositor is DepositorV4 {\r\n    using SafeERC20 for IERC20;\r\n    constructor(address _token, address _locker, address _minter, address _gauge)\r\n        DepositorV4(_token, _locker, _minter, _gauge, 4 * 365 days)\r\n    {}\r\n\r\n    function _lockToken(uint256 _amount) internal override {\r\n        // If there is Token available in the contract transfer it to the locker\r\n        if (_amount != 0) {\r\n            /// Increase the lock.\r\n            ILocker(locker).increaseLock(_amount, MAX_LOCK_DURATION);\r\n\r\n            emit TokenLocked(msg.sender, _amount);\r\n        }\r\n    }\r\n\r\n     /// @notice Initiate a lock in the Locker contract.\r\n    /// @param _amount Amount of tokens to lock.\r\n    function createLock(uint256 _amount) external override {\r\n        /// Transfer tokens to this contract\r\n        IERC20(token).safeTransferFrom(msg.sender, address(locker), _amount);\r\n\r\n        /// Can be called only once.\r\n        ILocker(locker).createLock(_amount, MAX_LOCK_DURATION);\r\n\r\n        /// Mint sdToken to msg.sender.\r\n        ITokenMinter(minter).mint(msg.sender, _amount);\r\n\r\n        emit CreateLock(_amount, MAX_LOCK_DURATION);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDRESS_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AMOUNT_ZERO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GOVERNANCE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"CreateLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncentiveReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSdToken\",\"type\":\"address\"}],\"name\":\"SdTokenOperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIncentivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockIncentive\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"setGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setSdTokenMinterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MAVDepositor", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d691d9a68c887bdf34da8c36f63487333acfd103000000000000000000000000c6973841dc130597df3cb8be2f57440d856fd7c400000000000000000000000075289388d50364c3013583d97bd70ced0e183e320000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://89020d73f0b5e033cf6b0a9e3262c0b9c87a3ad2b4453a0eddd48217f8f11088"}