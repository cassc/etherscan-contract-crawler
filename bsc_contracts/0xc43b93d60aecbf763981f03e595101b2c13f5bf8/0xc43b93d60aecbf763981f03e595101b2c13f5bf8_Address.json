{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// @dev tg: @nicremo\r\n// @dev yt: https://www.youtube.com/channel/UCbbDTRXzNa57iwOK7v99phg\r\n// @dev dc: nicremo#2536\r\n\r\npragma solidity ^0.6.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n\r\n\r\n            bytes32 accountHash\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n      address token,\r\n      uint liquidity,\r\n      uint amountTokenMin,\r\n      uint amountETHMin,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint amountETH);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n// change \"name1\" into ur name\r\n    contract SafeRUN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n//change \"name1\" and \"symbol\"\r\n    string private _name = \"SafeRun\";\r\n    string private _symbol = \"SAFE\";\r\n    \r\n    uint8 private _decimals = 10;\r\n\r\n    mapping(address => uint256) internal _reflectionBalance;\r\n    mapping(address => uint256) internal _tokenBalance;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    \r\n    // change this for total supply (100e8 = 100) (100000000e8 = 100000000) (dont forget the e8 it has to be there)\r\n    uint256 internal _tokenTotal = 100_000_000e10;\r\n    // change this for total supply ^^^^^^^^^^^^^^^^^^^^^\r\n    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\r\n\r\n    mapping(address => bool) isTaxless;\r\n    mapping(address => bool) internal _isExcluded;\r\n    address[] internal _excluded;\r\n    \r\n    uint256 public _feeDecimal = 2;\r\n    // thats the distribution to holders (400 = 4%)\r\n    uint256 public _taxFee = 200;\r\n    // thats the amount for liquidity pool\r\n    uint256 public _liquidityFee = 1500;\r\n    // this amount gets burned by every transaction\r\n    uint256 public _burnFee = 200;\r\n    // this goes to a specific wallet (line 403)\r\n    uint256 public _marketingFee = 1500;\r\n\r\n    uint256 public _taxFeeTotal;\r\n    uint256 public _burnFeeTotal;\r\n    uint256 public _liquidityFeeTotal;\r\n    uint256 public _marketingFeeTotal;\r\n\r\n    address public marketingWallet;\r\n\r\n    bool public isTaxActive = true;\r\n    bool private inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    \r\n    uint256 public maxTxAmount = _tokenTotal;\r\n    uint256 public minTokensBeforeSwap = 10_000e8;\r\n    \r\n    IUniswapV2Router02 public  uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() public {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); // for BSC\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // for Ethereum\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506); // for Sushi testnet\r\n        \r\n        \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n            \r\n        uniswapV2Router = _uniswapV2Router;\r\n        //paste the wallet adress, that earns the marketingFee here\r\n        marketingWallet = 0x64d3C89d22e2983b609acc1e45020E79AC88B032;\r\n        //paste the wallet ^^^^^^^^^^^^^^^^^^^^^ adress, that earns the marketingFee here\r\n\r\n      \r\n        isTaxless[_msgSender()] = true;\r\n        isTaxless[address(this)] = true;\r\n\r\n        _reflectionBalance[_msgSender()] = _reflectionTotal;\r\n        emit Transfer(address(0), _msgSender(), _tokenTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _tokenTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        if (_isExcluded[account]) return _tokenBalance[account];\r\n        return tokenFromReflection(_reflectionBalance[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        virtual\r\n        returns (bool)\r\n    {\r\n       _transfer(_msgSender(),recipient,amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override virtual returns (bool) {\r\n        _transfer(sender,recipient,amount);\r\n               \r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tokenAmount <= _tokenTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            return tokenAmount.mul(_getReflectionRate());\r\n        } else {\r\n            return\r\n                tokenAmount.sub(tokenAmount.mul(_taxFee).div(10** _feeDecimal + 2)).mul(\r\n                    _getReflectionRate()\r\n                );\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 reflectionAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            reflectionAmount <= _reflectionTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getReflectionRate();\r\n        return reflectionAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeAccount(address account) external onlyOwner() {\r\n        require(\r\n            account != address(uniswapV2Router),\r\n            \"ERC20: We can not exclude Uniswap router.\"\r\n        );\r\n        require(!_isExcluded[account], \"ERC20: Account is already excluded\");\r\n        if (_reflectionBalance[account] > 0) {\r\n            _tokenBalance[account] = tokenFromReflection(\r\n                _reflectionBalance[account]\r\n            );\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeAccount(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"ERC20: Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tokenBalance[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        require(amount <= maxTxAmount, \"Transfer Limit exceeded!\");\r\n        \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;\r\n        if (!inSwapAndLiquify && overMinTokenBalance && sender != uniswapV2Pair && swapAndLiquifyEnabled) {\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        uint256 transferAmount = amount;\r\n        uint256 rate = _getReflectionRate();\r\n\r\n        if(isTaxActive && !isTaxless[_msgSender()] && !isTaxless[recipient] && !inSwapAndLiquify){\r\n            transferAmount = collectFee(sender,amount,rate);\r\n        }\r\n\r\n        _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));\r\n        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));\r\n\r\n        if (_isExcluded[sender]) {\r\n            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\r\n        }\r\n        if (_isExcluded[recipient]) {\r\n            _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n    \r\n    function collectFee(address account, uint256 amount, uint256 rate) private returns (uint256) {\r\n        uint256 transferAmount = amount;\r\n        \r\n        //@dev tax fee\r\n        if(_taxFee != 0){\r\n            uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));\r\n            transferAmount = transferAmount.sub(taxFee);\r\n            _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\r\n            _taxFeeTotal = _taxFeeTotal.add(taxFee);\r\n        }\r\n\r\n        //@dev liquidity fee\r\n        if(_liquidityFee != 0){\r\n            uint256 liquidityFee = amount.mul(_liquidityFee).div(10**(_feeDecimal + 2));\r\n            transferAmount = transferAmount.sub(liquidityFee);\r\n            _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(liquidityFee.mul(rate));\r\n            if(_isExcluded[address(this)]){\r\n                _tokenBalance[address(this)] = _tokenBalance[address(this)].add(liquidityFee);\r\n            }\r\n            _liquidityFeeTotal = _liquidityFeeTotal.add(liquidityFee);\r\n            emit Transfer(account,address(this),liquidityFee);\r\n        }\r\n      \r\n        //@dev burn fee\r\n        if(_burnFee != 0){\r\n            uint256 burnFee = amount.mul(_burnFee).div(10**(_feeDecimal + 2));\r\n            transferAmount = transferAmount.sub(burnFee);\r\n            _tokenTotal = _tokenTotal.sub(burnFee);\r\n            _reflectionTotal = _reflectionTotal.sub(burnFee.mul(rate));\r\n            _burnFeeTotal = _burnFeeTotal.add(burnFee);\r\n            emit Transfer(account,address(0),burnFee);\r\n        }\r\n        \r\n        //@dev Marketing fee\r\n        if(_marketingFee != 0){\r\n            uint256 marketingFee = amount.mul(_marketingFee).div(10**(_feeDecimal + 2));\r\n            transferAmount = transferAmount.sub(marketingFee);\r\n            _reflectionBalance[marketingWallet] = _reflectionBalance[marketingWallet].add(marketingFee.mul(rate));\r\n            if (_isExcluded[marketingWallet]) {\r\n                _tokenBalance[marketingWallet] = _tokenBalance[marketingWallet].add(marketingFee);\r\n            }\r\n            _marketingFeeTotal = _marketingFeeTotal.add(marketingFee);\r\n            emit Transfer(account,marketingWallet,marketingFee);\r\n        }\r\n        \r\n        return transferAmount;\r\n    }\r\n\r\n    function _getReflectionRate() private view returns (uint256) {\r\n        uint256 reflectionSupply = _reflectionTotal;\r\n        uint256 tokenSupply = _tokenTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _reflectionBalance[_excluded[i]] > reflectionSupply ||\r\n                _tokenBalance[_excluded[i]] > tokenSupply\r\n            ) return _reflectionTotal.div(_tokenTotal);\r\n            reflectionSupply = reflectionSupply.sub(\r\n                _reflectionBalance[_excluded[i]]\r\n            );\r\n            tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\r\n        }\r\n        if (reflectionSupply < _reflectionTotal.div(_tokenTotal))\r\n            return _reflectionTotal.div(_tokenTotal);\r\n        return reflectionSupply.div(tokenSupply);\r\n    }\r\n    \r\n     function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n         if(contractTokenBalance > maxTxAmount)\r\n            contractTokenBalance = maxTxAmount;\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half); \r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0, \r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n   \r\n    function setPair(address pair) external onlyOwner {\r\n        uniswapV2Pair = pair;\r\n    }\r\n    \r\n    function setMarketingWallet(address account) external onlyOwner {\r\n        marketingWallet = account;\r\n    }\r\n\r\n    function setTaxless(address account, bool value) external onlyOwner {\r\n        isTaxless[account] = value;\r\n    }\r\n    \r\n    function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = enabled;\r\n        SwapAndLiquifyEnabledUpdated(enabled);\r\n    }\r\n    \r\n    function setTaxActive(bool value) external onlyOwner {\r\n        isTaxActive = value;\r\n    }\r\n    \r\n    function setTaxFee(uint256 fee) external onlyOwner {\r\n        _taxFee = fee;\r\n    }\r\n    \r\n    function setBurnFee(uint256 fee) external onlyOwner {\r\n        _burnFee = fee;\r\n    }\r\n    \r\n    function setLiquidityFee(uint256 fee) external onlyOwner {\r\n        _liquidityFee = fee;\r\n    }\r\n \r\n    function setMarketingFee(uint256 fee) external onlyOwner {\r\n        _marketingFee = fee;\r\n    }\r\n \r\n    function setMaxTxAmount(uint256 amount) external onlyOwner {\r\n        maxTxAmount = amount;\r\n    }\r\n    \r\n    function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {\r\n        minTokensBeforeSwap = amount;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[]", "ContractName": "Address", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ec7f8aae5fd64672fbb79213b18994f6b36e1b5a19d1c3a4d02795802cb446fd"}