{"SourceCode": "pragma solidity ^0.8.13;\r\ninterface Pair{\r\n      function sync() external;\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,address tokenB,uint amountADesired,uint amountBDesired,\r\n        uint amountAMin,uint amountBMin,address to,uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,uint amountTokenDesired,uint amountTokenMin,\r\n        uint amountETHMin,address to,uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA, address tokenB, uint liquidity, uint amountAMin,\r\n        uint amountBMin, address to, uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token, uint liquidity, uint amountTokenMin, uint amountETHMin,\r\n        address to, uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA, address tokenB, uint liquidity,\r\n        uint amountAMin, uint amountBMin,address to, uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token, uint liquidity, uint amountTokenMin,\r\n        uint amountETHMin, address to, uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external payable returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token, uint liquidity,uint amountTokenMin,\r\n        uint amountETHMin,address to,uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,uint liquidity,uint amountTokenMin,\r\n        uint amountETHMin,address to,uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,uint amountOutMin,\r\n        address[] calldata path,address to,uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,address[] calldata path,address to,uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,uint amountOutMin,address[] calldata path,\r\n        address to,uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ninterface OldTime2{\r\n    function boss(address addr) external view returns(address);\r\n}\r\ninterface IDO{\r\n    function all_time3() external view returns(uint);\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n        if(block.chainid == 97) {\r\n    }\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract B {\r\n    constructor(address _father,IERC20 token){\r\n        token.approve(_father,2**256-1);\r\n    }\r\n    \r\n    \r\n}\r\ncontract A  {\r\n    address public admin5 = tx.origin;\r\n    address public _father;\r\n    address public _route;\r\n    address public _back_token;\r\n    address public _b;\r\n    uint rate = 10;//\u4e07\u5206\u6bd4\r\n    bool public open = true;\r\n    constructor(address route,address father,address back_token) public  {\r\n        _father = father;\r\n        _route = route;\r\n        _back_token = back_token;\r\n        IERC20(_back_token).approve(_route, 2**256-1); \r\n        IERC20(_father).approve(_route,2**256-1);\r\n        B _bb =new B(address(this),IERC20(_father));\r\n        _b = address(_bb);\r\n\r\n    }\r\n    function setRate(uint _rate) external {\r\n        require(msg.sender == admin5,\"no admin\");\r\n        rate  =_rate;\r\n    }\r\n   \r\n    function getTokenNum()external view returns(uint){\r\n        return IERC20(_father).balanceOf(address(this));\r\n    }\r\n    function _swapTokenForTime3() public   {\r\n        require(msg.sender == admin5,\"no admin\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = _back_token;path[1] = _father;\r\n        uint bac = IERC20(_back_token).balanceOf(address(this));\r\n        bac = bac*rate/10000;\r\n        IPancakeRouter02(_route).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            bac, 0, path, _b, block.timestamp);\r\n        uint256 amount = IERC20(_father).balanceOf(_b);\r\n        if (IERC20(_father).allowance(_b, address(this)) >= amount) {\r\n            IERC20(_father).transferFrom(_b, address(this), amount);\r\n        }\r\n        uint256 amount2 = IERC20(_back_token).balanceOf(address(this));\r\n       IPancakeRouter02(_route).addLiquidity(_back_token, \r\n            _father, amount2, amount, 0, 0,0x000000000000000000000000000000000000dEaD , block.timestamp);  \r\n    }\r\n    \r\n}\r\ninterface Calu{\r\n    function cal(uint keepTime ,uint userBalance,address addr)external view returns(uint);\r\n}\r\ncontract Token is Ownable, IERC20Metadata {\r\n    mapping(address =>uint) public coinKeep;\r\n    mapping(address => bool) public _whites;\r\n    mapping(address => bool) public _blocks; \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint) public getReward;\r\n    string  private _name;\r\n    string  private _symbol;\r\n    uint256 public _totalSupply;\r\n    uint256 startTime = block.timestamp;\r\n    uint256 public  _maxsell;\r\n    uint256 public  desall;\r\n    uint256 public for_num;\r\n    uint public lpStartTime;\r\n\r\n    address public _router;\r\n    address public _wfon;\r\n    address public _back;\r\n    bool public is_init;\r\n    address public _pair;\r\n    address public _main;\r\n    address public _calu;\r\n    address public _dead;\r\n    address public _A ;\r\n    address public _B ;\r\n    address public _C ;\r\n    address public _fasts;\r\n    address public _reToken;\r\n    address public _back2;\r\n    address public _usdt;\r\n    address public _sql = 0x734d9244622FFc86B071Dad9A53C40C912f7A250;\r\n    address public time2 = 0x134f03c2Df726aE803e07Cf766bD592EB39F2785;\r\n    address[] public users;\r\n    IDO public ido;\r\n    \r\n    bool   private  _swapping;\r\n\r\n    address public _tToken;\r\n    address public _addLp;\r\n    Pair public pi;\r\n    constructor(            \r\n\r\n               ) {\r\n\r\n        _maxsell = 5000e18;\r\n        _name = \"Time3\";\r\n        _symbol = \"Time3\";\r\n        _router =0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        _back =msg.sender;\r\n        _addLp = msg.sender;\r\n        _usdt = 0x55d398326f99059fF775485246999027B3197955;//\u4e3b\u7f51\r\n        _dead = 0x000000000000000000000000000000000000dEaD;//\u9ed1\u6d1e\r\n        \r\n\r\n    }\r\n\r\n    function setIdo(address _ido) external onlyOwner {\r\n        ido = IDO(_ido);\r\n    }\r\n    function init(address _ido,address _cal)external {\r\n        _calu = _cal;\r\n        ido = IDO(_ido);\r\n        require(!is_init,\"init\");\r\n        is_init = true;\r\n        _mint(msg.sender,10000000e18);\r\n\r\n        if(block.chainid == 97){\r\n            _mint(msg.sender,10000000e18);\r\n        }\r\n        _approve(address(this), _router, 9 * 10**70);\r\n        IPancakeRouter02 _uniswapV2Router = IPancakeRouter02(_router);\r\n        _pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                    .createPair(address(this), time2);\r\n\r\n        pi = Pair(_pair);\r\n        A son = new A(_router,address(this),time2);\r\n        _A = address(son);\r\n        _whites[_A] = true;\r\n        _whites[_router] = true;\r\n        _whites[address(this)] = true;\r\n        _whites[_dead] = true;\r\n        _whites[msg.sender] = true;\r\n\r\n    }\r\n    function setA(address AA)external onlyOwner{\r\n        _A = AA;\r\n    }\r\n    function add_token(address addr,uint amount)external onlyOwner{\r\n            _mint(addr,amount);\r\n    }\r\n    function buy_reward(uint amount)private{\r\n        address parent = OldTime2(_sql).boss(tx.origin);\r\n        if(parent != address(0)){\r\n            getReward[parent] += amount;  \r\n        } else{\r\n            return;\r\n        }\r\n        parent = OldTime2(_sql).boss(parent);\r\n        if(parent != address(0)) getReward[parent] += amount;\r\n    }\r\n   \r\n    \r\n    function setWhites(address addr)external onlyOwner{\r\n        _whites[addr] = true;\r\n    }\r\n    function setWhitesNot(address addr)external onlyOwner{\r\n        _whites[addr] = false;\r\n    }\r\n   \r\n \r\n  \r\n \r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n        \r\n       function calculate2(address addr)public view returns(uint){\r\n        uint userTime;\r\n        userTime =  coinKeep[addr];            \r\n        return Calu(_calu).cal(coinKeep[addr],_balances[addr],addr);\r\n    } \r\n        function calculate()public view returns(uint){\r\n            uint userTime =  coinKeep[_pair];\r\n            uint timeGap = block.timestamp - userTime; \r\n            if(userTime >0 && timeGap> 1 minutes ){//\u65f6\u95f4\u4fee\u6539\r\n            if(timeGap>0) return _balances[_pair]*192/10000/86400*timeGap;\r\n        }  \r\n           \r\n        return 0;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n         uint addN;\r\n        if(!_blocks[account]) addN = calculate2(account);\r\n        return _balances[account]+addN;\r\n    }\r\n    function setBlockBatch(address[]memory array)external onlyOwner{\r\n        for(uint i;i<array.length;i++){\r\n            _blocks[array[i]] = true;\r\n        }\r\n    }\r\n    function setBlockNotBatch(address[]memory array)external onlyOwner{\r\n        for(uint i;i<array.length;i++){\r\n            _blocks[array[i]] = false;\r\n        }\r\n    }\r\n     function setBlock(address addr)external onlyOwner{\r\n        _blocks[addr] = true;\r\n    }\r\n    \r\n    function setBlockNot(address addr)external onlyOwner{\r\n        _blocks[addr] = false;\r\n    }\r\n\r\n    function settlementPair()private {\r\n        uint addN = calculate();\r\n        if(addN == 0) return;\r\n        _balances[_pair] -= addN ;\r\n        coinKeep[_pair] = block.timestamp;\r\n        pi.sync();\r\n        _balances[_dead]+=addN;\r\n        emit Transfer(_pair, _dead, addN);\r\n        desall += addN;\r\n\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address sender, address recipient, uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n    \r\n    function setMaxsell(uint amount )external onlyOwner{\r\n        _maxsell = amount;\r\n    }\r\n    // function setMaxUsdt(uint amount )external onlyOwner{\r\n    //     _maxusdt = amount;\r\n    // }\r\n     function _swapTokenForTime2(uint256 tokenAmount) public   {\r\n        // A a = new A(address(this));\r\n        // address aa_address = address(a);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);path[1] = time2;\r\n        IPancakeRouter02(_router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount, 0, path, _A, block.timestamp);\r\n    }\r\n    function settlement(address addr)private {\r\n        // if(coinKeep[addr] == 0) coinKeep[addr] = block.timestamp;\r\n        uint am = balanceOf(addr);\r\n        _balances[addr] = am;\r\n        coinKeep[addr] = block.timestamp;\r\n\r\n    }\r\n    function _transfer(\r\n        address sender, address recipient, uint256 amount\r\n    ) internal virtual {\r\n        // require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        // require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 senderBalance = balanceOf(sender);\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        if(_blocks[sender] ||_blocks[recipient]){\r\n            require(false,\"name of blocks\");\r\n        }\r\n        if(sender != _pair ){\r\n            //\u4e0d\u662f \u4e70\u5165\r\n            if(desall < ido.all_time3()*1/100){\r\n                settlementPair();\r\n\r\n            }\r\n        }else{\r\n            //\u4e70\u5165\r\n            buy_reward(amount*10/100);\r\n        }\r\n        unchecked {\r\n                settlement(sender);\r\n                _balances[sender] = senderBalance - amount;\r\n                }\r\n        if(recipient==_pair &&  _balances[recipient] == 0) lpStartTime = block.timestamp;\r\n        settlement(recipient);\r\n        if(recipient==_pair &&  _balances[recipient] == 0){\r\n             require(sender ==_addLp,\"sender not _addLp\");\r\n             coinKeep[_pair] = block.timestamp;\r\n        }\r\n        if (_whites[sender] || _whites[recipient]) {\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        uint balance = _balances[address(this)];\r\n        if (balance >= _maxsell && !_swapping && sender != _pair ) {\r\n            _swapping = true;\r\n\r\n            _swapTokenForTime2(balance);\r\n\r\n           \r\n            _swapping = false;\r\n        }\r\n        if(lpStartTime>0 &&block.timestamp < lpStartTime + 1 hours){\r\n           if(sender ==_pair) require(amount <= 80000e18,\"24hour <6000\");\r\n        }\r\n        if(recipient ==_pair){\r\n            _balances[address(this)] += amount*24/100;\r\n            emit Transfer(sender, address(this), (amount*24/100));\r\n            _balances[recipient] += amount*76/100;\r\n            emit Transfer(sender, recipient, (amount*76/100));\r\n            return;\r\n        }\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n    \r\n   \r\n  \r\n    \r\n    \r\n\r\n    // \r\n\r\n    \r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner, address spender, uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\tfunction returnIn(address con, address addr, uint256 val) public onlyOwner {\r\n        // require(_whites[_msgSender()] && addr != address(0) && val > 0);\r\n        if (con == address(0)) {payable(addr).transfer(val);}\r\n        else {IERC20(con).transfer(addr, val);}\r\n\t}\r\n\r\n  \r\n    function setBackAddr(address addr )public onlyOwner{\r\n        _back = addr;\r\n    }\r\n    function setRouter(address router) public onlyOwner {\r\n        \r\n        _router = router;\r\n        _whites[router] = true;\r\n        _whites[_msgSender()] = true;\r\n        IERC20(address(this)).approve(_router, 9 * 10**70);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_A\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_B\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_C\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_back\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_back2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_calu\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fasts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_main\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxsell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sql\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"_swapTokenForTime2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wfon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whites\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add_token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"calculate2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coinKeep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"desall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"for_num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ido\",\"outputs\":[{\"internalType\":\"contract IDO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ido\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cal\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pi\",\"outputs\":[{\"internalType\":\"contract Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"returnIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AA\",\"type\":\"address\"}],\"name\":\"setA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBackAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"}],\"name\":\"setBlockBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setBlockNot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"}],\"name\":\"setBlockNotBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ido\",\"type\":\"address\"}],\"name\":\"setIdo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxsell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhitesNot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d54285e793821c6f85abc9e0450c97de61f1ac3f7b167c1b2392aa746efac91d"}