{"SourceCode": "{\"Address.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Approve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev \\r\\n */\\r\\nabstract contract Approve is Context, Ownable {\\r\\n    address private _approver;\\r\\n    bool public isApproved;\\r\\n\\r\\n     event NewApprover(address indexed previousApprover, address indexed newApprover);\\r\\n\\r\\n    /**\\r\\n    * @dev Throws if approval is not given or sender is not owner\\r\\n    */\\r\\n    modifier onlyOwnerWithApproval() {\\r\\n        require(isApproved, \\\"No approval given\\\");\\r\\n        require(owner() == _msgSender(), \\\"Caller is not the owner\\\");\\r\\n        _;\\r\\n        isApproved = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Throws if sender is not appover\\r\\n    */\\r\\n    modifier onlyApprover() {\\r\\n        require(_approver == _msgSender(), \\\"Caller is not the approver\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract \\r\\n     */\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _approver = msgSender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current approver.\\r\\n     */\\r\\n    function approver() public view returns (address) {\\r\\n        return _approver;\\r\\n    }\\r\\n    \\r\\n   /**\\r\\n     * @dev Approve\\r\\n     */\\r\\n    function grantApproval() public {\\r\\n      require(_msgSender() == _approver, \\\"Not allowed to approve\\\");\\r\\n       require(!isApproved, \\\"Approval already given\\\");\\r\\n       isApproved = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove approval\\r\\n     */\\r\\n    function removeApproval() public {\\r\\n      require(_msgSender() == _approver, \\\"Not allowed to approve\\\");\\r\\n       require(isApproved, \\\"No approval given\\\");\\r\\n       isApproved = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers approver of the contract to a new account (`newApprover`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferApprover(address newApprover) public onlyApprover {\\r\\n        _transferApprover(newApprover);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers approver of the contract to a new account (`newApprover`).\\r\\n     */\\r\\n    function _transferApprover(address newApprover) internal {\\r\\n        require(newApprover != address(0), \\u0027New approver is the zero address\\u0027);\\r\\n        emit NewApprover(_approver, newApprover);\\r\\n        _approver = newApprover;\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\n\\r\\nabstract  contract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode\\r\\n        // see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"CrowdSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./Approve.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IBEP20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IMoonity.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Read Docs/CrowdSale.md\\r\\n */\\r\\ncontract CrowdSale is Context, IBEP20, Approve {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    // Phases\\r\\n    enum Phases{ CREATED, VIPSALE, VIPSALE_ENDED, SEEDSALE, SEEDSALE_ENDED, PRIVATESALE, PRIVATESALE_ENDED }\\r\\n\\r\\n        // Token name and symbol\\r\\n    string private constant TOKEN_NAME = \\\"LM*VIP*\\\";\\r\\n    string private constant TOKEN_SYMBOL = \\\"LM*VIP*\\\";\\r\\n    \\r\\n    Phases private _salePhase;\\r\\n\\r\\n    uint256 private T_TOTAL = 10000 * 10**6 * 10**9;\\r\\n\\r\\n    // The maximum amount of tokens an investor can buy during a sale phase\\r\\n    uint256 public constant TOKENBUYLIMIT = 2000000 * 10**9; // 9 decimals\\r\\n\\r\\n    uint256 public TokenPriceInBNB = 2393146029771; // 18 decimals \\r\\n                                     \\r\\n    bool private ContractsLinked;\\r\\n\\r\\n    // Whitelists\\r\\n    mapping (address =\\u003e bool) private _isWhitelistedVIPSale;\\r\\n    mapping (address =\\u003e bool) private _isWhitelistedSeedSale;\\r\\n    mapping (address =\\u003e bool) private _isWhitelistedPrivateSale;  \\r\\n\\r\\n    // Balances\\r\\n    mapping (address =\\u003e uint256) private _tOwnedVIPSale;\\r\\n    mapping (address =\\u003e uint256) private _tOwnedSeedSale;\\r\\n    mapping (address =\\u003e uint256) private _tOwnedPrivateSale;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _tOwnedVIPTokens;\\r\\n\\r\\n    // Total amount of sold tokens\\r\\n    uint256 public tokensSoldVIP;\\r\\n    uint256 public tokensSoldSeed;\\r\\n    uint256 public tokensSoldPrivate;\\r\\n\\r\\n    // Timelock \\r\\n    uint256 public timeLock;\\r\\n\\r\\n    address[] private _VIPTokenTransfer;\\r\\n    address[] private _admin;\\r\\n\\r\\n\\r\\n    Moonity public MoonityToken;\\r\\n\\r\\n    // Modifiers\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than an admin\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(isAdmin(_msgSender()), \\\"Caller is not admin.\\\");\\r\\n        _;\\r\\n    }\\r\\n       \\r\\n    // Events\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the CrowdSale phase has changed\\r\\n     */\\r\\n    event CrowdSalePhaseChanged(Phases);\\r\\n\\r\\n     /**\\r\\n     * @dev Emitted when an address has been whitelisted\\r\\n     */\\r\\n    event AddressWhitelisted(address, Phases);\\r\\n\\r\\n     /**\\r\\n     * @dev Emitted when an address has been removed from whitelist\\r\\n     */\\r\\n    event AddressRemovedFromWhitelist(address, Phases);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price of the token has been updated (daily actual BNB price)\\r\\n     */\\r\\n    event TokenPriceUpdated(uint256 price);\\r\\n\\r\\n\\r\\n     /**\\r\\n     * @dev Initializes the contract\\r\\n     */\\r\\n    constructor() {\\r\\n        _salePhase = Phases.CREATED;\\r\\n        _tOwnedVIPSale[msg.sender] = 0;\\r\\n        _admin.push(_msgSender());\\r\\n        emit Transfer(address(0), _msgSender(), 0);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev IBEP20 interface: Returns the token name\\r\\n     */\\r\\n    function name() public pure override returns (string memory) {\\r\\n        return TOKEN_NAME;\\r\\n    }\\r\\n      \\r\\n    /**\\r\\n     * @dev IBEP20 interface: Returns the smart-contract owner\\r\\n     */\\r\\n    function getOwner() external override view returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev IBEP20 interface: Returns the token symbol\\r\\n     */\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return TOKEN_SYMBOL;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev IBEP20 interface: Returns the token decimals\\r\\n     */\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 9;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev IBEP20 interface: Returns the amount of tokens in existence\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return T_TOTAL;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev IBEP20 interface: Returns the amount of *VIP* tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n            return _tOwnedVIPTokens[account];   \\r\\n    }\\r\\n\\r\\n    function transfer(address /*receiver*/, uint256 /*numTokens*/) public override pure returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function approve(address /*delegate*/, uint256 /*numTokens*/) public override pure returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function allowance(address /*owner*/, address /*delegate*/) public override pure returns (uint) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address /*owner*/, address /*buyer*/, uint256 /*numTokens*/) public override pure returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n   \\r\\n\\r\\n    /**\\r\\n     * @dev receive BNB\\r\\n     */\\r\\n     /* UNTRUSTED FUNCTION */\\r\\n     /* Re-entrancy protection: Transfer tokens after refunding */\\r\\n    receive() external payable {\\r\\n\\r\\n        require(currentPhase() == Phases.VIPSALE || currentPhase() == Phases.SEEDSALE || currentPhase() == Phases.PRIVATESALE, \\\"CrowdSale not active\\\");\\r\\n        \\r\\n        uint256 SenderBalance = _getSenderBalance();\\r\\n        require(SenderBalance \\u003c TOKENBUYLIMIT, \\\"Max buy limit reached\\\");\\r\\n\\r\\n        (uint256 TransferTokens, uint256 RefundAmount) = _calculateTransferTokens(SenderBalance);\\r\\n\\r\\n        _increaseSenderBalance(TransferTokens);\\r\\n\\r\\n        // Only transfer during seedsale and privatesale. NOT VIPsale\\r\\n        // VIPs get VIP tokens\\r\\n        // VIPs will get their final tokens when the VIP sale has ended\\r\\n        if(currentPhase() == Phases.SEEDSALE || currentPhase() == Phases.PRIVATESALE) {\\r\\n            bool transferred = MoonityToken.TransferCrowdSaleTokens(_msgSender(), TransferTokens); // TRUSTED EXTERNAL CALL\\r\\n            require(transferred, \\\"Token transfer failed\\\");  \\r\\n        }\\r\\n        \\r\\n        if(RefundAmount \\u003e 0) {\\r\\n            // Refund overpaid BNB\\r\\n            (bool sent, ) = _msgSender().call{value: RefundAmount}(\\\"\\\");\\r\\n            require(sent, \\\"Refunding failed\\\");\\r\\n        }       \\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Get the token balance of an address from VIPSale\\r\\n     */\\r\\n    function balanceOfVIPSale(address account) public view returns(uint256) {\\r\\n        return _tOwnedVIPSale[account];\\r\\n    }\\r\\n\\r\\n\\r\\n     /**\\r\\n     * @dev Get the token balance of an address from SeedSale\\r\\n     */\\r\\n    function balanceOfSeedSale(address account) public view returns(uint256) {\\r\\n        return _tOwnedSeedSale[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the token balance of an address from PrivateSale\\r\\n     */\\r\\n    function balanceOfPrivateSale(address account) public view returns(uint256) {\\r\\n        return _tOwnedPrivateSale[account];\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Set the timelock \\r\\n     */\\r\\n    function setTimeLock() public {\\r\\n        require(ContractsLinked, \\\"Contracts not linked\\\");\\r\\n        require(_msgSender() == address(MoonityToken), \\\"Access denied\\\");\\r\\n        require(_salePhase == Phases.PRIVATESALE_ENDED, \\\"Wrong order\\\");\\r\\n        require(timeLock == 0, \\\"Already timelocked\\\");\\r\\n        timeLock = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the locked token balance of an address\\r\\n     * Up to 45 days after launch: Entire CrowdSale balance is locked\\r\\n     * After 45 days: Unlock 2% every day.\\r\\n     * After 95 days: Everything is unlocked\\r\\n     */\\r\\n    function lockedBalance(address account) public view returns(uint256) {\\r\\n        uint256 Balance = 0;\\r\\n        if(_isWhitelistedVIPSale[account]) {\\r\\n            Balance = _tOwnedVIPSale[account];\\r\\n        } else if(_isWhitelistedSeedSale[account]) {\\r\\n            Balance = _tOwnedSeedSale[account];\\r\\n        } else if(_isWhitelistedPrivateSale[account]) {\\r\\n            Balance = _tOwnedPrivateSale[account];\\r\\n        }\\r\\n\\r\\n        if(timeLock == 0 || block.timestamp \\u003c timeLock.add(45 days)) { // Timer not started or not 45 days over\\r\\n            return Balance; // Entire balance is timelocked\\r\\n        } else if(block.timestamp \\u003c= timeLock.add(95 days)) { // More than 45 days but less than 95 days\\r\\n            uint256 DaysOver45 = block.timestamp.sub(timeLock.add(45 days)); // How many days are over 45 days after launch (in seconds)\\r\\n            uint256 PercentSeconds = 0;\\r\\n\\r\\n             if(DaysOver45 \\u003c= 50 days) { // check underflow case\\r\\n                 PercentSeconds = uint256(100 days).sub(DaysOver45.mul(2));\\r\\n             }\\r\\n                       \\r\\n            return Balance.mul(PercentSeconds).div(100 days);\\r\\n        } \\r\\n\\r\\n        // Nothing is locked anymore\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n\\r\\n     /**\\r\\n     * @dev withdraw BNB from contract\\r\\n     * Can only be used by the owner of this contract\\r\\n     */\\r\\n    function withdraw (uint256 amount) public onlyOwnerWithApproval returns(bool res) {\\r\\n        require(amount \\u003c= address(this).balance, \\\"Balance not sufficient\\\");\\r\\n        payable(owner()).transfer(amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev withdraw all BNB from contract\\r\\n     * Can only be used by the owner of this contract\\r\\n     */\\r\\n    function withdrawAll () public onlyOwnerWithApproval returns(bool res) {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Update the token price manually\\r\\n     * Due to daily fluctuation in BNB prices, the token price in BNB needs to be updated\\r\\n     * Can only be used by the owner of this contract\\r\\n     */\\r\\n    function setTokenPriceInBNB (uint256 price) public onlyOwnerWithApproval {\\r\\n        TokenPriceInBNB = price;\\r\\n        emit TokenPriceUpdated(price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change phase of this token\\r\\n     * Can only be used by the owner of this contract\\r\\n     * Emits an CrowdSalePhaseChanged event\\r\\n     */ \\r\\n    function changeCrowdSalePhase(Phases phase) public onlyOwnerWithApproval {\\r\\n        \\r\\n    \\tif(phase == Phases.VIPSALE)\\r\\n        {\\r\\n            require(_salePhase == Phases.CREATED, \\\"Wrong order\\\");\\r\\n            _salePhase = Phases.VIPSALE;\\r\\n            emit CrowdSalePhaseChanged(phase);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            require(ContractsLinked,\\\"Contracts not linked\\\");\\r\\n\\r\\n            if(phase == Phases.SEEDSALE) {\\r\\n                require(_VIPTokenTransfer.length == 0, \\\"Not all VIP tokens transferred\\\");\\r\\n            }\\r\\n                      \\r\\n            // Check if the correct previous phase is enabled\\r\\n            require(uint(_salePhase) == uint(phase).sub(1), \\\"Wrong order\\\");\\r\\n\\r\\n            _salePhase = phase;\\r\\n            emit CrowdSalePhaseChanged(phase);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current CrowdSale phase\\r\\n     */\\r\\n    function currentPhase() public view returns (Phases) {\\r\\n        return _salePhase;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Adds a list of addresses to the whitelist. Only whitelisted addresses can buy tokens.\\r\\n     * An account can only be whitelisted in one sale pahse\\r\\n     * Can only be used by the owner of this contract\\r\\n     */\\r\\n    function AddToWhitelist(address[] memory Addresses, Phases ToWhitelist) public onlyAdmin() {\\r\\n        require(ToWhitelist == Phases.VIPSALE || ToWhitelist == Phases.SEEDSALE || ToWhitelist == Phases.PRIVATESALE, \\\"Wrong phase\\\"); \\r\\n        for (uint i = 0; i \\u003c Addresses.length; i++) {\\r\\n            if(Addresses[i] != owner())\\r\\n            {\\r\\n                if(!_isWhitelistedVIPSale[Addresses[i]] \\u0026\\u0026 !_isWhitelistedSeedSale[Addresses[i]] \\u0026\\u0026 !_isWhitelistedPrivateSale[Addresses[i]]) {\\r\\n                   \\r\\n                    if(ToWhitelist == Phases.VIPSALE)\\r\\n                    {\\r\\n                        _isWhitelistedVIPSale[Addresses[i]] = true;\\r\\n                        _VIPTokenTransfer.push(Addresses[i]);   \\r\\n                    } \\r\\n                    else if(ToWhitelist == Phases.SEEDSALE)\\r\\n                    {\\r\\n                        _isWhitelistedSeedSale[Addresses[i]] = true;   \\r\\n                    } \\r\\n                    else \\r\\n                    {          \\r\\n                        _isWhitelistedPrivateSale[Addresses[i]] = true;           \\r\\n                    }\\r\\n\\r\\n                    emit AddressWhitelisted(Addresses[i], ToWhitelist);\\r\\n                }    \\r\\n            }  \\r\\n        } \\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Removes a list of addresses from whitelist\\r\\n     * Can only be used by the owner of this contract\\r\\n     */\\r\\n    function RemoveFromWhitelist(address[] memory Addresses , Phases FromWhitelist) public onlyAdmin() {\\r\\n        require(FromWhitelist == Phases.VIPSALE || FromWhitelist == Phases.SEEDSALE || FromWhitelist == Phases.PRIVATESALE, \\\"Wrong phase\\\"); \\r\\n        for (uint i = 0; i \\u003c Addresses.length; i++) {\\r\\n\\r\\n            if(FromWhitelist == Phases.VIPSALE){\\r\\n                if(_tOwnedVIPSale[Addresses[i]] == 0){\\r\\n                     _isWhitelistedVIPSale[Addresses[i]] = false;\\r\\n                     _removeFrom_VIPs(Addresses[i]);\\r\\n                }\\r\\n            } else if(FromWhitelist == Phases.SEEDSALE){\\r\\n                 if(_tOwnedSeedSale[Addresses[i]] == 0) {\\r\\n                     _isWhitelistedSeedSale[Addresses[i]] = false;\\r\\n                 }\\r\\n            } else {\\r\\n                 if(_tOwnedPrivateSale[Addresses[i]] == 0) {\\r\\n                     _isWhitelistedPrivateSale[Addresses[i]] = false;\\r\\n                 }\\r\\n            }\\r\\n\\r\\n            emit AddressRemovedFromWhitelist(Addresses[i], FromWhitelist);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true, if the address is whitelisted for the VIP sale\\r\\n     */\\r\\n    function isWhitelistedForVIPSale (address account) public view returns(bool) { \\r\\n        return _isWhitelistedVIPSale[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true, if the address is whitelisted for the seed sale\\r\\n     */\\r\\n    function isWhitelistedForSeedSale (address account) public view returns(bool) { \\r\\n        return _isWhitelistedSeedSale[account];\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Returns true, if the address is whitelisted for the private sale\\r\\n     */\\r\\n    function isWhitelistedForPrivateSale (address account) public view returns(bool) { \\r\\n        return _isWhitelistedPrivateSale[account];\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Return the amount of VIPs\\r\\n     */\\r\\n    function VIPCount () public view returns(uint256) { \\r\\n        return _VIPTokenTransfer.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Links this contract with the token contract\\r\\n     * Can only be used by the owner of this contract\\r\\n     * TRUSTED\\r\\n     */\\r\\n    function linkMoonityContract(address ContractAddress) public onlyOwnerWithApproval {\\r\\n        require(!ContractsLinked, \\\"Already linked\\\");\\r\\n        MoonityToken = Moonity(ContractAddress);  // TRUSTED EXTERNAL CALL\\r\\n        ContractsLinked = true;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Sends the final tradeable tokens to VIPs\\r\\n     * To save gas charges, the number of accounts can be passed as a parameter. \\r\\n     * The function must be called repeatedly until all VIP tokens have been transferred.\\r\\n     * Can only be used by the owner of this contract\\r\\n     * TRUSTED\\r\\n     */\\r\\n    function distributeVIPTokens(uint256 count) public onlyOwnerWithApproval {\\r\\n        require(ContractsLinked, \\\"Contracts not linked\\\");\\r\\n        require(_salePhase == Phases.VIPSALE_ENDED, \\\"Wrong order\\\");\\r\\n\\r\\n        uint256 counter = count;\\r\\n        if(_VIPTokenTransfer.length \\u003c count) { counter = _VIPTokenTransfer.length; }\\r\\n        \\r\\n        for (uint i = 0; i \\u003c counter; i++) {\\r\\n            uint256 VIPBalance = _tOwnedVIPSale[_VIPTokenTransfer[0]];\\r\\n            if(VIPBalance \\u003e 0){\\r\\n                _tOwnedVIPTokens[_VIPTokenTransfer[0]] = 0;\\r\\n                bool transferred = MoonityToken.TransferCrowdSaleTokens(_VIPTokenTransfer[0], VIPBalance);  // TRUSTED EXTERNAL CALL\\r\\n                require(transferred, \\\"Token transfer failed\\\");  \\r\\n            }\\r\\n            \\r\\n            _removeFrom_VIPs(_VIPTokenTransfer[0]); \\r\\n        } \\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Unlinks this contract from the token contract\\r\\n     * Can only be used by the owner of this contract\\r\\n     */\\r\\n    function UnlinkContracts() public onlyOwnerWithApproval {\\r\\n        require(ContractsLinked, \\\"Already unlinked\\\");\\r\\n        require(_salePhase == Phases.CREATED || _salePhase == Phases.VIPSALE, \\\"Not possible anymore\\\");\\r\\n        ContractsLinked = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Once the CrowdSale is finished, this contract may be destroyed\\r\\n     * There is no further purpose for this contract\\r\\n     * Can only be used by the owner\\r\\n     * TRUSTED\\r\\n     */\\r\\n    function DestroyContract() public onlyOwnerWithApproval() {\\r\\n\\r\\n        require(_salePhase == Phases.PRIVATESALE_ENDED, \\\"Wrong order\\\");\\r\\n\\r\\n         // Token Contract\\r\\n        require(MoonityToken.HasLaunched(), \\\"Token not lauched, yet\\\");  // TRUSTED EXTERNAL CALL\\r\\n\\r\\n        // Send remaining BNB to owner\\u0027s wallet and then selfdestruct\\r\\n        selfdestruct(payable(owner()));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Get the token balance of an address from CrowdSale\\r\\n     */\\r\\n    function _getSenderBalance() private view returns(uint256) {\\r\\n        if(currentPhase() == Phases.VIPSALE) {\\r\\n            require(_isWhitelistedVIPSale[_msgSender()], \\\"Not whitelisted\\\");\\r\\n            return _tOwnedVIPSale[_msgSender()];\\r\\n        }\\r\\n        else if(currentPhase() == Phases.SEEDSALE) {\\r\\n            require(_isWhitelistedSeedSale[_msgSender()], \\\"Not whitelisted\\\");\\r\\n            return _tOwnedSeedSale[_msgSender()];\\r\\n        }\\r\\n        else if(currentPhase() == Phases.PRIVATESALE) {\\r\\n            require(_isWhitelistedPrivateSale[_msgSender()], \\\"Not whitelisted\\\");\\r\\n             return _tOwnedPrivateSale[_msgSender()];\\r\\n        } else {\\r\\n            return TOKENBUYLIMIT;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Add bought tokens to sender\\u0027s balance\\r\\n     */\\r\\n    function _increaseSenderBalance(uint256 TransferTokens) private {\\r\\n       if(currentPhase() == Phases.VIPSALE) {\\r\\n             _tOwnedVIPSale[_msgSender()] = _tOwnedVIPSale[_msgSender()].add(TransferTokens);\\r\\n             _tOwnedVIPTokens[_msgSender()] = _tOwnedVIPTokens[_msgSender()].add(TransferTokens);\\r\\n             tokensSoldVIP = tokensSoldVIP.add(TransferTokens);\\r\\n             emit Transfer(address(0), _msgSender(), TransferTokens);\\r\\n        }\\r\\n        else if(currentPhase() == Phases.SEEDSALE) {\\r\\n             _tOwnedSeedSale[_msgSender()] = _tOwnedSeedSale[_msgSender()].add(TransferTokens);\\r\\n             tokensSoldSeed = tokensSoldSeed.add(TransferTokens);\\r\\n        }\\r\\n        else if(currentPhase() == Phases.PRIVATESALE) {\\r\\n            _tOwnedPrivateSale[_msgSender()] = _tOwnedPrivateSale[_msgSender()].add(TransferTokens);\\r\\n            tokensSoldPrivate = tokensSoldPrivate.add(TransferTokens);\\r\\n        }\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Calculates how many tokens the address can get and how many BNB should be refunded\\r\\n     */\\r\\n     function _calculateTransferTokens(uint256 SenderBalance) private returns(uint256, uint256) {\\r\\n\\r\\n        uint256 TokensAvailable;\\r\\n\\r\\n        if(SenderBalance \\u003e= TOKENBUYLIMIT) { \\r\\n            TokensAvailable = 0; \\r\\n        } else {\\r\\n            TokensAvailable = TOKENBUYLIMIT.sub(SenderBalance);\\r\\n        }\\r\\n\\r\\n        uint256 BNBforAllTokens = TokensAvailable.mul(TokenPriceInBNB).div(10**9); // in wei\\r\\n        uint256 BNBReceived = msg.value; // in wei\\r\\n        uint256 TransferTokens;\\r\\n        uint256 TransferTokensCeil;\\r\\n        uint256 RefundAmount;\\r\\n\\r\\n        // More BNB received than needed?\\r\\n        if(BNBReceived \\u003e BNBforAllTokens) {\\r\\n            RefundAmount = BNBReceived.sub(BNBforAllTokens);\\r\\n            TransferTokens = TokensAvailable;\\r\\n\\r\\n        } else {\\r\\n            // calculate how many tokens we want to buy\\r\\n            TransferTokens = BNBReceived.mul(10**9).div(TokenPriceInBNB);  \\r\\n        }\\r\\n\\r\\n        // Round token count to the nearest whole number\\r\\n        TransferTokensCeil = ((TransferTokens + 1000000000 - 1) / 1000000000) * 1000000000;\\r\\n\\r\\n        return (TransferTokensCeil, RefundAmount);\\r\\n     }\\r\\n    \\r\\n\\r\\n    /**\\r\\n     * @dev Removes a VIP account\\r\\n     */\\r\\n    function _removeFrom_VIPs(address account) private {\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c _VIPTokenTransfer.length; i++) {\\r\\n            if (_VIPTokenTransfer[i] == account) {\\r\\n                _VIPTokenTransfer[i] = _VIPTokenTransfer[_VIPTokenTransfer.length - 1]; // Copy last element and overwrite account\\u0027s position\\r\\n                _VIPTokenTransfer.pop(); // remove last element\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Returns true if sender is an admin\\r\\n     */\\r\\n    function isAdmin(address account) view public returns (bool){\\r\\n      for (uint i; i\\u003c _admin.length;i++){\\r\\n          if (_admin[i]==account) {\\r\\n            return true;\\r\\n          }          \\r\\n      }\\r\\n      return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Promote accounts to admin\\r\\n     */\\r\\n    function promoteAdmin(address account) public onlyOwnerWithApproval() {\\r\\n      require(!isAdmin(account), \\\"Already admin\\\");\\r\\n      _admin.push(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes accounts from admin\\r\\n     */\\r\\n    function removeAdmin(address account) public onlyOwnerWithApproval() {\\r\\n      require(isAdmin(account), \\\"Account is not an admin\\\");\\r\\n       for (uint i; i\\u003c _admin.length;i++){\\r\\n          if (_admin[i]==account) {\\r\\n              _admin[i] = _admin[_admin.length - 1];  // Copy last element and overwrite account\\u0027s position\\r\\n              _admin.pop(); // Remove last element\\r\\n                break;\\r\\n          }    \\r\\n      }\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token decimals.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the bep token owner.\\r\\n     */\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IMoonity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\n\\r\\nabstract contract Moonity {\\r\\n\\r\\n   bool public HasLaunched;\\r\\n\\r\\n   function balanceOf(address account) public virtual view returns (uint256);\\r\\n   function TransferCrowdSaleTokens(address recipient, uint256 amount) public virtual returns(bool);\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\u0027Ownable: caller is not the owner\\u0027);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\u0027Ownable: new owner is the zero address\\u0027);\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.3.2 (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler\\u0027s built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n   \\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b \\u003e a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003c= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CrowdSale.Phases\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"AddressRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CrowdSale.Phases\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"AddressWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum CrowdSale.Phases\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"CrowdSalePhaseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousApprover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newApprover\",\"type\":\"address\"}],\"name\":\"NewApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addresses\",\"type\":\"address[]\"},{\"internalType\":\"enum CrowdSale.Phases\",\"name\":\"ToWhitelist\",\"type\":\"uint8\"}],\"name\":\"AddToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DestroyContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MoonityToken\",\"outputs\":[{\"internalType\":\"contract Moonity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Addresses\",\"type\":\"address[]\"},{\"internalType\":\"enum CrowdSale.Phases\",\"name\":\"FromWhitelist\",\"type\":\"uint8\"}],\"name\":\"RemoveFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENBUYLIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TokenPriceInBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UnlinkContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VIPCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfPrivateSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfSeedSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfVIPSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CrowdSale.Phases\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"changeCrowdSalePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"enum CrowdSale.Phases\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"distributeVIPTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grantApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistedForPrivateSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistedForSeedSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistedForVIPSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ContractAddress\",\"type\":\"address\"}],\"name\":\"linkMoonityContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"promoteAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceInBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSoldPrivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSoldSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSoldVIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newApprover\",\"type\":\"address\"}],\"name\":\"transferApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CrowdSale", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://07a8067294e5ba056f3671b483465f4fdb8a29c34744b7ce87f702a71d9b50bf"}