{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// Interfaces for ERC20 and Chainlink's Price Feed\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function latestRoundData() external view returns (\r\n        uint80 roundId,\r\n        int256 answer,\r\n        uint256 startedAt,\r\n        uint256 updatedAt,\r\n        uint80 answeredInRound\r\n    );\r\n}\r\n\r\ncontract ICO_CONTRACT {\r\n    address public owner;\r\n    IERC20 public token;\r\n    AggregatorV3Interface public bnbPriceFeed;\r\n\r\n    bool public isBuyEnabled = true;\r\n    uint256 public minBuyAmount = 0.05 ether; // Min buy limit in BNB (0.05 BNB)\r\n    uint256 public maxBuyAmount = 10 ether; // Max buy limit in BNB (10 BNB)\r\n    \r\n    uint256 public tokenPriceInUSD = 5; // Equivalent to 0.00005 USD, represented in cents\r\n    uint256 public totalBNBReceived; // Total BNB received\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _token, address _bnbPriceFeed) {\r\n        owner = msg.sender;\r\n        token = IERC20(_token);\r\n        bnbPriceFeed = AggregatorV3Interface(_bnbPriceFeed);\r\n    }\r\n\r\n    function buyTokensWithBNB() external payable {\r\n        require(isBuyEnabled, \"Buying tokens is currently disabled.\");\r\n        require(msg.value >= minBuyAmount && msg.value <= maxBuyAmount, \"BNB amount not within allowed range.\");\r\n        int256 latestPrice = getLatestBNBPrice();\r\n        uint256 amountOfTokens = calculateTokenAmount(msg.value, uint256(latestPrice));\r\n        \r\n        require(token.balanceOf(address(this)) >= amountOfTokens, \"Not enough tokens in the contract.\");\r\n\r\n        token.transfer(msg.sender, amountOfTokens);\r\n        totalBNBReceived += msg.value; // Update the total BNB received\r\n    }\r\n\r\n    function getLatestBNBPrice() public view returns (int256) {\r\n        (, int256 answer, , ,) = bnbPriceFeed.latestRoundData();\r\n        return answer;\r\n    }\r\n\r\n    function calculateTokenAmount(uint256 amount, uint256 priceInUSD) public view returns (uint256) {\r\n        uint256 amountInUSD = (amount * priceInUSD) / 1e8; // Convert amount based on price feed's 8 decimals\r\n        uint256 basicTokenAmount = (amountInUSD * 100000) / tokenPriceInUSD; // Convert to cents and calculate basic token amount\r\n\r\n        // Adjust for token's decimals\r\n        return basicTokenAmount * (10 ** uint256(token.decimals())) / 1e18;\r\n    }\r\n\r\n    function withdrawBNB() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawTokens() external onlyOwner {\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n\r\n    // Change Token Price Function\r\n    function changeTokenPrice(uint256 newPriceInUSD) public onlyOwner {\r\n        require(newPriceInUSD > 0, \"Price must be greater than 0.\");\r\n        tokenPriceInUSD = newPriceInUSD;\r\n    }\r\n\r\n    // Setter functions for min and max buy limits\r\n    function setMinBuyAmount(uint256 newMinBuyAmount) external onlyOwner {\r\n        minBuyAmount = newMinBuyAmount;\r\n    }\r\n\r\n    function setMaxBuyAmount(uint256 newMaxBuyAmount) external onlyOwner {\r\n        maxBuyAmount = newMaxBuyAmount;\r\n    }\r\n\r\n    function enableBuying() external onlyOwner {\r\n        isBuyEnabled = true;\r\n    }\r\n\r\n    function disableBuying() external onlyOwner {\r\n        isBuyEnabled = false;\r\n    }\r\n\r\n    // Function to transfer ownership\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner cannot be the zero address.\");\r\n        owner = newOwner;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnbPriceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bnbPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInUSD\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPriceInUSD\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBuying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestBNBPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinBuyAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBNBReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ICO_CONTRACT", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d3d8cb32623ba286ae920838080f2cd09848392f0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3552491de0d2710992951d72e677d7ea482c975b4cba70dfe71f9785cd87cc36"}