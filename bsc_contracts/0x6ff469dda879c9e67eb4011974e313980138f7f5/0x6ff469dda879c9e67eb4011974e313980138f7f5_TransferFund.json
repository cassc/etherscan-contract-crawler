{"SourceCode": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.18;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns(uint256);\r\n\r\n/**\r\n * @dev Returns the token decimals.\r\n */\r\nfunction decimals() external view returns(uint8);\r\n\r\n/**\r\n * @dev Returns the token symbol.\r\n */\r\nfunction symbol() external view returns(string memory);\r\n\r\n/**\r\n * @dev Returns the token name.\r\n */\r\nfunction name() external view returns(string memory);\r\n\r\n/**\r\n * @dev Returns the amount of tokens owned by `account`.\r\n */\r\nfunction balanceOf(address account) external view returns(uint256);\r\n\r\n/**\r\n * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\nfunction transfer(address recipient, uint256 amount)\r\nexternal\r\nreturns(bool);\r\n\r\n/**\r\n * @dev Returns the remaining number of tokens that `spender` will be\r\n * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n * zero by default.\r\n *\r\n * This value changes when {approve} or {transferFrom} are called.\r\n */\r\nfunction allowance(address _owner, address spender)\r\nexternal\r\nview\r\nreturns(uint256);\r\n\r\n/**\r\n * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n * that someone may use both the old and the new allowance by unfortunate\r\n * transaction ordering. One possible solution to mitigate this race\r\n * condition is to first reduce the spender's allowance to 0 and set the\r\n * desired value afterwards:\r\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n *\r\n * Emits an {Approval} event.\r\n */\r\nfunction approve(address spender, uint256 amount) external returns(bool);\r\n\r\n/**\r\n * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n * allowance mechanism. `amount` is then deducted from the caller's\r\n * allowance.\r\n *\r\n * Returns a boolean value indicating whether the operation succeeded.\r\n *\r\n * Emits a {Transfer} event.\r\n */\r\nfunction transferFrom(\r\n  address sender,\r\n  address recipient,\r\n  uint256 amount\r\n) external returns(bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n  address indexed owner,\r\n  address indexed spender,\r\n  uint256 value\r\n);\r\n}\r\n\r\ncontract TransferFund {\r\n\r\n  function tranferAmount(address tokenAddress, uint256 totalAmount, address[] memory usersAddress, uint256[] memory amount)external {\r\n    require(IBEP20(tokenAddress).balanceOf(msg.sender) >= totalAmount, \"Insufficient balance\");\r\n    require(IBEP20(tokenAddress).allowance(msg.sender, address(this)) >= totalAmount, \"Insufficient allowance\");\r\n    require(usersAddress.length == amount.length, \"User Addresses and Amountto transfer are not of same length\");\r\n     uint256 _totalAmount = 0;\r\n    for (uint i = 0; i < amount.length ; i++) {\r\n      _totalAmount += amount[i];\r\n    }\r\n    require(totalAmount>=_totalAmount, \"Total amount and distribution amount are not same\");\r\n    for (uint i = 0; i < usersAddress.length ; i++) {\r\n      IBEP20(tokenAddress).transferFrom(msg.sender, usersAddress[i], amount[i]);\r\n    }\r\n\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"usersAddress\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"tranferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TransferFund", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f80c76760177ce5ce8c0055513e1e2abfe064b768b7a6b6cac3cb95cadc83bbd"}