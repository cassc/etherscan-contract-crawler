{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/data/StructData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nlibrary StructData {\\n    // struct to store staked NFT information\\n    struct StakedNFT {\\n        address stakerAddress;\\n        uint256 startTime;\\n        uint256 unlockTime;\\n        uint256[] nftIds;\\n        uint256 totalValueStakeUsdWithDecimal;\\n        uint16 apr;\\n        uint256 totalClaimedAmountUsdWithDecimal;\\n        uint256 totalRewardAmountUsdWithDecimal;\\n        bool isUnstaked;\\n    }\\n\\n    struct ChildListData {\\n        address[] childList;\\n        uint256 memberCounter;\\n    }\\n\\n    struct ListBuyData {\\n        StructData.InfoBuyData[] childList;\\n    }\\n\\n    struct InfoBuyData {\\n        uint256 timeBuy;\\n        uint256 valueUsd;\\n    }\\n\\n    struct ListSwapData {\\n        StructData.InfoSwapData[] childList;\\n    }\\n\\n    struct InfoSwapData {\\n        uint256 timeSwap;\\n        uint256 valueSwap;\\n    }\\n\\n    struct ListMaintenance {\\n        StructData.InfoMaintenanceNft[] childList;\\n    }\\n\\n    struct InfoMaintenanceNft {\\n        uint256 startTimeRepair;\\n        uint256 endTimeRepair;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../swap/InternalSwap.sol\\\";\\n\\ninterface IPancakePair {\\n    function getReserves() external view returns (\\n        uint112 _reserve0,\\n        uint112 _reserve1,\\n        uint32 _blockTimestampLast\\n    );\\n}\\n\\ncontract Oracle is Ownable {\\n    uint256 private minTokenAmount = 0;\\n    uint256 private maxTokenAmount = 0;\\n\\n    address public pairAddress;\\n    address public stableToken;\\n    address public tokenAddress;\\n    address public swapAddress;\\n    uint8 private typeConvert = 1; // 0: average, 1: only swap, 2: only pancake\\n\\n    constructor(address _swapAddress, address _stableToken, address _tokenAddress) {\\n        swapAddress = _swapAddress;\\n        stableToken = _stableToken;\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    function convertInternalSwap (uint256 _value, bool toToken) public view returns (uint256) {\\n        uint256 usdtAmount = InternalSwap(swapAddress).getUsdtAmount();\\n        uint256 tokenAmount = InternalSwap(swapAddress).getTokenAmount();\\n        if (tokenAmount > 0 && usdtAmount > 0) {\\n            uint256 amountTokenDecimal;\\n            if (toToken) {\\n                amountTokenDecimal = (_value * tokenAmount) / usdtAmount;\\n            } else {\\n                amountTokenDecimal = (_value * usdtAmount) / tokenAmount;\\n            }\\n\\n            return amountTokenDecimal;\\n        }\\n        return 0;\\n    }\\n\\n    function convertUsdBalanceDecimalToTokenDecimal(uint256 _balanceUsdDecimal) public view returns (uint256) {\\n        uint256 tokenInternalSwap = convertInternalSwap(_balanceUsdDecimal, true);\\n        uint256 tokenPairConvert;\\n        if (pairAddress != address(0)) {\\n            (uint256 _reserve0, uint256 _reserve1, ) = IPancakePair(pairAddress).getReserves();\\n            (uint256 _tokenBalance, uint256 _stableBalance) = address(tokenAddress) < address(stableToken) ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n\\n            uint256 _minTokenAmount = (_balanceUsdDecimal * minTokenAmount) / 1000000;\\n            uint256 _maxTokenAmount = (_balanceUsdDecimal * maxTokenAmount) / 1000000;\\n            uint256 _tokenAmount = (_balanceUsdDecimal * _tokenBalance) / _stableBalance;\\n\\n            if (_tokenAmount < _minTokenAmount) {\\n                tokenPairConvert = _minTokenAmount;\\n            }\\n\\n            if (_tokenAmount > _maxTokenAmount) {\\n                tokenPairConvert = _maxTokenAmount;\\n            }\\n\\n            tokenPairConvert = _tokenAmount;\\n        }\\n        if (typeConvert == 1) {\\n            return tokenInternalSwap;\\n        } else if (typeConvert == 2) {\\n            return tokenPairConvert;\\n        } else {\\n            if (tokenPairConvert == 0 || tokenInternalSwap == 0) {\\n                return tokenPairConvert + tokenInternalSwap;\\n            } else {\\n                return (tokenPairConvert + tokenInternalSwap) / 2;\\n            }\\n        }\\n    }\\n\\n    function setPairAddress(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"ORACLE: INVALID PAIR ADDRESS\\\");\\n        pairAddress = _address;\\n    }\\n\\n    function setSwapAddress(address _address) external onlyOwner {\\n        require(_address != address(0), \\\"ORACLE: INVALID SWAP ADDRESS\\\");\\n        swapAddress = _address;\\n    }\\n\\n    function setTypeConvertPrice(uint8 _type) external onlyOwner {\\n        require(_type <= 2, \\\"ORACLE: INVALID TYPE CONVERT\\\");\\n        typeConvert = _type;\\n    }\\n\\n    function getTypeConvert() external view returns (uint8) {\\n        return typeConvert;\\n    }\\n\\n    function setMinTokenAmount(uint256 _tokenAmount) external onlyOwner {\\n        minTokenAmount = _tokenAmount;\\n    }\\n\\n    function setMaxTokenAmount(uint256 _tokenAmount) external onlyOwner {\\n        maxTokenAmount = _tokenAmount;\\n    }\\n\\n    /**\\n     * @dev Recover lost bnb and send it to the contract owner\\n     */\\n    function recoverLostBNB() public onlyOwner {\\n        address payable recipient = payable(msg.sender);\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev withdraw some token balance from contract to owner account\\n     */\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public onlyOwner {\\n        require(_amount > 0, \\\"INVALID AMOUNT\\\");\\n        require(IERC20(_token).transfer(msg.sender, _amount), \\\"CANNOT WITHDRAW TOKEN\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/swap/InternalSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/FitZenERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../data/StructData.sol\\\";\\n\\ncontract InternalSwap is Ownable {\\n    using SafeMath for uint256;\\n    uint256 private usdtAmount = 1000000;\\n    uint256 private tokenAmount = 1000000;\\n    address public currency;\\n    address public tokenAddress;\\n    uint8 private typeSwap = 0; //0: all, 1: usdt -> token only, 2: token -> usdt only\\n\\n    address private _taxAddress;\\n    uint256 private _taxSellFee = 0;\\n    uint256 private _taxBuyFee = 0;\\n    uint8 private limitDay = 1;\\n    uint256 private limitValue = 0;\\n    mapping(address => bool) private _addressSellHasTaxFee;\\n    mapping(address => bool) private _addressBuyHasTaxFee;\\n    mapping(address => bool) private _addressBuyExcludeTaxFee;\\n    mapping(address => bool) private _addressSellExcludeHasTaxFee;\\n    mapping(address => StructData.ListSwapData) addressBuyTokenData;\\n    mapping(address => StructData.ListSwapData) addressSellTokenData;\\n    bool private reentrancyGuardForBuying = false;\\n    bool private reentrancyGuardForSelling = false;\\n\\n    event ChangeRate(uint256 _usdtAmount, uint256 _tokenAmount, uint256 _time);\\n    constructor(address _stableToken, address _tokenAddress) {\\n        currency = _stableToken;\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    function getLimitDay() external view returns (uint8) {\\n        return limitDay;\\n    }\\n\\n    function getUsdtAmount() external view returns (uint256) {\\n        return usdtAmount;\\n    }\\n\\n    function getTokenAmount() external view returns (uint256) {\\n        return tokenAmount;\\n    }\\n\\n    function getLimitValue() external view returns (uint256) {\\n        return limitValue;\\n    }\\n\\n    function setLimitDay(uint8 _limitDay) external onlyOwner {\\n        limitDay = _limitDay;\\n    }\\n\\n    function setLimitValue(uint256 _valueToLimit) external onlyOwner {\\n        limitValue = _valueToLimit;\\n    }\\n\\n    function getTaxSellFee() external view returns (uint256) {\\n        return _taxSellFee;\\n    }\\n\\n    function getTaxBuyFee() external view returns (uint256) {\\n        return _taxBuyFee;\\n    }\\n\\n    function getTaxAddress() external view returns (address) {\\n        return _taxAddress;\\n    }\\n\\n    function setTaxSellFeePercent(uint256 taxFeeBps) external onlyOwner {\\n        _taxSellFee = taxFeeBps;\\n    }\\n\\n    function setTaxBuyFeePercent(uint256 taxFeeBps) external onlyOwner {\\n        _taxBuyFee = taxFeeBps;\\n    }\\n\\n    function setTaxAddress(address taxAddress_) external onlyOwner {\\n        _taxAddress = taxAddress_;\\n    }\\n\\n    function setAddressSellHasTaxFee(address account, bool hasFee) external onlyOwner {\\n        _addressSellHasTaxFee[account] = hasFee;\\n    }\\n\\n    function isAddressSellHasTaxFee(address account) external view returns (bool) {\\n        return _addressSellHasTaxFee[account];\\n    }\\n\\n    function setAddressBuyHasTaxFee(address account, bool hasFee) external onlyOwner {\\n        _addressBuyHasTaxFee[account] = hasFee;\\n    }\\n\\n    function isAddressBuyHasTaxFee(address account) external view returns (bool) {\\n        return _addressBuyHasTaxFee[account];\\n    }\\n\\n    function setAddressBuyExcludeTaxFee(address account, bool hasFee) external onlyOwner {\\n        _addressBuyExcludeTaxFee[account] = hasFee;\\n    }\\n\\n    function setAddressSellExcludeTaxFee(address account, bool hasFee) external onlyOwner {\\n        _addressSellExcludeHasTaxFee[account] = hasFee;\\n    }\\n\\n    function calculateSellTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxSellFee).div(10000);\\n    }\\n\\n    function calculateBuyTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxBuyFee).div(10000);\\n    }\\n\\n    function setPriceData(uint256 _usdtAmount, uint256 _tokenAmount) external onlyOwner {\\n        usdtAmount = _usdtAmount;\\n        tokenAmount = _tokenAmount;\\n        emit ChangeRate(_usdtAmount, _tokenAmount, block.timestamp);\\n    }\\n\\n    function getTypeSwap() external view returns (uint8) {\\n        return typeSwap;\\n    }\\n\\n    function setPriceType(uint8 _type) external onlyOwner {\\n        require(\\n           _type <= 2,\\n            \\\"SWAP: INVALID TYPE SWAP (0, 1, 2)\\\"\\n        );\\n        typeSwap = _type;\\n    }\\n\\n    function updateBuyTokenData(address _wallet, uint256 _value, uint256 _time) internal {\\n        StructData.InfoSwapData memory item;\\n        item.timeSwap = _time;\\n        item.valueSwap = _value;\\n        addressBuyTokenData[_wallet].childList.push(item);\\n    }\\n\\n    function updateSellTokenData(address _wallet, uint256 _value, uint256 _time) internal {\\n        StructData.InfoSwapData memory item;\\n        item.timeSwap = _time;\\n        item.valueSwap = _value;\\n        addressSellTokenData[_wallet].childList.push(item);\\n    }\\n\\n    function checkCanSellToken(address _wallet, uint256 _value) internal view returns (bool) {\\n        if (limitValue == 0 || limitDay == 0) {\\n            return true;\\n        }\\n        StructData.InfoSwapData[] memory listSellToken = addressSellTokenData[_wallet].childList;\\n        bool canSell = true;\\n        uint256 today = block.timestamp;\\n        uint256 maxValue = limitValue * (10 ** FitZenERC20(tokenAddress).decimals());\\n        uint256 timeCheck = block.timestamp - limitDay * 24 * 60 * 60;\\n        uint256 totalSellValue;\\n        for (uint i = 0; i < listSellToken.length; i++) {\\n            uint256 timeBuy = listSellToken[i].timeSwap;\\n            uint256 valueSwap = listSellToken[i].valueSwap;\\n            if (timeBuy >= timeCheck && timeBuy <= today) {\\n                totalSellValue = totalSellValue + valueSwap;\\n            }\\n        }\\n        uint256 valueAfterSell = totalSellValue + _value;\\n        if (valueAfterSell > maxValue) {\\n            canSell = false;\\n        }\\n        return canSell;\\n    }\\n\\n    function buyToken(uint256 _values) external {\\n        require(\\n            typeSwap == 1 || typeSwap == 0,\\n            \\\"SWAP: CANNOT BUY TOKEN NOW\\\"\\n        );\\n        require(_values > 0, \\\"SWAP: INVALID VALUE\\\");\\n        require(!reentrancyGuardForBuying, \\\"SWAP: REENTRANCY DETECTED\\\");\\n        reentrancyGuardForBuying = true;\\n        uint256 amountTokenDecimal = 0;\\n        uint256 amountBuyFee = 0;\\n        bool _isExcludeUserBuy = _addressBuyExcludeTaxFee[msg.sender];\\n        uint256 usdtValue = _values;\\n        if (tokenAmount > 0 && usdtAmount > 0) {\\n            amountTokenDecimal = (usdtValue * tokenAmount) / usdtAmount;\\n            if (_taxBuyFee != 0 && !_isExcludeUserBuy) {\\n                amountBuyFee = calculateBuyTaxFee(amountTokenDecimal);\\n                amountTokenDecimal = amountTokenDecimal - amountBuyFee;\\n            }\\n        }\\n        if (amountTokenDecimal != 0) {\\n            require(\\n                FitZenERC20(currency).balanceOf(msg.sender) >= usdtValue,\\n                \\\"SWAP: NOT ENOUGH BALANCE CURRENCY TO BUY TOKEN\\\"\\n            );\\n            require(\\n                FitZenERC20(currency).allowance(msg.sender, address(this)) >= usdtValue,\\n                \\\"SWAP: MUST APPROVE FIRST\\\"\\n            );\\n            require(\\n                FitZenERC20(currency).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    usdtValue\\n                ),\\n                \\\"SWAP: FAIL TO SWAP\\\"\\n            );\\n            require(\\n                FitZenERC20(tokenAddress).transfer(\\n                    msg.sender,\\n                    amountTokenDecimal\\n                ),\\n                \\\"SWAP: FAIL TO SWAP\\\"\\n            );\\n            if (amountBuyFee != 0) {\\n                require(\\n                    FitZenERC20(tokenAddress).transfer(\\n                        _taxAddress,\\n                        amountBuyFee\\n                    ),\\n                    \\\"SWAP: FAIL TO SWAP\\\"\\n                );\\n            }\\n            updateBuyTokenData(msg.sender, amountTokenDecimal, block.timestamp);\\n        }\\n        reentrancyGuardForBuying = false;\\n    }\\n\\n    function sellToken(uint256 _values) external {\\n        require(\\n            typeSwap == 2 || typeSwap == 0,\\n            \\\"SWAP: CANNOT SELL TOKEN NOW\\\"\\n        );\\n        require(_values > 0, \\\"SWAP: INVALID VALUE\\\");\\n        require(!reentrancyGuardForSelling, \\\"SWAP: REENTRANCY DETECTED\\\");\\n        reentrancyGuardForSelling = true;\\n        uint256 amountUsdtDecimal = 0;\\n        uint256 amountSellFee = 0;\\n        uint256 tokenValue = _values;\\n        bool checkUserCanSellToken = checkCanSellToken(msg.sender, tokenValue);\\n        require(checkUserCanSellToken, \\\"SWAP: MAXIMUM SWAP TODAY\\\");\\n        uint256 realTokenValue = tokenValue;\\n        bool _isExcludeUserBuy = _addressBuyExcludeTaxFee[msg.sender];\\n        if (_taxSellFee != 0 && !_isExcludeUserBuy) {\\n            amountSellFee = calculateSellTaxFee(tokenValue);\\n            realTokenValue = realTokenValue - amountSellFee;\\n        }\\n        if (tokenAmount > 0 && usdtAmount > 0) {\\n            amountUsdtDecimal = (realTokenValue * usdtAmount) / tokenAmount;\\n        }\\n        if (amountUsdtDecimal != 0) {\\n            require(\\n                FitZenERC20(tokenAddress).balanceOf(msg.sender) >= tokenValue,\\n                \\\"SWAP: NOT ENOUGH BALANCE TOKEN TO SELL\\\"\\n            );\\n            require(\\n                FitZenERC20(tokenAddress).allowance(msg.sender, address(this)) >= tokenValue,\\n                \\\"SWAP: MUST APPROVE FIRST\\\"\\n            );\\n            require(\\n                FitZenERC20(tokenAddress).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    tokenValue\\n                ),\\n                \\\"SWAP: FAIL TO SWAP\\\"\\n            );\\n            if (amountSellFee != 0) {\\n                require(\\n                    FitZenERC20(tokenAddress).transfer(\\n                        _taxAddress,\\n                        amountSellFee\\n                    ),\\n                    \\\"SWAP: FAIL TO SWAP\\\"\\n                );\\n            }\\n            require(\\n                FitZenERC20(currency).transfer(\\n                    msg.sender,\\n                    amountUsdtDecimal\\n                ),\\n                \\\"SWAP: FAIL TO SWAP\\\"\\n            );\\n            updateSellTokenData(msg.sender, tokenValue, block.timestamp);\\n        }\\n        reentrancyGuardForSelling = false;\\n    }\\n    /**\\n        * @dev Recover lost bnb and send it to the contract owner\\n     */\\n    function recoverLostBNB() public onlyOwner {\\n        address payable recipient = payable(msg.sender);\\n        recipient.transfer(address(this).balance);\\n    }\\n\\n    /**\\n        * @dev withdraw some token balance from contract to owner account\\n     */\\n    function withdrawTokenEmergency(address _token, uint256 _amount) public onlyOwner {\\n        require(_amount > 0, \\\"INVALID AMOUNT\\\");\\n        require(IERC20(_token).transfer(msg.sender, _amount), \\\"CANNOT WITHDRAW TOKEN\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/token/FitZenERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/FitZenERC20.sol.sol/FitZenERC20.sol.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of FitZenERC20.sol.sol\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract FitZenERC20 is Context, IERC20, IERC20Metadata, Ownable {\\n    using SafeMath for uint256;\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    address private _taxAddress;\\n    uint256 private _taxSellFee;\\n    uint256 private _taxBuyFee;\\n    mapping(address => bool) private _addressSellHasTaxFee;\\n    mapping(address => bool) private _addressBuyHasTaxFee;\\n    mapping(address => bool) private _addressBuyExcludeTaxFee;\\n    mapping(address => bool) private _addressSellExcludeHasTaxFee;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address taxAddress_,\\n        uint16 taxFeeBps_\\n    )\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _taxSellFee = taxFeeBps_;\\n        _taxAddress = taxAddress_;\\n        _taxBuyFee = 0;\\n    }\\n\\n    function getTaxSellFee() public view returns (uint256) {\\n        return _taxSellFee;\\n    }\\n\\n    function getTaxBuyFee() public view returns (uint256) {\\n        return _taxBuyFee;\\n    }\\n\\n    function getTaxAddress() public view returns (address) {\\n        return _taxAddress;\\n    }\\n\\n    function setTaxSellFeePercent(uint256 taxFeeBps) public onlyOwner {\\n        _taxSellFee = taxFeeBps;\\n    }\\n\\n    function setTaxBuyFeePercent(uint256 taxFeeBps) public onlyOwner {\\n        _taxBuyFee = taxFeeBps;\\n    }\\n\\n    function setTaxAddress(address taxAddress_) public onlyOwner {\\n        _taxAddress = taxAddress_;\\n    }\\n\\n    function setAddressSellHasTaxFee(address account, bool hasFee) public onlyOwner {\\n        _addressSellHasTaxFee[account] = hasFee;\\n    }\\n\\n    function isAddressSellHasTaxFee(address account) public view returns (bool) {\\n        return _addressSellHasTaxFee[account];\\n    }\\n\\n    function setAddressBuyHasTaxFee(address account, bool hasFee) public onlyOwner {\\n        _addressBuyHasTaxFee[account] = hasFee;\\n    }\\n\\n    function isAddressBuyHasTaxFee(address account) public view returns (bool) {\\n        return _addressBuyHasTaxFee[account];\\n    }\\n\\n    function setAddressBuyExcludeTaxFee(address account, bool hasFee) public onlyOwner {\\n        _addressBuyExcludeTaxFee[account] = hasFee;\\n    }\\n\\n    function setAddressSellExcludeTaxFee(address account, bool hasFee) public onlyOwner {\\n        _addressSellExcludeHasTaxFee[account] = hasFee;\\n    }\\n\\n    function calculateSellTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxSellFee).div(10000);\\n    }\\n\\n    function calculateBuyTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxBuyFee).div(10000);\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {FitZenERC20.sol}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        uint256 amountToReceive = amount;\\n        uint256 amountToTax = 0;\\n        bool _isHasTaxSellFeeTransfer = _addressSellHasTaxFee[to];\\n        bool _isExcludeUserSell = _addressSellExcludeHasTaxFee[from];\\n        bool _isHasTaxBuyFeeTransfer = _addressBuyHasTaxFee[from];\\n        bool _isExcludeUserBuy = _addressBuyExcludeTaxFee[to];\\n        if (_taxAddress != address(0) && _isHasTaxSellFeeTransfer && _taxSellFee != 0 && !_isExcludeUserSell) {\\n            uint256 amountSellFee = calculateSellTaxFee(amount);\\n            amountToReceive = amount - amountSellFee;\\n            amountToTax = amountToTax + amountSellFee;\\n        }\\n        if (_taxAddress != address(0) && _isHasTaxBuyFeeTransfer && _taxBuyFee != 0 && !_isExcludeUserBuy ) {\\n            uint256 amountBuyFee = calculateBuyTaxFee(amount);\\n            amountToReceive = amount - amountBuyFee;\\n            amountToTax = amountToTax + amountBuyFee;\\n        }\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            _balances[_taxAddress] += amountToTax; //increase tax Address tax Fee\\n            _balances[to] += amountToReceive;\\n        }\\n        emit Transfer(from, to, amountToReceive);\\n        if (amountToTax != 0) {\\n            emit Transfer(from, _taxAddress, amountToTax);\\n        }\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toToken\",\"type\":\"bool\"}],\"name\":\"convertInternalSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balanceUsdDecimal\",\"type\":\"uint256\"}],\"name\":\"convertUsdBalanceDecimalToTokenDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTypeConvert\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverLostBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"setMinTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSwapAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setTypeConvertPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Oracle", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000021c7bc529043f30ba5647aa84bfb1814215e48d700000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000002af97c7199c42df83278cbea98ed2a957796dc7f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}