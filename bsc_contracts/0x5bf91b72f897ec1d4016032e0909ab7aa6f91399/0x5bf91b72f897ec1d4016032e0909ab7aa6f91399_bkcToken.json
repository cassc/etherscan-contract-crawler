{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-03-25\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender() , \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Ownable, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_transferToken(sender,recipient,amount);\r\n    }\r\n    \r\n    function _transferToken(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// interface UsdtWarp {\r\n//     function withdraw() external returns(bool);\r\n// }\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Accessible is Ownable {\r\n\r\n  mapping(address => bool) private accessAllowed;\r\n\r\n  event AccessAllowed(address indexed _addr, bool _access);\r\n\r\n  constructor ()  {\r\n    address msgSender = _msgSender();\r\n    accessAllowed[msgSender] = true;\r\n  }\r\n\r\n  modifier onlyAccessed() {\r\n    require(accessAllowed[msg.sender] == true, 'no access');\r\n    _;\r\n  }\r\n\r\n  function grantAccess(address _addr) onlyOwner public {\r\n    accessAllowed[_addr] = true;\r\n    emit AccessAllowed(_addr, true);\r\n  }\r\n\r\n  function revokeAccess(address _addr) onlyOwner public {\r\n    accessAllowed[_addr] = false;\r\n    emit AccessAllowed(_addr, false);\r\n  }\r\n\r\n  function hasAccess(address _addr) public view virtual returns (bool) {\r\n    return accessAllowed[_addr];\r\n  }\r\n}\r\n\r\ncontract bkcToken is ERC20,Accessible  {\r\n    using SafeMath for uint256;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n\taddress _baseToken = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    IERC20 public pair;\r\n    address private _uniswapRouterV2Address = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n\taddress [] public bkcUser;\r\n    mapping(address => address) public userIntro;\r\n    uint8 _uplv1 = 10;\r\n    uint8 _uplv = 6;\r\n    uint256 _lv0bkc = 100 * 10**18;\r\n\r\n    uint256 _inFee = 0;\r\n    uint256 _outFee = 0;\r\n\r\n    uint256 public lv1 = 0;\r\n    uint256 public lv2 = 0;\r\n    uint256 public lv3 = 0;\r\n    uint256 public lv4 = 0;\r\n\r\n    bool outStatus = true;\r\n    uint256 outMoney = 0;\r\n    uint256 remainingMoney = 0;\r\n    uint256 outUserNum = 0;\r\n    uint256 outtime = 0;\r\n\r\n    struct User{\r\n        bool havePush;\r\n        uint8 lv;\r\n        uint256 lv0Num;\r\n        uint256 lv1Num;\r\n        uint256 lv2Num;\r\n        uint256 lv3Num;\r\n    }\r\n    mapping(address=>User) public userInfo;\r\n\r\n    constructor(address tokenOwner) ERC20(\"bkc Token\", \"bkc\", 18) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_uniswapRouterV2Address);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), address(_baseToken));\r\n\r\n\t\tuint256 total = 20000000 * 10**decimals();\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        pair = IERC20(_uniswapV2Pair);\r\n\r\n        _mint(tokenOwner, total);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount>0);\r\n\t\t\r\n\t\tbool isAddLdx;\r\n        bool isDelLdx;\r\n        if(to == uniswapV2Pair){\r\n            isAddLdx = _isAddLiquidityV1();\r\n        }else if(from == uniswapV2Pair){\r\n            isDelLdx = _isDelLiquidityV1();\r\n        }\r\n\r\n        if(userIntro[from] != address(0) && super.balanceOf(from) >= _lv0bkc && super.balanceOf(from).sub(amount) < _lv0bkc){\r\n            downLv1(userIntro[from]);\r\n        }\r\n\r\n        if(from != uniswapV2Pair && to != uniswapV2Pair && from != address(this) && to != address(this) && userIntro[to] == address(0)){\r\n            userIntro[to] = from;\r\n            if(super.balanceOf(to) >= 100){\r\n                upLv1(userIntro[to]);\r\n            }\r\n            if(userInfo[to].lv == 1){\r\n                upLv2(userIntro[to]);\r\n            }else if(userInfo[to].lv == 2){\r\n                upLv2(userIntro[to]);\r\n                upLv3(userIntro[to]);\r\n            }else if(userInfo[to].lv == 3 || userInfo[to].lv == 4){\r\n                upLv2(userIntro[to]);\r\n                upLv3(userIntro[to]);\r\n                upLv4(userIntro[to]);\r\n            }\r\n        }\r\n\r\n        uint256 fee = 0;\r\n        if(from != uniswapV2Pair && !isAddLdx && !isDelLdx && from != address(this) && to != address(this)){\r\n            fee = amount.sub(amount.mul(100).div(115));\r\n        }\r\n\r\n        if(userIntro[to] != address(0) && super.balanceOf(to) < _lv0bkc && super.balanceOf(to).add(amount.sub(fee)) >= _lv0bkc){\r\n            upLv1(userIntro[to]);\r\n        }\r\n\r\n        if(fee > 0){\r\n            uint256 introfee = 0;\r\n            if(userIntro[to] != address(0)){\r\n                uint256 introbi = 0;\r\n                if(super.balanceOf(userIntro[to]) > 10000000000){\r\n                    introbi = super.balanceOf(userIntro[to]).div(10);\r\n                }\r\n                if(introbi > fee.mul(2).div(3)){\r\n                    introfee = fee.mul(2).div(3);\r\n                }else{\r\n                    introfee = introbi;\r\n                }\r\n                super._transfer(from, userIntro[to], introfee);\r\n            }\r\n            super._transfer(from, address(this), fee.sub(introfee));\r\n            _inFee = _inFee.add(fee.sub(introfee));\r\n        }\r\n\r\n        super._transfer(from, to, amount.sub(fee));\r\n    }\r\n\r\n    function downLv1(address intro)internal {\r\n        if(userInfo[intro].lv0Num >= 1){\r\n            userInfo[intro].lv0Num --;\r\n        }\r\n        if(userInfo[intro].lv == 1 && userInfo[intro].lv0Num < _uplv1){\r\n            userInfo[intro].lv = 0;\r\n            lv1 --;\r\n            if(userIntro[intro] != address(0)){\r\n                downLv2(userIntro[intro]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function downLv2(address intro)internal {\r\n        if(userInfo[intro].lv1Num >= 1){\r\n             userInfo[intro].lv1Num --;\r\n        }\r\n        if(userInfo[intro].lv == 2 && userInfo[intro].lv1Num < _uplv){\r\n            userInfo[intro].lv = 1;\r\n            lv2 --;\r\n            lv1 ++;\r\n            if(userIntro[intro] != address(0)){\r\n                downLv3(userIntro[intro]);\r\n            }\r\n            if(userInfo[intro].lv0Num < 10){\r\n                userInfo[intro].lv = 0;\r\n                lv1 --;\r\n                if(userIntro[intro] != address(0)){\r\n                    downLv2(userIntro[intro]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function downLv3(address intro)internal {\r\n        if(userInfo[intro].lv2Num >= 1){\r\n            userInfo[intro].lv2Num --;\r\n        }\r\n        if(userInfo[intro].lv == 3 && userInfo[intro].lv2Num < _uplv){\r\n            userInfo[intro].lv = 2;\r\n            lv3 --;\r\n            lv2 ++;\r\n            if(userIntro[intro] != address(0)){\r\n                downLv4(userIntro[intro]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function downLv4(address intro)internal {\r\n        if(userInfo[intro].lv3Num >= 1){\r\n            userInfo[intro].lv3Num --;\r\n        }\r\n        if(userInfo[intro].lv == 4 && userInfo[intro].lv3Num < _uplv){\r\n            userInfo[intro].lv = 3;\r\n            lv4 --;\r\n            lv3 ++;\r\n        }\r\n    }\r\n\r\n    function upLv1(address intro)internal {\r\n        userInfo[intro].lv0Num ++;\r\n        if(userInfo[intro].lv == 0 && userInfo[intro].lv0Num >= _uplv1){\r\n            userInfo[intro].lv = 1;\r\n            lv1 ++;\r\n            if(!userInfo[intro].havePush){\r\n                bkcUser.push(intro);\r\n                userInfo[intro].havePush = true;\r\n            }\r\n            if(userIntro[intro] != address(0)){\r\n                upLv2(userIntro[intro]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function upLv2(address intro)internal {\r\n        userInfo[intro].lv1Num ++;\r\n        if(userInfo[intro].lv < 2 && userInfo[intro].lv1Num >= _uplv){\r\n            if(userInfo[intro].lv == 0){\r\n                userInfo[intro].lv = 2;\r\n                lv2 ++;\r\n                if(!userInfo[intro].havePush){\r\n                    bkcUser.push(intro);\r\n                    userInfo[intro].havePush = true;\r\n                }\r\n                if(userIntro[userIntro[intro]] != address(0)){\r\n                    upLv2(userIntro[intro]);\r\n                    upLv3(userIntro[intro]);\r\n                }\r\n            }else if(userInfo[intro].lv == 1){\r\n                userInfo[intro].lv = 2;\r\n                lv2 ++;\r\n                lv1 --;\r\n                if(userIntro[userIntro[intro]] != address(0)){\r\n                    upLv3(userIntro[intro]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function upLv3(address intro)internal {\r\n        userInfo[intro].lv2Num ++;\r\n        if(userInfo[intro].lv == 2 && userInfo[intro].lv2Num >= _uplv){\r\n            userInfo[intro].lv = 3;\r\n            lv3 ++;\r\n            lv2 --;\r\n            if(userIntro[intro] != address(0)){\r\n                upLv4(userIntro[intro]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function upLv4(address intro)internal {\r\n        userInfo[intro].lv3Num ++;\r\n        if(userInfo[intro].lv == 3 && userInfo[intro].lv3Num >= _uplv){\r\n            userInfo[intro].lv = 4;\r\n            lv4 ++;\r\n            lv3 --;\r\n        }\r\n    }\r\n\r\n\tfunction _isAddLiquidityV1()internal view returns(bool ldxAdd){\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        address token1 = IUniswapV2Pair(address(uniswapV2Pair)).token1();\r\n        (uint r0,uint r1,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(uniswapV2Pair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( token0 == address(this) ){\r\n\t\t\tif( bal1 > r1){\r\n\t\t\t\tuint change1 = bal1 - r1;\r\n\t\t\t\tldxAdd = change1 > 1000;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif( bal0 > r0){\r\n\t\t\t\tuint change0 = bal0 - r0;\r\n\t\t\t\tldxAdd = change0 > 1000;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    function _isDelLiquidityV1() internal view returns(bool ldxDel){\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        address token1 = IUniswapV2Pair(address(uniswapV2Pair)).token1();\r\n        (uint r0,uint r1,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(uniswapV2Pair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( token0 == address(this) ){\r\n\t\t\tif( bal1 < r1){\r\n\t\t\t\tuint change1 = r1 - bal1;\r\n\t\t\t\tldxDel = change1 > 1000;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif( bal0 < r0){\r\n\t\t\t\tuint change0 = r0 - bal0;\r\n\t\t\t\tldxDel = change0 > 1000;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    function sendAward() public onlyAccessed returns (bool){\r\n        require(block.timestamp - outtime > 43200, \"Do not reissue\");\r\n        uint lv1user = 0;\r\n        uint lv2user = 0;\r\n        uint lv3user = 0;\r\n        uint lv4user = 0;\r\n        if(!outStatus){\r\n            if(lv1 >= 1){\r\n                lv1user = outMoney.mul(40).div(100).div(lv1);\r\n            }\r\n            if(lv2 >= 1){\r\n                lv2user = outMoney.mul(30).div(100).div(lv2);\r\n            }\r\n            if(lv3 >= 1){\r\n                lv3user = outMoney.mul(20).div(100).div(lv3);\r\n            }\r\n            if(lv4 >= 1){\r\n                lv4user = outMoney.mul(10).div(100).div(lv4);\r\n            }\r\n            uint256 payMoney = 0;\r\n            uint256 payUser = 0;\r\n            for(uint256 i = outUserNum+1; i < bkcUser.length; i++) {\r\n                uint256 sendOne = 0;\r\n                if(userInfo[bkcUser[i]].lv == 1 && lv1user > 0){\r\n                    sendOne = lv1user;\r\n                }else if(userInfo[bkcUser[i]].lv == 2 && lv2user > 0){\r\n                    sendOne = lv2user;\r\n                }else if(userInfo[bkcUser[i]].lv == 3 && lv3user > 0){\r\n                    sendOne = lv3user;\r\n                }else if(userInfo[bkcUser[i]].lv == 4 && lv4user > 0){\r\n                    sendOne = lv4user;\r\n                }\r\n                if(sendOne > 0){\r\n                    if(payMoney.add(sendOne) > remainingMoney){\r\n                        outStatus = true;\r\n                        break;\r\n                    }\r\n                    payMoney = payMoney.add(sendOne);\r\n                    super._transfer(address(this), bkcUser[i], sendOne);\r\n                    payUser++;\r\n                }\r\n                \r\n                if(i == bkcUser.length-1){\r\n                    outStatus = true;\r\n                    outtime = block.timestamp;\r\n                    break;\r\n                }\r\n                if(payUser == 200){\r\n                    outUserNum = i;\r\n                    remainingMoney = remainingMoney.sub(payMoney);\r\n                    break;\r\n                }\r\n            }\r\n            _outFee = _outFee.add(payMoney);\r\n        }else{\r\n            uint256 sendMoney = _inFee.sub(_outFee);\r\n            if(lv1 >= 1){\r\n                lv1user = sendMoney.mul(40).div(100).div(lv1);\r\n            }\r\n            if(lv2 >= 1){\r\n                lv2user = sendMoney.mul(30).div(100).div(lv2);\r\n            }\r\n            if(lv3 >= 1){\r\n                lv3user = sendMoney.mul(20).div(100).div(lv3);\r\n            }\r\n            if(lv4 >= 1){\r\n                lv4user = sendMoney.mul(10).div(100).div(lv4);\r\n            }\r\n            if(lv1+lv2+lv3+lv4 > 230){\r\n                uint256 payMoney = 0;\r\n                uint256 payUser = 0;\r\n                for(uint256 i = 0; i < bkcUser.length; i++) {\r\n                    if(userInfo[bkcUser[i]].lv == 1 && lv1user > 0){\r\n                        super._transfer(address(this), bkcUser[i], lv1user);\r\n                        payMoney = payMoney.add(lv1user);\r\n                        payUser++;\r\n                    }else if(userInfo[bkcUser[i]].lv == 2 && lv2user > 0){\r\n                        super._transfer(address(this), bkcUser[i], lv2user);\r\n                        payMoney = payMoney.add(lv2user);\r\n                        payUser++;\r\n                    }else if(userInfo[bkcUser[i]].lv == 3 && lv3user > 0){\r\n                        super._transfer(address(this), bkcUser[i], lv3user);\r\n                        payMoney = payMoney.add(lv3user);\r\n                        payUser++;\r\n                    }else if(userInfo[bkcUser[i]].lv == 4 && lv4user > 0){\r\n                        super._transfer(address(this), bkcUser[i], lv4user);\r\n                        payMoney = payMoney.add(lv4user);\r\n                        payUser++;\r\n                    }\r\n                    if(payUser == 200){\r\n                        outUserNum = i;\r\n                        break;\r\n                    }\r\n                }\r\n                outStatus = false;\r\n                outMoney = sendMoney;\r\n                remainingMoney = sendMoney.sub(payMoney);\r\n                _outFee = _outFee.add(payMoney);\r\n            }else{\r\n                uint256 payMoney = 0;\r\n                for(uint256 i = 0; i < bkcUser.length; i++) {\r\n                    if(userInfo[bkcUser[i]].lv == 1 && lv1user > 0){\r\n                        super._transfer(address(this), bkcUser[i], lv1user);\r\n                         payMoney = payMoney.add(lv1user);\r\n                    }else if(userInfo[bkcUser[i]].lv == 2 && lv2user > 0){\r\n                        super._transfer(address(this), bkcUser[i], lv2user);\r\n                         payMoney = payMoney.add(lv2user);\r\n                    }else if(userInfo[bkcUser[i]].lv == 3 && lv3user > 0){\r\n                        super._transfer(address(this), bkcUser[i], lv3user);\r\n                        payMoney = payMoney.add(lv3user);\r\n                    }else if(userInfo[bkcUser[i]].lv == 4 && lv4user > 0){\r\n                        super._transfer(address(this), bkcUser[i], lv4user);\r\n                        payMoney = payMoney.add(lv4user);\r\n                    }\r\n                }\r\n                _outFee = _outFee.add(payMoney);\r\n                outtime = block.timestamp;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n     function getInfo() public view returns (uint256,uint256,bool){\r\n          return (\r\n             _inFee.sub(_outFee),\r\n             lv1+lv2+lv3+lv4,\r\n             outStatus\r\n          );\r\n     }\r\n\r\n     struct lvUser{\r\n        address user;\r\n        address intro;\r\n        uint8 lv;\r\n        uint256 lv0Num;\r\n        uint256 lv1Num;\r\n        uint256 lv2Num;\r\n        uint256 lv3Num;\r\n    }\r\n\r\n     function getLvUser(uint start, uint len) public view returns(lvUser[] memory){\r\n        if(start >= bkcUser.length){\r\n            return new lvUser[](0);\r\n        }\r\n        uint end = start.add(len);\r\n        if(end > bkcUser.length){\r\n            end = bkcUser.length;\r\n        }\r\n        lvUser[] memory bal = new lvUser[](end.sub(start));\r\n        for(uint i = 0; i < end.sub(start); i++) {\r\n            bal[i] = lvUser(bkcUser[start.add(i)],userIntro[bkcUser[start.add(i)]],userInfo[bkcUser[start.add(i)]].lv,userInfo[bkcUser[start.add(i)]].lv0Num,userInfo[bkcUser[start.add(i)]].lv1Num,userInfo[bkcUser[start.add(i)]].lv2Num,userInfo[bkcUser[start.add(i)]].lv3Num);\r\n        }\r\n        return bal;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_access\",\"type\":\"bool\"}],\"name\":\"AccessAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bkcUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"getLvUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"intro\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"lv\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lv0Num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv1Num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv2Num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv3Num\",\"type\":\"uint256\"}],\"internalType\":\"struct bkcToken.lvUser[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lv1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lv2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lv3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lv4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"havePush\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"lv\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lv0Num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv1Num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv2Num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv3Num\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIntro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "bkcToken", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bf924a7fc7b92e746b9665e0b6eea9ab9ecbf289", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9c5c231369cc0ead023296ce7772d9aeddbb4aafce3fb6f0e5c4e6adae55a48"}