{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Locker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        _setOwner(initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"FRTCLocker: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) internal {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract FRTCLocker is Ownable {\\r\\n    uint256 public startTimestamp;\\r\\n    uint256 public unlockTimestamp;\\r\\n\\r\\n    uint256 public lockedTokenAmount;\\r\\n\\r\\n    IERC20 token;\\r\\n    \\r\\n    constructor() Ownable(address(0)) {}\\r\\n\\r\\n    bool public isSetup;\\r\\n\\r\\n    function setup(uint256 unlockEpoch, address owner, address baseToken, uint256 amount) public {\\r\\n        require(!isSetup, \\\"FRTCLocker: already set up\\\");\\r\\n        _setOwner(owner);\\r\\n        token = IERC20(baseToken);\\r\\n        \\r\\n        if(token.balanceOf(address(this)) != amount) {\\r\\n            revert(\\\"FRTCLocker: incorrect token balance\\\");\\r\\n        }\\r\\n        \\r\\n        lockedTokenAmount = amount;\\r\\n        \\r\\n        startTimestamp = block.timestamp;\\r\\n        unlockTimestamp = unlockEpoch;\\r\\n\\r\\n        isSetup = true;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        require(block.timestamp >= unlockTimestamp, \\\"FRTCLocker: token is not unlocked yet\\\");\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        require(balance > 0, \\\"FRTCLocker: token balance is zero\\\");\\r\\n\\r\\n        token.transfer(msg.sender, balance);\\r\\n        \\r\\n        selfdestruct(payable(msg.sender));\\r\\n    }\\r\\n\\r\\n    function withdrawSurplus() public onlyOwner {\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        require(balance > lockedTokenAmount, \\\"FRTCLocker: balance equals locked amount\\\");\\r\\n\\r\\n        token.transfer(msg.sender, balance - lockedTokenAmount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address contractAddress, uint256 amount) public onlyOwner {\\r\\n        if(contractAddress != address(token)) {\\r\\n            IERC20(contractAddress).transfer(msg.sender, amount);\\r\\n        } else {\\r\\n            uint256 currentBalance = token.balanceOf(address(this));\\r\\n            if(currentBalance > amount && currentBalance - amount >= lockedTokenAmount) {\\r\\n                IERC20(contractAddress).transfer(msg.sender, amount);\\r\\n            } else {\\r\\n                revert(\\\"FRTCLocker: cannot withdraw locked tokens\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract FRTCLockerManager {\\r\\n    address public base;\\r\\n\\r\\n    uint256[] public lockerTypes;\\r\\n\\r\\n    Locker[] public lockers;\\r\\n    mapping(address => uint256) lockerIndices;\\r\\n\\r\\n    uint256 public lockerCount;\\r\\n\\r\\n    struct Locker {\\r\\n        address owner;\\r\\n        address lockerAddress;\\r\\n        uint256 startTimestamp;\\r\\n        uint256 unlockTimestamp;\\r\\n        uint256 lockedAmount;\\r\\n        uint256 lockerType;\\r\\n    }\\r\\n\\r\\n    constructor(address baseToken, uint256[] memory lockerLengths) {\\r\\n        base = baseToken;\\r\\n\\r\\n        lockers.push();\\r\\n        lockerTypes.push();\\r\\n\\r\\n        for(uint256 i; i < lockerLengths.length; i++) {\\r\\n            lockerTypes.push(lockerLengths[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getLockerByAddress(address lockerAddress) public view returns (Locker memory) {\\r\\n        return lockers[lockerIndices[lockerAddress]];\\r\\n    }\\r\\n\\r\\n    function createLocker(uint256 lockerType, uint256 amount) public {\\r\\n        uint256 unlockTime = block.timestamp + lockerTypes[lockerType];\\r\\n                \\r\\n        FRTCLocker locker = new FRTCLocker();\\r\\n\\r\\n        IERC20(base).transferFrom(msg.sender, address(locker), amount);\\r\\n        locker.setup(unlockTime, msg.sender, base, amount);\\r\\n\\r\\n        lockers.push(Locker(msg.sender, address(locker), block.timestamp, unlockTime, amount, lockerType));\\r\\n        lockerIndices[address(locker)] = lockers.length - 1;\\r\\n        lockerCount++;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"lockerLengths\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockerType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lockerAddress\",\"type\":\"address\"}],\"name\":\"getLockerByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerType\",\"type\":\"uint256\"}],\"internalType\":\"struct FRTCLockerManager.Locker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockerTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FRTCLockerManager", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b16d8c2a78f2acd75a63b37e8ce6bccbbd8d8f9e0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000000076a70000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000ed4e0000000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000021c000000000000000000000000000000000000000000000000000000000000025800000000000000000000000000000000000000000000000000000000000002940000000000000000000000000000000000000000000000000000000001da9c00", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}