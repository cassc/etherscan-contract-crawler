{"SourceCode": "// SPDX-License-Identifier: RRCCoin\r\npragma solidity ^0.8.19;\r\n\r\ninterface IBEP20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract RRCExchange {\r\n    IBEP20 public USDTToken;\r\n    IBEP20 public RRCToken;\r\n    IBEP20 public token1;\r\n    IBEP20 public token2;\r\n    address public owner;\r\n    uint256 RRCBuyPrice;\r\n    uint256 RRCSellPrice;\r\n\r\n    struct ExchangeInfo {\r\n        bool isBuy;\r\n        address wallet;\r\n        uint256 usdAmount;\r\n        uint256 rrcAmount;\r\n        uint256 rrcPrice;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct Node {\r\n        address parent;\r\n        address[] children;\r\n        uint256 registerTime;\r\n    }\r\n\r\n    struct Transaction {\r\n        string txType;\r\n        uint256 amount;\r\n        uint256 time;\r\n    }\r\n\r\n    mapping(address => Node) public tree;\r\n    address public root = 0x0000E0011e223322334455445566776677888988;\r\n    address[] public allNodes;\r\n    uint256 public referralPercent;\r\n    mapping(address => Transaction[]) public userRewards;\r\n\r\n    ExchangeInfo[] public exchangeHistory;\r\n    \r\n    constructor() {\r\n        USDTToken = IBEP20(0x55d398326f99059fF775485246999027B3197955);\r\n        RRCToken = IBEP20(0xa9474F7a7608B90a9C524a7D09d73865D0174503);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function addChild(address parent, address child) private {\r\n        require(parent != address(0), \"Parent address should not be zero.\");\r\n        require(child != address(0), \"Child address should not be zero.\");\r\n        require(parent != child, \"Parent and child addresses should not be the same.\");\r\n        require(tree[parent].parent != child, \"Cannot set child as parent of its parent.\");\r\n        require(tree[child].parent == address(0), \"Child node already has a parent.\");\r\n        \r\n        tree[parent].children.push(child);\r\n        tree[child].parent = parent;\r\n        tree[child].registerTime = block.timestamp;\r\n\r\n        allNodes.push(child);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    event Exchange(address indexed sender, uint256 amount);\r\n\r\n    function exchange(address parent, string memory _currencySymbol, uint256 _amount) public payable {\r\n        require(bytes(_currencySymbol).length > 0, \"Token name cannot be empty\");\r\n        require(( keccak256(bytes(_currencySymbol)) == keccak256(bytes(\"USDT\")) && address(USDTToken) != address(0)) || ( keccak256(bytes(_currencySymbol)) == keccak256(bytes(\"RRC\")) && address(RRCToken) != address(0)), \"Invalid token name\");\r\n        uint256 newAmount;\r\n        if (keccak256(bytes(_currencySymbol)) == keccak256(bytes(\"USDT\"))) {\r\n            token1 = USDTToken;\r\n            token2 = RRCToken;\r\n            // Amount to transfer\r\n            newAmount = (_amount / RRCBuyPrice) * 10**18;\r\n            // History\r\n            ExchangeInfo memory exchangeInfo = ExchangeInfo({\r\n                isBuy: true,\r\n                wallet: msg.sender,\r\n                usdAmount: _amount,\r\n                rrcAmount: newAmount,\r\n                rrcPrice: RRCBuyPrice,\r\n                timestamp: block.timestamp\r\n            });\r\n            exchangeHistory.push(exchangeInfo);\r\n\r\n            if(parent != address(0) && tree[msg.sender].parent == address(0)){\r\n                // Call addChild function with parent and child addresses\r\n                addChild(parent, msg.sender); \r\n            }\r\n\r\n            if(tree[msg.sender].parent != address(0) && referralPercent != 0) {\r\n                token2.transfer( tree[msg.sender].parent, newAmount * referralPercent);\r\n                Transaction memory referral = Transaction({\r\n                    txType: \"Refferal\",\r\n                    amount: newAmount * referralPercent,\r\n                    time: block.timestamp\r\n                });\r\n                userRewards[tree[msg.sender].parent].push(referral);\r\n            }\r\n        }\r\n        if (keccak256(bytes(_currencySymbol)) == keccak256(bytes(\"RRC\"))) {\r\n            token1 = RRCToken;\r\n            token2 = USDTToken;\r\n            // Amount to transfer\r\n            newAmount = (_amount * RRCSellPrice) / 10**18;\r\n            // History\r\n            ExchangeInfo memory exchangeInfo = ExchangeInfo({\r\n                isBuy: false,\r\n                wallet: msg.sender,\r\n                usdAmount: newAmount,\r\n                rrcAmount: _amount,\r\n                rrcPrice: RRCSellPrice,\r\n                timestamp: block.timestamp\r\n            });\r\n            exchangeHistory.push(exchangeInfo);\r\n        }\r\n\r\n        //Check\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        require(token1.allowance(msg.sender, address(this)) >= _amount, \"Token allowance not enough\");\r\n        require(token1.balanceOf(msg.sender) >= _amount, \"Insufficient token balance\");\r\n        require(token2.balanceOf(address(this)) >= newAmount, \"Insufficient token balance\");\r\n\r\n        //Deposit\r\n        token1.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Withdraw\r\n        token2.transfer(msg.sender, newAmount);\r\n\r\n        emit Exchange(msg.sender, _amount);\r\n    }\r\n\r\n    function setExchangeInfo(address parent, address _wallet, string memory _currencySymbol, uint256 _amountUSDT, uint256 _amountRRC) public onlyOwner {\r\n        if (keccak256(bytes(_currencySymbol)) == keccak256(bytes(\"USDT\"))) {\r\n            uint256 thatRRCSellPrice = _amountUSDT / _amountRRC;\r\n            ExchangeInfo memory exchangeInfo = ExchangeInfo({\r\n                isBuy: true,\r\n                wallet: _wallet,\r\n                usdAmount: _amountUSDT,\r\n                rrcAmount: _amountRRC,\r\n                rrcPrice: thatRRCSellPrice,\r\n                timestamp: block.timestamp\r\n            });\r\n            exchangeHistory.push(exchangeInfo);\r\n\r\n            if(parent != address(0) && tree[_wallet].parent == address(0)){\r\n                // Call addChild function with parent and child addresses\r\n                addChild(parent, _wallet);\r\n            }\r\n        }\r\n        if (keccak256(bytes(_currencySymbol)) == keccak256(bytes(\"RRC\"))) {\r\n            uint256 thatRRCBuyPrice = _amountUSDT / _amountRRC;\r\n            ExchangeInfo memory exchangeInfo = ExchangeInfo({\r\n                isBuy: false,\r\n                wallet: _wallet,\r\n                usdAmount: _amountUSDT,\r\n                rrcAmount: _amountRRC,\r\n                rrcPrice: thatRRCBuyPrice,\r\n                timestamp: block.timestamp\r\n            });\r\n            exchangeHistory.push(exchangeInfo);\r\n        }\r\n    }\r\n\r\n    function transferToken(address _wallet, uint256 _amount, string memory _description) public onlyOwner {\r\n        require(_amount > 0, \"Amount must be greater than zero.\");\r\n        RRCToken.transfer(_wallet, _amount);\r\n        Transaction memory referral = Transaction({\r\n            txType: _description,\r\n            amount: _amount,\r\n            time: block.timestamp\r\n        });\r\n        userRewards[tree[msg.sender].parent].push(referral);\r\n    }\r\n\r\n    function setRRCBuyPrice(uint256 _price) public onlyOwner {\r\n        require(_price >= RRCSellPrice, \"Buy price must be greater than sell price.\");\r\n        RRCBuyPrice = _price;\r\n    }\r\n\r\n    function setRRCSellPrice(uint256 _price) public onlyOwner {\r\n        require(_price <= RRCBuyPrice, \"Buy price must be greater than sell price.\");\r\n        RRCSellPrice = _price;\r\n    }\r\n\r\n    function depositUSDT(uint256 amount) public onlyOwner {\r\n        require(USDTToken.transferFrom(msg.sender, address(this), amount), \"USDT deposit failed\");\r\n    }\r\n\r\n    function depositRRC(uint256 amount) public onlyOwner {\r\n        require(RRCToken.transferFrom(msg.sender, address(this), amount), \"RRC deposit failed\");\r\n    }\r\n\r\n    function withdrawUSDT(uint256 _amount) public onlyOwner {\r\n        require(USDTToken.transfer(msg.sender, _amount), \"USDT withdrawal failed\");\r\n    }\r\n\r\n    function withdrawRRC(uint256 _amount) public onlyOwner {\r\n        require(RRCToken.transfer(msg.sender, _amount), \"RRC withdrawal failed\");\r\n    }\r\n\r\n    function setReferralPercent(uint256 _referralPercent) public onlyOwner {\r\n        require(_referralPercent >= 0, \"Referral percent must be greater or equal to zero.\");\r\n        referralPercent = _referralPercent;\r\n    }\r\n\r\n    function getUSDTBalance() public view returns (uint256) {\r\n        return USDTToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getRRCBalance() public view returns (uint256) {\r\n        return RRCToken.balanceOf(address(this));\r\n    }\r\n\r\n    function getRRCBuyPrice() public view returns (uint256) {\r\n        return RRCBuyPrice;\r\n    }\r\n\r\n    function getRRCSellPrice() public view returns (uint256) {\r\n        return RRCSellPrice;\r\n    }\r\n\r\n    function getReferralPercent() public view returns (uint256) {\r\n        return referralPercent;\r\n    }\r\n\r\n    function getExchangeHistory() public view returns (ExchangeInfo[] memory) {\r\n        return exchangeHistory;\r\n    }\r\n\r\n    function getExchangeForAddress(address walletAddress) public view returns (ExchangeInfo[] memory) {\r\n        uint256[] memory exchangeIndexes = new uint256[](exchangeHistory.length);\r\n        uint256 exchangeCount = 0;\r\n        for (uint256 i = 0; i < exchangeHistory.length; i++) {\r\n            if (exchangeHistory[i].wallet == walletAddress) {\r\n                exchangeIndexes[exchangeCount] = i;\r\n                exchangeCount++;\r\n            }\r\n        }\r\n        ExchangeInfo[] memory result = new ExchangeInfo[](exchangeCount);\r\n        for (uint256 i = 0; i < exchangeCount; i++) {\r\n            result[i] = exchangeHistory[exchangeIndexes[i]];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getAllNodes() public view returns (address[] memory) {\r\n        return allNodes;\r\n    }\r\n\r\n    function getAllNodesCount() public view returns (uint256) {\r\n        return allNodes.length;\r\n    }\r\n\r\n    function getNodeDetails(address nodeAddress) public view returns (address parent, address[] memory children, uint256 registerTime) {\r\n        Node memory nodeStruct = tree[nodeAddress];\r\n        return (nodeStruct.parent, nodeStruct.children, nodeStruct.registerTime);\r\n    }\r\n\r\n    function getParent(address child) public view returns (address) {\r\n        return tree[child].parent;\r\n    }\r\n\r\n    function getChildren(address parent) public view returns (address[] memory) {\r\n        return tree[parent].children;\r\n    }\r\n\r\n    function getAddressChildCount(address _address) public view returns (uint256) {\r\n        return tree[_address].children.length;\r\n    }\r\n\r\n    function getAddressRegisterTime(address _address) public view returns (uint256) {\r\n        return tree[_address].registerTime;\r\n    }\r\n\r\n    function getTransactions(address _wallet) public view returns (Transaction[] memory) {\r\n        return userRewards[_wallet];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RRCToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allNodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRRC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_currencySymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrcPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressChildCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressRegisterTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNodesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"getChildren\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getExchangeForAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrcPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RRCExchange.ExchangeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rrcPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct RRCExchange.ExchangeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddress\",\"type\":\"address\"}],\"name\":\"getNodeDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"children\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"registerTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"getParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRRCBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRRCBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRRCSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTransactions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"txType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct RRCExchange.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_currencySymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amountUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountRRC\",\"type\":\"uint256\"}],\"name\":\"setExchangeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setRRCBuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setRRCSellPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralPercent\",\"type\":\"uint256\"}],\"name\":\"setReferralPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"registerTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRewards\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"txType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRRC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RRCExchange", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e0292fd1a79ffbcf072b43eaf0a6815a8fd65cc1d4d78fffad7c42989b649ad"}