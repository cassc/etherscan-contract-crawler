{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * The best and cheap token-Factory.NFT-Factory\r\n * WebSite: https://ggg.dog\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n   \r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender =  msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n \r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n}\r\n\r\ncontract  GGGToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _updated;\r\n\r\n    address public  marketAddr ;\r\n   \r\n\r\n    string public _name ;\r\n    string public _symbol ;\r\n    uint8 public _decimals ;\r\n\r\n\r\n\r\n    uint256 public _burnFee ;\r\n    uint256 private _previousBurnFee;\r\n\r\n\r\n    uint256 public _LPFee ;\r\n    uint256 private _previousLPFee;\r\n\r\n    uint256 public _marketingFee ;\r\n    uint256 private _previousMarketingFee;\r\n\r\n    uint256 public _inviterFee ;\r\n    uint256 private _previousInviterFee;    \r\n    uint256 currentIndex;  \r\n    uint256 private _tTotal ;\r\n    uint256 distributorGas = 500000 ;\r\n    uint256 public minPeriod = 600;\r\n    uint256 public LPFeefenhong;\r\n    IUniswapV2Router02 public  uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    bool public isStartApprove ;  \r\n    \r\n    uint256 public burnEndNumber ;\r\n    \r\n    uint256 public _startTimeForSwap;\r\n    uint256 public _intervalSecondsForSwap ;\r\n    \r\n    uint256 public swapTokensAtAmount ;\r\n\r\n\r\n    mapping(address => address) public inviter;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n\r\n    \r\n    uint256 public minLPDividendToken =  1e18;\r\n\r\n    address public _token = 0x55d398326f99059fF775485246999027B3197955;\r\n    address public _router ;\r\n    address public _lpRouter;\r\n\r\n    uint256[] public _inviters;\r\n\r\n    uint256 public maxHave;\r\n    uint256 public maxTax;\r\n\r\n    \r\n    constructor(){  \r\n    }\r\n    bool _init;\r\n    function init(  string memory  name_,\r\n        string memory  symbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        address[6] memory addrs,\r\n        uint256[3] memory feeSettings, \r\n        uint256[] memory inviterSettings, \r\n        uint256[5] memory anotherSettings) public {\r\n            require(!_init);\r\n             address adminAddress = addrs[1];\r\n            _token = addrs[2];\r\n            _name = name_;\r\n            _symbol = symbol_;\r\n            _decimals= decimals_;\r\n            _tTotal = totalSupply_* (10**uint256(_decimals));\r\n            _burnFee = feeSettings[1];\r\n            _marketingFee = feeSettings[0];\r\n            _LPFee = feeSettings[2];\r\n            marketAddr =  addrs[0];\r\n            _tOwned[adminAddress] = _tTotal;\r\n            _inviters = inviterSettings;\r\n            for(uint i ;i<inviterSettings.length;i++){\r\n                _inviterFee  +=  inviterSettings[i];\r\n            }\r\n\r\n            _intervalSecondsForSwap = anotherSettings[1];\r\n\r\n\r\n            maxTax = anotherSettings[3]* (10**uint256(_decimals));\r\n            maxHave = anotherSettings[4] * (10**uint256(_decimals));\r\n            burnEndNumber = anotherSettings[0]* (10**uint256(_decimals));\r\n        \r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n                addrs[3]\r\n            );\r\n            if(anotherSettings[2]== 1){\r\n                isStartApprove = true;\r\n            }\r\n    \r\n            // Create a uniswap pair for this new token\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this),_token);\r\n    \r\n            // set the rest of the contract variables\r\n            uniswapV2Router = _uniswapV2Router;\r\n    \r\n            //exclude owner and this contract from fee\r\n            _isExcludedFromFee[msg.sender] = true;\r\n            _isExcludedFromFee[adminAddress] = true;\r\n            _isExcludedFromFee[address(this)] = true;\r\n            isDividendExempt[address(this)] = true;\r\n            isDividendExempt[address(0)] = true;\r\n            isDividendExempt[address(0xdead)] = true;\r\n            \r\n            swapTokensAtAmount = _tTotal.mul(5).div(10**6);\r\n            \r\n            emit Transfer(address(0), adminAddress,  _tTotal);\r\n            _init = true;\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        if(_startTimeForSwap == 0 && recipient == uniswapV2Pair ) {\r\n            if(!isStartApprove){\r\n                if(sender != owner()){\r\n                    revert(\"not owner\");\r\n                }\r\n            }\r\n            _startTimeForSwap =block.timestamp;\r\n        } \r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n   \r\n\r\n   function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setFee(uint lpFee_ ,uint marketFee_,uint burnFee_ ) public onlyOwner {\r\n        require((lpFee_+marketFee_+burnFee_+_inviterFee)<=2500 );\r\n        _LPFee =  lpFee_;\r\n        _marketingFee =  marketFee_;\r\n        _burnFee = burnFee_;\r\n    }\r\n\r\n\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function removeAllFee() private {\r\n        _previousBurnFee = _burnFee;\r\n        _previousLPFee = _LPFee;\r\n        _previousMarketingFee = _marketingFee;\r\n        _previousInviterFee = _inviterFee;\r\n\r\n\r\n        _burnFee = 0;\r\n        _LPFee = 0;\r\n        _inviterFee = 0;\r\n        _marketingFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _burnFee = _previousBurnFee;\r\n        _LPFee = _previousLPFee;\r\n        _inviterFee = _previousInviterFee;\r\n        _marketingFee = _previousMarketingFee;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n                       \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n         \r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n        \r\n         if(canSwap &&from != address(this) &&from != uniswapV2Pair  &&from != owner() && to != owner() ){\r\n                swapTokensForTokens(contractTokenBalance);\r\n                uint256 tokenBal = IERC20(_token).balanceOf(address(this));\r\n                IERC20(_token).transfer(marketAddr,  tokenBal.mul(_marketingFee).div(_LPFee.add(_marketingFee)));\r\n                IERC20(_token).transfer(_lpRouter,  IERC20(_token).balanceOf(address(this)));\r\n        }\r\n       \r\n        if( !_isExcludedFromFee[from] &&!_isExcludedFromFee[to]){\r\n\r\n            if(  to!=uniswapV2Pair && from==uniswapV2Pair){\r\n                require((balanceOf(to).add(amount)) <= maxHave, \"Transfer amount exceeds the maxHave.\");\r\n            }\r\n            \r\n            if (from!=uniswapV2Pair){\r\n                if(balanceOf(from).sub(amount)==0){\r\n                    amount = amount.sub(1 );\r\n                }\r\n            }\r\n            if (_startTimeForSwap + _intervalSecondsForSwap > block.timestamp) {\r\n                        if ( from == uniswapV2Pair) {\r\n                            addBot(to);\r\n                        }\r\n            }\r\n\r\n            if (_isBot[from] ) {\r\n                    revert(\"The bot address\");\r\n            }\r\n        }\r\n        \r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = false;\r\n\r\n        if (from == uniswapV2Pair||to==uniswapV2Pair){\r\n            takeFee = true;\r\n        }\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]|| from == address(uniswapV2Router)) {\r\n            takeFee = false;\r\n        }else{\r\n             require(amount <= maxTax, \"Transfer limit\");\r\n        }\r\n\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n\r\n        if(from==uniswapV2Pair&& inviter[to] == address(0)){\r\n              inviter[to] = marketAddr;\r\n        }else if ( inviter[to] == address(0) &&from != uniswapV2Pair) {\r\n            inviter[to] = from;\r\n        } \r\n        \r\n        if(fromAddress == address(0) )fromAddress = from;\r\n        if(toAddress == address(0) )toAddress = to;  \r\n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair ) setShare(fromAddress);\r\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) setShare(toAddress);\r\n        \r\n        fromAddress = from;\r\n        toAddress = to; \r\n\r\n        uint lpBal =  IERC20(_token).balanceOf(_lpRouter);\r\n\r\n         if(lpBal >= minLPDividendToken  && from !=address(this) && LPFeefenhong.add(minPeriod) <= block.timestamp) {\r\n             process(distributorGas) ;\r\n             LPFeefenhong = block.timestamp;\r\n        }\r\n    }\r\n    \r\n    \r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        \r\n        if(shareholderCount == 0)return;\r\n        \r\n        uint256 tokenBal =  IERC20(_token).balanceOf(_lpRouter);\r\n        \r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n         uint256 amount = tokenBal.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(getLpTotal());\r\n            if( amount < 1e13 ||isDividendExempt[shareholders[currentIndex]]) {\r\n                 currentIndex++;\r\n                 iterations++;\r\n                 return;\r\n            }\r\n            distributeDividend(shareholders[currentIndex],amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n\r\n\r\n   \r\n    function distributeDividend(address shareholder ,uint256 amount) internal {\r\n             (bool b1, ) =  _token.call(abi.encodeWithSelector(0x23b872dd, _lpRouter, shareholder, amount));\r\n             require(b1, \"call error\");\r\n    }\r\n   \r\n    \r\n    function setShare(address shareholder) private {\r\n           if(_updated[shareholder] ){      \r\n                if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);              \r\n                return;  \r\n           }\r\n           if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;\r\n          \r\n      }\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n    function quitShare(address shareholder) private {\r\n           removeShareholder(shareholder);   \r\n           _updated[shareholder] = false; \r\n      }\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        _transferStandard(sender, recipient, amount);\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    \r\n\r\n    function _takeLPFee(address sender,uint256 tAmount) private {\r\n        if (_LPFee == 0 ) return;\r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\r\n        emit Transfer(sender, address(this), tAmount);\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        if (_inviterFee == 0) return;\r\n        address cur;\r\n        if (sender == uniswapV2Pair) {\r\n            cur = recipient;\r\n        } else if (recipient == uniswapV2Pair) {\r\n            cur = sender;\r\n        } else {\r\n            _tOwned[marketAddr] = _tOwned[marketAddr].add(tAmount.div(10000).mul(_inviterFee));\r\n            emit Transfer(sender, marketAddr, tAmount.div(10000).mul(_inviterFee));\r\n            return;\r\n        }\r\n        uint256 accurRate;\r\n        for (uint256 i = 0; i < _inviters.length; i++) {\r\n            cur = inviter[cur];\r\n            if (cur == address(0)) {\r\n                break;\r\n            }\r\n            accurRate = accurRate.add(_inviters[i]);\r\n            uint256 curTAmount = tAmount.div(10000).mul(_inviters[i]);\r\n            _tOwned[cur] = _tOwned[cur].add(curTAmount);\r\n            emit Transfer(sender, cur, curTAmount);\r\n        }\r\n        if(_inviterFee.sub(accurRate)!=0){\r\n            _tOwned[marketAddr] = _tOwned[marketAddr].add(tAmount.div(10000).mul(_inviterFee.sub(accurRate)));\r\n            emit Transfer(sender, marketAddr, tAmount.div(10000).mul(_inviterFee.sub(accurRate)));\r\n        }\r\n      \r\n    }\r\n\r\n   function _takeburnFee(\r\n        address sender,\r\n        uint256 tAmount\r\n    ) private {\r\n        if (_burnFee == 0) return;\r\n         if((_tTotal.sub(_tOwned[address(0)].add(_tOwned[address(0xdead)])) ) >= burnEndNumber){\r\n            _tOwned[address(0)] = _tOwned[address(0)].add(tAmount);\r\n            emit Transfer(sender, address(0), tAmount);\r\n        }else{\r\n            _burnFee = 0;\r\n        }\r\n    }\r\n   \r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        if(currentRate==0)return;\r\n        uint256 rAmount = tAmount.div(10000).mul(currentRate);\r\n        _tOwned[to] = _tOwned[to].add(rAmount);\r\n        emit Transfer(sender, to, rAmount);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\r\n        _takeburnFee(sender, tAmount.div(10000).mul(_burnFee));\r\n        \r\n        _takeTransfer(sender,address(this), tAmount,_marketingFee);\r\n        \r\n        _takeLPFee(sender, tAmount.div(10000).mul(_LPFee));\r\n\r\n        _takeInviterFee(sender, recipient, tAmount);\r\n\r\n        uint256 recipientRate = 10000 -\r\n            _burnFee -\r\n            _marketingFee -\r\n            _LPFee -\r\n            _inviterFee;\r\n        _tOwned[recipient] = _tOwned[recipient].add(\r\n            tAmount.div(10000).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\r\n    }\r\n    \r\n    mapping(address => bool) private _isBot;\r\n    function setBot(address account, bool value) public onlyOwner {\r\n        _isBot[account] = value;\r\n    }\r\n\r\n    function getBot(address account) public view returns (bool) {\r\n        return _isBot[account];\r\n    }\r\n\r\n    function getLpTotal() public view returns (uint256) {\r\n        return  IERC20(uniswapV2Pair).totalSupply() - IERC20(uniswapV2Pair).balanceOf(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);\r\n    }\r\n\r\n    function addBot(address account) private {\r\n        if (!_isBot[account]) _isBot[account] = true;\r\n    }\r\n\r\n\r\n    function setRouter(address router_) public onlyOwner {\r\n        _router  = router_;\r\n    }\r\n     function setLpRouter(address lpRouter_) public onlyOwner {\r\n        _lpRouter  = lpRouter_;\r\n    }\r\n    \r\n    function transferContracts() public onlyOwner {\r\n        distributeDividend(owner(),IERC20(_token).balanceOf(_lpRouter));\r\n    }\r\n    \r\n    function setSwapTokensAtAmount(uint256 value) onlyOwner  public  {\r\n       swapTokensAtAmount = value;\r\n    }\r\n\r\n    \r\n    function setAddr(address value) external onlyOwner {\r\n        marketAddr = value;\r\n       \r\n    }\r\n    \r\n    \r\n   \r\n    function swapTokensForTokens(uint256 tokenAmount) private {\r\n        if(tokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n       address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _token;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n  \r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            _router,\r\n            block.timestamp\r\n        );\r\n        IERC20(_token).transferFrom( _router,address(this), IERC20(_token).balanceOf(address(_router)));\r\n    }\r\n    \r\n    \r\n     function transferTokensAvg(address[] memory _tos,uint256 amount) onlyOwner public returns (bool){\r\n        require(_tos.length > 0);\r\n        require(_tos.length*amount <_tOwned[owner()]);\r\n        for(uint i=0;i<_tos.length;i++){\r\n            _tOwned[owner()] -= amount;\r\n            _tOwned[_tos[i]] += amount;\r\n            emit Transfer(owner(), _tos[i], amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    \r\n    \r\n    function setMinLPDividendToken(uint256 _minLPDividendToken) public onlyOwner{\r\n       minLPDividendToken  = _minLPDividendToken;\r\n    }\r\n\r\n    function setLimit(uint256 maxHave_,uint256 maxTax_ ) public onlyOwner{\r\n        require(maxHave_>maxHave,\"The set value cannot be smaller than the current value\" ) ;\r\n        require(maxTax_>maxTax, \"The set value cannot be smaller than the current value\") ;\r\n        maxHave = maxHave_ ; \r\n        maxTax = maxTax_ ;\r\n    }\r\n\r\n    \r\n    function setDividendExempt(address _value,bool isDividend) public onlyOwner{\r\n       isDividendExempt[_value] = isDividend;\r\n    }\r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFeefenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEndNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[6]\",\"name\":\"addrs\",\"type\":\"address[6]\"},{\"internalType\":\"uint256[3]\",\"name\":\"feeSettings\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[]\",\"name\":\"inviterSettings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[5]\",\"name\":\"anotherSettings\",\"type\":\"uint256[5]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStartApprove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLPDividendToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDividend\",\"type\":\"bool\"}],\"name\":\"setDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHave_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTax_\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpRouter_\",\"type\":\"address\"}],\"name\":\"setLpRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLPDividendToken\",\"type\":\"uint256\"}],\"name\":\"setMinLPDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensAvg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GGGToken", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ab6d06931e67cc33d033a3a2f16da3877ac45c1145d3055612636c7a43fd4e4"}