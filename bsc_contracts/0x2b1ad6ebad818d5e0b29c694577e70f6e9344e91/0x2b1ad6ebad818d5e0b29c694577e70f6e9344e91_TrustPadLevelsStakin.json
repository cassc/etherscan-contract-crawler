{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/djagya/projects/crypto/trustpad-contracts/contracts/staking/ILevelsStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Structs {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 pendingRewards;\\n        uint256 unlocksAt;\\n    }\\n\\n    struct Tier {\\n        string id;\\n        uint8 multiplier;\\n        uint256 lockingPeriod; // in seconds\\n        uint256 minAmount; // tier is applied when userAmount >= minAmount\\n        bool random;\\n        uint8 odds; // divider: 2 = 50%, 4 = 25%, 10 = 10%\\n    }\\n}\\n\\ninterface ILevelsStaking {\\n    function getTierById(string calldata id) external view returns (Structs.Tier memory);\\n    function getUserTier(address account) external view returns (Structs.Tier memory);\\n    function getTierIds() external view returns (string[] memory);\\n    function lock(address account) external;\\n}\\n\"\r\n    },\r\n    \"/Users/djagya/projects/crypto/trustpad-contracts/contracts/staking/Stakeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./ILevelsStaking.sol\\\";\\nimport \\\"./StakingTreasury.sol\\\";\\n\\nabstract contract Stakeable is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct PoolInfo {\\n        IERC20 stakingToken;\\n        uint256 lastRewardBlock;\\n        uint256 accRewardPerShare;\\n    }\\n\\n    mapping(address => Structs.UserInfo) public userInfo;\\n\\n    IERC20 public rewardToken;\\n    uint256 public rewardPerBlock = 1 * 1e9; // 1 token\\n    uint256 private divider = 1e12;\\n\\n    // Keeps reward tokens\\n    StakingTreasury public treasury;\\n\\n    // base 1000, value * % / 100\\n    uint256 public feePercent = 0;\\n    uint256 public collectedFees;\\n\\n    PoolInfo public liquidityMining;\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n\\n    constructor() {\\n        treasury = new StakingTreasury();\\n    }\\n\\n    function setPoolInfo(IERC20 _rewardToken, IERC20 _stakingToken) external onlyOwner {\\n        require(address(rewardToken) == address(0) && address(liquidityMining.stakingToken) == address(0), 'Token is already set');\\n        rewardToken = _rewardToken;\\n        liquidityMining = PoolInfo({stakingToken : _stakingToken, lastRewardBlock : 0, accRewardPerShare : 0});\\n        treasury.allowClaiming(_rewardToken);\\n    }\\n\\n    function startMining() external onlyOwner {\\n        require(liquidityMining.lastRewardBlock == 0, 'Mining already started');\\n        liquidityMining.lastRewardBlock = block.number;\\n    }\\n\\n    function pendingRewards(address _user) external view returns (uint256) {\\n        if (liquidityMining.lastRewardBlock == 0 || block.number < liquidityMining.lastRewardBlock) {\\n            return 0;\\n        }\\n\\n        Structs.UserInfo storage user = userInfo[_user];\\n        uint256 accRewardPerShare = liquidityMining.accRewardPerShare;\\n        uint256 stakingTokenSupply = liquidityMining.stakingToken.balanceOf(address(this));\\n\\n        if (block.number > liquidityMining.lastRewardBlock && stakingTokenSupply != 0) {\\n            uint256 perBlock = rewardPerBlock;\\n            uint256 multiplier = block.number - liquidityMining.lastRewardBlock;\\n            uint256 reward = multiplier * perBlock;\\n            accRewardPerShare = accRewardPerShare + (reward * divider / stakingTokenSupply);\\n        }\\n\\n        return (user.amount * accRewardPerShare / divider) - user.rewardDebt + user.pendingRewards;\\n    }\\n\\n    function updatePool() internal {\\n        require(liquidityMining.lastRewardBlock > 0 && block.number >= liquidityMining.lastRewardBlock, 'Mining not yet started');\\n        if (block.number <= liquidityMining.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 stakingTokenSupply = liquidityMining.stakingToken.balanceOf(address(this));\\n        if (stakingTokenSupply == 0) {\\n            liquidityMining.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = block.number - liquidityMining.lastRewardBlock;\\n        uint256 tokensReward = multiplier * rewardPerBlock;\\n        liquidityMining.accRewardPerShare = liquidityMining.accRewardPerShare + (tokensReward * divider / stakingTokenSupply);\\n        liquidityMining.lastRewardBlock = block.number;\\n    }\\n\\n    function deposit(uint256 amount) public virtual {\\n        Structs.UserInfo storage user = userInfo[msg.sender];\\n        updatePool();\\n\\n        uint256 accRewardPerShare = liquidityMining.accRewardPerShare;\\n\\n        if (user.amount > 0) {\\n            uint256 pending = (user.amount * accRewardPerShare / divider) - user.rewardDebt;\\n            if (pending > 0) {\\n                user.pendingRewards = user.pendingRewards + pending;\\n            }\\n        }\\n        if (amount > 0) {\\n            liquidityMining.stakingToken.safeTransferFrom(address(msg.sender), address(this), amount);\\n\\n            if (feePercent > 0) {\\n                uint256 fee = amount * feePercent / 1000;\\n                amount = amount - fee;\\n                collectedFees = collectedFees + fee;\\n            }\\n\\n            user.amount = user.amount + amount;\\n        }\\n        user.rewardDebt = user.amount * accRewardPerShare / divider;\\n        emit Deposit(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public virtual {\\n        Structs.UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= amount, \\\"Withdrawing more than you have!\\\");\\n        updatePool();\\n\\n        uint256 accRewardPerShare = liquidityMining.accRewardPerShare;\\n\\n        uint256 pending = (user.amount * accRewardPerShare / divider) - user.rewardDebt;\\n        if (pending > 0) {\\n            user.pendingRewards = user.pendingRewards + pending;\\n        }\\n        if (amount > 0) {\\n            user.amount = user.amount - amount;\\n\\n            if (feePercent > 0) {\\n                uint256 fee = amount * feePercent / 1000;\\n                amount = amount - fee;\\n                collectedFees = collectedFees + fee;\\n            }\\n\\n            liquidityMining.stakingToken.safeTransfer(address(msg.sender), amount);\\n        }\\n        user.rewardDebt = user.amount * accRewardPerShare / divider;\\n        emit Withdraw(msg.sender, amount);\\n    }\\n\\n    function claim() external {\\n        Structs.UserInfo storage user = userInfo[msg.sender];\\n        updatePool();\\n\\n        uint256 accRewardPerShare = liquidityMining.accRewardPerShare;\\n\\n        uint256 pending = (user.amount * accRewardPerShare / divider) - user.rewardDebt;\\n        if (pending > 0 || user.pendingRewards > 0) {\\n            user.pendingRewards = user.pendingRewards + pending;\\n            uint256 claimedAmount = safeRewardTransfer(msg.sender, user.pendingRewards);\\n            emit Claim(msg.sender, claimedAmount);\\n            user.pendingRewards = user.pendingRewards - claimedAmount;\\n        }\\n        user.rewardDebt = user.amount * accRewardPerShare / divider;\\n    }\\n\\n    function safeRewardTransfer(address to, uint256 amount) internal returns (uint256) {\\n        uint256 balance = rewardToken.balanceOf(address(treasury));\\n        require(amount > 0, 'Reward amount must be more than zero');\\n        require(balance > 0, 'Not enough reward tokens for transfer');\\n        if (amount > balance) {\\n            rewardToken.safeTransferFrom(address(treasury), to, balance);\\n            return balance;\\n        }\\n\\n        rewardToken.safeTransferFrom(address(treasury), to, amount);\\n        return amount;\\n    }\\n\\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        require(_rewardPerBlock > 0, \\\"Reward per block should be greater than 0\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n    }\\n\\n    function setFee(uint256 fee) external onlyOwner {\\n        require(fee >= 0, 'Fee is too small');\\n        require(fee <= 50, 'Fee is too big');\\n        feePercent = fee;\\n    }\\n\\n    function withdrawFees(address payable withdrawalAddress) external onlyOwner {\\n        liquidityMining.stakingToken.safeTransfer(withdrawalAddress, collectedFees);\\n        collectedFees = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/djagya/projects/crypto/trustpad-contracts/contracts/staking/StakingTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract StakingTreasury is Ownable {\\n    function allowClaiming(IERC20 _rewardToken) external onlyOwner {\\n        _rewardToken.approve(this.owner(), 100000000 ether);\\n    }\\n}\"\r\n    },\r\n    \"/Users/djagya/projects/crypto/trustpad-contracts/contracts/staking/TrustPadLevelsStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./ILevelsStaking.sol\\\";\\nimport \\\"./StakingTreasury.sol\\\";\\nimport \\\"./WithLevels.sol\\\";\\nimport \\\"./Stakeable.sol\\\";\\n\\ncontract TrustPadLevelsStaking is Ownable, ILevelsStaking, Stakeable, WithLevels {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => bool) isIDO;\\n    bool public lockEnabled = true;\\n    bool public halted = false;\\n\\n    event Lock(address indexed account, uint256 unlockTime, address locker);\\n    event LockEnabled(bool status);\\n    event Halted(bool status);\\n\\n    function getUserTier(address account) external view override returns (Structs.Tier memory) {\\n        return getTierForAmount(userInfo[account].amount);\\n    }\\n\\n    function getUserUnlockTime(address account) external view returns (uint) {\\n        return userInfo[account].unlocksAt;\\n    }\\n\\n    function toggleLocking(bool status) external onlyOwner {\\n        lockEnabled = status;\\n        emit LockEnabled(status);\\n    }\\n\\n    modifier onlyIDO() {\\n        require(isIDO[_msgSender()], \\\"Only IDOs can lock\\\");\\n        _;\\n    }\\n\\n    modifier lockable() {\\n        require(!lockEnabled || userInfo[_msgSender()].unlocksAt <= block.timestamp, \\\"Account is locked\\\");\\n        _;\\n    }\\n\\n    modifier notHalted() {\\n        require(!halted, \\\"Deposits are paused\\\");\\n        _;\\n    }\\n\\n    function deposit(uint256 amount) public override notHalted {\\n        super.deposit(amount);\\n    }\\n\\n    function withdraw(uint256 amount) public override lockable {\\n        super.withdraw(amount);\\n    }\\n\\n    function lock(address account) external override onlyIDO {\\n        Structs.UserInfo storage user = userInfo[account];\\n        Structs.Tier memory tier = getTierForAmount(user.amount);\\n        if (tier.lockingPeriod == 0) {\\n            return;\\n        }\\n\\n        uint unlockTime = block.timestamp + tier.lockingPeriod;\\n        if (user.unlocksAt < unlockTime) {\\n            user.unlocksAt = unlockTime;\\n            emit Lock(account, unlockTime, _msgSender());\\n        }\\n    }\\n\\n    function halt(bool status) external onlyOwner {\\n        halted = status;\\n        emit Halted(status);\\n    }\\n\\n    function addIDO(address account) external onlyOwner {\\n        require(account != address(0), \\\"IDO cannot be zero address\\\");\\n        isIDO[account] = true;\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"/Users/djagya/projects/crypto/trustpad-contracts/contracts/staking/WithLevels.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./ILevelsStaking.sol\\\";\\n\\nabstract contract WithLevels is Ownable, ILevelsStaking {\\n    string constant noneTierId = \\\"none\\\";\\n\\n    Structs.Tier[] public tiers;\\n\\n    event TierCreate(string indexed id, uint8 multiplier, uint256 lockingPeriod, uint256 minAmount, bool random, uint8 odds);\\n    event TierUpdate(string indexed id, uint8 multiplier, uint256 lockingPeriod, uint256 minAmount, bool random, uint8 odds);\\n    event TierRemove(string indexed id, uint256 idx);\\n\\n    constructor() {\\n        tiers.push(Structs.Tier(noneTierId, 0, 0, 0, false, 0));\\n    }\\n\\n    function getTierIds() external view override returns (string[] memory) {\\n        string[] memory ids = new string[](tiers.length);\\n        for (uint i = 0; i < tiers.length; i++) {\\n            ids[i] = tiers[i].id;\\n        }\\n\\n        return ids;\\n    }\\n\\n    function getTierById(string calldata id) public view override returns (Structs.Tier memory) {\\n        for (uint256 i = 0; i < tiers.length; i++) {\\n            if (stringsEqual(tiers[i].id, id)) {\\n                return tiers[i];\\n            }\\n        }\\n        revert('No such tier');\\n    }\\n\\n    function getTierForAmount(uint amount) internal view returns (Structs.Tier memory) {\\n        return tiers[getTierIdxForAmount(amount)];\\n    }\\n\\n    function getTierIdxForAmount(uint amount) internal view returns (uint) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n        uint maxTierK = 0;\\n        uint256 maxTierV;\\n        for (uint i = 1; i < tiers.length; i++) {\\n            Structs.Tier storage tier = tiers[i];\\n            if (amount >= tier.minAmount && tier.minAmount > maxTierV) {\\n                maxTierK = i;\\n                maxTierV = tier.minAmount;\\n            }\\n        }\\n\\n        return maxTierK;\\n    }\\n\\n    function setTier(string calldata id, uint8 multiplier, uint256 lockingPeriod, uint256 minAmount, bool random, uint8 odds) external onlyOwner returns (uint256) {\\n        require(!stringsEqual(id, noneTierId), \\\"Can't change 'none' tier\\\");\\n\\n        for (uint256 i = 0; i < tiers.length; i++) {\\n            if (stringsEqual(tiers[i].id, id)) {\\n                tiers[i].multiplier = multiplier;\\n                tiers[i].lockingPeriod = lockingPeriod;\\n                tiers[i].minAmount = minAmount;\\n                tiers[i].random = random;\\n                tiers[i].odds = odds;\\n\\n                emit TierUpdate(id, multiplier, lockingPeriod, minAmount, random, odds);\\n\\n                return i;\\n            }\\n        }\\n\\n        Structs.Tier memory newTier = Structs.Tier(id, multiplier, lockingPeriod, minAmount, random, odds);\\n        tiers.push(newTier);\\n\\n        emit TierCreate(id, multiplier, lockingPeriod, minAmount, random, odds);\\n\\n        return tiers.length - 1;\\n    }\\n\\n    function deleteTier(string calldata id) external onlyOwner {\\n        require(!stringsEqual(id, noneTierId), \\\"Can't delete 'none' tier\\\");\\n\\n        for (uint256 tierIdx = 0; tierIdx < tiers.length; tierIdx++) {\\n            if (stringsEqual(tiers[tierIdx].id, id)) {\\n                for (uint i = tierIdx; i < tiers.length - 1; i++) {\\n                    tiers[i] = tiers[i + 1];\\n                }\\n                tiers.pop();\\n\\n                emit TierRemove(id, tierIdx);\\n                break;\\n            }\\n        }\\n    }\\n\\n    function stringsEqual(string memory a, string memory b) private pure returns (bool) {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Halted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LockEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"random\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"odds\",\"type\":\"uint8\"}],\"name\":\"TierCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"TierRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"random\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"odds\",\"type\":\"uint8\"}],\"name\":\"TierUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addIDO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"deleteTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"getTierById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"random\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"odds\",\"type\":\"uint8\"}],\"internalType\":\"struct Structs.Tier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTierIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserTier\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"random\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"odds\",\"type\":\"uint8\"}],\"internalType\":\"struct Structs.Tier\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"halt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMining\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"random\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"odds\",\"type\":\"uint8\"}],\"name\":\"setTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"random\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"odds\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"toggleLocking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StakingTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlocksAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawalAddress\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TrustPadLevelsStaking", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}