{"SourceCode": "// \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588     \u2588\u2588  \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588   \u2588\u2588                  \r\n// \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588       \u2588\u2588  \u2588\u2588  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588  \u2588\u2588     \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588   \u2588\u2588\u2588\u2588              \r\n\r\n//Revoluzion Ecosystem\r\n//WEB: https://revoluzion.io\r\n//DAPP: https://revoluzion.app\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.16;\r\n\r\n// Library\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    \r\n    // DATA\r\n\r\n    address private _owner;\r\n    address private _operator;\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    // MODIFIER\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        _checkOperator();\r\n        _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        _checkAuthorization();\r\n        _;\r\n    }\r\n    \r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address adr\r\n    ) {\r\n        _transferOwnership(_msgSender());\r\n        authorizations[_msgSender()] = true;\r\n        _operator = adr;\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // FUNCTION\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function operator() public view virtual returns (address) {\r\n        return _operator;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function _checkOperator() internal view virtual {\r\n        require(operator() == _msgSender(), \"Ownable: caller is not the operator\");\r\n    }\r\n\r\n    function _checkAuthorization() internal view virtual {\r\n        require(isAuthorized(_msgSender()), \"Ownable: caller is not an authorized account\");\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function authorize(address adr) public onlyOperator {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOperator {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function renounceOperator() public virtual onlyOperator {\r\n        _operator = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Interface\r\n\r\ninterface IERC20 {\r\n    \r\n    //EVENT \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // FUNCTION\r\n\r\n    function name() external view returns (string memory);\r\n    \r\n    function symbol() external view returns (string memory);\r\n    \r\n    function decimals() external view returns (uint8);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFactory {\r\n\r\n    // FUNCTION\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\r\n    // FUNCTION\r\n\r\n    function WETH() external pure returns (address);\r\n        \r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\n// Token\r\n\r\ncontract WhatDoYouMeme is Ownable, IERC20 {\r\n\r\n    // DATA\r\n\r\n    string private constant NAME = \"What Do You Meme\";\r\n    string private constant SYMBOL = \"WDYM\";\r\n\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    uint256 private _totalSupply;\r\n    \r\n    uint256 public constant FEEDENOMINATOR = 10_000;\r\n\r\n    uint256 public buyLaunchpadFee = 300;\r\n    uint256 public buyLiquidityFee = 200;\r\n    uint256 public sellLaunchpadFee = 300;\r\n    uint256 public sellLiquidityFee = 500;\r\n    uint256 public transferLaunchpadFee = 0;\r\n    uint256 public transferLiquidityFee = 0;\r\n    uint256 public launchpadFeeCollected = 0;\r\n    uint256 public liquidityFeeCollected = 0;\r\n    uint256 public totalFeeCollected = 0;\r\n    uint256 public launchpadFeeRedeemed = 0;\r\n    uint256 public liquidityFeeRedeemed = 0;\r\n    uint256 public totalFeeRedeemed = 0;\r\n    uint256 public minSwap = 10_000 ether;\r\n\r\n    bool private constant ISWDYM = true;\r\n\r\n    bool public isFeeActive = false;\r\n    bool public isFeeLocked = false;\r\n    bool public isSwapEnabled = false;\r\n    bool public inSwap = false;\r\n\r\n    address public constant ZERO = address(0);\r\n    address public constant DEAD = address(0xdead);\r\n\r\n    address public pair;\r\n    address public launchpadReceiver = 0x263157fDD57c40975b3350e58Ad7E41130d5e072;\r\n    address public liquidityReceiver = 0xDEA010bDB8DA3996d63495Ee2b631cA47813B536;\r\n    \r\n    IRouter public router;\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isExcludeFromFees;\r\n\r\n    // MODIFIER\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address routerAddress\r\n    ) Ownable (_msgSender()) {\r\n        _mint(_msgSender(), 100_000_000 ether);\r\n        \r\n        router = IRouter(routerAddress);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event UpdateRouter(address oldRouter, address newRouter, uint256 timestamp);\r\n\r\n    event UpdateMinSwap(uint256 oldMinSwap, uint256 newMinSwap, uint256 timestamp);\r\n\r\n    event UpdateFeeActive(bool oldStatus, bool newStatus, uint256 timestamp);\r\n\r\n    event UpdateSwapEnabled(bool oldStatus, bool newStatus, uint256 timestamp);\r\n\r\n    event RedeemLiquidity(uint256 amountToken, uint256 amountETH, uint256 liquidity, uint256 timestamp);\r\n\r\n    event UpdateLaunchpadReceiver(address oldLaunchpadReceiver, address newLaunchpadReceiver, uint256 timestamp);\r\n    \r\n    event UpdateLiquidityReceiver(address oldLiquidityReceiver, address newLiquidityReceiver, uint256 timestamp);\r\n\r\n    event AutoRedeem(uint256 launchpadFeeDistribution, uint256 liquidityFeeDistribution, uint256 amountToRedeem, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n\r\n    /* General */\r\n\r\n    receive() external payable {}\r\n\r\n    function finalizePresale() external authorized {\r\n        require(!isFeeActive, \"Finalize Presale: Fee already active.\");\r\n        require(!isSwapEnabled, \"Finalize Presale: Swap already enabled.\");\r\n        isFeeActive = true;\r\n        isSwapEnabled = true;\r\n    }\r\n\r\n    function lockFees() external authorized {\r\n        require(!isFeeLocked, \"Lock Fees: All fees were already locked.\");\r\n        isFeeLocked = true;\r\n    }\r\n\r\n    function redeemAllLaunchpadFee() external {\r\n        uint256 amountToRedeem = launchpadFeeCollected - launchpadFeeRedeemed;\r\n        \r\n        _redeemLaunchpadFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialLaunchpadFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= launchpadFeeCollected - launchpadFeeRedeemed, \"Redeem Partial Launchpad Fee: Insufficient launchpad fee collected.\");\r\n        \r\n        _redeemLaunchpadFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemLaunchpadFee(uint256 amountToRedeem) internal swapping { \r\n        launchpadFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToRedeem,\r\n            0,\r\n            path,\r\n            launchpadReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function redeemAllLiquidityFee() external {\r\n        uint256 amountToRedeem = liquidityFeeCollected - liquidityFeeRedeemed;\r\n        \r\n        _redeemLiquidityFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialLiquidityFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= liquidityFeeCollected - liquidityFeeRedeemed, \"Redeem Partial Liquidity Fee: Insufficient liquidity fee collected.\");\r\n        \r\n        _redeemLiquidityFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemLiquidityFee(uint256 amountToRedeem) internal swapping returns (uint256) {   \r\n        require(msg.sender != liquidityReceiver, \"Redeem Liquidity Fee: Liquidity receiver cannot call this function.\");\r\n        uint256 initialBalance = address(this).balance;\r\n        uint256 firstLiquidityHalf = amountToRedeem / 2;\r\n        uint256 secondLiquidityHalf = amountToRedeem - firstLiquidityHalf;\r\n\r\n        liquidityFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            firstLiquidityHalf,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        (, , uint256 liquidity) = router.addLiquidityETH{\r\n            value: address(this).balance - initialBalance\r\n        }(\r\n            address(this),\r\n            secondLiquidityHalf,\r\n            0,\r\n            0,\r\n            liquidityReceiver,\r\n            block.timestamp + 1_200\r\n        );\r\n\r\n        return liquidity;\r\n    }\r\n\r\n    /* Check */\r\n\r\n    function isWDYM() external pure returns (bool) {\r\n        return ISWDYM;\r\n    }\r\n\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    /* Update */\r\n\r\n    function updateRouter(address newRouter) external authorized {\r\n        require(address(router) != newRouter, \"Update Router: This is the current router address.\");\r\n        address oldRouter = address(router);\r\n        router = IRouter(newRouter);\r\n        emit UpdateRouter(oldRouter, newRouter, block.timestamp);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n    }\r\n\r\n    function updateMinSwap(uint256 newMinSwap) external authorized {\r\n        require(minSwap != newMinSwap, \"Update Min Swap: This is the current value of min swap.\");\r\n        uint256 oldMinSwap = minSwap;\r\n        minSwap = newMinSwap;\r\n        emit UpdateMinSwap(oldMinSwap, newMinSwap, block.timestamp);\r\n    }\r\n\r\n    function updateBuyFee(uint256 newLaunchpadFee, uint256 newLiquidityFee) external authorized {\r\n        require(!isFeeLocked, \"Update Buy Fee: All buy fees were locked and cannot be updated.\");\r\n        require(newLaunchpadFee + newLiquidityFee <= 1000, \"Update Buy Fee: Total fees cannot exceed 10%.\");\r\n        buyLaunchpadFee = newLaunchpadFee;\r\n        buyLiquidityFee = newLiquidityFee;\r\n    }\r\n\r\n    function updateSellFee(uint256 newLaunchpadFee, uint256 newLiquidityFee) external authorized {\r\n        require(!isFeeLocked, \"Update Sell Fee: All sell fees were locked and cannot be updated.\");\r\n        require(newLaunchpadFee + newLiquidityFee <= 1000, \"Update Sell Fee: Total fees cannot exceed 10%.\");\r\n        sellLaunchpadFee = newLaunchpadFee;\r\n        sellLiquidityFee = newLiquidityFee;\r\n    }\r\n\r\n    function updateTransferFee(uint256 newLaunchpadFee, uint256 newLiquidityFee) external authorized {\r\n        require(!isFeeLocked, \"Update Transfer Fee: All transfer fees were locked and cannot be updated.\");\r\n        require(newLaunchpadFee + newLiquidityFee <= 1000, \"Update Transfer Fee: Total fees cannot exceed 10%.\");\r\n        transferLaunchpadFee = newLaunchpadFee;\r\n        transferLiquidityFee = newLiquidityFee;\r\n    }\r\n\r\n    function updateFeeActive(bool newStatus) external authorized {\r\n        require(isFeeActive != newStatus, \"Update Fee Active: This is the current state for the fee.\");\r\n        bool oldStatus = isFeeActive;\r\n        isFeeActive = newStatus;\r\n        emit UpdateFeeActive(oldStatus, newStatus, block.timestamp);\r\n    }\r\n\r\n    function updateSwapEnabled(bool newStatus) external authorized {\r\n        require(isSwapEnabled != newStatus, \"Update Swap Enabled: This is the current state for the swap.\");\r\n        bool oldStatus = isSwapEnabled;\r\n        isSwapEnabled = newStatus;\r\n        emit UpdateSwapEnabled(oldStatus, newStatus, block.timestamp);\r\n    }\r\n\r\n    function updateLaunchpadReceiver(address newLaunchpadReceiver) external authorized {\r\n        require(launchpadReceiver != newLaunchpadReceiver, \"Update Launchpad Receiver: This is the current launchpad receiver address.\");\r\n        address oldLaunchpadReceiver = launchpadReceiver;\r\n        launchpadReceiver = newLaunchpadReceiver;\r\n        emit UpdateLaunchpadReceiver(oldLaunchpadReceiver, newLaunchpadReceiver, block.timestamp);\r\n    }\r\n\r\n    function updateLiquidityReceiver(address newLiquidityReceiver) external authorized {\r\n        require(liquidityReceiver != newLiquidityReceiver, \"Update Liquidity Receiver: This is the current liquidity receiver address.\");\r\n        address oldLiquidityReceiver = liquidityReceiver;\r\n        liquidityReceiver = newLiquidityReceiver;\r\n        emit UpdateLiquidityReceiver(oldLiquidityReceiver, newLiquidityReceiver, block.timestamp);\r\n    }\r\n\r\n    function setExcludeFromFees(address user, bool status) external authorized {\r\n        require(isExcludeFromFees[user] != status, \"Set Exclude From Fees: This is the current state for this address.\");\r\n        isExcludeFromFees[user] = status;\r\n    }\r\n\r\n    /* Fee */\r\n\r\n    function takeBuyFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = buyLaunchpadFee + buyLiquidityFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyBuyFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeSellFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = sellLaunchpadFee + sellLiquidityFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallySellFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeTransferFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = transferLaunchpadFee + transferLiquidityFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyTransferFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function tallyBuyFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectLaunchpad = amount * buyLaunchpadFee / fee;\r\n        uint256 collectLiquidity = amount - collectLaunchpad;\r\n        tallyCollection(collectLaunchpad, collectLiquidity, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallySellFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectLaunchpad = amount * sellLaunchpadFee / fee;\r\n        uint256 collectLiquidity = amount - collectLaunchpad;\r\n        tallyCollection(collectLaunchpad, collectLiquidity, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyTransferFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectLaunchpad = amount * transferLaunchpadFee / fee;\r\n        uint256 collectLiquidity = amount - collectLaunchpad;\r\n        tallyCollection(collectLaunchpad, collectLiquidity, amount);\r\n\r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyCollection(uint256 collectLaunchpad, uint256 collectLiquidity, uint256 amount) internal swapping {\r\n        launchpadFeeCollected += collectLaunchpad;\r\n        liquidityFeeCollected += collectLiquidity;\r\n        totalFeeCollected += amount;\r\n\r\n    }\r\n\r\n    function autoRedeem(uint256 amountToRedeem) public swapping returns (uint256) {  \r\n        require(msg.sender != liquidityReceiver, \"Auto Redeem: Cannot use liquidity receiver to trigger this.\");\r\n        uint256 launchpadToRedeem = launchpadFeeCollected - launchpadFeeRedeemed;\r\n        uint256 totalToRedeem = totalFeeCollected - totalFeeRedeemed;\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n        uint256 launchpadFeeDistribution = amountToRedeem * launchpadToRedeem / totalToRedeem;\r\n        uint256 liquidityFeeDistribution = amountToRedeem - launchpadFeeDistribution;\r\n        uint256 firstLiquidityHalf = liquidityFeeDistribution / 2;\r\n        uint256 secondLiquidityHalf = liquidityFeeDistribution - firstLiquidityHalf;\r\n        uint256 redeemAmount = amountToRedeem;\r\n\r\n        launchpadFeeRedeemed += launchpadFeeDistribution;\r\n        liquidityFeeRedeemed += liquidityFeeDistribution;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), redeemAmount);\r\n    \r\n        emit AutoRedeem(launchpadFeeDistribution, liquidityFeeDistribution, redeemAmount, block.timestamp);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            launchpadFeeDistribution,\r\n            0,\r\n            path,\r\n            launchpadReceiver,\r\n            block.timestamp\r\n        );\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            firstLiquidityHalf,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        (, , uint256 liquidity) = router.addLiquidityETH{\r\n            value: address(this).balance - initialBalance\r\n        }(\r\n            address(this),\r\n            secondLiquidityHalf,\r\n            0,\r\n            0,\r\n            liquidityReceiver,\r\n            block.timestamp + 1_200\r\n        );\r\n        \r\n        return liquidity;\r\n    }\r\n\r\n    /* Buyback */\r\n\r\n    function triggerZeusBuyback(uint256 amount) external authorized {\r\n        buyTokens(amount, DEAD);\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        require(msg.sender != DEAD, \"Buy Tokens: Dead address cannot call this function.\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(0, path, to, block.timestamp);\r\n    }\r\n\r\n    /* ERC20 Standard */\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return NAME;\r\n    }\r\n    \r\n    function symbol() external view virtual override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    function decimals() external view virtual override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        address provider = _msgSender();\r\n        return _transfer(provider, to, amount);\r\n    }\r\n    \r\n    function allowance(address provider, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[provider][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address provider = _msgSender();\r\n        _approve(provider, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        return _transfer(from, to, amount);\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        address provider = _msgSender();\r\n        _approve(provider, spender, allowance(provider, spender) + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        address provider = _msgSender();\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(provider, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address provider, address spender, uint256 amount) internal virtual {\r\n        require(provider != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[provider][spender] = amount;\r\n        emit Approval(provider, spender, amount);\r\n    }\r\n    \r\n    function _spendAllowance(address provider, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(provider, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Additional */\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount ) internal returns (bool) {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    /* Overrides */\r\n \r\n    function _transfer(address from, address to, uint256 amount) internal virtual returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (inSwap || isExcludeFromFees[from]) {\r\n            return _basicTransfer(from, to, amount);\r\n        }\r\n\r\n        if (from != pair && isSwapEnabled && totalFeeCollected - totalFeeRedeemed >= minSwap) {\r\n            autoRedeem(minSwap);\r\n        }\r\n\r\n        uint256 newAmount = amount;\r\n\r\n        if (isFeeActive && !isExcludeFromFees[from]) {\r\n            newAmount = _beforeTokenTransfer(from, to, amount);\r\n        }\r\n\r\n        require(_balances[from] >= newAmount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = _balances[from] - newAmount;\r\n            _balances[to] += newAmount;\r\n        }\r\n\r\n        emit Transfer(from, to, newAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal swapping virtual returns (uint256) {\r\n        if (from == pair && (buyLaunchpadFee + buyLiquidityFee > 0)) {\r\n            return takeBuyFee(from, amount);\r\n        }\r\n        if (to == pair && (sellLaunchpadFee + sellLiquidityFee > 0)) {\r\n            return takeSellFee(from, amount);\r\n        }\r\n        if (from != pair && to != pair && (transferLaunchpadFee + transferLiquidityFee > 0)) {\r\n            return takeTransferFee(from, amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"launchpadFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AutoRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RedeemLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLaunchpadReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLaunchpadReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateLaunchpadReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLiquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidityReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMinSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEEDENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"autoRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunchpadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWDYM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllLaunchpadFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialLaunchpadFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunchpadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLaunchpadFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerZeusBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLaunchpadFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLaunchpadReceiver\",\"type\":\"address\"}],\"name\":\"updateLaunchpadReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityReceiver\",\"type\":\"address\"}],\"name\":\"updateLiquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"}],\"name\":\"updateMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLaunchpadFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLaunchpadFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WhatDoYouMeme", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f098e50374e0bc69570f7f1076e9a4472af781e8dd7927633189c8964391005d"}