{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-11-28\r\n*/\r\n\r\n/**\r\n * SPDX-License-Identifier: MIT\r\n */ \r\n \r\n// Wagmi - WE'RE ALL GOING TO MAKE IT\r\n\r\npragma solidity ^0.8.6;\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) { \r\n        uint256 size; assembly { size := extcodesize(account) } return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");(bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n        \r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n        \r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n        \r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) { return returndata; } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {revert(errorMessage);}\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n    \r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract WAGMI is IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    address internal deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public presaleAddress = address(0);\r\n    \r\n    address public marketingWallet = 0x10b33D3CbcB6f674fc626bfd83a701D2422352E2;\r\n    address public devWallet = 0x8Da67EF3CA0D9a2e28EB32DDd323295A64d20AD3;\r\n    address public teamWallet = 0xf96cb8E903AE8AABf92c5668871e5ACE37316c64;\r\n    \r\n    string constant _name = \"WAGMI\";\r\n    string constant _symbol = \"WAGMI\";\r\n    uint8 constant _decimals = 18;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 internal constant _totalSupply = 1000000000000 * (10**18);\r\n    uint256 internal _reflectedSupply = (MAX - (MAX % _totalSupply));\r\n    \r\n    uint256 public collectedFeeTotal;\r\n  \r\n    uint256 public maxTxAmount = _totalSupply / 1000; // 0.5% of the total supply\r\n    uint256 public maxWalletBalance = _totalSupply / 50; // 2% of the total supply\r\n    \r\n    bool public takeFeeEnabled = true;\r\n    bool public tradingIsEnabled = true;\r\n    bool public isInPresale = false;\r\n    \r\n    bool private swapping;\r\n    bool public swapEnabled = true;\r\n    uint256 public swapTokensAtAmount = 10000000 * (10**18);\r\n\r\n    bool public antiBotEnabled = false;\r\n    uint256 public antiBotFee = 990; // 99%\r\n    uint256 public _startTimeForSwap;\r\n    \r\n    uint256 internal FEES_DIVISOR = 10**3;\r\n    \r\n    uint256 public rfiFee = 10; // 1%\r\n    uint256 public marketingFee = 30; // 3%\r\n    uint256 public devFee = 20; // 2%\r\n    uint256 public teamFee = 25; // 2.5%\r\n    uint256 public lpFee = 15; // 1.5%\r\n    uint256 public totalFee = rfiFee.add(marketingFee).add(devFee).add(teamFee).add(lpFee);\r\n    \r\n    // Total = 100% (1000)\r\n    uint256 public marketingPortionOfSwap = 500; // 50%\r\n    uint256 public devPortionOfSwap = 200; // 20%\r\n    uint256 public teamPortionOfSwap = 150; // 15%\r\n    uint256 public lpPortionOfSwap = 150; // 15%\r\n    \r\n    IPancakeV2Router public router;\r\n    address public pair;\r\n    \r\n    \r\n    mapping (address => uint256) internal _reflectedBalances;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    mapping(address => bool) public _isBlacklisted;\r\n    \r\n    mapping (address => bool) internal _isExcludedFromFee;\r\n    mapping (address => bool) internal _isExcludedFromRewards;\r\n    address[] private _excluded;\r\n    \r\n    event UpdatePancakeswapRouter(address indexed newAddress, address indexed oldAddress);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n    \r\n    event MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\r\n    event DevWalletUpdated(address indexed newDevWallet, address indexed oldDevWallet);\r\n    event TeamWalletUpdated(address indexed newTeamWallet, address indexed oldTeamWallet);\r\n    \r\n    event LiquidityAdded(uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity);\r\n    \r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    constructor () {\r\n        _reflectedBalances[owner()] = _reflectedSupply;\r\n        \r\n        IPancakeV2Router _newPancakeRouter = IPancakeV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IPancakeV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        router = _newPancakeRouter;\r\n        \r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        \r\n        // exclude the owner and this contract from rewards\r\n        _exclude(owner());\r\n        _exclude(address(this));\r\n        \r\n        // exclude the pair address from rewards - we don't want to redistribute\r\n        _exclude(pair);\r\n        _exclude(deadAddress);\r\n        \r\n        _approve(owner(), address(router), ~uint256(0));\r\n        \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n    \r\n    receive() external payable { }\r\n    \r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256){\r\n        if (_isExcludedFromRewards[account]) return _balances[account];\r\n        return tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        \r\n    function transfer(address recipient, uint256 amount) external override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n        }\r\n        \r\n    function allowance(address owner, address spender) external view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n        }\r\n    \r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n        }\r\n        \r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n        }\r\n        \r\n    function burn(uint256 amount) external {\r\n\r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"ERC20: burn from the zero address\");\r\n        require(sender != address(deadAddress), \"ERC20: burn from the burn address\");\r\n\r\n        uint256 balance = balanceOf(sender);\r\n        require(balance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        uint256 reflectedAmount = amount.mul(_getCurrentRate());\r\n\r\n        // remove the amount from the sender's balance first\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(reflectedAmount);\r\n        if (_isExcludedFromRewards[sender])\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _burnTokens( sender, amount, reflectedAmount );\r\n    }\r\n    \r\n    /**\r\n     * @dev \"Soft\" burns the specified amount of tokens by sending them \r\n     * to the burn address\r\n     */\r\n    function _burnTokens(address sender, uint256 tBurn, uint256 rBurn) internal {\r\n\r\n        /**\r\n         * @dev Do not reduce _totalSupply and/or _reflectedSupply. (soft) burning by sending\r\n         * tokens to the burn address (which should be excluded from rewards) is sufficient\r\n         * in RFI\r\n         */ \r\n        _reflectedBalances[deadAddress] = _reflectedBalances[deadAddress].add(rBurn);\r\n        if (_isExcludedFromRewards[deadAddress])\r\n            _balances[deadAddress] = _balances[deadAddress].add(tBurn);\r\n\r\n        /**\r\n         * @dev Emit the event so that the burn address balance is updated (on bscscan)\r\n         */\r\n        emit Transfer(sender, deadAddress, tBurn);\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BaseRfiToken: approve from the zero address\");\r\n        require(spender != address(0), \"BaseRfiToken: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    \r\n     /**\r\n     * @dev Calculates and returns the reflected amount for the given amount with or without \r\n     * the transfer fees (deductTransferFee true/false)\r\n     */\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount <= _totalSupply, \"Amount must be less than supply\");\r\n        uint256 feesSum;\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount,0);\r\n            return rAmount;\r\n        } else {\r\n            feesSum = totalFee;\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount, feesSum);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and returns the amount of tokens corresponding to the given reflected amount.\r\n     */\r\n    function tokenFromReflection(uint256 rAmount) internal view returns(uint256) {\r\n        require(rAmount <= _reflectedSupply, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getCurrentRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcludedFromRewards[account], \"Account is not included\");\r\n        _exclude(account);\r\n    }\r\n    \r\n    function _exclude(address account) internal {\r\n        if(_reflectedBalances[account] > 0) {\r\n            _balances[account] = tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcludedFromRewards[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _balances[account] = 0;\r\n                _isExcludedFromRewards[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function setExcludedFromFee(address account, bool value) external onlyOwner { \r\n        _isExcludedFromFee[account] = value; \r\n    }\r\n\r\n    function _getValues(uint256 tAmount, uint256 feesSum) internal view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        \r\n        uint256 tTotalFees = tAmount.mul(feesSum).div(FEES_DIVISOR);\r\n        uint256 tTransferAmount = tAmount.sub(tTotalFees);\r\n        uint256 currentRate = _getCurrentRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTotalFees = tTotalFees.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rTotalFees);\r\n        \r\n        return (rAmount, rTransferAmount, tAmount, tTransferAmount, currentRate);\r\n    }\r\n    \r\n    function _getCurrentRate() internal view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n    \r\n    function _getCurrentSupply() internal view returns(uint256, uint256) {\r\n        uint256 rSupply = _reflectedSupply;\r\n        uint256 tSupply = _totalSupply;\r\n\r\n        /**\r\n         * The code below removes balances of addresses excluded from rewards from\r\n         * rSupply and tSupply, which effectively increases the % of transaction fees\r\n         * delivered to non-excluded holders\r\n         */    \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_reflectedBalances[_excluded[i]] > rSupply || _balances[_excluded[i]] > tSupply)\r\n            return (_reflectedSupply, _totalSupply);\r\n            rSupply = rSupply.sub(_reflectedBalances[_excluded[i]]);\r\n            tSupply = tSupply.sub(_balances[_excluded[i]]);\r\n        }\r\n        if (tSupply == 0 || rSupply < _reflectedSupply.div(_totalSupply)) return (_reflectedSupply, _totalSupply);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Redistributes the specified amount among the current holders via the reflect.finance\r\n     * algorithm, i.e. by updating the _reflectedSupply (_rSupply) which ultimately adjusts the\r\n     * current rate used by `tokenFromReflection` and, in turn, the value returns from `balanceOf`. \r\n     * \r\n     */\r\n    function _redistribute(uint256 amount, uint256 currentRate, uint256 fee) internal {\r\n        uint256 tFee = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n\r\n        _reflectedSupply = _reflectedSupply.sub(rFee);\r\n        \r\n        collectedFeeTotal = collectedFeeTotal.add(tFee);\r\n    }\r\n    \r\n    function _burn(uint256 amount, uint256 currentRate, uint256 fee) private {\r\n        uint256 tBurn = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n\r\n        _burnTokens(address(this), tBurn, rBurn);\r\n        \r\n        collectedFeeTotal = collectedFeeTotal.add(tBurn);\r\n    }\r\n\r\n    function totalCollectedFees() external view returns (uint256) {\r\n        return collectedFeeTotal;\r\n    }\r\n    \r\n     function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcludedFromRewards[account];\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) { \r\n        return _isExcludedFromFee[account]; \r\n    }\r\n    \r\n    function whitelistDxSale(address _presaleAddress, address _routerAddress) external onlyOwner {\r\n  \t    presaleAddress = _presaleAddress;\r\n  \t    \r\n        _exclude(_presaleAddress);\r\n        _isExcludedFromFee[_presaleAddress] = true;\r\n\r\n        _exclude(_routerAddress);\r\n        _isExcludedFromFee[_routerAddress] = true;\r\n  \t}\r\n\r\n    function blacklistAddress(address account, bool value) external onlyOwner{\r\n        _isBlacklisted[account] = value;\r\n    }\r\n \r\n    function prepareForPreSale() external onlyOwner {\r\n        takeFeeEnabled = false;\r\n        swapEnabled = false;\r\n        isInPresale = true;\r\n        maxTxAmount = _totalSupply;\r\n        maxWalletBalance = _totalSupply;\r\n    }\r\n    \r\n    function afterPreSale() external onlyOwner {\r\n        takeFeeEnabled = true;\r\n        swapEnabled = true;\r\n        isInPresale = false;\r\n        maxTxAmount = _totalSupply / 1000;\r\n        maxWalletBalance = _totalSupply / 50;\r\n    }\r\n    \r\n    function setSwapEnabled(bool _enabled) external onlyOwner {\r\n        swapEnabled  = _enabled;\r\n    }\r\n    \r\n    function updateSwapTokensAt(uint256 _swaptokens) external onlyOwner {\r\n        swapTokensAtAmount = _swaptokens * (10**18);\r\n    }\r\n    \r\n    function updateWalletMax(uint256 _walletMax) external onlyOwner {\r\n        maxWalletBalance = _walletMax * (10**18);\r\n    }\r\n    \r\n    function updateTransactionMax(uint256 _txMax) external onlyOwner {\r\n        maxTxAmount = _txMax * (10**18);\r\n    }\r\n    \r\n    function calcTotalFees() private {\r\n        totalFee = rfiFee.add(marketingFee).add(devFee).add(teamFee).add(lpFee);\r\n    }\r\n    \r\n    function updateRfiFee(uint256 newFee) external onlyOwner {\r\n        rfiFee = newFee;\r\n        calcTotalFees();\r\n    }\r\n    \r\n    function updateMarketingFee(uint256 newFee) external onlyOwner {\r\n        marketingFee = newFee;\r\n        calcTotalFees();\r\n    }\r\n    \r\n    function updateDevFee(uint256 newFee) external onlyOwner {\r\n        devFee = newFee;\r\n        calcTotalFees();\r\n    }\r\n    \r\n    function updateTeamFee(uint256 newFee) external onlyOwner {\r\n        teamFee = newFee;\r\n        calcTotalFees();\r\n    }\r\n    \r\n    function updateLpFee(uint256 newFee) external onlyOwner {\r\n        lpFee = newFee;\r\n        calcTotalFees();\r\n    }\r\n    \r\n    function updateMarketingWallet(address newMarketingWallet) external onlyOwner {\r\n        require(newMarketingWallet != marketingWallet, \"The Marketing wallet is already this address\");\r\n        emit MarketingWalletUpdated(newMarketingWallet, marketingWallet);\r\n        \r\n        marketingWallet = newMarketingWallet;\r\n    }\r\n    \r\n    function updateDevWallet(address newDevWallet) external onlyOwner {\r\n        require(newDevWallet != devWallet, \"The Dev wallet is already this address\");\r\n        emit DevWalletUpdated(newDevWallet, devWallet);\r\n        \r\n        devWallet = newDevWallet;\r\n    }\r\n    \r\n    function updateTeamWallet(address newTeamWallet) external onlyOwner {\r\n        require(newTeamWallet != teamWallet, \"The Team wallet is already this address\");\r\n        emit TeamWalletUpdated(newTeamWallet, teamWallet);\r\n        \r\n        teamWallet = newTeamWallet;\r\n    }\r\n    \r\n    function updatePortionsOfSwap(uint256 marketingPortion, uint256  devPortion, uint256 lpPortion, uint256 teamPortion) \r\n    external onlyOwner {\r\n        \r\n        uint256 totalPortion = marketingPortion.add(devPortion).add(lpPortion).add(teamPortion);\r\n        require(totalPortion == 1000, \"Total must be equal to 1000 (100%)\");\r\n        \r\n        marketingPortionOfSwap = marketingPortion;\r\n        devPortionOfSwap = devPortion;\r\n        lpPortionOfSwap = lpPortion;\r\n        teamPortionOfSwap = teamPortion;\r\n    }\r\n    \r\n    function setFeesDivisor(uint256 divisor) external onlyOwner() {\r\n        FEES_DIVISOR = divisor;\r\n    }\r\n    \r\n    function updateTradingIsEnabled(bool tradingStatus) external onlyOwner() {\r\n        tradingIsEnabled = tradingStatus;\r\n    }\r\n    \r\n    function updateRouterAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(router), \"The router already has that address\");\r\n        emit UpdatePancakeswapRouter(newAddress, address(router));\r\n        \r\n        router = IPancakeV2Router(newAddress);   \r\n    }\r\n\r\n    function toggleAntiBot(bool toggleStatus) external onlyOwner() {\r\n        antiBotEnabled = toggleStatus;\r\n        if(antiBotEnabled){\r\n            _startTimeForSwap = block.timestamp + 60;    \r\n        }    \r\n    }\r\n    \r\n    function _takeFee(uint256 amount, uint256 currentRate, uint256 fee, address recipient) private {\r\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rAmount);\r\n        if(_isExcludedFromRewards[recipient])\r\n            _balances[recipient] = _balances[recipient].add(tAmount);\r\n\r\n        collectedFeeTotal = collectedFeeTotal.add(tAmount);\r\n    }\r\n    \r\n    function _transferTokens(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        \r\n        uint256 sumOfFees = totalFee;\r\n        sumOfFees = antiBotEnabled && block.timestamp <= _startTimeForSwap ? antiBotFee : sumOfFees;\r\n        \r\n        if ( !takeFee ){ sumOfFees = 0; }\r\n        \r\n        processReflectedBal(sender, recipient, amount, sumOfFees);\r\n       \r\n    }\r\n    \r\n    function processReflectedBal (address sender, address recipient, uint256 amount, uint256 sumOfFees) private {\r\n        \r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tAmount, \r\n        uint256 tTransferAmount, uint256 currentRate ) = _getValues(amount, sumOfFees);\r\n         \r\n        theReflection(sender, recipient, rAmount, rTransferAmount, tAmount, tTransferAmount); \r\n        \r\n        _takeFees(amount, currentRate, sumOfFees);\r\n        \r\n        emit Transfer(sender, recipient, tTransferAmount);    \r\n    }\r\n    \r\n    function theReflection(address sender, address recipient, uint256 rAmount, uint256 rTransferAmount, uint256 tAmount, \r\n        uint256 tTransferAmount) private {\r\n            \r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(rAmount);\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rTransferAmount);\r\n        \r\n        /**\r\n         * Update the true/nominal balances for excluded accounts\r\n         */        \r\n        if (_isExcludedFromRewards[sender]) { _balances[sender] = _balances[sender].sub(tAmount); }\r\n        if (_isExcludedFromRewards[recipient] ) { _balances[recipient] = _balances[recipient].add(tTransferAmount); }\r\n    }\r\n    \r\n    \r\n    function _takeFees(uint256 amount, uint256 currentRate, uint256 sumOfFees) private {\r\n        if ( sumOfFees > 0 && !isInPresale ){\r\n            _redistribute( amount, currentRate, rfiFee );  // redistribute to holders\r\n            \r\n            uint256 otherFees = sumOfFees.sub(rfiFee);\r\n            _takeFee( amount, currentRate, otherFees, address(this));\r\n\r\n        }\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"Token: transfer from the zero address\");\r\n        require(recipient != address(0), \"Token: transfer to the zero address\");\r\n        require(sender != address(deadAddress), \"Token: transfer from the burn address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        require(tradingIsEnabled, \"This account cannot send tokens until trading is enabled\");\r\n\r\n        require(!_isBlacklisted[sender] && !_isBlacklisted[recipient], \"Blacklisted address\");\r\n        \r\n        if (\r\n            sender != address(router) && //router -> pair is removing liquidity which shouldn't have max\r\n            !_isExcludedFromFee[recipient] && //no max for those excluded from fees\r\n            !_isExcludedFromFee[sender] \r\n        ) {\r\n            require(amount <= maxTxAmount, \"Transfer amount exceeds the Max Transaction Amount.\");\r\n            \r\n        }\r\n        \r\n        if ( maxWalletBalance > 0 && !_isExcludedFromFee[recipient] && !_isExcludedFromFee[sender] && recipient != address(pair) ) {\r\n                uint256 recipientBalance = balanceOf(recipient);\r\n                require(recipientBalance + amount <= maxWalletBalance, \"New balance would exceed the maxWalletBalance\");\r\n            }\r\n            \r\n         // indicates whether or not fee should be deducted from the transfer\r\n        bool _isTakeFee = takeFeeEnabled;\r\n        if ( isInPresale ){ _isTakeFee = false; }\r\n        \r\n         // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) { \r\n            _isTakeFee = false; \r\n        }\r\n        \r\n        _beforeTokenTransfer(recipient);\r\n        _transferTokens(sender, recipient, amount, _isTakeFee);\r\n        \r\n    }\r\n    \r\n    function _beforeTokenTransfer(address recipient) private {\r\n            \r\n        if ( !isInPresale ){\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            // swap\r\n            bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n            \r\n            if (!swapping && canSwap && swapEnabled && recipient == pair) {\r\n                swapping = true;\r\n                \r\n                swapBack();\r\n                \r\n                swapping = false;\r\n            }\r\n            \r\n        }\r\n    }\r\n    \r\n    function swapBack() internal {\r\n        uint256 splitLiquidityPortion = lpPortionOfSwap.div(2);\r\n        uint256 amountToLiquify = balanceOf(address(this)).mul(splitLiquidityPortion).div(FEES_DIVISOR);\r\n        uint256 amountToSwap = balanceOf(address(this)).sub(amountToLiquify);\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n        \r\n        swapTokensForETH(amountToSwap);\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        \r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingPortionOfSwap).div(FEES_DIVISOR);\r\n        uint256 amountBNBDev = amountBNB.mul(devPortionOfSwap).div(FEES_DIVISOR);\r\n        uint256 amountBNBTeam = amountBNB.mul(teamPortionOfSwap).div(FEES_DIVISOR);\r\n        uint256 amountBNBLiquidity = amountBNB.mul(splitLiquidityPortion).div(FEES_DIVISOR);\r\n        \r\n          //Send to addresses\r\n        transferToAddress(payable(marketingWallet), amountBNBMarketing);\r\n        transferToAddress(payable(devWallet), amountBNBDev);\r\n        transferToAddress(payable(teamWallet), amountBNBTeam);\r\n        \r\n        // add liquidity\r\n        _addLiquidity(amountToLiquify, amountBNBLiquidity);\r\n    }\r\n    \r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity);\r\n    }\r\n    \r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n    \r\n    function transferToAddress(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n    \r\n    function TransferETH(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \"Cannot withdraw the ETH balance to the zero address\");\r\n        recipient.transfer(amount);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDevWallet\",\"type\":\"address\"}],\"name\":\"DevWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTeamWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTeamWallet\",\"type\":\"address\"}],\"name\":\"TeamWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdatePancakeswapRouter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPortionOfSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInPresale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPortionOfSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPortionOfSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareForPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rfiFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setFeesDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamPortionOfSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toggleStatus\",\"type\":\"bool\"}],\"name\":\"toggleAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingPortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devPortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpPortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamPortion\",\"type\":\"uint256\"}],\"name\":\"updatePortionsOfSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateRfiFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swaptokens\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokensAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamWallet\",\"type\":\"address\"}],\"name\":\"updateTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"tradingStatus\",\"type\":\"bool\"}],\"name\":\"updateTradingIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txMax\",\"type\":\"uint256\"}],\"name\":\"updateTransactionMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_walletMax\",\"type\":\"uint256\"}],\"name\":\"updateWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"whitelistDxSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WAGMI", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://03388568c43c1fba7932a1ed9b1d2a106e5e498bfb8c42527ce55f77d60dc2ad"}