{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/YieldWolf.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport './interfaces/IYieldWolfStrategy.sol';\\nimport './interfaces/IYieldWolfCondition.sol';\\nimport './interfaces/IYieldWolfAction.sol';\\n\\n/**\\n * @title YieldWolf Staking Contract\\n * @notice handles deposits, withdraws, strategy execution and bounty rewards\\n * @author YieldWolf\\n */\\ncontract YieldWolf is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Rule {\\n        address condition; // address of the rule condition\\n        uint256[] conditionIntInputs; // numeric inputs sent to the rule condition\\n        address[] conditionAddrInputs; // address inputs sent to the rule condition\\n        address action; // address of the rule action\\n        uint256[] actionIntInputs; // numeric inputs sent to the rule action\\n        address[] actionAddrInputs; // address inputs sent to the rule action\\n    }\\n\\n    struct UserInfo {\\n        uint256 shares; // total of shares the user has on the pool\\n        Rule[] rules; // list of rules applied to the pool\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 stakeToken; // address of the token staked on the underlying farm\\n        IYieldWolfStrategy strategy; // address of the strategy for the pool\\n    }\\n\\n    PoolInfo[] public poolInfo; // info of each pool\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // info of each user that stakes tokens\\n    mapping(address => EnumerableSet.UintSet) private userStakedPools; // all pools in which a user has tokens staked\\n    mapping(address => bool) public strategyExists; // map used to ensure strategies cannot be added twice\\n\\n    uint256 constant DEPOSIT_FEE_CAP = 500;\\n    uint256 public depositFee = 0;\\n\\n    uint256 constant WITHDRAW_FEE_CAP = 500;\\n    uint256 public withdrawFee = 50;\\n\\n    uint256 constant PERFORMANCE_FEE_CAP = 500;\\n    uint256 public performanceFee = 100;\\n    uint256 public performanceFeeBountyPct = 1000;\\n\\n    uint256 constant RULE_EXECUTION_FEE_CAP = 500;\\n    uint256 public ruleFee = 20;\\n    uint256 public ruleFeeBountyPct = 5000;\\n\\n    uint256 constant MAX_USER_RULES_PER_POOL = 50;\\n\\n    address public feeAddress;\\n    address public feeAddressSetter;\\n\\n    bool private executeRuleLocked;\\n\\n    // addresses allowed to operate the strategy, including pausing and unpausing it in case of emergency\\n    mapping(address => bool) public operators;\\n\\n    event Add(IERC20 stakeToken, IYieldWolfStrategy strategy);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, address indexed to, uint256 indexed pid, uint256 amount);\\n    event AddRule(address indexed user, uint256 indexed pid);\\n    event RemoveRule(address indexed user, uint256 indexed pid, uint256 ruleIndex);\\n    event Earn(address indexed user, uint256 indexed pid, uint256 bountyReward);\\n    event ExecuteRule(uint256 indexed pid, address indexed user, uint256 ruleIndex);\\n    event SetOperator(address addr, bool isOperator);\\n    event SetDepositFee(uint256 depositFee);\\n    event SetWithdrawFee(uint256 withdrawFee);\\n    event SetPerformanceFee(uint256 performanceFee);\\n    event SetPerformanceFeeBountyPct(uint256 performanceFeeBountyPct);\\n    event SetRuleFee(uint256 ruleFee);\\n    event SetRuleFeeBountyPct(uint256 ruleFeeBountyPct);\\n    event SetStrategyRouter(IYieldWolfStrategy strategy, address router);\\n    event SetStrategySwapRouterEnabled(IYieldWolfStrategy strategy, bool enabled);\\n    event SetStrategySwapPath(IYieldWolfStrategy _strategy, address _token0, address _token1, address[] _path);\\n    event SetStrategyExtraEarnTokens(IYieldWolfStrategy _strategy, address[] _extraEarnTokens);\\n    event SetFeeAddress(address feeAddress);\\n    event SetFeeAddressSetter(address feeAddressSetter);\\n\\n    modifier onlyOperator() {\\n        require(operators[msg.sender], 'onlyOperator: NOT_ALLOWED');\\n        _;\\n    }\\n\\n    modifier onlyEndUser() {\\n        require(!Address.isContract(msg.sender) && tx.origin == msg.sender);\\n        _;\\n    }\\n\\n    constructor(address _feeAddress) {\\n        operators[msg.sender] = true;\\n        feeAddressSetter = msg.sender;\\n        feeAddress = _feeAddress;\\n    }\\n\\n    /**\\n     * @notice returns how many pools have been added\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n     * @notice returns in how many pools a user has tokens staked\\n     * @param _user address of the user\\n     */\\n    function userStakedPoolLength(address _user) external view returns (uint256) {\\n        return userStakedPools[_user].length();\\n    }\\n\\n    /**\\n     * @notice returns the pid of a pool in which the user has tokens staked\\n     * @dev helper for iterating over the array of user staked pools\\n     * @param _user address of the user\\n     * @param _index the index in the array of user staked pools\\n     */\\n    function userStakedPoolAt(address _user, uint256 _index) external view returns (uint256) {\\n        return userStakedPools[_user].at(_index);\\n    }\\n\\n    /**\\n     * @notice returns a rule by pid, user and index\\n     * @dev helper for iterating over all the rules\\n     * @param _pid the pool id\\n     * @param _user address of the user\\n     * @param _ruleIndex the index of the rule\\n     */\\n    function userPoolRule(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _ruleIndex\\n    ) external view returns (Rule memory rule) {\\n        rule = userInfo[_pid][_user].rules[_ruleIndex];\\n    }\\n\\n    /**\\n     * @notice returns the number of rule a user has for a given pool\\n     * @param _pid the pool id\\n     * @param _user address of the user\\n     */\\n    function userRuleLength(uint256 _pid, address _user) external view returns (uint256) {\\n        return userInfo[_pid][_user].rules.length;\\n    }\\n\\n    /**\\n     * @notice returns the amount of staked tokens by a user\\n     * @param _pid the pool id\\n     * @param _user address of the user\\n     */\\n    function stakedTokens(uint256 _pid, address _user) public view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        IYieldWolfStrategy strategy = pool.strategy;\\n\\n        uint256 sharesTotal = strategy.sharesTotal();\\n        return sharesTotal > 0 ? (user.shares * strategy.totalStakeTokens()) / sharesTotal : 0;\\n    }\\n\\n    /**\\n     * @notice adds a new pool with a given strategy\\n     * @dev can only be called by an operator\\n     * @param _strategy address of the strategy\\n     */\\n    function add(IYieldWolfStrategy _strategy) public onlyOperator {\\n        require(!strategyExists[address(_strategy)], 'add: STRATEGY_ALREADY_EXISTS');\\n        IERC20 stakeToken = IERC20(_strategy.stakeToken());\\n        poolInfo.push(PoolInfo({stakeToken: stakeToken, strategy: _strategy}));\\n        strategyExists[address(_strategy)] = true;\\n        emit Add(stakeToken, _strategy);\\n    }\\n\\n    /**\\n     * @notice adds multiple new pools\\n     * @dev helper to add many pools at once\\n     * @param _strategies array of strategy addresses\\n     */\\n    function addMany(IYieldWolfStrategy[] calldata _strategies) external onlyOperator {\\n        for (uint256 i; i < _strategies.length; i++) {\\n            add(_strategies[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice transfers tokens from the user and stakes them in the underlying farm\\n     * @dev tokens are transferred from msg.sender directly to the strategy\\n     * @param _pid the pool id\\n     * @param _depositAmount amount of tokens to transfer from msg.sender\\n     */\\n    function deposit(uint256 _pid, uint256 _depositAmount) external {\\n        _deposit(_pid, _depositAmount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice deposits stake tokens on behalf of another user\\n     * @param _pid the pool id\\n     * @param _depositAmount amount of tokens to transfer from msg.sender\\n     * @param _to address of the beneficiary\\n     */\\n    function depositTo(\\n        uint256 _pid,\\n        uint256 _depositAmount,\\n        address _to\\n    ) external {\\n        _deposit(_pid, _depositAmount, _to);\\n    }\\n\\n    /**\\n     * @notice unstakes tokens from the underlying farm and transfers them to the user\\n     * @dev tokens are transferred directly from the strategy to the user\\n     * @param _pid the pool id\\n     * @param _withdrawAmount maximum amount of tokens to transfer to msg.sender\\n     */\\n    function withdraw(uint256 _pid, uint256 _withdrawAmount) external {\\n        _withdrawFrom(msg.sender, msg.sender, _pid, _withdrawAmount, address(0), 0, false);\\n    }\\n\\n    /**\\n     * @notice withdraws all the token from msg.sender without harvesting first\\n     * @dev only for emergencies\\n     * @param _pid the pool id\\n     */\\n    function emergencyWithdraw(uint256 _pid) external {\\n        _withdrawFrom(msg.sender, msg.sender, _pid, type(uint256).max, address(0), 0, true);\\n    }\\n\\n    /**\\n     * @notice adds a new rule\\n     * @dev each user can have multiple rules for each pool\\n     * @param _pid the pool id\\n     * @param _condition address of the condition contract\\n     * @param _conditionIntInputs array of integer inputs to be sent to the condition\\n     * @param _conditionAddrInputs array of address inputs to be sent to the condition\\n     * @param _action address of the action contract\\n     * @param _actionIntInputs array of integer inputs to be sent to the action\\n     * @param _actionAddrInputs array of address inputs to be sent to the action\\n     */\\n    function addRule(\\n        uint256 _pid,\\n        address _condition,\\n        uint256[] calldata _conditionIntInputs,\\n        address[] calldata _conditionAddrInputs,\\n        address _action,\\n        uint256[] calldata _actionIntInputs,\\n        address[] calldata _actionAddrInputs\\n    ) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.rules.length <= MAX_USER_RULES_PER_POOL, 'addRule: CAP_EXCEEDED');\\n        require(IYieldWolfCondition(_condition).isCondition(), 'addRule: BAD_CONDITION');\\n        require(IYieldWolfAction(_action).isAction(), 'addRule: BAD_ACTION');\\n\\n        Rule memory rule;\\n        rule.condition = _condition;\\n        rule.conditionIntInputs = _conditionIntInputs;\\n        rule.conditionAddrInputs = _conditionAddrInputs;\\n        rule.action = _action;\\n        rule.actionIntInputs = _actionIntInputs;\\n        rule.actionAddrInputs = _actionAddrInputs;\\n        user.rules.push(rule);\\n        emit AddRule(msg.sender, _pid);\\n    }\\n\\n    /**\\n     * @notice removes a given rule\\n     * @param _pid the pool id\\n     * @param _ruleIndex the index of the rule in the user info for the given pool\\n     */\\n    function removeRule(uint256 _pid, uint256 _ruleIndex) external {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(_ruleIndex < user.rules.length, 'removeRule: BAD_INDEX');\\n        user.rules[_ruleIndex] = user.rules[user.rules.length - 1];\\n        user.rules.pop();\\n        emit RemoveRule(msg.sender, _pid, _ruleIndex);\\n    }\\n\\n    /**\\n     * @notice runs the strategy and pays the bounty reward\\n     * @param _pid the pool id\\n     */\\n    function earn(uint256 _pid) external nonReentrant returns (uint256) {\\n        return _earn(_pid);\\n    }\\n\\n    /**\\n     * @notice runs multiple strategies and pays multiple rewards\\n     * @param _pids array of pool ids\\n     */\\n    function earnMany(uint256[] calldata _pids) external nonReentrant {\\n        for (uint256 i; i < _pids.length; i++) {\\n            _earn(_pids[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice checks wheter a rule passes its condition\\n     * @param _pid the pool id\\n     * @param _user address of the user\\n     * @param _ruleIndex the index of the rule\\n     */\\n    function checkRule(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _ruleIndex\\n    ) external view returns (bool) {\\n        Rule memory rule = userInfo[_pid][_user].rules[_ruleIndex];\\n        return\\n            IYieldWolfCondition(rule.condition).check(\\n                address(poolInfo[_pid].strategy),\\n                _user,\\n                _pid,\\n                rule.conditionIntInputs,\\n                rule.conditionAddrInputs\\n            );\\n    }\\n\\n    /**\\n     * @notice executes the rule action if the condition passes and sends the bounty reward to msg.sender\\n     * @param _pid the pool id\\n     * @param _user address of the user\\n     * @param _ruleIndex the index of the rule\\n     */\\n    function executeRule(\\n        uint256 _pid,\\n        address _user,\\n        uint256 _ruleIndex\\n    ) external onlyEndUser {\\n        require(!executeRuleLocked, 'executeRule: LOCKED');\\n        executeRuleLocked = true;\\n        UserInfo memory user = userInfo[_pid][_user];\\n        Rule memory rule = user.rules[_ruleIndex];\\n        IYieldWolfStrategy strategy = poolInfo[_pid].strategy;\\n\\n        require(\\n            IYieldWolfCondition(rule.condition).check(\\n                address(strategy),\\n                _user,\\n                _pid,\\n                rule.conditionIntInputs,\\n                rule.conditionAddrInputs\\n            ),\\n            'executeAction: CONDITION_NOT_MET'\\n        );\\n\\n        _tryEarn(strategy);\\n        IYieldWolfAction action = IYieldWolfAction(rule.action);\\n        (uint256 withdrawAmount, address withdrawTo) = action.execute(\\n            address(strategy),\\n            _user,\\n            _pid,\\n            rule.actionIntInputs,\\n            rule.actionAddrInputs\\n        );\\n\\n        uint256 staked = stakedTokens(_pid, _user);\\n        if (withdrawAmount > staked) {\\n            withdrawAmount = staked;\\n        }\\n\\n        if (withdrawAmount > 0) {\\n            uint256 ruleFeeAmount = (withdrawAmount * ruleFee) / 10000;\\n            _withdrawFrom(_user, withdrawTo, _pid, withdrawAmount, msg.sender, ruleFeeAmount, true);\\n        }\\n        action.callback(address(strategy), _user, _pid, rule.actionIntInputs, rule.actionAddrInputs);\\n        executeRuleLocked = false;\\n        emit ExecuteRule(_pid, _user, _ruleIndex);\\n    }\\n\\n    /**\\n     * @notice adds or removes an operator\\n     * @dev can only be called by the owner\\n     * @param _addr address of the operator\\n     * @param _isOperator whether the given address will be set as an operator\\n     */\\n    function setOperator(address _addr, bool _isOperator) external onlyOwner {\\n        operators[_addr] = _isOperator;\\n        emit SetOperator(_addr, _isOperator);\\n    }\\n\\n    /**\\n     * @notice updates the deposit fee\\n     * @dev can only be called by the owner\\n     * @param _depositFee new deposit fee in basis points\\n     */\\n    function setDepositFee(uint256 _depositFee) external onlyOwner {\\n        require(_depositFee <= DEPOSIT_FEE_CAP, 'setDepositFee: CAP_EXCEEDED');\\n        depositFee = _depositFee;\\n        emit SetDepositFee(_depositFee);\\n    }\\n\\n    /**\\n     * @notice updates the withdraw fee\\n     * @dev can only be called by the owner\\n     * @param _withdrawFee new withdraw fee in basis points\\n     */\\n    function setWithdrawFee(uint256 _withdrawFee) external onlyOwner {\\n        require(_withdrawFee <= WITHDRAW_FEE_CAP, 'setWithdrawFee: CAP_EXCEEDED');\\n        withdrawFee = _withdrawFee;\\n        emit SetWithdrawFee(_withdrawFee);\\n    }\\n\\n    /**\\n     * @notice updates the performance fee\\n     * @dev can only be called by the owner\\n     * @param _performanceFee new performance fee fee in basis points\\n     */\\n    function setPerformanceFee(uint256 _performanceFee) external onlyOwner {\\n        require(_performanceFee <= PERFORMANCE_FEE_CAP, 'setPerformanceFee: CAP_EXCEEDED');\\n        performanceFee = _performanceFee;\\n        emit SetPerformanceFee(_performanceFee);\\n    }\\n\\n    /**\\n     * @notice updates the percentage of the performance fee sent to the bounty hunter\\n     * @dev can only be called by the owner\\n     * @param _performanceFeeBountyPct percentage of the performance fee for the bounty hunter in basis points\\n     */\\n    function setPerformanceFeeBountyPct(uint256 _performanceFeeBountyPct) external onlyOwner {\\n        require(_performanceFeeBountyPct <= 10000, 'setPerformanceFeeBountyPct: CAP_EXCEEDED');\\n        performanceFeeBountyPct = _performanceFeeBountyPct;\\n        emit SetPerformanceFeeBountyPct(_performanceFeeBountyPct);\\n    }\\n\\n    /**\\n     * @notice updates the rule execution fee\\n     * @dev can only be called by the owner\\n     * @param _ruleFee new rule fee fee in basis points\\n     */\\n    function setRuleFee(uint256 _ruleFee) external onlyOwner {\\n        require(_ruleFee <= RULE_EXECUTION_FEE_CAP, 'setRuleFee: CAP_EXCEEDED');\\n        ruleFee = _ruleFee;\\n        emit SetRuleFee(_ruleFee);\\n    }\\n\\n    /**\\n     * @notice updates the percentage of the rule execution fee sent to the bounty hunter\\n     * @dev can only be called by the owner\\n     * @param _ruleFeeBountyPct percentage of the rule execution fee for the bounty hunter in basis points\\n     */\\n    function setRuleFeeBountyPct(uint256 _ruleFeeBountyPct) external onlyOwner {\\n        require(_ruleFeeBountyPct <= 10000, 'setRuleFeeBountyPct: CAP_EXCEEDED');\\n        ruleFeeBountyPct = _ruleFeeBountyPct;\\n        emit SetRuleFeeBountyPct(_ruleFeeBountyPct);\\n    }\\n\\n    /**\\n     * @notice updates the swap router used by a given strategy\\n     * @dev can only be called by the owner\\n     * @param _strategy address of the strategy\\n     * @param _enabled whether to enable or disable the swap router\\n     */\\n    function setStrategySwapRouterEnabled(IYieldWolfStrategy _strategy, bool _enabled) external onlyOwner {\\n        _strategy.setSwapRouterEnabled(_enabled);\\n        emit SetStrategySwapRouterEnabled(_strategy, _enabled);\\n    }\\n\\n    /**\\n     * @notice updates the swap path for a given pair\\n     * @dev can only be called by the owner\\n     * @param _strategy address of the strategy\\n     * @param _token0 address of token swap from\\n     * @param _token1 address of token swap to\\n     * @param _path swap path from token0 to token1\\n     */\\n    function setStrategySwapPath(\\n        IYieldWolfStrategy _strategy,\\n        address _token0,\\n        address _token1,\\n        address[] calldata _path\\n    ) external onlyOwner {\\n        require(_path.length != 1, 'setStrategySwapPath: INVALID_PATH');\\n        if (_path.length > 0) {\\n            // the first element must be token0 and the last one token1\\n            require(_path[0] == _token0 && _path[_path.length - 1] == _token1, 'setStrategySwapPath: INVALID_PATH');\\n        }\\n        _strategy.setSwapPath(_token0, _token1, _path);\\n        emit SetStrategySwapPath(_strategy, _token0, _token1, _path);\\n    }\\n\\n    /**\\n     * @notice updates the swap path for a given pair\\n     * @dev can only be called by the owner\\n     * @param _strategy address of the strategy\\n     * @param _extraEarnTokens list of extra earn tokens for farms rewarding more than one token\\n     */\\n    function setStrategyExtraEarnTokens(IYieldWolfStrategy _strategy, address[] calldata _extraEarnTokens)\\n        external\\n        onlyOwner\\n    {\\n        require(_extraEarnTokens.length <= 5, 'setStrategyExtraEarnTokens: CAP_EXCEEDED');\\n\\n        // tokens sanity check\\n        for (uint256 i; i < _extraEarnTokens.length; i++) {\\n            IERC20(_extraEarnTokens[i]).balanceOf(address(this));\\n        }\\n\\n        _strategy.setExtraEarnTokens(_extraEarnTokens);\\n        emit SetStrategyExtraEarnTokens(_strategy, _extraEarnTokens);\\n    }\\n\\n    /**\\n     * @notice updates the fee address\\n     * @dev can only be called by the fee address setter\\n     * @param _feeAddress new fee address\\n     */\\n    function setFeeAddress(address _feeAddress) external {\\n        require(msg.sender == feeAddressSetter && _feeAddress != address(0), 'setFeeAddress: NOT_ALLOWED');\\n        feeAddress = _feeAddress;\\n        emit SetFeeAddress(_feeAddress);\\n    }\\n\\n    /**\\n     * @notice updates the fee address setter\\n     * @dev can only be called by the previous fee address setter\\n     * @param _feeAddressSetter new fee address setter\\n     */\\n    function setFeeAddressSetter(address _feeAddressSetter) external {\\n        require(msg.sender == feeAddressSetter && _feeAddressSetter != address(0), 'setFeeAddressSetter: NOT_ALLOWED');\\n        feeAddressSetter = _feeAddressSetter;\\n        emit SetFeeAddressSetter(_feeAddressSetter);\\n    }\\n\\n    function _deposit(\\n        uint256 _pid,\\n        uint256 _depositAmount,\\n        address _to\\n    ) internal nonReentrant {\\n        require(_depositAmount > 0, 'deposit: MUST_BE_GREATER_THAN_ZERO');\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_to];\\n\\n        if (pool.strategy.sharesTotal() > 0) {\\n            _tryEarn(pool.strategy);\\n        }\\n\\n        // calculate deposit amount from balance before and after the transfer in order to support tokens with tax\\n        uint256 balanceBefore = pool.stakeToken.balanceOf(address(pool.strategy));\\n        pool.stakeToken.safeTransferFrom(address(msg.sender), address(pool.strategy), _depositAmount);\\n        _depositAmount = pool.stakeToken.balanceOf(address(pool.strategy)) - balanceBefore;\\n\\n        uint256 sharesAdded = pool.strategy.deposit(_depositAmount);\\n        user.shares = user.shares + sharesAdded;\\n        userStakedPools[_to].add(_pid);\\n\\n        emit Deposit(_to, _pid, _depositAmount);\\n    }\\n\\n    function _withdrawFrom(\\n        address _user,\\n        address _to,\\n        uint256 _pid,\\n        uint256 _withdrawAmount,\\n        address _bountyHunter,\\n        uint256 _ruleFeeAmount,\\n        bool _skipEarn\\n    ) internal nonReentrant {\\n        require(_withdrawAmount > 0, '_withdrawFrom: MUST_BE_GREATER_THAN_ZERO');\\n        UserInfo storage user = userInfo[_pid][_user];\\n        IYieldWolfStrategy strategy = poolInfo[_pid].strategy;\\n\\n        if (!_skipEarn) {\\n            _tryEarn(strategy);\\n        }\\n\\n        uint256 sharesTotal = strategy.sharesTotal();\\n\\n        require(user.shares > 0 && sharesTotal > 0, 'withdraw: NO_SHARES');\\n\\n        uint256 maxAmount = (user.shares * strategy.totalStakeTokens()) / sharesTotal;\\n        if (_withdrawAmount > maxAmount) {\\n            _withdrawAmount = maxAmount;\\n        }\\n        uint256 sharesRemoved = strategy.withdraw(_withdrawAmount, _to, _bountyHunter, _ruleFeeAmount);\\n        user.shares = user.shares > sharesRemoved ? user.shares - sharesRemoved : 0;\\n        if (user.shares == 0) {\\n            userStakedPools[_user].remove(_pid);\\n        }\\n\\n        emit Withdraw(_user, _to, _pid, _withdrawAmount);\\n    }\\n\\n    function _earn(uint256 _pid) internal returns (uint256 bountyRewarded) {\\n        bountyRewarded = poolInfo[_pid].strategy.earn(msg.sender);\\n        emit Earn(msg.sender, _pid, bountyRewarded);\\n    }\\n\\n    function _tryEarn(IYieldWolfStrategy _strategy) internal {\\n        try _strategy.earn(address(0)) {} catch {}\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYieldWolfStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IYieldWolfStrategy {\\n    function stakeToken() external view returns (address);\\n\\n    function sharesTotal() external view returns (uint256);\\n\\n    function earn(address _bountyHunter) external returns (uint256);\\n\\n    function deposit(uint256 _depositAmount) external returns (uint256);\\n\\n    function withdraw(\\n        uint256 _withdrawAmount,\\n        address _withdrawTo,\\n        address _bountyHunter,\\n        uint256 _ruleFeeAmount\\n    ) external returns (uint256);\\n\\n    function router() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function totalStakeTokens() external view returns (uint256);\\n\\n    function setSwapRouterEnabled(bool _enabled) external;\\n\\n    function setSwapPath(\\n        address _token0,\\n        address _token1,\\n        address[] calldata _path\\n    ) external;\\n\\n    function setExtraEarnTokens(address[] calldata _extraEarnTokens) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYieldWolfCondition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IYieldWolfCondition {\\n    function isCondition() external view returns (bool);\\n\\n    function check(\\n        address strategy,\\n        address user,\\n        uint256 pid,\\n        uint256[] memory intInputs,\\n        address[] memory addrInputs\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IYieldWolfAction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IYieldWolfAction {\\n    function isAction() external view returns (bool);\\n\\n    function execute(\\n        address strategy,\\n        address user,\\n        uint256 pid,\\n        uint256[] memory intInputs,\\n        address[] memory addrInputs\\n    ) external view returns (uint256, address);\\n\\n    function callback(\\n        address strategy,\\n        address user,\\n        uint256 pid,\\n        uint256[] memory intInputs,\\n        address[] memory addrInputs\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"AddRule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bountyReward\",\"type\":\"uint256\"}],\"name\":\"Earn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ruleIndex\",\"type\":\"uint256\"}],\"name\":\"ExecuteRule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ruleIndex\",\"type\":\"uint256\"}],\"name\":\"RemoveRule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"}],\"name\":\"SetDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAddressSetter\",\"type\":\"address\"}],\"name\":\"SetFeeAddressSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeBountyPct\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeBountyPct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ruleFee\",\"type\":\"uint256\"}],\"name\":\"SetRuleFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ruleFeeBountyPct\",\"type\":\"uint256\"}],\"name\":\"SetRuleFeeBountyPct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_extraEarnTokens\",\"type\":\"address[]\"}],\"name\":\"SetStrategyExtraEarnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"SetStrategyRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"SetStrategySwapPath\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetStrategySwapRouterEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IYieldWolfStrategy[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"addMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_condition\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_conditionIntInputs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_conditionAddrInputs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_actionIntInputs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_actionAddrInputs\",\"type\":\"address[]\"}],\"name\":\"addRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ruleIndex\",\"type\":\"uint256\"}],\"name\":\"checkRule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"earnMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ruleIndex\",\"type\":\"uint256\"}],\"name\":\"executeRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddressSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeBountyPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruleIndex\",\"type\":\"uint256\"}],\"name\":\"removeRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ruleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ruleFeeBountyPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddressSetter\",\"type\":\"address\"}],\"name\":\"setFeeAddressSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isOperator\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeBountyPct\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeBountyPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ruleFee\",\"type\":\"uint256\"}],\"name\":\"setRuleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ruleFeeBountyPct\",\"type\":\"uint256\"}],\"name\":\"setRuleFeeBountyPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_extraEarnTokens\",\"type\":\"address[]\"}],\"name\":\"setStrategyExtraEarnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"setStrategySwapPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IYieldWolfStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setStrategySwapRouterEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ruleIndex\",\"type\":\"uint256\"}],\"name\":\"userPoolRule\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"conditionIntInputs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"conditionAddrInputs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"action\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"actionIntInputs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"actionAddrInputs\",\"type\":\"address[]\"}],\"internalType\":\"struct YieldWolf.Rule\",\"name\":\"rule\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userRuleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"userStakedPoolAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userStakedPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YieldWolf", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000075e06c42008d219c8fa3163bc89c807b225b7ab0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}