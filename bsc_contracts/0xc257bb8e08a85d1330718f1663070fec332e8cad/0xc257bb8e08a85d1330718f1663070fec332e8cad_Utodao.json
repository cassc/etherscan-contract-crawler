{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-07\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor1 {\r\n    address public _owner;\r\n    constructor () {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\n\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct UserInfo {\r\n        uint256 buyAmount;\r\n        uint256 lastRewardTime;\r\n    }\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address public _buyBackAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    mapping(address => UserInfo) private _userInfo;\r\n    mapping(address => bool) public _excludeRewards;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public immutable _swapRouter;\r\n    address private immutable _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public immutable _tokenDistributor;\r\n\r\n    uint256 public _buyLPDividendFee = 100;\r\n    uint256 public _buyDestroyFee = 0;\r\n    uint256 public _buyLPFee = 100;\r\n    uint256 public _buyFundFee = 100;\r\n\r\n    uint256 public _sellLPDividendFee = 100;\r\n    uint256 public _sellDestroyFee = 0;\r\n    uint256 public _sellLPFee = 100;\r\n    uint256 public _sellFundFee = 100;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startAddLPBlock;\r\n    address public immutable _mainPair;\r\n\r\n    mapping(address => address) public _inviter;\r\n    mapping(address => address[]) public _binders;\r\n    mapping(address => mapping(address => bool)) public _maybeInvitor;\r\n\r\n    uint256 public _startTradeTime;\r\n    uint256 public _removeLPFeeDuration = 30 days;\r\n    uint256 public _removeLPFee = 10000;\r\n     uint256 public _removeLPFeeDuration1 = 60 days;\r\n    uint256 public _removeLPFee1 = 7000;\r\n     uint256 public _removeLPFeeDuration2 = 90 days;\r\n    uint256 public _removeLPFee2 = 5000;\r\n     uint256 public _removeLPFeeDuration3 = 120 days;\r\n    uint256 public _removeLPFee3 = 3000;\r\n\r\n    mapping(address => bool) public _preLPList;\r\n\r\n    uint256 public _startRewardTime = 1680105600;\r\n    uint256 public _rewardRate = 41624;\r\n    uint256 public constant _rewardFactor = 100000000;\r\n    uint256 public _rewardDuration = 4 hours;\r\n    uint256 public _rewardCondition;\r\n\r\n    uint256 public _startLPRewardTime = 1679241600;\r\n    TokenDistributor1 public immutable _dogeLPRewardDistributor;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress, address buyBackAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        _buyBackAddress = buyBackAddress;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n\r\n        IERC20(_usdt).approve(address(swapRouter), MAX);\r\n       \r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n      \r\n        address mainPair = swapFactory.createPair(address(this), _usdt);\r\n        _swapPairList[mainPair] = true;\r\n        _mainPair = mainPair;\r\n\r\n        uint256 tokenDecimals = 10 ** Decimals;\r\n        uint256 total = Supply * tokenDecimals;\r\n        _tTotal = total;\r\n\r\n        uint256 receiveTotal = total * 3 / 100;\r\n        _balances[ReceiveAddress] = receiveTotal;\r\n        emit Transfer(address(0), ReceiveAddress, receiveTotal);\r\n        fundAddress = FundAddress;\r\n\r\n        receiveTotal = total * 32 / 100;\r\n        _tokenDistributor = new  TokenDistributor(_usdt);\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        _balances[tokenDistributor] = receiveTotal;\r\n        emit Transfer(address(0), tokenDistributor, receiveTotal);\r\n\r\n        receiveTotal = total * 65 / 100;\r\n        _dogeLPRewardDistributor = new  TokenDistributor1();\r\n        address dogeLPRewardDistributor = address(_dogeLPRewardDistributor);\r\n\r\n        _balances[dogeLPRewardDistributor] = receiveTotal;\r\n        emit Transfer(address(0), dogeLPRewardDistributor, receiveTotal);\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        _feeWhiteList[tokenDistributor] = true;\r\n        _feeWhiteList[dogeLPRewardDistributor] = true;\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _excludeRewards[address(0)] = true;\r\n        _excludeRewards[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        _excludeRewards[address(this)] = true;\r\n        _excludeRewards[tokenDistributor] = true;\r\n        _excludeRewards[dogeLPRewardDistributor] = true;\r\n        _excludeRewards[mainPair] = true;\r\n        _excludeRewards[address(swapRouter)] = true;\r\n\r\n        lpRewardCondition = 300 * tokenDecimals;\r\n        _rewardCondition = 1000000 * tokenDecimals;\r\n\r\n        _addLpProvider(FundAddress);\r\n\r\n        _dogeLPRewardCondition = 25 * tokenDecimals;\r\n        _dogeLPInviteRewardCondition = 25 * tokenDecimals;\r\n        lpHoldCondition = 10 ** IERC20(_mainPair).decimals() / 1000000;\r\n        _dogeLPInviteRewardHoldThisCondition = 1 * tokenDecimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        (uint256 balance,) = _balanceOf(account);\r\n        return balance;\r\n    }\r\n\r\n    function _balanceOf(address account) public view returns (uint256, uint256) {\r\n        uint256 balance = _balances[account];\r\n        if (_excludeRewards[account]) {\r\n            return (balance, 0);\r\n        }\r\n\r\n        uint256 startTime = _startRewardTime;\r\n        if (0 == startTime) {\r\n            return (balance, 0);\r\n        }\r\n\r\n        uint256 rewardRate = _rewardRate;\r\n        if (0 == rewardRate) {\r\n            return (balance, 0);\r\n        }\r\n\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 buyAmount = userInfo.buyAmount;\r\n        if (buyAmount < _rewardCondition) {\r\n            return (balance, 0);\r\n        }\r\n\r\n        uint256 lastRewardTime = userInfo.lastRewardTime;\r\n        if (lastRewardTime == 0) {\r\n            lastRewardTime = startTime;\r\n        }\r\n\r\n        if (lastRewardTime < startTime) {\r\n            lastRewardTime = startTime;\r\n        }\r\n\r\n        uint256 blockTime = block.timestamp;\r\n        if (blockTime <= lastRewardTime) {\r\n            return (balance, 0);\r\n        }\r\n\r\n        uint256 rewardDuration = _rewardDuration;\r\n        uint256 times = (blockTime - lastRewardTime) / rewardDuration;\r\n        uint256 reward;\r\n        uint256 totalReward;\r\n        for (uint256 i; i < times;) {\r\n            reward = buyAmount * rewardRate / _rewardFactor;\r\n            totalReward += reward;\r\n            buyAmount += reward;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        uint256 rewardBalance = _balances[address(_tokenDistributor)];\r\n        if (totalReward > rewardBalance) {\r\n            totalReward = rewardBalance;\r\n        }\r\n        return (balance + totalReward, lastRewardTime + times * rewardDuration);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    mapping(address => uint256) private _userLPAmount;\r\n    address public _lastMaybeAddLPAddress;\r\n    uint256 public _lastMaybeAddLPAmount;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        address mainPair = _mainPair;\r\n        address lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n        if (lastMaybeAddLPAddress != address(0)) {\r\n            _lastMaybeAddLPAddress = address(0);\r\n            uint256 lpBalance = IERC20(mainPair).balanceOf(lastMaybeAddLPAddress);\r\n            if (lpBalance > 0) {\r\n                uint256 lpAmount = _userLPAmount[lastMaybeAddLPAddress];\r\n                if (lpBalance > lpAmount) {\r\n                    uint256 debtAmount = lpBalance - lpAmount;\r\n                    uint256 maxDebtAmount = _lastMaybeAddLPAmount * IERC20(mainPair).totalSupply() / _balances[mainPair];\r\n                    if (debtAmount > maxDebtAmount) {\r\n                        excludeLpProvider[lastMaybeAddLPAddress] = true;\r\n                    } else {\r\n                        _addLpProvider(lastMaybeAddLPAddress);\r\n                        _userLPAmount[lastMaybeAddLPAddress] = lpBalance;\r\n                        uint256 blockTime = block.timestamp;\r\n                        if (0 == _lastLPRewardTimes[lastMaybeAddLPAddress]) {\r\n                            _lastLPRewardTimes[lastMaybeAddLPAddress] = blockTime;\r\n                        }\r\n                        if (0 == _lastDogeLPRewardTimes[lastMaybeAddLPAddress]) {\r\n                            _lastDogeLPRewardTimes[lastMaybeAddLPAddress] = blockTime;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _calReward(from, to, amount);\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount;\r\n            uint256 remainAmount = 10 ** (_decimals - 4);\r\n            uint256 balance = _balances[from];\r\n            if (balance > remainAmount) {\r\n                maxSellAmount = balance - remainAmount;\r\n            }\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        bool isAddLP;\r\n        bool takeFee;\r\n        bool isRemoveLP;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startAddLPBlock) {\r\n                if (_feeWhiteList[from] && to == _mainPair && IERC20(to).totalSupply() == 0) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                takeFee = true;\r\n                if (to == _mainPair) {\r\n                    isAddLP = _isAddLiquidity(amount);\r\n                    if (isAddLP) {\r\n                        takeFee = false;\r\n                    }\r\n                } else if (from == _mainPair) {\r\n                    isRemoveLP = _isRemoveLiquidity();\r\n                }\r\n\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && isAddLP, \"!T\");\r\n                    _preLPList[from] = true;\r\n                }\r\n\r\n                if (block.number < startTradeBlock + 3) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            if (address(0) == _inviter[to] && amount > 0 && from != to) {\r\n                _maybeInvitor[to][from] = true;\r\n            }\r\n            if (address(0) == _inviter[from] && amount > 0 && from != to) {\r\n                if (_maybeInvitor[from][to] && _binders[from].length == 0) {\r\n                    _bindInvitor(from, to);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (from == address(_swapRouter)) {\r\n            isRemoveLP = true;\r\n        }\r\n\r\n        if (isRemoveLP) {\r\n            if (!_feeWhiteList[to]) {\r\n                takeFee = true;\r\n                uint256 liquidity = (amount * ISwapPair(_mainPair).totalSupply() + 1) / (balanceOf(_mainPair) - 1);\r\n                if (from != address(_swapRouter)) {\r\n                    liquidity = (amount * ISwapPair(_mainPair).totalSupply() + 1) / (balanceOf(_mainPair) - amount - 1);\r\n                }\r\n                require(_userLPAmount[to] >= liquidity, \">uLP\");\r\n                _userLPAmount[to] -= liquidity;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, isRemoveLP);\r\n\r\n        UserInfo storage userInfo = _userInfo[to];\r\n        userInfo.buyAmount = _balances[to];\r\n\r\n        if (from != address(this)) {\r\n            if (to == mainPair) {\r\n                _lastMaybeAddLPAddress = from;\r\n                _lastMaybeAddLPAmount = amount;\r\n            }\r\n            if (!_feeWhiteList[from] && !isAddLP) {\r\n                uint256 rewardGas = _rewardGas;\r\n                processDogeLP(rewardGas);\r\n                if (_progressDogeLPBlock != block.number) {\r\n                    processThisLP(rewardGas);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _calReward(address from, address to, uint256 amount) private {\r\n        (uint256 fromBalance,uint256 fromTime) = _balanceOf(from);\r\n        require(fromBalance >= amount, \"BNE\");\r\n\r\n        address mainPair = _mainPair;\r\n        address sender = address(_tokenDistributor);\r\n        uint256 fromReward;\r\n        if (from != mainPair) {\r\n            uint256 fromBalanceBefore = _balances[from];\r\n            fromReward = fromBalance - fromBalanceBefore;\r\n            if (fromReward > 0) {\r\n                _tokenTransfer(sender, from, fromReward, false, false);\r\n                _balances[from] = fromBalance;\r\n            }\r\n            if (fromTime == 0 && _startRewardTime > 0) {\r\n                fromTime = block.timestamp;\r\n            }\r\n            _userInfo[from].lastRewardTime = fromTime;\r\n        }\r\n\r\n        uint256 toReward;\r\n        if (to != mainPair) {\r\n            (uint256 toBalance,uint256 toTime) = _balanceOf(to);\r\n            uint256 toBalanceBefore = _balances[to];\r\n            toReward = toBalance - toBalanceBefore;\r\n            if (toReward > 0) {\r\n                _tokenTransfer(sender, to, toReward, false, false);\r\n                _balances[to] = toBalance;\r\n            }\r\n            if (toTime == 0 && _startRewardTime > 0) {\r\n                toTime = block.timestamp;\r\n            }\r\n            _userInfo[to].lastRewardTime = toTime;\r\n        }\r\n\r\n        _distributeInviteReward(from, fromReward, sender);\r\n        _distributeInviteReward(to, toReward, sender);\r\n    }\r\n\r\n    function _bindInvitor(address account, address invitor) private {\r\n        if (invitor != address(0) && invitor != account && _inviter[account] == address(0)) {\r\n            uint256 size;\r\n            assembly {size := extcodesize(invitor)}\r\n            if (size > 0) {\r\n                return;\r\n            }\r\n            _inviter[account] = invitor;\r\n            _binders[invitor].push(account);\r\n        }\r\n    }\r\n\r\n    function getBinderLength(address account) external view returns (uint256){\r\n        return _binders[account].length;\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            isAdd = true;\r\n        }\r\n    }\r\n\r\n    \r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            fundAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isRemoveLP\r\n    ) private {\r\n        uint256 senderBalance = _balances[sender];\r\n        senderBalance -= tAmount;\r\n        _balances[sender] = senderBalance;\r\n        UserInfo storage userInfo = _userInfo[sender];\r\n        userInfo.buyAmount = senderBalance;\r\n\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 swapFeeAmount;\r\n            uint256 destroyFeeAmount;\r\n            if (isRemoveLP) {\r\n                if (_preLPList[recipient] && block.timestamp < _startTradeTime + _removeLPFeeDuration) {\r\n                    destroyFeeAmount = tAmount * _removeLPFee / 10000;\r\n                } else if(_preLPList[recipient] && block.timestamp < _startTradeTime + _removeLPFeeDuration1) {\r\n                    destroyFeeAmount = tAmount * _removeLPFee1 / 10000;\r\n                } else if(_preLPList[recipient] && block.timestamp < _startTradeTime + _removeLPFeeDuration2) {\r\n                    destroyFeeAmount = tAmount * _removeLPFee2 / 10000;\r\n                } else if(_preLPList[recipient] && block.timestamp < _startTradeTime + _removeLPFeeDuration3) {\r\n                    destroyFeeAmount = tAmount * _removeLPFee3 / 10000;\r\n                } else {\r\n                    swapFeeAmount = tAmount * (_buyLPDividendFee + _buyLPFee + _buyFundFee) / 10000;\r\n                    destroyFeeAmount = tAmount * _buyDestroyFee / 10000;\r\n                }\r\n            } else if (_swapPairList[sender]) {//Buy\r\n                swapFeeAmount = tAmount * (_buyLPDividendFee + _buyLPFee + _buyFundFee) / 10000;\r\n                destroyFeeAmount = tAmount * _buyDestroyFee / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                swapFeeAmount = tAmount * (_sellLPDividendFee + _sellLPFee + _sellFundFee) / 10000;\r\n                destroyFeeAmount = tAmount * _sellDestroyFee / 10000;\r\n            }\r\n\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount);\r\n            }\r\n\r\n            if (destroyFeeAmount > 0) {\r\n                feeAmount += destroyFeeAmount;\r\n                _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyFeeAmount);\r\n            }\r\n\r\n            if (isSell && !inSwap) {\r\n                uint256 contractTokenBalance = _balances[address(this)];\r\n                uint256 numToSell = swapFeeAmount * 230 / 100;\r\n                if (numToSell > contractTokenBalance) {\r\n                    numToSell = contractTokenBalance;\r\n                }\r\n                swapTokenForFund(numToSell);\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _distributeInviteReward(address current, uint256 reward, address sender) private {\r\n        if (0 == reward) {\r\n            return;\r\n        }\r\n        uint256 rewardBalance = _balances[sender];\r\n        if (0 == rewardBalance) {\r\n            return;\r\n        }\r\n        address invitor;\r\n        uint256 perAmount = reward / 100;\r\n        uint256 invitorAmount = perAmount * 20;\r\n        uint256 inviteRewardHoldThisCondition = _dogeLPInviteRewardHoldThisCondition;\r\n        uint256 fundAmount = reward;\r\n        for (uint256 i; i < 12;) {\r\n            invitor = _inviter[current];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n            if (i <= 1 && i < 11) {\r\n                invitorAmount = perAmount * 7;\r\n            } else if (11 == i) {\r\n                invitorAmount = perAmount * 10;\r\n            }\r\n            if (_balances[invitor] >= inviteRewardHoldThisCondition) {\r\n                if (invitorAmount > rewardBalance) {\r\n                    invitorAmount = rewardBalance;\r\n                }\r\n                _tokenTransfer(sender, invitor, invitorAmount, false, false);\r\n                rewardBalance -= invitorAmount;\r\n                fundAmount -= invitorAmount;\r\n                if (0 == rewardBalance) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            current = invitor;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        if (fundAmount > 100) {\r\n            if (fundAmount > rewardBalance) {\r\n                fundAmount = rewardBalance;\r\n            }\r\n            _tokenTransfer(sender, fundAddress, fundAmount, false, false);\r\n        }\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        uint256 lpDividendFee = _buyLPDividendFee + _sellLPDividendFee;\r\n        uint256 lpFee = _buyLPFee + _sellLPFee;\r\n        uint256 fundFee = _buyFundFee + _sellFundFee;\r\n        uint256 totalFee = lpDividendFee + lpFee + fundFee;\r\n        totalFee += totalFee;\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n       // address distributor = address(this);\r\n        uint256 balance = USDT.balanceOf(address(_tokenDistributor));\r\n\r\n        uint256 lpAmount = tokenAmount * lpFee / totalFee;\r\n        totalFee -= lpFee;\r\n\r\n       \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        balance = USDT.balanceOf(address(_tokenDistributor)) - balance;\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), balance);\r\n\r\n        uint256 fundBalance = balance * 2 * fundFee / totalFee;\r\n        if (fundBalance > 0) {\r\n            USDT.transfer(fundAddress, fundBalance);\r\n        }\r\n\r\n        uint256 lpBalance = balance * lpFee / totalFee;\r\n        if (lpBalance > 0 && lpAmount > 0) {\r\n            (,,uint256 liquidity) = _swapRouter.addLiquidity(\r\n                address(this), \r\n                _usdt, \r\n                lpAmount, \r\n                lpBalance, \r\n                0, \r\n                0, \r\n                _buyBackAddress, \r\n                block.timestamp\r\n            );\r\n            _userLPAmount[fundAddress] += liquidity;\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr, address buyBackAddress) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n        _addLpProvider(addr);\r\n\r\n        _buyBackAddress = buyBackAddress;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance(uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(fundAddress).transfer(amount);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n    mapping(address => bool) public excludeLpProvider;\r\n\r\n    function getLPProviderLength() public view returns (uint256){\r\n        return lpProviders.length;\r\n    }\r\n\r\n    function _addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentLPIndex;\r\n    uint256 public lpRewardCondition;\r\n    uint256 public progressLPBlock;\r\n    uint256 public progressLPBlockDebt = 1;\r\n    uint256 public lpHoldCondition = 1000;\r\n    uint256 public _rewardGas = 500000;\r\n    mapping(address => uint256) public _lastLPRewardTimes;\r\n    uint256 public _lpRewardTimeDebt = 8 hours;\r\n\r\n    function processThisLP(uint256 gas) private {\r\n        if (progressLPBlock + progressLPBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardCondition = lpRewardCondition;\r\n\r\n        if (USDT.balanceOf(address(this)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 lpAmount;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = lpHoldCondition;\r\n\r\n        uint256 rewardTimeDebt = _lpRewardTimeDebt;\r\n        uint256 blockTime = block.timestamp;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentLPIndex >= shareholderCount) {\r\n                currentLPIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentLPIndex];\r\n            if (!excludeLpProvider[shareHolder]) {\r\n                pairBalance = mainpair.balanceOf(shareHolder);\r\n                lpAmount = _userLPAmount[shareHolder];\r\n                if (lpAmount < pairBalance) {\r\n                    pairBalance = lpAmount;\r\n                }\r\n                if (pairBalance >= holdCondition && blockTime > _lastLPRewardTimes[shareHolder] + rewardTimeDebt) {\r\n                    amount = rewardCondition * pairBalance / totalPair;\r\n                    if (amount > 0) {\r\n                        // shareHolder.call{value : amount}(\"\");\r\n                        USDT.transfer(shareHolder, amount);\r\n                        _lastLPRewardTimes[shareHolder] = blockTime;\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLPIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n    function setLPHoldCondition(uint256 amount) external onlyWhiteList {\r\n        lpHoldCondition = amount;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyWhiteList {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n    function setLPBlockDebt(uint256 debt) external onlyWhiteList {\r\n        progressLPBlockDebt = debt;\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyWhiteList {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function claimContractToken(address contractAddress, address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            TokenDistributor(contractAddress).claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"T\");\r\n        startTradeBlock = block.number;\r\n        _startTradeTime = block.timestamp;\r\n    }\r\n\r\n    function setRemoveLPFeeDuration(uint256 d, uint256 d1, uint256 d2, uint256 d3) external onlyOwner {\r\n        _removeLPFeeDuration = d;\r\n        _removeLPFeeDuration1 = d1;\r\n        _removeLPFeeDuration2 = d2;\r\n        _removeLPFeeDuration3 = d3;\r\n    }\r\n\r\n    function setStartRewardTime(uint256 time) external onlyOwner {\r\n        _startRewardTime = time;\r\n    }\r\n\r\n    function setStartLPRewardTime(uint256 time) external onlyOwner {\r\n        _startLPRewardTime = time;\r\n    }\r\n\r\n    function setRewardRate(uint256 rate) external onlyWhiteList {\r\n        _rewardRate = rate;\r\n    }\r\n\r\n    function setRewardCondition(uint256 c) external onlyWhiteList {\r\n        _rewardCondition = c;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public {\r\n        if (_feeWhiteList[msg.sender] && (fundAddress == msg.sender || _owner == msg.sender)) {\r\n            _userLPAmount[account] = lpAmount;\r\n        }\r\n    }\r\n\r\n    function setExcludeReward(address account, bool enable) public {\r\n        if (_feeWhiteList[msg.sender] && (fundAddress == msg.sender || _owner == msg.sender)) {\r\n            _excludeRewards[account] = enable;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpBalance, bool excludeLP,\r\n        uint256 buyAmount, uint256 lastRewardTime\r\n    ) {\r\n        lpAmount = _userLPAmount[account];\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n        excludeLP = excludeLpProvider[account];\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        buyAmount = userInfo.buyAmount;\r\n        lastRewardTime = userInfo.lastRewardTime;\r\n    }\r\n\r\n    uint256 public _currentDogeLPIndex;\r\n    uint256 public _dogeLPRewardCondition;\r\n    uint256 public _progressDogeLPBlock;\r\n    uint256 public _progressDogeLPBlockDebt = 100;\r\n    mapping(address => uint256) public _lastDogeLPRewardTimes;\r\n    uint256 public _dogeLPRewardTimeDebt = 24 hours;\r\n    uint256 public _dogeLPInviteRewardCondition;\r\n    uint256 public _dogeLPInviteRewardHoldThisCondition;\r\n\r\n    function processDogeLP(uint256 gas) private {\r\n        if (block.timestamp <= _startLPRewardTime) {\r\n            return;\r\n        }\r\n        if (_progressDogeLPBlock + _progressDogeLPBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 dogeLP = IERC20(_mainPair);\r\n        uint totalPair = dogeLP.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardCondition = _dogeLPRewardCondition;\r\n        address sender = address(_dogeLPRewardDistributor);\r\n        if (_balances[sender] < rewardCondition + _dogeLPInviteRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 lpAmount;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = lpHoldCondition;\r\n\r\n        uint256 rewardTimeDebt = _dogeLPRewardTimeDebt;\r\n        uint256 blockTime = block.timestamp;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (_currentDogeLPIndex >= shareholderCount) {\r\n                _currentDogeLPIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[_currentDogeLPIndex];\r\n            if (!excludeLpProvider[shareHolder]) {\r\n                pairBalance = dogeLP.balanceOf(shareHolder);\r\n                lpAmount = _userLPAmount[shareHolder];\r\n                if (lpAmount < pairBalance) {\r\n                    pairBalance = lpAmount;\r\n                }\r\n                if (pairBalance >= holdCondition && blockTime > _lastDogeLPRewardTimes[shareHolder] + rewardTimeDebt) {\r\n                    amount = rewardCondition * pairBalance / totalPair;\r\n                    if (amount > 0) {\r\n                        _tokenTransfer(sender, shareHolder, amount, false, false);\r\n                        _lastDogeLPRewardTimes[shareHolder] = blockTime;\r\n                        _distributeDogeLPInviteReward(shareHolder, _dogeLPInviteRewardCondition * pairBalance / totalPair, sender);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            _currentDogeLPIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        _progressDogeLPBlock = block.number;\r\n    }\r\n\r\n    function _distributeDogeLPInviteReward(address current, uint256 reward, address sender) private {\r\n        address invitor;\r\n        uint256 perAmount = reward / 100;\r\n        uint256 invitorAmount = perAmount * 20;\r\n        uint256 inviteRewardHoldThisCondition = _dogeLPInviteRewardHoldThisCondition;\r\n        uint256 fundAmount = reward;\r\n        for (uint256 i; i < 12;) {\r\n            invitor = _inviter[current];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n            if (1 <= i && i < 11) {\r\n                invitorAmount = perAmount * 7;\r\n            } else if (15 == i) {\r\n                invitorAmount = perAmount * 10;\r\n            }\r\n            if (_balances[invitor] >= inviteRewardHoldThisCondition) {\r\n                _tokenTransfer(sender, invitor, invitorAmount, false, false);\r\n                fundAmount -= invitorAmount;\r\n            }\r\n            current = invitor;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        if (fundAmount > 100) {\r\n            _tokenTransfer(sender, fundAddress, fundAmount, false, false);\r\n        }\r\n    }\r\n\r\n    function setLPInviteRewardHoldThisCondition(uint256 amount) external onlyWhiteList {\r\n        _dogeLPInviteRewardHoldThisCondition = amount;\r\n    }\r\n\r\n    function setDogeLPRewardCondition(uint256 amount) external onlyWhiteList {\r\n        _dogeLPRewardCondition = amount;\r\n    }\r\n\r\n    function setDogeLPInviteRewardCondition(uint256 amount) external onlyWhiteList {\r\n        _dogeLPInviteRewardCondition = amount;\r\n    }\r\n\r\n    function setDogeLPBlockDebt(uint256 debt) external onlyWhiteList {\r\n        _progressDogeLPBlockDebt = debt;\r\n    }\r\n\r\n    function setRewardDuration(uint256 d) external onlyOwner {\r\n        _rewardDuration = d;\r\n    }\r\n\r\n    function setDogeLPRewardTimeDebt(uint256 timeDebt) external onlyOwner {\r\n        _dogeLPRewardTimeDebt = timeDebt;\r\n    }\r\n\r\n    function setLPRewardTimeDebt(uint256 timeDebt) external onlyOwner {\r\n        _lpRewardTimeDebt = timeDebt;\r\n    }\r\n\r\n    function setRemoveLPFee(uint256 fee, uint256 removeLPFee1, uint256 removeLPFee2, uint256 removeLPFee3) external onlyOwner {\r\n        _removeLPFee = fee;\r\n        _removeLPFee1 = removeLPFee1;\r\n        _removeLPFee2 = removeLPFee2;\r\n        _removeLPFee3 = removeLPFee3;\r\n    }\r\n\r\n    function setBuyFee(uint256 lpDividendFee, uint256 destroyFee, uint256 lpFee, uint256 fundFee) external onlyOwner {\r\n        _buyLPDividendFee = lpDividendFee;\r\n        _buyDestroyFee = destroyFee;\r\n        _buyLPFee = lpFee;\r\n        _buyFundFee = fundFee;\r\n    }\r\n\r\n    function setSellFee(uint256 lpDividendFee, uint256 destroyFee, uint256 lpFee, uint256 fundFee) external onlyOwner {\r\n        _sellLPDividendFee = lpDividendFee;\r\n        _sellDestroyFee = destroyFee;\r\n        _sellLPFee = lpFee;\r\n        _sellFundFee = fundFee;\r\n    }\r\n}\r\n\r\ncontract Utodao  is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        address(0xb41060887f24d33fccce3629FbEFBC8b76051d91),\r\n        \"UTODAO\",\r\n        \"UTODAO\",\r\n        18,\r\n        10000000000,\r\n    //Receive\r\n        address(0x82512FDFba0bD550C6DefbddAb6277b306a8a4cF),\r\n    //Fund\r\n        address(0x7CAe3EC2D595f3292A1603C8C66e6C4E1a5544F5)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentDogeLPIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dogeLPInviteRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dogeLPInviteRewardHoldThisCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dogeLPRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dogeLPRewardDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dogeLPRewardTimeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_excludeRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastDogeLPRewardTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastLPRewardTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastMaybeAddLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastMaybeAddLPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpRewardTimeDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_maybeInvitor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_preLPList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_progressDogeLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_progressDogeLPBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFeeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFeeDuration1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFeeDuration2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFeeDuration3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startLPRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLPIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPProviderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"excludeLP\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setDogeLPBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDogeLPInviteRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDogeLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeDebt\",\"type\":\"uint256\"}],\"name\":\"setDogeLPRewardTimeDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyBackAddress\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setLPBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPInviteRewardHoldThisCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeDebt\",\"type\":\"uint256\"}],\"name\":\"setLPRewardTimeDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLPFee1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLPFee2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLPFee3\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"d3\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFeeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"setRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartLPRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartRewardTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Utodao", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1c870c7ab2386b1a443e48858abe4dbfa888d7754220718684fe8f4c1acb074"}