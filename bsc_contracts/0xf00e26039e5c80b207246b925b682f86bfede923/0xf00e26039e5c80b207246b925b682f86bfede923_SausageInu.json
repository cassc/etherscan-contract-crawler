{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: sausageinu.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.3.2 (token/ERC20/ERC20.sol)\r\n\r\n//\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2557\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\r\n//\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\r\n//\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2003\u2003\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\r\n//\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u255a\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2003\u2003\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\r\n//\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2003\u2003\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u255a\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n//\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2003\u2003\u255a\u2550\u255d\u255a\u2550\u255d\u2591\u2591\u255a\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\r\n\r\n\r\n// Welcome to Sausage Inu ! The sausage dog of the blockchain (on Binance Smart Chain) !\r\n// Let's build a cool and nice community together !\r\n// God Bless\r\n\r\n// Technicals Part: \r\n// 10B Billion Total Supply -> 90% Burned at launch\r\n// Please set slippage to 10% when you buy or sell on your DEX\r\n// 9% Tax (3% Marketing 3% Development, 3% Burn)\r\n// Anti-whale (Max 30M Tokens per Wallet and Max 5M per tx). \r\n// Note : We may disable the anti-whale option in the future.\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract SausageInu is Context, IERC20, IERC20Metadata {\r\n    //ERC20 inherits from Context, IERC20 & IERC20Metadata\r\n    \r\n    //saves the balances of all token holders\r\n    mapping(address => uint256) private _balances; \r\n    \r\n    //saves the allownace of all token holders\r\n    //an allowance is basically a loan allowing another address to use your tokens\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    //total amount of tokens\r\n    uint256 private _totalSupply;\r\n\r\n    //name & symbol representing the tokens\r\n    string private _name;\r\n    string private _symbol;\r\n    \r\n    address private _owner;\r\n    \r\n    //event to let the exterior know that tokens have been burned\r\n    event Burn(uint256 amount);\r\n    \r\n    //address of fee wallets\r\n    address private marketingWallet = 0xbb43f6305593717CbDe6b9Ed2f04058be3281bF5;\r\n    address private devWallet = 0x62dd352e74bf6D35aa218ff0d874c12D1E78FA54;\r\n    address private burnWallet = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    //address of uniswap and pancakeswap routers\r\n    address private univ2router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private univ3router = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n    address private pancakev2router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private quickswaprouter = 0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff;\r\n    \r\n    //variable to see if ta is activated\r\n    bool private _toggleMWTax;\r\n    bool private _toggleDWTax;\r\n    bool private _toggleBWTax;\r\n    \r\n    \r\n    //percentages of tax\r\n    uint256 private _MarketingWalletTax;\r\n    uint256 private _DevWalletTax;\r\n    uint256 private _BurnWalletTax;\r\n    \r\n    //exent from paying taxes\r\n    mapping(address => bool) noMarketingTax;\r\n    mapping(address => bool) noDevTax;\r\n    mapping(address => bool) noBurnTax;\r\n    \r\n    //stores the value of if max percent of total supply is on and the value of this max percent\r\n    bool private _toggleMPTS;\r\n    uint256 private _maxPercentTotalSupply;\r\n    \r\n    //stores the value of if max percent per tx is on and the value of this max percent\r\n    bool private _toggleMPPT;\r\n    uint256 private _maxPercentPerTx;\r\n    \r\n    //whitelist that stores accounts that dont have max percentage\r\n    mapping(address => bool) private noMaxPercentTotalSupply;\r\n    mapping(address => bool) private noMaxPercentPerTx;\r\n\r\n    //when you deploy the contract you suplly these three values\r\n    constructor(string memory name_, string memory symbol_, uint256 totalSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _totalSupply = totalSupply_;\r\n        //owner starts out with all the balance\r\n        _balances[msg.sender] = _totalSupply;\r\n        //the person who deploys the contract will be the initial owner\r\n        _owner = msg.sender;\r\n        //by default the taxes will be off\r\n        _toggleMWTax = false;\r\n        _toggleDWTax = false;\r\n        _toggleBWTax = false;\r\n        //intially the tax will be 3% each\r\n        _MarketingWalletTax = 3;\r\n        _DevWalletTax = 3;\r\n        _BurnWalletTax = 3;\r\n        //by default the max of totalSupply will be disabled\r\n        _toggleMPTS = false;\r\n        //be default the max percent of total supply available will be 3%\r\n        // Multiply per 100 to get the actual result based on market cap\r\n        _maxPercentTotalSupply = 30;\r\n        //by default the max per tx will be disabled\r\n        _toggleMPPT = false;\r\n        // Multiply per 100 to get the actual result based on market cap\r\n        //be default the max percent of total supply available will be 0,5%\r\n        _maxPercentPerTx = 5;\r\n        //automatically establish the wallets that dont have tax or limits\r\n        //we first define the 5 address that we want and then tak it through a for loop\r\n        address[8] memory addresses = [marketingWallet, devWallet, burnWallet, univ2router, univ3router, pancakev2router, quickswaprouter, _owner];\r\n        for (uint i=1; i < addresses.length; i++) {\r\n            noTax(addresses[i]);\r\n            noMaxLimit(addresses[i]);\r\n        }\r\n    }\r\n    \r\n    //only allows the function to continue if the owner calls it\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n    \r\n    \r\n    //only allows function to continue when transaction doesnt go over max limit\r\n    modifier maxLimitTotalSupply(address recipient, uint256 amount) {\r\n        if (noMaxPercentTotalSupply[recipient] == false) {\r\n            if (_toggleMPTS == true) {\r\n                uint256 newAmount = balanceOf(recipient) + amount;\r\n                require(newAmount <= ((totalSupply() * _maxPercentTotalSupply) / 10000), 'Recipient cannot hold this amount of tokens, surpasses max limit');\r\n            }\r\n        }    \r\n        _;\r\n    }\r\n    \r\n    //only allows function to continue when transaction doesnt go over max limit\r\n    modifier maxLimitPerTx(address sender, uint256 amount) {\r\n        if (noMaxPercentPerTx[sender] == false) {\r\n            if (_toggleMPPT == true) {\r\n                require(amount <= ((totalSupply() * _maxPercentPerTx) / 10000), 'Cannot transfer this amount of tokens, surpasses transaction limit');\r\n            }\r\n        }    \r\n        _;\r\n    }\r\n\r\n    //returns name\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    //returns symbol\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    //number of decimals used for tokem\r\n    //BE CAREFUL!!! If your token supply is 5000 and you have 3 deciamls, your token supply is actually 5\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    //returns total supply\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n  \r\n    //sees who the owner of the contract is\r\n    function owner() public view virtual returns(address) {\r\n        return _owner;\r\n    }\r\n    \r\n    //change the owner of the contract, only to be called by the owner\r\n    function transferOwnership(address newOwner) public onlyOwner returns(bool) {\r\n        _owner = newOwner;\r\n        \r\n        return true;\r\n    }\r\n\r\n    //returns balances\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        require(account != address(0), 'Cannot acces balance of 0x0 Wallet');\r\n        return _balances[account];\r\n    }\r\n\r\n    //executes a transfer between two accounts\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    //returns allowance\r\n    function allowance(address allower, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[allower][spender];\r\n    }\r\n\r\n    //A address approves a certain amount of its funs to be used by another address\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    //an address transfers tokens from his allowance to another address\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        //first we check that the allowance is bigger than the amount that is wanted to send\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        \r\n         //we try to execute the transfer\r\n        _transfer(sender, recipient, amount);\r\n        \r\n        //unchecked means that it wont check for underflows or overflows, since we know that currentAllowance > amount, this is no problem\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //adding more tokens to an allowance\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    //taking away tokens from an allowance\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        //must have more tokens than the amount trying to be taken away\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        \r\n        //since we know that currentAllowance > subtracted value, this is no problem\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //sending tokens from one address to another\r\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual maxLimitPerTx(sender, amount) maxLimitTotalSupply(recipient, amount) {\r\n        //both have to be valid address\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n    \r\n        //we check to see that the amount is inferior to the senders balance and then update their balances\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        //we establish the marketing tax initially for this operation to be zero\r\n        uint256 marketingTax = 0;\r\n        //if the marketing tax is turned on and neither the recipient nor the sender is on the tax exempt whitelist, a tax while be calculated\r\n        if (_toggleMWTax == true && noMarketingTax[recipient] == false && noMarketingTax[sender] == false) {\r\n            marketingTax = (amount * _MarketingWalletTax) / 100;\r\n            _balances[marketingWallet] += marketingTax;\r\n        }\r\n        \r\n        \r\n        //we establish the dev tax initially for this operation to be zero\r\n        uint256 devTax = 0;\r\n        //if the dev tax is turned on and neither the recipient nor the sender is on the tax exempt whitelist, a tax while be calculated\r\n        if (_toggleDWTax == true && noDevTax[recipient] == false && noDevTax[sender] == false) {\r\n            devTax = (amount * _DevWalletTax) / 100;\r\n            _balances[devWallet] += devTax;\r\n        }\r\n        \r\n        //we establish the burn tax initially for this operation to be zero\r\n        uint256 burnTax = 0;\r\n        //if the burn tax is turned on and neither the recipient nor the sender is on the tax exempt whitelist, a tax while be calculated\r\n        if (_toggleBWTax == true && noBurnTax[recipient] == false && noBurnTax[sender] == false) {\r\n            burnTax = (amount * _BurnWalletTax) / 100;\r\n            _burn(burnTax);\r\n            _balances[burnWallet] += burnTax;\r\n        }\r\n        \r\n        //since we know that senderBalance >  amount, this is no problem\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        \r\n        _balances[recipient] += (amount - marketingTax - burnTax - devTax);\r\n\r\n        //emitting an event so that the exterior can see that a transfer has taken place\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n    \r\n    //function that updates the allowance that an address has given another address\r\n    function _approve(address allower, address spender, uint256 amount) internal virtual {\r\n        //both addess must be valid\r\n        require(allower != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[allower][spender] = amount;\r\n        //emitting an event so that the exterior can see that an allowance was created\r\n        emit Approval(allower, spender, amount);\r\n    }\r\n    \r\n    //turn on & turn off the marketingTax\r\n    function toggleMWTax() public onlyOwner {\r\n        //checks to see current state and goes to the other\r\n        if (_toggleMWTax == true) {\r\n            _toggleMWTax = false;\r\n        }\r\n        else {\r\n            _toggleMWTax = true;\r\n        }\r\n    }\r\n    \r\n    \r\n    //turn on & turn off the dev wallet tax\r\n    function toggleDWTax() public onlyOwner {\r\n        //checks to see current state and goes to the other\r\n        if (_toggleDWTax == true) {\r\n            _toggleDWTax = false;\r\n        }\r\n        else {\r\n            _toggleDWTax = true;\r\n        }\r\n    }\r\n    \r\n    //turn on & turn off the burn wallet tax\r\n    function toggleBWTax() public onlyOwner {\r\n        //checks to see current state and goes to the other\r\n        if (_toggleBWTax == true) {\r\n            _toggleBWTax = false;\r\n        }\r\n        else {\r\n            _toggleBWTax = true;\r\n        }\r\n    }\r\n    \r\n    //give the function a percentage and it will make it the new marketingTax\r\n    function changeMarketingTax(uint256 _percent) public onlyOwner {\r\n        require(_percent < 25, 'Tax Cannot be more than 25% of the transaction value');\r\n        _MarketingWalletTax = _percent;\r\n    }\r\n    \r\n    \r\n    //give the function a percentage and it will make it the new DevTax\r\n    function changeDevTax(uint256 _percent) public onlyOwner {\r\n        require(_percent < 25, 'Tax Cannot be more than 25% of the transaction value');\r\n        _DevWalletTax = _percent;\r\n    }\r\n    \r\n    //give the function a percentage and it will make it the new BurnTax\r\n    function changeBurnTax(uint256 _percent) public onlyOwner {\r\n        require(_percent < 25, 'Tax Cannot be more than 25% of the transaction value');\r\n        _BurnWalletTax = _percent;\r\n    }\r\n    \r\n    \r\n    //adding an address to the no marketingTax mapping so that they no longer have to pay taxes on transfers\r\n    function addToNoMarketingTax(address newAddress) public onlyOwner {\r\n        require(noMarketingTax[newAddress] != true, 'Address is already part of Tax Exempt List');\r\n        \r\n        noMarketingTax[newAddress] = true;\r\n    }\r\n    \r\n    //removing an address from the no marketingTax mapping so that they no longer have to pay taxes on transfers\r\n    function removeFromNoMarketingTax(address newAddress) public onlyOwner {\r\n        require(noMarketingTax[newAddress] != false, 'Address is not part of Tax Exempt List');\r\n        \r\n        noMarketingTax[newAddress] = false;\r\n    }\r\n    \r\n    //duplicate of functins above\r\n    \r\n    function addToNoDevTax(address newAddress) public onlyOwner {\r\n        require(noDevTax[newAddress] != true, 'Address is already part of Tax Exempt List');\r\n        \r\n        noDevTax[newAddress] = true;\r\n    }\r\n    \r\n    function removeFromNoDevTax(address newAddress) public onlyOwner {\r\n        require(noDevTax[newAddress] != false, 'Address is not part of Tax Exempt List');\r\n        \r\n        noDevTax[newAddress] = false;\r\n    }\r\n    \r\n    //duplicate of functins above\r\n    \r\n    function addToNoBurnTax(address newAddress) public onlyOwner {\r\n        require(noBurnTax[newAddress] != true, 'Address is already part of Tax Exempt List');\r\n        \r\n        noBurnTax[newAddress] = true;\r\n    }\r\n    \r\n    function removeFromNoBurnTax(address newAddress) public onlyOwner {\r\n        require(noBurnTax[newAddress] != false, 'Address is not part of Tax Exempt List');\r\n        \r\n        noBurnTax[newAddress] = false;\r\n    }\r\n    \r\n    //removes tokens from total supply as they have been sent to dead wallet, are not accessible\r\n    function _burn(uint256 amount) internal {\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Burn(amount);\r\n    }\r\n    \r\n    //function to view the amount of tokens that have been burned\r\n    function burnedTokens() public view returns(uint256) {\r\n        return _balances[burnWallet];\r\n    } \r\n    \r\n    //functions to see that state of the taxes, on or off\r\n    \r\n    function MarketingTaxIsActive() public view returns(bool) {\r\n        return _toggleMWTax;\r\n    }\r\n    \r\n    \r\n    function DevTaxIsActive() public view returns(bool) {\r\n        return _toggleDWTax;\r\n    }\r\n    \r\n    function BurnTaxIsActive() public view returns(bool) {\r\n        return _toggleBWTax;\r\n    }\r\n    \r\n    //functions to see the current percenatge set as tax\r\n    function currentMarketingTax() public view returns(uint256) {\r\n        return _MarketingWalletTax;\r\n    }\r\n    \r\n    \r\n    function currentDevTax() public view returns(uint256) {\r\n        return _DevWalletTax;\r\n    }\r\n    \r\n    function currentBurnTax() public view returns(uint256) {\r\n        return _BurnWalletTax;\r\n    }\r\n    \r\n    //turns max percent total supply on and off\r\n    function toggleMaxPercentTotalSupply() public onlyOwner {\r\n        //checks to see current state and goes to the other\r\n        if (_toggleMPTS == true) {\r\n            _toggleMPTS = false;\r\n        }\r\n        else {\r\n            _toggleMPTS = true;\r\n        }\r\n    }\r\n    \r\n    //turns max percent per transaction on and off\r\n    function toggleMaxPercentPerTx() public onlyOwner {\r\n        //checks to see current state and goes to the other\r\n        if (_toggleMPPT == true) {\r\n            _toggleMPPT = false;\r\n        }\r\n        else {\r\n            _toggleMPPT = true;\r\n        }\r\n    }\r\n    \r\n    //function to change the percentage of max holdings of token\r\n    function changeMaxPercentTotalSupply(uint256 _percent) public onlyOwner {\r\n        //the maximum limit we can set is 99 because you cannot transfer more than 100% of the totalSupply\r\n        require(_percent < 100, 'Max limit cannot be greater than 100');\r\n        _maxPercentTotalSupply = _percent;\r\n    }\r\n    \r\n    //function to change max percent of total supply transfered with each transaction\r\n    function changeMaxPercentPerTx(uint256 _percent) public onlyOwner {\r\n        //the maximum limit we can set is 99 because you cannot transfer more than 100% of the totalSupply\r\n        require(_percent < 100, 'Max Limit cannot be greater than 100');\r\n        _maxPercentPerTx = _percent;\r\n    }\r\n    \r\n    \r\n    //functions to see is max percentage limits are active\r\n    \r\n    function MaxPercentTotalSupplyIsActive() public view returns(bool) {\r\n        return _toggleMPTS;\r\n    }\r\n    \r\n    function MaxPercentPerTxIsActive() public view returns(bool) {\r\n        return _toggleMPPT;\r\n    }\r\n    \r\n    //functions to see the current percentages limits\r\n    \r\n    function currentMaxPercentTotalSupply() public view returns(uint256) {\r\n        return _maxPercentTotalSupply;\r\n    }\r\n    \r\n    function currentMaxPercentPerTx() public view returns(uint256) {\r\n        return _maxPercentPerTx;\r\n    }\r\n    \r\n    //adding an address to the no marketingTax mapping so that they no longer have to pay taxes on transfers\r\n    function addToNoMaxPercentTotalSupply(address newAddress) public onlyOwner {\r\n        require(noMaxPercentTotalSupply[newAddress] != true, 'Address is already part of Percent Limit Exempt List');\r\n        \r\n        noMaxPercentTotalSupply[newAddress] = true;\r\n    }\r\n    \r\n    //removing an address from the no marketingTax mapping so that they no longer have to pay taxes on transfers\r\n    function removeFromNoMaxPercentTotalSupply(address newAddress) public onlyOwner {\r\n        require(noMaxPercentTotalSupply[newAddress] != false, 'Address is already part of Percent Limit Exempt List');\r\n        \r\n        noMaxPercentTotalSupply[newAddress] = false;\r\n    }\r\n    \r\n    //duplicate of functins above\r\n    \r\n    function addToNoMaxPercentPerTx(address newAddress) public onlyOwner {\r\n        require(noMaxPercentPerTx[newAddress] != true, 'Address is already part of Percent Limit Exempt List');\r\n        \r\n        noMaxPercentPerTx[newAddress] = true;\r\n    }\r\n    \r\n    function removeFromNoMaxPercentPerTx(address newAddress) public onlyOwner {\r\n        require(noMaxPercentPerTx[newAddress] != false, 'Address is already part of Percent Limit Exempt List');\r\n        \r\n        noMaxPercentPerTx[newAddress] = false;\r\n    }\r\n    \r\n    function noMaxLimit(address newAddress) public onlyOwner returns(bool) {\r\n        addToNoMaxPercentTotalSupply(newAddress);\r\n        addToNoMaxPercentPerTx(newAddress);\r\n        \r\n        return true;\r\n    }\r\n\r\n        \r\n    function noTax(address newAddress) public onlyOwner returns(bool) {\r\n        addToNoMarketingTax(newAddress);\r\n        addToNoDevTax(newAddress);\r\n        addToNoBurnTax(newAddress);\r\n        \r\n        return true;\r\n    } \r\n    \r\n        // Withdraw stuck ETH or BNB\r\n    function emergencyWithdraw() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n    \r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BurnTaxIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DevTaxIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MarketingTaxIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxPercentPerTxIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxPercentTotalSupplyIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addToNoBurnTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addToNoDevTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addToNoMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addToNoMaxPercentPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addToNoMaxPercentTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"changeBurnTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"changeDevTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"changeMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"changeMaxPercentPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"changeMaxPercentTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBurnTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDevTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMarketingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaxPercentPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaxPercentTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"noMaxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"noTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"removeFromNoBurnTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"removeFromNoDevTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"removeFromNoMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"removeFromNoMaxPercentPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"removeFromNoMaxPercentTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBWTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDWTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMWTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMaxPercentPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMaxPercentTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SausageInu", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000000000000000b5361757361676520496e7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045341555300000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d5883d980d83b98384f3ce0ef4bc6ddd6f16528586b7d59fa67daa5644df8de5"}