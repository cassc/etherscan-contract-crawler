{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: UpgradeStarOrb.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ninterface IERC721 {\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\t\r\n\tfunction transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface IHolyPackage is IERC721 {\r\n    struct Package {\r\n        string holyType;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    function getPackage(uint256 _packageId) external returns (Package memory);\r\n}\r\n\r\ninterface IOrb {\r\n    struct Orb {\r\n        uint8 star;\r\n        uint8 rarity;\r\n        uint8 classType;\r\n        uint256 bornAt;\r\n    }\r\n}\r\n\r\ninterface IOrbNFT is IERC721, IOrb {\r\n\tfunction getOrb(uint256 _tokenId) external view returns (Orb memory);\r\n\r\n    function updateStar(uint256 _orbId, uint8 _newStar) external;\r\n}\r\n\r\ninterface IBEP20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract UpgradeStarOrb is IOrb, Ownable, Pausable {\r\n    IOrbNFT public orbNft;\r\n\r\n    IHolyPackage public holyPackage;\r\n\r\n    struct Requirement {\r\n        address token;\r\n        uint256[] tokenRequire;\r\n        uint8 holyPackageRequire;\r\n        uint8[] successPercents;\r\n    }\r\n\r\n    mapping (uint8 => Requirement) requirements;\r\n\r\n    event StarUpgrade(uint256 orbId, uint8 newStar, bool isSuccess);\r\n        \r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public feeAddress = 0x81F403fE697CfcF2c21C019bD546C6b36370458c;\r\n\r\n    uint nonce = 0;\r\n\r\n    mapping (uint256 => uint8) records;\r\n\r\n    constructor(address _orbNft, address _holyPackage, address _feeAddress) {\r\n        orbNft = IOrbNFT(_orbNft);\r\n        holyPackage = IHolyPackage(_holyPackage);\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    function upgradeStar(uint256 _orbId, uint256[] memory _holyPackageIds) external whenNotPaused {\r\n        require(orbNft.ownerOf(_orbId) == _msgSender(), \"require: must be owner\");\r\n        Orb memory orb = orbNft.getOrb(_orbId);\r\n        Requirement memory requirement = requirements[orb.star];\r\n        uint256 length = _holyPackageIds.length;\r\n        require(length == requirement.holyPackageRequire, \"require: number of holy packages not correct\");\r\n        string memory requiredHolyType = getRequiredHolyType(orb.classType);\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(holyPackage.ownerOf(_holyPackageIds[i]) == _msgSender(), \"require: must be owner of holies\");\r\n            require(compareStrings(holyPackage.getPackage(_holyPackageIds[i]).holyType, requiredHolyType), \"require: wrong holy type\");\r\n        }\r\n        IBEP20(requirement.token).transferFrom(_msgSender(), feeAddress, getFee(orb.star, orb.rarity));\r\n        for (uint256 k = 0; k < length; k++) {\r\n            holyPackage.transferFrom(_msgSender(), deadAddress, _holyPackageIds[k]);\r\n        }\r\n        uint8 upgradeTimes = records[_orbId] + 1;\r\n        bool isSuccess = false;\r\n        if (upgradeTimes == requirement.successPercents.length) {\r\n            isSuccess = true;\r\n        } else {\r\n            isSuccess = randomUpgrade(requirement.successPercents[upgradeTimes - 1]);\r\n        }\r\n        if (isSuccess) {\r\n            records[_orbId] = 0;\r\n            uint8 newStar = orb.star + 1;\r\n            orbNft.updateStar(_orbId, newStar);\r\n            emit StarUpgrade(_orbId, newStar, true);\r\n        } else {\r\n            records[_orbId] = upgradeTimes;\r\n            emit StarUpgrade(_orbId, orb.star, false);\r\n        }\r\n    }\r\n\r\n    function randomUpgrade(uint8 _successPercent) internal returns (bool) {\r\n        uint random = getRandomNumber();\r\n        uint seed = random % 100;\r\n        if (seed < _successPercent) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function getRandomNumber() internal returns (uint) {\r\n        nonce += 1;\r\n        return uint(keccak256(abi.encodePacked(nonce, msg.sender, blockhash(block.number - 1))));\r\n    }\r\n\r\n    function updateOrbNft(address _newAddress) external onlyOwner {\r\n        orbNft = IOrbNFT(_newAddress);\r\n    }\r\n\r\n    function updateFeeAddress(address _newAddress) external onlyOwner {\r\n        feeAddress = _newAddress;\r\n    }\r\n\r\n    function getRequirement(uint8 _currentStar) public view returns (Requirement memory) {\r\n        return requirements[_currentStar];\r\n    }\r\n\r\n    function getNextSuccessPercent(uint256 _orbId) public view returns (uint8) {\r\n        Orb memory orb = orbNft.getOrb(_orbId);\r\n        Requirement memory requirement = requirements[orb.star];\r\n        return requirement.successPercents[records[_orbId]];\r\n    }\r\n\r\n    function getRequiredHolyType(uint8 _classType) public view returns (string memory) {\r\n        if (_classType == 1) {\r\n            return \"blue\";\r\n        } else if (_classType == 2) {\r\n            return \"red\";\r\n        } else if (_classType == 3) {\r\n            return \"yellow\";\r\n        } else {\r\n            return \"green\";\r\n        }\r\n    }\r\n\r\n    function setRequirement(uint8 _star, address _token, uint256[] memory _tokenRequire, uint8 _holyPackageRequire, uint8[] memory _successPercents) public onlyOwner {\r\n        requirements[_star] = Requirement({\r\n            token: _token,\r\n            tokenRequire: _tokenRequire,\r\n            holyPackageRequire: _holyPackageRequire,\r\n            successPercents: _successPercents\r\n        });\r\n    }\r\n\r\n    function updateHolyPackage(address _holyPackage) external onlyOwner {\r\n        holyPackage = IHolyPackage(_holyPackage);\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\r\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n    }\r\n\r\n    function getFee(uint8 _star, uint8 _rarity) public view returns (uint256) {\r\n        Requirement memory requirement = requirements[_star];\r\n        return requirement.tokenRequire[_rarity - 1];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orbNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holyPackage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orbId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newStar\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"}],\"name\":\"StarUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_star\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_rarity\",\"type\":\"uint8\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orbId\",\"type\":\"uint256\"}],\"name\":\"getNextSuccessPercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_classType\",\"type\":\"uint8\"}],\"name\":\"getRequiredHolyType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_currentStar\",\"type\":\"uint8\"}],\"name\":\"getRequirement\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRequire\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"holyPackageRequire\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"successPercents\",\"type\":\"uint8[]\"}],\"internalType\":\"struct UpgradeStarOrb.Requirement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holyPackage\",\"outputs\":[{\"internalType\":\"contract IHolyPackage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orbNft\",\"outputs\":[{\"internalType\":\"contract IOrbNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_star\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenRequire\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"_holyPackageRequire\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"_successPercents\",\"type\":\"uint8[]\"}],\"name\":\"setRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holyPackage\",\"type\":\"address\"}],\"name\":\"updateHolyPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateOrbNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orbId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_holyPackageIds\",\"type\":\"uint256[]\"}],\"name\":\"upgradeStar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UpgradeStarOrb", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ddda130d49afd93311ba0ebf50d37631e7d12d600000000000000000000000021ff9ae6917c6167e7a66e91d27ab841a229131900000000000000000000000081f403fe697cfcf2c21c019bd546c6b36370458c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ec5d9b3343593b3ebc6d7edb7f8157e8e8197afdeb429193d293c436dc87f90"}