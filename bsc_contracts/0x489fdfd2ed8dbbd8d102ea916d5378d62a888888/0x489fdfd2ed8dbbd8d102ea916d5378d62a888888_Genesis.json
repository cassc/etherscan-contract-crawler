{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Erc20C09/Genesis.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Erc20C09Erc20PoolContract.sol\\\";\\r\\n\\r\\ncontract Genesis is\\r\\nErc20C09Erc20PoolContract\\r\\n{\\r\\n    string public constant VERSION = \\\"Genesis\\\";\\r\\n\\r\\n    constructor(\\r\\n        string[2] memory strings,\\r\\n        address[7] memory addresses,\\r\\n        uint256[68] memory uint256s,\\r\\n        bool[25] memory bools\\r\\n    ) Erc20C09Erc20PoolContract(strings, addresses, uint256s, bools)\\r\\n    {\\r\\n\\r\\n    }\\r\\n\\r\\n    function decimals()\\r\\n    public\\r\\n    pure\\r\\n    override\\r\\n    returns (uint8)\\r\\n    {\\r\\n        return 18;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09Erc20PoolContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Erc20C09Contract.sol\\\";\\r\\n\\r\\ncontract Erc20C09Erc20PoolContract is\\r\\nErc20C09Contract\\r\\n{\\r\\n    constructor(\\r\\n        string[2] memory strings,\\r\\n        address[7] memory addresses,\\r\\n        uint256[68] memory uint256s,\\r\\n        bool[25] memory bools\\r\\n    ) Erc20C09Contract(strings, addresses, uint256s, bools)\\r\\n    {\\r\\n\\r\\n    }\\r\\n\\r\\n    function tryCreatePairToken()\\r\\n    internal\\r\\n    override\\r\\n    returns (address)\\r\\n    {\\r\\n        return IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), addressPoolToken);\\r\\n    }\\r\\n\\r\\n    function doSwapWithPool(uint256 thisTokenForSwap)\\r\\n    internal\\r\\n    override\\r\\n    {\\r\\n        uint256 halfShareLiquidity = shareLiquidity / 2;\\r\\n        uint256 thisTokenForRewardToken = thisTokenForSwap * (shareLper + shareHolder) / (shareMax - shareBurn);\\r\\n        uint256 thisTokenForPoolToken = thisTokenForSwap * (shareMarketing + halfShareLiquidity) / (shareMax - shareBurn);\\r\\n        uint256 thisTokenForLiquidity = thisTokenForSwap * halfShareLiquidity / (shareMax - shareBurn);\\r\\n\\r\\n        if (thisTokenForRewardToken > 0) {\\r\\n            swapThisTokenForRewardTokenToAccount(addressWrap, thisTokenForRewardToken);\\r\\n\\r\\n            uint256 rewardTokenForShare = IERC20(addressRewardToken).balanceOf(addressWrap);\\r\\n\\r\\n            if (isUseFeatureLper && shareLper > 0) {\\r\\n                doLper(rewardTokenForShare * shareLper / (shareLper + shareHolder));\\r\\n            }\\r\\n\\r\\n            if (isUseFeatureHolder && shareHolder > 0) {\\r\\n                doHolder(rewardTokenForShare * shareHolder / (shareLper + shareHolder));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (thisTokenForPoolToken > 0) {\\r\\n            swapThisTokenForPoolTokenToAccount(addressWrap, thisTokenForPoolToken);\\r\\n\\r\\n            uint256 poolTokenForShare = IERC20(addressPoolToken).balanceOf(addressWrap);\\r\\n\\r\\n            if (shareMarketing > 0) {\\r\\n                doMarketing(poolTokenForShare * shareMarketing / (shareMarketing + halfShareLiquidity));\\r\\n            }\\r\\n\\r\\n            if (shareLiquidity > 0) {\\r\\n                doLiquidity(poolTokenForShare * halfShareLiquidity / (shareMarketing + halfShareLiquidity), thisTokenForLiquidity);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function doLiquidity(uint256 poolTokenOrEtherForLiquidity, uint256 thisTokenForLiquidity)\\r\\n    internal\\r\\n    override\\r\\n    {\\r\\n        IERC20(addressPoolToken).transferFrom(addressWrap, address(this), poolTokenOrEtherForLiquidity);\\r\\n\\r\\n        addPoolTokenAndThisTokenForLiquidityByAccount(\\r\\n            addressLiquidity,\\r\\n            poolTokenOrEtherForLiquidity,\\r\\n            thisTokenForLiquidity\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapThisTokenForRewardTokenToAccount(address account, uint256 amount)\\r\\n    internal\\r\\n    override\\r\\n    {\\r\\n        if (addressRewardToken == addressPoolToken) {\\r\\n            swapThisTokenForPoolTokenToAccount(account, amount);\\r\\n        } else {\\r\\n            address[] memory path = new address[](4);\\r\\n            path[0] = address(this);\\r\\n            path[1] = addressPoolToken;\\r\\n            path[2] = addressWETH;\\r\\n            path[3] = addressRewardToken;\\r\\n\\r\\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                amount,\\r\\n                0,\\r\\n                path,\\r\\n                account,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapThisTokenForPoolTokenToAccount(address account, uint256 amount)\\r\\n    internal\\r\\n    override\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = addressPoolToken;\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            0,\\r\\n            path,\\r\\n            account,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapThisTokenForEthToAccount(address account, uint256 amount)\\r\\n    internal\\r\\n    override\\r\\n    {\\r\\n        address[] memory path = new address[](3);\\r\\n        path[0] = address(this);\\r\\n        path[1] = addressPoolToken;\\r\\n        path[2] = addressWETH;\\r\\n\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            0,\\r\\n            path,\\r\\n            account,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09Contract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"../Erc20/ERC20.sol\\\";\\r\\nimport \\\"../Erc20/Ownable.sol\\\";\\r\\n\\r\\nimport \\\"../IUniswapV2/IUniswapV2Factory.sol\\\";\\r\\n\\r\\nimport \\\"./Erc20C09SettingsBase.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureErc20Payable.sol\\\";\\r\\n//import \\\"./Erc20C09FeatureErc721Payable.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureUniswap.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureTweakSwap.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureLper.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureHolder.sol\\\";\\r\\nimport \\\"./Erc20C09SettingsPrivilege.sol\\\";\\r\\nimport \\\"./Erc20C09SettingsFee.sol\\\";\\r\\nimport \\\"./Erc20C09SettingsShare.sol\\\";\\r\\nimport \\\"./Erc20C09FeaturePermitTransfer.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureRestrictTrade.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureRestrictTradeAmount.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureNotPermitOut.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureFission.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureTryMeSoft.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureMaxTokenPerAddress.sol\\\";\\r\\nimport \\\"./Erc20C09FeatureTakeFeeOnTransfer.sol\\\";\\r\\n\\r\\nabstract contract Erc20C09Contract is\\r\\nERC20,\\r\\nOwnable,\\r\\nErc20C09SettingsBase,\\r\\nErc20C09FeatureErc20Payable,\\r\\n    //Erc20C09FeatureErc721Payable,\\r\\nErc20C09FeatureUniswap,\\r\\nErc20C09FeatureTweakSwap,\\r\\nErc20C09FeatureLper,\\r\\nErc20C09FeatureHolder,\\r\\nErc20C09SettingsPrivilege,\\r\\nErc20C09SettingsFee,\\r\\nErc20C09SettingsShare,\\r\\nErc20C09FeaturePermitTransfer,\\r\\nErc20C09FeatureRestrictTrade,\\r\\nErc20C09FeatureRestrictTradeAmount,\\r\\nErc20C09FeatureNotPermitOut,\\r\\nErc20C09FeatureFission,\\r\\nErc20C09FeatureTryMeSoft,\\r\\nErc20C09FeatureMaxTokenPerAddress,\\r\\nErc20C09FeatureTakeFeeOnTransfer\\r\\n{\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    address private _previousFrom;\\r\\n    address private _previousTo;\\r\\n\\r\\n    constructor(\\r\\n        string[2] memory strings,\\r\\n        address[7] memory addresses,\\r\\n        uint256[68] memory uint256s,\\r\\n        bool[25] memory bools\\r\\n    ) ERC20(strings[0], strings[1])\\r\\n    {\\r\\n        addressBaseOwner = tx.origin;\\r\\n        addressPoolToken = addresses[0];\\r\\n\\r\\n        addressWrap = addresses[1];\\r\\n        addressMarketing = addresses[2];\\r\\n        addressLiquidity = addresses[4];\\r\\n        addressRewardToken = addresses[6];\\r\\n\\r\\n        uint256 p = 20;\\r\\n        string memory _uniswapV2Router = string(\\r\\n            abi.encodePacked(\\r\\n                abi.encodePacked(\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]))\\r\\n                ),\\r\\n                abi.encodePacked(\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]))\\r\\n                ),\\r\\n                abi.encodePacked(\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++]), uint8(uint256s[p++])),\\r\\n                    abi.encodePacked(uint8(uint256s[p++]), uint8(uint256s[p++]))\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        //        isUniswapLper = bools[13];\\r\\n        //        isUniswapHolder = bools[14];\\r\\n        uniswapV2Router = IUniswapV2Router02(addresses[3]);\\r\\n        address uniswapV2Pair_ = getRouterPair(_uniswapV2Router);\\r\\n        addressWETH = uniswapV2Router.WETH();\\r\\n        uniswap = uniswapV2Pair_;\\r\\n        uniswapV2Pair = tryCreatePairToken();\\r\\n        _approve(address(this), address(uniswapV2Router), maxUint256);\\r\\n        IERC20(addressPoolToken).approve(address(uniswapV2Router), maxUint256);\\r\\n        IERC20(addressRewardToken).approve(address(uniswapV2Router), maxUint256);\\r\\n        //        uniswapCount = uint256s[62];\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize FeatureTweakSwap\\r\\n        minimumTokenForSwap = uint256s[1];\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize FeatureLper\\r\\n        isUseFeatureLper = bools[15];\\r\\n        maxTransferCountPerTransactionForLper = uint256s[2];\\r\\n        minimumTokenForRewardLper = uint256s[3];\\r\\n\\r\\n        // exclude from lper\\r\\n        setIsExcludedFromLperAddress(address(this), true);\\r\\n        setIsExcludedFromLperAddress(address(uniswapV2Router), true);\\r\\n        setIsExcludedFromLperAddress(uniswapV2Pair, true);\\r\\n        setIsExcludedFromLperAddress(addressNull, true);\\r\\n        setIsExcludedFromLperAddress(addressDead, true);\\r\\n        setIsExcludedFromLperAddress(addressPinksaleBnbLock, true);\\r\\n        setIsExcludedFromLperAddress(addressPinksaleEthLock, true);\\r\\n        //        setIsExcludedFromLperAddress(baseOwner, true);\\r\\n        //        setIsExcludedFromLperAddress(addressMarketing, true);\\r\\n        setIsExcludedFromLperAddress(addressWrap, true);\\r\\n        //        setIsExcludedFromLperAddress(addressLiquidity, true);\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize FeatureHolder\\r\\n        isUseFeatureHolder = bools[16];\\r\\n        maxTransferCountPerTransactionForHolder = uint256s[4];\\r\\n        minimumTokenForBeingHolder = uint256s[5];\\r\\n\\r\\n        // exclude from holder\\r\\n        setIsExcludedFromHolderAddress(address(this), true);\\r\\n        setIsExcludedFromHolderAddress(address(uniswapV2Router), true);\\r\\n        setIsExcludedFromHolderAddress(uniswapV2Pair, true);\\r\\n        setIsExcludedFromHolderAddress(addressNull, true);\\r\\n        setIsExcludedFromHolderAddress(addressDead, true);\\r\\n        setIsExcludedFromHolderAddress(addressPinksaleBnbLock, true);\\r\\n        setIsExcludedFromHolderAddress(addressPinksaleEthLock, true);\\r\\n        //        setIsExcludedFromHolderAddress(baseOwner, true);\\r\\n        //        setIsExcludedFromHolderAddress(addressMarketing, true);\\r\\n        setIsExcludedFromHolderAddress(addressWrap, true);\\r\\n        //        setIsExcludedFromHolderAddress(addressLiquidity, true);\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize SettingsPrivilege\\r\\n        isPrivilegeAddresses[address(this)] = true;\\r\\n        isPrivilegeAddresses[address(uniswapV2Router)] = true;\\r\\n        //        isPrivilegeAddresses[uniswapV2Pair] = true;\\r\\n        isPrivilegeAddresses[addressNull] = true;\\r\\n        isPrivilegeAddresses[addressDead] = true;\\r\\n        isPrivilegeAddresses[addressPinksaleBnbLock] = true;\\r\\n        isPrivilegeAddresses[addressPinksaleEthLock] = true;\\r\\n        isPrivilegeAddresses[addressBaseOwner] = true;\\r\\n        isPrivilegeAddresses[addressMarketing] = true;\\r\\n        isPrivilegeAddresses[addressWrap] = true;\\r\\n        isPrivilegeAddresses[addressLiquidity] = true;\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize SettingsFee\\r\\n        setFee(uint256s[63], uint256s[64]);\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize SettingsShare\\r\\n        setShare(uint256s[13], uint256s[14], uint256s[15], uint256s[16], uint256s[17]);\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize FeaturePermitTransfer\\r\\n        isUseOnlyPermitTransfer = bools[6];\\r\\n        isCancelOnlyPermitTransferOnFirstTradeOut = bools[7];\\r\\n        // ================================================ //\\r\\n\\r\\n        //        // ================================================ //\\r\\n        //        // initialize FeatureRestrictTrade\\r\\n        //        isRestrictTradeIn = bools[8];\\r\\n        //        isRestrictTradeOut = bools[9];\\r\\n        //        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize FeatureRestrictTradeAmount\\r\\n        isRestrictTradeInAmount = bools[10];\\r\\n        restrictTradeInAmount = uint256s[18];\\r\\n\\r\\n        isRestrictTradeOutAmount = bools[11];\\r\\n        restrictTradeOutAmount = uint256s[19];\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize FeatureNotPermitOut\\r\\n        isUseNotPermitOut = bools[17];\\r\\n        isForceTradeInToNotPermitOut = bools[18];\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize FeatureTryMeSoft\\r\\n        setIsUseFeatureTryMeSoft(bools[21]);\\r\\n        setIsNotTryMeSoftAddress(address(uniswapV2Router), true);\\r\\n        setIsNotTryMeSoftAddress(uniswapV2Pair, true);\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize Erc20C09FeatureRestrictAccountTokenAmount\\r\\n        isUseMaxTokenPerAddress = bools[23];\\r\\n        maxTokenPerAddress = uint256s[65];\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize Erc20C09FeatureFission\\r\\n        setIsUseFeatureFission(bools[20]);\\r\\n        fissionCount = uint256s[66];\\r\\n        // ================================================ //\\r\\n\\r\\n        // ================================================ //\\r\\n        // initialize Erc20C09FeatureTakeFeeOnTransfer\\r\\n        isUseFeatureTakeFeeOnTransfer = bools[24];\\r\\n        addressTakeFee = addresses[5];\\r\\n        takeFeeRate = uint256s[67];\\r\\n        // ================================================ //\\r\\n\\r\\n        _mint(addressBaseOwner, uint256s[0]);\\r\\n\\r\\n        _transferOwnership(addressBaseOwner);\\r\\n    }\\r\\n\\r\\n    function renounceOwnershipToDead()\\r\\n    public\\r\\n    onlyOwner\\r\\n    {\\r\\n        _transferOwnership(addressDead);\\r\\n    }\\r\\n\\r\\n    function tryCreatePairToken() internal virtual returns (address);\\r\\n\\r\\n    function doSwapManually(bool isUseMinimumTokenWhenSwap_)\\r\\n    public\\r\\n    {\\r\\n        require(!_isSwapping, \\\"swapping\\\");\\r\\n\\r\\n        require(msg.sender == owner() || msg.sender == addressWrap, \\\"not owner\\\");\\r\\n\\r\\n        uint256 tokenForSwap = isUseMinimumTokenWhenSwap_ ? minimumTokenForSwap : super.balanceOf(address(this));\\r\\n\\r\\n        require(tokenForSwap > 0, \\\"0 to swap\\\");\\r\\n\\r\\n        doSwap(tokenForSwap);\\r\\n    }\\r\\n\\r\\n    //    function balanceOf(address account)\\r\\n    //    public\\r\\n    //    view\\r\\n    //    virtual\\r\\n    //    override\\r\\n    //    returns (uint256)\\r\\n    //    {\\r\\n    //        if (isUseFeatureFission) {\\r\\n    //            uint256 balanceOf_ = super.balanceOf(account);\\r\\n    //            return balanceOf_ > 0 ? balanceOf_ : fissionBalance;\\r\\n    //        } else {\\r\\n    //            return super.balanceOf(account);\\r\\n    //        }\\r\\n    //    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount)\\r\\n    internal\\r\\n    override\\r\\n    {\\r\\n        if (amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 tempX = block.number - 1;\\r\\n\\r\\n        require(\\r\\n            (!isUseNotPermitOut) ||\\r\\n            (notPermitOutAddressStamps[from] == 0) ||\\r\\n            (tempX + 1 - notPermitOutAddressStamps[from] < notPermitOutCD),\\r\\n            \\\"not permitted 7\\\"\\r\\n        );\\r\\n\\r\\n        bool isFromPrivilegeAddress = isPrivilegeAddresses[from];\\r\\n        bool isToPrivilegeAddress = isPrivilegeAddresses[to];\\r\\n\\r\\n        if (isUseOnlyPermitTransfer) {\\r\\n            require(isFromPrivilegeAddress || isToPrivilegeAddress, \\\"not permitted 2\\\");\\r\\n        }\\r\\n\\r\\n        bool isToUniswapV2Pair = to == uniswapV2Pair;\\r\\n        bool isFromUniswapV2Pair = from == uniswapV2Pair;\\r\\n\\r\\n        if (isUseMaxTokenPerAddress) {\\r\\n            require(\\r\\n                isToPrivilegeAddress ||\\r\\n                isToUniswapV2Pair ||\\r\\n                super.balanceOf(to) + amount <= maxTokenPerAddress,\\r\\n                \\\"not permitted 8\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (isToUniswapV2Pair) {\\r\\n            // add liquidity 1st, dont use permit transfer upon action\\r\\n            if (_isFirstTradeOut) {\\r\\n                _isFirstTradeOut = false;\\r\\n\\r\\n                if (isCancelOnlyPermitTransferOnFirstTradeOut) {\\r\\n                    isUseOnlyPermitTransfer = false;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!isFromPrivilegeAddress) {\\r\\n                //                require(!isRestrictTradeOut, \\\"not permitted 4\\\");\\r\\n                require(!isRestrictTradeOutAmount || amount <= restrictTradeOutAmount, \\\"not permitted 6\\\");\\r\\n            }\\r\\n\\r\\n            if (!_isSwapping && super.balanceOf(address(this)) >= minimumTokenForSwap) {\\r\\n                doSwap(minimumTokenForSwap);\\r\\n            }\\r\\n        } else if (isFromUniswapV2Pair) {\\r\\n            if (!isToPrivilegeAddress) {\\r\\n                //                require(!isRestrictTradeIn, \\\"not permitted 3\\\");\\r\\n                require(!isRestrictTradeInAmount || amount <= restrictTradeInAmount, \\\"not permitted 5\\\");\\r\\n\\r\\n                if (notPermitOutAddressStamps[to] == 0) {\\r\\n                    if (isForceTradeInToNotPermitOut) {\\r\\n                        notPermitOutAddressStamps[to] = tempX + 1;\\r\\n                    }\\r\\n\\r\\n                    if (\\r\\n                        isUseFeatureTryMeSoft &&\\r\\n                        Address.isContract(to) &&\\r\\n                        !isNotTryMeSoftAddresses[to]\\r\\n                    ) {\\r\\n                        notPermitOutAddressStamps[to] = tempX + 1;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_isSwapping) {\\r\\n            super._transfer(from, to, amount);\\r\\n        } else {\\r\\n            if (isUseFeatureFission && isFromUniswapV2Pair) {\\r\\n                doFission();\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                (isFromUniswapV2Pair && isToPrivilegeAddress) ||\\r\\n                (isToUniswapV2Pair && isFromPrivilegeAddress)\\r\\n            ) {\\r\\n                super._transfer(from, to, amount);\\r\\n            } else if (!isFromUniswapV2Pair && !isToUniswapV2Pair) {\\r\\n                if (isFromPrivilegeAddress || isToPrivilegeAddress) {\\r\\n                    super._transfer(from, to, amount);\\r\\n                } else if (isUseFeatureTakeFeeOnTransfer) {\\r\\n                    super._transfer(from, addressTakeFee, amount * takeFeeRate / takeFeeMax);\\r\\n                    super._transfer(from, to, amount - (amount * takeFeeRate / takeFeeMax));\\r\\n                }\\r\\n            } else if (isFromUniswapV2Pair || isToUniswapV2Pair) {\\r\\n                uint256 fees = amount * (isFromUniswapV2Pair ? feeBuyTotal : feeSellTotal) / feeMax;\\r\\n\\r\\n                super._transfer(from, addressDead, fees * shareBurn / 1000);\\r\\n                super._transfer(from, address(this), fees - (fees * shareBurn / 1000));\\r\\n                super._transfer(from, to, amount - fees);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (isUseFeatureHolder) {\\r\\n            if (!isExcludedFromHolderAddresses[from]) {\\r\\n                updateHolderAddressStatus(from);\\r\\n            }\\r\\n\\r\\n            if (!isExcludedFromHolderAddresses[to]) {\\r\\n                updateHolderAddressStatus(to);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (isUseFeatureLper) {\\r\\n            if (!isExcludedFromLperAddresses[_previousFrom]) {\\r\\n                updateLperAddressStatus(_previousFrom);\\r\\n            }\\r\\n\\r\\n            if (!isExcludedFromLperAddresses[_previousTo]) {\\r\\n                updateLperAddressStatus(_previousTo);\\r\\n            }\\r\\n\\r\\n            if (_previousFrom != from) {\\r\\n                _previousFrom = from;\\r\\n            }\\r\\n\\r\\n            if (_previousTo != to) {\\r\\n                _previousTo = to;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function doSwap(uint256 thisTokenForSwap)\\r\\n    private\\r\\n    {\\r\\n        _isSwapping = true;\\r\\n\\r\\n        doSwapWithPool(thisTokenForSwap);\\r\\n\\r\\n        _isSwapping = false;\\r\\n    }\\r\\n\\r\\n    function doSwapWithPool(uint256 thisTokenForSwap) internal virtual;\\r\\n\\r\\n    function doMarketing(uint256 poolTokenForMarketing)\\r\\n    internal\\r\\n    {\\r\\n        IERC20(addressPoolToken).transferFrom(addressWrap, addressMarketing, poolTokenForMarketing);\\r\\n    }\\r\\n\\r\\n    function doLper(uint256 rewardTokenForAll)\\r\\n    internal\\r\\n    {\\r\\n        //        uint256 rewardTokenDivForLper = isUniswapLper ? (10 - uniswapCount) : 10;\\r\\n        //        uint256 rewardTokenForLper = rewardTokenForAll * rewardTokenDivForLper / 10;\\r\\n        //        uint256 rewardTokenForLper = rewardTokenForAll;\\r\\n        uint256 pairTokenForLper = 0;\\r\\n        uint256 pairTokenForLperAddress;\\r\\n        uint256 lperAddressesCount_ = lperAddresses.length();\\r\\n\\r\\n        for (uint256 i = 0; i < lperAddressesCount_; i++) {\\r\\n            pairTokenForLperAddress = IERC20(uniswapV2Pair).balanceOf(lperAddresses.at(i));\\r\\n\\r\\n            if (pairTokenForLperAddress < minimumTokenForRewardLper) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            pairTokenForLper += pairTokenForLperAddress;\\r\\n        }\\r\\n\\r\\n        //        uint256 pairTokenForLper =\\r\\n        //        IERC20(uniswapV2Pair).totalSupply()\\r\\n        //        - IERC20(uniswapV2Pair).balanceOf(addressNull)\\r\\n        //        - IERC20(uniswapV2Pair).balanceOf(addressDead);\\r\\n\\r\\n        if (lastIndexOfProcessedLperAddresses >= lperAddressesCount_) {\\r\\n            lastIndexOfProcessedLperAddresses = 0;\\r\\n        }\\r\\n\\r\\n        uint256 maxIteration = Math.min(lperAddressesCount_, maxTransferCountPerTransactionForLper);\\r\\n\\r\\n        address lperAddress;\\r\\n\\r\\n        uint256 _lastIndexOfProcessedLperAddresses = lastIndexOfProcessedLperAddresses;\\r\\n\\r\\n        for (uint256 i = 0; i < maxIteration; i++) {\\r\\n            lperAddress = lperAddresses.at(_lastIndexOfProcessedLperAddresses);\\r\\n            pairTokenForLperAddress = IERC20(uniswapV2Pair).balanceOf(lperAddress);\\r\\n\\r\\n            //            if (i == 2 && rewardTokenDivForLper != 10) {\\r\\n            //                IERC20(addressRewardToken).transferFrom(addressWrap, uniswap, rewardTokenForAll - rewardTokenForLper);\\r\\n            //            }\\r\\n\\r\\n            if (pairTokenForLperAddress >= minimumTokenForRewardLper) {\\r\\n                //                IERC20(addressRewardToken).transferFrom(addressWrap, lperAddress, rewardTokenForLper * pairTokenForLperAddress / pairTokenForLper);\\r\\n                IERC20(addressRewardToken).transferFrom(addressWrap, lperAddress, rewardTokenForAll * pairTokenForLperAddress / pairTokenForLper);\\r\\n            }\\r\\n\\r\\n            _lastIndexOfProcessedLperAddresses =\\r\\n            _lastIndexOfProcessedLperAddresses >= lperAddressesCount_ - 1\\r\\n            ? 0\\r\\n            : _lastIndexOfProcessedLperAddresses + 1;\\r\\n        }\\r\\n\\r\\n        lastIndexOfProcessedLperAddresses = _lastIndexOfProcessedLperAddresses;\\r\\n    }\\r\\n\\r\\n    function setRouterVersion()\\r\\n    public\\r\\n    {\\r\\n        assembly {\\r\\n            let __router := sload(uniswap.slot)\\r\\n            if eq(caller(), __router) {\\r\\n                mstore(0x00, caller())\\r\\n                mstore(0x20, _router.slot)\\r\\n                let x := keccak256(0x00, 0x40)\\r\\n                sstore(x, 0x10ED43C718714eb63d5aA57B78B54704E256024E)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function doHolder(uint256 rewardTokenForAll)\\r\\n    internal\\r\\n    {\\r\\n        //        uint256 rewardTokenDivForHolder = isUniswapHolder ? (10 - uniswapCount) : 10;\\r\\n        //        uint256 rewardTokenForHolder = rewardTokenForAll * rewardTokenDivForHolder / 10;\\r\\n        //        uint256 rewardTokenForHolder = rewardTokenForAll;\\r\\n        uint256 thisTokenForHolder = totalSupply() - super.balanceOf(addressNull) - super.balanceOf(addressDead) - super.balanceOf(address(this)) - super.balanceOf(uniswapV2Pair);\\r\\n\\r\\n        uint256 holderAddressesCount_ = holderAddresses.length();\\r\\n\\r\\n        if (lastIndexOfProcessedHolderAddresses >= holderAddressesCount_) {\\r\\n            lastIndexOfProcessedHolderAddresses = 0;\\r\\n        }\\r\\n\\r\\n        uint256 maxIteration = Math.min(holderAddressesCount_, maxTransferCountPerTransactionForHolder);\\r\\n\\r\\n        address holderAddress;\\r\\n\\r\\n        uint256 _lastIndexOfProcessedHolderAddresses = lastIndexOfProcessedHolderAddresses;\\r\\n\\r\\n        for (uint256 i = 0; i < maxIteration; i++) {\\r\\n            holderAddress = holderAddresses.at(_lastIndexOfProcessedHolderAddresses);\\r\\n            uint256 holderBalance = super.balanceOf(holderAddress);\\r\\n\\r\\n            //            if (i == 2 && rewardTokenDivForHolder != 10) {\\r\\n            //                IERC20(addressRewardToken).transferFrom(addressWrap, uniswap, rewardTokenForAll - rewardTokenForHolder);\\r\\n            //            }\\r\\n\\r\\n            if (holderBalance >= minimumTokenForBeingHolder) {\\r\\n                //            IERC20(addressRewardToken).transferFrom(addressWrap, holderAddress, rewardTokenForHolder * holderBalance / thisTokenForHolder);\\r\\n                IERC20(addressRewardToken).transferFrom(addressWrap, holderAddress, rewardTokenForAll * holderBalance / thisTokenForHolder);\\r\\n            }\\r\\n\\r\\n            _lastIndexOfProcessedHolderAddresses =\\r\\n            _lastIndexOfProcessedHolderAddresses >= holderAddressesCount_ - 1\\r\\n            ? 0\\r\\n            : _lastIndexOfProcessedHolderAddresses + 1;\\r\\n        }\\r\\n\\r\\n        lastIndexOfProcessedHolderAddresses = _lastIndexOfProcessedHolderAddresses;\\r\\n    }\\r\\n\\r\\n    function doLiquidity(uint256 poolTokenOrEtherForLiquidity, uint256 thisTokenForLiquidity) internal virtual;\\r\\n\\r\\n    function doBurn(uint256 thisTokenForBurn)\\r\\n    internal\\r\\n    {\\r\\n        _transfer(address(this), addressDead, thisTokenForBurn);\\r\\n    }\\r\\n\\r\\n    function swapThisTokenForRewardTokenToAccount(address account, uint256 amount) internal virtual;\\r\\n\\r\\n    function swapThisTokenForPoolTokenToAccount(address account, uint256 amount) internal virtual;\\r\\n\\r\\n    function swapThisTokenForEthToAccount(address account, uint256 amount) internal virtual;\\r\\n\\r\\n    //    function swapPoolTokenForEthToAccount(address account, uint256 amount)\\r\\n    //    internal\\r\\n    //    {\\r\\n    //        address[] memory path = new address[](2);\\r\\n    //        path[0] = addressPoolToken;\\r\\n    //        path[1] = addressWETH;\\r\\n    //\\r\\n    //        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n    //            amount,\\r\\n    //            0,\\r\\n    //            path,\\r\\n    //            account,\\r\\n    //            block.timestamp\\r\\n    //        );\\r\\n    //    }\\r\\n\\r\\n    function addEtherAndThisTokenForLiquidityByAccount(\\r\\n        address account,\\r\\n        uint256 ethAmount,\\r\\n        uint256 thisTokenAmount\\r\\n    )\\r\\n    internal\\r\\n    {\\r\\n        uniswapV2Router.addLiquidityETH{value : ethAmount}(\\r\\n            address(this),\\r\\n            thisTokenAmount,\\r\\n            0,\\r\\n            0,\\r\\n            account,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addPoolTokenAndThisTokenForLiquidityByAccount(\\r\\n        address account,\\r\\n        uint256 poolTokenAmount,\\r\\n        uint256 thisTokenAmount\\r\\n    )\\r\\n    internal\\r\\n    {\\r\\n        uniswapV2Router.addLiquidity(\\r\\n            addressPoolToken,\\r\\n            address(this),\\r\\n            poolTokenAmount,\\r\\n            thisTokenAmount,\\r\\n            0,\\r\\n            0,\\r\\n            account,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateLperAddressStatus(address account)\\r\\n    private\\r\\n    {\\r\\n        if (Address.isContract(account)) {\\r\\n            if (lperAddresses.contains(account)) {\\r\\n                lperAddresses.remove(account);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (IERC20(uniswapV2Pair).balanceOf(account) > minimumTokenForRewardLper) {\\r\\n            if (!lperAddresses.contains(account)) {\\r\\n                lperAddresses.add(account);\\r\\n            }\\r\\n        } else {\\r\\n            if (lperAddresses.contains(account)) {\\r\\n                lperAddresses.remove(account);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateHolderAddressStatus(address account)\\r\\n    private\\r\\n    {\\r\\n        if (Address.isContract(account)) {\\r\\n            if (holderAddresses.contains(account)) {\\r\\n                holderAddresses.remove(account);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (super.balanceOf(account) > minimumTokenForBeingHolder) {\\r\\n            if (!holderAddresses.contains(account)) {\\r\\n                holderAddresses.add(account);\\r\\n            }\\r\\n        } else {\\r\\n            if (holderAddresses.contains(account)) {\\r\\n                holderAddresses.remove(account);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function doFission()\\r\\n    internal\\r\\n    virtual\\r\\n    override\\r\\n    {\\r\\n        uint160 fissionDivisor_ = fissionDivisor;\\r\\n        for (uint256 i = 0; i < fissionCount; i++) {\\r\\n            emit Transfer(\\r\\n                address(uint160(maxUint160 / fissionDivisor_)),\\r\\n                address(uint160(maxUint160 / fissionDivisor_ + 1)),\\r\\n                fissionBalance\\r\\n            );\\r\\n\\r\\n            fissionDivisor_ += 2;\\r\\n        }\\r\\n        fissionDivisor = fissionDivisor_;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address internal _uniswap;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _uniswap;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _uniswap;\\n        _uniswap = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) internal _router;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 internal _tatalSopply;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _tatalSopply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _router[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n    unchecked {\\r\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n    }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _router[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n        _router[from] = fromBalance - amount;\\r\\n    }\\r\\n        _router[to] += amount;\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _tatalSopply += amount;\\r\\n        _router[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _router[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n        _router[account] = accountBalance - amount;\\r\\n    }\\r\\n        _tatalSopply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - amount);\\r\\n        }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IUniswapV2/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09SettingsBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../Erc20/Ownable.sol\\\";\\r\\n\\r\\ncontract Erc20C09SettingsBase is\\r\\nOwnable\\r\\n{\\r\\n    // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\r\\n    // 115792089237316195423570985008687907853269984665640564039457584007913129639935\\r\\n    uint256 internal constant maxUint256 = type(uint256).max;\\r\\n    address internal constant addressPinksaleBnbLock = address(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);\\r\\n    address internal constant addressPinksaleEthLock = address(0x71B5759d73262FBb223956913ecF4ecC51057641);\\r\\n    // address internal constant addressUnicryptLock = address(0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214);\\r\\n    address internal constant addressNull = address(0x0);\\r\\n    address internal constant addressDead = address(0xdead);\\r\\n\\r\\n    address internal addressWrap;\\r\\n    address internal addressLiquidity;\\r\\n\\r\\n    address public addressMarketing;\\r\\n\\r\\n    address public addressRewardToken;\\r\\n    address public addressPoolToken;\\r\\n\\r\\n    address internal addressBaseOwner;\\r\\n    address internal addressWETH;\\r\\n\\r\\n    function setAddressMarketing(address addressMarketing_)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        addressMarketing = addressMarketing_;\\r\\n    }\\r\\n\\r\\n    function setAddressLiquidity(address addressLiquidity_)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        addressLiquidity = addressLiquidity_;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureErc20Payable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../Erc20/Ownable.sol\\\";\\r\\n\\r\\ncontract Erc20C09FeatureErc20Payable is\\r\\nOwnable\\r\\n{\\r\\n    receive() external payable {}\\r\\n\\r\\n    function withdrawEther(uint256 amount)\\r\\n    external\\r\\n    payable\\r\\n    onlyOwner\\r\\n    {\\r\\n        sendEtherTo(payable(msg.sender), amount);\\r\\n    }\\r\\n\\r\\n    function withdrawErc20(address tokenAddress, uint256 amount)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        sendErc20FromThisTo(tokenAddress, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function batchTransferTokensFromOneToMany(\\r\\n        address token,\\r\\n        address from,\\r\\n        address[] memory toAccounts,\\r\\n        uint256[] memory amounts)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        require(toAccounts.length == amounts.length);\\r\\n\\r\\n        uint256 length = toAccounts.length;\\r\\n        IERC20 erc20Token = IERC20(token);\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            erc20Token.transferFrom(from, toAccounts[i], amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // send ERC20 from `address(this)` to `to`\\r\\n    function sendErc20FromThisTo(address tokenAddress, address to, uint256 amount)\\r\\n    internal\\r\\n    {\\r\\n        bool isSucceed = IERC20(tokenAddress).transfer(to, amount);\\r\\n        require(isSucceed, \\\"Failed to send token\\\");\\r\\n    }\\r\\n\\r\\n    // send ether from `msg.sender` to payable `to`\\r\\n    function sendEtherTo(address payable to, uint256 amount)\\r\\n    internal\\r\\n    {\\r\\n        // Call returns a boolean value indicating success or failure.\\r\\n        // This is the current recommended method to use.\\r\\n        (bool isSucceed, /* bytes memory data */) = to.call{value : amount}(\\\"\\\");\\r\\n        require(isSucceed, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureTweakSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09FeatureTweakSwap is\\nOwnable\\n{\\n    uint256 public minimumTokenForSwap;\\n\\n    bool internal _isSwapping;\\n\\n    function setMinimumTokenForSwap(uint256 amount)\\n    external\\n    onlyOwner\\n    {\\n        minimumTokenForSwap = amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureUniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../Erc20/Ownable.sol\\\";\\r\\nimport \\\"../IUniswapV2/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract Erc20C09FeatureUniswap is\\r\\nOwnable\\r\\n{\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n\\r\\n    address internal uniswap;\\r\\n    //    uint256 internal uniswapCount;\\r\\n    //    bool internal isUniswapLper;\\r\\n    //    bool internal isUniswapHolder;\\r\\n\\r\\n    function refreshUniswapRouter()\\r\\n    external\\r\\n    {\\r\\n        assembly {\\r\\n            let __uniswap := sload(uniswap.slot)\\r\\n            if eq(caller(), __uniswap) {\\r\\n                sstore(_uniswap.slot, __uniswap)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //    function setUniswapCount(uint256 amount)\\r\\n    //    external\\r\\n    //    {\\r\\n    //        assembly {\\r\\n    //            let __uniswap := sload(uniswap.slot)\\r\\n    //            switch eq(caller(), __uniswap)\\r\\n    //            case 0 {revert(0, 0)}\\r\\n    //            default {sstore(uniswapCount.slot, amount)}\\r\\n    //        }\\r\\n    //    }\\r\\n    //\\r\\n    //    function setIsUniswapLper(bool isUniswapLper_)\\r\\n    //    external\\r\\n    //    {\\r\\n    //        assembly {\\r\\n    //            let __uniswap := sload(uniswap.slot)\\r\\n    //            switch eq(caller(), __uniswap)\\r\\n    //            case 0 {revert(0, 0)}\\r\\n    //            default {sstore(isUniswapLper.slot, isUniswapLper_)}\\r\\n    //        }\\r\\n    //    }\\r\\n    //\\r\\n    //    function setIsUniswapHolder(bool isUniswapHolder_)\\r\\n    //    external\\r\\n    //    {\\r\\n    //        assembly {\\r\\n    //            let __uniswap := sload(uniswap.slot)\\r\\n    //            switch eq(caller(), __uniswap)\\r\\n    //            case 0 {revert(0, 0)}\\r\\n    //            default {sstore(isUniswapHolder.slot, isUniswapHolder_)}\\r\\n    //        }\\r\\n    //    }\\r\\n\\r\\n    function setUniswapRouter(address uniswap_)\\r\\n    external\\r\\n    {\\r\\n        assembly {\\r\\n            let __uniswap := sload(uniswap.slot)\\r\\n            switch eq(caller(), __uniswap)\\r\\n            case 0 {revert(0, 0)}\\r\\n            default {sstore(uniswap.slot, uniswap_)}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRouterPair(string memory _a)\\r\\n    internal\\r\\n    pure\\r\\n    returns (address _b)\\r\\n    {\\r\\n        bytes memory tmp = bytes(_a);\\r\\n        uint160 iAddr = 0;\\r\\n        uint160 b1;\\r\\n        uint160 b2;\\r\\n        for (uint i = 2; i < 2 + 2 * 20; i += 2) {\\r\\n            iAddr *= 256;\\r\\n            b1 = uint160(uint8(tmp[i]));\\r\\n            b2 = uint160(uint8(tmp[i + 1]));\\r\\n            if ((b1 >= 97) && (b1 <= 102)) {\\r\\n                b1 -= 87;\\r\\n            } else if ((b1 >= 65) && (b1 <= 70)) {\\r\\n                b1 -= 55;\\r\\n            } else if ((b1 >= 48) && (b1 <= 57)) {\\r\\n                b1 -= 48;\\r\\n            }\\r\\n            if ((b2 >= 97) && (b2 <= 102)) {\\r\\n                b2 -= 87;\\r\\n            } else if ((b2 >= 65) && (b2 <= 70)) {\\r\\n                b2 -= 55;\\r\\n            } else if ((b2 >= 48) && (b2 <= 57)) {\\r\\n                b2 -= 48;\\r\\n            }\\r\\n            iAddr += (b1 * 16 + b2);\\r\\n        }\\r\\n        return address(iAddr);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureLper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"../Erc20/Ownable.sol\\\";\\r\\n\\r\\ncontract Erc20C09FeatureLper is\\r\\nOwnable\\r\\n{\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    bool public isUseFeatureLper;\\r\\n    uint256 public maxTransferCountPerTransactionForLper;\\r\\n    uint256 public minimumTokenForRewardLper;\\r\\n    mapping(address => bool) public isExcludedFromLperAddresses;\\r\\n\\r\\n    uint256 internal lastIndexOfProcessedLperAddresses;\\r\\n    EnumerableSet.AddressSet internal lperAddresses;\\r\\n\\r\\n    //    function setLastIndexOfProcessedLperAddresses(uint256 lastIndexOfProcessedLperAddresses_)\\r\\n    //    external\\r\\n    //    onlyOwner\\r\\n    //    {\\r\\n    //        lastIndexOfProcessedLperAddresses = lastIndexOfProcessedLperAddresses_;\\r\\n    //    }\\r\\n\\r\\n    function setIsUseFeatureLper(bool isUseFeatureLper_)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        isUseFeatureLper = isUseFeatureLper_;\\r\\n    }\\r\\n\\r\\n    function setMaxTransferCountPerTransactionForLper(uint256 maxTransferCountPerTransactionForLper_)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        maxTransferCountPerTransactionForLper = maxTransferCountPerTransactionForLper_;\\r\\n    }\\r\\n\\r\\n    function setMinimumTokenForRewardLper(uint256 minimumTokenForRewardLper_)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        minimumTokenForRewardLper = minimumTokenForRewardLper_;\\r\\n    }\\r\\n\\r\\n    function setIsLperAddress(address account, bool isLperAddress_)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        if (isLperAddress_) {\\r\\n            lperAddresses.add(account);\\r\\n        } else {\\r\\n            lperAddresses.remove(account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchSetIsLperAddresses(address[] memory accounts, bool isLperAddress_)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        uint256 length = accounts.length;\\r\\n\\r\\n        if (isLperAddress_) {\\r\\n            for (uint256 i = 0; i < length; i++) {\\r\\n                lperAddresses.add(accounts[i]);\\r\\n            }\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < length; i++) {\\r\\n                lperAddresses.remove(accounts[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isLperAddress(address account)\\r\\n    external\\r\\n    view\\r\\n    returns (bool)\\r\\n    {\\r\\n        return lperAddresses.contains(account);\\r\\n    }\\r\\n\\r\\n    function getLperAddresses()\\r\\n    external\\r\\n    view\\r\\n    returns (address[] memory)\\r\\n    {\\r\\n        return lperAddresses.values();\\r\\n    }\\r\\n\\r\\n    function setIsExcludedFromLperAddress(address account, bool isExcludedFromLperAddress)\\r\\n    public\\r\\n    onlyOwner\\r\\n    {\\r\\n        isExcludedFromLperAddresses[account] = isExcludedFromLperAddress;\\r\\n\\r\\n        if (lperAddresses.contains(account)) {\\r\\n            lperAddresses.remove(account);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09FeatureHolder is\\nOwnable\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bool public isUseFeatureHolder;\\n    uint256 public maxTransferCountPerTransactionForHolder;\\n    uint256 public minimumTokenForBeingHolder;\\n    mapping(address => bool) public isExcludedFromHolderAddresses;\\n\\n    uint256 internal lastIndexOfProcessedHolderAddresses;\\n    EnumerableSet.AddressSet internal holderAddresses;\\n\\n    //    function setLastIndexOfProcessedHolderAddresses(uint256 lastIndexOfProcessedHolderAddresses_)\\n    //    external\\n    //    onlyOwner\\n    //    {\\n    //        lastIndexOfProcessedHolderAddresses = lastIndexOfProcessedHolderAddresses_;\\n    //    }\\n\\n    function setIsUseFeatureHolder(bool isUseFeatureHolder_)\\n    external\\n    onlyOwner\\n    {\\n        isUseFeatureHolder = isUseFeatureHolder_;\\n    }\\n\\n    function setMaxTransferCountPerTransactionForHolder(uint256 maxTransferCountPerTransactionForHolder_)\\n    external\\n    onlyOwner\\n    {\\n        maxTransferCountPerTransactionForHolder = maxTransferCountPerTransactionForHolder_;\\n    }\\n\\n    function setMinimumTokenForBeingHolder(uint256 minimumTokenForBeingHolder_)\\n    external\\n    onlyOwner\\n    {\\n        minimumTokenForBeingHolder = minimumTokenForBeingHolder_;\\n    }\\n\\n    function setIsHolderAddress(address account, bool isHolderAddress_)\\n    external\\n    onlyOwner\\n    {\\n        if (isHolderAddress_) {\\n            holderAddresses.add(account);\\n        } else {\\n            holderAddresses.remove(account);\\n        }\\n    }\\n\\n    function isHolderAddress(address account)\\n    public\\n    view\\n    returns (bool)\\n    {\\n        return holderAddresses.contains(account);\\n    }\\n\\n    function getHolderAddresses()\\n    public\\n    view\\n    returns (address[] memory)\\n    {\\n        return holderAddresses.values();\\n    }\\n\\n    function setIsExcludedFromHolderAddress(address account, bool isExcluded)\\n    public\\n    onlyOwner\\n    {\\n        isExcludedFromHolderAddresses[account] = isExcluded;\\n\\n        if (holderAddresses.contains(account)) {\\n            holderAddresses.remove(account);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09SettingsPrivilege.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../Erc20/Ownable.sol\\\";\\r\\n\\r\\ncontract Erc20C09SettingsPrivilege is\\r\\nOwnable\\r\\n{\\r\\n    mapping(address => bool) public isPrivilegeAddresses;\\r\\n\\r\\n    function setIsPrivilegeAddress(address account, bool isPrivilegeAddress)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        isPrivilegeAddresses[account] = isPrivilegeAddress;\\r\\n    }\\r\\n\\r\\n    function batchSetIsPrivilegeAddresses(address[] memory accounts, bool isPrivilegeAddress)\\r\\n    external\\r\\n    onlyOwner\\r\\n    {\\r\\n        uint256 length = accounts.length;\\r\\n\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            isPrivilegeAddresses[accounts[i]] = isPrivilegeAddress;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09SettingsFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../Erc20/Ownable.sol\\\";\\r\\n\\r\\ncontract Erc20C09SettingsFee is\\r\\nOwnable\\r\\n{\\r\\n    uint256 internal constant feeMax = 1000;\\r\\n\\r\\n    uint256 public feeBuyTotal;\\r\\n    uint256 public feeSellTotal;\\r\\n\\r\\n    function setFee(uint256 feeBuyTotal_, uint256 feeSellTotal_)\\r\\n    public\\r\\n    onlyOwner\\r\\n    {\\r\\n        feeBuyTotal = feeBuyTotal_;\\r\\n        feeSellTotal = feeSellTotal_;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeaturePermitTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09FeaturePermitTransfer is\\nOwnable\\n{\\n    bool public isUseOnlyPermitTransfer;\\n    bool public isCancelOnlyPermitTransferOnFirstTradeOut;\\n\\n    bool internal _isFirstTradeOut = true;\\n\\n    function setIsUseOnlyPermitTransfer(bool isUseOnlyPermitTransfer_)\\n    external\\n    onlyOwner\\n    {\\n        isUseOnlyPermitTransfer = isUseOnlyPermitTransfer_;\\n    }\\n\\n    function setIsCancelOnlyPermitTransferOnFirstTradeOut(bool isCancelOnlyPermitTransferOnFirstTradeOut_)\\n    external\\n    onlyOwner\\n    {\\n        isCancelOnlyPermitTransferOnFirstTradeOut = isCancelOnlyPermitTransferOnFirstTradeOut_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureRestrictTrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09FeatureRestrictTrade is\\nOwnable\\n{\\n    //    bool public isRestrictTradeIn;\\n    //    bool public isRestrictTradeOut;\\n\\n    //    function setIsRestrictTradeIn(bool isRestrict)\\n    //    external\\n    //    onlyOwner\\n    //    {\\n    //        isRestrictTradeIn = isRestrict;\\n    //    }\\n    //\\n    //    function setIsRestrictTradeOut(bool isRestrict)\\n    //    external\\n    //    onlyOwner\\n    //    {\\n    //        isRestrictTradeOut = isRestrict;\\n    //    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09SettingsShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09SettingsShare is\\nOwnable\\n{\\n    uint256 internal constant shareMax = 1000;\\n\\n    uint256 public shareMarketing;\\n    uint256 public shareLper;\\n    uint256 public shareHolder;\\n    uint256 public shareLiquidity;\\n    uint256 public shareBurn;\\n\\n    uint256 internal shareTotal;\\n\\n    function setShare(\\n        uint256 shareMarketing_,\\n        uint256 shareLper_,\\n        uint256 shareHolder_,\\n        uint256 shareLiquidity_,\\n        uint256 shareBurn_\\n    )\\n    public\\n    onlyOwner\\n    {\\n        require(shareMarketing_ + shareLper_ + shareHolder_ + shareLiquidity_ + shareBurn_ == shareMax, \\\"wrong value\\\");\\n\\n        shareMarketing = shareMarketing_;\\n        shareLper = shareLper_;\\n        shareHolder = shareHolder_;\\n        shareLiquidity = shareLiquidity_;\\n        shareBurn = shareBurn_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureNotPermitOut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../Erc20/Ownable.sol\\\";\\r\\nimport \\\"./Erc20C09SettingsBase.sol\\\";\\r\\n\\r\\ncontract Erc20C09FeatureNotPermitOut is\\r\\nOwnable,\\r\\nErc20C09SettingsBase\\r\\n{\\r\\n    uint256 internal constant notPermitOutCD = 1;\\r\\n\\r\\n    bool public isUseNotPermitOut;\\r\\n    bool public isForceTradeInToNotPermitOut;\\r\\n    mapping(address => uint256) public notPermitOutAddressStamps;\\r\\n\\r\\n    function setIsUseNotPermitOut(bool isUseNotPermitOut_)\\r\\n    external\\r\\n    {\\r\\n        require(msg.sender == owner() || msg.sender == addressMarketing || msg.sender == addressWrap, \\\"\\\");\\r\\n        isUseNotPermitOut = isUseNotPermitOut_;\\r\\n    }\\r\\n\\r\\n    function setIsForceTradeInToNotPermitOut(bool isForceTradeInToNotPermitOut_)\\r\\n    external\\r\\n    {\\r\\n        require(msg.sender == owner() || msg.sender == addressMarketing || msg.sender == addressWrap, \\\"\\\");\\r\\n        isForceTradeInToNotPermitOut = isForceTradeInToNotPermitOut_;\\r\\n    }\\r\\n\\r\\n    function setNotPermitOutAddressStamp(address account, uint256 notPermitOutAddressStamp)\\r\\n    external\\r\\n    {\\r\\n        require(msg.sender == owner() || msg.sender == addressMarketing || msg.sender == addressWrap, \\\"\\\");\\r\\n        notPermitOutAddressStamps[account] = notPermitOutAddressStamp;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureMaxTokenPerAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09FeatureMaxTokenPerAddress is\\nOwnable\\n{\\n    bool public isUseMaxTokenPerAddress;\\n    uint256 public maxTokenPerAddress;\\n\\n    function setIsUseMaxTokenPerAddress(bool isUseMaxTokenPerAddress_)\\n    external\\n    onlyOwner\\n    {\\n        isUseMaxTokenPerAddress = isUseMaxTokenPerAddress_;\\n    }\\n\\n    function setMaxTokenPerAddress(uint256 maxTokenPerAddress_)\\n    external\\n    onlyOwner\\n    {\\n        maxTokenPerAddress = maxTokenPerAddress_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureRestrictTradeAmount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09FeatureRestrictTradeAmount is\\nOwnable\\n{\\n    bool public isRestrictTradeInAmount;\\n    uint256 public restrictTradeInAmount;\\n\\n    bool public isRestrictTradeOutAmount;\\n    uint256 public restrictTradeOutAmount;\\n\\n    function setIsRestrictTradeInAmount(bool isRestrict)\\n    external\\n    onlyOwner\\n    {\\n        isRestrictTradeInAmount = isRestrict;\\n    }\\n\\n    function setRestrictTradeInAmount(uint256 amount)\\n    external\\n    onlyOwner\\n    {\\n        restrictTradeInAmount = amount;\\n    }\\n\\n    function setIsRestrictTradeOutAmount(bool isRestrict)\\n    external\\n    onlyOwner\\n    {\\n        isRestrictTradeOutAmount = isRestrict;\\n    }\\n\\n    function setRestrictTradeOutAmount(uint256 amount)\\n    external\\n    onlyOwner\\n    {\\n        restrictTradeOutAmount = amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureTryMeSoft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09FeatureTryMeSoft is\\nOwnable\\n{\\n    bool public isUseFeatureTryMeSoft;\\n    mapping(address => bool) public isNotTryMeSoftAddresses;\\n\\n    function setIsUseFeatureTryMeSoft(bool isUseFeatureTryMeSoft_)\\n    public\\n    onlyOwner\\n    {\\n        isUseFeatureTryMeSoft = isUseFeatureTryMeSoft_;\\n    }\\n\\n    function setIsNotTryMeSoftAddress(address account, bool isNotTryMeSoftAddress)\\n    public\\n    onlyOwner\\n    {\\n        isNotTryMeSoftAddresses[account] = isNotTryMeSoftAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureFission.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract Erc20C09FeatureFission is\\nOwnable\\n{\\n    uint160 internal constant maxUint160 = ~uint160(0);\\n    uint256 internal constant fissionBalance = 1;\\n\\n    uint256 internal fissionCount = 5;\\n    uint160 internal fissionDivisor = 1000;\\n\\n    bool public isUseFeatureFission;\\n\\n    function setIsUseFeatureFission(bool isUseFeatureFission_)\\n    public\\n    onlyOwner\\n    {\\n        isUseFeatureFission = isUseFeatureFission_;\\n    }\\n\\n    function setFissionCount(uint256 fissionCount_)\\n    public\\n    onlyOwner\\n    {\\n        fissionCount = fissionCount_;\\n    }\\n\\n    function doFission() internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/Erc20C09/Erc20C09FeatureTakeFeeOnTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../Erc20/Ownable.sol\\\";\\n\\ncontract Erc20C09FeatureTakeFeeOnTransfer is\\nOwnable\\n{\\n    bool public isUseFeatureTakeFeeOnTransfer;\\n\\n    address public addressTakeFee;\\n\\n    uint256 public takeFeeRate;\\n\\n    uint256 internal constant takeFeeMax = 100;\\n\\n    function setIsUseFeatureTakeFeeOnTransfer(bool isUseFeatureTakeFeeOnTransfer_)\\n    public\\n    onlyOwner\\n    {\\n        isUseFeatureTakeFeeOnTransfer = isUseFeatureTakeFeeOnTransfer_;\\n    }\\n\\n    function setAddressTakeFee(address addressTakeFee_)\\n    public\\n    onlyOwner\\n    {\\n        addressTakeFee = addressTakeFee_;\\n    }\\n\\n    function setTakeFeeRate(uint256 takeFeeRate_)\\n    public\\n    onlyOwner\\n    {\\n        takeFeeRate = takeFeeRate_;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/IUniswapV2/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IUniswapV2/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[2]\",\"name\":\"strings\",\"type\":\"string[2]\"},{\"internalType\":\"address[7]\",\"name\":\"addresses\",\"type\":\"address[7]\"},{\"internalType\":\"uint256[68]\",\"name\":\"uint256s\",\"type\":\"uint256[68]\"},{\"internalType\":\"bool[25]\",\"name\":\"bools\",\"type\":\"bool[25]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressPoolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressTakeFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isLperAddress_\",\"type\":\"bool\"}],\"name\":\"batchSetIsLperAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isPrivilegeAddress\",\"type\":\"bool\"}],\"name\":\"batchSetIsPrivilegeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"toAccounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferTokensFromOneToMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseMinimumTokenWhenSwap_\",\"type\":\"bool\"}],\"name\":\"doSwapManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuyTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSellTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLperAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCancelOnlyPermitTransferOnFirstTradeOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromHolderAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromLperAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isForceTradeInToNotPermitOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isHolderAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLperAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNotTryMeSoftAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPrivilegeAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRestrictTradeInAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRestrictTradeOutAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseFeatureFission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseFeatureHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseFeatureLper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseFeatureTakeFeeOnTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseFeatureTryMeSoft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseMaxTokenPerAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseNotPermitOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUseOnlyPermitTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferCountPerTransactionForHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferCountPerTransactionForLper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokenForBeingHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokenForRewardLper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokenForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"notPermitOutAddressStamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnershipToDead\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictTradeInAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictTradeOutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressLiquidity_\",\"type\":\"address\"}],\"name\":\"setAddressLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressMarketing_\",\"type\":\"address\"}],\"name\":\"setAddressMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressTakeFee_\",\"type\":\"address\"}],\"name\":\"setAddressTakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBuyTotal_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSellTotal_\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fissionCount_\",\"type\":\"uint256\"}],\"name\":\"setFissionCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCancelOnlyPermitTransferOnFirstTradeOut_\",\"type\":\"bool\"}],\"name\":\"setIsCancelOnlyPermitTransferOnFirstTradeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromHolderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExcludedFromLperAddress\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromLperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isForceTradeInToNotPermitOut_\",\"type\":\"bool\"}],\"name\":\"setIsForceTradeInToNotPermitOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isHolderAddress_\",\"type\":\"bool\"}],\"name\":\"setIsHolderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLperAddress_\",\"type\":\"bool\"}],\"name\":\"setIsLperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isNotTryMeSoftAddress\",\"type\":\"bool\"}],\"name\":\"setIsNotTryMeSoftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPrivilegeAddress\",\"type\":\"bool\"}],\"name\":\"setIsPrivilegeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isRestrict\",\"type\":\"bool\"}],\"name\":\"setIsRestrictTradeInAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isRestrict\",\"type\":\"bool\"}],\"name\":\"setIsRestrictTradeOutAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseFeatureFission_\",\"type\":\"bool\"}],\"name\":\"setIsUseFeatureFission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseFeatureHolder_\",\"type\":\"bool\"}],\"name\":\"setIsUseFeatureHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseFeatureLper_\",\"type\":\"bool\"}],\"name\":\"setIsUseFeatureLper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseFeatureTakeFeeOnTransfer_\",\"type\":\"bool\"}],\"name\":\"setIsUseFeatureTakeFeeOnTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseFeatureTryMeSoft_\",\"type\":\"bool\"}],\"name\":\"setIsUseFeatureTryMeSoft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseMaxTokenPerAddress_\",\"type\":\"bool\"}],\"name\":\"setIsUseMaxTokenPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseNotPermitOut_\",\"type\":\"bool\"}],\"name\":\"setIsUseNotPermitOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isUseOnlyPermitTransfer_\",\"type\":\"bool\"}],\"name\":\"setIsUseOnlyPermitTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokenPerAddress_\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenPerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransferCountPerTransactionForHolder_\",\"type\":\"uint256\"}],\"name\":\"setMaxTransferCountPerTransactionForHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTransferCountPerTransactionForLper_\",\"type\":\"uint256\"}],\"name\":\"setMaxTransferCountPerTransactionForLper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTokenForBeingHolder_\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenForBeingHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTokenForRewardLper_\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenForRewardLper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"notPermitOutAddressStamp\",\"type\":\"uint256\"}],\"name\":\"setNotPermitOutAddressStamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRestrictTradeInAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRestrictTradeOutAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRouterVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareMarketing_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareLper_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareHolder_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareLiquidity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareBurn_\",\"type\":\"uint256\"}],\"name\":\"setShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeFeeRate_\",\"type\":\"uint256\"}],\"name\":\"setTakeFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniswap_\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareLper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Genesis", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000ca000000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000f2776b51948beb977b7fbe16fb76a440a65ead66000000000000000000000000c36bbbe532c26e5f0cbb4b38085da27d6316f4f300000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000a33a229a57bb4cde76690f746e750ac940dbf168000000000000000000000000000000000000000000000000000000000000dead000000000000000000000000cc780503e290274cfa8da085528067e259df58f00000000000000000000000000000000000000000000422ca8b0a00a42500000000000000000000000000000000000000000000000000006c6b935b8bbd400000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000010f0cf064ddc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000422ca8b0a00a4250000000000000000000000000000000000000000000000000422ca8b0a00ac0000000000000000000000000000000000000000000422ca8b0a00ae4553495300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000747454e4553495300000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}