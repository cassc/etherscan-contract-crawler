{"SourceCode": "/** \r\n\r\n\t$$\\   $$\\ $$$$$$\\ $$$$$$$\\   $$$$$$\\   $$$$$$\\  $$\\   $$\\ \r\n\t$$$\\  $$ |\\_$$  _|$$  __$$\\ $$  __$$\\ $$  __$$\\ $$ |  $$ |\r\n\t$$$$\\ $$ |  $$ |  $$ |  $$ |$$ /  $$ |$$ /  \\__|\\$$\\ $$  |\r\n\t$$ $$\\$$ |  $$ |  $$$$$$$  |$$ |  $$ |\\$$$$$$\\   \\$$$$  / \r\n\t$$ \\$$$$ |  $$ |  $$  __$$< $$ |  $$ | \\____$$\\  $$  $$<  \r\n\t$$ |\\$$$ |  $$ |  $$ |  $$ |$$ |  $$ |$$\\   $$ |$$  /\\$$\\ \r\n\t$$ | \\$$ |$$$$$$\\ $$ |  $$ | $$$$$$  |\\$$$$$$  |$$ /  $$ |\r\n\t\\__|  \\__|\\______|\\__|  \\__| \\______/  \\______/ \\__|  \\__|\r\n                                                          \r\n   #NIROSX\r\n   \r\n   Great features:\r\n   -2% fee auto add to the liquidity pool\r\n   -3% fee auto moved to buyback and team wallet\r\n\r\n   2,500,000,000,000 total supply\r\n   75,000,000,000 tokens limitation for trade and holding, which is 3% of the total supply\r\n   \r\n   2% fee for liquidity will go to an address that the contract creates, and the contract will sell it and add to liquidity automatically.\r\n   3% fee for buyback will go to an address that the contract creates, and the contract will sell it and send to buyback wallet automatically.\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\t\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n   \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BEP20 is Context, IBEP20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\t\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\t\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\t\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\t\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\t\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ninterface IPancakeSwapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeSwapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IPancakeSwapV2Router02 is IPancakeSwapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\t\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\t\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\t\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\t\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\t\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\t\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\t\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\t\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\t\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\t\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\t\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\t\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n    int256 c = a * b;\r\n    require((b == 0) || (c / b == a));\r\n    return c;\r\n  }\r\n\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    require(!(a == - 2**255 && b == -1) && (b > 0));\r\n    return a / b;\r\n  }\r\n\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n    return a - b;\r\n  }\r\n\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n    return c;\r\n  }\r\n\r\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n    require(a >= 0);\r\n    return uint256(a);\r\n  }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\ncontract NirosX is BEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\t\r\n    IPancakeSwapV2Router02 public pancakeSwapV2Router;\r\n    address public pancakeSwapV2Pair;\r\n\t\r\n    bool private swapping;\r\n\tbool public swapEnable = true;\r\n\t\r\n    uint256 public swapTokensAtAmount = 250000 * (10**18);\r\n    uint256 public maxWalletToken = 75000000000 * (10**18);\r\n\tuint256 public tradingStartTime = 1636968600;\r\n\t\r\n\taddress payable public buyBackAndTeamAddress;\r\n\t\r\n    uint256 public liquidityFee;\r\n\tuint256 public buyBackAndTeamFee;\r\n    uint256 public totalFees;\r\n\t\r\n    mapping (address => bool) public _isExcludedFromFees;\r\n\tmapping (address => bool) public _isExcludedFromMaxWalletToken;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\tmapping (address => bool) public canTransferBeforeTradingIsEnabled;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\tevent ExcludeMaxWalletToken(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n\t\r\n    constructor(address payable _buyBackAndTeamAddress) BEP20(\"NirosX\", \"NIROSX\") {\r\n\t\r\n        liquidityFee = 200;\r\n\t\tbuyBackAndTeamFee = 300;\r\n\t\tbuyBackAndTeamAddress = _buyBackAndTeamAddress;\r\n        totalFees = buyBackAndTeamFee.add(liquidityFee);\r\n\t\t\r\n    \tIPancakeSwapV2Router02 _pancakeSwapV2Router = IPancakeSwapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\t\r\n        address _pancakeSwapV2Pair = IPancakeSwapV2Factory(_pancakeSwapV2Router.factory()).createPair(address(this), _pancakeSwapV2Router.WETH());\r\n\r\n        pancakeSwapV2Router = _pancakeSwapV2Router;\r\n        pancakeSwapV2Pair   = _pancakeSwapV2Pair;\r\n\t\t\r\n        _setAutomatedMarketMakerPair(_pancakeSwapV2Pair, true);\r\n\t\t\r\n\t\t_isExcludedFromMaxWalletToken[_pancakeSwapV2Pair] = true;\r\n\t\t_isExcludedFromMaxWalletToken[address(this)] = true;\r\n\t\t_isExcludedFromMaxWalletToken[owner()] = true;\r\n\t\t\r\n        excludeFromFees(address(this), true);\r\n\t\texcludeFromFees(owner(), true);\r\n\t\t\r\n\t\tcanTransferBeforeTradingIsEnabled[owner()] = true;\r\n\t\t\r\n        _mint(owner(), 2500000000000 * (10**18));\r\n    }\r\n\r\n    receive() external payable {\r\n  \t}\r\n\t\r\n\tfunction setSwapTokensAtAmount(uint256 swapTokens) external onlyOwner {\r\n  \t    swapTokensAtAmount = swapTokens * (10**18);\r\n  \t}\r\n\t\r\n  \tfunction setMaxWalletToken(uint256 maxToken) external onlyOwner {\r\n  \t     maxWalletToken = maxToken * (10**18);\r\n  \t}\r\n\t\r\n\tfunction setSwapEnable(bool _enabled) public onlyOwner {\r\n        swapEnable = _enabled;\r\n    }\r\n\t\t\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromFees[account] != excluded, \"NirosX: Account is already the value of 'excluded'\");\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\t\r\n\tfunction excludeFromMaxWalletToken(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromMaxWalletToken[account] != excluded, \"NirosX: Account is already the value of 'excluded'\");\r\n        _isExcludedFromMaxWalletToken[account] = excluded;\r\n        emit ExcludeMaxWalletToken(account, excluded);\r\n    }\r\n\t\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != pancakeSwapV2Pair, \"NirosX: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\t\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"NirosX: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\t\r\n\tfunction updateBuyBackAndTeamAddress(address payable newAddress) public onlyOwner {\r\n\t\tbuyBackAndTeamAddress = newAddress;\r\n\t}\r\n\t\r\n\tfunction updateBuyBackAndTeamFee(uint256 newFee) public onlyOwner {\r\n        require(newFee >= 0 && newFee <= 10000, \"NirosX: buyBackAndTeamFee fee must be between 0 and 10000\");\r\n        buyBackAndTeamFee = newFee;\r\n    }\r\n\t\r\n\tfunction updateLiquidityFee(uint256 newFee) public onlyOwner {\r\n        require(newFee >= 0 && newFee <= 10000, \"NirosX: Liquidity fee must be between 0 and 10000\");\r\n        liquidityFee = newFee;\r\n    }\r\n\t\r\n\tfunction _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n\t\t\r\n\t\tif(tradingStartTime > block.timestamp) {\r\n            require(canTransferBeforeTradingIsEnabled[from], \"This account cannot send tokens until trading is enabled\");\r\n        }\r\n\t\t\r\n        if(!_isExcludedFromMaxWalletToken[to] && !automatedMarketMakerPairs[to]) {\r\n            uint256 contractBalanceRecepient = balanceOf(to);\r\n            require(contractBalanceRecepient + amount <= maxWalletToken, \"Exceeds maximum wallet token amount\");\r\n        }\r\n\t\t\r\n\t\tif(automatedMarketMakerPairs[to]) \r\n\t\t{\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n\t\t\t\r\n            if (!swapping && canSwap && swapEnable) {\r\n                swapping = true;\r\n\t\t\t\t\r\n\t\t\t\tuint256 fromLiquidityFee = swapTokensAtAmount.div(totalFees).mul(liquidityFee);\r\n\t\t\t\tuint256 OtherTokens = swapTokensAtAmount.sub(fromLiquidityFee);\r\n\t\t\t\t\r\n\t\t\t\tuint256 half = fromLiquidityFee.div(2);\r\n\t\t\t\tuint256 otherHalf = fromLiquidityFee.sub(half);\r\n\t\t\t\t\r\n\t\t\t\tswapTokensForBNB(half.add(OtherTokens));\r\n\t\t\t\t\r\n\t\t\t\tuint256 newBalance = address(this).balance;\r\n\t\t\t\t\r\n\t\t\t\tuint256 liquidityPart = newBalance.div(totalFees).mul(liquidityFee);\r\n\t\t\t\t\t\tliquidityPart = liquidityPart.div(2);\r\n\t\t\t\t\t\t\r\n\t\t\t\taddLiquidity(otherHalf, liquidityPart);\t\r\n\t\t\t\tbuyBackAndTeamAddress.transfer(address(this).balance);\r\n\t\t\t\t\r\n\t\t\t\temit SwapAndLiquify(half.add(OtherTokens), liquidityPart, otherHalf);\r\n                swapping = false;\r\n            }\r\n        }\r\n\t\t\r\n        bool takeFee = !swapping;\r\n\t\t\r\n\t\tif(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\t\t\r\n        if(takeFee) \r\n\t\t{\r\n\t\t\tuint256 fees = amount.div(10000).mul(totalFees);\r\n\t\t\tamount = amount.sub(fees);\r\n\t\t\tsuper._transfer(from, address(this), fees);\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\t\r\n\tfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(pancakeSwapV2Router), tokenAmount);\r\n        pancakeSwapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount, 0, 0, owner(), block.timestamp);\r\n    }\r\n\t\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n         address[] memory path = new address[](2);\r\n         path[0] = address(this);\r\n         path[1] = pancakeSwapV2Router.WETH();\r\n         _approve(address(this), address(pancakeSwapV2Router), tokenAmount);\r\n         pancakeSwapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this),block.timestamp);\r\n    }\r\n\t\r\n\tfunction burn(uint256 _value) public{\r\n\t    uint256 burnAmount = _value * (10**18);\r\n        require(balanceOf(msg.sender) >= burnAmount);\r\n        _burn(msg.sender, burnAmount);\r\n    }\r\n\t\r\n\tfunction mint(uint256 _value) public onlyOwner{\r\n\t    uint256 mintAmount = _value * (10**18);\r\n        _mint(msg.sender, mintAmount);\r\n    }\r\n\t\r\n\tfunction migrateBNB(address payable _recipient) public onlyOwner {\r\n        _recipient.transfer(address(this).balance);\r\n    }\r\n\t\r\n\tfunction setTradingStartTime(uint256 newStartTime) public onlyOwner {\r\n  \t    require(tradingStartTime > block.timestamp, \"Trading has already started\");\r\n  \t    require(newStartTime > block.timestamp, \"Start time must be in the future\");\r\n  \t    tradingStartTime = newStartTime;\r\n  \t}\r\n\t\r\n\tfunction allowPreTrading(address account, bool allowed) public onlyOwner {\r\n        require(canTransferBeforeTradingIsEnabled[account] != allowed, \"Pre trading is already the value of 'excluded'\");\r\n        canTransferBeforeTradingIsEnabled[account] = allowed;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_buyBackAndTeamAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMaxWalletToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxWalletToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowPreTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndTeamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackAndTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canTransferBeforeTradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"migrateBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxToken\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapTokens\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"}],\"name\":\"setTradingStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateBuyBackAndTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyBackAndTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NirosX", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000839495f7760954e69acd9c244c99ba722d121fff", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d84193cdb7ca7e6c78d49713a33d3662fa8bd5947b71d4bc7470a7156b9417a"}