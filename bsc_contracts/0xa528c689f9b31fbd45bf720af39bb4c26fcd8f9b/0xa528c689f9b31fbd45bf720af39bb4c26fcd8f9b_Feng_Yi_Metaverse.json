{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20Extended {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Feng_Yi_Metaverse is IERC20Extended, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = \"Feng Yi Metaverse\";\r\n    string private constant _symbol = \"FYM\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 21_000_000 * 10**_decimals;\r\n\r\n    address private constant DEAD = address(0xdead);\r\n    address private constant ZERO = address(0);\r\n    IDexRouter public router;\r\n    address public autoLpReceiver;\r\n    address public farmingFundsReceiver;\r\n    address public ecologicalFundsReceiver;\r\n    address public prizePoolReceiver;\r\n\r\n    uint256 _farmingBuyFee = 2_00;\r\n    uint256 _liquidityBuyFee = 2_00;\r\n    uint256 _ecologicalBuyFee = 4_00;\r\n    uint256 _prizePoolBuyFee = 2_00;\r\n\r\n    uint256 _farmingSellFee = 2_00;\r\n    uint256 _liquiditySellFee = 2_00;\r\n    uint256 _ecologicalSellFee = 4_00;\r\n    uint256 _prizePoolSellFee = 2_00;\r\n\r\n    uint256 public totalBuyFee = 10_00;\r\n    uint256 public totalSellFee = 10_00;\r\n    uint256 public feeDenominator = 100_00;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isPair;\r\n    mapping(address => bool) public isBot;\r\n\r\n    bool public trading;\r\n    uint256 public snipingTime = 60 seconds;\r\n    uint256 public launchedAt;\r\n\r\n    \r\n\r\n    constructor(address _tokenForPair) {\r\n        \r\n        // mainnnet\r\n        address router_ = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n        autoLpReceiver = 0xcdaf2D72BD967879372DF5E6193a3B7c8fe6895D; //2%\r\n        ecologicalFundsReceiver = 0x628e27e8e244e3C57DCC68C4e5EA89960422e101; //4%\r\n        prizePoolReceiver = 0xc0C5058136560A8e83F5C001dEbd592B1174980E; //2%\r\n        farmingFundsReceiver= 0xa29a4a114FF409D55FAaB30279378Dd94765A11b; //2%\r\n\r\n        router = IDexRouter(router_);\r\n        address pairwithNative = IDexFactory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        address pairwithToken =  IDexFactory(router.factory()).createPair(\r\n            address(this),\r\n            _tokenForPair\r\n        );\r\n        isPair[pairwithNative] = true;\r\n        isPair[pairwithToken] = true;\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[autoLpReceiver] = true;\r\n        isFeeExempt[ecologicalFundsReceiver] = true;\r\n        isFeeExempt[prizePoolReceiver] = true;\r\n        isFeeExempt[farmingFundsReceiver] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, _totalSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n        \r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(!isBot[sender], \"Bot transaction!\");\r\n        if (!isFeeExempt[sender] && !isFeeExempt[recipient]) {\r\n            require(trading, \"Trading not enabled yet\");\r\n            if (\r\n                block.timestamp < launchedAt + snipingTime &&\r\n                sender != address(router)\r\n            ) {\r\n                if (isPair[sender]) {\r\n                    isBot[recipient] = true;\r\n                } else if (isPair[recipient]) {\r\n                    isBot[sender] = true;\r\n                }\r\n            }\r\n        }\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n\r\n        uint256 amountReceived;\r\n        if (\r\n            isFeeExempt[sender] ||\r\n            isFeeExempt[recipient] ||\r\n            (!isPair[sender] && !isPair[recipient])\r\n        ) {\r\n            amountReceived = amount;\r\n        } else {\r\n            uint256 feeAmount;\r\n            if (isPair[sender]) {\r\n                feeAmount = amount.mul(totalBuyFee).div(feeDenominator);\r\n                amountReceived = amount.sub(feeAmount);\r\n                setBuyAccFee(sender, amount);\r\n            } else {\r\n                feeAmount = amount.mul(totalSellFee).div(feeDenominator);\r\n                amountReceived = amount.sub(feeAmount);\r\n                setSellAccFee(sender, amount);\r\n            }\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n \r\n\r\n    function setBuyAccFee(address sender, uint256 _amount) internal {\r\n        _balances[autoLpReceiver] += _amount.mul(_liquidityBuyFee).div(\r\n            feeDenominator\r\n        );\r\n        _balances[farmingFundsReceiver] += _amount.mul(_farmingBuyFee).div(\r\n            feeDenominator\r\n        );\r\n        _balances[ecologicalFundsReceiver] += _amount\r\n            .mul(_ecologicalBuyFee)\r\n            .div(feeDenominator);\r\n        _balances[prizePoolReceiver] += _amount.mul(_prizePoolBuyFee).div(\r\n            feeDenominator\r\n        );\r\n        \r\n        emit Transfer(\r\n            sender,\r\n            autoLpReceiver,\r\n            _amount.mul(_liquidityBuyFee).div(feeDenominator)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            farmingFundsReceiver,\r\n            _amount.mul(_farmingBuyFee).div(feeDenominator)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            ecologicalFundsReceiver,\r\n            _amount.mul(_ecologicalBuyFee).div(feeDenominator)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            prizePoolReceiver,\r\n            _amount.mul(_prizePoolBuyFee).div(feeDenominator)\r\n        );\r\n    }\r\n\r\n    function setSellAccFee(address sender, uint256 _amount) internal {\r\n        _balances[autoLpReceiver] += _amount.mul(_liquiditySellFee).div(\r\n            feeDenominator\r\n        );\r\n        _balances[farmingFundsReceiver] += _amount.mul(_farmingSellFee).div(\r\n            feeDenominator\r\n        );\r\n        _balances[ecologicalFundsReceiver] += _amount\r\n            .mul(_ecologicalSellFee)\r\n            .div(feeDenominator);\r\n        _balances[prizePoolReceiver] += _amount.mul(_prizePoolSellFee).div(\r\n            feeDenominator\r\n        );\r\n    \r\n        emit Transfer(\r\n            sender,\r\n            autoLpReceiver,\r\n            _amount.mul(_liquiditySellFee).div(feeDenominator)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            farmingFundsReceiver,\r\n            _amount.mul(_farmingSellFee).div(feeDenominator)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            ecologicalFundsReceiver,\r\n            _amount.mul(_ecologicalSellFee).div(feeDenominator)\r\n        );\r\n        emit Transfer(\r\n            sender,\r\n            prizePoolReceiver,\r\n            _amount.mul(_prizePoolSellFee).div(feeDenominator)\r\n        );\r\n    }\r\n\r\n    function removeStuckBnb(address receiver, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        payable(receiver).transfer(amount);\r\n    }\r\n\r\n    function removeStuckTokens(address receiver, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _transferFrom(address(this), receiver, amount);\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setBuyFees(\r\n        uint256 _farmingFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _ecologicalFee,\r\n        uint256 _prizePoolFee\r\n    ) public onlyOwner {\r\n        _farmingBuyFee = _farmingFee;\r\n        _liquidityBuyFee = _liquidityFee;\r\n        _ecologicalBuyFee = _ecologicalFee;\r\n        _prizePoolBuyFee = _prizePoolFee;\r\n        totalBuyFee = _liquidityFee.add(_farmingFee).add(_ecologicalFee).add(\r\n            _prizePoolFee\r\n        );\r\n        require(\r\n            totalBuyFee <= feeDenominator.mul(15).div(100),\r\n            \"Can't be greater than 15%\"\r\n        );\r\n    }\r\n\r\n    function setSellFees(\r\n        uint256 _liquidityFee,\r\n        uint256 _farmingFee,\r\n        uint256 _ecologicalFee,\r\n        uint256 _prizePoolFee\r\n    ) public onlyOwner {\r\n        _liquiditySellFee = _liquidityFee;\r\n        _farmingSellFee = _farmingFee;\r\n        _ecologicalSellFee = _ecologicalFee;\r\n        _prizePoolSellFee = _prizePoolFee;\r\n        totalSellFee = _liquidityFee.add(_farmingFee).add(_ecologicalFee).add(\r\n            _prizePoolFee\r\n        );\r\n        require(\r\n            totalSellFee <= feeDenominator.mul(15).div(100),\r\n            \"Can't be greater than 15%\"\r\n        );\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _autoLpReceiver,\r\n        address _ecologicalFundsReceiver,\r\n        address _farmingFundsReceiver,\r\n        address _prizePoolReceiver\r\n    ) external onlyOwner {\r\n        autoLpReceiver = _autoLpReceiver;\r\n        ecologicalFundsReceiver = _ecologicalFundsReceiver;\r\n        farmingFundsReceiver = _farmingFundsReceiver;\r\n        prizePoolReceiver = _prizePoolReceiver;\r\n    }\r\n\r\n    function enableOrDisableTrading(bool state) external onlyOwner {\r\n        \r\n        require(trading != state ,(state)? \"Already enabled\":\"Already Disabled\");\r\n        trading = state;\r\n        if(launchedAt==0){\r\n        launchedAt = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function addPair(address _pair) public onlyOwner {\r\n        isPair[_pair] = true;\r\n    }\r\n\r\n    function removePair(address _pair) public onlyOwner {\r\n        isPair[_pair] = false;\r\n    }\r\n\r\n  \r\n\r\n    function addOrRemoveBot(address _user, bool _val) public onlyOwner {\r\n        isBot[_user] = _val;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenForPair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"addOrRemoveBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLpReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ecologicalFundsReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"enableOrDisableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingFundsReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"removePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStuckBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecologicalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prizePoolFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLpReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ecologicalFundsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmingFundsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizePoolReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_farmingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ecologicalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prizePoolFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Feng_Yi_Metaverse", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a70d0c1bd5c96e71f66552d84f55cf814109955ce26972b6779938947b3177af"}