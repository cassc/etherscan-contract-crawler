{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \u2193 ptr ...  \u2193 ptr + 0x0B (start) ...  \u2193 ptr + 0x20 ...  \u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\\n    function accessControlRegistry() external view returns (address);\\n\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IAccessControlRegistryAdminnedWithManager is\\n    IAccessControlRegistryAdminned\\n{\\n    function manager() external view returns (address);\\n\\n    function adminRole() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/interfaces/IApi3ServerV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDapiServer.sol\\\";\\nimport \\\"./IBeaconUpdatesWithSignedData.sol\\\";\\n\\ninterface IApi3ServerV1 is IOevDapiServer, IBeaconUpdatesWithSignedData {\\n    function readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function dataFeeds(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function oevProxyToIdToDataFeed(\\n        address proxy,\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/interfaces/IBeaconUpdatesWithSignedData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IBeaconUpdatesWithSignedData is IDataFeedServer {\\n    function updateBeaconWithSignedData(\\n        address airnode,\\n        bytes32 templateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bytes32 beaconId);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/interfaces/IDapiServer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IDapiServer is\\n    IAccessControlRegistryAdminnedWithManager,\\n    IDataFeedServer\\n{\\n    event SetDapiName(\\n        bytes32 indexed dataFeedId,\\n        bytes32 indexed dapiName,\\n        address sender\\n    );\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(\\n        bytes32 dapiName\\n    ) external view returns (bytes32);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function dapiNameHashToDataFeedId(\\n        bytes32 dapiNameHash\\n    ) external view returns (bytes32 dataFeedId);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/interfaces/IDataFeedServer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\n\\ninterface IDataFeedServer is IExtendedSelfMulticall {\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) external returns (bytes32 beaconSetId);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/interfaces/IOevDapiServer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IOevDataFeedServer.sol\\\";\\nimport \\\"./IDapiServer.sol\\\";\\n\\ninterface IOevDapiServer is IOevDataFeedServer, IDapiServer {}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/interfaces/IOevDataFeedServer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDataFeedServer.sol\\\";\\n\\ninterface IOevDataFeedServer is IDataFeedServer {\\n    event UpdatedOevProxyBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedOevProxyBeaconSetWithSignedData(\\n        bytes32 indexed beaconSetId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event Withdrew(\\n        address indexed oevProxy,\\n        address oevBeneficiary,\\n        uint256 amount\\n    );\\n\\n    function updateOevProxyDataFeedWithSignedData(\\n        address oevProxy,\\n        bytes32 dataFeedId,\\n        bytes32 updateId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes[] calldata packedOevUpdateSignatures\\n    ) external payable;\\n\\n    function withdraw(address oevProxy) external;\\n\\n    function oevProxyToBalance(\\n        address oevProxy\\n    ) external view returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/DapiProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IDapiProxy.sol\\\";\\nimport \\\"../interfaces/IApi3ServerV1.sol\\\";\\n\\n/// @title An immutable proxy contract that is used to read a specific dAPI of\\n/// a specific Api3ServerV1 contract\\n/// @notice In an effort to reduce the bytecode of this contract, its\\n/// constructor arguments are validated by ProxyFactory, rather than\\n/// internally. If you intend to deploy this contract without using\\n/// ProxyFactory, you are recommended to implement an equivalent validation.\\n/// @dev The proxy contracts are generalized to support most types of numerical\\n/// data feeds. This means that the user of this proxy is expected to validate\\n/// the read values according to the specific use-case. For example, `value` is\\n/// a signed integer, yet it being negative may not make sense in the case that\\n/// the data feed represents the spot price of an asset. In that case, the user\\n/// is responsible with ensuring that `value` is not negative.\\n/// In the case that the data feed is from a single source, `timestamp` is the\\n/// system time of the Airnode when it signed the data. In the case that the\\n/// data feed is from multiple sources, `timestamp` is the median of system\\n/// times of the Airnodes when they signed the respective data. There are two\\n/// points to consider while using `timestamp` in your contract logic: (1) It\\n/// is based on the system time of the Airnodes, and not the block timestamp.\\n/// This may be relevant when either of them drifts. (2) `timestamp` is an\\n/// off-chain value that is being reported, similar to `value`. Both should\\n/// only be trusted as much as the Airnode(s) that report them.\\ncontract DapiProxy is IDapiProxy {\\n    /// @notice Api3ServerV1 address\\n    address public immutable override api3ServerV1;\\n    /// @notice Hash of the dAPI name\\n    bytes32 public immutable override dapiNameHash;\\n\\n    /// @param _api3ServerV1 Api3ServerV1 address\\n    /// @param _dapiNameHash Hash of the dAPI name\\n    constructor(address _api3ServerV1, bytes32 _dapiNameHash) {\\n        api3ServerV1 = _api3ServerV1;\\n        dapiNameHash = _dapiNameHash;\\n    }\\n\\n    /// @notice Reads the dAPI that this proxy maps to\\n    /// @return value dAPI value\\n    /// @return timestamp dAPI timestamp\\n    function read()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (int224 value, uint32 timestamp)\\n    {\\n        (value, timestamp) = IApi3ServerV1(api3ServerV1)\\n            .readDataFeedWithDapiNameHash(dapiNameHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/DapiProxyWithOev.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DapiProxy.sol\\\";\\nimport \\\"./interfaces/IOevProxy.sol\\\";\\n\\n/// @title An immutable proxy contract that is used to read a specific dAPI of\\n/// a specific Api3ServerV1 contract and inform Api3ServerV1 about the\\n/// beneficiary of the respective OEV proceeds\\n/// @notice In an effort to reduce the bytecode of this contract, its\\n/// constructor arguments are validated by ProxyFactory, rather than\\n/// internally. If you intend to deploy this contract without using\\n/// ProxyFactory, you are recommended to implement an equivalent validation.\\n/// @dev See DapiProxy.sol for comments about usage\\ncontract DapiProxyWithOev is DapiProxy, IOevProxy {\\n    /// @notice OEV beneficiary address\\n    address public immutable override oevBeneficiary;\\n\\n    /// @param _api3ServerV1 Api3ServerV1 address\\n    /// @param _dapiNameHash Hash of the dAPI name\\n    /// @param _oevBeneficiary OEV beneficiary\\n    constructor(\\n        address _api3ServerV1,\\n        bytes32 _dapiNameHash,\\n        address _oevBeneficiary\\n    ) DapiProxy(_api3ServerV1, _dapiNameHash) {\\n        oevBeneficiary = _oevBeneficiary;\\n    }\\n\\n    /// @notice Reads the dAPI that this proxy maps to\\n    /// @return value dAPI value\\n    /// @return timestamp dAPI timestamp\\n    function read()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (int224 value, uint32 timestamp)\\n    {\\n        (value, timestamp) = IApi3ServerV1(api3ServerV1)\\n            .readDataFeedWithDapiNameHashAsOevProxy(dapiNameHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/DataFeedProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IDataFeedProxy.sol\\\";\\nimport \\\"../interfaces/IApi3ServerV1.sol\\\";\\n\\n/// @title An immutable proxy contract that is used to read a specific data\\n/// feed (Beacon or Beacon set) of a specific Api3ServerV1 contract\\n/// @notice In an effort to reduce the bytecode of this contract, its\\n/// constructor arguments are validated by ProxyFactory, rather than\\n/// internally. If you intend to deploy this contract without using\\n/// ProxyFactory, you are recommended to implement an equivalent validation.\\n/// @dev See DapiProxy.sol for comments about usage\\ncontract DataFeedProxy is IDataFeedProxy {\\n    /// @notice Api3ServerV1 address\\n    address public immutable override api3ServerV1;\\n    /// @notice Data feed ID\\n    bytes32 public immutable override dataFeedId;\\n\\n    /// @param _api3ServerV1 Api3ServerV1 address\\n    /// @param _dataFeedId Data feed (Beacon or Beacon set) ID\\n    constructor(address _api3ServerV1, bytes32 _dataFeedId) {\\n        api3ServerV1 = _api3ServerV1;\\n        dataFeedId = _dataFeedId;\\n    }\\n\\n    /// @notice Reads the data feed that this proxy maps to\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function read()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (int224 value, uint32 timestamp)\\n    {\\n        (value, timestamp) = IApi3ServerV1(api3ServerV1).readDataFeedWithId(\\n            dataFeedId\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/DataFeedProxyWithOev.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DataFeedProxy.sol\\\";\\nimport \\\"./interfaces/IOevProxy.sol\\\";\\n\\n/// @title An immutable proxy contract that is used to read a specific data\\n/// feed (Beacon or Beacon set) of a specific Api3ServerV1 contract and inform\\n/// Api3ServerV1 about the beneficiary of the respective OEV proceeds\\n/// @notice In an effort to reduce the bytecode of this contract, its\\n/// constructor arguments are validated by ProxyFactory, rather than\\n/// internally. If you intend to deploy this contract without using\\n/// ProxyFactory, you are recommended to implement an equivalent validation.\\n/// @dev See DapiProxy.sol for comments about usage\\ncontract DataFeedProxyWithOev is DataFeedProxy, IOevProxy {\\n    /// @notice OEV beneficiary address\\n    address public immutable override oevBeneficiary;\\n\\n    /// @param _api3ServerV1 Api3ServerV1 address\\n    /// @param _dataFeedId Data feed (Beacon or Beacon set) ID\\n    /// @param _oevBeneficiary OEV beneficiary\\n    constructor(\\n        address _api3ServerV1,\\n        bytes32 _dataFeedId,\\n        address _oevBeneficiary\\n    ) DataFeedProxy(_api3ServerV1, _dataFeedId) {\\n        oevBeneficiary = _oevBeneficiary;\\n    }\\n\\n    /// @notice Reads the data feed that this proxy maps to\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function read()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (int224 value, uint32 timestamp)\\n    {\\n        (value, timestamp) = IApi3ServerV1(api3ServerV1)\\n            .readDataFeedWithIdAsOevProxy(dataFeedId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/interfaces/IDapiProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IProxy.sol\\\";\\n\\ninterface IDapiProxy is IProxy {\\n    function dapiNameHash() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/interfaces/IDataFeedProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IProxy.sol\\\";\\n\\ninterface IDataFeedProxy is IProxy {\\n    function dataFeedId() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/interfaces/IOevProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOevProxy {\\n    function oevBeneficiary() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/interfaces/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev See DapiProxy.sol for comments about usage\\ninterface IProxy {\\n    function read() external view returns (int224 value, uint32 timestamp);\\n\\n    function api3ServerV1() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/interfaces/IProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProxyFactory {\\n    event DeployedDataFeedProxy(\\n        address indexed proxyAddress,\\n        bytes32 indexed dataFeedId,\\n        bytes metadata\\n    );\\n\\n    event DeployedDapiProxy(\\n        address indexed proxyAddress,\\n        bytes32 indexed dapiName,\\n        bytes metadata\\n    );\\n\\n    event DeployedDataFeedProxyWithOev(\\n        address indexed proxyAddress,\\n        bytes32 indexed dataFeedId,\\n        address oevBeneficiary,\\n        bytes metadata\\n    );\\n\\n    event DeployedDapiProxyWithOev(\\n        address indexed proxyAddress,\\n        bytes32 indexed dapiName,\\n        address oevBeneficiary,\\n        bytes metadata\\n    );\\n\\n    function deployDataFeedProxy(\\n        bytes32 dataFeedId,\\n        bytes calldata metadata\\n    ) external returns (address proxyAddress);\\n\\n    function deployDapiProxy(\\n        bytes32 dapiName,\\n        bytes calldata metadata\\n    ) external returns (address proxyAddress);\\n\\n    function deployDataFeedProxyWithOev(\\n        bytes32 dataFeedId,\\n        address oevBeneficiary,\\n        bytes calldata metadata\\n    ) external returns (address proxyAddress);\\n\\n    function deployDapiProxyWithOev(\\n        bytes32 dapiName,\\n        address oevBeneficiary,\\n        bytes calldata metadata\\n    ) external returns (address proxyAddress);\\n\\n    function computeDataFeedProxyAddress(\\n        bytes32 dataFeedId,\\n        bytes calldata metadata\\n    ) external view returns (address proxyAddress);\\n\\n    function computeDapiProxyAddress(\\n        bytes32 dapiName,\\n        bytes calldata metadata\\n    ) external view returns (address proxyAddress);\\n\\n    function computeDataFeedProxyWithOevAddress(\\n        bytes32 dataFeedId,\\n        address oevBeneficiary,\\n        bytes calldata metadata\\n    ) external view returns (address proxyAddress);\\n\\n    function computeDapiProxyWithOevAddress(\\n        bytes32 dapiName,\\n        address oevBeneficiary,\\n        bytes calldata metadata\\n    ) external view returns (address proxyAddress);\\n\\n    function api3ServerV1() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/api3-server-v1/proxies/ProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DataFeedProxy.sol\\\";\\nimport \\\"./DapiProxy.sol\\\";\\nimport \\\"./DataFeedProxyWithOev.sol\\\";\\nimport \\\"./DapiProxyWithOev.sol\\\";\\nimport \\\"./interfaces/IProxyFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\n/// @title Contract factory that deterministically deploys proxies that read\\n/// data feeds (Beacons or Beacon sets) or dAPIs, along with optional OEV\\n/// support\\n/// @dev The proxies are deployed normally and not cloned to minimize the gas\\n/// cost overhead while using them to read data feed values\\ncontract ProxyFactory is IProxyFactory {\\n    /// @notice Api3ServerV1 address\\n    address public immutable override api3ServerV1;\\n\\n    /// @param _api3ServerV1 Api3ServerV1 address\\n    constructor(address _api3ServerV1) {\\n        require(_api3ServerV1 != address(0), \\\"Api3ServerV1 address zero\\\");\\n        api3ServerV1 = _api3ServerV1;\\n    }\\n\\n    /// @notice Deterministically deploys a data feed proxy\\n    /// @param dataFeedId Data feed ID\\n    /// @param metadata Metadata associated with the proxy\\n    /// @return proxyAddress Proxy address\\n    function deployDataFeedProxy(\\n        bytes32 dataFeedId,\\n        bytes calldata metadata\\n    ) external override returns (address proxyAddress) {\\n        require(dataFeedId != bytes32(0), \\\"Data feed ID zero\\\");\\n        proxyAddress = address(\\n            new DataFeedProxy{salt: keccak256(metadata)}(\\n                api3ServerV1,\\n                dataFeedId\\n            )\\n        );\\n        emit DeployedDataFeedProxy(proxyAddress, dataFeedId, metadata);\\n    }\\n\\n    /// @notice Deterministically deploys a dAPI proxy\\n    /// @param dapiName dAPI name\\n    /// @param metadata Metadata associated with the proxy\\n    /// @return proxyAddress Proxy address\\n    function deployDapiProxy(\\n        bytes32 dapiName,\\n        bytes calldata metadata\\n    ) external override returns (address proxyAddress) {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        proxyAddress = address(\\n            new DapiProxy{salt: keccak256(metadata)}(\\n                api3ServerV1,\\n                keccak256(abi.encodePacked(dapiName))\\n            )\\n        );\\n        emit DeployedDapiProxy(proxyAddress, dapiName, metadata);\\n    }\\n\\n    /// @notice Deterministically deploys a data feed proxy with OEV support\\n    /// @param dataFeedId Data feed ID\\n    /// @param oevBeneficiary OEV beneficiary\\n    /// @param metadata Metadata associated with the proxy\\n    /// @return proxyAddress Proxy address\\n    function deployDataFeedProxyWithOev(\\n        bytes32 dataFeedId,\\n        address oevBeneficiary,\\n        bytes calldata metadata\\n    ) external override returns (address proxyAddress) {\\n        require(dataFeedId != bytes32(0), \\\"Data feed ID zero\\\");\\n        require(oevBeneficiary != address(0), \\\"OEV beneficiary zero\\\");\\n        proxyAddress = address(\\n            new DataFeedProxyWithOev{salt: keccak256(metadata)}(\\n                api3ServerV1,\\n                dataFeedId,\\n                oevBeneficiary\\n            )\\n        );\\n        emit DeployedDataFeedProxyWithOev(\\n            proxyAddress,\\n            dataFeedId,\\n            oevBeneficiary,\\n            metadata\\n        );\\n    }\\n\\n    /// @notice Deterministically deploys a dAPI proxy with OEV support\\n    /// @param dapiName dAPI name\\n    /// @param oevBeneficiary OEV beneficiary\\n    /// @param metadata Metadata associated with the proxy\\n    /// @return proxyAddress Proxy address\\n    function deployDapiProxyWithOev(\\n        bytes32 dapiName,\\n        address oevBeneficiary,\\n        bytes calldata metadata\\n    ) external override returns (address proxyAddress) {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        require(oevBeneficiary != address(0), \\\"OEV beneficiary zero\\\");\\n        proxyAddress = address(\\n            new DapiProxyWithOev{salt: keccak256(metadata)}(\\n                api3ServerV1,\\n                keccak256(abi.encodePacked(dapiName)),\\n                oevBeneficiary\\n            )\\n        );\\n        emit DeployedDapiProxyWithOev(\\n            proxyAddress,\\n            dapiName,\\n            oevBeneficiary,\\n            metadata\\n        );\\n    }\\n\\n    /// @notice Computes the address of the data feed proxy\\n    /// @param dataFeedId Data feed ID\\n    /// @param metadata Metadata associated with the proxy\\n    /// @return proxyAddress Proxy address\\n    function computeDataFeedProxyAddress(\\n        bytes32 dataFeedId,\\n        bytes calldata metadata\\n    ) external view override returns (address proxyAddress) {\\n        require(dataFeedId != bytes32(0), \\\"Data feed ID zero\\\");\\n        proxyAddress = Create2.computeAddress(\\n            keccak256(metadata),\\n            keccak256(\\n                abi.encodePacked(\\n                    type(DataFeedProxy).creationCode,\\n                    abi.encode(api3ServerV1, dataFeedId)\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Computes the address of the dAPI proxy\\n    /// @param dapiName dAPI name\\n    /// @param metadata Metadata associated with the proxy\\n    /// @return proxyAddress Proxy address\\n    function computeDapiProxyAddress(\\n        bytes32 dapiName,\\n        bytes calldata metadata\\n    ) external view override returns (address proxyAddress) {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        proxyAddress = Create2.computeAddress(\\n            keccak256(metadata),\\n            keccak256(\\n                abi.encodePacked(\\n                    type(DapiProxy).creationCode,\\n                    abi.encode(\\n                        api3ServerV1,\\n                        keccak256(abi.encodePacked(dapiName))\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Computes the address of the data feed proxy with OEV support\\n    /// @param dataFeedId Data feed ID\\n    /// @param oevBeneficiary OEV beneficiary\\n    /// @param metadata Metadata associated with the proxy\\n    /// @return proxyAddress Proxy address\\n    function computeDataFeedProxyWithOevAddress(\\n        bytes32 dataFeedId,\\n        address oevBeneficiary,\\n        bytes calldata metadata\\n    ) external view override returns (address proxyAddress) {\\n        require(dataFeedId != bytes32(0), \\\"Data feed ID zero\\\");\\n        require(oevBeneficiary != address(0), \\\"OEV beneficiary zero\\\");\\n        proxyAddress = Create2.computeAddress(\\n            keccak256(metadata),\\n            keccak256(\\n                abi.encodePacked(\\n                    type(DataFeedProxyWithOev).creationCode,\\n                    abi.encode(api3ServerV1, dataFeedId, oevBeneficiary)\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Computes the address of the dAPI proxy with OEV support\\n    /// @param dapiName dAPI name\\n    /// @param oevBeneficiary OEV beneficiary\\n    /// @param metadata Metadata associated with the proxy\\n    /// @return proxyAddress Proxy address\\n    function computeDapiProxyWithOevAddress(\\n        bytes32 dapiName,\\n        address oevBeneficiary,\\n        bytes calldata metadata\\n    ) external view override returns (address proxyAddress) {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        require(oevBeneficiary != address(0), \\\"OEV beneficiary zero\\\");\\n        proxyAddress = Create2.computeAddress(\\n            keccak256(metadata),\\n            keccak256(\\n                abi.encodePacked(\\n                    type(DapiProxyWithOev).creationCode,\\n                    abi.encode(\\n                        api3ServerV1,\\n                        keccak256(abi.encodePacked(dapiName)),\\n                        oevBeneficiary\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/interfaces/IExtendedSelfMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISelfMulticall.sol\\\";\\n\\ninterface IExtendedSelfMulticall is ISelfMulticall {\\n    function getChainId() external view returns (uint256);\\n\\n    function getBalance(address account) external view returns (uint256);\\n\\n    function containsBytecode(address account) external view returns (bool);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getBlockTimestamp() external view returns (uint256);\\n\\n    function getBlockBasefee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/interfaces/ISelfMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_api3ServerV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"DeployedDapiProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oevBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"DeployedDapiProxyWithOev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"DeployedDataFeedProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oevBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"DeployedDataFeedProxyWithOev\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"api3ServerV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"computeDapiProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oevBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"computeDapiProxyWithOevAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"computeDataFeedProxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oevBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"computeDataFeedProxyWithOevAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"deployDapiProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oevBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"deployDapiProxyWithOev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"deployDataFeedProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oevBeneficiary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"deployDataFeedProxyWithOev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProxyFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000003dec619dc529363767dee9e71d8dd1a5bc270d76", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}