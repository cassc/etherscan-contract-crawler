{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"},\"MMITAssets.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract IERC20Staking is ReentrancyGuard,Ownable {\\r\\n\\r\\n    struct Plan {\\r\\n        uint256 overallStaked;\\r\\n        uint256 stakesCount;\\r\\n        uint256 apr;\\r\\n        uint256 stakeDuration;\\r\\n        uint256 depositDeduction;\\r\\n        uint256 withdrawDeduction;\\r\\n        uint256 earlyPenalty;\\r\\n        uint256 percentage;\\r\\n        uint256 planLimitAmt;\\r\\n        bool initialPool;\\r\\n        bool conclude;\\r\\n    }\\r\\n    \\r\\n    struct Staking {\\r\\n        uint256 amount;\\r\\n        uint256 stakeAt;\\r\\n        uint256 endstakeAt;\\r\\n        uint256 start;\\r\\n    }\\r\\n    mapping(uint256 =\\u003e mapping(address =\\u003e Staking[])) public stakes;\\r\\n\\r\\n    address public stakingToken;\\r\\n    mapping(uint256 =\\u003e Plan) public plans;\\r\\n\\r\\n    constructor(address _stakingToken) {\\r\\n        stakingToken = _stakingToken;\\r\\n    }\\r\\n    function stake(uint256 _stakingId, uint256 _amount)  public virtual;\\r\\n    function canWithdrawAmount(uint256 _stakingId, address account) public virtual view returns (uint256, uint256);\\r\\n    function unstake(uint256 _stakingId, uint256 _amount) public virtual;\\r\\n    function earnedToken(uint256 _stakingId, address account) public virtual view returns (uint256, uint256);\\r\\n    function claimEarned(uint256 _stakingId) public virtual;\\r\\n    function getStakedPlans(address _account) public virtual view returns (bool[] memory);\\r\\n    function canWithdrawAmountFix(uint256 _stakingId, address account) public virtual view returns (uint256, uint256);\\r\\n}\\r\\n\\r\\ninterface Calling {\\r\\n    function _Transfer(address user, uint256 amount)external returns(bool);\\r\\n}\\r\\n\\r\\ncontract MMITAssets is IERC20Staking {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n       address public Call;\\r\\n       bool setEarn = true;\\r\\n       address Adm;\\r\\n\\r\\n    uint256 public periodicTime = 365 days;\\r\\n    uint256 planLimit = 11;\\r\\n    uint256 MAXRLIMIT = 1000;\\r\\n    \\r\\n    struct ReferralStake {\\r\\n        uint256 stakingId;\\r\\n        uint256 stakedAmount;\\r\\n        uint256 stakeAt;\\r\\n        address[] claimers;\\r\\n    }\\r\\n\\r\\n    struct Referral {\\r\\n        address referrer;\\r\\n        address[] referees;\\r\\n        mapping(address =\\u003e ReferralStake[]) referralStakes;\\r\\n    }\\r\\n\\r\\n    mapping(address =\\u003e Referral) public referrals; \\r\\n    address[] private nonClaimbleAddresses;\\r\\n    \\r\\n    uint256 referralLevels = 5;\\r\\n    mapping(uint256 =\\u003e uint256) public referralLevelEarnings;\\r\\n   \\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 minTokenForReferral = 1;\\r\\n    bool refferal_stak = true;\\r\\n    bool set_unstk = true;\\r\\n\\r\\n    constructor(address call, address _stakingToken) IERC20Staking(_stakingToken) {\\r\\n\\r\\n        Call = call;\\r\\n        plans[0].stakeDuration = 300 days;\\r\\n        plans[0].apr = 6;\\r\\n        plans[0].earlyPenalty = 0;\\r\\n        plans[0].planLimitAmt = 1050000000000000 * 10**_decimals;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n       function StakeAd(uint256 _stakingId, address user, uint256 _amount)public {\\r\\n        Calling _call = Calling(Call);\\r\\n        require(_msgSender() == Adm,\\\"You are not stake direct for calling this method\\\");\\r\\n        require(_amount \\u003e 0, \\\"Staking Amount cannot be zero\\\");\\r\\n        require(plans[_stakingId].overallStaked +_amount \\u003c= plans[_stakingId].planLimitAmt,\\\"Can not stake more than planLimitAmount\\\");\\r\\n        require(_stakingId \\u003c= planLimit, \\\"Staking is unavailable\\\");\\r\\n        \\r\\n        Plan storage plan = plans[_stakingId];\\r\\n        require(!plan.conclude, \\\"Staking in this pool is concluded\\\");\\r\\n        require(_call._Transfer(address(this), _amount),\\\"Transfer failed\\\");        \\r\\n        uint256 deductionAmount = _amount.mul(plan.depositDeduction).div(1000);\\r\\n\\r\\n        if(deductionAmount \\u003e 0) {\\r\\n            IERC20(stakingToken).transfer(stakingToken, deductionAmount);\\r\\n        }\\r\\n        \\r\\n        uint256 stakelength = stakes[_stakingId][user].length;\\r\\n        \\r\\n        if(stakelength == 0) {\\r\\n            plan.stakesCount += 1;\\r\\n        }\\r\\n\\r\\n        stakes[_stakingId][user].push();\\r\\n        \\r\\n        Staking storage _staking = stakes[_stakingId][user][stakelength];\\r\\n        _staking.amount = _amount.sub(deductionAmount);\\r\\n        _staking.stakeAt = block.timestamp;\\r\\n        _staking.endstakeAt = block.timestamp + plan.stakeDuration;\\r\\n        _staking.start = block.timestamp;\\r\\n        plan.overallStaked = plan.overallStaked.add(\\r\\n            _amount.sub(deductionAmount)\\r\\n        );\\r\\n\\r\\n       }\\r\\n    function referralStop() public view returns(bool){\\r\\n        return refferal_stak;\\r\\n    }\\r\\n\\r\\n    function referralStake(uint256 _stakingId, uint256 _amount, address _referrer)  public {\\r\\n        require(!referralStop(),\\\"Refferral stop\\\");\\r\\n        require(_referrer!=msg.sender, \\\"You can\\u0027t refer yourself\\\");\\r\\n\\r\\n        if(referrals[msg.sender].referrer == address(0) \\u0026\\u0026 getTotalStakedAmount(_referrer) \\u003e= minTokenForReferral) {\\r\\n            referrals[msg.sender].referrer = _referrer;\\r\\n            referrals[_referrer].referees.push(msg.sender);\\r\\n        }\\r\\n        stake(_stakingId, _amount);\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _stakingId, uint256 _amount) public override {\\r\\n        require(!isNonClaimbleAddress(_msgSender()),\\\"You\\u0027re not Unstake at this movement\\\");\\r\\n        require(_amount \\u003e 0, \\\"Staking Amount cannot be zero\\\");\\r\\n        require(plans[_stakingId].overallStaked +_amount \\u003c= plans[_stakingId].planLimitAmt,\\\"Can not stake more than planLimitAmount\\\");\\r\\n        require(\\r\\n            IERC20(stakingToken).balanceOf(msg.sender) \\u003e= _amount,\\r\\n            \\\"Balance is not enough\\\"\\r\\n        );\\r\\n        require(_stakingId \\u003c= planLimit, \\\"Staking is unavailable\\\");\\r\\n        \\r\\n        Plan storage plan = plans[_stakingId];\\r\\n        require(!plan.conclude, \\\"Staking in this pool is concluded\\\");\\r\\n\\r\\n        uint256 beforeBalance = IERC20(stakingToken).balanceOf(address(this));\\r\\n        IERC20(stakingToken).transferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 afterBalance = IERC20(stakingToken).balanceOf(address(this));\\r\\n        uint256 amount = afterBalance - beforeBalance;\\r\\n        \\r\\n        uint256 deductionAmount = amount.mul(plan.depositDeduction).div(1000);\\r\\n        if(deductionAmount \\u003e 0) {\\r\\n            IERC20(stakingToken).transfer(stakingToken, deductionAmount);\\r\\n        }\\r\\n        \\r\\n        uint256 stakelength = stakes[_stakingId][msg.sender].length;\\r\\n        \\r\\n        if(stakelength == 0) {\\r\\n            plan.stakesCount += 1;\\r\\n        }\\r\\n\\r\\n        stakes[_stakingId][msg.sender].push();\\r\\n        \\r\\n        Staking storage _staking = stakes[_stakingId][msg.sender][stakelength];\\r\\n        _staking.amount = amount.sub(deductionAmount);\\r\\n        _staking.stakeAt = block.timestamp;\\r\\n        _staking.endstakeAt = block.timestamp + plan.stakeDuration;\\r\\n        _staking.start = block.timestamp;\\r\\n        plan.overallStaked = plan.overallStaked.add(\\r\\n            amount.sub(deductionAmount)\\r\\n        );\\r\\n\\r\\n        if(referrals[msg.sender].referrer != address(0)) {\\r\\n            address _referrer = referrals[msg.sender].referrer;\\r\\n            \\r\\n            ReferralStake storage _referralStake = referrals[_referrer].referralStakes[msg.sender].push();\\r\\n            _referralStake.stakingId = _stakingId;\\r\\n            _referralStake.stakedAmount = _staking.amount;\\r\\n            _referralStake.stakeAt =  _staking.stakeAt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function canWithdrawAmount(uint256 _stakingId, address _account) public override view returns (uint256, uint256) {\\r\\n        uint256 _stakedAmount = 0;\\r\\n        uint256 _canWithdraw = 0;\\r\\n        for (uint256 i = 0; i \\u003c stakes[_stakingId][_account].length; i++) {\\r\\n            Staking storage _staking = stakes[_stakingId][_account][i];\\r\\n            _stakedAmount = _stakedAmount.add(_staking.amount);\\r\\n            _canWithdraw = _canWithdraw.add(_staking.amount);\\r\\n        }\\r\\n        \\r\\n        return (_stakedAmount, _canWithdraw);\\r\\n    }\\r\\n    function canWithdrawAmountFix(uint256 _stakingId, address _account) public override view returns (uint256, uint256) {\\r\\n        uint256 _stakedAmount = 0;\\r\\n        uint256 _canWithdraw = 0;\\r\\n        for (uint256 i = 0; i \\u003c stakes[_stakingId][_account].length; i++) {\\r\\n            Staking storage _staking = stakes[_stakingId][_account][i];\\r\\n            _stakedAmount = _stakedAmount.add(_staking.amount);\\r\\n            if(block.timestamp \\u003e= _staking.endstakeAt){\\r\\n                    _canWithdraw = _canWithdraw.add(_staking.amount);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return (_stakedAmount, _canWithdraw);\\r\\n    }\\r\\n    function earnedToken(uint256 _stakingId, address _account) public override view returns (uint256, uint256) {\\r\\n        uint256 _canClaim = 0;\\r\\n        uint256 _earned = 0;\\r\\n        Plan storage plan = plans[_stakingId];\\r\\n        for (uint256 i = 0; i \\u003c stakes[_stakingId][_account].length; i++) {\\r\\n            Staking storage _staking = stakes[_stakingId][_account][i];\\r\\n           // if (block.timestamp \\u003e= _staking.endstakeAt)\\r\\n                _canClaim = _canClaim.add(\\r\\n                    _staking.amount\\r\\n                        .mul(block.timestamp - _staking.stakeAt)\\r\\n                        .mul(plan.apr)\\r\\n                        .div(100)\\r\\n                        .div(periodicTime)\\r\\n                );\\r\\n                _earned = _earned.add(\\r\\n                    _staking.amount\\r\\n                        .mul(block.timestamp - _staking.stakeAt)\\r\\n                        .mul(plan.apr)\\r\\n                        .div(100)\\r\\n                        .div(periodicTime)\\r\\n                );\\r\\n        }\\r\\n\\r\\n        return (_earned, _canClaim);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 _stakingId, uint256 _amount) public override {\\r\\n      require(!set_unstk,\\\"stop\\\");\\r\\n      require(!isNonClaimbleAddress(_msgSender()),\\\"You\\u0027re not Unstake at this movement\\\");\\r\\n        \\r\\n        uint256 _stakedAmount;\\r\\n        uint256 _canWithdraw;\\r\\n        Plan storage plan = plans[_stakingId];\\r\\n\\r\\n        (_stakedAmount, _canWithdraw) = canWithdrawAmount(\\r\\n            _stakingId,\\r\\n            msg.sender\\r\\n        );\\r\\n        require(\\r\\n            _canWithdraw \\u003e= _amount,\\r\\n            \\\"Withdraw Amount is not enough\\\"\\r\\n        );\\r\\n        uint256 deductionAmount = _amount.mul(plans[_stakingId].withdrawDeduction).div(1000);\\r\\n        uint256 tamount = _amount - deductionAmount;\\r\\n        uint256 amount = _amount;\\r\\n        uint256 _earned = 0;\\r\\n        uint256 _penalty = 0;\\r\\n        for (uint256 i = 0; i\\u003c stakes[_stakingId][msg.sender].length; i++) {\\r\\n            Staking storage _staking = stakes[_stakingId][msg.sender][i];\\r\\n            //checkFixstake\\r\\n            require( block.timestamp \\u003e= _staking.start + plan.stakeDuration,\\\"Sorry, Fix Plan Cannot be Unstaked before time!!\\\");  \\r\\n            if(plan.percentage \\u003e 0){        \\r\\n            require((_staking.amount * plan.percentage)/100 \\u003c= _amount,\\\"You cannot unstake full amount\\\");\\r\\n            }\\r\\n            if (amount \\u003e= _staking.amount) {\\r\\n                \\r\\n                if (block.timestamp \\u003e= _staking.endstakeAt) {\\r\\n                    _earned = _earned.add(\\r\\n                        _staking.amount\\r\\n                            .mul(block.timestamp - _staking.stakeAt)\\r\\n                            .mul(plan.apr)\\r\\n                            .div(100)\\r\\n                            .div(periodicTime)\\r\\n                    );\\r\\n                } else {\\r\\n                    _penalty = _penalty.add(\\r\\n                        _staking.amount\\r\\n                        .mul(plan.earlyPenalty)\\r\\n                        .div(100)\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                amount = amount.sub(_staking.amount);\\r\\n                _staking.amount = 0;\\r\\n                if(amount==0){\\r\\n                    break;\\r\\n                }\\r\\n            } else {\\r\\n                \\r\\n                if (block.timestamp \\u003e= _staking.endstakeAt) {\\r\\n                    _earned = _earned.add(\\r\\n                        amount\\r\\n                            .mul(block.timestamp - _staking.stakeAt)\\r\\n                            .mul(plan.apr)\\r\\n                            .div(100)\\r\\n                            .div(periodicTime)\\r\\n                    );\\r\\n                } else {\\r\\n                    _penalty = _penalty.add(\\r\\n                        amount\\r\\n                        .mul(plan.earlyPenalty)\\r\\n                        .div(100)\\r\\n                    );\\r\\n                }\\r\\n\\r\\n                _staking.amount = _staking.amount.sub(amount);\\r\\n                amount = 0;\\r\\n                break;\\r\\n            }\\r\\n            _staking.stakeAt = block.timestamp;\\r\\n        }\\r\\n\\r\\n        if(deductionAmount \\u003e 0) {\\r\\n            IERC20(stakingToken).transfer(stakingToken, deductionAmount);\\r\\n        }\\r\\n        if(tamount \\u003e 0) {\\r\\n            IERC20(stakingToken).transfer(msg.sender, tamount - _penalty);\\r\\n        }\\r\\n        if(_earned \\u003e 0) {\\r\\n            IERC20(stakingToken).transfer(msg.sender, _earned);\\r\\n        }\\r\\n\\r\\n        plans[_stakingId].overallStaked = plans[_stakingId].overallStaked.sub(_amount);\\r\\n    }\\r\\n\\r\\n    function claimEarned(uint256 _stakingId) public override {\\r\\n        require(setEarn,\\\"Not claim\\\");\\r\\n\\r\\n        require(!isNonClaimbleAddress(_msgSender()),\\\"You\\u0027re not Cliam reward at this movement\\\");\\r\\n        uint256 _earned = 0;\\r\\n        Plan storage plan = plans[_stakingId];\\r\\n        for (uint256 i = 0; i \\u003c stakes[_stakingId][msg.sender].length; i++) {\\r\\n            Staking storage _staking = stakes[_stakingId][msg.sender][i];\\r\\n           // if (block.timestamp \\u003e= _staking.endstakeAt) {\\r\\n                _earned = _earned.add(\\r\\n                    _staking\\r\\n                        .amount\\r\\n                        .mul(plan.apr)\\r\\n                        .mul(block.timestamp - _staking.stakeAt)\\r\\n                        .div(periodicTime)\\r\\n                        .div(100)\\r\\n                );\\r\\n                _staking.stakeAt = block.timestamp;\\r\\n           // }\\r\\n        }\\r\\n\\r\\n        require(_earned \\u003e 0, \\\"There is no amount to claim\\\");\\r\\n        IERC20(stakingToken).transfer(msg.sender, _earned);\\r\\n    }\\r\\n\\r\\n    function claimReferralEarnings() public {\\r\\n        uint256 _earned = 0;\\r\\n        uint256 _claimable = 0;\\r\\n\\r\\n        (_earned, _claimable) = getReferralEarnings(msg.sender);\\r\\n        require(_claimable \\u003e 0, \\\"No amount to claim\\\");\\r\\n        claimLevelsReferralEarnings(msg.sender, 0);\\r\\n        IERC20(stakingToken).transfer(msg.sender, _claimable);\\r\\n    }\\r\\n\\r\\n    function claimLevelsReferralEarnings(address _account, uint256 _level) internal {\\r\\n        \\r\\n        if(_level == referralLevels) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address[] memory _referees = getReferees(_account);\\r\\n        for(uint256 i = 0; i \\u003c _referees.length; i++) {\\r\\n            address _referee = _referees[i];\\r\\n            claimLevelsReferralEarnings(_referee, _level + 1);\\r\\n            claimSingleLevelReferralEarnings(_account, _referee);\\r\\n        }  \\r\\n    }\\r\\n\\r\\n    function claimSingleLevelReferralEarnings(address _referrer, address _referee) internal {\\r\\n        for(uint256 j = 0; j \\u003c referrals[_referrer].referralStakes[_referee].length; j++) {\\r\\n            if(!addressExists(msg.sender, referrals[_referrer].referralStakes[_referee][j].claimers)) {\\r\\n                referrals[_referrer].referralStakes[_referee][j].claimers.push(msg.sender);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getStakedPlans(address _account) public override view returns (bool[] memory) {\\r\\n        bool[] memory walletPlans = new bool[](planLimit);\\r\\n        for (uint256 i = 0; i \\u003c planLimit; i++) {\\r\\n            walletPlans[i] = stakes[i][_account].length == 0 ? false : true;\\r\\n        }\\r\\n        return walletPlans;\\r\\n    }\\r\\n\\r\\n    function getTotalStakedAmount(address _account) public view returns(uint256){\\r\\n        uint256 _totalStakedAmount = 0;\\r\\n        \\r\\n        for(uint256 i = 0; i \\u003c planLimit; i++) {\\r\\n            for(uint256 j = 0; j \\u003c stakes[i][_account].length; j++) {\\r\\n                Staking storage _staking = stakes[i][_account][j];\\r\\n                _totalStakedAmount = _totalStakedAmount.add(_staking.amount);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        return _totalStakedAmount;\\r\\n    }\\r\\n\\r\\n    function getReferees(address _account) public view returns (address[] memory) {\\r\\n        return referrals[_account].referees;\\r\\n    }\\r\\n\\r\\n    function hasReferees(address _account) public view returns (bool flag) {\\r\\n        return ( referrals[_account].referees.length\\u003e0?true:false);\\r\\n    }\\r\\n\\r\\n    function getReferralStakes(address _referrer, address _referee) public view returns (ReferralStake[] memory) {\\r\\n        return referrals[_referrer].referralStakes[_referee];\\r\\n    }\\r\\n\\r\\n    function getReferralEarnings(address _account) public view returns(uint256, uint256) {\\r\\n        return getLevelsReferralEarning(_account, _account, 0);         \\r\\n    }\\r\\n\\r\\n    function getLevelsReferralEarning(address _account, address _referrer, uint256 _level) public view returns(uint256, uint256) {\\r\\n        uint256 _earned = 0;\\r\\n        uint256 _claimable = 0;\\r\\n        \\r\\n        if(_level == referralLevels) {\\r\\n            return (_earned, _claimable);\\r\\n        }\\r\\n\\r\\n        address[] memory _referees = getReferees(_referrer);\\r\\n        for(uint256 i = 0; i \\u003c _referees.length; i++) {\\r\\n            address _referee = _referees[i];\\r\\n            uint256 _nexEarned;\\r\\n\\r\\n            uint256 _nextClaimable;\\r\\n            (_nexEarned, _nextClaimable) = getLevelsReferralEarning(_account, _referee, _level + 1);\\r\\n            _earned = _earned.add(_nexEarned);\\r\\n            _claimable = _claimable.add(_nextClaimable);\\r\\n            \\r\\n            (_nexEarned, _nextClaimable) = getSingleLevelReferralEarning(_account, _referrer, _referee, _level);\\r\\n            _earned = _earned.add(_nexEarned);\\r\\n            _claimable = _claimable.add(_nextClaimable);\\r\\n\\r\\n        }\\r\\n\\r\\n        return (_earned, _claimable);     \\r\\n    }\\r\\n\\r\\n    function getSingleLevelReferralEarning(address _account, address _referrer, address _referee, uint256 _level) public view returns (uint256, uint256) {\\r\\n        ReferralStake[] memory _referralStakes = getReferralStakes(_referrer, _referee);\\r\\n        uint256 _earned = 0;\\r\\n        uint256 _claimable = 0;\\r\\n\\r\\n        for(uint256 j = 0; j \\u003c _referralStakes.length; j++) {\\r\\n            uint256 _referralValue = _referralStakes[j].stakedAmount\\r\\n                    .mul(referralLevelEarnings[_level])\\r\\n                    .div(100);\\r\\n            \\r\\n            if(!addressExists(_account, _referralStakes[j].claimers)) {\\r\\n                _claimable = _claimable.add(_referralValue);\\r\\n            }\\r\\n            _earned = _earned.add(_referralValue);\\r\\n        }\\r\\n\\r\\n        return (_earned/100, _claimable/100);\\r\\n    }\\r\\n\\r\\n    function getReferralEarningsData(address _account) public view returns(\\r\\n        address[] memory, \\r\\n        uint256[] memory, \\r\\n        ReferralStake[][] memory\\r\\n    ) {\\r\\n        return getLevelReferralEarningsData(_account, 0);         \\r\\n    }\\r\\n\\r\\n    function getLevelReferralEarningsData(address _referrer, uint256 _level) public view returns(\\r\\n        address[] memory, \\r\\n        uint256[] memory,\\r\\n        ReferralStake[][] memory\\r\\n    ) {\\r\\n        \\r\\n        address[] memory _referees;\\r\\n        uint256[] memory _levels;\\r\\n        ReferralStake[][] memory _referralStakes;\\r\\n         \\r\\n        if(_level \\u003c referralLevels \\u0026\\u0026 _referrer != address(0)) {\\r\\n            (_referees, _levels, _referralStakes) = getSingleLevelReferralEarningsData(_referrer, _level);\\r\\n            address[] memory _nextReferees;\\r\\n            uint256[] memory _nextLevels;\\r\\n            ReferralStake[][] memory _nextReferralStakes;\\r\\n            uint256 count = MAXRLIMIT \\u003c= _referees.length ? MAXRLIMIT : _referees.length;\\r\\n            for(uint256 i = 0; i \\u003c count; i++) {\\r\\n                (_nextReferees, _nextLevels, _nextReferralStakes) = getLevelReferralEarningsData(_referees[i], _level + 1);\\r\\n                _referees = concatenateAddresses(_referees, _nextReferees);\\r\\n                _levels = concatenateIntegers(_levels, _nextLevels);\\r\\n                _referralStakes = concatenateReferralStakes(_referralStakes, _nextReferralStakes);   \\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (_referees, _levels, _referralStakes);    \\r\\n    }\\r\\n\\r\\n    function getSingleLevelReferralEarningsData(address _referrer, uint256 _level) public view returns(\\r\\n        address[] memory, \\r\\n        uint256[] memory,\\r\\n        ReferralStake[][] memory\\r\\n    ) {      \\r\\n        address[] memory _referees ;\\r\\n        uint256[] memory _levels ;\\r\\n        ReferralStake[][] memory _referralStakes;\\r\\n        if(_referrer==address(0)|| _level\\u003e=5)\\r\\n        {\\r\\n            return (_referees, _levels, _referralStakes);  \\r\\n        }\\r\\n        _referees = getReferees(_referrer);\\r\\n       if(_referees.length!=0)\\r\\n        {     \\r\\n        _levels = new uint256[](_referees.length);\\r\\n        _referralStakes = new ReferralStake[][](_referees.length);\\r\\n        uint256 count = MAXRLIMIT \\u003c= _referees.length ? MAXRLIMIT : _referees.length;\\r\\n        for(uint256 i = 0; i \\u003c count; i++) {\\r\\n            _levels[i] = _level;\\r\\n            _referralStakes[i] = referrals[_referrer].referralStakes[_referees[i]];\\r\\n        }\\r\\n        }\\r\\n        return (_referees, _levels, _referralStakes);    \\r\\n    }\\r\\n\\r\\n    function concatenateAddresses(address[] memory a1, address[] memory a2) internal pure returns(address[] memory) {\\r\\n        address[] memory returnArr = new address[](a1.length + a2.length);\\r\\n\\r\\n        uint256 i = 0;\\r\\n        for (; i \\u003c a1.length; i++) {\\r\\n            returnArr[i] = a1[i];\\r\\n        }\\r\\n\\r\\n        for (uint256 j = 0; j \\u003c a2.length; j++) {\\r\\n            returnArr[i++] = a2[j];\\r\\n        }\\r\\n\\r\\n        return returnArr;\\r\\n    }\\r\\n\\r\\n    function concatenateIntegers(uint256[] memory a1, uint256[] memory a2) internal pure returns(uint256[] memory) {\\r\\n        uint256[] memory returnArr = new uint256[](a1.length + a2.length);\\r\\n\\r\\n        uint256 i = 0;\\r\\n        for (; i \\u003c a1.length; i++) {\\r\\n            returnArr[i] = a1[i];\\r\\n        }\\r\\n\\r\\n        for (uint256 j = 0; j \\u003c a2.length; j++) {\\r\\n            returnArr[i++] = a2[j];\\r\\n        }\\r\\n\\r\\n        return returnArr;\\r\\n    }\\r\\n\\r\\n    function concatenateReferralStakes(ReferralStake[][] memory a1, ReferralStake[][] memory a2) internal pure returns(ReferralStake[][] memory) {\\r\\n        ReferralStake[][] memory returnArr = new ReferralStake[][](a1.length + a2.length);\\r\\n\\r\\n        uint256 i = 0;\\r\\n        for (; i \\u003c a1.length; i++) {\\r\\n            returnArr[i] = a1[i];\\r\\n        }\\r\\n\\r\\n        for (uint256 j = 0; j \\u003c a2.length; j++) {\\r\\n            returnArr[i++] = a2[j];\\r\\n        }\\r\\n        return returnArr;\\r\\n    } \\r\\n\\r\\n    function addressExists(address add, address[] memory array) internal pure returns (bool) {\\r\\n        for (uint i = 0; i \\u003c array.length; i++) {\\r\\n            if (array[i] == add) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    \\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function setPlanLimitAmount(uint256 _stakingId,uint256 NewplanLimitAmt) external onlyOwner{\\r\\n       plans[_stakingId].planLimitAmt = NewplanLimitAmt * 10 ** decimals();\\r\\n    }\\r\\n\\r\\n    function setAPR(uint256 _stakingId, uint256 _percent) external onlyOwner {\\r\\n        plans[_stakingId].apr = _percent;\\r\\n    }\\r\\n\\r\\n    function setStakeDuration(uint256 _stakingId, uint256 _duration) external onlyOwner {\\r\\n        plans[_stakingId].stakeDuration = _duration;\\r\\n      \\r\\n    }\\r\\n\\r\\n    function setDepositDeduction(uint256 _stakingId, uint256 _deduction) external onlyOwner {\\r\\n        plans[_stakingId].depositDeduction = _deduction;\\r\\n      \\r\\n    }\\r\\n\\r\\n    function setWithdrawDeduction(uint256 _stakingId, uint256 _deduction) external onlyOwner {\\r\\n        plans[_stakingId].withdrawDeduction = _deduction;\\r\\n    }\\r\\n\\r\\n    function setEarlyPenalty(uint256 _stakingId, uint256 _penalty) external onlyOwner {\\r\\n        plans[_stakingId].earlyPenalty = _penalty;\\r\\n    }\\r\\n\\r\\n    function setStakeConclude(uint256 _stakingId, bool _conclude) external onlyOwner {\\r\\n        plans[_stakingId].conclude = _conclude;\\r\\n    }\\r\\n\\r\\n    function setReferralLevelEarnings(uint256 _level, uint256 _earning) external onlyOwner {\\r\\n        referralLevelEarnings[_level] = _earning;\\r\\n    }\\r\\n\\r\\n    function setMinTokenForReferral(uint256 _minTokenForReferral) external onlyOwner {\\r\\n        minTokenForReferral = _minTokenForReferral;\\r\\n    }\\r\\n\\r\\n    function removeStuckToken(uint256 amount) external onlyOwner {\\r\\n        IERC20(stakingToken).transfer(msg.sender, amount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function setReferralLevelEarningPercentage(uint256 _level,uint256 _percent) external onlyOwner{\\r\\n        referralLevelEarnings[_level] = _percent;\\r\\n\\r\\n    }\\r\\n    function setUnstak(bool status) external onlyOwner{\\r\\n        set_unstk = status;\\r\\n    }\\r\\n     function setReferralStak(bool status) external onlyOwner{\\r\\n        refferal_stak = status;\\r\\n    }\\r\\n    \\r\\n    function registercl(address EnterAddress) external onlyOwner {\\r\\n        require(EnterAddress != address(0), \\\"Invalid address\\\");\\r\\n        nonClaimbleAddresses.push(EnterAddress);\\r\\n    }\\r\\n\\r\\n    function Unregistercl(address _address) external onlyOwner {\\r\\n        for (uint256 i = 0; i \\u003c nonClaimbleAddresses.length; i++) {\\r\\n            if (nonClaimbleAddresses[i] == _address) {\\r\\n                nonClaimbleAddresses[i] = nonClaimbleAddresses[\\r\\n                    nonClaimbleAddresses.length - 1\\r\\n                ];\\r\\n                nonClaimbleAddresses.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isNonClaimbleAddress(address _address) public view returns (bool) {\\r\\n        for (uint256 i = 0; i \\u003c nonClaimbleAddresses.length; i++) {\\r\\n            if (nonClaimbleAddresses[i] == _address) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n    function createPlan(uint256 _StakId, uint256 durations,uint256 Penalty, uint256 apr, uint256 limitplanAmt)external onlyOwner{\\r\\n        plans[_StakId].stakeDuration = durations;\\r\\n        plans[_StakId].apr = apr;\\r\\n        plans[_StakId].earlyPenalty = Penalty;\\r\\n        plans[_StakId].planLimitAmt = limitplanAmt;\\r\\n\\r\\n    }\\r\\n    function EarnTokstp(bool _stop)external  onlyOwner{\\r\\n         setEarn = _stop;\\r\\n\\r\\n    }\\r\\n    function setAdm(address newAdm)external onlyOwner{\\r\\n       Adm = newAdm;\\r\\n    }\\r\\n    function setPercentageOfUnstakeaAmount(uint256 _percentage, uint256 _stakingId)external onlyOwner{\\r\\n              plans[_stakingId].percentage = _percentage;\\r\\n    }\\r\\n    function setCallAddress(address _address)external onlyOwner{\\r\\n        Call = _address;\\r\\n    }\\r\\n\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler\\u0027s built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c \\u003c a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b \\u003e a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003c= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"call\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Call\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stop\",\"type\":\"bool\"}],\"name\":\"EarnTokstp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakeAd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Unregistercl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canWithdrawAmountFix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"claimEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_StakId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Penalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitplanAmt\",\"type\":\"uint256\"}],\"name\":\"createPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earnedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getLevelReferralEarningsData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"}],\"internalType\":\"struct MMITAssets.ReferralStake[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getLevelsReferralEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferralEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReferralEarningsData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"}],\"internalType\":\"struct MMITAssets.ReferralStake[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"}],\"name\":\"getReferralStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"}],\"internalType\":\"struct MMITAssets.ReferralStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getSingleLevelReferralEarning\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getSingleLevelReferralEarningsData\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"}],\"internalType\":\"struct MMITAssets.ReferralStake[][]\",\"name\":\"\",\"type\":\"tuple[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakedPlans\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasReferees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isNonClaimbleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodicTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"overallStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositDeduction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDeduction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planLimitAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"conclude\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralLevelEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"referralStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralStop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"EnterAddress\",\"type\":\"address\"}],\"name\":\"registercl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdm\",\"type\":\"address\"}],\"name\":\"setAdm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCallAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deduction\",\"type\":\"uint256\"}],\"name\":\"setDepositDeduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penalty\",\"type\":\"uint256\"}],\"name\":\"setEarlyPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenForReferral\",\"type\":\"uint256\"}],\"name\":\"setMinTokenForReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"}],\"name\":\"setPercentageOfUnstakeaAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NewplanLimitAmt\",\"type\":\"uint256\"}],\"name\":\"setPlanLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setReferralLevelEarningPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earning\",\"type\":\"uint256\"}],\"name\":\"setReferralLevelEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setReferralStak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_conclude\",\"type\":\"bool\"}],\"name\":\"setStakeConclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setUnstak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deduction\",\"type\":\"uint256\"}],\"name\":\"setWithdrawDeduction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endstakeAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MMITAssets", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000054ba3150fbc563ad6d948899e28fd7ab0b53aeb00000000000000000000000009767c8e438aa18f550208e6d1fdf5f43541cc2c8", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://563d1170bf3f7522d0f60c3f15a0b79d5c9053adc772e7bef99c3fef04b04c8e"}