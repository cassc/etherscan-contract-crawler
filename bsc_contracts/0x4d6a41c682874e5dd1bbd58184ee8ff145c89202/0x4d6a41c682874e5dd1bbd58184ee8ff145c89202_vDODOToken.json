{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title DecimalMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Functions for fixed point number with 18 decimals\r\n */\r\nlibrary DecimalMath {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 internal constant ONE = 10 ** 18;\r\n    uint256 internal constant ONE2 = 10 ** 36;\r\n\r\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d) / (10 ** 18);\r\n    }\r\n\r\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(d).divCeil(10 ** 18);\r\n    }\r\n\r\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10 ** 18).div(d);\r\n    }\r\n\r\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\r\n        return target.mul(10 ** 18).divCeil(d);\r\n    }\r\n\r\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10 ** 36).div(target);\r\n    }\r\n\r\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\r\n        return uint256(10 ** 36).divCeil(target);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\ninterface IGovernance {\r\n    function getLockedvDODO(address account) external view returns (uint256);\r\n}\r\n\r\ncontract vDODOToken is InitializableOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    // ============ Storage(ERC20) ============\r\n\r\n    string public name = \"vDODO Mapping Token\";\r\n    string public symbol = \"vDODO\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 0;\r\n\r\n    // ============ Storage ============\r\n    address public _DOOD_GOV_;\r\n\r\n    // staking reward parameters\r\n    uint256 public constant _DODO_RATIO_ = 100; // 100\r\n\r\n    // accounting\r\n    uint112 public alpha = 10 ** 18; // 1\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n\r\n    struct UserInfo {\r\n        uint128 stakingPower;\r\n        uint128 superiorSP;\r\n        address superior;\r\n        uint256 credit;\r\n    }\r\n    // ============ Ownable Functions ============\r\n    function updateGovernance(address governance) public onlyOwner {\r\n        _DOOD_GOV_ = governance;\r\n    }\r\n\r\n    /**\r\n    * valueList[]\r\n    */\r\n    function updateGlobalSettings(uint256[] memory valueList) public onlyOwner {\r\n        require(valueList.length==2,\"2 params need\");\r\n         totalSupply = valueList[0];\r\n         alpha = uint112(valueList[1]);\r\n    }\r\n\r\n    function updateUserParams(address[] memory users, uint256[] memory sps, uint256[] memory superiorSPs, address[] memory superior, uint256[] memory credit) public onlyOwner {\r\n        require(users.length == sps.length && sps.length == superiorSPs.length && superiorSPs.length == superior.length && superior.length == credit.length, \"length not matched\");\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            UserInfo storage user = userInfo[users[i]];\r\n\r\n            user.stakingPower = uint128(sps[i]);\r\n            user.superiorSP = uint128(superiorSPs[i]);\r\n            user.superior = superior[i];\r\n            user.credit = credit[i];\r\n        }\r\n    }\r\n\r\n    // ============ ERC20 Functions ============\r\n\r\n    function balanceOf(address account) public view returns (uint256 vDODOAmount) {\r\n        vDODOAmount = dodoBalanceOf(account) / _DODO_RATIO_;\r\n    }\r\n\r\n    // ============ Helper Functions ============\r\n    function availableBalanceOf(address account) public view returns (uint256 vDODOAmount) {\r\n        if (_DOOD_GOV_ == address(0)) {\r\n            vDODOAmount = balanceOf(account);\r\n        } else {\r\n            uint256 lockedvDODOAmount = IGovernance(_DOOD_GOV_).getLockedvDODO(account);\r\n            vDODOAmount = balanceOf(account).sub(lockedvDODOAmount);\r\n        }\r\n    }\r\n\r\n    function dodoBalanceOf(address account) public view returns (uint256 dodoAmount) {\r\n        UserInfo memory user = userInfo[account];\r\n        uint256 nominalDodo = DecimalMath.mulFloor(uint256(user.stakingPower), alpha);\r\n        if (nominalDodo > user.credit) {\r\n            dodoAmount = nominalDodo - user.credit;\r\n        } else {\r\n            dodoAmount = 0;\r\n        }\r\n    }\r\n\r\n    function getSuperior(address account) public view returns (address superior) {\r\n        return userInfo[account].superior;\r\n    }\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_DODO_RATIO_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DOOD_GOV_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alpha\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vDODOAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vDODOAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dodoBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dodoAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getSuperior\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"valueList\",\"type\":\"uint256[]\"}],\"name\":\"updateGlobalSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"updateGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"superiorSPs\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"superior\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"credit\",\"type\":\"uint256[]\"}],\"name\":\"updateUserParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"stakingPower\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"superiorSP\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"superior\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "vDODOToken", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d10e1c63242003579611d11f25bdf53d4f3b5eb8eb8fbb49501e232ffd70080"}