{"SourceCode": "pragma solidity >=0.4.24 <0.7.0;// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\ncontract WhiteListHelper{\r\n    event NewWhiteList(uint _WhiteListCount, address _creator, address _contract, uint _changeUntil);\r\n\r\n    modifier OnlyCreator(uint256 _Id) {\r\n        require(\r\n            WhitelistSettings[_Id].Creator == msg.sender,\r\n            \"Only creator can access\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier TimeRemaining(uint256 _Id){\r\n        require(\r\n            now < WhitelistSettings[_Id].ChangeUntil,\r\n            \"Time for edit is finished\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier ValidateId(uint256 _Id){\r\n        require(_Id < WhiteListCount, \"Wrong ID\");\r\n        _;\r\n    }\r\n\r\n    struct WhiteListItem {\r\n        // uint256 Limit;\r\n        address Creator;\r\n        uint256 ChangeUntil;\r\n        //uint256 DrawLimit;\r\n        //uint256 SignUpPrice;\r\n        address Contract;\r\n        // mapping(address => uint256) WhiteListDB;\r\n        bool isReady; // defualt false | true after first address is added\r\n    }\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public WhitelistDB;\r\n    mapping(uint256 => WhiteListItem) public WhitelistSettings;\r\n    uint256 public WhiteListCost;\r\n    uint256 public WhiteListCount;\r\n\r\n    function _AddAddress(uint256 _Id, address user, uint amount) internal {\r\n        WhitelistDB[_Id][user] = amount;\r\n    }\r\n\r\n    function _RemoveAddress(uint256 _Id, address user) internal {\r\n        WhitelistDB[_Id][user] = 0;\r\n    }\r\n\r\n    function isWhiteListReady(uint256 _Id) external view returns(bool){\r\n        return WhitelistSettings[_Id].isReady;\r\n    }\r\n\r\n    //View function to Check if address is whitelisted\r\n    function Check(address _user, uint256 _id) external view returns(uint){\r\n        if (_id == 0) return uint256(-1);\r\n        return WhitelistDB[_id][_user];\r\n    }\r\n}\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract WhiteList is WhiteListHelper, Ownable{\r\n    constructor() public {\r\n        WhiteListCount = 1; //0 is off\r\n        MaxUsersLimit = 500;\r\n    }\r\n\r\n    //uint256 public SignUpCost;\r\n    uint256 public MaxUsersLimit;\r\n\r\n    modifier isBelowUserLimit(uint256 _limit) {\r\n        require(_limit <= MaxUsersLimit, \"Maximum User Limit exceeded\");\r\n        _;\r\n    }\r\n\r\n    function setMaxUsersLimit(uint256 _limit) external onlyOwner {\r\n        MaxUsersLimit = _limit;\r\n    }\r\n    \r\n    function WithdrawETHFee(address payable _to) public onlyOwner {\r\n        _to.transfer(address(this).balance); \r\n    }\r\n\r\n    function setWhiteListCost(uint256 _newCost) external onlyOwner {\r\n        WhiteListCost = _newCost;\r\n    }\r\n\r\n    function CreateManualWhiteList(\r\n        uint256 _ChangeUntil,\r\n        address _Contract\r\n    ) public payable returns (uint256 Id) {\r\n        require(msg.value >= WhiteListCost, \"ether not enough\");\r\n        WhitelistSettings[WhiteListCount] =  WhiteListItem(\r\n            /*_Limit == 0 ? uint256(-1) :*/\r\n            // _Limit,\r\n            msg.sender,\r\n            _ChangeUntil,\r\n            _Contract,\r\n            false\r\n        );\r\n        uint256 temp = WhiteListCount;\r\n        WhiteListCount++;\r\n        emit NewWhiteList(temp, msg.sender, _Contract, _ChangeUntil);\r\n        return temp;\r\n    }\r\n\r\n    function ChangeCreator(uint256 _Id, address _NewCreator)\r\n        external\r\n        ValidateId(_Id)\r\n        OnlyCreator(_Id)\r\n        TimeRemaining(_Id)\r\n    {\r\n        WhitelistSettings[_Id].Creator = _NewCreator;\r\n    }\r\n\r\n    function ChangeContract(uint256 _Id, address _NewContract)\r\n        external\r\n        ValidateId(_Id)\r\n        OnlyCreator(_Id)\r\n        TimeRemaining(_Id)\r\n    {\r\n        WhitelistSettings[_Id].Contract = _NewContract;\r\n    }\r\n\r\n    function AddAddress(uint256 _Id, address[] calldata _Users, uint256[] calldata _Amount)\r\n        public\r\n        ValidateId(_Id)\r\n        OnlyCreator(_Id)\r\n        TimeRemaining(_Id)\r\n        isBelowUserLimit(_Users.length)\r\n    {\r\n        require(_Users.length == _Amount.length, \"Number of users should be same as the amount length\");\r\n        require(_Users.length > 0,\"Need something...\");\r\n        if(!WhitelistSettings[_Id].isReady){\r\n            WhitelistSettings[_Id].isReady = true;\r\n        }\r\n        for (uint256 index = 0; index < _Users.length; index++) {\r\n            _AddAddress(_Id, _Users[index], _Amount[index]);\r\n        }\r\n    }\r\n\r\n    function RemoveAddress(uint256 _Id, address[] calldata _Users)\r\n        public\r\n        OnlyCreator(_Id)\r\n        TimeRemaining(_Id)\r\n        ValidateId(_Id)\r\n        isBelowUserLimit(_Users.length)\r\n    {\r\n        for (uint256 index = 0; index < _Users.length; index++) {\r\n            _RemoveAddress(_Id, _Users[index]);\r\n        }\r\n    }\r\n\r\n    function Register(\r\n        address _Subject,\r\n        uint256 _Id,\r\n        uint256 _Amount\r\n    ) external {\r\n        if (_Id == 0) return;\r\n        require(\r\n            msg.sender == WhitelistSettings[_Id].Contract,\r\n            \"Only the Contract can call this\"\r\n        );\r\n        require(\r\n            WhitelistDB[_Id][_Subject] >= _Amount,\r\n            \"Sorry, no alocation for Subject\"\r\n        );\r\n        uint256 temp = WhitelistDB[_Id][_Subject] - _Amount;\r\n        WhitelistDB[_Id][_Subject] = temp;\r\n        assert(WhitelistDB[_Id][_Subject] == temp);\r\n    }\r\n\r\n    function LastRoundRegister(\r\n        address _Subject,\r\n        uint256 _Id\r\n    ) external {\r\n        if (_Id == 0) return;\r\n        require(\r\n            msg.sender == WhitelistSettings[_Id].Contract,\r\n            \"Only the Contract can call this\"\r\n        );\r\n        require(\r\n            WhitelistDB[_Id][_Subject] != uint256(-1),\r\n            \"Sorry, no alocation for Subject\"\r\n        );\r\n        uint256 temp = uint256(-1);\r\n        WhitelistDB[_Id][_Subject] = temp;\r\n        assert(WhitelistDB[_Id][_Subject] == temp);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_WhiteListCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_changeUntil\",\"type\":\"uint256\"}],\"name\":\"NewWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_Users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_Amount\",\"type\":\"uint256[]\"}],\"name\":\"AddAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_NewContract\",\"type\":\"address\"}],\"name\":\"ChangeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_NewCreator\",\"type\":\"address\"}],\"name\":\"ChangeCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"Check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ChangeUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_Contract\",\"type\":\"address\"}],\"name\":\"CreateManualWhiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Subject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"}],\"name\":\"LastRoundRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxUsersLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Subject\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Amount\",\"type\":\"uint256\"}],\"name\":\"Register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_Users\",\"type\":\"address[]\"}],\"name\":\"RemoveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhiteListCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhiteListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WhitelistDB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WhitelistSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ChangeUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"Contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isReady\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"WithdrawETHFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Id\",\"type\":\"uint256\"}],\"name\":\"isWhiteListReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setMaxUsersLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setWhiteListCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WhiteList", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1271700fe33afae93f40320f7fa784781ab83e76109511865e818c2d49ce1b99"}