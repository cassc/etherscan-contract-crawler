{"SourceCode": "\"\"\"\r\n@title Ark Network\r\n@license MIT\r\n@author charmful0x\r\n@notice this contract is only for testing purpose\r\n@dev link an EVM address to an Arweave address. The\r\n     contract is deterministic, but as part of Ark Network,\r\n     it becomes non-deterministic where the result\r\n     depends on the other SmartWeave contracts states.\r\n\"\"\"\r\n\r\n# Contract's events\r\nevent LinkIdentity:\r\n    evmAddress: indexed(address)\r\n    arweaveAddress: indexed(String[43])\r\n    arAddress: String[43]\r\n\r\nevent LaunchContract:\r\n    network: String[25]\r\n\r\nevent PauseState:\r\n    isPaused: bool\r\n\r\n# Contract State\r\nnetwork: public(String[25]) # Ark Network's metadata to identify the contract's network\r\nowner: public(address) # the contract admin\r\npausedContract: public(bool) # contract's pausing state\r\n\r\n@external\r\ndef __init__(_network: String[25], _pausedContract: bool):\r\n    \"\"\"\r\n    @dev contract's initialization\r\n    @param _network network's name. This contract is EVMs compatible\r\n    @param _pausedContract initial contract's pause state. Assigned to False\r\n    \"\"\"\r\n    assert len(_network) > 0\r\n\r\n    self.owner = msg.sender # set the contract admin\r\n    self.network = _network\r\n    self.pausedContract = _pausedContract\r\n\r\n    log LaunchContract(_network)\r\n\r\n\r\n@external\r\ndef reversePauseState(_pause: bool):\r\n    \"\"\"\r\n    @dev admin function to pause/unpause the contract\r\n    @param _pause True to pause the contract & vice-versa\r\n    \"\"\"\r\n\r\n    assert msg.sender == self.owner\r\n    assert _pause != self.pausedContract\r\n\r\n    self.pausedContract = _pause\r\n\r\n    log PauseState(_pause)\r\n\r\n@external\r\ndef linkIdentity(_arweave_address: String[43]):\r\n    \"\"\"\r\n    @dev link an Arweave address to the caller's address (msg.sender)\r\n    @param _arweave_address base64url 43 char string\r\n    \"\"\"\r\n    assert len(_arweave_address) == 43\r\n    assert self.pausedContract == False\r\n\r\n    log LinkIdentity(msg.sender, _arweave_address, _arweave_address)", "ABI": "[{\"name\":\"LinkIdentity\",\"inputs\":[{\"name\":\"evmAddress\",\"type\":\"address\",\"indexed\":true},{\"name\":\"arweaveAddress\",\"type\":\"string\",\"indexed\":true},{\"name\":\"arAddress\",\"type\":\"string\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"LaunchContract\",\"inputs\":[{\"name\":\"network\",\"type\":\"string\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"PauseState\",\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_network\",\"type\":\"string\"},{\"name\":\"_pausedContract\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"reversePauseState\",\"inputs\":[{\"name\":\"_pause\",\"type\":\"bool\"}],\"outputs\":[],\"gas\":41645},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"linkIdentity\",\"inputs\":[{\"name\":\"_arweave_address\",\"type\":\"string\"}],\"outputs\":[],\"gas\":15741},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"network\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":10538},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2550},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pausedContract\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":2580}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.1", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034253430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}