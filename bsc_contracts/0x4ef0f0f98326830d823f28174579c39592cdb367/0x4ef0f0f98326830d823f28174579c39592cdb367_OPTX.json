{"SourceCode": "{\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    \\n    function symbol() external view returns(string memory);\\n    \\n    function name() external view returns(string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"OPTXToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\ninterface IFeeReceiver {\\n    function trigger() external;\\n}\\n\\ninterface IEmissionRecipient {\\n    function trigger() external;\\n}\\n\\ninterface ISwapper {\\n    function buy(address user) external payable;\\n    function sell(address user) external;\\n}\\n\\n/**\\n    Modular Upgradeable Token\\n    Token System Designed By DeFi Mark\\n */\\ncontract OPTX is IERC20, Ownable {\\n\\n    using SafeMath for uint256;\\n\\n    // total supply\\n    uint256 private _totalSupply = 10_000_000 * 10**18;\\n\\n    // token data\\n    string private constant _name = \\u0027OPTX\\u0027;\\n    string private constant _symbol = \\u0027OPTX\\u0027;\\n    uint8  private constant _decimals = 18;\\n\\n    // balances\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    // Emission Rate In Blocks\\n    // 3.472 per block = 100,000 per day\\n    uint256 public emission_rate = 3472222223000000000;\\n\\n    // last time emissions were received\\n    uint256 public lastEmissionBlock;\\n\\n    // emission recipient\\n    address public emission_recipient;\\n\\n    // emission bounty percentage\\n    uint256 public emission_bounty_percentage;\\n\\n    // Swapper\\n    address public swapper;\\n\\n    // Amount Burned\\n    uint256 public totalBurned;\\n\\n    // Taxation on transfers\\n    uint256 public buyFee             = 200;\\n    uint256 public sellFee            = 1000;\\n    uint256 public transferFee        = 0;\\n    uint256 public constant TAX_DENOM = 10000;\\n\\n    // permissions\\n    struct Permissions {\\n        bool isFeeExempt;\\n        bool isLiquidityPool;\\n    }\\n    mapping ( address =\\u003e Permissions ) public permissions;\\n\\n    // Fee Recipients\\n    address public sellFeeRecipient;\\n    address public buyFeeRecipient;\\n    address public transferFeeRecipient;\\n\\n    // Trigger Fee Recipients\\n    bool public triggerBuyRecipient = true;\\n    bool public triggerTransferRecipient = true;\\n    bool public triggerSellRecipient = true;\\n\\n    // events\\n    event SetBuyFeeRecipient(address recipient);\\n    event SetSellFeeRecipient(address recipient);\\n    event SetTransferFeeRecipient(address recipient);\\n    event SetFeeExemption(address account, bool isFeeExempt);\\n    event SetAutomatedMarketMaker(address account, bool isMarketMaker);\\n    event SetFees(uint256 buyFee, uint256 sellFee, uint256 transferFee);\\n    event SetEmissionRate(uint newRate);\\n    event SetSwapper(address newSwapper);\\n    event SetAutoTriggers(bool triggerBuy, bool triggerSell, bool triggerTransfer);\\n    event SetEmissionRecipient(address newRecipient);\\n    event SetEmissionBountyPercent(uint newPercent);\\n    event EmissionsStarted(uint blockNo);\\n\\n    constructor() {\\n\\n        // exempt sender for tax-free initial distribution\\n        permissions[msg.sender].isFeeExempt = true;\\n\\n        // initial supply allocation\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    /////////////////////////////////\\n    /////    ERC20 FUNCTIONS    /////\\n    /////////////////////////////////\\n\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\n    \\n    function name() public pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /** Transfer Function */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if (msg.sender == recipient) {\\n            return _sell(amount, msg.sender);\\n        } else {\\n            return _transferFrom(msg.sender, recipient, amount);\\n        }\\n    }\\n\\n    /** Transfer Function */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\u0027Insufficient Allowance\\u0027);\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n\\n    /////////////////////////////////\\n    /////   PUBLIC FUNCTIONS    /////\\n    /////////////////////////////////\\n\\n    function emitShares() external {\\n\\n        // emit shares\\n        _emitShares(msg.sender);\\n\\n        // trigger recipients\\n        if (sellFeeRecipient != address(0)) {\\n            IFeeReceiver(sellFeeRecipient).trigger();\\n        }\\n        if (buyFeeRecipient != address(0) \\u0026\\u0026 buyFeeRecipient != sellFeeRecipient) {\\n            IFeeReceiver(buyFeeRecipient).trigger();\\n        }\\n        if (transferFeeRecipient != address(0) \\u0026\\u0026 transferFeeRecipient != buyFeeRecipient) {\\n            IFeeReceiver(transferFeeRecipient).trigger();\\n        }\\n    }\\n\\n    function burn(uint256 amount) external returns (bool) {\\n        return _burn(msg.sender, amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) external returns (bool) {\\n        _allowances[account][msg.sender] = _allowances[account][msg.sender].sub(amount, \\u0027Insufficient Allowance\\u0027);\\n        return _burn(account, amount);\\n    }\\n\\n    function sell(uint256 amount) external returns (bool) {\\n        return _sell(amount, msg.sender);\\n    }\\n\\n    function sellFor(uint256 amount, address recipient) external returns (bool) {\\n        return _sell(amount, recipient);\\n    }\\n\\n    function buyFor(address account) external payable {\\n        ISwapper(swapper).buy{value: msg.value}(account);\\n    }\\n\\n    receive() external payable {\\n        ISwapper(swapper).buy{value: address(this).balance}(msg.sender);\\n    }\\n\\n    /////////////////////////////////\\n    /////    OWNER FUNCTIONS    /////\\n    /////////////////////////////////\\n\\n    function withdraw(address token) external onlyOwner {\\n        require(token != address(0), \\u0027Zero Address\\u0027);\\n        bool s = IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\\n        require(s, \\u0027Failure On Token Withdraw\\u0027);\\n    }\\n\\n    function withdrawBNB() external onlyOwner {\\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(s);\\n    }\\n\\n    function setTransferFeeRecipient(address recipient) external onlyOwner {\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\n        transferFeeRecipient = recipient;\\n        permissions[recipient].isFeeExempt = true;\\n        emit SetTransferFeeRecipient(recipient);\\n    }\\n\\n    function setBuyFeeRecipient(address recipient) external onlyOwner {\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\n        buyFeeRecipient = recipient;\\n        permissions[recipient].isFeeExempt = true;\\n        emit SetBuyFeeRecipient(recipient);\\n    }\\n\\n    function setSellFeeRecipient(address recipient) external onlyOwner {\\n        require(recipient != address(0), \\u0027Zero Address\\u0027);\\n        sellFeeRecipient = recipient;\\n        permissions[recipient].isFeeExempt = true;\\n        emit SetSellFeeRecipient(recipient);\\n    }\\n\\n    function registerAutomatedMarketMaker(address account) external onlyOwner {\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\n        require(!permissions[account].isLiquidityPool, \\u0027Already An AMM\\u0027);\\n        permissions[account].isLiquidityPool = true;\\n        emit SetAutomatedMarketMaker(account, true);\\n    }\\n\\n    function unRegisterAutomatedMarketMaker(address account) external onlyOwner {\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\n        require(permissions[account].isLiquidityPool, \\u0027Not An AMM\\u0027);\\n        permissions[account].isLiquidityPool = false;\\n        emit SetAutomatedMarketMaker(account, false);\\n    }\\n\\n    function setAutoTriggers(\\n        bool autoBuyTrigger,\\n        bool autoTransferTrigger,\\n        bool autoSellTrigger\\n    ) external onlyOwner {\\n        triggerBuyRecipient = autoBuyTrigger;\\n        triggerTransferRecipient = autoTransferTrigger;\\n        triggerSellRecipient = autoSellTrigger;\\n        emit SetAutoTriggers(autoBuyTrigger, autoSellTrigger, autoTransferTrigger);\\n    }\\n\\n    function setFees(uint _buyFee, uint _sellFee, uint _transferFee) external onlyOwner {\\n        require(\\n            _buyFee \\u003c= 2000,\\n            \\u0027Buy Fee Too High\\u0027\\n        );\\n        require(\\n            _sellFee \\u003c= 2000,\\n            \\u0027Sell Fee Too High\\u0027\\n        );\\n        require(\\n            _transferFee \\u003c= 2000,\\n            \\u0027Transfer Fee Too High\\u0027\\n        );\\n\\n        buyFee = _buyFee;\\n        sellFee = _sellFee;\\n        transferFee = _transferFee;\\n\\n        emit SetFees(_buyFee, _sellFee, _transferFee);\\n    }\\n\\n    function setFeeExempt(address account, bool isExempt) external onlyOwner {\\n        require(account != address(0), \\u0027Zero Address\\u0027);\\n        permissions[account].isFeeExempt = isExempt;\\n        emit SetFeeExemption(account, isExempt);\\n    }\\n\\n    function setSwapper(address newSwapper) external onlyOwner {\\n        require(\\n            newSwapper != address(0),\\n            \\u0027Zero Address\\u0027\\n        );\\n        swapper = newSwapper;\\n        emit SetSwapper(newSwapper);\\n    }\\n\\n    function setEmissionRate(uint256 newRate) external onlyOwner {\\n        require(\\n            newRate \\u003c= 10**38,\\n            \\u0027Cannot Raise Emission Rate Above 10^20 OPTX Per Block\\u0027\\n        );\\n        emission_rate = newRate;\\n        emit SetEmissionRate(newRate);\\n    }\\n\\n    function setEmissionRecipient(address newRecipient) external onlyOwner {\\n        require(\\n            newRecipient != address(0),\\n            \\u0027Zero Recipient\\u0027\\n        );\\n        emission_recipient = newRecipient;\\n        emit SetEmissionRecipient(newRecipient);\\n    }\\n\\n    function setEmissionBountyPercent(uint256 newPercent) external onlyOwner {\\n        require(\\n            newPercent \\u003c= 250,\\n            \\u0027Emission Percentage Too High\\u0027\\n        );\\n        emission_bounty_percentage = newPercent;\\n        emit SetEmissionBountyPercent(newPercent);\\n    }\\n\\n    function startEmissions() external onlyOwner {\\n        require(\\n            lastEmissionBlock == 0,\\n            \\u0027Emissions Have Already Started\\u0027\\n        );\\n        lastEmissionBlock = block.number;\\n        emit EmissionsStarted(block.number);\\n    }\\n\\n    /////////////////////////////////\\n    /////     READ FUNCTIONS    /////\\n    /////////////////////////////////\\n\\n    function getTax(address sender, address recipient, uint256 amount) public view returns (uint256, address, bool) {\\n        if ( permissions[sender].isFeeExempt || permissions[recipient].isFeeExempt ) {\\n            return (0, address(0), false);\\n        }\\n        return permissions[sender].isLiquidityPool ? \\n               (amount.mul(buyFee).div(TAX_DENOM), buyFeeRecipient, triggerBuyRecipient) : \\n               permissions[recipient].isLiquidityPool ? \\n               (amount.mul(sellFee).div(TAX_DENOM), sellFeeRecipient, triggerSellRecipient) :\\n               (amount.mul(transferFee).div(TAX_DENOM), transferFeeRecipient, triggerTransferRecipient);\\n    }\\n\\n    function pendingEmissions() public view returns (uint256) {\\n        if (lastEmissionBlock == 0 || lastEmissionBlock \\u003e= block.number || emission_rate == 0) {\\n            return 0;\\n        }\\n\\n        return (block.number - lastEmissionBlock) * emission_rate;\\n    }\\n\\n    function currentBounty() public view returns (uint256) {\\n        uint pending = pendingEmissions();\\n        \\n        return ( pending * emission_bounty_percentage ) / 1_000;\\n    }\\n\\n    //////////////////////////////////\\n    /////   INTERNAL FUNCTIONS   /////\\n    //////////////////////////////////\\n\\n    /** Internal Transfer */\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\n        require(\\n            recipient != address(0),\\n            \\u0027Zero Recipient\\u0027\\n        );\\n        require(\\n            amount \\u003e 0,\\n            \\u0027Zero Amount\\u0027\\n        );\\n        require(\\n            amount \\u003c= balanceOf(sender),\\n            \\u0027Insufficient Balance\\u0027\\n        );\\n        \\n        // decrement sender balance\\n        _balances[sender] -= amount;\\n\\n        // fee for transaction\\n        (uint256 fee, address feeDestination, bool trigger) = getTax(sender, recipient, amount);\\n\\n        // give amount to recipient less fee\\n        uint256 sendAmount = amount - fee;\\n        _balances[recipient] += sendAmount;\\n        emit Transfer(sender, recipient, sendAmount);\\n\\n        // allocate fee if any\\n        if (fee \\u003e 0) {\\n\\n            // if recipient field is valid\\n            bool isValidRecipient = feeDestination != address(0) \\u0026\\u0026 feeDestination != address(this);\\n\\n            // allocate amount to recipient\\n            address feeRecipient = isValidRecipient ? feeDestination : address(this);\\n            _balances[feeRecipient] = _balances[feeRecipient].add(fee);\\n            emit Transfer(sender, feeRecipient, fee);\\n\\n            // if valid and trigger is enabled, trigger tokenomics mid transfer\\n            if (trigger \\u0026\\u0026 isValidRecipient) {\\n                IFeeReceiver(feeRecipient).trigger();\\n            }\\n        }\\n\\n        // handle emissions if applicable\\n        if (recipient != emission_recipient) {\\n            _emitShares(address(0));\\n        }\\n        return true;\\n    }\\n\\n    function _burn(address account, uint256 amount) internal returns (bool) {\\n        require(\\n            account != address(0),\\n            \\u0027Zero Address\\u0027\\n        );\\n        require(\\n            amount \\u003e 0,\\n            \\u0027Zero Amount\\u0027\\n        );\\n        require(\\n            amount \\u003c= balanceOf(account),\\n            \\u0027Insufficient Balance\\u0027\\n        );\\n\\n        // delete from balance and supply\\n        _balances[account] = _balances[account].sub(amount, \\u0027Balance Underflow\\u0027);\\n        _totalSupply = _totalSupply.sub(amount, \\u0027Supply Underflow\\u0027);\\n\\n        // increment total burned\\n        unchecked {\\n            totalBurned += amount;\\n        }\\n\\n        // emit transfer\\n        emit Transfer(account, address(0), amount);\\n        return true;\\n    }\\n\\n    function _sell(uint256 amount, address recipient) internal returns (bool) {\\n        require(\\n            amount \\u003e 0,\\n            \\u0027Zero Amount\\u0027\\n        );\\n        require(\\n            recipient != address(0) \\u0026\\u0026 recipient != address(this) \\u0026\\u0026 recipient != swapper,\\n            \\u0027Invalid Recipient\\u0027\\n        );\\n        require(\\n            amount \\u003c= balanceOf(msg.sender),\\n            \\u0027Insufficient Balance\\u0027\\n        );\\n\\n        // re-allocate balances\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        _balances[swapper] = _balances[swapper].add(amount);\\n        emit Transfer(msg.sender, swapper, amount);\\n\\n        // sell token for user\\n        ISwapper(swapper).sell(recipient);\\n        return true;\\n    }\\n\\n    function _emitShares(address bountyReceiver) internal {\\n\\n        // fetch pending emissions\\n        uint256 emissions = pendingEmissions();\\n        uint256 bounty = currentBounty();\\n        if (emissions == 0 || emission_recipient == address(0)) {\\n            return;\\n        }\\n\\n        // reset emission timer\\n        lastEmissionBlock = block.number;\\n\\n        // if this emit was done via bounty\\n        if (bountyReceiver != address(0) \\u0026\\u0026 bounty \\u003e 0) {\\n\\n            // decrement emissions\\n            emissions = emissions - bounty;\\n\\n            // emit bounty to bountyReceiver\\n            _balances[bountyReceiver] += bounty;\\n            _totalSupply += bounty;\\n            emit Transfer(address(0), bountyReceiver, bounty);\\n            \\n        }\\n\\n        // emit new shares to emission recipient\\n        _balances[emission_recipient] += emissions;\\n        _totalSupply += emissions;\\n        emit Transfer(address(0), emission_recipient, emissions);\\n\\n        // trigger emission recipient\\n        IEmissionRecipient(emission_recipient).trigger();\\n    }\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Owner\\n * @dev Set \\u0026 change owner\\n */\\ncontract Ownable {\\n\\n    address private owner;\\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    \\n    // modifier to check if caller is owner\\n    modifier onlyOwner() {\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor() {\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) public onlyOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Return owner address \\n     * @return address of owner\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"EmissionsStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerSell\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerTransfer\",\"type\":\"bool\"}],\"name\":\"SetAutoTriggers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketMaker\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetBuyFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"SetEmissionBountyPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"SetEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"SetEmissionRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetSellFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"SetSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetTransferFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAX_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission_bounty_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission_recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emitShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEmissionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingEmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityPool\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sellFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"autoBuyTrigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoTransferTrigger\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoSellTrigger\",\"type\":\"bool\"}],\"name\":\"setAutoTriggers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setBuyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"setEmissionBountyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"setEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"setEmissionRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setSellFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"setSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startEmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerBuyRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSellRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransferRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unRegisterAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OPTX", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e5508bdfd3da8a6a4e1b1488407089a2a94a2e7cf140cbabf4a190e1fed9cf32"}