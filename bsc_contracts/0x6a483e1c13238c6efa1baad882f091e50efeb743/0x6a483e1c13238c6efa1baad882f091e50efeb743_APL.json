{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-04-27\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-04-27\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-04-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-04-24\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external ;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => mapping(address => uint256)) private _fromToAmount;\r\n    mapping(address => address) public _parent;\r\n\r\n    address private _marketAddress;\r\n    address public _deadAddress;\r\n\r\n    uint256 private nftPool;\r\n    address private _fund;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public constant MAX_INT = 2**256 - 1;\r\n    uint256 private _lockTime = 30 days;\r\n\r\n    mapping(address => bool) private _fwl;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    address private _nft;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    address private _usdt;\r\n    address private _doge;\r\n    mapping(address => bool) private _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n\r\n\r\n    address public _mainPair;\r\n\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    event FlagEvent(bool indexed flag);\r\n\r\n    constructor (string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply, address RouterAddress, address USDTAddress,  address marketAddress){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        address usdt = USDTAddress;\r\n\r\n        _usdt = usdt;\r\n\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _swapPairList[usdtPair] = true;\r\n\r\n        address mainPair = swapFactory.createPair(address(this), swapRouter.WETH());\r\n        _swapPairList[mainPair] = true;\r\n\r\n        _mainPair = usdtPair;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _totalSupply = total;\r\n\r\n        _balances[msg.sender] = total ;\r\n        emit Transfer(address(0), msg.sender, _balances[msg.sender]);\r\n\r\n        _marketAddress = marketAddress;\r\n        _deadAddress = address(0x000000000000000000000000000000000000dEaD);\r\n        _fwl[marketAddress] = true;\r\n        _fwl[address(this)] = true;\r\n        _fwl[address(swapRouter)] = true;\r\n        _fwl[msg.sender] = true;\r\n        _fwl[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n//        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        excludeLpProvider[address(0x7ee058420e5937496F5a2096f04caA7721cF70cc)] = true;\r\n\r\n        _lpRewardCondition = 1 * 10 ** IERC20(usdt).decimals() /2 ;\r\n        _destroyCondition = 5000 * 10 ** IERC20(usdt).decimals() ;\r\n\r\n\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n\r\n    function getPrice2() public view  returns (uint256) {\r\n        IERC20 token = IERC20(address(this));\r\n        IERC20 usdt = IERC20(_usdt);\r\n        uint256 tokenBalance = token.balanceOf(_mainPair);\r\n        uint256 usdtBalance = usdt.balanceOf(_mainPair);\r\n        uint256 price =  tokenBalance / (usdtBalance/(10 * 10 ** 4))  ;\r\n        return price;\r\n    }\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        if (_swapPairList[to] && !_fwl[from] && !_fwl[to]) {\r\n\r\n            // require(amount <= (_balances[from])*99/100, \"ERC20: sell amount exceeds balance 99%\");\r\n        }\r\n\r\n        if(_fromToAmount[to][from] == 0){\r\n            if(_fromToAmount[from][to] == 0 && amount >= 1 * 10 ** (_decimals - 2) && _parent[to] == address(0))  {\r\n                _fromToAmount[from][to] = amount;\r\n                _parent[to]=from;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (_fwl[from] || _fwl[to]){\r\n\r\n            _tokenTransfer(from, to, amount, 0);\r\n        }else{\r\n            bool isAdd = false;\r\n            bool isDel = false;\r\n            bool isLPLocking = false;\r\n            if (_swapPairList[to]) {\r\n\r\n                (isAdd,) = getLPStatus(from,to);\r\n                if(isAdd){\r\n                    addLpProvider(from);\r\n                    userAddLPTime[from] = block.timestamp;\r\n                    _tokenTransfer(from, to, amount, 0);\r\n                }else{\r\n\r\n                    uint256 destroyBalance = IERC20(address(this)).balanceOf(_deadAddress);\r\n\r\n                    if( destroyBalance <= _destroyCondition){\r\n                        _tokenTransfer(from, _deadAddress, amount*1/100, 0);\r\n\r\n                        _tokenTransfer(from, address(this), amount * 9 /1000, 0);\r\n                        _tokenTransfer(from, address(this), amount*2/100, 0);\r\n                        swapUSDT(amount* 9 /1000);\r\n                        _tokenTransfer(from, from, amount/1000, 0);\r\n\r\n                        _tokenTransfer(from, to, amount* 960/1000, 0);\r\n                    }else{\r\n\r\n                        _tokenTransfer(from, address(this), amount * 9 /1000, 0);\r\n                        _tokenTransfer(from, address(this), amount*2/100, 0);\r\n                        swapUSDT(amount* 9 /1000);\r\n                        _tokenTransfer(from, from, amount/1000, 0);\r\n\r\n                        _tokenTransfer(from, to, amount* 970/1000, 0);\r\n                    }\r\n\r\n                }\r\n\r\n            }else if(_swapPairList[from]){\r\n\r\n                (,isDel) = getLPStatus(from,to);\r\n                IUniswapV2Pair pair;\r\n                pair = IUniswapV2Pair(from);\r\n                if(isDel){\r\n\r\n                    bool isLPDel = false;\r\n                    if(_getIndex(to,lpProviders) != MAX_INT){\r\n                        isLPDel = true;\r\n                        if( pair.balanceOf(to) == amount){\r\n                            _removeLp(to);\r\n                            userAddLPTime[to] = 0;\r\n                        }\r\n                        uint256 userTime = userAddLPTime[to];\r\n\r\n                        isLPLocking = userTime.add(_lockTime) >= block.timestamp;\r\n                    }\r\n                    require(isLPDel, \"No permission to withdraw LP\");\r\n                    if(isLPLocking){\r\n                        _tokenTransfer(from, to, amount/100, 0);\r\n                        _tokenTransfer(from, _deadAddress, amount*99/100, 0);\r\n                    }else{\r\n                        _tokenTransfer(from, to, amount, 0);\r\n                    }\r\n                }else{\r\n\r\n                    _tokenTransfer(from, _mainPair, amount*1/100, 0);\r\n\r\n                    uint256 destroyBalance = IERC20(address(this)).balanceOf(_deadAddress);\r\n\r\n                    if( destroyBalance <= _destroyCondition){\r\n                        uint256 shareAmount = 0;\r\n                        address parent = _parent[to];\r\n                        IERC20 _APL = IERC20(address(this));\r\n                        uint256 parentBalance = _APL.balanceOf(parent);\r\n\r\n                        if(parent!=address(0) && parent!=from){\r\n\r\n                            if(parentBalance >= 1 * 10 ** _decimals){\r\n                                shareAmount += amount*19/1000;\r\n                                _tokenTransfer(from, parent, amount*19/1000, 0);\r\n                            }\r\n                        }\r\n\r\n                        uint256 remainAmount = amount*19/1000 - shareAmount;\r\n                        if(remainAmount > 0){\r\n\r\n                            _tokenTransfer(from, _deadAddress, remainAmount, 0);\r\n                        }\r\n\r\n                        _tokenTransfer(from, to, amount*971/1000, 0);\r\n                    }else{\r\n                        _tokenTransfer(from, to, amount*990/1000, 0);\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            }else{\r\n\r\n                _tokenTransfer(from, to, amount, 0);\r\n            }\r\n        }\r\n\r\n\r\n        if (from != address(this)) {\r\n            processLP(500000);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (fee > 0) {\r\n            feeAmount = tAmount * fee / 100;\r\n            _takeTransfer(\r\n                sender,\r\n                address(this),\r\n                feeAmount\r\n            );\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n\r\n\r\n    function swapUSDT(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n\r\n        USDT.transferFrom(address(_tokenDistributor), _marketAddress, usdtBalance);\r\n//        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance*3/4);\r\n    }\r\n\r\n    function swapDOGEInSwap(uint256 tokenAmount) private lockTheSwap{\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _doge;\r\n        IERC20(address(this)).approve(address(_swapRouter),tokenAmount);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 DOGE = IERC20(_doge);\r\n        uint256 dogeBalance = DOGE.balanceOf(address(_tokenDistributor));\r\n\r\n        DOGE.transferFrom(address(_tokenDistributor), address(this), dogeBalance);\r\n    }\r\n\r\n\r\n    function getLPStatus(address from,address to) internal view  returns (bool isAdd,bool isDel){\r\n        IUniswapV2Pair pair;\r\n        address token = address(this);\r\n        if(_swapPairList[to]){\r\n            pair = IUniswapV2Pair(to);\r\n        }else{\r\n            pair = IUniswapV2Pair(from);\r\n        }\r\n        isAdd = false;\r\n        isDel = false;\r\n        address token0 = pair.token0();\r\n        address token1 = pair.token1();\r\n        (uint r0,uint r1,) = pair.getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(pair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(pair));\r\n        if (_swapPairList[to]) {\r\n            if (token0 == token) {\r\n                if (bal1 > r1) {\r\n                    uint change1 = bal1 - r1;\r\n                    isAdd = change1 > 1000;\r\n                }\r\n            } else {\r\n                if (bal0 > r0) {\r\n                    uint change0 = bal0 - r0;\r\n                    isAdd = change0 > 1000;\r\n                }\r\n            }\r\n        }else {\r\n            if (token0 == token) {\r\n                if (bal1 < r1 && r1 > 0) {\r\n                    uint change1 = r1 - bal1;\r\n                    isDel = change1 > 0;\r\n                }\r\n            } else {\r\n                if (bal0 < r0 && r0 > 0) {\r\n                    uint change0 = r0 - bal0;\r\n                    isDel = change0 > 0;\r\n                }\r\n            }\r\n        }\r\n        return (isAdd,isDel);\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setMarketAddress(address addr) external onlyOwner {\r\n        _marketAddress = addr;\r\n        _fwl[addr] = true;\r\n    }\r\n\r\n    function setNFTAddress(address addr) external onlyOwner {\r\n        _nft =addr ;\r\n    }\r\n\r\n    function addNftHolderCall(address addr) external onlyNft {\r\n        _addnftHolder(addr);\r\n    }\r\n\r\n    function excludeNftHoldersCall(address addr,bool flag) external onlyNft {\r\n        excludeNftHolders[addr] = flag;\r\n    }\r\n\r\n\r\n\r\n    function setfwl(address addr, bool enable) external onlyOwner {\r\n        _fwl[addr] = enable;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(_marketAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        IERC20(token).transfer(_marketAddress, amount);\r\n    }\r\n\r\n    address[] private lpProviders;\r\n    mapping(address => uint256) lpProviderIndex;\r\n    mapping(address => bool) excludeLpProvider;\r\n\r\n    address[] private tokenHolders;\r\n    mapping(address => uint256) tokenHoldersIndex;\r\n    mapping(address => bool) excludeTokenHolders;\r\n\r\n    address[] private nftHolders;\r\n    mapping(address => uint256) nftHoldersIndex;\r\n    mapping(address => bool) excludeNftHolders;\r\n\r\n    function _getIndex(address addr,address[] memory array) public pure returns (uint){\r\n        if(addr == address(0)){\r\n            return MAX_INT;\r\n        }\r\n        for(uint i = 0;i < array.length; i++){\r\n            if(addr == array[i]){\r\n                return i;\r\n            }\r\n        }\r\n        return MAX_INT;\r\n    }\r\n\r\n    function addLpProvider(address addr) private {\r\n        if (0 == lpProviderIndex[addr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != addr) {\r\n                lpProviderIndex[addr] = lpProviders.length;\r\n                lpProviders.push(addr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _addnftHolder(address addr) private {\r\n        if (0 == nftHoldersIndex[addr]) {\r\n            if (0 == nftHolders.length || nftHolders[0] != addr) {\r\n                nftHoldersIndex[addr] = nftHolders.length;\r\n                nftHolders.push(addr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addTokenHolders(address addr) private {\r\n        if (0 == tokenHoldersIndex[addr]) {\r\n            if (0 == tokenHolders.length || tokenHolders[0] != addr) {\r\n                tokenHoldersIndex[addr] = tokenHolders.length;\r\n                tokenHolders.push(addr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function manulAddLpProvider(address addr) public onlyOwner {\r\n        addLpProvider(addr);\r\n    }\r\n\r\n    function batchManulAddLpProvider(address[] memory _users) public onlyOwner {\r\n         require(_users.length > 0,\"null list!\");\r\n         for(uint256 i = 0; i<_users.length;i++){\r\n              addLpProvider(_users[i]);\r\n         }\r\n    }\r\n\r\n    function getLps() public view returns(address [] memory){\r\n        return lpProviders;\r\n    }\r\n\r\n\r\n    function _removeLp(address account) private {\r\n        for (uint256 i = 0; i < lpProviders.length; i++) {\r\n            if (lpProviders[i] == account) {\r\n                lpProviders[i] = lpProviders[lpProviders.length - 1];\r\n                lpProviders.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    mapping(address => uint256) public userAddLPTime;\r\n    uint256 private currentIndex;\r\n    uint256 private tokenHoldersCurrentIndex;\r\n    uint256 private nftHoldersCurrentIndex;\r\n    uint256 public _lpRewardCondition;\r\n    uint256 public _destroyCondition;\r\n    uint256 public _tokenHoldersCondition;\r\n    uint256 public _nftHoldersCondition;\r\n    uint256 public _progressLPTime;\r\n    uint256 public _progresstokenHoldersTime;\r\n    uint256 public _progressnftHoldersTime;\r\n\r\n    function setProgressLPTime(uint256 time) public onlyOwner {\r\n        _progressLPTime=time;\r\n    }\r\n\r\n    function processLP(uint256 gas) public {\r\n        uint256 timestamp = block.timestamp;\r\n        // if (_progressLPTime + 86400 > timestamp) {\r\n        //     return;\r\n        // }\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 token = IERC20(address(this));\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        if (tokenBalance < _lpRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentIndex];\r\n            pairBalance = mainpair.balanceOf(shareHolder);\r\n            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {\r\n                amount = tokenBalance * pairBalance / totalPair;\r\n                if (amount > 0) {\r\n                    token.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        _progressLPTime = timestamp;\r\n    }\r\n\r\n\r\n    function setMainPair(address pair) external onlyOwner {\r\n        _mainPair = pair;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyOwner {\r\n        _lpRewardCondition = amount;\r\n    }\r\n      function setDestroyCondition(uint256 amount) external onlyOwner {\r\n        _destroyCondition =  amount  * 10** IERC20(_usdt).decimals();\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n\r\n\r\n    modifier onlyNft() {\r\n        require(_owner == msg.sender || _nft == msg.sender, \"!NFT Address\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ncontract APL is AbsToken {\r\n\r\n    constructor() AbsToken(\r\n        \"APOLLO\",\r\n        \"APL\",\r\n        18,\r\n        8000,\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E), // PancakeSwap: Router v2\r\n        address(0x55d398326f99059fF775485246999027B3197955), // USDT\r\n        address(0x7441c735fbd7A7bE7D938F9fC15B598C024802b4) // market\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"FlagEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destroyCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"array\",\"type\":\"address[]\"}],\"name\":\"_getIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftHoldersCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_progressLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_progressnftHoldersTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_progresstokenHoldersTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenHoldersCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addNftHolderCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"batchManulAddLpProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"excludeNftHoldersCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLps\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"manulAddLpProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDestroyCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setMainPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setProgressLPTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setfwl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAddLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "APL", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d32b5dc9cf3ccc7450293d3338080ba98e2ef7f80a71434cd64c73c2e186a7b"}